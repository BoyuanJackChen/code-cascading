[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in lst1:\n            lst1.append(test_tup1[i])\n    for j in range(len(test_tup2)):\n        if test_tup2[j] not in lst2:\n            lst2.append(test_tup2[j])\n    return(lst1 + lst2)\n",
        "num_ids": 126
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set = set(test_tup1) & set(test_tup2)\n    return test_set\n",
        "num_ids": 31
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = []\n    i = 0\n    while i < len(test_tup1) and i < len(test_tup2):\n        if test_tup1[i] == test_tup2[i]:\n            common.append(test_tup1[i])\n        i += 1\n    return common\n",
        "num_ids": 79
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # test_tup1 = set(test_tup1)\n    # test_tup2 = set(test_tup2)\n    # return list(test_tup1 & test_tup2)\n    return set(test_tup1) & set(test_tup2)\n",
        "num_ids": 74
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements\n",
        "num_ids": 70
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    temp_list = []\n    for x in range(len(test_tup1)):\n        temp_list.append(test_tup1[x])\n    for y in range(len(test_tup2)):\n        if(temp_list[y] in test_tup2):\n            print(temp_list[y])\n            return True\n    return False\n",
        "num_ids": 94
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    shared_elements = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                shared_elements.append(i)\n                break\n    return shared_elements\n    \nif __name__ == \"__main__\":\n    \n    test_tup1 = (1,2,3)\n    test_tup2 = (2,3,4)\n    \n    print(f\"The first tuple: {test_tup1}\")\n    print(f\"The second tuple: {test_tup2}\")\n    \n    print(f\"\\n{similar_elements(test_tup1, test_tup2)}\")\n    \n    \n",
        "num_ids": 225
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Comparing the elements in the two lists\n    for i in test_tup1:\n        if i in test_tup2:\n            if i not in shared_element:\n                shared_element.append(i)\n    return shared_element\n",
        "num_ids": 61
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n                break\n        else:\n            return True\n        return False\n    else:\n        return False\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n",
        "num_ids": 29
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count += 1\n    if count > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n<2):\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n%i==0):\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #code here\n    i=2\n    while i<=math.sqrt(n):\n        if n%i==0:\n            return False\n        i=i+1\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n % 2 == 0 or n <= 1:\n        return True\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 81
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check from 2 to int(sqrt(n))\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n",
        "num_ids": 95
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2:\n        return True\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    flag = True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            flag = False\n            break\n    if flag:\n        return False\n    else:\n        return True\n",
        "num_ids": 62
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    q=[]\n    for i in nums:\n        if len(q)<n:\n            hq.heappush(q,i)\n        elif i > q[0]:\n            hq.heapreplace(q,i)\n    return q\n",
        "num_ids": 67
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return_list = []\n    hq.heapify(nums)\n    for i in range(0,n):\n        return_list.append(hq.heappop(nums))\n    return return_list\n",
        "num_ids": 56
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return hq.nlargest(n,nums)\n",
        "num_ids": 28
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,i)\n    for i in range(n):\n        print(hq.heappop(h))\n",
        "num_ids": 50
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n    for i in range(n-1,-1,-1):\n        hq.heappush(heap, nums[i])\n    return heap\n",
        "num_ids": 70
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    ret_list = []\n    for i in range(n):\n        ret_list.append(hq.heappop(nums))\n    return ret_list\n",
        "num_ids": 54
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) <= 1:\n        return nums\n    h = []\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] > h[0]:\n            hq.heappop(h)\n            hq.heappush(h,nums[i])\n    res = []\n    while h:\n        res.append(hq.heappop(h))\n    return res\n",
        "num_ids": 132
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # TC: O(N log N)\n    # SC: O(1)\n    nums.sort(reverse=True)\n    heapq.heapify(nums)\n    return nums[:n]\n",
        "num_ids": 55
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def swap(i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    if len(nums)<n:\n        return nums\n    s = []\n    for i in range(len(nums)-1,-1,-1):\n        if len(s) == n:\n            break\n        if nums[i] > nums[0]:\n            swap(i,0)\n            s.append(nums[i])\n    return s\ndef heap_queue_largest_1(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return nums\n    s = []\n    for i in range(len(nums)-1,-1,-1):\n        if len(s) == n:\n            break\n        if nums[i] > nums[0]:\n            swap(i,0)\n            s.append(nums[i])\n    return s\ndef heap_queue_largest_2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return nums\n    s = []\n    for i in range(len(nums)-1,-1,-1):\n        if len(s) == n:\n            break\n        if nums[i] > nums[0]:\n            swap(i,0)\n            s.append(nums[i])\n    return s\ndef heap_queue_largest_3(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def swap(i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    if len(nums)<n:\n        return nums\n    s = []\n    for i in range(len(nums)-1,-1,-1):\n        if len(s) == n:\n            break\n        if nums[i] > nums[0]:\n            swap(i,0)\n            s.append(nums[i])\n    return s\ndef heap_queue_largest_4(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        h.append(nums.pop())\n    while len(h)>0 and nums:\n        if h[0] > nums[0]:\n            h.pop(0)\n        else:\n            swap(0,len(h)-1)\n            nums.pop()\n    return h\ndef heap_queue_largest_5(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        h.append(nums.pop())\n    while len(h)>0 and nums:\n        if h[0] > nums[0]:\n            h.pop(0)\n        else:\n            swap(0,len(h)-1)\n            nums.pop()\n    return h\ndef heap_queue_largest_6(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def swap(i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    if len(nums)<n:\n        return nums\n    s = []\n    for i in range(len(nums)-1,-1,-1):\n        if len(s) == n:\n            break\n        if nums[i] > nums[0]:\n            swap(i,0)\n            s.append(nums[i])\n    return s\ndef heap_queue_largest_7(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def swap(i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    if len(nums)<n:\n        return nums\n    s = []\n    for i in range(len(nums)-1,-1,-1):\n        if len(s) == n:\n            break\n        if nums[i] > nums[0]:\n            swap(i,0)\n            s.append(nums[i])\n    return s\ndef heap_queue_largest_8(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def swap(i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    if len(nums)<n:\n        return nums\n    s = []\n    for i in range(len(nums)-1,-1,-1):\n        if len(s) == n:\n            break\n        if nums[i] > nums[0]:\n            swap(i,0)\n            s.append(nums[i])\n    return s\ndef heap_queue_largest_9(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def swap(i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    if len(nums)<n:\n        return nums\n    s = []\n    for i in range(len(nums)-1,-1,-1):\n        if len(s) == n:\n            break\n        if nums[i] > nums[0]:\n            swap(i,0)\n            s.append(nums[i])\n    return s\ndef heap_queue_largest_10(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def swap(i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    if len(nums)<n:\n        return nums\n    s = []\n    for i in range(len(nums)-1,-1,-1):\n        if len(s) == n:\n            break\n        if nums[i] > nums[0]:\n            swap(i,0)\n            s.append(nums[i])\n    return s\ndef heap_queue_largest_11(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def swap(i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n    if len(nums)<n:\n        return nums\n    h = []\n    for i in range(n):\n        h.append(nums.pop())\n    while len(h)>0 and nums:\n        if h[0] > nums[0]:\n            h.pop(0)\n        else:\n            swap(0,len(h)-1)\n            nums.pop()\n    return h\ndef heap_queue_largest_12(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def swap(i,j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] ",
        "num_ids": 40
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        largest = nums[0]\n        nums[0] = nums[-1]\n        nums.pop(-1)\n        hq.heapify(nums)\n        print(largest)\n",
        "num_ids": 73
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x % 2 == 0):\n        x = x / 2\n    return (x == 1)\n",
        "num_ids": 27
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #if x == 0:\n    #    return False\n    #else:\n    #    return not (x & (x-1))\n    #return not (x&(x-1))\n    if x == 0:\n        return False\n    while x > 0:\n        if x%2!= 0:\n            return False\n        x = x//2\n    return True\n    \n",
        "num_ids": 93
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1)==0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 1):\n        return False\n    while (x):\n        x = x >> 1\n    return True\n    # Code here\n    ",
        "num_ids": 37
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    '''\n    >>> is_Power_Of_Two(16)\n    True\n    >>> is_Power_Of_Two(1)\n    False\n    >>> is_Power_Of_Two(4)\n    True\n    >>> is_Power_Of_Two(5)\n    False\n    >>> is_Power_Of_Two(27)\n    True\n    >>> is_Power_Of_Two(28)\n    False\n    '''\n    return True if x & (x-1) == 0 else False\n",
        "num_ids": 18
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if ((x&1)==0):\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x == (1 << x.bit_length() - 1) \n",
        "num_ids": 20
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if (x & 1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    x = re.findall('[a-zA-Z]+', text)\n    result = []\n    for i in x:\n        if len(i) >= 4:\n            result.append(i)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    result = pattern.findall(text)\n    return result\nprint(find_char_long('abc1def2ghij3'))\n",
        "num_ids": 53
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r\"\\b\\w{4,}\\b\", text)\n",
        "num_ids": 24
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = r'\\b\\w+\\b'\n    result = re.findall(regex, text)\n    print(result)\n",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for i in text.split():\n        if len(i) >= 4:\n            result.append(i)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split(\" \"):\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    # txt = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # result = []\n    # for i in txt:\n    #     if len(i) >= 4:\n    #         result.append(i)\n    \n    # print(result)\n    \n    # char_long = re.findall(r'\\w{4,}',text)\n    \n    # print(char_long)\n    \n    return re.findall(r'\\w{4,}',text)\n",
        "num_ids": 131
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [x for x in re.findall('\\w{4,}', text)]\n",
        "num_ids": 24
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[A-Za-z]+'\n    return re.findall(pattern, text)\n",
        "num_ids": 29
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #result = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    #result = re.findall(r'\\b[a-zA-Z]+[a-zA-Z0-9]+\\b', text)\n    result = re.findall(r'\\b[a-zA-Z]+[a-zA-Z0-9]{4,}\\b', text)\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for x in nums:\n        squares.append(x*x)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sq = []\n    for i in range(len(nums)):\n        sq.append(nums[i]*nums[i])\n    return sq\n",
        "num_ids": 41
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums_sqr = []\n    for num in nums:\n        nums_sqr.append(num**2)\n    return nums_sqr\n",
        "num_ids": 41
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    output = []\n    for num in nums:\n        output.append(num * num)\n    return output\n    \n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**2)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num * num for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        print(nums[i] ** 2)\n    pass\n",
        "num_ids": 30
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i ** 2)\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**2)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    arr = [0]*26\n    for i in range(n): \n        arr[ord(str[i])-ord('a')] += 1\n    \n    for i in range(1, 26):\n        arr[i] += arr[i-1]\n    \n    res = 0\n    for i in range(n-1, -1, -1): \n        if arr[ord(str[i])-ord('a')] == 0: \n            continue\n        if res < arr[ord(str[i])-ord('a')]: \n            res = arr[ord(str[i])-ord('a')] \n    return res \n",
        "num_ids": 166
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def is_palindrome(string):\n        if string==string[::-1]:\n            return True\n        else:\n            return False\n    \n    n=len(str)\n    arr=[]\n    arr.append(str)\n    \n    for i in range(n):\n        for j in range(n):\n            arr.append(str[:j]+str[j+1:]+str[j]+str[:j])\n    \n    count=0\n    \n    for i in range(len(arr)):\n        if is_palindrome(arr[i]):\n            count+=1\n    \n    return count\n",
        "num_ids": 152
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    no_rotations=0\n    length=len(str)\n    if length==0:\n        return no_rotations\n    if length==1:\n        return 1\n    if str[0]!=str[1]:\n        no_rotations=1\n    for i in range(1,length):\n        if str[i]!=str[i-1]:\n            no_rotations+=1\n    return no_rotations\n",
        "num_ids": 105
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    if str_len <= 0:\n        return 0\n",
        "num_ids": 25
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    d={}\n    for i in str:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    \n    count=0\n    for i in d:\n        if d[i]==1:\n            count+=1\n        else:\n            count+=1\n            for j in range(d[i]-1):\n                count+=1\n    return count\n",
        "num_ids": 100
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = list(str) \n    i = 0\n    while (i < len(s)): \n        if (s[i]!= s[-i-1]): \n            s[i], s[-i-1] = s[-i-1], s[i] \n            i -= 1\n        i += 1\n    s = ''.join(s) \n    return len(s) \n",
        "num_ids": 102
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    arr = list(str)\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            return 0\n    return 1\n",
        "num_ids": 46
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Check the length of the string is <= 4\n    if len(str)<=4:\n        return -1\n    #Initialize the array for storing the counts\n    counts = [0,0,0,0]\n    #Get the count for each character\n    for i in range(len(str)):\n        counts[ord(str[i])-97] = counts[ord(str[i])-97]+1\n    #Return the count of the smallest\n    return min(counts)\n",
        "num_ids": 120
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initalize the variable to represent the total number of rotations\n    numRotations = 0\n    # Initialize a string and an array to represent the final string and\n    # its corresponding rotations array\n    finalString = \"\"\n    finalRotations = []\n    # Initialize a string to represent the current string\n    currentString = \"\"\n    # Initialize a string to represent the current rotations array\n    currentRotations = []\n    # Initialize a boolean to represent whether or not the final string is empty\n    emptyString = True\n    \n    # Create an initial string and a rotations array\n    for i in range(len(str)):\n        currentString += str[i]\n        currentRotations.append(0)\n        \n    # While the final string is not empty, continue constructing the final string\n    while emptyString == True:\n        # The current string length and final string length should be the same. \n        # If they are not, either the final string is longer than the current string\n        # or the final string is shorter than the current string. \n        # Increment the total number of rotations and update the current string and\n        # rotations arrays\n        if len(currentString) == len(finalString):\n            numRotations += 1\n            currentString = \"\"\n            for i in range(len(currentRotations)):\n                currentRotations[i] = 0\n        \n        # If the current string is longer than the final string, get the first character\n        # and add it to the final string and its corresponding rotation array\n        elif len(currentString) > len(finalString):\n            if emptyString == True:\n                currentString = currentString[0]\n                finalString += currentString\n                currentString = \"\"\n                for i in range(len(currentRotations)):\n                    currentRotations[i] = 0\n                \n        # If the current string is shorter than the final string,\n        # get the first character and add it to the current string and its corresponding rotation array\n        elif len(currentString) < len(finalString):\n            if emptyString == True:\n                finalString += currentString[0]\n                currentString = currentString[1:]\n                for i in range(len(currentRotations)):\n                    currentRotations[i] = 0\n        \n        # If the current string is the same as the final string, the final string is empty,\n        # the final string is equal to the current string, and the rotations arrays are equal.\n        # Increment the total number of rotations and update the current string and rotations arrays\n        else:\n            numRotations += 1\n            currentString = \"\"\n            for i in range(len(currentRotations)):\n                currentRotations[i] = 0\n        \n        # If the final string is empty and there are no rotations, the final string is not empty,\n        # and the final string is equal to the current string, and the rotations arrays are equal.\n        # The final string is not empty, and the final string is not equal to the current string,\n        # and the final string is not equal to the rotations array. Increment the total number of rotations and update the current string and rotations arrays.\n        if emptyString == True and numRotations == 0:\n            emptyString = False\n            finalString = currentString\n            numRotations = 0\n            currentString = \"\"\n            for i in range(len(currentRotations)):\n                currentRotations[i] = 0\n            \n        # If the final string is not empty and there are no rotations, the final string is not empty,\n        # and the final string is equal to the current string, and the rotations arrays are equal.\n        # Increment the total number of rotations and update the current string and rotations arrays.\n        elif emptyString == False and numRotations == 0:\n            finalString = currentString\n            numRotations = 0\n            currentString = \"\"\n            for i in range(len(currentRotations)):\n                currentRotations[i] = 0\n        \n        # If the final string is not empty and there are rotations, the final string is not empty,\n        # and the final string is equal to the current string, and the rotations arrays are equal.\n        # Increment the total number of rotations and update the current string and rotations arrays.\n        elif emptyString == False and numRotations > 0:\n            finalString = currentString\n            numRotations = 0\n            currentString = \"\"\n            for i in range(len(currentRotations)):\n                currentRotations[i] = 0\n        \n    return numRotations\n",
        "num_ids": 1061
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    dict = { }\n    for i in range(len(str)):\n        if str[i] not in dict:\n            dict[str[i]] = 1\n        else:\n            dict[str[i]] += 1\n    #print(dict)\n    min_rotations = 0\n    for i in dict:\n        if dict[i] % 2!= 0:\n            min_rotations += 1\n    return min_rotations\n",
        "num_ids": 105
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code here\n    return s.replace(s[0], \"\")\n",
        "num_ids": 21
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n    \ndef find_Occ(s,ch):\n    '''\n    Write a python function to find the index of the first occurrence of a given character in the given string.\n    '''\n    return s.find(ch)\n    \ndef remove_all_Occ(s,ch):\n    '''\n    Write a python function to remove all occurrences of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n    \ndef remove_all_occ(s,ch):\n    '''\n    Write a python function to remove all occurrences of a given character from the given string.\n    '''\n    return s.replace(ch,\"\")\n    \ndef find_index(s,ch):\n    '''\n    Write a python function to find the index of the first occurrence of a given character in the given string.\n    '''\n    return s.find(ch)\n    \ndef remove_index(s,ch):\n    '''\n    Write a python function to remove all occurrences of a given character from the given string.\n    '''\n    return s.replace(ch,\"\")\n    \ndef remove_index_all(s,ch):\n    '''\n    Write a python function to remove all occurrences of a given character from the given string.\n    '''\n    return s.replace(ch,\"\")\n    \ndef remove_space(s):\n    '''\n    Write a python function to remove all the spaces from the given string.\n    '''\n    return s.strip()\n    \ndef remove_multiple_spaces(s):\n    '''\n    Write a python function to remove multiple spaces from the given string.\n    '''\n    return s.replace(\" \",\"\")\n    \ndef replace_string(s,char_to_replace,new_char):\n    '''\n    Write a python function to replace a string with another string.\n    '''\n    return s.replace(char_to_replace,new_char)\n    \ndef replace_string_all(s,char_to_replace,new_char):\n    '''\n    Write a python function to replace a string with another string.\n    '''\n    return s.replace(char_to_replace,new_char)\n    \ndef replace_multiple_strings(s,char_to_replace,new_char):\n    '''\n    Write a python function to replace multiple strings with another string.\n    '''\n    return s.replace(char_to_replace,new_char)\n    \ndef replace_multiple_strings_all(s,char_to_replace,new_char):\n    '''\n    Write a python function to replace multiple strings with another string.\n    '''\n    return s.replace(char_to_replace,new_char)\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome_all(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome_all2(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome_all3(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all2(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all3(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all4(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef is_palindrome_all5(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef reverse_string_all5(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all6(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all7(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all8(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all9(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all10(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all11(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all12(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all13(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all14(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all15(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all16(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all17(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all18(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all19(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all20(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all21(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all22(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all23(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all24(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all25(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_all26(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef revers",
        "num_ids": 15
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    temp = s\n    temp = temp.replace(ch,\"\")\n    return temp\n",
        "num_ids": 22
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    s=s.replace(ch,'')\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n",
        "num_ids": 12
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(s[0],s[0],1)+s.replace(s[-1],s[-1],1)\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,\"\")\n    s=s.replace(ch,\"\")\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    #print(s.find(ch))\n    #print(s.index(ch))\n    index1 = s.find(ch)\n    index2 = s.find(ch, index1+1)\n    #print(index1,index2)\n    if index1 == -1 or index2 == -1:\n        return s\n    return s[index2+1 : ]\n",
        "num_ids": 106
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # s = input()\n    # ch = input()\n    \n    s=s.strip()\n    if s == ch:\n        return \"String is empty\"\n    if s == \"\":\n        return \"String is empty\"\n    if s[0] == ch:\n        return s[1:]\n    if s[-1] == ch:\n        return s[:-1]\n    return s\n",
        "num_ids": 96
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(0,len(s)):\n        if s[i] == ch:\n            if s[i] == s[i-1] and s[i] == s[i+1]:\n                continue\n            else:\n                return s[:i] + s[i+1:]\n    return s\n",
        "num_ids": 78
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M[0])):\n            sum += M[i][j]\n        M[i].append(sum)\n    \n    for i in range(len(M) - 1):\n        for j in range(len(M[0])):\n            if M[i][j] > M[i + 1][j]:\n                M[i], M[i + 1] = M[i + 1], M[i]\n    \n    return M\n",
        "num_ids": 132
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x:sum(x))\n    return M\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M[:] = sorted(M, key=sum_key)\n    return M\n    \ndef sum_key(row):\n    return sum(row)\n    \n    ",
        "num_ids": 42
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create an empty list to store the max sum of each row\n    max_list = []\n    # for each row, calculate the sum and store it into max_list\n    for row in range(len(M)):\n        sum_row = sum(M[row])\n        max_list.append(sum_row)\n    # sort the max_list\n    max_list.sort()\n    # assign the sorted list to the result matrix\n    result = []\n    # for each row of the matrix,\n    for row in range(len(M)):\n        # sort the max_list according to the list, and assign the sorted list to the result matrix\n        # in each row\n        result.append(list(sorted(max_list)))\n    # return the result matrix\n    return result\n",
        "num_ids": 185
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n):\n            if M[i][j] == 0:\n                continue\n            else:\n                if i == 0:\n                    for k in range(n):\n                        if M[i][k]!= 0:\n                            M[0][k], M[i][k] = M[i][k], M[0][k]\n                            break\n                elif i > 0:\n                    for k in range(n):\n                        if M[i][k]!= 0:\n                            if M[0][k] + M[i][k] < M[i][k]:\n                                M[0][k], M[i][k] = M[i][k], M[0][k]\n                                break\n                            elif M[0][k] + M[i][k] == M[i][k]:\n                                continue\n        for j in range(n):\n            if M[0][j] == 0:\n                continue\n            else:\n                if j == 0:\n                    for k in range(n):\n                        if M[0][k]!= 0:\n                            M[0][k], M[j][k] = M[j][k], M[0][k]\n                            break\n                elif j > 0:\n                    for k in range(n):\n                        if M[j][k]!= 0:\n                            if M[0][k] + M[j][k] < M[j][k]:\n                                M[0][k], M[j][k] = M[j][k], M[0][k]\n                                break\n                            elif M[0][k] + M[j][k] == M[j][k]:\n                                continue\n    return M\n",
        "num_ids": 417
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    s = sum_matrix(M)\n    \n    indices = list(range(n))\n    s.sort()\n    for i in range(n):\n        M[i] = M[indices[i]]\n    \n    for i in range(n-1, -1, -1):\n        s[i] += s[i+1]\n        indices[s[i]] = i\n    \n    return M\n",
        "num_ids": 112
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    result = []\n    sums = []\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            if M[i][j]!= 0:\n                temp.append((i, j, M[i][j]))\n        temp = sorted(temp, key=lambda x: (x[2], x[0]))\n        result.append([])\n        for t in temp:\n            result[i].append(t[1])\n        sums.append(sum(row[0] for row in result[i]))\n    index = 0\n    while index < len(sums):\n        i = 0\n        while i < len(sums):\n            if sums[i] == sums[index]:\n                for j in range(n):\n                    M[i][j] = result[i][j]\n                index += 1\n            else:\n                i += 1\n    return M\n",
        "num_ids": 228
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    sum_col = [0] * m\n    result = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            sum_col[j] += M[i][j]\n        result[i] = sorted(sum_col)\n    return result",
        "num_ids": 96
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # there are two ways to solve this problem\n    # 1 - naive way\n    # 2 - we can sort the rows first\n    # return sorted(M, key=sum)\n    \n    # we can sort the rows first and then return the result\n    M.sort(key=lambda row: sum(row))\n    \n    return M\n    \nprint(sort_matrix([[1,3,4], [2,5,2], [4,8,7]]))\nprint(sort_matrix([[2,5,7], [4,8,2], [1,3,4]]))",
        "num_ids": 143
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # n = len(M)\n    # for i in range(n):\n    #     for j in range(n-i-1):\n    #         if sum(M[j]) > sum(M[j+1]):\n    #             M[j], M[j+1] = M[j+1], M[j]\n",
        "num_ids": 82
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l+b+h)/2\n    return v\n",
        "num_ids": 18
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if type(l)!= int or type(b)!= int or type(h)!= int : \n        raise TypeError(\"Invalid input\")\n",
        "num_ids": 36
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # find the area of a triangle \n    s = (l + b + h)/2\n    # find the area of a square\n    area = s * s\n    # find the area of a cube\n    area_cube = (l * b * h)\n    # calculate the volume \n    volume = area * s * s * s\n    return volume\nprint(\"Volume of a triangle is: \",find_Volume(5,6,7)",
        "num_ids": 103
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #Input parameters:\n    #l: length of the base\n    #b: base of the triangle\n    #h: height of the triangle\n    #Output:\n    #Volume of the triangular prism\n    \n    V = l * b * h\n    return V\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2012
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l*b*h)/3\n    return vol\n",
        "num_ids": 18
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    x=l*b*h\n    return x\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V\n",
        "num_ids": 18
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * h * b \n    return V\n    \nprint(find_Volume(6,3,8))\n",
        "num_ids": 37
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    V = l*b*h/3\n    print(V)\n    return V\n",
        "num_ids": 47
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-zA-Z_]',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # my_text = \"aBcDe_fGHIj\"\n    # result = re.match(r\"[a-z]+_[a-z]+\", my_text)\n    # print(result)\n    # \"abc\" should be False\n    # \"ab_c\" should be False\n    # \"ab_c\" should be False\n    # \"abc_def\" should be True\n    # \"abc_def_ghi\" should be False\n    # \"ab_c_def_ghi\" should be False\n    # \"aBcDe_fGHIj\" should be True\n    # \"aBcDe_f_GHIj\" should be False\n",
        "num_ids": 160
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.match(r'^[a-z]+_[a-z]+$', text) else False\n",
        "num_ids": 31
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return not re.match(r\"[^a-z_]+\", text)\ndef text_removed(text):\n    '''\n    Write a function that returns the string after removing all whitespace characters (space, newline, tab, return).\n    '''\n    return text.strip()\ndef text_reverse(text):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return text[::-1]\ndef text_capitalize(text):\n    '''\n    Write a function that capitalizes the first letter of each word in a given string.\n    '''\n    return text.title()\ndef text_sliced(text):\n    '''\n    Write a function that slices the string into substring if it is of length 1.\n    '''\n    return text[:1]\ndef text_splitted(text):\n    '''\n    Write a function that splits the given string if it is of length greater than or equal to 2.\n    '''\n    return text.split()\ndef text_extract(text, letter):\n    '''\n    Write a function that extracts all occurrences of a given letter in a given string and returns a new string that includes only those occurrences.\n    '''\n    return text.lower().replace(letter, \"\")\ndef text_replace(text):\n    '''\n    Write a function that replaces all the occurrences of a given letter with another letter in a given string.\n    '''\n    return text.lower().replace(\"a\", \"&\")\ndef text_sum(text):\n    '''\n    Write a function that returns the sum of the digits in the string.\n    '''\n    return sum([int(x) for x in re.findall(r'\\d+', text)])\ndef text_integer(text):\n    '''\n    Write a function that returns true if the input string is an integer and false otherwise.\n    '''\n    return bool(re.match(r'^[-+]?[0-9]+$', text))\ndef text_unique(text):\n    '''\n    Write a function that returns true if the input string contains only unique characters and false otherwise.\n    '''\n    return not len(set(text)) == len(text)\ndef text_capitalize_sentence(text):\n    '''\n    Write a function that capitalizes the first letter of each sentence in a given string.\n    '''\n    return text.title()\ndef text_remove_string_and_symbols(text):\n    '''\n    Write a function that removes all the characters in a given string except for the given characters (if any).\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\ndef text_any_number(text):\n    '''\n    Write a function that returns true if the input string contains a number or returns false otherwise.\n    '''\n    return re.match(r'\\d+', text)\ndef text_all_upper_case(text):\n    '''\n    Write a function that returns true if all characters in a given string are upper case and false otherwise.\n    '''\n    return re.match(r'^[A-Z]+$', text.upper())\ndef text_chars_present_only_once(text):\n    '''\n    Write a function that returns true if all characters in a given string are present only once and false otherwise.\n    '''\n    return len(text) == len(set(text))\ndef text_length(text):\n    '''\n    Write a function that returns the length of a given string.\n    '''\n    return len(text)\ndef text_swap_characters(text):\n    '''\n    Write a function that swaps two characters in a given string.\n    '''\n    return text.replace('a', 'b').replace('b', 'a')\ndef text_is_palindrome(text):\n    '''\n    Write a function that returns true if the input string is a palindrome and false otherwise.\n    '''\n    return text == text[::-1]\ndef text_remove_spaces(text):\n    '''\n    Write a function that removes all the spaces in a given string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef text_is_palindrome_reversed(text):\n    '''\n    Write a function that returns true if the given string is a palindrome and false otherwise.\n    '''\n    return text == text[::-1]\ndef text_reversed_and_caps(text):\n    '''\n    Write a function that returns a new string made of the first letters of each word in a given string, and the first letters of each word reversed (with no other characters).\n    '''\n    return''.join([word[0] + word[::-1][0] for word in text.split(' ')])\ndef text_has_all_vowels(text):\n    '''\n    Write a function that returns true if all characters in a given string are vowel characters and false otherwise.\n    '''\n    return re.match(r'^[aeiou]+$', text)\ndef text_all_vowels_present(text):\n    '''\n    Write a function that returns true if all characters in a given string are vowels and false otherwise.\n    '''\n    return re.match(r'^[aeiou]+$', text)\ndef text_sum_of_digits_from_start(text):\n    '''\n    Write a function that returns the sum of digits from the given string from the start.\n    '''\n    return sum([int(digit) for digit in re.findall(r'\\d+', text)])\ndef text_sum_of_digits_from_end(text):\n    '''\n    Write a function that returns the sum of digits from the given string from the end.\n    '''\n    return sum([int(digit) for digit in re.findall(r'\\d+', text[::-1])])\ndef text_sum_of_digits_from_middle(text):\n    '''\n    Write a function that returns the sum of digits from the given string from the middle.\n    '''\n    return sum([int(digit) for digit in re.findall(r'\\d+', text[len(text)//2:-len(text)//2])])\ndef text_sum_of_digits(text):\n    '''\n    Write a function that returns the sum of digits from a given string.\n    '''\n    return sum([int(digit) for digit in re.findall(r'\\d+', text)])\ndef text_sum_of_letters(text):\n    '''\n    Write a function that returns the sum of letters from a given string.\n    '''\n    return sum([int(letter) for letter in re.findall(r'[a-z]+', text)])\ndef text_sum_of_letters_from_start(text):\n    '''\n    Write a function that returns the sum of letters from the given string from the start.\n    '''\n    return sum([int(letter) for letter in re.findall(r'[a-z]+', text[:len(text)//2])])\ndef text_sum_of_letters_from_end(text):\n    '''\n    Write a function that returns the sum of letters from the given string from the end.\n    '''\n    return sum([int(letter) for letter in re.findall(r'[a-z]+', text[len(text)//2:])])\ndef text_sum_of_letters_from_middle(text):\n    '''\n    Write a function that returns the sum of letters from the given string from the middle.\n    '''\n    return sum([int(letter) for letter in re.findall(r'[a-z]+', text[len(text)//2:-len(text)//2])])\ndef text_sum_of_letters(text):\n    '''\n    Write a function that returns the sum of letters from a given string.\n    '''\n    return sum([int(letter) for letter in re.findall(r'[a-z]+', text)])\ndef text_sum_of_numbers(text):\n    '''\n    Write a function that returns the sum of numbers from a given string.\n    '''\n    return sum([int(number) for number in re.findall(r'[0-9]+', text",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return not (re.search(r'[^a-z_]+', text) == None)\n",
        "num_ids": 26
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+[_]+[a-z]+',text)!= None\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.findall(\"[a-z]_[a-z]+\", text) else False\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+[_][a-z]+',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return False if not re.match(r\"^[a-z]+[a-z_]+[a-z]+$\", text) else True\n",
        "num_ids": 37
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z_]+', text))\n",
        "num_ids": 22
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a**2)\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int:\n        raise TypeError(\"Invalid input\")\n    elif a < 0:\n        raise ValueError(\"Invalid input\")\n    else:\n        return a * 4\n",
        "num_ids": 48
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2*a\n    \n",
        "num_ids": 10
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list1 = string.split(string[0])\n    list1.pop(0)\n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string\n    s2 = string[::-1]\n    list1 = list(s1)\n    list2 = list(s2)\n    for i in range(len(list2)):\n        if list1.count(list2[i])!= 0:\n            list1.remove(list2[i])\n    \n    return list1\n    \n",
        "num_ids": 90
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars_in_string = 256\n",
        "num_ids": 16
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_1 = list(string) \n    list_2 = list(string)\n    for char in list_1:\n        if char in list_2:\n            list_2.remove(char)\n    \n    return ''.join(list_2) \n    \ndef str_to_list_optimized(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #create a dictionary to store the frequencies of the characters in the first string\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n",
        "num_ids": 62
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string[:256]\n    string2 = string[256:]\n    string = string1\n    for c in string2:\n        if c in string:\n            string = string.replace(c,'')\n    return string\n    \ndef list_to_str(string):\n    '''\n    Write a function to check if a given string is a substring of another string or not.\n    '''\n    string1 = string[:256]\n    string2 = string[256:]\n    string = string1\n    for c in string2:\n        if c in string:\n            string = string.replace(c,'')\n        else:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    res = []\n    for ch in range(no_of_chars):\n        if ch not in string:\n            res.append(ch)\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    i = 0\n    list1 = []\n    for i in range(len(string)):\n        if string[i] not in string[i+1:]:\n            list1.append(string[i])\n    return list1\ndef list_to_str(list1):\n    '''\n    Write a function to join a list of strings.\n    '''\n    return \"\".join(list1)\n",
        "num_ids": 12
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s1 = string\n    s2 = string[::-1]\n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s2)):\n        if s2[i] in s1:\n            s1.remove(s2[i])\n    s1 = ''.join(s1)\n    return s1\n",
        "num_ids": 93
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count = 256\n    res = \"\"\n    for i in range(len(string)): \n        if (string[i] in string[i + 1:]): \n            continue\n        res += string[i] \n    return res \n    \n    \n",
        "num_ids": 63
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string\n    str2 = string\n    while len(str1)>0:\n        if str1[0] in str2:\n            str1 = str1[1:]\n        else:\n            break\n    return str1\nprint(str_to_list('abcd'))",
        "num_ids": 71
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def duplicates(arraynums):\n        nums = set(arraynums)\n        return len(nums)!= len(arraynums)\n",
        "num_ids": 38
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(arraynums.count(i) > 1 for i in arraynums)\n",
        "num_ids": 24
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for i in range(len(arraynums)):\n        for j in range(i, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                duplicate = True\n                break\n    return duplicate\n",
        "num_ids": 69
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums: return False\n    lastNum = arraynums[0]\n    for i in range(1, len(arraynums)):\n        if arraynums[i] == lastNum:\n            return True\n        lastNum = arraynums[i]\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    has_duplicates = False\n    for i in range(len(arraynums)):\n        if arraynums[i] == i:\n            has_duplicates = True\n    return has_duplicates\n",
        "num_ids": 54
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # the array is sorted\n    if len(arraynums) == 0:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    nums = sorted(nums)\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    sorted_arr = sorted(arraynums)\n    for i in range(1, len(sorted_arr)):\n        if sorted_arr[i] == sorted_arr[i-1]:\n            return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    setnums = set(arraynums)\n    return arraynums in setnums\n",
        "num_ids": 24
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 5:\n        return True\n    elif x == 7:\n        return True\n    elif x == 9:\n        return True\n    elif x == 11:\n        return True\n    elif x == 13:\n        return True\n    elif x == 17:\n        return True\n    elif x == 19:\n        return True\n    elif x == 23:\n        return True\n    elif x == 29:\n        return True\n    elif x == 31:\n        return True\n    elif x == 37:\n        return True\n    elif x == 41:\n        return True\n    elif x == 43:\n        return True\n    elif x == 47:\n        return True\n    elif x == 53:\n        return True\n    elif x == 59:\n        return True\n    elif x == 61:\n        return True\n    else:\n        return False\n",
        "num_ids": 213
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    i = 1\n    while i <= x:\n        if x % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(len(x)):\n        if x[i] == 'W' or x[i] == 'w':\n            return True\n        else:\n            return False\n",
        "num_ids": 46
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 24:\n        return \"woodall\"\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    while x>1:\n        x = x/10\n        if x%2==0:\n            print(x,\" is not a natural number\")\n            break\n        else:\n            print(x,\" is a natural number\")\n            break\n    return\n",
        "num_ids": 63
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%5==0 and x%3==0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\"\n",
        "num_ids": 37
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 8 or x == 22 or x == 75 or x == 55 or x == 52 or x == 101 or x == 34 or x == 89 or x == 92 or x == 27 or x == 18:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x) is int:\n        if x % 4 == 1 or x % 4 == 3:\n            return True\n        else:\n            return False\n    else:\n        raise ValueError('Invalid Input')\n",
        "num_ids": 52
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    for i in range(len(s)):\n        if(i==0):\n            if(s[i]!='1'):\n                return False\n        else:\n            if(s[i]!='0'):\n                return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # x = input()\n    if x == 'Woodall':\n        print('yes')\n    else:\n        print('no')\n",
        "num_ids": 34
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num//10) + 1 == num//10:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    print(num)\n    if num < 0:\n        return -1\n    \n    rev_num = 0\n    while (num > 0):\n        rev_num = rev_num*10 + (num%10)\n        num = num//10\n    if rev_num == num:\n        return True\n    else:\n        return False\n        \nprint(rev(123))    \nprint(rev(-123))    \n",
        "num_ids": 100
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num % 2 == 0:\n        return -num\n    return (num * -1) - 1\n    ",
        "num_ids": 28
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rev_num = (rev_num * 10) + (num % 10)\n        num = num // 10\n    \n    if(num == rev_num):\n        return True\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num-1,num*2\nprint(rev(4))\n",
        "num_ids": 19
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        a = num % 10\n        rev = rev * 10 + a\n        num = num // 10\n    return rev - num\n",
        "num_ids": 44
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    a = num\n    b = 0\n    while(a > 0):\n        b = b*10 + a%10\n        a = a//10\n    return b == num\n    \n    \n    \n    \ndef sum(lst):\n    \"\"\"\n    Write a python function to sum up the numbers in a list\n    \"\"\"\n    s = 0\n    for i in lst:\n        s += i\n    return s\n    \n    \n    \ndef odd_sum(lst):\n    \"\"\"\n    Write a python function to sum up the numbers in a list,\n    where each element is odd.\n    \"\"\"\n    s = 0\n    for i in lst:\n        if i%2!= 0:\n            s += i\n    return s\n    \n    \n    \ndef sum_odd(lst):\n    \"\"\"\n    Write a python function to sum up the numbers in a list,\n    where each element is odd.\n    \"\"\"\n    s = 0\n    for i in lst:\n        if i%2!= 0:\n            s += i\n    return s\n    \n    \n    \ndef all_diff(lst):\n    \"\"\"\n    Write a python function to check if a list is all different from each other.\n    \"\"\"\n    s = set()\n    for i in lst:\n        if i in s:\n            return False\n        s.add(i)\n    return True\n    \n    \n    \ndef sublist(lst):\n    \"\"\"\n    Write a python function to check if a given list is sublist of another list.\n    \"\"\"\n    i = 0\n    j = 0\n    while(i < len(lst) and j < len(lst)):\n        if lst[i] == lst[j]:\n            i += 1\n        j += 1\n    return i == len(lst)\n    \n    \n    \ndef sum_of_digit(n):\n    \"\"\"\n    Write a python function to find the sum of digit of a given number.\n    \"\"\"\n    s = 0\n    while(n!= 0):\n        s += (n%10)\n        n = n//10\n    return s\n    \n    \n    \ndef sum_of_digit_two(n):\n    \"\"\"\n    Write a python function to find the sum of digit of a given number.\n    \"\"\"\n    s = 0\n    while(n!= 0):\n        s += n%10\n        n = n//10\n    return s\n    \n    \n    \ndef sum_of_digit_three(n):\n    \"\"\"\n    Write a python function to find the sum of digit of a given number.\n    \"\"\"\n    s = 0\n    while(n!= 0):\n        s += n%10\n        n = n//10\n    return s\n    \n    \n    \ndef sum_of_digit_four(n):\n    \"\"\"\n    Write a python function to find the sum of digit of a given number.\n    \"\"\"\n    s = 0\n    while(n!= 0):\n        s += n%10\n        n = n//10\n    return s\n    \n    \n    \ndef is_palindrome(n):\n    \"\"\"\n    Write a python function to check if a given number is palindrome or not.\n    \"\"\"\n    s = 0\n    while(n!= 0):\n        s = s*10 + n%10\n        n = n//10\n    return s == n\n    \n    \n    \ndef is_palindrome_two(n):\n    \"\"\"\n    Write a python function to check if a given number is palindrome or not.\n    \"\"\"\n    s = 0\n    while(n!= 0):\n        s = s*10 + n%10\n        n = n//10\n    return s == n\n    \n    \n    \ndef is_palindrome_three(n):\n    \"\"\"\n    Write a python function to check if a given number is palindrome or not.\n    \"\"\"\n    s = 0\n    while(n!= 0):\n        s = s*10 + n%10\n        n = n//10\n    return s == n\n    \n    \n    \ndef is_palindrome_four(n):\n    \"\"\"\n    Write a python function to check if a given number is palindrome or not.\n    \"\"\"\n    s = 0\n    while(n!= 0):\n        s = s*10 + n%10\n        n = n//10\n    return s == n\n    \n    \n    \ndef no_of_even(lst):\n    \"\"\"\n    Write a python function to find number of even elements in a list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i%2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef no_of_even_two(lst):\n    \"\"\"\n    Write a python function to find number of even elements in a list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i%2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef no_of_even_three(lst):\n    \"\"\"\n    Write a python function to find number of even elements in a list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i%2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef no_of_even_four(lst):\n    \"\"\"\n    Write a python function to find number of even elements in a list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i%2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef find_even_and_odd(lst):\n    \"\"\"\n    Write a python function to find the number of even and odd elements in a list.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in lst:\n        if i%2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd\n    \n    \n    \ndef find_even_and_odd_two(lst):\n    \"\"\"\n    Write a python function to find the number of even and odd elements in a list.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in lst:\n        if i%2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd\n    \n    \n    \ndef find_even_and_odd_three(lst):\n    \"\"\"\n    Write a python function to find the number of even and odd elements in a list.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in lst:\n        if i%2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd\n    \n    \n    \ndef find_even_and_odd_four(lst):\n    \"\"\"\n    Write a python function to find the number of even and odd elements in a list.\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in lst:\n        if i%2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd\n    \n    \n    \ndef multiply(a, b):\n    \"\"\"\n    Write a python function to multiply two numbers.\n    \"\"\"\n    return a*b\n    \n    \n    \ndef multiply_two_numbers(a, b):\n    \"\"\"\n    Write a python function to multiply two numbers.\n    \"\"\"\n    return a*b\n    \n    \n    \ndef multiply_three_numbers(a, b, c):\n    \"\"\"\n    Write a python function to multiply three numbers.\n    \"\"\"\n    return a*b*c\n    \n    \n    \ndef multiply_four_numbers(a, b, c, d):\n    \"\"\"\n    Write a python function to multiply four numbers.\n    \"\"\"\n    return a*b*c*d\n    \n    \n    \ndef multiply_five_numbers(a, b, c, d, e):\n    \"\"\"\n    Write a python function to multiply five numbers.\n    \"\"\"\n    return a*b*c*d*e\n    \n    \n    \ndef max(lst):\n    \"\"\"\n    Write a python function to find the maximum number in a list.\n    \"\"\"\n    return max(lst)\n    \n    ",
        "num_ids": 2024
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    return (num*2)-num\n    \nprint(rev(3))\n",
        "num_ids": 22
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num%2 == 0:\n        return (num-1)*2\n    else:\n        return (num-1)*2+1\nprint(rev(21))\n",
        "num_ids": 42
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    def max_Num(arr) :\n    \n        ans = 0\n        if len(arr) == 1 :\n            return arr[0]\n        \n        while True :\n            if len(arr) == 1 :\n                break\n            \n            ans = max(ans,max_Num(arr[1:]))\n            arr.remove(arr[0])\n        return ans\n    \n    \n    print(max_Num(arr))\n",
        "num_ids": 105
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    i = 0\n    j = n - 1\n    max = -1\n",
        "num_ids": 29
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    arr.sort()\n    for i in range(len(arr)-1) :\n        if max_num < int(str(arr[i])+str(arr[i+1])) :\n            max_num = int(str(arr[i])+str(arr[i+1]))\n    return max_num\n    \nprint find_Max_Num([5,9,3,6,7,1,2,4])\n    \n",
        "num_ids": 113
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            temp = arr[i]*arr[j]\n            if temp < arr[-1]:\n                arr[-1] = temp\n    return arr[-1]\n",
        "num_ids": 72
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr:\n        if int(i) > max :\n            max = int(i)\n    return max\n",
        "num_ids": 36
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in range(len(arr)):\n        if max < arr[i]:\n            max = arr[i]\n    return max\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the arr\n    arr.sort()\n    # Loop over the sorted arr\n    for i in range(len(arr)):\n        # If the last element is greater than zero, break\n        if arr[i] > 0:\n            break\n    return arr[i]\n",
        "num_ids": 67
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -999999\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            num = int(arr[i]+arr[j])\n            if num > max :\n                max = num\n    return max\n",
        "num_ids": 67
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = 0\n    for i in arr:\n        largest = max(largest, i)\n    return largest\n",
        "num_ids": 28
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n",
        "num_ids": 16
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -x > -y or -y > -x\n",
        "num_ids": 16
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y > 0: \n        print(\"No\") \n    else: \n        print(\"Yes\") \n",
        "num_ids": 31
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    # x, y are given numbers\n    if x < 0 and y < 0:\n        print(\"{}, {} have opposite sign\".format(x,y))\n    elif x > 0 and y > 0:\n        print(\"{}, {} have opposite sign\".format(x,y))\n    else:\n        print(\"Both of them have same sign\")\n",
        "num_ids": 85
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0 or x == 0 and y == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n        \n        \n    \n    \n    \n    \n    \n    \ndef Sum_of_Two_Numbers_and_Return_Sum(x,y): \n    '''\n    Write a python function to calculate and return the sum of two numbers. \n    '''\n    return x+y\n    \n    \n    \n    \n    \n    \n    \ndef Sum_Of_Every_Digit_and_Return_Sum(x): \n    '''\n    Write a python function to calculate and return the sum of every digit in the given number. \n    '''\n    sum=0\n    while(x>0):\n        sum+=x%10\n        x=int(x/10)\n    return sum\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_1s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 1s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==1):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_2s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 2s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==2):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_3s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 3s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==3):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_4s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 4s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==4):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_5s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 5s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==5):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_6s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 6s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==6):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_7s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 7s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==7):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_8s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 8s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==8):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_9s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 9s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==9):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_0s_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of 0s in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==0):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef Number_of_Negative_Digits_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of negative digits in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10<0):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \ndef Number_of_Even_Digits_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of even digits in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10==0 or x%10==1):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \ndef Number_of_Odd_Digits_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of odd digits in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10!=0 and x%10!=1):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \ndef Number_of_Prime_Digits_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of prime digits in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10<=1):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \ndef Number_of_Non_Prime_Digits_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of prime digits in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10>=2):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \ndef Number_of_Even_Letters_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of even letters in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10<=9 and x%10>=7):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \ndef Number_of_Odd_Letters_and_return_Count(x): \n    '''\n    Write a python function to calculate and return the count of odd letters in the given number. \n    '''\n    count=0\n    while(x>0):\n        if(x%10<=9 and x%10>=1):\n            count+=1\n        x=int(x/10)\n    return count\n    \n    \n    \n    \n    \n    \ndef Number_of_Uppercas",
        "num_ids": 72
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0 or x<0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > 0 and y < 0) or (x < 0 and y > 0)\n",
        "num_ids": 24
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0)!= (y>0)\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return ((1+(8*n-1)**0.5)/2)\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return n * (1 + sqrt(8)) // 2\n",
        "num_ids": 19
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    return octagonal_n(n) + octagonal_n(n-2) - octagonal_n(n-3)\n",
        "num_ids": 65
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octo_nums = []\n    octo_nums.append(1)\n    for i in range(1, 20):\n        octo_nums.append(octo_nums[i-1] + 8)\n    return octo_nums[n-1]\n",
        "num_ids": 70
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1)/2\n",
        "num_ids": 15
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return round((n**3)/(8 * sqrt(2)))\n",
        "num_ids": 19
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    return (1 + 4*n)//2\n",
        "num_ids": 25
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((n*(n+1)/2))\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return sum(i**3 for i in range(1, n+1))\n",
        "num_ids": 21
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    if length == 0:\n        return 0\n    count = 0\n    for i in range(length):\n        sub_str = s[i:i+length]\n        if sub_str[0] == \"0\" and sub_str[1] == \"0\" and sub_str[2] == \"0\":\n            continue\n        else:\n            count += 1\n    return count\n    \nif __name__ == '__main__':\n    string = input().strip()\n    count = count_Substrings(string)\n    print(count)",
        "num_ids": 137
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    \n    for i in range(len(s)):\n        d[s[i]] += 1\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (d[s[i]] + d[s[j]] == len(s)):\n                count += 1\n    \n    return count\n",
        "num_ids": 102
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    total = 0\n    if length > 0:\n        for i in range(length):\n            for j in range(i, length):\n                num = int(s[i:j+1])\n                if num <= 2**31 -1 and num >= -2**31:\n                    total += 1\n    return total\n",
        "num_ids": 83
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum = 0\n    for i in range(len(s)):\n        for j in range(len(s)-i):\n            if int(s[j:i+j+1]) == len(s[j:i+j+1]):\n                sum += 1\n    return sum\n",
        "num_ids": 70
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i:j+1].isnumeric():\n                count += 1\n    print(count)\n",
        "num_ids": 59
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            count += 1\n            if i == j:\n                continue\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                count += 1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result=0\n    for i in range(1, len(s)):\n        substring=s[:i]\n        result += sum(map(lambda x: int(x), substring))\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # O(n)\n    # return sum([len(substring) for substring in s.split('11')])\n    '''\n    Note: The above solution is O(n) where n is the length of the input string\n    The below solution uses hashing: O(n)\n    '''\n    # O(n)\n    # seen_hashes = {}\n    # total = 0\n    # for i in range(len(s)):\n    #     # print(i,s[i:],sum([int(j) for j in list(s[i:])]))\n    #     if i == 0:\n    #         seen_hashes[sum([int(j) for j in list(s[i:])])] = 1\n    #     else:\n    #         if sum([int(j) for j in list(s[i:])]) in seen_hashes:\n    #             seen_hashes[sum([int(j) for j in list(s[i:])])] += 1\n    #         else:\n    #             seen_hashes[sum([int(j) for j in list(s[i:])])] = 1\n    #     total += seen_hashes[sum([int(j) for j in list(s[i:])])]\n    # return total\n    '''\n    The above solution uses hashing is O(n)\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    if length < 1:\n        return 0\n    count = 0\n    for i in range(0, length):\n        sub = s[i:i+1]\n        sum_of_digits = 0\n        for j in sub:\n            sum_of_digits += int(j)\n        if sum_of_digits == len(sub):\n            count += 1\n    return count",
        "num_ids": 101
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    temp_count = 0\n    d = defaultdict(int)\n    for i in range(0,len(s)):\n        temp_str = s[i:i+1]\n        temp_count += 1\n        d[temp_str] += 1\n    for i in range(0,len(s)):\n        temp_str = s[i:i+1]\n        temp_count += d[temp_str]\n    return temp_count\n",
        "num_ids": 109
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = min(xs)\n    return x\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    x = max(xs)\n    return x\n    \ndef median_num(xs):\n    '''\n    Write a python function to find median number in a list.\n    '''\n    if len(xs)%2!= 0:\n        x = sorted(xs)[len(xs)//2]\n    else:\n        x = (sorted(xs)[len(xs)//2-1] + sorted(xs)[len(xs)//2])/2\n    return x\n    \ndef length_of_string(x):\n    '''\n    Write a python function to find length of a string.\n    '''\n    return len(x)\n    \ndef reverse_string(x):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return x[::-1]\n    \ndef max_in_list(xs):\n    '''\n    Write a python function to find max in list.\n    '''\n    x = max(xs)\n    return x\n    \ndef min_in_list(xs):\n    '''\n    Write a python function to find min in list.\n    '''\n    x = min(xs)\n    return x\n    \ndef sum_of_list(xs):\n    '''\n    Write a python function to find sum of a list.\n    '''\n    x = sum(xs)\n    return x\n    \ndef print_list(xs):\n    '''\n    Write a python function to print a list.\n    '''\n    for x in xs:\n        print(x)\n        \ndef print_list_in_reverse(xs):\n    '''\n    Write a python function to print a list in reverse.\n    '''\n    for x in xs[::-1]:\n        print(x)\n        \ndef square_list(xs):\n    '''\n    Write a python function to square a list.\n    '''\n    for x in range(len(xs)):\n        xs[x] = xs[x]**2\n    return xs\n    \ndef first_and_last_element_of_list(xs):\n    '''\n    Write a python function to find first and last element of a list.\n    '''\n    x = xs[0]\n    x = xs[len(xs)-1]\n    return x\n    \ndef average_of_list(xs):\n    '''\n    Write a python function to find average of a list.\n    '''\n    total = 0\n    for x in xs:\n        total += x\n    return total/len(xs)\n    \ndef find_the_index_of_element(x,xs):\n    '''\n    Write a python function to find the index of element in a list.\n    '''\n    for i in range(len(xs)):\n        if x == xs[i]:\n            return i\n    return -1\n    \ndef second_largest_element_in_list(xs):\n    '''\n    Write a python function to find second largest element in a list.\n    '''\n    x = largest_num(xs)\n    if x == largest_num(xs):\n        x = largest_num(xs)\n    return x\n    \ndef nth_largest_element_in_list(xs, n):\n    '''\n    Write a python function to find the nth largest element in a list.\n    '''\n    x = sorted(xs)[len(xs)-n]\n    return x\n    \ndef second_smallest_element_in_list(xs):\n    '''\n    Write a python function to find second smallest element in a list.\n    '''\n    x = smallest_num(xs)\n    if x == smallest_num(xs):\n        x = smallest_num(xs)\n    return x\n    \ndef nth_smallest_element_in_list(xs, n):\n    '''\n    Write a python function to find the nth smallest element in a list.\n    '''\n    x = sorted(xs)[n-1]\n    return x\n    \ndef remove_duplicates(xs):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    x = list(set(xs))\n    return x\n    \ndef fibonacci_series(n):\n    '''\n    Write a python function to print fibonacci series upto n terms.\n    '''\n    f = 1\n    s = 0\n    while f<n:\n        x = f+s\n        print(x)\n        f = s\n        s = x\n    return x\n    \ndef fibonacci_recursive(n):\n    '''\n    Write a python function to print fibonacci series upto n terms.\n    '''\n    if n<0:\n        return 'please input positive integer'\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1)+fibonacci_recursive(n-2)\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n<0:\n        return 'please input positive integer'\n    elif n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef factorial_recursive(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n<0:\n        return 'please input positive integer'\n    elif n == 0:\n        return 1\n    else:\n        return n*factorial_recursive(n-1)\n    \ndef nth_prime_number(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    x = 2\n    while True:\n        if is_prime(x):\n            if x == n:\n                break\n            x += 1\n        else:\n            x += 1\n    return x\n    \ndef is_prime(x):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if x==1:\n        return False\n    elif x==2:\n        return True\n    elif x%2==0:\n        return False\n    else:\n        for i in range(3,int(x**0.5)+1,2):\n            if x%i==0:\n                return False\n        return True\n    \ndef string_concatenation(x, y):\n    '''\n    Write a python function to concatenate strings.\n    '''\n    return x+y\n    \ndef string_repetition(x, y):\n    '''\n    Write a python function to check if a given string repeats itself or not.\n    '''\n    return y in x*2\n    \ndef string_rotation(x, y):\n    '''\n    Write a python function to check if a given string rotates with a given shift.\n    '''\n    return y in x[len(x)-y:]+x[:len(x)-y]\n    \ndef palindrome_rotation(x, y):\n    '''\n    Write a python function to check if a given string rotates with a given shift.\n    '''\n    return y in x[len(x)-y:]+x[:len(x)-y]\n    \ndef count_vowels_in_string(x):\n    '''\n    Write a python function to count vowel in a given string.\n    '''\n    if len(x)<=0:\n        return 'please input a string'\n    elif 'a' in x:\n        return x.count('a')\n    elif 'e' in x:\n        return x.count('e')\n    elif 'i' in x:\n        return x.count('i')\n    elif 'o' in x:\n        return x.count('o')\n    elif 'u' in x:\n        return x.count('u')\n    else:\n        return 0\n    \ndef convert_string_to_list(x):\n    '''\n    Write a python function to convert string to list.\n    '''\n    if len(x)<=0:\n        return 'please input a string'\n",
        "num_ids": 22
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num\n",
        "num_ids": 43
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n = len(xs)\n    low = 0\n    high = n-1\n    \n    while low < high:\n        mid = (low+high)//2\n        if xs[mid] < xs[high]:\n            high = mid\n        else:\n            low = mid + 1\n            \n    return xs[low]\n",
        "num_ids": 101
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    def smallest_num(xs):\n        for i in range(len(xs)):\n            for j in range(i+1,len(xs)):\n                if xs[i] > xs[j]:\n                    xs[i],xs[j] = xs[j],xs[i]\n        return xs[0]\n    return smallest_num(xs)\n",
        "num_ids": 90
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if min_num > num:\n            min_num = num\n    return min_num\n",
        "num_ids": 43
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n",
        "num_ids": 14
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    # loop through each element and find the smallest\n    for element in xs:\n        if smallest is None:\n            smallest = element\n        elif element < smallest:\n            smallest = element\n    return smallest\n",
        "num_ids": 58
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    if len(test_list) < 2:\n        raise ValueError\n    \n    # First we need to create a new tuple list and save its value to max_difference\n    new_tuple_list = sorted(tuple(test_list))\n    max_difference = new_tuple_list[1] - new_tuple_list[0]\n    \n    # This is for loop will traverse to the last element in the original tuple list\n    for i in range(len(test_list)-1):\n        # We check if the difference between current element and the last element\n        # in the tuple list is smaller than the previously saved difference and then\n        # save it to max_difference\n        if abs(new_tuple_list[i+1] - new_tuple_list[i]) < max_difference:\n            max_difference = abs(new_tuple_list[i+1] - new_tuple_list[i])\n    \n    return max_difference\n    \ndef array_max_sum(test_list):\n    '''\n    Write a function that returns the maximum sum of a list of integers.\n    '''\n    if len(test_list) < 2:\n        raise ValueError\n    \n    # Initialize sum to 0 to start with\n    sum_list = 0\n    \n    # Traversing the list and adding the current element to sum\n    for i in range(len(test_list)):\n        sum_list += test_list[i]\n    \n    # Traversing the list and subtracting the previous element from current element\n    # The first element cannot be subtracted\n    for j in range(1, len(test_list)):\n        sum_list -= test_list[j-1]\n    \n    return sum_list\n",
        "num_ids": 149
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n",
        "num_ids": 94
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = -1\n    if test_list:\n        for i in range(len(test_list)-1):\n            difference = test_list[i+1] - test_list[i]\n            if max_difference < difference:\n                max_difference = difference\n    return max_difference\n",
        "num_ids": 78
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] > test_list[j]:\n                difference = test_list[i] - test_list[j]\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n",
        "num_ids": 97
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        if test_list[i+1]-test_list[i] > max_diff:\n            max_diff = test_list[i+1]-test_list[i]\n    return max_diff\n",
        "num_ids": 84
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum_difference = -sys.maxsize\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] - test_list[i] > maximum_difference:\n                maximum_difference = test_list[j] - test_list[i]\n    return maximum_difference\n    \n",
        "num_ids": 99
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    arr = []\n    for i in range(len(test_list)-1):\n        if test_list[i] > test_list[i+1]:\n            arr.append(test_list[i+1]-test_list[i])\n    return max(arr)\n",
        "num_ids": 67
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(test_list) - min(test_list)\n",
        "num_ids": 18
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    print(f\"\\n\\nProblem #3: \\nMax difference between pairs in the list is {max_difference_helper(test_list)}\")\n    return\n",
        "num_ids": 43
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the array so that we can compare each number with its previous number\n    test_list.sort()\n",
        "num_ids": 27
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return subjectmarks\nprint(subject_marks([(3,'aaa'),(2,'bbb'),(1,'ccc'),(0,'ddd'),(5,'eee')]))\n",
        "num_ids": 64
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda k: k[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1], reverse=True)\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = []\n    for subject,mark in subjectmarks:\n        marks.append((subject,mark))\n    marks = sorted(marks,key=lambda x:x[1])\n    return marks\n",
        "num_ids": 48
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n    \n",
        "num_ids": 25
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_marks = sorted(subjectmarks, key=lambda x:x[1])\n    for i in new_marks:\n        print(i)\n",
        "num_ids": 37
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n    \ndef sort_marks(marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(marks, key=lambda x: x[1])\n",
        "num_ids": 18
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    tuple_list = []\n    for x in range(len(subjectmarks)):\n        tuple_list.append(subjectmarks[x])\n    for x in range(len(tuple_list)):\n        tuple_list[x] = (tuple_list[x][0],tuple_list[x][1].split())\n    sorted_list = sorted(tuple_list, key = lambda x: x[1], reverse=True)\n    return sorted_list\n",
        "num_ids": 116
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == None or len(data_list) == 0:\n        return 0\n    else:\n        flattened_list = [item for sublist in data_list for item in sublist]\n        return sum(flattened_list)\n",
        "num_ids": 62
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 46
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if type(data_list[0]) == int:\n        return sum(data_list) + recursive_list_sum(data_list[1:])\n    return sum(recursive_list_sum(data_list[1:])) + recursive_list_sum(data_list[0])\n",
        "num_ids": 87
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 38
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for x in data_list:\n        if isinstance(x, list):\n            sum += recursive_list_sum(x)\n        else:\n            sum += x\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        data_list[0] += recursive_list_sum(data_list[1:])\n        return data_list[0]\n",
        "num_ids": 58
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == None:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 64
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    \n    if type(data_list) == list:\n        return sum(recursive_list_sum(item) for item in data_list)\n    \n    return data_list\n",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return (len([i for i in list if i > 0 ]))\n",
        "num_ids": 19
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x >= 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n    \n    \n",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(count)\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for ele in list:\n        if ele > 0:\n            count += 1\n    print(count)\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #return sum(1 for x in list if x>0)\n    #return len([x for x in list if x > 0])\n    total=0\n    for x in list:\n        if x>0:\n            total+=1\n    return total\n",
        "num_ids": 62
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1: return 2\n    return bell_number(n-1) + bell_number(n-2)\nprint(bell_number(5))\n",
        "num_ids": 40
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n < 1:\n        return 1\n    \n    return bell_number(n - 1) + bell_number(n - 2)\n    \ndef maximum_admissible_number(n):\n    '''\n    Write a function to compute the maximum admissible number.\n    '''\n    if n < 1:\n        return 1\n    return 2 * maximum_admissible_number(n - 1)\n    \ndef max_distinct_sum_naive(n, k):\n    '''\n    Write a function that computes the maximum sum of k consecutive elements in an array of integers.\n    '''\n    if k > n:\n        return 0\n    \n    result = 0\n    for i in range(n - k + 1):\n        sum = 0\n        for j in range(k):\n            sum += nums[i + j]\n            if sum > result:\n                result = sum\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_number(n):\n        table = [0] + [0] * n\n        for i in range(2, n+1):\n            for j in range(i-1, 0, -1):\n                table[j] = table[j] + table[j-i]\n        return table[n]\n",
        "num_ids": 78
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n < 1:\n        return 0\n    \n    f = [0] * (n + 1)\n    \n    return helper(f, 0)\n    \ndef helper(f, i):\n    if i == len(f):\n        return 1\n    if f[i] > 0:\n        return f[i]\n    \n    f[i] = helper(f, i + 1) + helper(f, i + 2)\n    \n    return f[i]\n",
        "num_ids": 116
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def dfs(n, s, dp):\n        if n == 1:\n            return 1\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if s < 0:\n            return 0\n        if dp[s]!= -1:\n            return dp[s]\n        ret = 0\n        ret += dfs(n - 1, s - 1, dp)\n        ret += dfs(n - 1, s + 1, dp)\n        dp[s] = ret\n        return dp[s]\n    \n    dp = [-1] * n\n    return dfs(n, n - 1, dp)\n",
        "num_ids": 163
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (bell_number(n-1) + bell_number(n-2))\n",
        "num_ids": 38
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    nums = []\n    for num in range(1,n+1):\n        nums.append(num)\n    #print(nums)\n    \n    def dfs(nums,count):\n        if not nums:\n            count+=1\n        for i in range(len(nums)):\n            if nums[i] == 1 or nums[i] == 2:\n                nums.pop(i)\n                dfs(nums,count)\n                nums.insert(i,nums[i])\n            elif nums[i] == 3 or nums[i] == 4:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 5 or nums[i] == 6:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 7 or nums[i] == 8:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 9 or nums[i] == 10:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 11 or nums[i] == 12:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 13 or nums[i] == 14:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 15 or nums[i] == 16:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 17 or nums[i] == 18:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 19 or nums[i] == 20:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 21 or nums[i] == 22:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 23 or nums[i] == 24:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 25 or nums[i] == 26:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 27 or nums[i] == 28:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 29 or nums[i] == 30:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 31 or nums[i] == 32:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 33 or nums[i] == 34:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 35 or nums[i] == 36:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 37 or nums[i] == 38:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 39 or nums[i] == 40:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 41 or nums[i] == 42:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 43 or nums[i] == 44:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 45 or nums[i] == 46:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 47 or nums[i] == 48:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 49 or nums[i] == 50:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)\n                nums.insert(i,nums[i])\n            elif nums[i] == 51 or nums[i] == 52:\n                nums.pop(i)\n                nums.insert(i,nums[i])\n                dfs(nums,count)\n                nums.pop(i)",
        "num_ids": 2013
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    from itertools import combinations\n",
        "num_ids": 10
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    m = 0\n    for i in range(1, n+1):\n        if i in bell:\n            m += bell[i]\n    return m\n",
        "num_ids": 39
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_memo(n)\n",
        "num_ids": 14
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0: \n        return True \n",
        "num_ids": 18
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n==0:\n        return False\n    increase=decrease=True\n    \n    for i in range(0,n-1):\n        if A[i]>=A[i+1]:\n            increase=False\n        if A[i]<=A[i+1]:\n            decrease=False\n    \n    return True if (decrease and increase) else False",
        "num_ids": 104
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    swapped = False\n    for i in range(len(A)):\n        if A[i]>A[i+1]:\n            A[i], A[i+1] = A[i+1], A[i]\n            swapped = True\n    \n    if swapped == False:\n        return True\n    else:\n        return False\n",
        "num_ids": 84
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    \n    # the sorted array is formed from the sorted list in reverse \n    for i in range(len(A)): \n        if i == len(A) - 1:\n            break\n        if A[i] >= A[i + 1]: \n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 99
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        if A[i] < A[i+1]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if not A:\n        return False\n    if len(A)==1:\n        return True\n    for i in range(len(A)-1):\n        if A[i]<A[i+1]:\n            return False\n        if A[i]>A[i+1]:\n            return False\n    return True\nA = [1,2,3,5,1]\nprint(is_Monotonic(A))\n",
        "num_ids": 104
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # for i in range(len(A)-1):\n    #     if A[i] > A[i+1]:\n    #         return False\n    # return True\n    # for i in range(len(A)-1):\n    #     if A[i] < A[i+1]:\n    #         return False\n    # return True\n    # for i in range(len(A)-1):\n    #     if A[i] > A[i+1]:\n    #         return False\n    # return True\n    # for i in range(len(A)-1):\n    #     if A[i] < A[i+1]:\n    #         return False\n    # return True\n    # for i in range(len(A)-1):\n    #     if A[i] > A[i+1]:\n    #         return False\n    # return True\n    # for i in range(len(A)-1):\n    #     if A[i] < A[i+1]:\n    #         return False\n    # return True\n    # for i in range(len(A)-1):\n    #     if A[i] > A[i+1]:\n    #         return False\n    # return True\n    # for i in range(len(A)-1):\n    #     if A[i] < A[i+1]:\n    #         return False\n    # return True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 365
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Your code here\n    if A == sorted(A):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if l[i+j]!= s[j]:\n                return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) >= len(l):\n        return False\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if len(s) == len(l)-i:\n                return True\n            else:\n                return is_sublist(l[i+1:],s[1:])\n    return False\n",
        "num_ids": 88
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    m = len(s)\n    if m > n:\n        return False\n    if m < n:\n        return False\n    for i in range(0, n - m + 1):\n        if l[i:i+m] == s:\n            return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    for i in range(0, len(s)):\n        if len(s) == 0:\n            return False\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) > len(s):\n        return False\n    for i in range(len(s)):\n        if l[i] == s[i]:\n            continue\n        if l[i] in s:\n            return True\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == None:\n        return False\n    else:\n        while l[-1] == s[-1]:\n            l.pop()\n            s.pop()\n    if len(l) == 0:\n        return True\n    else:\n        return is_sublist(l, s)\n",
        "num_ids": 73
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i == s:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    size = len(s)\n    for i in l:\n        if size!= len(i):\n            return False\n        for j in range(size):\n            if i[j]!= s[j]:\n                return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n=len(Input)\n    if n==0:\n        return False\n    if n>=1 and n<=10:\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    print(\"This function will check whether the given tuple have equal length or not\")\n    if len(Input) < 1:\n        print(\"Input cannot be empty\")\n    elif len(Input) > 1:\n        print(f\"Input: {Input}\")\n        if len(Input[0]) == len(Input[1]):\n            print(f\"Both tuples have equal length\")\n            return True\n        else:\n            print(f\"Both tuples don't have equal length\")\n            return False\n    else:\n        print(f\"Input: {Input}\")\n        print(f\"Only one tuple is given so, only one element and no length\")\n        return True\n",
        "num_ids": 159
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    def unique(Input):\n        return set(Input)\n        \n    if type(Input)!= list:\n        return False\n        \n    Input.sort(key = len)\n    Input_unique = unique(Input)\n    if len(Input) == len(Input_unique):\n        return True\n        \n    else:\n        return False\n    \ndef find_minimum(Input):\n    '''\n    Write a function to find the minimum number in a given list\n    '''\n    if type(Input)!= list:\n        return False\n        \n    Input.sort()\n    \n    if len(Input) == 1:\n        return Input[0]\n        \n    elif Input[0] > Input[1]:\n        return Input[1]\n        \n    else:\n        return Input[0]\n        \ndef find_maximum(Input):\n    '''\n    Write a function to find the maximum number in a given list\n    '''\n    if type(Input)!= list:\n        return False\n        \n    Input.sort(reverse = True)\n    \n    if len(Input) == 1:\n        return Input[0]\n        \n    elif Input[0] < Input[1]:\n        return Input[1]\n        \n    else:\n        return Input[0]\n        \ndef find_middle(Input):\n    '''\n    Write a function to find the middle number in a given list.\n    '''\n    if type(Input)!= list:\n        return False\n        \n    Input.sort()\n    \n    if len(Input) == 1:\n        return Input[0]\n        \n    elif Input[0] == Input[1]:\n        return Input[0]\n        \n    else:\n        return (Input[1] + Input[0]) / 2\n        \ndef find_sum(Input):\n    '''\n    Write a function to find the sum of all the numbers in a given list\n    '''\n    if type(Input)!= list:\n        return False\n        \n    Input = sum(Input)\n    return Input\n        \ndef find_average(Input):\n    '''\n    Write a function to find the average of all the numbers in a given list\n    '''\n    if type(Input)!= list:\n        return False\n        \n    Input = sum(Input) / len(Input)\n    return Input\n    \ndef remove_duplicates(Input):\n    '''\n    Write a function to remove duplicates from a given list\n    '''\n    if type(Input)!= list:\n        return False\n        \n    Input_set = set(Input)\n    Input_no_duplicate = list(Input_set)\n    return Input_no_duplicate\n    \ndef print_duplicate(Input):\n    '''\n    Write a function to print duplicate numbers from a given list.\n    '''\n    if type(Input)!= list:\n        return False\n    \n    Input.sort()\n    duplicate = []\n    for i in range(len(Input) - 1):\n        if Input[i] == Input[i+1]:\n            duplicate.append(Input[i])\n            \n    return duplicate\n    \ndef print_reverse(Input):\n    '''\n    Write a function to print reverse of a given list.\n    '''\n    if type(Input)!= list:\n        return False\n        \n    Input = Input[::-1]\n    return Input\n    \ndef find_reverse(Input):\n    '''\n    Write a function to find the reverse of a given list.\n    '''\n    if type(Input)!= list:\n        return False\n        \n    Input = list(reversed(Input))\n    return Input\n    \ndef find_unique(Input):\n    '''\n    Write a function to find the unique values of a given list.\n    '''\n    if type(Input)!= list:\n        return False\n        \n    Input_unique = set(Input)\n    Input_no_duplicate = list(Input_unique)\n    return Input_no_duplicate\n    \ndef find_vowel(Input):\n    '''\n    Write a function to find the vowels in a given string.\n    '''\n    if type(Input)!= str:\n        return False\n        \n    Input = Input.lower()\n    Input = list(Input)\n    Input_vowel = []\n    \n    for i in range(len(Input)):\n        if Input[i] in ['a', 'e', 'i', 'o', 'u']:\n            Input_vowel.append(Input[i])\n            \n    Input_vowel_string = ''.join(Input_vowel)\n    \n    return Input_vowel_string\n    \ndef find_palindrome(Input):\n    '''\n    Write a function to find the palindrome of a given string.\n    '''\n    if type(Input)!= str:\n        return False\n        \n    Input = Input.lower()\n    Input = list(Input)\n    Input_reversed = Input[::-1]\n    \n    if Input == Input_reversed:\n        return True\n        \n    else:\n        return False\n        \ndef find_digit(Input):\n    '''\n    Write a function to find the digit from a given string.\n    '''\n    if type(Input)!= str:\n        return False\n        \n    Input = Input.lower()\n    Input = list(Input)\n    Input_digit = []\n    \n    for i in range(len(Input)):\n        if Input[i].isdigit():\n            Input_digit.append(Input[i])\n            \n    Input_digit_string = ''.join(Input_digit)\n    \n    return Input_digit_string\n    \ndef find_special_character(Input):\n    '''\n    Write a function to find the special character from a given string.\n    '''\n    if type(Input)!= str:\n        return False\n        \n    Input = Input.lower()\n    Input = list(Input)\n    Input_special_character = []\n    \n    for i in range(len(Input)):\n        if Input[i] in ['!', '@', '#', '$', '%', '^', '&', '*', '(']:\n            Input_special_character.append(Input[i])\n            \n    Input_special_character_string = ''.join(Input_special_character)\n    \n    return Input_special_character_string\n    \ndef find_space(Input):\n    '''\n    Write a function to find the space from a given string.\n    '''\n    if type(Input)!= str:\n        return False\n        \n    Input = Input.lower()\n    Input = list(Input)\n    Input_space = []\n    \n    for i in range(len(Input)):\n        if Input[i] =='':\n            Input_space.append(Input[i])\n            \n    Input_space_string = ''.join(Input_space)\n    \n    return Input_space_string\n    \ndef find_lower_case(Input):\n    '''\n    Write a function to find the lower case letters from a given string.\n    '''\n    if type(Input)!= str:\n        return False\n        \n    Input = Input.lower()\n    Input = list(Input)\n    Input_lower_case = []\n    \n    for i in range(len(Input)):\n        if Input[i].isalpha():\n            Input_lower_case.append(Input[i])\n            \n    Input_lower_case_string = ''.join(Input_lower_case)\n    \n    return Input_lower_case_string\n    \ndef find_upper_case(Input):\n    '''\n    Write a function to find the upper case letters from a given string.\n    '''\n    if type(Input)!= str:\n        return False\n        \n    Input = Input.lower()\n    Input = list(Input)\n    Input_upper_case = []\n    \n    for i in range(len(Input)):\n        if Input[i].isupper():\n            Input_upper_case.append(Input[i])\n            \n    Input_upper_case_string = ''.join(Input_upper_case)\n    \n    return Input_upper_case_string\n    \ndef find_capital_case(Input):\n    '''\n    Write a function to find the capital case letters from a given string.\n    '''\n    if type(Input",
        "num_ids": 7
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lst=[]\n    for i in range(len(Input)):\n        x,y=Input[i]\n        lst.append(x)\n        lst.append(y)\n    for i in range(len(Input)):\n        lst.append(Input[i][0])\n    for i in range(len(Input)):\n        lst.append(Input[i][1])\n    d=dict(Counter(lst))\n    count=0\n    for i in range(len(Input)):\n        if d[Input[i][0]]!=d[Input[i][1]]:\n            count+=1\n    if count>0:\n        return False\n    else:\n        return True\n",
        "num_ids": 172
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    i = 0\n    is_equal = True\n    while i < len(Input) and is_equal:\n        if len(Input[i])!= len(Input[0]):\n            is_equal = False\n        else:\n            i += 1\n    return is_equal\n",
        "num_ids": 82
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input=list(Input)\n    if len(Input)==0:\n        return(False)\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i][0]!=Input[j][0]:\n                return(False)\n    return(True)\n",
        "num_ids": 79
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if(len(i)==len(Input[0])):\n            return 1\n    return 0\n",
        "num_ids": 33
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    no_of_tuple = int(input(\"Enter the no of tuples you want to enter : \"))\n    tuple_data = []\n    for i in range(no_of_tuple):\n        tup = tuple(map(int, input(\"Enter the elements of the {}th tuple : \".format(i+1)).split()))\n        tuple_data.append(tup)\n    no_of_elements = int(input(\"Enter the no of elements in each tuple : \"))\n",
        "num_ids": 118
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        print(i,Input[i])\n        if len(Input[i])!= len(Input[0]):\n            print('false')\n            return False\n    print('true')\n    return True",
        "num_ids": 61
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_of_tuple = len(Input)\n    for i in range(length_of_tuple):\n        if len(Input[i])!= length_of_tuple:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    else:\n        pivot = nums.pop()\n    items_greater = []\n    items_lower = []\n    for item in nums:\n        if item > pivot:\n            items_greater.append(item)\n        else:\n            items_lower.append(item)\n    return comb_sort(items_greater) + [pivot] + comb_sort(items_lower)\n",
        "num_ids": 113
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # # import random\n    # # import time\n    # # start = time.time()\n    # # for i in range(1000):\n    # #     random.shuffle(nums)\n    # # print(time.time() - start)\n    # # start = time.time()\n    # # for i in range(1000):\n    # #     nums.sort()\n    # # print(time.time() - start)\n",
        "num_ids": 105
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    arr = nums\n    arr_len = len(arr)\n    arr_sorted = arr\n    swapped = False\n    while(True):\n        if(swapped == False):\n            for i in range(arr_len):\n                if(i == arr_len - 1):\n                    break\n                elif(arr[i] > arr[i+1]):\n                    swapped = True\n                    arr_sorted[i], arr_sorted[i+1] = arr_sorted[i+1], arr_sorted[i]\n        if(swapped == False):\n            break\n    return arr_sorted\n",
        "num_ids": 150
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # grab the maximum element from the list\n    max_element = nums[0]\n    # grab the minium element from the list\n    min_element = nums[0]\n    # grab the length of the list\n    length = len(nums)\n    # loop through the list\n    for x in range(1, length):\n        # grab the new minium element\n        min_element = nums[x]\n        # grab the current maximum element\n        max_element = nums[x]\n        # compare the minium element with the current maximum element\n        if min_element < max_element:\n            # if the minium element is less than the current maximum element\n            # then swap the minium element with the current maximum element\n            # and move to the next element in the list\n            nums[x] = min_element\n            nums[x - 1] = max_element\n    # the for loop has ended because of a break\n    # the next line is needed to make the for loop work as it is expected\n    if min_element > nums[0]:\n        # if the first element of the list is greater than the maxium element\n        # then swap the maxium element with the first element in the list\n        nums[0] = min_element\n        nums[1] = nums[0]\n    # the for loop has ended because of a break\n    # the next line is needed to make the for loop work as it is expected\n    if max_element < nums[length - 1]:\n        # if the last element of the list is less than the minimum element\n        # then swap the minimum element with the last element in the list\n        nums[length - 1] = max_element\n        nums[length - 2] = nums[length - 1]\n    # the for loop has ended because of a break\n    return nums\n",
        "num_ids": 430
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #compare the first and last items, and swap them if they are not in order.\n    if len(nums) > 1:\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums\n",
        "num_ids": 97
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return\n    # grab the first element in the array\n    min_val = nums[0]\n    # grab the last element in the array\n    max_val = nums[-1]\n",
        "num_ids": 59
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #find the largest element\n    max_elem = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_elem:\n            max_elem = nums[i]\n    # make a count list\n    count = [0]*(max_elem+1)\n    # get the count list\n    for i in range(len(nums)):\n        count[nums[i]] += 1\n    #find the min number\n    min_elem = count[0]\n    for i in range(1, len(count)):\n        if count[i] < min_elem:\n            min_elem = count[i]\n    #sort the list by using count\n    for i in range(min_elem):\n        nums[i] = count[i]\n    #sort the list by using max element\n    for i in range(min_elem, len(nums)):\n        nums[i] = max_elem\n",
        "num_ids": 245
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                nums[i],nums[j] = swap(i,j)\n                \ndef comb_sort2(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[j] = x,y\n                else:\n                    nums[i],nums[j] = y,x\n                \ndef comb_sort3(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[j] = x,y\n                else:\n                    nums[i],nums[j] = y,x\n                \ndef comb_sort4(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[j] = x,y\n                else:\n                    nums[i],nums[j] = y,x\n                \ndef comb_sort5(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[j] = x,y\n                else:\n                    nums[i],nums[j] = y,x\n                \ndef comb_sort6(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[j] = x,y\n                else:\n                    nums[i],nums[j] = y,x\n                \ndef comb_sort7(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[j] = x,y\n                else:\n                    nums[i],nums[j] = y,x\n                \ndef comb_sort8(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[j] = x,y\n                else:\n                    nums[i],nums[j] = y,x\n                \ndef comb_sort9(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[j] = x,y\n                else:\n                    nums[i],nums[j] = y,x\n                \ndef comb_sort10(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[j] = x,y\n                else:\n                    nums[i],nums[j] = y,x\n                \ndef comb_sort11(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        return nums[i],nums[j]\n    \n    def p(x):\n        return x%2==1\n    \n    def q(x):\n        return x%2==0\n    \n    n = len(nums)\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            if nums[i] > nums[j]:\n                x,y = swap(i,j)\n                if p(x):\n                    nums[i],nums[",
        "num_ids": 139
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n",
        "num_ids": 42
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    result= False\n    if n==0:\n        result= True\n    elif n==1 or n==2 or n==3 or n==4 or n==5:\n        result= True\n    elif n==6 or n==7 or n==8 or n==9 or n==10 or n==11 or n==12 or n==13 or n==14 or n==15 or n==16 or n==17 or n==18 or n==19 or n==20 or n==21 or n==22 or n==23 or n==24 or n==25 or n==26 or n==27 or n==28 or n==29 or n==30 or n==31 or n==32 or n==33 or n==34 or n==35 or n==36 or n==37 or n==38 or n==39 or n==40 or n==41 or n==42 or n==43 or n==44 or n==45 or n==46 or n==47 or n==48 or n==49 or n==50 or n==51 or n==52 or n==53 or n==54 or n==55 or n==56 or n==57 or n==58 or n==59 or n==60 or n==61 or n==62 or n==63 or n==64 or n==65 or n==66 or n==67 or n==68 or n==69 or n==70 or n==71 or n==72 or n==73 or n==74 or n==75 or n==76 or n==77 or n==78 or n==79 or n==80 or n==81 or n==82 or n==83 or n==84 or n==85 or n==86 or n==87 or n==88 or n==89 or n==90 or n==91 or n==92 or n==93 or n==94 or n==95 or n==96 or n==97 or n==98 or n==99 or n==100 or n==101 or n==102 or n==103 or n==104 or n==105 or n==106 or n==107 or n==108 or n==109 or n==110 or n==111 or n==112 or n==113 or n==114 or n==115 or n==116 or n==117 or n==118 or n==119 or n==120 or n==121 or n==122 or n==123 or n==124 or n==125 or n==126 or n==127 or n==128 or n==129 or n==130 or n==131 or n==132 or n==133 or n==134 or n==135 or n==136 or n==137 or n==138 or n==139 or n==140 or n==141 or n==142 or n==143 or n==144 or n==145 or n==146 or n==147 or n==148 or n==149 or n==150 or n==151 or n==152 or n==153 or n==154 or n==155 or n==156 or n==157 or n==158 or n==159 or n==160 or n==161 or n==162 or n==163 or n==164 or n==165 or n==166 or n==167 or n==168 or n==169 or n==170 or n==171 or n==172 or n==173 or n==174 or n==175 or n==176 or n==177 or n==178 or n==179 or n==180 or n==181 or n==182 or n==183 or n==184 or n==185 or n==186 or n==187 or n==188 or n==189 or n==190 or n==191 or n==192 or n==193 or n==194 or n==195 or n==196 or n==197 or n==198 or n==199 or n==200 or n==201 or n==202 or n==203 or n==204 or n==205 or n==206 or n==207 or n==208 or n==209 or n==210 or n==211 or n==212 or n==213 or n==214 or n==215 or n==216 or n==217 or n==218 or n==219 or n==220 or n==221 or n==222 or n==223 or n==224 or n==225 or n==226 or n==227 or n==228 or n==229 or n==230 or n==231 or n==232 or n==233 or n==234 or n==235 or n==236 or n==237 or n==238 or n==239 or n==240 or n==241 or n==242 or n==243 or n==244 or n==245 or n==246 or n==247 or n==248 or n==249 or n==250 or n==251 or n==252 or n==253 or n==254 or n==255 or n==256 or n==257 or n==258 or n==259 or n==260 or n==261 or n==262 or n==263 or n==264 or n==265 or n==266 or n==267 or n==268 or n==269 or n==270 or n==271 or n==272 or n==273 or n==274 or n==275 or n==276 or n==277 or n==278 or n==279 or n==280 or n==281 or n==282 or n==283 or n==284 or n==285 or n==286 or n==287 or n==288 or n==289 or n==290 or n==291 or n==292 or n==293 or n==294 or n==295 or n==296 or n==297 or n==298 or n==299 or n==300 or n==301 or n==302 or n==303 or n==304 or n==305 or n==306 or n==307 or n==308 or n==309 or n==310 or n==311 or n==312 or n==313 or n==314 or n==315 or n==316 or n==317 or n==318 or n==319 or n==320 or n==321 or n==322 or n==323 or n==324 or n==325 or n==326 or n==327 or n==328 or n==329 or n==330 or n==331 or n==332 or n==333 or n==334 or n==335 or n==336 or n==337 or n==338 or n==339 or n==340 or n==341 or n==342 or n==343 or n==344 or n==345 or n==346 or n==347 or n==348 or n==349 or n==350 or n==351 or n==352 or n==353 or n==354 or n==355 or n==356 or n==357 or n==358 or n==359 or n==360 or n==361 or n==362 or n==363 or n==364 or n==365 or n==366 or n==367 or n==368 or n==369 or n==370 or n==371 or n==372 or n==373 or n==374 or n==375 or n==376 or n==377 or n==378 or n==379 or n==380 or n==381 or n==382 or n==383 or n==384 or n==385 or n==386 or n==387 or n==388 or n==389 or n==390 or n==391 or n==392 or n==393 or n==394 or n==395 or n==396 or n==397 or n==398 or n==399 or n==400 or n==401 or n==402 or n==403 or n==404 or n==405 or n==406 or n==407 or n==408 or n==409 or n==410 or n==411 or n==412 or n==413 or n==414 or n==415 or n==416 or n==417 or n==418 or n==419 or n==420 or n==421 or n==422 or n==423 or n==424 or n==425 or n==426 or n==427 or n==428 or n==429 or n==430 or n==431 or n==432 or n==433 or n==434 or n==435 or n==436 or n==437 or n==438 or n==439 or n==440 or n==441 or n==442 or n==443 or n==444 or n==445 or n==446 or n==447 or n==448 or n==449 or n==450 or n==451 or n==452 or n==453 or n==454 or n==455 or n==456 or n==457 or n==458 or n==459 or n==460 or n==461 or n==462 or n==463 or n==464 or n==465 or n==466 or n==467 or n==468 or n==469 or n==470 or n==471 or n==472 or n==473 or n==474 or n==475 or n==476 or n==477 or n==478 or n==479 or n==480 or n==481 or n==482 or n==483 or n==484 or n==485 or n==486 or n==487 or n==488 or n==489 or n==490 or n==491 or n==492 or n==493 or n==494 or ",
        "num_ids": 2008
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n + 1):\n        if i * i == n:\n            print (\"Yes\")\n            break\n    else:\n        print (\"No\")\ndif_Square(20)\n",
        "num_ids": 49
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(1, int(n/2)):\n        if n % i == 0:\n            return False\n        else:\n            continue\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<0:\n        return False\n    diff = int(n**0.5)\n    return n == (diff*diff)\n",
        "num_ids": 35
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    temp=n\n    s1=0\n    s2=0\n    while(temp!=0):\n        a=temp%10\n        temp=temp//10\n        s1=s1+a**2\n        s2=s2+a\n    if(s1==s2):\n        return True\n    else:\n        return False\n",
        "num_ids": 84
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return True if n == (n*n) else False\n",
        "num_ids": 16
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    s = sum(range(1,n+1))\n    square_sum = s**2\n    diff = n - square_sum\n    if diff == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if n==i*i:\n            return True\n        else:\n            return False\n    \ndef sum_digits(n):\n    '''\n    Write a python function to check whether the given number is a sum of two integers.\n    '''\n    Sum=0\n    while n!=0:\n        Sum=Sum+n%10\n        n=n//10\n    if Sum==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    num = n ** 2\n    if num%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return str(n) == str(n**2)\n",
        "num_ids": 16
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def same(i, j):\n        return colors[i] == patterns[j]\n    \n    if len(colors)!= len(patterns): return False\n    if len(patterns) == 0: return True\n    \n    i = 0\n    for j in range(len(patterns)):\n        if same(i, j):\n            i += 1\n        else:\n            return False\n    \n    return True\n",
        "num_ids": 102
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern = \"\"\n    for i in range(0,3):\n        for j in range(0,3):\n            pattern += str(colors[i][j])\n    print(pattern)\n    for i in range(0,9):\n        for j in range(0,9):\n            if patterns[i][j]!= pattern:\n                return False\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # First we just need to check that all the patterns are the same size\n    assert len(colors) == len(patterns)\n    # Next we need to check that all the elements in patterns match the lengths of colors\n    for pattern in patterns:\n        assert len(pattern) == len(colors)\n    # Now we need to make sure that the colors in patterns are in colors\n    for pattern in patterns:\n        assert pattern in colors\n    \n    return True\n",
        "num_ids": 108
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if i == 0:\n            if colors[patterns[i]]!= patterns[i+1]:\n                return False\n        else:\n            if colors[patterns[i]]!= patterns[i+1] and patterns[i]!= patterns[i-1]:\n                return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = patterns.lower()\n    patterns = patterns.replace(' ', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('/', '')\n    patterns = patterns.replace('%', '')\n    patterns = patterns.replace('&', '')\n    patterns = patterns.replace('*', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('[', '')\n    patterns = patterns.replace(']', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('~', '')\n    patterns = patterns.replace('|', '')\n    patterns = patterns.replace('^', '')\n    patterns = patterns.replace('$', '')\n    patterns = patterns.replace('+', '')\n    patterns = patterns.replace('=', '')\n    patterns = patterns.replace('!', '')\n    patterns = patterns.replace('#', '')\n    patterns = patterns.replace('@', '')\n    patterns = patterns.replace('%', '')\n    patterns = patterns.replace('$', '')\n    patterns = patterns.replace('^', '')\n    patterns = patterns.replace('&', '')\n    patterns = patterns.replace('*', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('\\\\', '')\n    patterns = patterns.replace('|', '')\n    patterns = patterns.replace('\"', '')\n    patterns = patterns.replace('~', '')\n    patterns = patterns.replace('_', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('+', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('[', '')\n    patterns = patterns.replace(']', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('=', '')\n    patterns = patterns.replace('!', '')\n    patterns = patterns.replace('&', '')\n    patterns = patterns.replace('*', '')\n    patterns = patterns.replace('|', '')\n    patterns = patterns.replace('[', '')\n    patterns = patterns.replace(']', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('%', '')\n    patterns = patterns.replace('^', '')\n    patterns = patterns.replace('@', '')\n    patterns = patterns.replace('$', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('\"', '')\n    patterns = patterns.replace('~', '')\n    patterns = patterns.replace('_', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('\\\\', '')\n    patterns = patterns.replace('|', '')\n    patterns = patterns.replace('/', '')\n    patterns = patterns.replace('^', '')\n    patterns = patterns.replace('$', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('=', '')\n    patterns = patterns.replace('!', '')\n    patterns = patterns.replace('&', '')\n    patterns = patterns.replace('*', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('+', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('[', '')\n    patterns = patterns.replace(']', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('%', '')\n    patterns = patterns.replace('^', '')\n    patterns = patterns.replace('@', '')\n    patterns = patterns.replace('$', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('\"', '')\n    patterns = patterns.replace('~', '')\n    patterns = patterns.replace('_', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('\\\\', '')\n    patterns = patterns.replace('|', '')\n    patterns = patterns.replace('[', '')\n    patterns = patterns.replace(']', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('=', '')\n    patterns = patterns.replace('!', '')\n    patterns = patterns.replace('&', '')\n    patterns = patterns.replace('*', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('+', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('[', '')\n    patterns = patterns.replace(']', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('%', '')\n    patterns = patterns.replace('^', '')\n    patterns = patterns.replace('@', '')\n    patterns = patterns.replace('$', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('\"', '')\n    patterns = patterns.replace('~', '')\n    patterns = patterns.replace('_', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('+', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('[', '')\n    patterns = patterns.replace(']', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('=', '')\n    patterns = patterns.replace('!', '')\n    patterns = patterns.replace('&', '')\n    patterns = patterns.replace('*', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('+', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('[', '')\n    patterns = patterns.replace(']', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('=', '')\n    patterns = patterns.replace('!', '')\n    patterns = patterns.replace('&', '')\n    patterns = patterns.replace('*', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('+', '')\n    patterns = patterns.replace('(', '')\n    patterns = patterns.replace(')', '')\n    patterns = patterns.replace('[', '')\n    patterns = patterns.replace(']', '')\n    patterns = patterns.replace('{', '')\n    patterns = patterns.replace('}', '')\n    patterns = patterns.replace('=', '')\n    patterns = patterns.replace('!', '')\n    patterns = patterns.replace('&', '')\n    patterns = patterns.replace('*', '')\n    patterns = patterns.replace('-', '')\n    patterns = patterns.replace('+', '')\n    patterns = patterns.replace('(', '",
        "num_ids": 2010
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if colors == None or patterns == None:\n        return False\n    i = 0\n    while i < len(patterns):\n        j = 0\n        while j < len(patterns[i]):\n            if patterns[i][j] == \"Y\":\n                if colors[j]!= colors[i + j]:\n                    return False\n            j += 1\n        i += 1\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(item == patterns[0] for item in colors)\n",
        "num_ids": 18
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # if patterns is empty, return true\n    if patterns==[]: return True\n    # if colors is empty, return false\n    if colors==[]: return False\n    # check the first two values\n    if colors[0]!=patterns[0] and patterns[0]!='S': return False\n    if patterns[1]!=colors[1] and patterns[1]!='S': return False\n    # if the patterns and colors are the same, the length will be 3+n, the for loop will be n times\n    for i in range(len(colors)-2):\n        if colors[i+2]!=patterns[i+2] and patterns[i+2]!='S': return False\n    # if all the colors and patterns are matched, return true\n    return True\n",
        "num_ids": 188
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    curr_pattern = 0\n    for pattern in patterns:\n        if colors[pattern]!= colors[pattern + 1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    if len(test_list) == 0:\n        return []\n    \n    result = []\n    for i in range(0, len(test_list)):\n        if test_list[i][0] % K == 0 or test_list[i][1] % K == 0:\n            result.append(test_list[i])\n    \n    return result\n",
        "num_ids": 90
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] % K == test_list[j][0] % K and test_list[i][1] % K == test_list[j][1] % K:\n                result.append(tuple([test_list[i][0], test_list[i][1]]))\n                result.append(tuple([test_list[j][0], test_list[j][1]]))\n    return result\n",
        "num_ids": 142
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for elem in test_list:\n        if all(elem[i] % K == 0 for i in range(len(elem))):\n            result.append(elem)\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in test_list:\n        if not all(i%k == 0 for k in range(1,K+1)):\n            res.append(i)\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    for i in range(len(test_list)):\n        if (len(test_list[i])%K) == 0:\n            tuple_list.append(test_list[i])\n    return tuple_list\n",
        "num_ids": 63
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    a = []\n    for i in range(len(test_list)):\n        x = test_list[i]\n        #print(x)\n        for j in range(len(x)):\n            #print(x[j])\n            if x[j]%K!=0:\n                #print(x[j]%K)\n                break\n        else:\n            #print('inside else')\n            a.append(x)\n    return a\n",
        "num_ids": 111
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for a in test_list:\n        for i in range(1, K):\n            if a[i] % K!= 0:\n                break\n        else:\n            res.append(a)\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output_list = []\n    for i in range(len(test_list)):\n        if (test_list[i][0] % K == 0) and (test_list[i][1] % K == 0) and (test_list[i][2] % K == 0):\n            output_list.append(test_list[i])\n    return output_list\n",
        "num_ids": 90
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 and test_list[i][1] % K == 0:\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in test_list:\n        if all(x % K == 0 for x in i):\n            res.append(i)\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 ==0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0): \n        return True\n    else: \n        return False\n    \nif __name__ == '__main__':\n    \n    n=int(input())\n    if is_Diff(n):\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 74
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print(str(n)+\" is divisible by 11\")\n    else:\n        print(str(n)+\" is not divisible by 11\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2015
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Remove pass and write your logic here\n    \n    if (len(s)%2)==0:\n        print(\"word length is odd\")\n    else:\n        print(\"word length is even\")\n        \ns = \"hello world\"\nword_len(s) \n",
        "num_ids": 67
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s) % 2 == 0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s=s.split()\n    for i in s:\n        if len(i)%2!=0:\n            return i\n",
        "num_ids": 34
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n",
        "num_ids": 11
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\nprint(word_len(\"prakash\"))\n",
        "num_ids": 24
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    assert type(s) == str, \"Type of input is not string\"\n    return len(s)%2 == 0\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_len = len(s)\n    if word_len % 2 == 0:\n        return print(\"Your word is an even word\")\n    else:\n        return print(\"Your word is an odd word\")\n",
        "num_ids": 51
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l=s.split()\n    print(\"Length of the string is :\",len(l))\n    if len(l)%2==0:\n        print(\"The length is even\")\n    else:\n        print(\"The length is odd\")\nword_len(\"python is very easy\")\n",
        "num_ids": 69
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return \"even\"\n    else:\n        return \"odd\"\n    \nprint(word_len(\"hello\"))\nprint(word_len(\"abcd\"))\n",
        "num_ids": 51
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    i = 1\n    while i <= n:\n        i += 4*(n-1)\n    return i\n",
        "num_ids": 29
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**3/2 - n + 1\n",
        "num_ids": 14
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    else:\n        return 8\n",
        "num_ids": 33
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    result = 0\n    for i in range(1,n+1):\n        result += i**3\n    return result\n    ",
        "num_ids": 43
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def calc_sum(n):\n        if n <= 2:\n            return 3*n - 2\n        else:\n            return 3*n - 2 + calc_sum(n - 2)\n    return calc_sum(n)\n",
        "num_ids": 56
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(2*n+1)/6\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    while True:\n        if (n % 3 == 0) or (n % 2 == 0) or (n % 4 == 0):\n            n = n + 1\n            result = result + 1\n        else:\n            n = n + 1\n            result = result + 2\n        if n >= 100:\n            return result\n",
        "num_ids": 81
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a,b,c,d,e = 1,1,1,1,1\n    for i in range(n):\n        a,b,c,d,e = d,e,a+b+c,a+b+d+e,a+b+d+c+e\n    return e\n",
        "num_ids": 75
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r,3)\nprint(\"Volume of a sphere of radius 5 is: \",volume_sphere(5))\ndef volume_cylinder(height,radius):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * height * math.pow(radius,2)\nprint(\"Volume of a cylinder of height 5cm and radius of 5cm is: \",volume_cylinder(5,5))\ndef volume_cone(height,radius):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * math.pow(radius,2) * height\nprint(\"Volume of a cone of height 5cm and radius of 5cm is: \",volume_cone(5,5))\ndef volume_cone_torus(height,radius):\n    '''\n    Write a function to find the volume of a cone torus.\n    '''\n    return (volume_cone(height,radius) * math.pow(radius,2))\nprint(\"Volume of a cone torus of height 5cm and radius of 5cm is: \",volume_cone_torus(5,5))\ndef area_cylinder(height,radius):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return math.pi * radius * height\nprint(\"Area of a cylinder of height 5cm and radius of 5cm is: \",area_cylinder(5,5))\ndef volume_cone_torus_prime(height,radius):\n    '''\n    Write a function to find the volume of a cone torus.\n    '''\n    return math.pow(radius,3) * height\nprint(\"Volume of a cone torus of height 5cm and radius of 5cm is: \",volume_cone_torus_prime(5,5))\ndef volume_sphere_prime(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r,3)\nprint(\"Volume of a sphere of radius 5 is: \",volume_sphere_prime(5))\ndef volume_cylinder_prime(height,radius):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * math.pow(radius,2) * height\nprint(\"Volume of a cylinder of height 5cm and radius of 5cm is: \",volume_cylinder_prime(5,5))\ndef volume_cone_torus_prime(height,radius):\n    '''\n    Write a function to find the volume of a cone torus.\n    '''\n    return (volume_cone_torus_prime(height,radius) * math.pow(radius,2))\nprint(\"Volume of a cone torus of height 5cm and radius of 5cm is: \",volume_cone_torus_prime(5,5))\ndef volume_sphere_prime(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r,3)\nprint(\"Volume of a sphere of radius 5 is: \",volume_sphere_prime(5))\ndef volume_cylinder_prime(height,radius):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * math.pow(radius,2) * height\nprint(\"Volume of a cylinder of height 5cm and radius of 5cm is: \",volume_cylinder_prime(5,5))\ndef volume_cone_torus_prime(height,radius):\n    '''\n    Write a function to find the volume of a cone torus.\n    '''\n    return (volume_cone_torus_prime(height,radius) * math.pow(radius,2))\nprint(\"Volume of a cone torus of height 5cm and radius of 5cm is: \",volume_cone_torus_prime(5,5))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r,3)\nprint(\"Volume of a sphere of radius 5 is: \",volume_sphere(5))\ndef volume_cylinder(height,radius):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * math.pow(radius,2) * height\nprint(\"Volume of a cylinder of height 5cm and radius of 5cm is: \",volume_cylinder(5,5))\ndef volume_cone(height,radius):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * math.pow(radius,2) * height\nprint(\"Volume of a cone of height 5cm and radius of 5cm is: \",volume_cone(5,5))\ndef volume_cone_torus(height,radius):\n    '''\n    Write a function to find the volume of a cone torus.\n    '''\n    return (volume_cone(height,radius) * math.pow(radius,2))\nprint(\"Volume of a cone torus of height 5cm and radius of 5cm is: \",volume_cone_torus(5,5))\ndef volume_sphere_prime(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r,3)\nprint(\"Volume of a sphere of radius 5 is: \",volume_sphere_prime(5))\ndef volume_cylinder_prime(height,radius):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * math.pow(radius,2) * height\nprint(\"Volume of a cylinder of height 5cm and radius of 5cm is: \",volume_cylinder_prime(5,5))\ndef volume_cone_torus_prime(height,radius):\n    '''\n    Write a function to find the volume of a cone torus.\n    '''\n    return (volume_cone_torus_prime(height,radius) * math.pow(radius,2))\nprint(\"Volume of a cone torus of height 5cm and radius of 5cm is: \",volume_cone_torus_prime(5,5))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r,3)\nprint(\"Volume of a sphere of radius 5 is: \",volume_sphere(5))\ndef volume_cylinder(height,radius):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * math.pow(radius,2) * height\nprint(\"Volume of a cylinder of height 5cm and radius of 5cm is: \",volume_cylinder(5,5))\ndef volume_cone(height,radius):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * math.pow(radius,2) * height\nprint(\"Volume of a cone of height 5cm and radius of 5cm is: \",volume_cone(5,5))\ndef volume_cone_torus(height,radius):\n    '''\n    Write a function to find the volume of a cone torus.\n    '''\n    return (volume_cone(height,radius) * math.pow(radius,2))\nprint(\"Volume of a cone torus of height 5cm and radius of 5cm is: \",volume_cone_torus(5,5))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r,3)\nprint(\"Volume of a sphere of radius 5 is: \",volume_sphere(5))\ndef volume_cylinder(height,radius):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * math.pow(radius,2) * height\nprint(\"Volume of a cylinder of height 5cm and radius of 5cm is: \",volume_cylinder(5,5))\ndef volume_cone(height,radius):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return mat",
        "num_ids": 5
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n",
        "num_ids": 22
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r < 0:\n        raise ValueError(\"radius should be positive\")\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 36
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    V = (4/3)*pi*(r**3)\n    return V\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = math.pi\n    V = pi*h*(r**2)\n    return V\n",
        "num_ids": 26
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4/3*math.pi*(r**3)\n    print(V)\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    V=l**3\n    print(V)\n    \ndef volume_sphere_cuboid(l,h,w):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    V=l*h*w\n    print(V)\n    \ndef volume_cube_sphere(r,l):\n    '''\n    Write a function to find the volume of a cube and sphere.\n    '''\n    V=math.pi*r**2*l\n    print(V)\n    \ndef volume_cube_sphere_v2(r,l):\n    '''\n    Write a function to find the volume of a cube and sphere.\n    '''\n    V=0.5*math.pi*r**2*l\n    print(V)\n    \ndef volume_cube_sphere_v3(r,l):\n    '''\n    Write a function to find the volume of a cube and sphere.\n    '''\n    V=0.5*math.pi*r**2*l\n    print(V)\n    \ndef volume_cube_sphere_v4(r,l):\n    '''\n    Write a function to find the volume of a cube and sphere.\n    '''\n    V=math.pi*r**2*l\n    print(V)\n    \ndef volume_sphere_sphere(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=4/3*math.pi*(r1**3+r2**3-2*r1*r2*math.sqrt(r1**2+r2**2))\n    print(V)\n    \ndef volume_sphere_sphere_v2(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=4/3*math.pi*(r1**3+r2**3-2*r1*r2*math.sqrt(r1**2+r2**2))\n    print(V)\n    \ndef volume_sphere_sphere_v3(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=4/3*math.pi*(r1**3+r2**3-2*r1*r2*math.sqrt(r1**2+r2**2))\n    print(V)\n    \ndef volume_sphere_sphere_v4(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v5(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v6(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v7(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v8(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v9(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v10(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v11(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v12(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v13(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v14(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v15(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v16(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math.pi*r2**3-2*math.pi*r1*r2*math.sqrt(r1**2+r2**2)\n    print(V)\n    \ndef volume_sphere_sphere_v17(r1,r2):\n    '''\n    Write a function to find the volume of a sphere and a sphere.\n    '''\n    V=math.pi*r1**3+math",
        "num_ids": 15
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(\"Volume of Sphere (r=1): \" + str(math.pi * 4 / 3 * math.pow(1, 3) * math.pow(r, 3)))\n    \ndef volume_cuboid(w, h, d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    print(\"Volume of Cuboid (w=1, h=2, d=3): \" + str(math.pi * w * h * d))\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    print(\"Area of Sphere (r=1): \" + str(math.pi * 4 * math.pow(1, 2) * math.pow(r, 2)))\n    \ndef area_cuboid(w, h, d):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    print(\"Area of Cuboid (w=1, h=2, d=3): \" + str(2 * math.pi * w * h + 2 * math.pi * w * d + 2 * math.pi * h * d))\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    print(\"Volume of Cylinder (r=1, h=2): \" + str(math.pi * math.pow(r, 2) * math.pow(h, 2)))\n    \ndef area_cylinder(r, h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    print(\"Area of Cylinder (r=1, h=2): \" + str(2 * math.pi * math.pow(r, 2) * h))\n    \ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print(\"Volume of Cone (r=1, h=2): \" + str(math.pi * math.pow(r, 2) * h))\n    \ndef area_cone(r, h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    print(\"Area of Cone (r=1, h=2): \" + str(math.pi * r * h * 2))\n    \ndef volume_pyramid(a, b, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    print(\"Volume of Pyramid (a=1, b=2, h=3): \" + str(math.pi * math.pow(a, 2) * math.pow(b, 2) * h))\n    \ndef area_pyramid(a, b, h):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    print(\"Area of Pyramid (a=1, b=2, h=3): \" + str(math.pi * math.pow(a, 2) * math.pow(b, 2) * h / 3))\n    \ndef volume_cone_prism(r, h, l):\n    '''\n    Write a function to find the volume of a cone-prism.\n    '''\n    print(\"Volume of Cone-Prism (r=1, h=2, l=3): \" + str(math.pi * math.pow(r, 2) * math.pow(h, 2) * l))\n    \ndef volume_cone_prism_area(r, h, l):\n    '''\n    Write a function to find the area of a cone-prism.\n    '''\n    print(\"Area of Cone-Prism (r=1, h=2, l=3): \" + str(math.pi * math.pow(r, 2) * math.pow(h, 2) * l * h))\n    \ndef volume_pyramid_prism(a, b, h, l):\n    '''\n    Write a function to find the volume of a pyramid-prism.\n    '''\n    print(\"Volume of Pyramid-Prism (a=1, b=2, h=3, l=4): \" + str(math.pi * math.pow(a, 2) * math.pow(b, 2) * math.pow(h, 2) * l))\n    \ndef volume_pyramid_prism_area(a, b, h, l):\n    '''\n    Write a function to find the area of a pyramid-prism.\n    '''\n    print(\"Area of Pyramid-Prism (a=1, b=2, h=3, l=4): \" + str(math.pi * math.pow(a, 2) * math.pow(b, 2) * math.pow(h, 2) * l * h / 3))\n    \ndef volume_pyramid_prism_truncated(a, b, h, l):\n    '''\n    Write a function to find the volume of a pyramid-prism with truncated height.\n    '''\n    print(\"Volume of Pyramid-Prism Truncated (a=1, b=2, h=3, l=4): \" + str(math.pi * math.pow(a, 2) * math.pow(b, 2) * math.pow(h, 2) * l * h / 3))\n    \ndef volume_pyramid_prism_truncated_area(a, b, h, l):\n    '''\n    Write a function to find the area of a pyramid-prism with truncated height.\n    '''\n    print(\"Area of Pyramid-Prism Truncated (a=1, b=2, h=3, l=4): \" + str(math.pi * math.pow(a, 2) * math.pow(b, 2) * math.pow(h, 2) * l * h * l / 3))\n    \ndef volume_pyramid_prism_truncated_square_area(a, b, h, l):\n    '''\n    Write a function to find the area of a pyramid-prism with truncated height and square base.\n    '''\n    print(\"Area of Pyramid-Prism Truncated (a=1, b=2, h=3, l=4): \" + str(math.pi * math.pow(a, 2) * math.pow(b, 2) * math.pow(h, 2) * l * h * l / 3))\n    \ndef volume_pyramid_prism_truncated_square_volume(a, b, h, l):\n    '''\n    Write a function to find the volume of a pyramid-prism with truncated height and square base.\n    '''\n    print(\"Volume of Pyramid-Prism Truncated (a=1, b=2, h=3, l=4): \" + str(math.pi * math.pow(a, 2) * math.pow(b, 2) * math.pow(h, 2) * l * h * l))\n    \ndef volume_pyramid_prism_truncated_square_height(a, b, h, l):\n    '''\n    Write a function to find the height of a pyramid-prism with truncated height and square base.\n    '''\n    print(\"Height of Pyramid-Prism Truncated (a=1, b=2, h=3, l=4): \" + str(math.pow(a, 2) * math.pow(b, 2) * math.pow(h, 2) * l * h * l / 3))\n    \ndef volume_pyramid_prism_truncated_square_base(a, b, h, l):\n    '''\n    Write a function to find the base of a pyramid-prism with truncated height and square base.\n    '''\n    print(\"Base of Pyramid-Prism Truncated (a=1, b=2, h=3, l=4): \" + str(math.pow(a, 2) * math.pow(b, 2) * math.pow(h, 2) * l * h * l / 3))\n    \ndef volume_pyramid_prism_truncated_square_height_base(a, b, h, l):\n    '''\n    Write a function to find the height and base of a pyramid-prism with truncated height and square base.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14159265358979323846\n    volume = (4/3) * pi * r**3\n    return volume\n",
        "num_ids": 35
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*pow(r,3)\n",
        "num_ids": 21
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n",
        "num_ids": 16
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in strr:\n        ans = ans + ord(i)\n    return ans%26\n",
        "num_ids": 31
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = \"\"\n    for i in strr:\n        result += chr(ord(i) + ord('a') % 26)\n    return result\n    \n    \ndef get_ASCII(strr):  \n    '''\n    Write a python function to find the ASCII value of the given string.\n    '''\n    return sum([ord(i) for i in strr])\n    \n    \ndef get_Ratio(strr1, strr2):  \n    '''\n    Write a python function to compute the ratio of strings(strr1) and string(strr2).\n    '''\n    return len(strr1) / len(strr2)\n    \n    \ndef get_Triple_Character(strr):  \n    '''\n    Write a python function to find the triple character made by removing the last character of the given string.\n    '''\n    result = strr[:-1]\n    return result\n    \n    \ndef get_Numbers_in_String(strr):  \n    '''\n    Write a python function to check whether the given string contains any numbers.\n    '''\n    for i in strr:\n        if i.isdigit():\n            return True\n    return False\n    \n    \ndef get_First_non_repeating_character(strr):  \n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    result = \"\"\n    for i in strr:\n        if not(i in result):\n            result += i\n    return result\n    \n    \ndef get_String_bits(strr):  \n    '''\n    Write a python function to count the number of bits in the given string.\n    '''\n    result = 0\n    for i in strr:\n        result = result * 2 + 1\n    return result\n    \n    \ndef get_First_uniq_char(strr):  \n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    for i in strr:\n        if not(i in strr):\n            return i\n    return \"No first non-repeating character\"\n    \n    \ndef get_String_Odd_Even(strr):  \n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    result = \"\"\n    for i in strr:\n        if i == \" \":\n            continue\n        if i =='':\n            result = i\n        elif not(i in result):\n            result += i\n        else:\n            result = result.replace(i, \" \")\n    return result\n    \n    \ndef get_Count_of_Vowels_and_Consonants(strr):  \n    '''\n    Write a python function to find the count of vowels and consonants in a given string.\n    '''\n    result = {'vowels':0, 'consonants':0}\n    for i in strr:\n        if i.isalpha():\n            if i in 'aeiou':\n                result['vowels'] += 1\n            elif i in 'bcdfghjklmnpqrstvwxyz':\n                result['consonants'] += 1\n    return result\n    \n    \ndef get_Sum_of_Two_Numbers(arr):  \n    '''\n    Write a python function to find the sum of two given numbers.\n    '''\n    if len(arr) < 2:\n        return -1\n    return arr[0] + arr[1]\n    \n    \ndef get_First_Repeated_Character(strr):  \n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(strr) < 2:\n        return -1\n    for i in strr:\n        if strr.count(i) > 1:\n            return i\n    return \"No first repeated character\"\n    \n    \ndef get_String_Palindrome(strr):  \n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    result = \"\"\n    for i in strr:\n        if i!= result:\n            return False\n        result = i\n    return True\n    \n    \ndef get_Middle_String(strr):  \n    '''\n    Write a python function to return the middle substring of a given string.\n    '''\n    if len(strr) % 2 == 1:\n        return strr[len(strr)//2]\n    else:\n        return strr[int(len(strr)//2-1)] + strr[int(len(strr)//2)]\n    \n    \ndef get_Longest_Word(strr):  \n    '''\n    Write a python function to return the longest word in a given string.\n    '''\n    result = \"\"\n    for i in strr.split():\n        if len(result) < len(i):\n            result = i\n    return result\n    \n    \ndef get_Number_of_Vowels(strr):  \n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    result = 0\n    for i in strr:\n        if i in 'aeiou':\n            result += 1\n    return result\n    \n    \ndef get_Number_Of_Words(strr):  \n    '''\n    Write a python function to find the number of words in a given string.\n    '''\n    result = 0\n    for i in strr.split():\n        result += 1\n    return result\n    \n    \ndef get_Number_Of_Dots(strr):  \n    '''\n    Write a python function to find the number of dots in a given string.\n    '''\n    return strr.count('.')\n    \n    \ndef get_Number_Of_Digits(strr):  \n    '''\n    Write a python function to find the number of digits in a given string.\n    '''\n    return len(strr) - strr.count(' ')\n    \n    \ndef get_Longest_Word_in_String(strr):  \n    '''\n    Write a python function to find the longest word in a given string.\n    '''\n    result = \"\"\n    for i in strr.split():\n        if len(result) < len(i):\n            result = i\n    return result\n    \n    \ndef get_Total_Spaces(strr):  \n    '''\n    Write a python function to find the number of spaces in a given string.\n    '''\n    return strr.count(' ')\n    \n    \ndef get_Character_At_Index(strr, i):  \n    '''\n    Write a python function to find the character at index i in a given string.\n    '''\n    if i < 0 or i >= len(strr):\n        return \"Out of index\"\n    return strr[i]\n    \n    \ndef get_Word_At_Index(strr, i):  \n    '''\n    Write a python function to find the word at index i in a given string.\n    '''\n    if i < 0 or i >= len(strr):\n        return \"Out of index\"\n    return strr.split()[i]\n    \n    \ndef get_All_Substrings(strr):  \n    '''\n    Write a python function to find all substrings of a given string.\n    '''\n    result = []\n    for i in range(len(strr)+1):\n        for j in range(i, len(strr) + 1):\n            result.append(strr[i:j])\n    return result\n    \n    \ndef get_All_Substrings_with_Index(strr):  \n    '''\n    Write a python function to find all substrings of a given string.\n    '''\n    result = []\n    for i in range(len(strr)):\n        for j in range(len(strr)):\n            if i!= j:\n                result.append(strr[i:j])\n    return result\n    \n    \ndef get_All_Substrings_with_Start_End(strr):  \n    '''\n    Write a python function to find all substrings of a given string.\n    '''\n    result = []\n    start = 0\n    en",
        "num_ids": 14
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import math\n    def get_Char(strr):\n        return sum(ord(i) for i in strr) % 26\n",
        "num_ids": 33
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # count = 0\n    # count1 = 0\n    # for i in range(len(strr)):\n    #     if ord(strr[i]) >= 97 and ord(strr[i]) <= 122:\n    #         count = count + ord(strr[i])\n    #         count1 = count % 26\n    #         print(count)\n    #         print(count1)\n    # return count\n    return (sum([ord(i) for i in strr])) % 26\nprint(get_Char('abcdefg')",
        "num_ids": 130
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(i) for i in strr]) % 26\n    \n    \n    \ndef solve_decipher_word(word):\n    '''\n    Write a python function to decipher the word given. \n    '''\n    s = \"\"\n    l = len(word)\n    for i in range(0,l):\n        c = word[i]\n        for j in range(0,26):\n            if chr(j+ord(c)) in word:\n                s += chr(j+ord(c))\n                break\n    return s\n    \n    \n    \ndef solve_decipher_sentence(sentence):\n    '''\n    Write a python function to decipher the sentence given. \n    '''\n    s = \"\"\n    l = len(sentence)\n    for i in range(0,l):\n        c = sentence[i]\n        for j in range(0,26):\n            if chr(j+ord(c)) in sentence:\n                s += chr(j+ord(c))\n                break\n    return s\n    \n    \n    \ndef solve_get_alphabet(word):\n    '''\n    Write a python function to get the alphabet from the given string.\n    '''\n    return ''.join(sorted(list(set(word))))\n    \n    \ndef solve_get_alphabet_sum(word):\n    '''\n    Write a python function to get the sum of the alphabet from the given string.\n    '''\n    sum1 = 0\n    for i in word:\n        sum1 += ord(i)\n    return sum1\n    \n    \n    \ndef solve_get_alphabet_index(word):\n    '''\n    Write a python function to get the alphabet index from the given string.\n    '''\n    sum1 = 0\n    for i in word:\n        sum1 += ord(i)\n    return sum1\n    \n    \n    \ndef solve_get_lower_case_alphabet(word):\n    '''\n    Write a python function to get the lower case alphabet from the given string.\n    '''\n    return ''.join([i for i in word if i.islower()])\n    \n    \n    \ndef solve_is_palindrome(word):\n    '''\n    Write a python function to check if the given word is palindrome or not.\n    '''\n    return word == word[::-1]\n    \n    \n    \ndef solve_is_palindrome_v2(word):\n    '''\n    Write a python function to check if the given word is palindrome or not.\n    '''\n    return word == word[::-1]\n    \n    \n    \ndef solve_is_palin_partially_equals(word, word2):\n    '''\n    Write a python function to check if the given word partially or completely matches the given word.\n    '''\n    return word2 == word2[::-1]\n    \n    \n    \ndef solve_is_palin_partially_equals_v2(word, word2):\n    '''\n    Write a python function to check if the given word partially or completely matches the given word.\n    '''\n    return word2 == word2[::-1]\n    \n    \n    \ndef solve_is_valid_phone_number(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return len(phone_number) == 10 and phone_number[:3] in ['+91', '+62'] and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v2(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return len(phone_number) == 10 and phone_number[:3] in ['+91', '+62'] and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v3(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return len(phone_number) == 10 and phone_number[:3] in ['+91', '+62'] and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v4(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return len(phone_number) == 10 and phone_number[:3] in ['+91', '+62'] and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v5(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return phone_number.startswith('+91') and len(phone_number) == 13 and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v6(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return phone_number.startswith('+91') and len(phone_number) == 13 and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v7(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return phone_number.startswith('+91') and len(phone_number) == 13 and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v8(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return phone_number.startswith('+91') and len(phone_number) == 13 and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v9(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return phone_number.startswith('+91') and len(phone_number) == 13 and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v10(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return phone_number.startswith('+91') and len(phone_number) == 13 and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v11(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return phone_number.startswith('+91') and len(phone_number) == 13 and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v12(phone_number):\n    '''\n    Write a python function to check if the given phone number is valid or not.\n    '''\n    return phone_number.startswith('+91') and len(phone_number) == 13 and phone_number[3:6].isdigit() and phone_number[6:].isdigit()\n    \n    \n    \ndef solve_is_valid_phone_number_v13(phone_number):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    out=0\n    for i in range(len(strr)):\n        out=out+ord(strr[i])\n    return (out%26)\n    \ndef sort_Strings(str1, str2):\n    '''\n    Write a python program to compare 2 strings and display the string with minimum length.\n    '''\n    if len(str1)<=len(str2):\n        l=str1\n        s=str2\n    else:\n        l=str2\n        s=str1\n    for i in range(len(s)):\n        if l.find(s[i])<0:\n            return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    max_char = ord('z')\n    if max_char<ord(strr[0]):\n        max_char = ord(strr[0])\n    res = 0\n    for i in range(len(strr)):\n        res += ord(strr[i])\n    return res%max_char\n",
        "num_ids": 77
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = 0\n    for char in strr:\n        result = result + ord(char)\n    result = result % 26\n    return chars[result]\n",
        "num_ids": 75
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    result = 0\n    while i < len(strr):\n        result = result + ord(strr[i])\n        i += 1\n    return result % 26\n",
        "num_ids": 46
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0,1]\n    for i in range(2,n+1):\n        seq.append(seq[i-1]+seq[i-2])\n    return seq[n]\n",
        "num_ids": 49
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 33
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1, 1]\n",
        "num_ids": 11
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    conway_list = [[1,1],[2,1]]\n    conway_num = 3\n    while conway_num < n:\n        if conway_list[-1][0] + conway_list[-1][1] == 1:\n            conway_list += [[1,1],[2,1]]\n        else:\n            conway_list += [[1,0],[2,0]]\n        conway_num += 1\n    return conway_list[n-1][0] + conway_list[n-1][1]\n    \n",
        "num_ids": 135
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Logic: we want to go from 1 to the nth number, so we know the nth number is (n-1) + (n-2) +... + 1\n    #           since (n-1) + (n-2) +... + 1 = (2n-1) + (2n) +... + 1 = 2n + n +... + 1 = nn + 1\n    #          so we want to start with 1 and add 1 to the result each time\n    #          if we add 1 to the result, then we will know what the nth number is\n    #          we can then go back to the start and subtract one from nth number and start the count back at 2nd number\n    #          if we subtract 1 from nth number, we know what the (n-1) number is. then we subtract 1, add 1, add 1, etc.\n    #          if we subtract 1 from (n-1) number, we know what the (n-2) number is. and so on.\n    #           then we go from the (n-2) number and subtract 1 and add 1, add 1, add 1, etc. until we reach 1\n",
        "num_ids": 265
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n*(n+1) // 2\n    \ndef square(n):\n    '''\n    Write a function to find the nth number in the newman conway square sequence.\n    '''\n    return n*n\n",
        "num_ids": 8
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * sequence(n - 1) + sequence(n - 2)\n",
        "num_ids": 47
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return nth_number_newman_conway(n-1) + nth_number_newman_conway(n-2)\n",
        "num_ids": 51
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n * (n - 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_area = 4*math.pi*(r**2)\n    return sphere_area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    sphere_volume = (4/3)*math.pi*(r**3)\n    return sphere_volume\n",
        "num_ids": 29
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r ** 2\n    return surface_area\n",
        "num_ids": 28
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\ndef surfacearea_box(l, w, h):\n    '''\n    Write a function to find the surface area of a box.\n    '''\n    return 2 * l * w + 2 * w * h + 2 * h * l\ndef surfacearea_rhombus(a, b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return a * b * math.sqrt(3)/4\ndef surfacearea_pyramid(h, r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return h * r * math.sqrt(3)\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef surfacearea_triangle(a, h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return a * h / 2\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return math.pi * r * r\ndef surfacearea_parallelogram(a, h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return a * h\ndef surfacearea_trapezoid(a, b, h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return (a + b) / 2 * h\ndef surfacearea_octagon(a):\n    '''\n    Write a function to find the surface area of a octagon.\n    '''\n    return 8 * a\ndef surfacearea_dodecahedron(a, b, h):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 2 * (a + b + h)\ndef surfacearea_tetrahedron(a, b, h):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return 6 * a + 4 * b + 2 * h\ndef surfacearea_dodecahedron(a, b, h):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 3 * (a + b + h)\ndef surfacearea_icosahedron(a, b, h):\n    '''\n    Write a function to find the surface area of a icosahedron.\n    '''\n    return a + b + 2 * h\ndef surfacearea_octahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return a + b + h\ndef surfacearea_icosahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + 2 * h\ndef surfacearea_octahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return a + b + h\ndef surfacearea_dodecahedron(a, b, h):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 6 * a + 4 * b + 2 * h\ndef surfacearea_octahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return a + b + h\ndef surfacearea_icosahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + 2 * h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_octahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return a + b + h\ndef surfacearea_icosahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + 2 * h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 6 * a + 4 * b + 2 * h\ndef surfacearea_dodecahedron(a, b, h):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + 2 * h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return a + b + h\ndef surfacearea_hexahedron(a, b, h):\n    '''\n    Write a function to find the surface area o",
        "num_ids": 12
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area_sphere=4*math.pi*r**2\n    return area_sphere\n",
        "num_ids": 25
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    # Calculate surface area of sphere\n    surface_area = (4/3)*pi*(r**2)\n    return surface_area\n",
        "num_ids": 42
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    volume=4/3*math.pi*r**3\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*r**3\n    return volume\ndef volume_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r**2*h\n    return volume\ndef surfacearea_cylinder(h,r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface=2*math.pi*r*h+2*math.pi*r**2\n    return surface\ndef volume_cone(h,r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*r**2*h/3\n    return volume\ndef surfacearea_cone(h,r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface=2*math.pi*r*(r+h)\n    return surface\ndef volume_torus(r,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    volume=math.pi*r**2*h/3\n    return volume\ndef surfacearea_torus(r,h):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    surface=2*math.pi*(r+h)*r\n    return surface\ndef surfacearea_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    surface=2*math.pi*l*b+2*math.pi*l*h+2*math.pi*b*h\n    return surface\ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume=l*b*h\n    return volume\ndef surfacearea_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surface=2*math.pi*(h/2)*b\n    return surface\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=math.pi*b*h/3\n    return volume\ndef surfacearea_pyramid_v2(l,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surface=2*math.pi*l*h\n    return surface\ndef volume_pyramid_v2(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=math.pi*l*h/3\n    return volume\ndef surfacearea_general(l,b,h):\n    '''\n    Write a function to find the surface area of a general shape.\n    '''\n    surface=2*(l+b)*math.pi+2*(b+h)*math.pi+2*(h+l)*math.pi\n    return surface\ndef volume_general(l,b,h):\n    '''\n    Write a function to find the volume of a general shape.\n    '''\n    volume=2*l*b*h\n    return volume\ndef surfacearea_hedra(l,b,h):\n    '''\n    Write a function to find the surface area of a hedra.\n    '''\n    surface=2*(l+b)*math.pi+2*(b+h)*math.pi+2*(h+l)*math.pi\n    return surface\ndef volume_hedra(l,b,h):\n    '''\n    Write a function to find the volume of a hedra.\n    '''\n    volume=2*l*b*h\n    return volume\ndef surfacearea_rhombus(l,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    surface=2*math.pi*l*b\n    return surface\ndef volume_rhombus(l,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume=math.pi*l*b/3\n    return volume\ndef surfacearea_parabola(h,a):\n    '''\n    Write a function to find the surface area of a parabola.\n    '''\n    surface=math.pi*(a/2)*h\n    return surface\ndef volume_parabola(h,a):\n    '''\n    Write a function to find the volume of a parabola.\n    '''\n    volume=math.pi*a*h**2/3\n    return volume\ndef surfacearea_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    surface=math.pi*h*(b+h)\n    return surface\ndef volume_parallelogram(b,h):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    volume=math.pi*b*h\n    return volume\ndef surfacearea_trapezium(a,h,b):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    surface=2*math.pi*a+2*math.pi*(h/2)*b\n    return surface\ndef volume_trapezium(a,h,b):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    volume=math.pi*a*h/3+math.pi*b*h/3\n    return volume\ndef surfacearea_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surface=math.pi*b*h\n    return surface\ndef volume_triangle(b,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume=math.pi*b*h/3\n    return volume\ndef surfacearea_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    surface=math.pi*a**2\n    return surface\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume=math.pi*a**2/4\n    return volume\ndef surfacearea_ellipse(a,b):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    surface=math.pi*a*b*2\n    return surface\ndef volume_ellipse(a,b):\n    '''\n    Write a function to find the volume of an ellipse.\n    '''\n    volume=math.pi*a*b*2/3\n    return volume\ndef surfacearea_parabola_hollow(h,a):\n    '''\n    Write a function to find the surface area of a parabola with a hollowed out base.\n    '''\n    surface=2*math.pi*a*(h-1)\n    return surface\ndef volume_parabola_hollow(h,a):\n    '''\n    Write a function to find the volume of a parabola with a hollowed out base.\n    '''\n    volume=math.pi*a*(h-1)**2/3\n    return volume\ndef surfacearea_parabola_sphere(r):\n    '''\n    Write a function to find the surface area of a parabola with a sphere as its base.\n    '''\n    surface=4*math.pi*r**2*r**2+4*math.pi*r**2\n    return surface\ndef volume_parabola_sphere(r):\n    '''\n    Write a function to find the volume of a parabola with a sphere as its base.\n    '''\n    volume=4/3*math.pi*r**2*r**2+4/3*math.pi*r**2\n    return volume\ndef surfaceare",
        "num_ids": 40
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    assert(n > 0)\n",
        "num_ids": 10
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be > 0')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1 + sqrt(3) / 2\n    else:\n        return 1 + sqrt(3) / 2 + 1 / (2 * n - 1) * (1 - sqrt(3) / 2)\n",
        "num_ids": 91
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    n = n-1\n    if n % 6 == 1:\n        return n*(2*n - 1)/2\n    elif n % 6 == 2:\n        return (n-1)*(2*n - 1)/2\n    elif n % 6 == 3:\n        return (n-1)*(2*n - 1)/2\n    elif n % 6 == 4:\n        return (n-3)*(2*n - 1)/2\n    elif n % 6 == 5:\n        return (n-3)*(2*n - 1)/2\n    else:\n        return (n-1)*(2*n - 1)/2\n        \n        \n        \ndef print_name_by_width(name, width):\n    '''\n    Write a function to print name in the given width.\n    '''\n    \n    if len(name) > width:\n        return name[:width] + '...'\n    else:\n        return name\n        \n        \ndef print_even_numbers(n):\n    '''\n    Write a function to print even numbers up to and including n.\n    '''\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            print(i)\n            \n            \ndef find_prime_numbers(n):\n    '''\n    Write a function to return the list of prime numbers up to and including n.\n    '''\n    \n    prime = []\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n        if flag:\n            prime.append(i)\n    return prime\n        \n        \ndef find_factors(n):\n    '''\n    Write a function to return the list of factors of n.\n    '''\n    \n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n        \n    \ndef find_perfect_squares(n):\n    '''\n    Write a function to return the list of perfect squares up to and including n.\n    '''\n    \n    for i in range(2, n+1):\n        if i**2 == n:\n            return [i]\n    return False\n        \n        \ndef find_even_number(n):\n    '''\n    Write a function to return the list of even numbers up to and including n.\n    '''\n    \n    even_num = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_num.append(i)\n    return even_num\n        \n        \ndef find_largest_factor(n):\n    '''\n    Write a function to return the largest factor of n.\n    '''\n    \n    largest = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i > largest:\n                largest = i\n    return largest\n    \n        \ndef find_smallest_divisor(n):\n    '''\n    Write a function to return the smallest divisor of n.\n    '''\n    \n    largest = n\n    divisor = 2\n    while largest % divisor!= 0 and divisor <= n:\n        largest = largest // divisor\n        divisor += 1\n    return divisor\n    \n        \ndef find_factors_list(n):\n    '''\n    Write a function to return the list of factors of n.\n    '''\n    \n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n        \n        \ndef factorial(n):\n    '''\n    Write a function to return n! where n is a non-negative integer.\n    '''\n    \n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact\n        \n        \ndef sum_of_squares(n):\n    '''\n    Write a function to return the sum of the squares of the first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(1, n+1):\n        result += i**2\n    return result\n        \n        \ndef find_primes(n):\n    '''\n    Write a function to return the list of primes up to and including n.\n    '''\n    \n    primes = []\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n        if flag:\n            primes.append(i)\n    return primes\n        \n        \ndef find_factors_sum(n):\n    '''\n    Write a function to return the list of factors of n.\n    '''\n    \n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return sum(factors)\n    \n    \ndef find_pythagorean_triplet(a, b, c):\n    '''\n    Write a function to return three integers, x, y, z such that x**2 + y**2 == z**2\n    '''\n    \n    a = int(a)\n    b = int(b)\n    c = int(c)\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                if i**2 + j**2 == k**2:\n                    return i, j, k\n                    \n                    \ndef find_triangle_number(n):\n    '''\n    Write a function to return the list of triangular numbers up to and including n.\n    '''\n    \n    triangles = []\n    for i in range(1, n+1):\n        triangles.append(i*(i+1)//2)\n    return triangles\n        \n        \ndef find_primes_below(n):\n    '''\n    Write a function to return the list of primes below n.\n    '''\n    \n    primes = []\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n        if flag:\n            primes.append(i)\n    return primes\n        \n        \ndef find_prime_factors(n):\n    '''\n    Write a function to return the list of prime factors of n.\n    '''\n    \n    prime = []\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n        if flag:\n            prime.append(i)\n    return prime\n        \n        \ndef find_sum_of_squares(n):\n    '''\n    Write a function to return the sum of the squares of the first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(1, n+1):\n        result += i**2\n    return result\n        \n        \ndef find_triangles(n):\n    '''\n    Write a function to return the list of triangular numbers up to and including n.\n    '''\n    \n    triangles = []\n    for i in range(1, n+1):\n        triangles.append(i*(i+1)//2)\n    return triangles\n        \n        \ndef find_proper_divisors(n):\n    '''\n    Write a function to return the list of proper divisors of n.\n    '''\n    \n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n    \n    \ndef find_perfect_squares_recursive(n):\n    '''\n    Write a function to return the list of perfect squares up to and including n.\n    '''\n    \n    if n == 1:\n        return [1]\n    else:\n        result = []\n        for i in range(1, n+1):\n            if i**2 == n:\n                result.append(i",
        "num_ids": 54
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum([(i*2*n)+(i+1)*(2*n+1) for i in range(n)])\n",
        "num_ids": 34
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num_of_hexagonal_numbers = 1\n    odd_n = 0\n    while n > 0:\n        if n % 2 == 0:\n            odd_n += 1\n        else:\n            odd_n -= 1\n        n -= 1\n        num_of_hexagonal_numbers += 1\n    return num_of_hexagonal_numbers * 6 + odd_n\n",
        "num_ids": 92
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 3*n*(3*n-1)//2\n",
        "num_ids": 18
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return -0.25*(n**2) + (0.5*n**2 - 0.25*n)**2\n",
        "num_ids": 33
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 3 == 1:\n        return (n - 1) * (n - 2) * (2 * n - 1)\n    elif n % 3 == 2:\n        return (n - 1) * (n - 2) * ((n - 1) + 1)\n    else:\n        return ((n - 1) * (n - 2)) / 2\n",
        "num_ids": 98
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    assert n > 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1.5\n    else:\n        return (1.5 ** n) * 2.0\n",
        "num_ids": 51
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2, **dict3)\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3.update(dict1)\n    dict3.update(dict2)\n    return dict3\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {**dict1, **dict2}\n    return dict3\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge one dictionary into another dictionary.\n    '''\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\ndef nested_dict(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_2(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    for key,value in dict1.items():\n        dict2[key] = value\n    return dict2\ndef nested_dict_3(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_4(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict2.update(dict1)\n    dict2.update(dict1)\n    dict2.update(dict1)\n    return dict2\ndef nested_dict_5(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_6(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_7(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_8(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_9(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_10(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_11(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_12(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_13(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update",
        "num_ids": 57
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {**dict1, **dict2, **dict3}\n    print(\"Merge: \",dict4)\n    return dict4\n",
        "num_ids": 36
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict((key, value) for key, value in (dict1, dict2, dict3).items() if value is not None)\ndef list_comprehension():\n    '''\n    Write a list comprehension to calculate the sum of the numbers in a list.\n    '''\n    return sum([x for x in range(0, 101)])\ndef get_first_three_characters(string):\n    '''\n    Write a function to return the first 3 characters of a given string.\n    '''\n    return string[0:3]\ndef convert_seconds_to_hours_minutes_seconds(seconds):\n    '''\n    Write a function that converts seconds to hours, minutes and seconds.\n    '''\n    return \"{} hour{} {} min\".format(seconds//3600, \"s\" if seconds//3600 > 1 else \"\", (seconds%3600)//60)\ndef map_string_to_integer(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(string)\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\ndef sorted_alphanumeric(data):\n    '''\n    Write a function that takes a list and returns a list of the same elements in sorted order, with letters first and digits second.\n    '''\n    return sorted(data, key=lambda x: (int(x) if x.isdigit() else x.lower()))\ndef capitalise_first_letter(string):\n    '''\n    Write a function to capitalize the first character of a string.\n    '''\n    return string.capitalize()\ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    return dict(dict1.items() + dict2.items())\ndef get_unique_three_characters(string):\n    '''\n    Write a function to get the unique three characters in a string.\n    '''\n    return set(string)\ndef remove_negative_numbers(numbers):\n    '''\n    Write a function to remove negative numbers from a list.\n    '''\n    return [num for num in numbers if num >= 0]\ndef is_even(number):\n    '''\n    Write a function to determine if a number is even or not.\n    '''\n    return number % 2 == 0\ndef multiply_even_numbers(numbers):\n    '''\n    Write a function to multiply all even numbers in a list.\n    '''\n    return numbers[0] * numbers[2]\ndef is_palindrome(string):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    return string == string[::-1]\ndef is_palindrome_recursive(string, index = 0):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    if index >= len(string):\n        return True\n    if string[index]!= string[len(string) - 1 - index]:\n        return False\n    return is_palindrome_recursive(string, index + 1)\ndef dict_key_value_pairs(dict1):\n    '''\n    Write a function that returns the key-value pairs in a dictionary.\n    '''\n    return {k:v for k,v in dict1.items()}\ndef dict_key_value_pairs_with_default(dict1, default_value):\n    '''\n    Write a function that returns the key-value pairs in a dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v is not None}\ndef sort_integers(numbers):\n    '''\n    Write a function to sort integers in an ascending order.\n    '''\n    return sorted(numbers)\ndef parse_as_binary(binary_string):\n    '''\n    Write a function to convert a binary string into an integer.\n    '''\n    return int(binary_string, 2)\ndef find_missing_numbers(numbers):\n    '''\n    Write a function to find all the missing numbers from a list of positive integers.\n    '''\n    return [x for x in range(1,max(numbers)+1) if x not in numbers]\ndef find_missing_numbers_binary_search(numbers):\n    '''\n    Write a function to find all the missing numbers from a list of positive integers.\n    '''\n    n = max(numbers)\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if mid in numbers:\n            left = mid + 1\n        else:\n            right = mid\n    return right\ndef three_element_sum(numbers, target_sum):\n    '''\n    Write a function that takes a list of numbers and a target sum and returns the triplet that add up to the target sum\n    '''\n    numbers.sort()\n    for i in range(len(numbers)-2):\n        l = i + 1\n        r = len(numbers)-1\n        while l < r:\n            if numbers[i] + numbers[l] + numbers[r] == target_sum:\n                return numbers[i], numbers[l], numbers[r]\n            if numbers[i] + numbers[l] + numbers[r] < target_sum:\n                l += 1\n            else:\n                r -= 1\n    return None\ndef get_positive_integers_from_a_list(integers):\n    '''\n    Write a function that takes a list of integers and returns a new list with all the integers that are positive.\n    '''\n    return [x for x in integers if x > 0]\ndef get_positive_integers_from_a_list_while_looping(integers):\n    '''\n    Write a function that takes a list of integers and returns a new list with all the integers that are positive.\n    '''\n    result = []\n    for i in integers:\n        if i > 0:\n            result.append(i)\n    return result\ndef delete_duplicates_from_sorted_list(sorted_list):\n    '''\n    Write a function that takes a sorted list and returns a new sorted list with all the duplicates removed.\n    '''\n    result = []\n    prev = sorted_list[0]\n    for i in sorted_list[1:]:\n        if i!= prev:\n            result.append(i)\n            prev = i\n    return result\ndef is_anagram(s1, s2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\ndef is_anagram_with_dict(s1, s2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    d = {}\n    for i in s1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in s2:\n        if i not in d:\n            return False\n        else:\n            d[i] -= 1\n    return not any(v!= 0 for v in d.values())\ndef is_anagram_with_dict_using_defaults(s1, s2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    d = {}\n    for i in s1:\n        d[i] = d.get(i, 0) + 1\n    for i in s2:\n        if i not in d:\n            return False\n        else:\n            d[i] -= 1\n    return not any(v!= 0 for v in d.values())\ndef anagrams(s1, s2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    return sorted(s1) == sorted(s2)\ndef anagrams_with_dict(s1, s2):\n    '''\n    Write a function to determine if two strings are anagrams of each other.\n    '''\n    d = {}\n    for i in s1:\n        d[i] = d.get(i, 0) + 1",
        "num_ids": 31
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1:\n        if key in dict2:\n            dict4[key] = dict1[key]\n        if key in dict2 and key in dict3:\n            dict4[key] = dict1[key] + dict3[key]\n    return dict4\n",
        "num_ids": 74
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_final = dict1.copy()\n    for k, v in dict2.items():\n        if k in dict_final:\n            dict_final[k].update(v)\n        else:\n            dict_final[k] = v\n    for k, v in dict3.items():\n        if k in dict_final:\n            dict_final[k].update(v)\n        else:\n            dict_final[k] = v\n    return dict_final\n",
        "num_ids": 113
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dictionary = dict1.copy()\n    merged_dictionary.update(dict2)\n    merged_dictionary.update(dict3)\n    return merged_dictionary\n",
        "num_ids": 48
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if dict1:\n        return dict1.update(dict2,dict3)\n    elif dict2:\n        return dict2.update(dict3)\n    else:\n        return dict3\n",
        "num_ids": 49
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if key in dict2:\n            new_dict[key] = dict1[key] + dict2[key]\n        else:\n            new_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in new_dict:\n            new_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in new_dict:\n            new_dict[key] = dict3[key]\n    return new_dict\n",
        "num_ids": 133
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] in dict1:\n            dict1[list1[i]] += 1\n        else:\n            dict1[list1[i]] = 1\n    return dict1\n",
        "num_ids": 66
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dic = {}\n    for element in list1:\n        if element in count_dic:\n            count_dic[element] += 1\n        else:\n            count_dic[element] = 1\n    return count_dic\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n    \n",
        "num_ids": 21
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        freq_dict[i] = list1.count(i)\n    return freq_dict\n",
        "num_ids": 42
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n",
        "num_ids": 54
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for i in list1:\n        freq[i] += 1\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_d = dict()\n    for i in list1:\n        freq_d[i] = freq_d.get(i, 0) + 1\n    return freq_d\n",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import random\n    def closest(N):\n        if N < 2:\n            return 2\n        if N > 1000000:\n            return 1000000\n        if N % 2 == 0:\n            return 2\n        if N % 2 == 1:\n            return 1\n",
        "num_ids": 63
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Edge case, for number = 0\n    if N == 0:\n        return N\n",
        "num_ids": 23
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 4:\n        return N\n    if N <= 100:\n        return (N // 10) * 10\n    return (N // 100) * 100 + 10\n",
        "num_ids": 42
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    elif N == 1:\n        return 0\n    else:\n        if N % 2 == 0:\n            return N//2\n        else:\n            return (N-1)//2 + 1\n",
        "num_ids": 61
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0: return 1\n    if N == 1: return 0\n",
        "num_ids": 20
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def f(n):\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return f(n//2)\n        else:\n            return f(3 * n + 1)\n    \n    return f(N)\n",
        "num_ids": 62
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    return max(N, closest_num(N-1))\n",
        "num_ids": 28
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 10:\n        return N\n    if N <= 99:\n        return N - 1\n    if N <= 999:\n        return N - 2\n    if N <= 9999:\n        return N - 3\n    if N <= 99999:\n        return N - 4\n    return N - 5\n",
        "num_ids": 73
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if (N%2 == 0):\n        return (N/2)\n    else:\n        return (N//2+1)\n",
        "num_ids": 34
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N < 0:\n        raise ValueError\n    max_num = 2147483647\n    min_num = -2147483648\n    if N >= max_num:\n        return max_num\n    if N <= min_num:\n        return min_num\n    m = (min_num + max_num) // 2\n    while max_num - min_num > 1:\n        if N >= m:\n            max_num = m\n            m = (min_num + max_num) // 2\n        else:\n            min_num = m\n            m = (min_num + max_num) // 2\n    return min_num\n",
        "num_ids": 167
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    try:\n        max_len = 0\n        for x in list1:\n            if len(x) > max_len:\n                max_len = len(x)\n        return max_len\n    except:\n        print(\"Sorry, we have no data on this topic.\")\n        \ndef len_doc(list1):\n    '''\n    Write a python function to find the length of the document.\n    '''\n    try:\n        max_len = 0\n        for x in list1:\n            if len(x) > max_len:\n                max_len = len(x)\n        return max_len\n    except:\n        print(\"Sorry, we have no data on this topic.\")\n",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    result = 0\n    for item in list1:\n        if len(item)>result:\n            result = len(item)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxlen = len(max(list1, key=len))\n    print('Length of the longest word is: ', maxlen)\n",
        "num_ids": 33
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for i in list1:\n        if type(i)!= str:\n            return 0\n        elif len(i) > len_max:\n            len_max = len(i)\n            word_max = i\n    print(f\"length of the longest word is {len_max} and the word is {word_max}\")\n",
        "num_ids": 81
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(longest_word)<len(word):\n            longest_word = word\n    return len(longest_word)\n",
        "num_ids": 51
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\nprint(len_log(['Hello','hi','what','you','doin','I','love','this','big','data']))\n",
        "num_ids": 75
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = 0\n    for i in list1:\n        if len(i) >= l:\n            l = len(i)\n    return l\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return 1 + len_log(list1[1:])\n",
        "num_ids": 36
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    temp = len(max(list1, key=len))\n    return temp\n",
        "num_ids": 21
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for sub in sub_str:\n        if sub in str1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            print(True)\n        else:\n            print(False)\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if (len(str1) < len(sub_str)):\n        return False\n    \n    for i in range(len(str1)):\n        if (str1[i:i+len(sub_str)] == sub_str):\n            return True\n    \n    return False\n",
        "num_ids": 72
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s == sub_str:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(0, len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            print(\"True\")\n        else:\n            print(\"False\")\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(len(str1)):\n        if str1[i:len(sub_str)+i]==sub_str:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for val in str1:\n        if val == sub_str:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n",
        "num_ids": 18
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    return n % 2 == 0 or is_undulating(n // 2)\n",
        "num_ids": 31
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    i = 1\n    while i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"{} is not a valid value.\".format(n))\n    elif isinstance(n, int) and n >= 1:\n        if n % 2 == 0:\n            if n < 100:\n                return True\n            elif 100 <= n <= 200:\n                if n <= 200 and n % 4 == 0:\n                    return True\n            elif n <= 400:\n                if n % 3 == 0:\n                    return True\n        else:\n            return False\n",
        "num_ids": 129
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0 or n%2==0:\n        return False\n    i=1\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i=i+1\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%7==0 or n%7==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return True\n        divisor += 1\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return not (n % 2 == 0 and n % 3 == 0)\n",
        "num_ids": 19
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 5:\n        return True\n    n = 10 ** (n - 1) + 1\n    return True if n % 2 == 0 else False\n",
        "num_ids": 38
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2!= 0\n",
        "num_ids": 11
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n    \ndef evenOrOdd(a):\n    '''\n    Write a function to determine if the input number 'a' is even or odd.\n    '''\n    return (a%2 == 0)\n    \ndef isPrime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n%2 == 0 or n%3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n        i += 6\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\nprint(power(3,2))",
        "num_ids": 16
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    a=a**b\n    return a\n",
        "num_ids": 13
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if a==0:\n        return 0\n    if b%2==0:\n        return power(a,b/2)*power(a,b/2)\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 80
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    def get_min_value(test_list):\n        min_val = 999999999999999999999999999\n        for test_tuple in test_list:\n            if test_tuple[1] < min_val:\n                min_val = test_tuple[1]\n        return min_val\n",
        "num_ids": 77
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key = itemgetter(1))\n    return test_list[0]\n",
        "num_ids": 31
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = [(2, 2), (3, 3), (4, 4), (1, 1)]\n    test_list = sorted(test_list, key=itemgetter(1))\n    return test_list[0][0]\n",
        "num_ids": 59
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]\n",
        "num_ids": 32
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][1]\n    for i in test_list:\n        if i[1] < minimum:\n            minimum = i[1]\n            test_list.remove(i)\n            test_list.append((i[0],minimum))\n    return test_list[0]\n",
        "num_ids": 74
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key=itemgetter(1,0))\n    return test_list[0]\n",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]\n",
        "num_ids": 32
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # list_1 = [(1,2),(2,3),(3,4),(4,5),(5,6)]\n    # result_list = list()\n    # for item in list_1:\n    #     result_list.append(item)\n    #     result_list = sorted(result_list, key=itemgetter(1))\n    # return result_list[0]\n    # Using Lambda\n    result = sorted(test_list, key=lambda item: item[1])\n    return result[0]\n",
        "num_ids": 129
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # indexes_list = []\n    indexes_list = [test_list[i][1] for i in range(len(test_list))]\n    indexes_list.sort()\n    index_min = indexes_list[0]\n    return index_min\n    # if len(test_list) == 1:\n    #     return test_list[0][1]\n    # else:\n    #     indexes_list = []\n    #     indexes_list.append(test_list[0][1])\n    #     for i in range(1,len(test_list)):\n    #         if test_list[i][1] in indexes_list:\n    #             indexes_list.append(test_list[i][1])\n    #         else:\n    #             indexes_list = indexes_list.append(test_list[i][1])\n    #     if len(indexes_list) == 1:\n    #         return test_list[0][1]\n    #     else:\n    #         return index_minimum(indexes_list)\ndef index_minimum_with_duplicates(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][1]\n    else:\n        test_list_copy = test_list.copy()\n        test_list_copy.sort()\n        index_min = test_list_copy[0][1]\n        index_min_val = test_list_copy[0][0]\n        for i in range(1,len(test_list)):\n            if index_min_val == test_list_copy[i][0]:\n                if test_list_copy[i][1] < index_min:\n                    index_min = test_list_copy[i][1]\n                    index_min_val = test_list_copy[i][0]\n    return index_min\ndef index_minimum_without_duplicates(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][1]\n    else:\n        test_list_copy = test_list.copy()\n        test_list_copy.sort()\n        index_min = test_list_copy[0][1]\n        index_min_val = test_list_copy[0][0]\n        for i in range(1,len(test_list)):\n            if index_min_val == test_list_copy[i][0]:\n                if test_list_copy[i][1] < index_min:\n                    index_min = test_list_copy[i][1]\n                    index_min_val = test_list_copy[i][0]\n    return index_min\n    # else:\n    #     test_list_copy = test_list.copy()\n    #     test_list_copy.sort()\n    #     index_min = test_list_copy[0][1]\n    #     index_min_val = test_list_copy[0][0]\n    #     for i in range(1,len(test_list)):\n    #         if index_min_val == test_list_copy[i][0]:\n    #             if test_list_copy[i][1] < index_min:\n    #                 index_min = test_list_copy[i][1]\n    #                 index_min_val = test_list_copy[i][0]\n    #     return index_min\ndef index_minimum_tuple_to_string(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 1:\n        return str(test_list[0][1])\n    else:\n        test_list_copy = test_list.copy()\n        test_list_copy.sort()\n        index_min = test_list_copy[0][1]\n        index_min_val = test_list_copy[0][0]\n        for i in range(1,len(test_list)):\n            if index_min_val == test_list_copy[i][0]:\n                if test_list_copy[i][1] < index_min:\n                    index_min = test_list_copy[i][1]\n                    index_min_val = test_list_copy[i][0]\n    return str(index_min)\ndef index_minimum_tuple_to_string_with_duplicates(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 1:\n        return str(test_list[0][1])\n    else:\n        test_list_copy = test_list.copy()\n        test_list_copy.sort()\n        index_min = test_list_copy[0][1]\n        index_min_val = test_list_copy[0][0]\n        for i in range(1,len(test_list)):\n            if index_min_val == test_list_copy[i][0]:\n                if test_list_copy[i][1] < index_min:\n                    index_min = test_list_copy[i][1]\n                    index_min_val = test_list_copy[i][0]\n    return str(index_min)\n    # else:\n    #     test_list_copy = test_list.copy()\n    #     test_list_copy.sort()\n    #     index_min = test_list_copy[0][1]\n    #     index_min_val = test_list_copy[0][0]\n    #     for i in range(1,len(test_list)):\n    #         if index_min_val == test_list_copy[i][0]:\n    #             if test_list_copy[i][1] < index_min:\n    #                 index_min = test_list_copy[i][1]\n    #                 index_min_val = test_list_copy[i][0]\n    #     return str(index_min)\n",
        "num_ids": 364
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return min_tup[0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    max_tup = max(test_list, key=itemgetter(1))\n    return max_tup[0]\n    \ndef index_lowest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    low_tup = min(test_list, key=itemgetter(1))\n    return low_tup[0]\n    \ndef index_highest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    high_tup = max(test_list, key=itemgetter(1))\n    return high_tup[0]\n    \ndef index_list_1(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_3(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_4(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_5(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_6(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_7(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_8(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_9(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_10(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_11(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_12(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_13(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_14(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_15(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_16(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_17(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_18(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemgetter(1))\n    return (min_tup[0], min_tup[1])\n    \ndef index_list_19(test_list):\n    '''\n    Given a list of tuples, write a function that returns a tuple of the two values in the list with the smallest second value.\n    '''\n    \n    min_tup = min(test_list, key=itemge",
        "num_ids": 20
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = None\n    smallest_len = float(\"inf\")\n",
        "num_ids": 19
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000000\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n",
        "num_ids": 49
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    a=len(lst)\n    b=lst[0]\n    for i in range(a):\n        if len(b)>len(lst[i]):\n            b=lst[i]\n    print(len(b))\n",
        "num_ids": 62
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l=0\n    n=len(lst)\n    for i in range(n):\n        for j in range(len(lst[i])):\n            l=l+1\n    print(\"Minimum Length of the list is :\",l)\n",
        "num_ids": 61
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    smallest_length = float(\"inf\")\n    for item in lst:\n        smallest_length = min(smallest_length, len(item))\n    return smallest_length\n",
        "num_ids": 47
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for item in lst:\n        if len(item) <= min_len:\n            min_len = len(item)\n    return min_len\n",
        "num_ids": 45
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < len(smallest):\n            smallest = lst[i]\n    return len(smallest)\n",
        "num_ids": 59
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=float('inf')\n    for i in lst:\n        if len(i)<min_length:\n            min_length=len(i)\n    return min_length\n",
        "num_ids": 48
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    my_list = []\n    lst_min = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            my_list.append(lst[i][j])\n    lst_min = sorted(my_list)\n    print('Length of the smallest list is : ',len(lst_min))\nFind_Min_Length(lst)",
        "num_ids": 101
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_size = len(lst)\n    min_size = 0\n    while lst_size:\n        min_size = min(min_size, len(lst[lst_size - 1]))\n        lst_size -= 1\n    return min_size\n",
        "num_ids": 68
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==0 or n==1:\n        return 0\n    else:\n        a=1\n        for i in range(2,n):\n            if n%i==0:\n                a+=1\n        return a\n",
        "num_ids": 55
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2,n):\n        if n%i == 0:\n            div += 1\n    return div\n",
        "num_ids": 36
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1,n):\n        if n % i == 0:\n            div +=1\n    return div\n",
        "num_ids": 36
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    divisors = []\n    \n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    \n    print(divisors)\n    print(len(divisors))\n",
        "num_ids": 69
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n    \nprint(divisor(10))\n",
        "num_ids": 55
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count = count + 1\n    print(count)\n",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    print('Printing divisors of'+ str(n) + ': ')\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    print(divisors)\n    print('\\n')\n",
        "num_ids": 77
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            result = result + 1\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq = {}\n    for i in range(len(list1)):\n        if list1[i] in freq:\n            freq[list1[i]] += 1\n        else:\n            freq[list1[i]] = 1\n    return freq\n",
        "num_ids": 68
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Declare an empty dictionary\n    freq_dict = {}\n    # Iterate over the list\n    for val in list1:\n        if val in freq_dict:\n            freq_dict[val] += 1\n        else:\n            freq_dict[val] = 1\n    # Return the dictionary\n    return freq_dict\n",
        "num_ids": 83
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if len(list1) == 0:\n        return {}\n",
        "num_ids": 17
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_dict = {}\n    for i in list1:\n        for j in i:\n            if j in list_dict:\n                list_dict[j] += 1\n            else:\n                list_dict[j] = 1\n    return list_dict\n",
        "num_ids": 63
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict.keys():\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 63
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d={}\n    for x in list1:\n        for i in x:\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1\n    return d\n",
        "num_ids": 52
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for i in item:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 68
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                dictionary[j] = dictionary.get(j,0) + 1\n        else:\n            dictionary[i] = dictionary.get(i,0) + 1\n    return dictionary\n",
        "num_ids": 77
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n",
        "num_ids": 46
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for element in list1:\n        if element in frequency_dictionary.keys():\n            frequency_dictionary[element] += 1\n        else:\n            frequency_dictionary[element] = 1\n    return frequency_dictionary\n    \ndef nested_sum(nested_list):\n    '''\n    Given a nested list of integers, return the sum of all integers in the list.\n    '''\n    total = 0\n    for element in nested_list:\n        if type(element) == int:\n            total += element\n        else:\n            total += nested_sum(element)\n    return total\n",
        "num_ids": 49
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result = result * numbers[i]\n    print(result)\n",
        "num_ids": 36
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n    \ndef get_sublist(list_of_lists, length):\n    '''\n    Write a function that takes a list of lists and the length of the sublists and returns only the sublists that have length = length\n    '''\n    result = []\n    for i in range(len(list_of_lists)):\n        if len(list_of_lists[i]) == length:\n            result.append(list_of_lists[i])\n    return result\n    \ndef unique_list_with_list(list_of_lists):\n    '''\n    Write a function to return a unique list of elements from a list of lists.\n    '''\n    result = []\n    for item in list_of_lists:\n        for element in item:\n            if not element in result:\n                result.append(element)\n    return result\n    \ndef remove_list_elements(list_of_lists, element):\n    '''\n    Write a function to remove a specified element from a list of lists.\n    '''\n    for i in range(len(list_of_lists)):\n        list_of_lists[i].remove(element)\n    return list_of_lists\n    \ndef remove_same_elements(list_of_lists):\n    '''\n    Write a function to remove all duplicate elements from a list of lists.\n    '''\n    result = []\n    for item in list_of_lists:\n        for element in item:\n            if not element in result:\n                result.append(element)\n    return result\n    \ndef unique_list_with_dict(list_of_dicts):\n    '''\n    Write a function to return a unique list of elements from a list of dictionaries.\n    '''\n    result = []\n    for item in list_of_dicts:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef list_item_to_upper(list_of_lists):\n    '''\n    Write a function to convert the capital letter of all elements in a list to small letters.\n    '''\n    for item in list_of_lists:\n        for i in range(len(item)):\n            item[i] = item[i].lower()\n    return list_of_lists\n    \ndef list_item_to_lower(list_of_lists):\n    '''\n    Write a function to convert the capital letter of all elements in a list to small letters.\n    '''\n    for item in list_of_lists:\n        for i in range(len(item)):\n            item[i] = item[i].upper()\n    return list_of_lists\n    \ndef list_item_to_upper(list_of_lists):\n    '''\n    Write a function to convert the capital letter of all elements in a list to small letters.\n    '''\n    for item in list_of_lists:\n        for i in range(len(item)):\n            item[i] = item[i].lower()\n    return list_of_lists\n    \ndef list_item_to_lower(list_of_lists):\n    '''\n    Write a function to convert the capital letter of all elements in a list to small letters.\n    '''\n    for item in list_of_lists:\n        for i in range(len(item)):\n            item[i] = item[i].upper()\n    return list_of_lists\n    \ndef unique_list_with_tuple(list_of_tuple):\n    '''\n    Write a function to return a unique list of elements from a list of tuples.\n    '''\n    result = []\n    for item in list_of_tuple:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef unique_list_with_set(list_of_sets):\n    '''\n    Write a function to return a unique list of elements from a list of sets.\n    '''\n    result = []\n    for item in list_of_sets:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef unique_list_with_set(list_of_sets):\n    '''\n    Write a function to return a unique list of elements from a list of sets.\n    '''\n    result = []\n    for item in list_of_sets:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef list_item_to_lower(list_of_lists):\n    '''\n    Write a function to convert the capital letter of all elements in a list to small letters.\n    '''\n    for item in list_of_lists:\n        for i in range(len(item)):\n            item[i] = item[i].upper()\n    return list_of_lists\n    \ndef list_item_to_upper(list_of_lists):\n    '''\n    Write a function to convert the capital letter of all elements in a list to small letters.\n    '''\n    for item in list_of_lists:\n        for i in range(len(item)):\n            item[i] = item[i].lower()\n    return list_of_lists\n    \ndef list_item_to_lower(list_of_lists):\n    '''\n    Write a function to convert the capital letter of all elements in a list to small letters.\n    '''\n    for item in list_of_lists:\n        for i in range(len(item)):\n            item[i] = item[i].upper()\n    return list_of_lists\n    \ndef list_item_to_upper(list_of_lists):\n    '''\n    Write a function to convert the capital letter of all elements in a list to small letters.\n    '''\n    for item in list_of_lists:\n        for i in range(len(item)):\n            item[i] = item[i].lower()\n    return list_of_lists\n    \ndef unique_list_with_string(list_of_strings):\n    '''\n    Write a function to return a unique list of elements from a list of strings.\n    '''\n    result = []\n    for item in list_of_strings:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef unique_list_with_set(list_of_sets):\n    '''\n    Write a function to return a unique list of elements from a list of sets.\n    '''\n    result = []\n    for item in list_of_sets:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef unique_list_with_string(list_of_strings):\n    '''\n    Write a function to return a unique list of elements from a list of strings.\n    '''\n    result = []\n    for item in list_of_strings:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef unique_list_with_set(list_of_sets):\n    '''\n    Write a function to return a unique list of elements from a list of sets.\n    '''\n    result = []\n    for item in list_of_sets:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef unique_list_with_tuple(list_of_tuple):\n    '''\n    Write a function to return a unique list of elements from a list of tuples.\n    '''\n    result = []\n    for item in list_of_tuple:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef unique_list_with_dict(list_of_dicts):\n    '''\n    Write a function to return a unique list of elements from a list of dictionaries.\n    '''\n    result = []\n    for item in list_of_dicts:\n        if not item in result:\n            result.append(item)\n    return result\n    \ndef remove_elements_from_a_list(list_of_elements, elements):\n    '''\n    Write a function to remove all occurrences of the specified elements from a list.\n    '''\n    for i in range(len(elements)):\n        for j in range(len(list_of_elements)):\n            if elements[i",
        "num_ids": 37
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        raise ValueError(\"Empty list\")\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)\n",
        "num_ids": 50
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    return result / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = 1\n    for i in numbers:\n        res *= i\n    return res / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    for i in range(len(numbers)):\n        numbers[i] = total / len(numbers)\n    return numbers\n",
        "num_ids": 52
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    res = 1\n    for x in numbers:\n        res = res * x\n    res = res / len(numbers)\n    \n    return res\n    ",
        "num_ids": 41
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1:\n        return decimal_to_binary(n//2) + str(n % 2)\n    return str(n % 2)\n",
        "num_ids": 38
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    \n    if n < 0:\n        return '-' + decimal_to_binary(abs(n))\n        \n    if n % 2 == 0:\n        return decimal_to_binary(n//2) + '0'\n    \n    else:\n        return decimal_to_binary(n//2) + '1'\n",
        "num_ids": 91
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = \"\"\n    while n>0:\n        binary_string = str(n%2)+binary_string\n        n = n//2\n    return binary_string\n    \nprint(decimal_to_binary(12)) #1001110\nprint(decimal_to_binary(8)) #1000\nprint(decimal_to_binary(1)) #1\nprint(decimal_to_binary(0)) #0\nprint(decimal_to_binary(15)) #10111\n",
        "num_ids": 119
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return int(n).to_bytes((int(n).bit_length()+7)//8, 'big').decode()\n",
        "num_ids": 33
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = \"\"\n    while n > 0:\n        s = str(n % 2) + s\n        n = n // 2\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Since in order to get binary equivalent, need to convert to string\n    # Create a binary string\n    binary_string = ''\n    # initialize counter\n    num = 0\n",
        "num_ids": 42
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    result = \"\"\n    while n:\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(int(n)).replace(\"0b\", \"\")\n",
        "num_ids": 18
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    binary = ''\n    while n > 0:\n        if n%2 == 0:\n            binary = '0'+binary\n        else:\n            binary = '1'+binary\n        n = n//2\n    return binary\n",
        "num_ids": 58
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    if n >= 0:\n        while n:\n            if n % 2 == 1:\n                binary += \"1\"\n            else:\n                binary += \"0\"\n            n = n // 2\n    else:\n        binary = \"-\" + binary[1:]\n        while n:\n            if n % 2 == 1:\n                binary = \"1\" + binary\n            else:\n                binary = \"0\" + binary\n            n = n // 2\n    return binary\n",
        "num_ids": 115
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num == ''.join(reversed(num)) or len(num) == 1:\n        return(0)\n    else:\n        for i in range(1, len(num)):\n            # print(i)\n            if (num[i] > num[i-1]) and (num[i]!= num[i-1]):\n                return(int(num[i:]))\n",
        "num_ids": 105
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if len(str(num)) == 1:\n        return num\n",
        "num_ids": 18
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    reverse_num = 0\n    for i in range(len(str(num))):\n        reverse_num = (reverse_num * 10) + (num % 10)\n        num = int(num / 10)\n    if num > 0:\n        return reverse_num\n    return 1\n",
        "num_ids": 69
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    for i in range(int(num), 0, -1):\n        if is_palindrome(i):\n            return i\n",
        "num_ids": 33
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 2:\n        return num\n    min_palindrome = 2 * num\n    while min_palindrome < 10**7:\n        if min_palindrome % 2 == 0:\n            min_palindrome += 1\n        else:\n            break\n    return min_palindrome\n    \nclass Heap:\n    def __init__(self):\n        self.heap_list = []\n    def __str__(self):\n        return str(self.heap_list)\n    def push(self,val):\n        '''\n        Adds a new element to the heap.\n        '''\n        self.heap_list.append(val)\n        self.sift_up(len(self.heap_list)-1)\n    def pop(self):\n        '''\n        Removes the smallest element from the heap.\n        '''\n        if len(self.heap_list) == 0:\n            return None\n        min = self.heap_list[0]\n        self.heap_list[0] = self.heap_list[-1]\n        self.heap_list.pop()\n        self.sift_down(0)\n        return min\n    def sift_up(self,i):\n        '''\n        Swaps the value of the current element with its parent element\n        until the value of the parent element is smaller than its value.\n        '''\n        parent = (i - 1)//2\n        while i > 0 and self.heap_list[parent] > self.heap_list[i]:\n            self.heap_list[parent], self.heap_list[i] = self.heap_list[i], self.heap_list[parent]\n            i = parent\n            parent = (i - 1)//2\n    def sift_down(self,i):\n        '''\n        Swaps the value of the current element with its child element\n        until the value of the child element is smaller than its value.\n        '''\n        left = 2 * i + 1\n        right = 2 * i + 2\n        smallest = i\n        if len(self.heap_list) > left and self.heap_list[left] < self.heap_list[smallest]:\n            smallest = left\n        if len(self.heap_list) > right and self.heap_list[right] < self.heap_list[smallest]:\n            smallest = right\n        if i!= smallest:\n            self.heap_list[i], self.heap_list[smallest] = self.heap_list[smallest], self.heap_list[i]\n            self.sift_down(smallest)\n    def get_min(self):\n        '''\n        Returns the minimum value in the heap.\n        '''\n        return self.heap_list[0]\n",
        "num_ids": 14
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = 0\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        elif len(str(num)) <= 2:\n            return num\n        elif digits == 0:\n            num = str(num)[1:]\n            num = int(num)\n            digits += 1\n        else:\n            num = str(num)[:-1]\n            num = int(num)\n            digits += 1\n",
        "num_ids": 111
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n    while(n <= pow(10,5)):\n        if(is_palindrome(n)):\n            return n\n        else:\n            n+=1\n    return -1\n",
        "num_ids": 51
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    # Reverse string\n    s = s[::-1]\n    # Make string to int\n    s = int(s)\n    # Check if number is a palindrome\n    if s == s[::-1]:\n        return s\n    # Check if num is larger than itself (no leading 0)\n    while s > 0:\n        # Check if it's even\n        if s % 10 == 0:\n            s = s // 10\n            continue\n        # Check if its odd\n        if s % 10!= 1:\n            return -1\n        # If its even, decrease it and check if its even or not\n        s = s - (s % 10)\n        if s == 0 or s == 1:\n            return -1\n        # Check if its odd\n        if s % 10!= 0:\n            return -1\n    # Return 0 if no palindrome is found\n    return 0\n",
        "num_ids": 218
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num % 10 == 0:\n        return next_smallest_palindrome(num // 10) * 10\n    else:\n        return num + 1\n",
        "num_ids": 39
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n",
        "num_ids": 29
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n    \nif __name__ == '__main__':\n    arr = list(map(int, input().split()))\n    k = int(input())\n    print(kth_element(arr, k))",
        "num_ids": 59
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if len(arr) <= k:\n    #     return -1\n    # else:\n    #     return arr[k-1]\n",
        "num_ids": 36
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        raise Exception(\"Invalid k\")\n",
        "num_ids": 29
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    if high < k:\n        return None\n    while low <= high:\n        mid = low + (high - low) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \ndef k_closest(points, k):\n    '''\n    Write a function that takes in a list of points and a number k and returns the k closest points.\n    '''\n    import heapq\n    if not points or k > len(points) or k <= 0:\n        return None\n    \n    points.sort(key=lambda x: x[0]**2 + x[1]**2)\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, points[i])\n    \n    for i in range(k, len(points)):\n        if abs(points[i][0]) < abs(heap[0][0]) and abs(points[i][1]) < abs(heap[0][1]):\n            heapq.heappop(heap)\n            heapq.heappush(heap, points[i])\n    \n    return heap\n",
        "num_ids": 180
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n    if len(arr) < k:\n        return -1\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if k == mid:\n            return arr[mid]\n        elif k < mid:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 108
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0 or k > len(arr):\n        return -1\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if mid == k-1:\n            return arr[mid]\n        elif mid > k - 1:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return -1\n",
        "num_ids": 111
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # input = [1,2,3,4,5,6,7]\n    # k = 4\n    # output = 4\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 1\n    # output = 1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 7\n    # output = 7\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 0\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -8\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 2\n    # output = 1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 5\n    # output = 5\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 6\n    # output = 6\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 10\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -10\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 8\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 9\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = 11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -11\n    # output = -1\n    #\n    # input = [1,2,3,4,5,6,7]\n    # k = -100\n",
        "num_ids": 2008
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    return arr[k-1]\n",
        "num_ids": 25
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # the reversed() function will reverse the string and then join it with a space using + operator\n    return ''.join(map(str.capitalize, reversed(word.split('_'))))\n",
        "num_ids": 46
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for i, ch in enumerate(word):\n        if i:\n            result += ch.capitalize()\n        else:\n            result += ch\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Complete this function\n    return word.title()",
        "num_ids": 14
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join([word.title() for word in word.split('_')])\n",
        "num_ids": 23
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = ''.join(x.title() for x in word.split('_'))\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    string = ''\n    for i in word:\n        if i == '_':\n            pass\n        else:\n            string += i.capitalize()\n    return string\n",
        "num_ids": 42
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            new_word += word[i].upper()\n        else:\n            new_word += word[i].lower()\n    return new_word\n",
        "num_ids": 62
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    result = []\n    \n    for word in word.split('_'):\n        if len(word) == 0:\n            continue\n        result.append(word[0].upper() + word[1:])\n    \n    return ''.join(result)\n    \n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    \n    result = []\n    \n    for word in word.split('_'):\n        if len(word) == 0:\n            continue\n        result.append(word[0].lower() + word[1:])\n    \n    return ''.join(result)\n    \n    \ndef snake_to_slim(word):\n    '''\n    Write a function to convert a snake case string to slim case string.\n    '''\n    \n    result = []\n    \n    for word in word.split('_'):\n        if len(word) == 0:\n            continue\n        if word[0].isupper():\n            result.append(word[0].lower() + word[1:])\n        else:\n            result.append(word)\n    \n    return ''.join(result)\n    \n    \ndef slim_to_snake(word):\n    '''\n    Write a function to convert a slim case string to snake case string.\n    '''\n    \n    result = []\n    \n    for word in word.split('_'):\n        if len(word) == 0:\n            continue\n        if word[0].isupper():\n            result.append(word[0].lower() + word[1:])\n        else:\n            result.append(word)\n    \n    return ''.join(result)\n",
        "num_ids": 87
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    new_string = ''\n    for word in word:\n        if word.isupper():\n            new_string += word.lower()\n        elif word.islower():\n            new_string += word.upper()\n        else:\n            new_string += word\n    return new_string\n",
        "num_ids": 72
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    i = 0\n    # code here\n    out = \"\"\n    while i < len(word):\n        if word[i].isupper():\n            out += word[i]\n            i += 1\n            while i < len(word) and word[i].islower():\n                out += word[i]\n                i += 1\n        else:\n            out += word[i].upper()\n            i += 1\n    return out\n",
        "num_ids": 102
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    else:\n        return n*m - eulerian_num(n, m-1)\n",
        "num_ids": 47
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m - m * n\n",
        "num_ids": 12
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (n - 1) * (n - 2) // 6 - m\n",
        "num_ids": 22
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    d = {}\n    \n    def dfs(count):\n        if count == n:\n            print(m)\n            return\n        for i in range(1, n + 1):\n            if i not in d:\n                d[i] = count\n                dfs(count + 1)\n                del d[i]\n                \n    dfs(0)\n    print()\n    ",
        "num_ids": 92
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return eulerian_num(n - 1, m + 1) + eulerian_num(n - 1, m - 1)\n",
        "num_ids": 61
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return m\n    if n == 2:\n        return m+1\n    elif n == 3:\n        return m+2\n    else:\n        return eulerian_num(n-1, m+1) + eulerian_num(n-2, m+2) + eulerian_num(n-3, m+3)\n    \nprint(eulerian_num(5, 1))\n",
        "num_ids": 117
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def eulerian_num(n, m): \n        if m == 0: \n            return 1\n        elif n == 1: \n            return m \n        else: \n            return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1) \n    return eulerian_num(n, m)\n",
        "num_ids": 91
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        raise ValueError(\"n should be less than or equal to m.\")\n    \n    # first_node = 0\n    # first_edge = 1\n    # next_edge = 2\n    # for i in range(n):\n    #     if first_node == 0:\n    #         first_node = first_edge\n    #         next_edge = 2*first_edge + 1\n    #     else:\n    #         next_edge = first_node\n    #         first_node = next_edge\n    #         first_edge = next_edge + 1\n    \n    # res = 0\n    # for i in range(n):\n    #     res = res + first_node\n    #     first_edge = next_edge\n    #     next_edge = 2*first_edge + 1\n    # return res\n",
        "num_ids": 199
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n-m+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = n*m\n    b = a // 2 + 1\n    c = m\n    \n    while True:\n        if (b == 1 or b == 0) and c == 1:\n            return a\n        \n        b = 2*b\n        c = (m+n+b) % 2\n        if (b == 1 or b == 0) and c == 1:\n            return a\n        \n        a = 2*a\n",
        "num_ids": 103
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for i in range(len(sublist)):\n            sublist[i] = sorted(sublist[i])\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in range(len(input_list)):\n        new_list.append([])\n        for j in range(len(input_list[i])):\n            new_list[i].append(input_list[i][j].lower())\n    sorted_list = []\n    for i in range(len(new_list)):\n        sorted_list.append(sorted(new_list[i]))\n    return sorted_list\n",
        "num_ids": 115
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u043e\u0432\n    return sorted(input_list, key=len)\n",
        "num_ids": 79
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) == 0:\n        return []\n    # first step: sort the first element of each sublist\n    temp_list = []\n    for i in range(len(input_list)):\n        temp_list.append([x for x in input_list[i] if x!=\"\"])\n    temp_list = sorted(temp_list)\n    # then, sort the rest\n    for i in range(len(temp_list)):\n        input_list[i] = sorted(temp_list[i])\n    return input_list\n",
        "num_ids": 134
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n",
        "num_ids": 26
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda s: s[0])\n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == True:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    i = 0\n    for elem in lst:\n        if elem:\n            i += 1\n    print(i)\n",
        "num_ids": 33
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i == True:\n            c += 1\n    return c\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in lst:\n        if i:\n            counter +=1\n    return counter\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in range(len(lst)):\n        if lst[i]:\n            cnt += 1\n    return cnt\n",
        "num_ids": 40
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst = [True] + lst + [False]\n    return lst.count(True)\n",
        "num_ids": 27
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in lst:\n        if i:\n            counter +=1\n    return counter\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if(i==True):\n            count+=1\n    print(\"Count of True is \",count)\ndef no_true(lst):\n    '''\n    Write a python function to remove all true elements in the given list.\n    '''\n    lst1 = []\n    for i in lst:\n        if i == True:\n            lst1.append(i)\n    for i in lst1:\n        lst.remove(i)\n    print(\"List after removing all true elements\",lst)\n",
        "num_ids": 66
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code here\n    return lst.count(True)\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup\n",
        "num_ids": 24
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (list(test_list) + list(test_tup))\n",
        "num_ids": 20
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    lst = test_list + test_tup\n    print(lst)\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n",
        "num_ids": 31
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for index in range(len(test_list)):\n        test_tup.append(test_list[index])\n    return test_tup\n",
        "num_ids": 38
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    lst = []\n    i = j = k = 0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            lst.append(num1[i])\n            i += 1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            lst.append(num2[j])\n            j += 1\n        else:\n            lst.append(num3[k])\n            k += 1\n    while i<len(num1):\n        lst.append(num1[i])\n        i += 1\n    while j<len(num2):\n        lst.append(num2[j])\n        j += 1\n    while k<len(num3):\n        lst.append(num3[k])\n        k += 1\n    return lst\ndef min_heap(lst):\n    '''\n    Write a function that takes a list and returns a new sorted list using a min-heap.\n    '''\n    new_heap = []\n    for i in lst:\n        heapq.heappush(new_heap, i)\n    return new_heap\ndef max_heap(lst):\n    '''\n    Write a function that takes a list and returns a new sorted list using a max-heap.\n    '''\n    new_heap = []\n    for i in lst:\n        heapq.heappush(new_heap, -i)\n    return new_heap\ndef search_list(lst, value):\n    '''\n    Write a function that takes a list and a value and returns the index of the value.\n    '''\n    for i,n in enumerate(lst):\n        if n == value:\n            return i\n    return -1\ndef binary_search(lst, value):\n    '''\n    Write a function that takes a list and a value and returns the index of the value.\n    '''\n    left = 0\n    right = len(lst)-1\n    while left<=right:\n        mid = int((left+right)/2)\n        if lst[mid] == value:\n            return mid\n        if lst[mid] < value:\n            left = mid+1\n        else:\n            right = mid-1\n    return -1\ndef binary_search_iterative(lst, value):\n    '''\n    Write a function that takes a list and a value and returns the index of the value.\n    '''\n    if len(lst) == 0:\n        return -1\n    start = 0\n    end = len(lst)-1\n    while start <= end:\n        mid = int((start+end)/2)\n        if lst[mid] == value:\n            return mid\n        elif lst[mid] < value:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\ndef binary_search_recursive(lst, value, left = 0, right = None):\n    '''\n    Write a function that takes a list and a value and returns the index of the value.\n    '''\n    if left > right:\n        return -1\n    mid = int((left + right) / 2)\n    if value == lst[mid]:\n        return mid\n    elif lst[mid] < value:\n        return binary_search_recursive(lst, value, mid+1, right)\n    else:\n        return binary_search_recursive(lst, value, left, mid-1)\ndef binary_search_recursive_r(lst, value, left = 0, right = None):\n    '''\n    Write a function that takes a list and a value and returns the index of the value.\n    '''\n    if left > right:\n        return -1\n    mid = int((left + right) / 2)\n    if value == lst[mid]:\n        return mid\n    elif lst[mid] < value:\n        return binary_search_recursive(lst, value, mid+1, right)\n    else:\n        return binary_search_recursive(lst, value, left, mid-1)\ndef binary_search_iterative_r(lst, value):\n    '''\n    Write a function that takes a list and a value and returns the index of the value.\n    '''\n    if len(lst) == 0:\n        return -1\n    start = 0\n    end = len(lst)-1\n    while start <= end:\n        mid = int((start+end)/2)\n        if lst[mid] == value:\n            return mid\n        elif lst[mid] < value:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\ndef binary_search_recursive_r_iterative(lst, value, left = 0, right = None):\n    '''\n    Write a function that takes a list and a value and returns the index of the value.\n    '''\n    if left > right:\n        return -1\n    mid = int((left + right) / 2)\n    if value == lst[mid]:\n        return mid\n    elif lst[mid] < value:\n        return binary_search_recursive_r_iterative(lst, value, mid+1, right)\n    else:\n        return binary_search_recursive_r_iterative(lst, value, left, mid-1)\ndef binary_search_recursive_r_iterative_r(lst, value, left = 0, right = None):\n    '''\n    Write a function that takes a list and a value and returns the index of the value.\n    '''\n    if len(lst) == 0:\n        return -1\n    start = 0\n    end = len(lst)-1\n    while start <= end:\n        mid = int((start+end)/2)\n        if lst[mid] == value:\n            return mid\n        elif lst[mid] < value:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\ndef binary_search_iterative_r_iterative_r(lst, value):\n    '''\n    Write a function that takes a list and a value and returns the index of the value.\n    '''\n    if len(lst) == 0:\n        return -1\n    start = 0\n    end = len(lst)-1\n    while start <= end:\n        mid = int((start+end)/2)\n        if lst[mid] == value:\n            return mid\n        elif lst[mid] < value:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\ndef find_third_max_iterative(lst):\n    '''\n    Write a function that takes a list and returns the index of the third maximum element.\n    '''\n    third_max = lst[0]\n    for i in lst[1:]:\n        if i > third_max:\n            third_max = i\n    return lst.index(third_max)\ndef find_third_max_recursive(lst, left = 0, right = None):\n    '''\n    Write a function that takes a list and returns the index of the third maximum element.\n    '''\n    if left > right:\n        return -1\n    mid = int((left + right) / 2)\n    if mid == len(lst) - 2:\n        return -1\n    if mid + 1 < len(lst) - 1:\n        if lst[mid] < lst[mid + 1]:\n            return find_third_max_recursive(lst, mid+1, right)\n    if mid + 2 < len(lst) - 1:\n        if lst[mid] < lst[mid + 2]:\n            return find_third_max_recursive(lst, mid+2, right)\n    return lst.index(lst[mid])\ndef find_third_max_iterative_r(lst):\n    '''\n    Write a function that takes a list and returns the index of the third maximum element.\n    '''\n    third_max = lst[0]\n    for i in lst[1:]:\n    ",
        "num_ids": 25
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    while (len(num1) > 0) and (len(num2) > 0) and (len(num3) > 0):\n        if num1[0] <= num2[0]:\n            merged.append(num1.pop(0))\n        else:\n            merged.append(num2.pop(0))\n    merged.extend(num1)\n    merged.extend(num2)\n    merged.extend(num3)\n    return merged\n",
        "num_ids": 123
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    while(len(num1)>0 and len(num2)>0 and len(num3)>0):\n        if num1[0] <= num2[0]:\n            merged.append(num1.pop(0))\n        else:\n            merged.append(num2.pop(0))\n    if len(num1)>0:\n        merged = merged + num1\n    if len(num2)>0:\n        merged = merged + num2\n    if len(num3)>0:\n        merged = merged + num3\n    return merged\n",
        "num_ids": 146
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #Your code here\n    arr = sorted(num1+num2+num3)\n    return arr\n",
        "num_ids": 27
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    m=[]\n    while(len(num1)>0 and len(num2)>0 and len(num3)>0):\n        if num1[0]<=num2[0] and num1[0]<=num3[0]:\n            m.append(num1.pop(0))\n        elif num2[0]<=num1[0] and num2[0]<=num3[0]:\n            m.append(num2.pop(0))\n        elif num3[0]<=num1[0] and num3[0]<=num2[0]:\n            m.append(num3.pop(0))\n    if len(num1)>0:\n        m=m+num1\n    if len(num2)>0:\n        m=m+num2\n    if len(num3)>0:\n        m=m+num3\n    return m\n",
        "num_ids": 221
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None and num2 is None:\n        return num3\n    if num2 is None and num1 is not None:\n        return num1\n    if num1 is None and num3 is not None:\n        return num3\n    if num1 is not None and num2 is not None:\n        sorted_list = []\n        while num1 is not None and num2 is not None:\n            if num1[0] <= num2[0]:\n                sorted_list.append(num1.pop(0))\n            else:\n                sorted_list.append(num2.pop(0))\n        while num1 is not None:\n            sorted_list.append(num1.pop(0))\n        while num2 is not None:\n            sorted_list.append(num2.pop(0))\n        return sorted_list\n",
        "num_ids": 202
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None and num2 is None and num3 is None:\n        return None\n    \n    #We want to use a min heap to keep track of the minimum of the elements in the three lists\n    heap = []\n    \n    #Create a list that will hold the index number of the next element in each list\n    next_ind = [0]*3\n    \n    #While the first three lists have at least 1 element\n    while len(num1)>0 and len(num2)>0 and len(num3)>0:\n        #Grab the minimum from each list\n        min1 = num1[0] if len(num1)>0 else float('inf')\n        min2 = num2[0] if len(num2)>0 else float('inf')\n        min3 = num3[0] if len(num3)>0 else float('inf')\n        \n        #If the minimum in each list is equal, we need to check which list is smaller\n        if min1 == min2 and min2 == min3:\n            #If the min list is empty, we can't merge any of the lists\n            if num1[0] == float('inf') or num2[0] == float('inf') or num3[0] == float('inf'):\n                break\n            #Otherwise, we take the minimum and add it to the heap\n            else:\n                heap.append(min1)\n                num1.pop(0)\n                next_ind[0] += 1\n        \n        #If the minimum in the min list is not equal to the minimum of the three lists\n        #Then, we need to know which list is the smaller list\n        else:\n            #If the min list is empty, we can't merge any of the lists\n            if num1[0] == float('inf'):\n                break\n            #Otherwise, we take the minimum and add it to the heap\n            else:\n                heap.append(min1)\n                num1.pop(0)\n                next_ind[0] += 1\n    \n    #We will add the remaining elements from the first list\n    while len(num1)>0:\n        heap.append(num1[0])\n        num1.pop(0)\n        next_ind[0] += 1\n    \n    #We will add the remaining elements from the second list\n    while len(num2)>0:\n        heap.append(num2[0])\n        num2.pop(0)\n        next_ind[1] += 1\n    \n    #We will add the remaining elements from the third list\n    while len(num3)>0:\n        heap.append(num3[0])\n        num3.pop(0)\n        next_ind[2] += 1\n    \n    #We will now create the final output list\n    output = []\n    \n    #While we don't have reached the end of the heap\n    while heap:\n        #Add the smallest element in the heap\n        smallest = heap[0]\n        output.append(smallest)\n        \n        #Remove it from the heap\n        heap.pop(0)\n        \n        #If there are elements in the three lists, we will repeat the process\n        if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n            #Get the next smallest element of the list\n            next_min = min(num1[0],num2[0],num3[0])\n            \n            #Remove the next smallest element from the heap\n            heapq.heappush(heap,next_min)\n            \n            #If there are still elements in the three lists, we will repeat the process\n            if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                #Get the next smallest element of the list\n                next_min = min(num1[0],num2[0],num3[0])\n                \n                #Remove the next smallest element from the heap\n                heapq.heappush(heap,next_min)\n                \n                #If there are still elements in the three lists, we will repeat the process\n                if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                    #Get the next smallest element of the list\n                    next_min = min(num1[0],num2[0],num3[0])\n                    \n                    #Remove the next smallest element from the heap\n                    heapq.heappush(heap,next_min)\n                    \n                    #If there are still elements in the three lists, we will repeat the process\n                    if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                        #Get the next smallest element of the list\n                        next_min = min(num1[0],num2[0],num3[0])\n                        \n                        #Remove the next smallest element from the heap\n                        heapq.heappush(heap,next_min)\n                        \n                        #If there are still elements in the three lists, we will repeat the process\n                        if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                            #Get the next smallest element of the list\n                            next_min = min(num1[0],num2[0],num3[0])\n                            \n                            #Remove the next smallest element from the heap\n                            heapq.heappush(heap,next_min)\n                            \n                            #If there are still elements in the three lists, we will repeat the process\n                            if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                                #Get the next smallest element of the list\n                                next_min = min(num1[0],num2[0],num3[0])\n                                \n                                #Remove the next smallest element from the heap\n                                heapq.heappush(heap,next_min)\n                                \n                                #If there are still elements in the three lists, we will repeat the process\n                                if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                                    #Get the next smallest element of the list\n                                    next_min = min(num1[0],num2[0],num3[0])\n                                    \n                                    #Remove the next smallest element from the heap\n                                    heapq.heappush(heap,next_min)\n                                    \n                                    #If there are still elements in the three lists, we will repeat the process\n                                    if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                                        #Get the next smallest element of the list\n                                        next_min = min(num1[0],num2[0],num3[0])\n                                        \n                                        #Remove the next smallest element from the heap\n                                        heapq.heappush(heap,next_min)\n                                        \n                                        #If there are still elements in the three lists, we will repeat the process\n                                        if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                                            #Get the next smallest element of the list\n                                            next_min = min(num1[0],num2[0],num3[0])\n                                            \n                                            #Remove the next smallest element from the heap\n                                            heapq.heappush(heap,next_min)\n                                            \n                                            #If there are still elements in the three lists, we will repeat the process\n                                            if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                                                #Get the next smallest element of the list\n                                                next_min = min(num1[0],num2[0],num3[0])\n                                                \n                                                #Remove the next smallest element from the heap\n                                                heapq.heappush(heap,next_min)\n                                                \n                                                #If there are still elements in the three lists, we will repeat the process\n                                                if next_ind[0]>0 and next_ind[1]>0 and next_ind[2]>0:\n                                                    #Get the next smallest element of the list\n                                                    next_min = min(num1[0],num2[0],num3[0])\n                                                    \n                                                    #Remove the next smallest element from the hea",
        "num_ids": 2003
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    while len(num1)!=0 and len(num2)!=0 and len(num3)!=0:\n        if num1[0]<=num2[0] and num1[0]<=num3[0]:\n            result.append(num1[0])\n            num1 = num1[1:]\n        elif num1[0]>num2[0] and num1[0]>=num3[0]:\n            result.append(num2[0])\n            num2 = num2[1:]\n        elif num1[0]>num2[0] and num1[0]<num3[0]:\n            result.append(num3[0])\n            num3 = num3[1:]\n    if len(num1)==0:\n        result = result+num2\n    elif len(num2)==0:\n        result = result+num1\n    else:\n        result = result+num3\n    return result\n",
        "num_ids": 235
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #get indexes of lists\n    idx1 = 0\n    idx2 = 0\n    idx3 = 0\n    sorted_list = []\n    while True:\n        if idx1 == len(num1):\n            sorted_list.append(num2[idx2])\n            break\n        if idx2 == len(num2):\n            sorted_list.append(num3[idx3])\n            break\n        if idx3 == len(num3):\n            sorted_list.append(num1[idx1])\n            break\n        if num1[idx1] < num2[idx2] and num1[idx1] < num3[idx3]:\n            sorted_list.append(num1[idx1])\n            idx1 += 1\n        elif num2[idx2] < num1[idx1] and num2[idx2] < num3[idx3]:\n            sorted_list.append(num2[idx2])\n            idx2 += 1\n        elif num3[idx3] < num1[idx1] and num3[idx3] < num2[idx2]:\n            sorted_list.append(num3[idx3])\n            idx3 += 1\n        else:\n            print(\"Something went wrong\")\n    return sorted_list\n",
        "num_ids": 327
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    len1 = len(num1)\n    len2 = len(num2)\n    len3 = len(num3)\n    l = []\n    i = j = k = 0\n    while i < len1 and j < len2 and k < len3:\n        if num1[i] <= num2[j]:\n            l.append(num1[i])\n            i += 1\n        else:\n            l.append(num2[j])\n            j += 1\n        k += 1\n    while i < len1:\n        l.append(num1[i])\n        i += 1\n    while j < len2:\n        l.append(num2[j])\n        j += 1\n    while k < len3:\n        l.append(num3[k])\n        k += 1\n    return l\n",
        "num_ids": 195
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return '\\nThe total number of odd values when rotating a binary string'+ str(s) +'times are :' + str(len([i for i in range(n) if s[i]=='1']))\n",
        "num_ids": 54
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(0,n):\n        s=bin(int(s,2)^int(s,2))\n        if s[0]=='1':\n            count=count+1\n    return count\n        \nif __name__ == \"__main__\":\n    s='0b10011'\n    n=4\n    print(odd_Equivalent(s,n))",
        "num_ids": 98
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    res = 0\n    for i in range(n):\n        t = s[0]\n        for j in range(1,l):\n            s = s[1:] + t\n        res += len([x for x in s if x%2!= 0])\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def isOdd(n):\n        if n%2!= 0:\n            return 1\n        else:\n            return 0\n    def rotate(s,n):\n        if n == 0:\n            return s\n        else:\n            return rotate(s[1:], n-1) + s[0]\n    if n==0:\n        return 0\n    elif n == 1:\n        return s\n    elif isOdd(n):\n        return rotate(s,n)\n    else:\n        odd = rotate(s,n)\n        even = rotate(odd,1)\n        return rotate(even,1)\nprint(\"\\n\\n\\nFunction to find the number of numbers with an odd value when rotating a binary string the given number of times\")\nprint(\"\\nodd_Equivalent('10101',3)=\",odd_Equivalent('10101',3))\nprint(\"odd_Equivalent('10101',5)=\",odd_Equivalent('10101',5))\nprint(\"odd_Equivalent('10101',7)=\",odd_Equivalent('10101',7))\nprint(\"odd_Equivalent('10101',8)=\",odd_Equivalent('10101',8))\nprint(\"odd_Equivalent('10101',9)=\",odd_Equivalent('10101',9))\nprint(\"odd_Equivalent('10101',10)=\",odd_Equivalent('10101',10))\nprint(\"odd_Equivalent('10101',11)=\",odd_Equivalent('10101',11))\nprint(\"odd_Equivalent('10101',12)=\",odd_Equivalent('10101',12))\nprint(\"odd_Equivalent('10101',13)=\",odd_Equivalent('10101',13))\nprint(\"odd_Equivalent('10101',14)=\",odd_Equivalent('10101',14))\nprint(\"odd_Equivalent('10101',15)=\",odd_Equivalent('10101',15))\nprint(\"odd_Equivalent('10101',16)=\",odd_Equivalent('10101',16))\nprint(\"odd_Equivalent('10101',17)=\",odd_Equivalent('10101',17))\nprint(\"odd_Equivalent('10101',18)=\",odd_Equivalent('10101',18))\nprint(\"odd_Equivalent('10101',19)=\",odd_Equivalent('10101',19))\nprint(\"odd_Equivalent('10101',20)=\",odd_Equivalent('10101',20))\nprint(\"odd_Equivalent('10101',21)=\",odd_Equivalent('10101',21))\nprint(\"odd_Equivalent('10101',22)=\",odd_Equivalent('10101',22))\nprint(\"odd_Equivalent('10101',23)=\",odd_Equivalent('10101',23))\nprint(\"odd_Equivalent('10101',24)=\",odd_Equivalent('10101',24))\nprint(\"odd_Equivalent('10101',25)=\",odd_Equivalent('10101',25))\nprint(\"odd_Equivalent('10101',26)=\",odd_Equivalent('10101',26))\nprint(\"odd_Equivalent('10101',27)=\",odd_Equivalent('10101',27))\nprint(\"odd_Equivalent('10101',28)=\",odd_Equivalent('10101',28))\nprint(\"odd_Equivalent('10101',29)=\",odd_Equivalent('10101',29))\nprint(\"odd_Equivalent('10101',30)=\",odd_Equivalent('10101',30))\nprint(\"odd_Equivalent('10101',31)=\",odd_Equivalent('10101',31))\nprint(\"odd_Equivalent('10101',32)=\",odd_Equivalent('10101',32))\nprint(\"odd_Equivalent('10101',33)=\",odd_Equivalent('10101',33))\nprint(\"odd_Equivalent('10101',34)=\",odd_Equivalent('10101',34))\nprint(\"odd_Equivalent('10101',35)=\",odd_Equivalent('10101',35))\nprint(\"odd_Equivalent('10101',36)=\",odd_Equivalent('10101',36))\nprint(\"odd_Equivalent('10101',37)=\",odd_Equivalent('10101',37))\nprint(\"odd_Equivalent('10101',38)=\",odd_Equivalent('10101',38))\nprint(\"odd_Equivalent('10101',39)=\",odd_Equivalent('10101',39))\nprint(\"odd_Equivalent('10101',40)=\",odd_Equivalent('10101',40))\nprint(\"odd_Equivalent('10101',41)=\",odd_Equivalent('10101',41))\nprint(\"odd_Equivalent('10101',42)=\",odd_Equivalent('10101',42))\nprint(\"odd_Equivalent('10101',43)=\",odd_Equivalent('10101',43))\nprint(\"odd_Equivalent('10101',44)=\",odd_Equivalent('10101',44))\nprint(\"odd_Equivalent('10101',45)=\",odd_Equivalent('10101',45))\nprint(\"odd_Equivalent('10101',46)=\",odd_Equivalent('10101',46))\nprint(\"odd_Equivalent('10101',47)=\",odd_Equivalent('10101',47))\nprint(\"odd_Equivalent('10101',48)=\",odd_Equivalent('10101',48))\nprint(\"odd_Equivalent('10101',49)=\",odd_Equivalent('10101',49))\nprint(\"odd_Equivalent('10101',50)=\",odd_Equivalent('10101',50))\nprint(\"odd_Equivalent('10101',51)=\",odd_Equivalent('10101',51))\nprint(\"odd_Equivalent('10101',52)=\",odd_Equivalent('10101',52))\nprint(\"odd_Equivalent('10101',53)=\",odd_Equivalent('10101',53))\nprint(\"odd_Equivalent('10101',54)=\",odd_Equivalent('10101',54))\nprint(\"odd_Equivalent('10101',55)=\",odd_Equivalent('10101',55))\nprint(\"odd_Equivalent('10101',56)=\",odd_Equivalent('10101',56))\nprint(\"odd_Equivalent('10101',57)=\",odd_Equivalent('10101',57))\nprint(\"odd_Equivalent('10101',58)=\",odd_Equivalent('10101',58))\nprint(\"odd_Equivalent('10101',59)=\",odd_Equivalent('10101',59))\nprint(\"odd_Equivalent('10101',60)=\",odd_Equivalent('10101',60))\nprint(\"odd_Equivalent('10101',61)=\",odd_Equivalent('10101',61))\nprint(\"odd_Equivalent('10101',62)=\",odd_Equivalent('10101',62))\nprint(\"odd_Equivalent('10101',63)=\",odd_Equivalent('10101',63))\nprint(\"odd_Equivalent('10101',64)=\",odd_Equivalent('10101',64))\nprint(\"odd_Equivalent('10101',65)=\",odd_Equivalent('10101',65))\nprint(\"odd_Equivalent('10101',66)=\",odd_Equivalent('10101',66))\nprint(\"odd_Equivalent('10101',67)=\",odd_Equivalent('10101',67))\nprint(\"odd_Equivalent('10101',68)=\",odd_Equivalent('10101',68))\nprint(\"odd_Equivalent('10101',69)=\",odd_Equivalent('10101',69))\nprint(\"odd_Equivalent('10101',70)=\",odd_Equivalent('10101',70))\nprint(\"odd_Equivalent('10101',71)=\",odd_Equivalent('10101',71))\nprint(\"odd_Equivalent('10101',72)=\",odd_Equivalent('10101',72))\nprint(\"odd_Equivalent('10101',73)=\",odd_Equivalent('10101',73))\nprint(\"odd_Equivalent('10101',74)=\",odd_Equivalent('10101',74))\nprint(\"odd_Equivalent('10101',75)=\",odd_Equivalent('10101',75))\nprint(\"odd_Equivalent('10101',76)=\",odd_Equivalent('10101',76))\nprint(\"odd_Equivalent('10101',77)=\",odd_Equivalent('10101',77))\nprint(\"odd_Equivalent('10101',78)=\",odd_Equivalent('10101',78))\nprint(\"odd_Equivalent('10101',79)=\",odd_Equivalent('10101',79))\nprint(\"odd_Equivalent('10101',80)=\",odd_Equivalent('1010",
        "num_ids": 2004
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(0,len(s)):\n            if int(s[j]) % 2!= 0:\n                count += 1\n            if int(s[j]) == 0:\n                break\n            if j == len(s) - 1:\n                if int(s[j]) % 2 == 0:\n                    count += 1\n    return count\n    \n",
        "num_ids": 104
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(0,n):\n        x=s[i]\n        x=int(x,2)\n        if x%2!=0:\n            count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #  print(s[:n])\n    x = 1\n    y = 0\n    y = odd_Equivalent(s[n:], n)\n    for i in range(n):\n        x = x * 2\n        y = y + odd_Equivalent(s[:n - i - 1], n - i - 1)\n    return x + y\n",
        "num_ids": 87
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string_copy = list(s)\n    count = 0\n    string_copy = list(map(int, string_copy))\n    string_copy = [x - n for x in string_copy]\n    for i in range(len(string_copy)):\n        if string_copy[i] >= 0:\n            count += 1\n    return count\n    \nif __name__ == \"__main__\":\n    s = \"1101\"\n    n = 2\n    print(odd_Equivalent(s,n))\n    '''\n    OUTPUT\n    1\n    '''",
        "num_ids": 1
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    bin_num = []\n    for i in range(len(s)):\n        if int(s[i])%2==1:\n            bin_num.append(1)\n        else:\n            bin_num.append(0)\n    for i in range(n):\n        bin_num = list(map(int, list(str(bin_num))))\n        bin_num.reverse()\n        bin_num = str(bin_num)\n        bin_num = list(bin_num)\n        bin_num = map(int, bin_num)\n        bin_num = int(''.join(map(str, bin_num)))\n        if bin_num%2==1:\n            return i+1\n    return -1\n",
        "num_ids": 175
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    s = list(s)\n    s_odd = []\n    for i in range(len(s)):\n        if s[i]=='0':\n            count = count+1\n            s_odd.append('1')\n        else:\n            s_odd.append('0')\n",
        "num_ids": 76
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(0, len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]).issubset(nestedlist[j]):\n                result.append(nestedlist[i])\n                print('common elements: ', result)\n",
        "num_ids": 85
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common=[]\n    for elem in nestedlist:\n        if isinstance(elem,list):\n            common.extend(common_in_nested_lists(elem))\n        else:\n            common.append(elem)\n    return common\n",
        "num_ids": 63
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for l in nestedlist:\n        if isinstance(l, list):\n            result.append(common_in_nested_lists(l))\n        else:\n            result.append(l)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # loop through the list and create a set for each list\n    common_set = set()\n    for item in nestedlist:\n        if type(item)!= str:\n            for _ in item:\n                common_set.add(_)\n        else:\n            common_set.add(item)\n    # return the set\n    return common_set\n",
        "num_ids": 84
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    first_nested_list = nestedlist[0]\n    common_elements = []\n    for i in first_nested_list:\n        if i in nestedlist[1]:\n            common_elements.append(i)\n    return common_elements\n",
        "num_ids": 64
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if isinstance(nestedlist,list)==False:\n        return False\n    elif len(nestedlist)<=1:\n        return True\n    elif len(nestedlist)>1:\n        if len(nestedlist[0])>1:\n            if common_in_nested_lists(nestedlist[0])==True:\n                return True\n            else:\n                return False\n        else:\n            if common_in_nested_lists(nestedlist[1])==True:\n                return True\n            else:\n                return False\n",
        "num_ids": 136
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    a = []\n    b = []\n    for l in nestedlist:\n        for i in l:\n            a.append(i)\n    for l in nestedlist:\n        for j in l:\n            b.append(j)\n    common_elements = list(set(a) & set(b))\n    print('Common elements in given nested list',nestedlist,'are: ',common_elements)\n",
        "num_ids": 99
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common\n",
        "num_ids": 42
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l = []\n    for i in nestedlist:\n        if type(i) == list:\n            l.append(common_in_nested_lists(i))\n        else:\n            l.append(i)\n    return list(set(l[0]).intersection(*l))\n",
        "num_ids": 70
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in i:\n            if j in common_elements:\n                break\n            common_elements.append(j)\n",
        "num_ids": 49
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        print(\"Please input an integer\")\n    else:\n        print(\"You input an integer\")\n        return int(text)\n",
        "num_ids": 47
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n",
        "num_ids": 11
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if isinstance(text,int):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # your code here\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list1_dit_empty = []\n    for i in range(len(list1)):\n        if not list1[i]:\n            list1_dit_empty.append(i)\n",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i.values():\n            return False\n        else:\n            return True\n",
        "num_ids": 29
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if len(list1[i])==0:\n            list2.append(i)\n    if len(list2)==0:\n        print(\"List of empty dictionaries\")\n    else:\n        print(\"List of dictionaries having elements are not empty\")\n    \n    \ndef count_emails(list1):\n    '''\n    Write a function to count the number of occurences of an email address in a list of strings.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if \"jovyan.mrt@gmail.com\" in list1[i]:\n            count+=1\n    print(\"The number of occurences of an email address in a list of strings is\",count)\n    \n    \ndef email_addresses(list1):\n    '''\n    Write a function to extract all email addresses from a list of strings.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if \"jovyan.mrt@gmail.com\" in list1[i]:\n            l.append(list1[i])\n    print(\"All email addresses in a list of strings are : \",l)\n    \n    \ndef is_emails(list1):\n    '''\n    Write a function to determine if a list of strings contains any emails.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if \"jovyan.mrt@gmail.com\" in list1[i]:\n            l.append(list1[i])\n    if len(l)==0:\n        print(\"List of strings contains no email addresses\")\n    else:\n        print(\"List of strings contains\",l,\"email addresses\")\n        \n    \ndef are_unique_emails(list1):\n    '''\n    Write a function to determine if a list of strings contains any duplicate emails.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if \"jovyan.mrt@gmail.com\" in list1[i]:\n            l.append(list1[i])\n    if len(l)==len(set(l)):\n        print(\"List of strings contains no duplicate emails\")\n    else:\n        print(\"List of strings contains\",len(set(l)),\"unique emails\")\n        \n    \ndef has_max_occurence(list1):\n    '''\n    Write a function to find the maximum occurence of an element in a list of strings.\n    '''\n    max_occurence=0\n    for i in range(len(list1)):\n        count=0\n        for j in range(len(list1[i])):\n            count+=1\n        if count>max_occurence:\n            max_occurence=count\n    print(\"The maximum occurence of an element in a list of strings is\",max_occurence)\n    \n    \ndef contains_same_emails(list1):\n    '''\n    Write a function to determine if a list of strings contains any email addresses that are duplicated.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if \"jovyan.mrt@gmail.com\" in list1[i]:\n            l.append(list1[i])\n    if len(l)>0:\n        print(\"List of strings contains\",len(set(l)),\"email addresses\")\n    else:\n        print(\"List of strings contains no email addresses\")\n        \n    \ndef count_distinct_emails(list1):\n    '''\n    Write a function to count the number of distinct email addresses in a list of strings.\n    '''\n    distinct_email_addresses=0\n    for i in range(len(list1)):\n        if \"jovyan.mrt@gmail.com\" in list1[i]:\n            distinct_email_addresses+=1\n    print(\"The number of distinct email addresses in a list of strings is\",distinct_email_addresses)\n    \n    \ndef contains_numbers(list1):\n    '''\n    Write a function to determine if a list of strings contains any numbers.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if any(char.isdigit() for char in list1[i]):\n            l.append(list1[i])\n    if len(l)==0:\n        print(\"List of strings contains no numbers\")\n    else:\n        print(\"List of strings contains\",len(l),\"numbers\")\n    \n    \ndef numbers_are_unique(list1):\n    '''\n    Write a function to determine if a list of strings contains any duplicate numbers.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if any(char.isdigit() for char in list1[i]):\n            l.append(list1[i])\n    if len(l)==len(set(l)):\n        print(\"List of strings contains no duplicate numbers\")\n    else:\n        print(\"List of strings contains\",len(set(l)),\"unique numbers\")\n        \n    \ndef contains_same_values(list1):\n    '''\n    Write a function to determine if a list of strings contains any strings that are the same.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!=j and list1[i]==list1[j]:\n                l.append(list1[j])\n    if len(l)==0:\n        print(\"List of strings does not contain any duplicate values\")\n    else:\n        print(\"List of strings contains\",len(l),\"duplicate values\")\n        \n    \ndef delete_duplicate_numbers(list1):\n    '''\n    Write a function to delete duplicate numbers in a list of strings.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if any(char.isdigit() for char in list1[i]):\n            l.append(list1[i])\n    duplicate_numbers=[]\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]==l[j]:\n                duplicate_numbers.append(l[i])\n    for i in range(len(duplicate_numbers)):\n        l.remove(duplicate_numbers[i])\n    print(\"List of strings after removing duplicate numbers\",l)\n    \n    \ndef find_unique_numbers(list1):\n    '''\n    Write a function to find the unique numbers in a list of strings.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if any(char.isdigit() for char in list1[i]):\n            l.append(list1[i])\n    unique_numbers=[]\n    for i in range(len(l)):\n        if l[i] not in unique_numbers:\n            unique_numbers.append(l[i])\n    print(\"List of strings after finding unique numbers\",unique_numbers)\n    \n    \ndef numbers_are_not_ascending(list1):\n    '''\n    Write a function to determine if any number in a list of strings is ascending in order.\n    '''\n    for i in range(len(list1)):\n        if int(list1[i])<int(list1[i-1]):\n            return False\n    return True\n    \n    \ndef numbers_are_not_descending(list1):\n    '''\n    Write a function to determine if any number in a list of strings is descending in order.\n    '''\n    for i in range(len(list1)):\n        if int(list1[i])>int(list1[i-1]):\n            return False\n    return True\n    \n    \ndef consecutive_numbers(list1):\n    '''\n    Write a function to determine if any number in a list of strings is consecutive with it's next number.\n    '''\n    for i in range(len(list1)):\n        if int(list1[i])+1==int(list1[i+1]):\n            return True\n    return False\n    \n    \ndef consecutive",
        "num_ids": 52
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 ==[]:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if len(x) == 0:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0, len(list1)):\n        if len(list1[i]) > 0:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)>0:\n        for element in list1:\n            if element.keys():\n                return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        print('All dictionaries are empty')\n        return True\n    else:\n        print('At least one dictionary is not empty')\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    # s = 0\n    # for i in nums:\n    #     s += i\n    # return s\n",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        raise TypeError(\"tuple_to_int: expected a tuple of positive integers, not {0}\".format(type(nums).__name__))\n    if any(n < 0 for n in nums):\n        raise ValueError(\"tuple_to_int: expected a tuple of positive integers, not {0}\".format(nums))\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 109
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    output = 0\n    for i in nums:\n        output = output * 10 + i\n    return output\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple of int into a single int\n    return int(str(sum(nums)))\n    ",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(num) for num in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(reduce(lambda x, y: str(x) + str(y), nums))\n",
        "num_ids": 27
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for lists in test_list:\n        for value in lists:\n            if type(value)!= float:\n                try:\n                    return_list.append(float(value))\n                except:\n                    pass\n    return return_list\n",
        "num_ids": 64
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = list(test_list)\n    for i in range(0, len(test_list)):\n        if type(test_list[i]) is int or type(test_list[i]) is float:\n            continue\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except:\n                test_list[i] = None\n    return test_list\n",
        "num_ids": 103
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        test_list[0][0] = float(test_list[0][0])\n        test_list[0][1] = float(test_list[0][1])\n        test_list[1][0] = float(test_list[1][0])\n        test_list[1][1] = float(test_list[1][1])\n        test_list[2][0] = float(test_list[2][0])\n        test_list[2][1] = float(test_list[2][1])\n        test_list[3][0] = float(test_list[3][0])\n        test_list[3][1] = float(test_list[3][1])\n        test_list[4][0] = float(test_list[4][0])\n        test_list[4][1] = float(test_list[4][1])\n        test_list[5][0] = float(test_list[5][0])\n        test_list[5][1] = float(test_list[5][1])\n        test_list[6][0] = float(test_list[6][0])\n        test_list[6][1] = float(test_list[6][1])\n        test_list[7][0] = float(test_list[7][0])\n        test_list[7][1] = float(test_list[7][1])\n        test_list[8][0] = float(test_list[8][0])\n        test_list[8][1] = float(test_list[8][1])\n        test_list[9][0] = float(test_list[9][0])\n        test_list[9][1] = float(test_list[9][1])\n        test_list[10][0] = float(test_list[10][0])\n        test_list[10][1] = float(test_list[10][1])\n        test_list[11][0] = float(test_list[11][0])\n        test_list[11][1] = float(test_list[11][1])\n        test_list[12][0] = float(test_list[12][0])\n        test_list[12][1] = float(test_list[12][1])\n        test_list[13][0] = float(test_list[13][0])\n        test_list[13][1] = float(test_list[13][1])\n        test_list[14][0] = float(test_list[14][0])\n        test_list[14][1] = float(test_list[14][1])\n        test_list[15][0] = float(test_list[15][0])\n        test_list[15][1] = float(test_list[15][1])\n        test_list[16][0] = float(test_list[16][0])\n        test_list[16][1] = float(test_list[16][1])\n        test_list[17][0] = float(test_list[17][0])\n        test_list[17][1] = float(test_list[17][1])\n        test_list[18][0] = float(test_list[18][0])\n        test_list[18][1] = float(test_list[18][1])\n        test_list[19][0] = float(test_list[19][0])\n        test_list[19][1] = float(test_list[19][1])\n        test_list[20][0] = float(test_list[20][0])\n        test_list[20][1] = float(test_list[20][1])\n        test_list[21][0] = float(test_list[21][0])\n        test_list[21][1] = float(test_list[21][1])\n        test_list[22][0] = float(test_list[22][0])\n        test_list[22][1] = float(test_list[22][1])\n        test_list[23][0] = float(test_list[23][0])\n        test_list[23][1] = float(test_list[23][1])\n        test_list[24][0] = float(test_list[24][0])\n        test_list[24][1] = float(test_list[24][1])\n        test_list[25][0] = float(test_list[25][0])\n        test_list[25][1] = float(test_list[25][1])\n        test_list[26][0] = float(test_list[26][0])\n        test_list[26][1] = float(test_list[26][1])\n        test_list[27][0] = float(test_list[27][0])\n        test_list[27][1] = float(test_list[27][1])\n        test_list[28][0] = float(test_list[28][0])\n        test_list[28][1] = float(test_list[28][1])\n        test_list[29][0] = float(test_list[29][0])\n        test_list[29][1] = float(test_list[29][1])\n        test_list[30][0] = float(test_list[30][0])\n        test_list[30][1] = float(test_list[30][1])\n        test_list[31][0] = float(test_list[31][0])\n        test_list[31][1] = float(test_list[31][1])\n        test_list[32][0] = float(test_list[32][0])\n        test_list[32][1] = float(test_list[32][1])\n        test_list[33][0] = float(test_list[33][0])\n        test_list[33][1] = float(test_list[33][1])\n        test_list[34][0] = float(test_list[34][0])\n        test_list[34][1] = float(test_list[34][1])\n        test_list[35][0] = float(test_list[35][0])\n        test_list[35][1] = float(test_list[35][1])\n        test_list[36][0] = float(test_list[36][0])\n        test_list[36][1] = float(test_list[36][1])\n        test_list[37][0] = float(test_list[37][0])\n        test_list[37][1] = float(test_list[37][1])\n        test_list[38][0] = float(test_list[38][0])\n        test_list[38][1] = float(test_list[38][1])\n        test_list[39][0] = float(test_list[39][0])\n        test_list[39][1] = float(test_list[39][1])\n        test_list[40][0] = float(test_list[40][0])\n        test_list[40][1] = float(test_list[40][1])\n        test_list[41][0] = float(test_list[41][0])\n        test_list[41][1] = float(test_list[41][1])\n        test_list[42][0] = float(test_list[42][0])\n        test_list[42][1] = float(test_list[42][1])\n        test_list[43][0] = float(test_list[43][0])\n        test_list[43][1] = float(test_list[43][1])\n        test_list[44][0] = float(test_list[44][0])\n        test_list[44][1] = float(test_list[44][1])\n        test_list[45][0] = float(test_list[45][0])\n        test_list[45][1] = float(test_list[45][1])\n        test_list[46][0] = float(test_list[46][0])\n        test_list[46][1] = float(test_list[46][1])\n        test_list[47][0] = float(test_list[47][0])\n        test_list[47][1] ",
        "num_ids": 2011
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list(map(float, test_list[i]))\n    return test_list\n",
        "num_ids": 44
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == int or type(test_list[i]) == float:\n            test_list[i] = float(test_list[i])\n    return test_list\n",
        "num_ids": 64
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = list(map(float, test_list[i]))\n    return test_list\n",
        "num_ids": 46
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            continue\n    return test_list\n",
        "num_ids": 52
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        temp = []\n        for j in range(len(test_list[i])):\n            if test_list[i][j].replace('.', '', 1).isdigit() or test_list[i][j].replace('.', '', 1).lower() == 'none':\n                temp.append(float(test_list[i][j]))\n            else:\n                temp.append(test_list[i][j])\n        return_list.append(temp)\n    return return_list\n",
        "num_ids": 141
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = np.array(test_list)\n    test_list = test_list.astype(np.float)\n    return test_list\n",
        "num_ids": 39
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n",
        "num_ids": 66
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_words = string.split(' ')\n    return list_of_words\n",
        "num_ids": 24
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_words = string.split()\n",
        "num_ids": 14
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_words = string.split(\" \")\n    return list_of_words\n",
        "num_ids": 24
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    temp = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]!= temp:\n            return temp\n        else:\n            temp = arr[i]\n    return temp\n",
        "num_ids": 55
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l=len(arr)\n    if l==0:\n        return -1\n    if l==1:\n        return arr[0]\n",
        "num_ids": 36
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n    if arr[0] == arr[1]:\n        return search(arr[1:])\n    else:\n        return arr[0]\n",
        "num_ids": 57
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == arr[mid+1]:\n            low += 1\n        elif arr[mid] == arr[mid-1]:\n            high -= 1\n        else:\n            if mid == 0 or arr[mid-1]!= arr[mid]:\n                return arr[mid]\n            else:\n                high = mid - 1\n    return -1\n",
        "num_ids": 119
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # find the pivot point of the array.\n    pivot = find_pivot(arr)\n    if pivot == -1:\n        return -1\n    # move the pivot to the end.\n    arr.sort(reverse=True)\n    return find_second_element(arr, pivot)\n",
        "num_ids": 71
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            arr.remove(arr[i])\n            return arr[i]\n",
        "num_ids": 45
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # if arr is empty\n    if not arr:\n        return -1\n    # if len(arr) is 1\n    if len(arr) == 1:\n        return arr[0]\n    # if len(arr) is 2\n    if len(arr) == 2:\n        return arr[0] if arr[0] < arr[1] else arr[1]\n    # if len(arr) is 3\n    if len(arr) == 3:\n        return arr[0] if arr[0] < arr[1] else arr[1]\n    \n    # binary search\n    first = 0\n    last = len(arr) - 1\n    while first <= last:\n        middle = (first + last) // 2\n        if arr[middle] == arr[middle + 1]:\n            return arr[middle]\n        elif arr[middle] < arr[middle + 1]:\n            first = middle + 1\n        else:\n            last = middle - 1\n    return arr[first]\n",
        "num_ids": 232
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    \n    for i in range(n):\n        if arr[i] == n:\n            return n\n        elif arr[i] == arr[i+1]:\n            return i\n    \n    return -1\n",
        "num_ids": 61
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    counter = 1\n    for i in range(0, len(arr)):\n        if arr[i]!= arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n            counter += 1\n    print(arr)\n    return arr[counter-1]\n",
        "num_ids": 79
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #since the sorted array is already sorted, we can compare the element with the first element of the array\n    #and only search for one element.\n    if arr[0]!= arr[1]:\n        return arr[0]\n    #since the array is sorted, we can search for a pair of consecutive elements\n    #to find the element that appears only once\n    for i in range(1,len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n",
        "num_ids": 120
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create list to store results\n    max_product = 0\n    # Create a variable to store results\n    max_abs_product = 0\n    # Loop through the list of tuples\n    for tuple_num in list1:\n        # Get the maximum and minimum numbers from the tuple\n        maximum = max(tuple_num)\n        minimum = min(tuple_num)\n        # Compare each to the previous maximum and minimum\n        if maximum > max_product:\n            max_product = maximum\n        if minimum < max_abs_product:\n            max_abs_product = minimum\n    # Return the maximum and minimum product\n    return (max_product, max_abs_product)\n",
        "num_ids": 159
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    else:\n        list1.sort(key = lambda x: x[0])\n        list1.sort(key = lambda x: x[1])\n        \n        max1 = max_product_tuple(list1[:len(list1)//2])\n        max2 = max_product_tuple(list1[len(list1)//2:])\n        return max(max1, max2)\n",
        "num_ids": 144
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1]))\n    return ans\n    \ndef max_product_tuple_multiple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a[i+2][1]))\n    return ans\n    \ndef max_product_tuple_multiple_method_1(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a[i+2][1]))\n    return ans\n    \ndef max_product_tuple_multiple_method_2(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a[i+2][1]))\n    return ans\n    \ndef max_product_tuple_multiple_method_3(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a[i+2][1])*abs(a[i+3][0]*a[i+3][1]))\n    return ans\n    \ndef max_product_tuple_multiple_method_4(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a[i+2][1])*abs(a[i+3][0]*a[i+3][1])*abs(a[i+4][0]*a[i+4][1]))\n    return ans\n    \ndef max_product_tuple_multiple_method_5(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a[i+2][1])*abs(a[i+3][0]*a[i+3][1])*abs(a[i+4][0]*a[i+4][1])*abs(a[i+5][0]*a[i+5][1]))\n    return ans\n    \ndef max_product_tuple_multiple_method_6(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a[i+2][1])*abs(a[i+3][0]*a[i+3][1])*abs(a[i+4][0]*a[i+4][1])*abs(a[i+5][0]*a[i+5][1])*abs(a[i+6][0]*a[i+6][1]))\n    return ans\n    \ndef max_product_tuple_multiple_method_7(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a[i+2][1])*abs(a[i+3][0]*a[i+3][1])*abs(a[i+4][0]*a[i+4][1])*abs(a[i+5][0]*a[i+5][1])*abs(a[i+6][0]*a[i+6][1])*abs(a[i+7][0]*a[i+7][1]))\n    return ans\n    \ndef max_product_tuple_multiple_method_8(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a[i+2][1])*abs(a[i+3][0]*a[i+3][1])*abs(a[i+4][0]*a[i+4][1])*abs(a[i+5][0]*a[i+5][1])*abs(a[i+6][0]*a[i+6][1])*abs(a[i+7][0]*a[i+7][1])*abs(a[i+8][0]*a[i+8][1]))\n    return ans\n    \ndef max_product_tuple_multiple_method_9(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a=[]\n    for i in list1:\n        a.append(i)\n    n=len(a)\n    ans=1\n    for i in range(0,n-1,2):\n        ans=max(ans,abs(a[i+1][0]*a[i+1][1])*abs(a[i+2][0]*a",
        "num_ids": 90
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x: x[0])\n    print(list1)\n    min_number = list1[0][0]\n    max_number = list1[0][1]\n    for i in range(len(list1)-1):\n        if list1[i][1] < min_number:\n            min_number = list1[i][1]\n        if list1[i][0] > max_number:\n            max_number = list1[i][0]\n    return max(min_number*max_number, min_number*list1[-1][0], list1[-1][1]*max_number)\n",
        "num_ids": 162
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            a = list1[i]\n            b = list1[j]\n            if a[0] * b[0] < 0:\n                product = a[0] * b[0]\n            else:\n                product = a[0] * b[0]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 125
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    max_product = list1[0][0]*list1[0][1]\n    max_product_pair = (list1[0][0], list1[0][1])\n",
        "num_ids": 53
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_list = []\n    for i in range(0,len(list1)):\n        if list1[i][0] > 0:\n            for j in range(i+1,len(list1)):\n                if list1[j][0] > 0:\n                    if max_product_list == [] or max_product_list[-1][0] * list1[i][1] * list1[j][1] < max_product_list[-1][0] * list1[i][1] * list1[j][1]:\n                        max_product_list.append([list1[i][1] * list1[j][1],list1[i][0] * list1[j][0]])\n",
        "num_ids": 176
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_value = 0\n    for i in range(len(list1)):\n        max_value = max(max_value, max_product_in_tuple(list1[i]))\n",
        "num_ids": 49
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)-1):\n        # try:\n        product = list1[i][1] * list1[i+1][1]\n        if product > max_product:\n            max_product = product\n        # except:\n        #     print(list1[i],list1[i+1])\n    return max_product\n",
        "num_ids": 95
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_number = 0\n    max_product_tuple = []\n    for index, x in enumerate(list1):\n        if index < len(list1) - 1:\n            y = list1[index + 1]\n            if max_product_number <= (x[0] * y[0]):\n                max_product_number = (x[0] * y[0])\n                max_product_tuple = [(x[0], y[0])]\n            elif max_product_number == (x[0] * y[0]):\n                max_product_tuple.append((x[0], y[0]))\n    if max_product_tuple == []:\n        return None\n    else:\n        return max_product_tuple\n    \n",
        "num_ids": 187
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    total = 0\n    for i in range(1, limit + 1):\n        temp = i\n        temp2 = i\n        for j in range(i, limit + 1):\n            if j == i:\n                continue\n            if j == temp2:\n                continue\n            if (temp + j) == j and (temp + j)!= temp:\n                sum += j\n                total += 1\n            temp2 = j\n",
        "num_ids": 105
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    summation = 0\n    for num in range(1, limit + 1):\n        amicable = []\n        for num2 in range(num + 1, limit + 1):\n            if sum(amicable) == num and sum(amicable)!= num:\n                amicable_numbers.append(num)\n            if sum(amicable) == num2 and sum(amicable)!= num2:\n                amicable_numbers.append(num2)\n            if num == num2:\n                continue\n            if num2 in amicable:\n                amicable.remove(num2)\n            if num not in amicable:\n                continue\n            else:\n                amicable.remove(num)\n    for number in amicable_numbers:\n        summation += number\n    return summation\n",
        "num_ids": 196
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    count = 0\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        for j in range(i):\n            if j == 1:\n                continue\n            if i == j:\n                continue\n            if (i + j) == i * j:\n                count += 1\n                result += i\n            if count > 1:\n                break\n    return result\n",
        "num_ids": 99
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = set()\n    for num in range(1, limit+1):\n        amicable_sum = sum(range(1, num))\n        if num!= amicable_sum:\n            continue\n        n = num\n        while num!= amicable_sum:\n            n = n - 1\n            amicable_sum = sum(range(1, n))\n            if num == amicable_sum:\n                amicables.add(num)\n                amicables.add(n)\n                break\n    return sum(amicables)\n",
        "num_ids": 128
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers_list = list(range(1, limit + 1))\n    amicable_numbers_list = []\n    for i, j in enumerate(numbers_list):\n        for k, l in enumerate(numbers_list[i:]):\n            if (j + l) == (l + j):\n                if (j + l) not in amicable_numbers_list:\n                    amicable_numbers_list.append(j + l)\n    return sum(amicable_numbers_list)\n",
        "num_ids": 124
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1,limit+1):\n        j = i\n        sum = 0\n        while(j!= i):\n            if(is_amicable(j) and is_amicable(sum)):\n                sum += j\n            j += 1\n        if(sum == i):\n            print(i,sum)\n            sum = 0\n",
        "num_ids": 90
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers_sum = 0\n    amicable_numbers = []\n",
        "num_ids": 19
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    targets = []\n    for i in range(1, limit):\n        for j in range(i+1, limit):\n            if j == sum(targets):\n                targets.append(i)\n                targets.append(j)\n                break\n            elif i == sum(targets):\n                targets.append(i)\n                targets.append(j)\n    sum += sum(targets)\n    return sum\n",
        "num_ids": 118
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = list()\n    for num in range(1, limit+1):\n        sum_divisor = 0\n        sum_sum = 0\n        for divisor in range(1, num+1):\n            if num % divisor == 0:\n                sum_divisor += divisor\n                if divisor!= num:\n                    sum_sum += divisor\n        if sum_sum == num and sum_divisor!= num:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n",
        "num_ids": 138
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    from math import sqrt\n    amicable_nums = []\n    for num in range(1, limit+1):\n        divisors = []\n        for i in range(1, int(sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n        for div in divisors:\n            if num-div == div:\n                amicable_nums.append(num)\n    sum_amicable_nums = sum(amicable_nums)\n    return sum_amicable_nums\n",
        "num_ids": 134
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a - b\n    m = cmath.polar(c)\n    radian = m[0]\n    degree = radian * 180 / cmath.pi\n    return degree\n",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return math.atan(complex(a,b))\n",
        "num_ids": 15
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(\"The angle of a complex number is\",\n          cmath.phase(complex(a,b))/cmath.pi*180)\n",
        "num_ids": 35
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    return cmath.phase(a+b)\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_angle = math.degrees(cmath.phase(a))\n    b_angle = math.degrees(cmath.phase(b))\n    return a_angle - b_angle\n",
        "num_ids": 48
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    if a.imag == 0:\n        if b.imag == 0:\n            return 0\n        else:\n            return cmath.phase(b)\n    elif b.imag == 0:\n        return cmath.phase(a)\n    else:\n        return cmath.phase(a/b)\n",
        "num_ids": 90
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    s = (a*b)/(abs(a)*abs(b))\n    c = cmath.phase(s)\n    return c\n",
        "num_ids": 51
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)/2\ndef main():\n    '''\n    Write a program to get a complex number from the user. Then, find the angle of this complex number.\n    '''\n    a = complex(input(\"enter the first number:\"))\n    b = complex(input(\"enter the second number:\"))\n    print(\"the angle is:\",angle_complex(a,b))\n",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a-b)\n",
        "num_ids": 14
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = []\n    n = len(string)\n    for i in range(n):\n        tmp = 0\n        for j in range(i,n):\n            if string[j] == '1':\n                tmp += 1\n            else:\n                tmp -= 1\n            if tmp >= 0:\n                break\n        if tmp >= 0:\n            res.append(tmp)\n    return max(res)\n",
        "num_ids": 97
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if abs(count_0 - count_1) > max_diff:\n            max_diff = abs(count_0 - count_1)\n    return max_diff\n",
        "num_ids": 96
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = 0\n    r = 0\n    count = 0\n    zero = 0\n    one = 0\n    max_diff = 0\n    while(r<len(string)):\n        if(string[r]==\"0\"):\n            zero+=1\n        else:\n            one+=1\n        max_diff = max(max_diff,zero-one)\n        count +=1\n        if (count == len(string)-r):\n            break\n        r+=1\n    return max_diff\n",
        "num_ids": 119
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    n0 = n1 = 0\n    if length == 0:\n        return 0\n    \n    for i in range(length):\n        if string[i] == '0':\n            n0 += 1\n        else:\n            n1 += 1\n    max_diff = abs(n0 - n1)\n    for i in range(length-1):\n        if string[i] == '0':\n            n0 -= 1\n        else:\n            n1 -= 1\n        max_diff = max(max_diff, abs(n0 - n1))\n    return max_diff\n",
        "num_ids": 146
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    max_diff = 0\n    \n    for i in range(1, len(string)):\n        if string[i] == '0':\n            if string[i - 1] == '0':\n                continue\n            elif string[i - 1] == '1':\n                diff = i - i - 1\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n",
        "num_ids": 99
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    for i in range(n):\n        if (string[i] == '1'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n    \n    return mx\n    \ndef find_length_1(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    for i in range(n):\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n    \n    return mx\n    \ndef find_length_2(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 1\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_3(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 0\n    while i < n:\n        if (string[i] == '1'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_4(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 0\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_5(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 1\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_6(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 1\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_7(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 1\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_8(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 0\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_9(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 0\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_10(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 1\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_11(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 1\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_12(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 0\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_13(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 0\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n            st = st - 1\n        \n        if st > mx:\n            mx = st\n        i += 1\n    \n    return mx\n    \ndef find_length_14(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    st = 0\n    mx = 0\n    i = 0\n    while i < n:\n        if (string[i] == '0'):\n            st = st + 1\n        else:\n        ",
        "num_ids": 57
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count = 0\n    string_length = len(string)\n",
        "num_ids": 19
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    # This array will keep track of the length of the string after removing the leading zeros.\n    l_zeros = []\n    # This array will keep track of the length of the string after removing the trailing zeros.\n    r_zeros = []\n    # Store the length of l_zeros and r_zeros\n    l_zeros.append(0)\n    r_zeros.append(0)\n    # Store the length of l_zeros and r_zeros before removing the leading zeros.\n    l_zeros_pre = 0\n    r_zeros_pre = 0\n",
        "num_ids": 148
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    left, right = 0, 0\n    while right < len(string):\n        substring = string[left:right]\n        zero, one = substring.count('0'), substring.count('1')\n        diff = abs(zero - one)\n        if diff > result:\n            result = diff\n        left += 1\n        right += 1\n    return result\n",
        "num_ids": 92
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def count_zero_one(string):\n        count_0, count_1 = 0, 0\n        for x in string:\n            if x == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n        return count_0, count_1\n",
        "num_ids": 69
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 1\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            c = c * i\n    print(\"Sum of two numbers is \", c)\n",
        "num_ids": 54
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list1 = []\n    for i in range(1,a+1):\n        if a % i == 0:\n            list1.append(i)\n    for i in range(1,b+1):\n        if b % i == 0:\n            list1.append(i)\n    list1.sort()\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n    \ndef fakt(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    fact = 1\n    if n == 0 or n == 1:\n        fact = 1\n    else:\n        for i in range(2,n+1):\n            fact = fact * i\n    return fact\n    \ndef sumOfDigits(num):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    return sum(int(x) for x in str(num))\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of a and b.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n",
        "num_ids": 29
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    c = math.gcd(a,b)\n    return a+b-c\n",
        "num_ids": 27
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum=[]\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            sum.append(i)\n    sum.sort()\n    print(sum)\n",
        "num_ids": 55
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            c.append(i)\n    print(\"Sum of common divisors of two numbers =\",sum(c))\n",
        "num_ids": 62
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    l =[]\n    for i in range(1,a+1):\n        if a%i ==0 and b%i==0:\n            l.append(i)\n    return sum(l)\n    \n",
        "num_ids": 68
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    while i<=b:\n        if a%i==0 and b%i==0:\n            c = a/i + b/i\n            break\n        i = i+1\n    return int(c)\n",
        "num_ids": 58
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    d1 = []\n    d2 = []\n    for i in range(1,a+1):\n        if a % i == 0:\n            d1.append(i)\n    for i in range(1,b+1):\n        if b % i == 0:\n            d2.append(i)\n    \n    common_divisors = list(set(d1) & set(d2))\n    result = 0\n    for i in common_divisors:\n        result = result + i\n    \n    return result\n",
        "num_ids": 128
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=[]\n    if (a == b):\n        c.append(a)\n        print (c)\n        return 0\n    else:\n        for i in range(1,a+1):\n            if (a % i == 0) and (b % i == 0):\n                c.append(i)\n        print (c)\n        return sum(a,b)\nsum(25,20)",
        "num_ids": 97
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = [i for i in range(1,a+1) if a%i == 0 and b%i == 0]\n    sum_ = 0\n    for j in c:\n        sum_ += j\n    return sum_\n",
        "num_ids": 56
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(f'{x} * {y} = {x * y}')\n",
        "num_ids": 22
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    my_str = []\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            my_str.append(str[i])\n    return my_str\nprint(long_words(3, [\"Python\", \"Java\", \"Php\", \"JavaScript\", \"Python\"]))\n",
        "num_ids": 78
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    final_list = []\n    for word in str:\n        if len(word) > n:\n            final_list.append(word)\n    return final_list\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) >= n:\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for i in range(len(str)):\n        for j in range(len(str[i])):\n            if len(str[i]) > n:\n                words.append(str[i])\n    return words\n",
        "num_ids": 59
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return list(filter(lambda word: len(word)>n, str))\n",
        "num_ids": 21
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(' ') if len(word) > n]\n",
        "num_ids": 24
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word)>n]\n",
        "num_ids": 22
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = 0\n    for i in range(len(my_matrix)):\n        # print(my_matrix[i])\n        if len(my_matrix[i])!= len(my_matrix):\n            print('Matrix is not square')\n            return\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= 1 and my_matrix[i][j]!= 0:\n                print('Matrix is not magic square')\n                return\n    print('Matrix is a magic square')\n",
        "num_ids": 136
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    length = len(my_matrix)\n    # Check if all numbers in row are equal\n    for row in range(length):\n        if len(my_matrix[row])!= length:\n            return False\n        for val in my_matrix[row]:\n            if val!= my_matrix[row][0]:\n                return False\n",
        "num_ids": 84
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return magic_square_helper(my_matrix, 0)\n",
        "num_ids": 19
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 0:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def is_magic_square(matrix):\n        if len(matrix)!= len(matrix[0]):\n            return False\n        if len(matrix)!= (len(matrix[0]) * len(matrix)):\n            return False\n        for i in range(len(matrix)):\n            count = 0\n            for j in range(len(matrix[i])):\n                if matrix[i][j]!= matrix[j][i]:\n                    count += 1\n            if count > 1:\n                return False\n        for i in range(len(matrix)):\n            count = 0\n            for j in range(len(matrix[i])):\n                if matrix[j][i]!= matrix[i][j]:\n                    count += 1\n            if count > 1:\n                return False\n        return True\n    if is_magic_square(my_matrix):\n        return \"Yes\"\n    return \"No\"\n",
        "num_ids": 225
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    if not isinstance(my_matrix, list) or len(my_matrix) == 0:\n        return False\n    \n    if any(not isinstance(row, list) for row in my_matrix):\n        return False\n    \n    for row in my_matrix:\n        if any(not isinstance(el, int) for el in row):\n            return False\n    \n    if any(len(row)!= len(my_matrix) for row in my_matrix):\n        return False\n    \n    if len(my_matrix)!= len(set(sum(my_matrix, []))):\n        return False\n    \n    my_sum = sum(my_matrix, [])\n    my_set = set(my_sum)\n    \n    if any(el > 1 for el in my_set):\n        return False\n    \n    def check_rows(my_matrix):\n        for i in range(len(my_matrix)):\n            if sum(my_matrix[i])!= my_sum[i]:\n                return False\n        return True\n    \n    def check_columns(my_matrix):\n        for i in range(len(my_matrix)):\n            col = [row[i] for row in my_matrix]\n            if sum(col)!= my_sum[i]:\n                return False\n        return True\n    \n    def check_diagonals(my_matrix):\n        for i in range(len(my_matrix)):\n            diagonal_left = []\n            diagonal_right = []\n            \n            for j in range(len(my_matrix)):\n                if i == j:\n                    diagonal_left.append(my_matrix[i][j])\n                \n                if i+j == len(my_matrix)-1:\n                    diagonal_right.append(my_matrix[i][j])\n            \n            if sum(diagonal_left)!= my_sum[i]:\n                return False\n            if sum(diagonal_right)!= my_sum[i]:\n                return False\n        return True\n    \n    return check_rows(my_matrix) and check_columns(my_matrix) and check_diagonals(my_matrix)\n",
        "num_ids": 542
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #print(\"my_matrix = \",my_matrix)\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    for j in range(len(my_matrix)):\n        if len(my_matrix)!= len(my_matrix[j]):\n            return False\n    \n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    for j in range(len(my_matrix)):\n        if len(my_matrix)!= len(my_matrix[j]):\n            return False\n",
        "num_ids": 154
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row = len(my_matrix)\n    col = len(my_matrix[0])\n    nums = []\n    for i in range(row):\n        nums.append([0]*col)\n    for i in range(row):\n        for j in range(col):\n            nums[i][j] = my_matrix[i][j]\n    return check_magic(nums)\n    \n",
        "num_ids": 102
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    n = len(my_matrix)\n    if n > 1:\n        for i in range(0, n):\n            for j in range(0, n):\n                if i!= j:\n                    if my_matrix[i][j]!= my_matrix[j][i]:\n                        return False\n        \n        # check rows\n        for i in range(0, n):\n            s = 0\n            for j in range(0, n):\n                s += my_matrix[i][j]\n            if s!= n*n:\n                return False\n        # check columns\n        for i in range(0, n):\n            s = 0\n            for j in range(0, n):\n                s += my_matrix[j][i]\n            if s!= n*n:\n                return False\n        \n        # check diagonals\n        s = 0\n        for i in range(0, n):\n            s += my_matrix[i][i]\n        if s!= n*n:\n            return False\n        \n        s = 0\n        for i in range(0, n):\n            s += my_matrix[i][n-i-1]\n        if s!= n*n:\n            return False\n        \n    else:\n        return False\n    \n    return True\n",
        "num_ids": 316
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not type(my_matrix) == list:\n        return False\n    if not len(my_matrix) == 5:\n        return False\n    for row in my_matrix:\n        if not type(row) == list:\n            return False\n        if len(row)!= 5:\n            return False\n        for i in row:\n            if not type(i) == int:\n                return False\n    # Test 1\n    for i in range(0,5):\n        count = 0\n        for j in range(0,5):\n            if my_matrix[i][j] == 1:\n                count += 1\n        if count!= 1:\n            return False\n    # Test 2\n    for i in range(0,5):\n        count = 0\n        for j in range(0,5):\n            if my_matrix[j][i] == 1:\n                count += 1\n        if count!= 1:\n            return False\n    # Test 3\n    count = 0\n    for i in range(0,5):\n        if my_matrix[i][i] == 1:\n            count += 1\n    if count!= 1:\n        return False\n    # Test 4\n    count = 0\n    for i in range(0,5):\n        if my_matrix[i][4-i] == 1:\n            count += 1\n    if count!= 1:\n        return False\n    return True\n",
        "num_ids": 339
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_value = -float('inf')\n    max_key = None\n    for i in nums:\n        d[i] += 1\n        if d[i] > max_value:\n            max_value = d[i]\n            max_key = i\n    return max_key\n",
        "num_ids": 80
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = -1\n    max_element = None\n",
        "num_ids": 27
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    # If number of occurrences is same, then return the first number\n    if len(nums) <= 1:\n        return nums[0]\n    \n    # Create a default dictionary\n    d = defaultdict(int)\n    \n    # Traverse through the array\n    for num in nums:\n        # Increment the count of the current number by 1\n        d[num] += 1\n        \n        # If the count of the current number is max, then return the current number\n        if d[num] == d[num]:\n            return num\n",
        "num_ids": 131
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    m = max(d.values())\n    for k, v in d.items():\n        if v == m:\n            return k\n",
        "num_ids": 59
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    d = defaultdict(int)\n    max_count = 0\n    for i in nums:\n        d[i] += 1\n        if d[i] > max_count:\n            max_count = d[i]\n    for k, v in d.items():\n        if v == max_count:\n            return k\n",
        "num_ids": 91
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_num, max_num_count = float('-inf'), 0\n    for num in nums:\n        if num == max_num:\n            max_num_count += 1\n        elif num > max_num:\n            max_num = num\n            max_num_count = 1\n    return max_num, max_num_count\n",
        "num_ids": 84
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # temp = defaultdict(int)\n    # temp[nums[0]] = 1\n    # for i in range(len(nums)):\n    #     temp[nums[i]] += 1\n    # for i in temp:\n    #     if temp[i] > temp[max(temp, key = temp.get)]:\n    #         max_value = i\n    # return max_value\n    d = {}\n    for n in nums:\n        if n in d:\n            d[n] += 1\n        else:\n            d[n] = 1\n    m = max(d.values())\n    for n in d:\n        if d[n] == m:\n            return n\n",
        "num_ids": 169
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(lambda: 0)\n    for num in nums:\n        occurrences[num] += 1\n    \n    max_occur = max(occurrences.values())\n    for num in occurrences.keys():\n        if occurrences[num] == max_occur:\n            return num\n",
        "num_ids": 76
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    mydict = defaultdict(int)\n    for n in nums:\n        mydict[n] += 1\n    max_val = max(mydict.values())\n    max_keys = []\n    for k,v in mydict.items():\n        if v == max_val:\n            max_keys.append(k)\n    return max_keys\n",
        "num_ids": 86
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    # print(counts)\n    max_count = max(counts.values())\n    return [key for key, val in counts.items() if val == max_count]\n",
        "num_ids": 71
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new = str1.lower()\n    i=0\n    j=len(new)-1\n    while i < j:\n        if new[i] not in 'aeiou':\n            i+=1\n        elif new[j] not in 'aeiou':\n            j-=1\n        else:\n            new = new[:i]+new[j]+new[i+1:j]+new[i]+new[j+1:]\n            i+=1\n            j-=1\n    return new\n",
        "num_ids": 122
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    new_str = \"\"\n    for i in str1:\n        if i not in vowels:\n            new_str += i\n        else:\n            new_str += i\n    return new_str\n",
        "num_ids": 61
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for letter in str1:\n        if letter not in vowels:\n            reversed_str = reversed_str + letter\n        else:\n            reversed_str = reversed_str + letter\n    return reversed_str\n",
        "num_ids": 78
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str2 = str2 + str1[len(str1) - i - 1]\n        else:\n            str2 = str2 + str1[i]\n    return str2\n",
        "num_ids": 112
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    str2 = []\n    str1 = list(str1)\n    for x in str1:\n        if x in vowels:\n            str2.append(x)\n            str1.remove(x)\n    return \"\".join(str2)\n",
        "num_ids": 81
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_string = ''\n    for c in str1:\n        if c not in vowels:\n            new_string = new_string + c\n        else:\n            new_string = new_string + c[::-1]\n    return new_string\n",
        "num_ids": 99
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_str = []\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_str.append(str1[i])\n    return \"\".join(new_str)\n",
        "num_ids": 95
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            result += char\n        else:\n            result += char.upper()\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Step 1: Get the vowel list\n    vowels = ['a','e','i','o','u','A','E','I','O','U','y']\n    # Step 2: Use the vowel list to reverse the vowels\n    vowels_rev = vowels[::-1]\n    # Step 3: Use the list to replace the vowels\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1 = str1[:i] + vowels_rev[vowels_rev.index(str1[i])] + str1[i + 1:]\n    return str1\n",
        "num_ids": 154
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    a = []\n    for i in str1:\n        if i.lower() not in vowels:\n            a.append(i)\n    return \"\".join(a)\n",
        "num_ids": 82
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = \"\".join(tup1)\n    return tup_str\n",
        "num_ids": 24
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = \"\"\n    for i in range(len(tup1)):\n        str += str(tup1[i]) + \" \"\n    return str\n",
        "num_ids": 40
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))\n",
        "num_ids": 17
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return (str(tup1))\n",
        "num_ids": 12
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for i in nums:\n        if i < 0:\n            sum_neg += i\n    return sum_neg\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            nums[i] = nums[i] * -1\n    return sum(nums)\n        \nprint(sum_negativenum([-1,1,-1,1]))\n",
        "num_ids": 72
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    if len(nums) == 0:\n        return 0\n    \n    result = 0\n    i = 0\n    \n    while i < len(nums):\n        if nums[i] < 0:\n            result += nums[i]\n        i += 1\n        \n    return result\n    \nprint(sum_negativenum([-1, -2])) # 1\nprint(sum_negativenum([-1, -2, -3])) # -1\nprint(sum_negativenum([1, -2])) # 1\nprint(sum_negativenum([-1, -2, -3, -4])) # -1\nprint(sum_negativenum([1, -2, -3, -4])) # -1\nprint(sum_negativenum([])) # 0\nprint(sum_negativenum([-1, -2, -3, -4, -5, -6])) # -3\nprint(sum_negativenum([0, 0, -2, -3, -4, -5, -6])) # -3\nprint(sum_negativenum([-1, -2, -3, -4, -5, -6, -7])) # -1\nprint(sum_negativenum([-5, -4, -3, -2, -1, 0, 0, 1, 2, 3, 4, 5])) # -11\nprint(sum_negativenum([-5, -4, -3, -2, -1, 0, 0, 1, 2, 3, 4, 5, -6])) # -15\nprint(sum_negativenum([-6, -5, -4, -3, -2, -1, 0, 0, 1, 2, 3, 4, 5, -6])) # -1\nprint(sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25])) # -1\n",
        "num_ids": 528
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for x in nums:\n        if x<0:\n            s += x\n    return s\nprint(sum_negativenum([-1,1,-2,3,-3,5]))\n",
        "num_ids": 55
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(i for i in nums if i < 0)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    ans = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            ans += nums[i]\n    return ans\n",
        "num_ids": 44
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # this is a brute force solution.\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n    \n    \n    \n    \n    \ndef count_pairs(nums):\n    '''\n    Write a function to count number of pairs whose sum is equal to 0.\n    '''\n    nums.sort()\n    count = 0\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if nums[i]+nums[j] == 0:\n                count += 1\n    return count\n    \ndef solution():\n    '''\n    Write a function to find the maximal possible value of x that satisfies the following conditions:\n    * x is divisible by 2.\n    * x + 1 is divisible by 3.\n    * x + 2 is divisible by 5.\n    * x + 3 is divisible by 7.\n    * x + 4 is divisible by 11.\n    * x + 5 is divisible by 13.\n    * x + 6 is divisible by 17.\n    * x + 7 is divisible by 19.\n    * x + 8 is divisible by 23.\n    * x + 9 is divisible by 29.\n    * x + 10 is divisible by 31.\n    * x + 11 is divisible by 37.\n    * x + 12 is divisible by 41.\n    * x + 13 is divisible by 43.\n    * x + 14 is divisible by 47.\n    * x + 15 is divisible by 53.\n    * x + 16 is divisible by 59.\n    * x + 17 is divisible by 61.\n    * x + 18 is divisible by 67.\n    * x + 19 is divisible by 71.\n    * x + 20 is divisible by 73.\n    * x + 21 is divisible by 79.\n    * x + 22 is divisible by 83.\n    * x + 23 is divisible by 89.\n    * x + 24 is divisible by 97.\n    * x + 25 is divisible by 101.\n    * x + 26 is divisible by 103.\n    * x + 27 is divisible by 107.\n    * x + 28 is divisible by 109.\n    * x + 29 is divisible by 113.\n    * x + 30 is divisible by 127.\n    * x + 31 is divisible by 131.\n    * x + 32 is divisible by 137.\n    * x + 33 is divisible by 139.\n    * x + 34 is divisible by 149.\n    * x + 35 is divisible by 151.\n    * x + 36 is divisible by 157.\n    * x + 37 is divisible by 163.\n    * x + 38 is divisible by 167.\n    * x + 39 is divisible by 173.\n    * x + 40 is divisible by 179.\n    * x + 41 is divisible by 181.\n    * x + 42 is divisible by 191.\n    * x + 43 is divisible by 193.\n    * x + 44 is divisible by 197.\n    * x + 45 is divisible by 199.\n    * x + 46 is divisible by 211.\n    * x + 47 is divisible by 223.\n    * x + 48 is divisible by 227.\n    * x + 49 is divisible by 229.\n    * x + 50 is divisible by 233.\n    * x + 51 is divisible by 239.\n    * x + 52 is divisible by 241.\n    * x + 53 is divisible by 251.\n    * x + 54 is divisible by 257.\n    * x + 55 is divisible by 263.\n    * x + 56 is divisible by 269.\n    * x + 57 is divisible by 271.\n    * x + 58 is divisible by 277.\n    * x + 59 is divisible by 281.\n    * x + 60 is divisible by 283.\n    * x + 61 is divisible by 293.\n    * x + 62 is divisible by 307.\n    * x + 63 is divisible by 311.\n    * x + 64 is divisible by 313.\n    * x + 65 is divisible by 317.\n    * x + 66 is divisible by 319.\n    * x + 67 is divisible by 323.\n    * x + 68 is divisible by 329.\n    * x + 69 is divisible by 331.\n    * x + 70 is divisible by 337.\n    * x + 71 is divisible by 347.\n    * x + 72 is divisible by 349.\n    * x + 73 is divisible by 353.\n    * x + 74 is divisible by 359.\n    * x + 75 is divisible by 367.\n    * x + 76 is divisible by 373.\n    * x + 77 is divisible by 379.\n    * x + 78 is divisible by 383.\n    * x + 79 is divisible by 389.\n    * x + 80 is divisible by 397.\n    * x + 81 is divisible by 401.\n    * x + 82 is divisible by 409.\n    * x + 83 is divisible by 419.\n    * x + 84 is divisible by 421.\n    * x + 85 is divisible by 431.\n    * x + 86 is divisible by 433.\n    * x + 87 is divisible by 439.\n    * x + 88 is divisible by 443.\n    * x + 89 is divisible by 449.\n    * x + 90 is divisible by 457.\n    * x + 91 is divisible by 461.\n    * x + 92 is divisible by 463.\n    * x + 93 is divisible by 467.\n    * x + 94 is divisible by 479.\n    * x + 95 is divisible by 487.\n    * x + 96 is divisible by 491.\n    * x + 97 is divisible by 499.\n    * x + 98 is divisible by 503.\n    * x + 99 is divisible by 509.\n    * x + 100 is divisible by 511.\n    * x + 101 is divisible by 523.\n    * x + 102 is divisible by 541.\n    * x + 103 is divisible by 547.\n    * x + 104 is divisible by 557.\n    * x + 105 is divisible by 563.\n    * x + 106 is divisible by 569.\n    * x + 107 is divisible by 571.\n    * x + 108 is divisible by 577.\n    * x + 109 is divisible by 581.\n    * x + 110 is divisible by 591.\n    * x + 111 is divisible by 593.\n    * x + 112 is divisible by 599.\n    * x + 113 is divisible by 601.\n    * x + 114 is divisible by 607.\n    * x + 115 is divisible by 613.\n    * x + 116 is divisible by 619.\n    * x + 117 is divisible by 631.\n    * x + 118 is divisible by 641.\n    * x + 119 is divisible by 647.\n    * x + 120 is divisible by 653.\n    * x + 121 is divisible by 659.\n    * x + 122 is divisible by 661.\n    * x + 123 is divisible by 673.\n    * x + 124 is divisible by 677.\n    * x + 125 is divisible by 679.\n    * x + 126 is divisible by 683.\n    * x + 127 is divisible by 691.\n    * x + 128 is divisible by 701.\n    * x + 129 is divisible by 709.\n    * x + 130 is divisible by 719.\n    * x + 131 is divisible by 733.\n    * x + 132 is divisible by 739.\n    * x + 133 is divisible by 743.\n    * x + 134 is divisible by 751.\n    * x + 135 is divisible by 757.\n    * x + 136 is divisible by 761.\n    * x + 137 is divisible by 769.\n    * x + 138 is divisible by 773.\n    * x + 139 is divisible by 777.\n    * x + 140 is divisible by 781.\n    * x + 141 is divisible by 791.\n    * x + 142 is divisible by 793.\n    * x + 143 is divisible by 797.\n    * x + 144 is divisible by 801.\n    * x + 145 is divisible by 809.\n    * x + 146 is divisible by 821.\n    * x + 147 is divisible by 827.\n    * x + 148 is di",
        "num_ids": 1858
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            s += nums[i]\n    return s\n",
        "num_ids": 46
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for x in nums:\n        if x < 0:\n            result += x\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 0\n    while (num*2)**2 < n:\n        num += 1\n    return num*2**(1/3)\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 1\n    while n!= 0:\n        n = n - 1\n        num = (num*3) - 2\n        \n    return num\n",
        "num_ids": 39
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 6*n**2 - 3*n + 2\n    return num\n",
        "num_ids": 21
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n * (2*n - 1) + (n-1)\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    if n == 3: \n        return 5\n    if n == 4: \n        return 7\n    if n == 5: \n        return 9\n    if n == 6: \n        return 11\n    if n == 7: \n        return 13\n    if n == 8: \n        return 15\n    if n == 9: \n        return 17\n    if n == 10: \n        return 19\n    if n == 11: \n        return 21\n    if n == 12: \n        return 23\n    if n == 13: \n        return 25\n    if n == 14: \n        return 27\n    if n == 15: \n        return 29\n    if n == 16: \n        return 31\n    if n == 17: \n        return 33\n    if n == 18: \n        return 35\n    if n == 19: \n        return 37\n    if n == 20: \n        return 39\n    if n == 21: \n        return 41\n    if n == 22: \n        return 43\n    if n == 23: \n        return 45\n    if n == 24: \n        return 47\n    if n == 25: \n        return 49\n    if n == 26: \n        return 51\n    if n == 27: \n        return 53\n    if n == 28: \n        return 55\n    if n == 29: \n        return 57\n    if n == 30: \n        return 59\n    if n == 31: \n        return 61\n    if n == 32: \n        return 63\n    if n == 33: \n        return 65\n    if n == 34: \n        return 67\n    if n == 35: \n        return 69\n    if n == 36: \n        return 71\n    if n == 37: \n        return 73\n    if n == 38: \n        return 75\n    if n == 39: \n        return 77\n    if n == 40: \n        return 79\n    if n == 41: \n        return 81\n    if n == 42: \n        return 83\n    if n == 43: \n        return 85\n    if n == 44: \n        return 87\n    if n == 45: \n        return 89\n    if n == 46: \n        return 91\n    if n == 47: \n        return 93\n    if n == 48: \n        return 95\n    if n == 49: \n        return 97\n    if n == 50: \n        return 99\n    if n == 51: \n        return 101\n    if n == 52: \n        return 103\n    if n == 53: \n        return 105\n    if n == 54: \n        return 107\n    if n == 55: \n        return 109\n    if n == 56: \n        return 111\n    if n == 57: \n        return 113\n    if n == 58: \n        return 115\n    if n == 59: \n        return 117\n    if n == 60: \n        return 119\n    if n == 61: \n        return 121\n    if n == 62: \n        return 123\n    if n == 63: \n        return 125\n    if n == 64: \n        return 127\n    if n == 65: \n        return 129\n    if n == 66: \n        return 131\n    if n == 67: \n        return 133\n    if n == 68: \n        return 135\n    if n == 69: \n        return 137\n    if n == 70: \n        return 139\n    if n == 71: \n        return 141\n    if n == 72: \n        return 143\n    if n == 73: \n        return 145\n    if n == 74: \n        return 147\n    if n == 75: \n        return 149\n    if n == 76: \n        return 151\n    if n == 77: \n        return 153\n    if n == 78: \n        return 155\n    if n == 79: \n        return 157\n    if n == 80: \n        return 159\n    if n == 81: \n        return 161\n    if n == 82: \n        return 163\n    if n == 83: \n        return 165\n    if n == 84: \n        return 167\n    if n == 85: \n        return 169\n    if n == 86: \n        return 171\n    if n == 87: \n        return 173\n    if n == 88: \n        return 175\n    if n == 89: \n        return 177\n    if n == 90: \n        return 179\n    if n == 91: \n        return 181\n    if n == 92: \n        return 183\n    if n == 93: \n        return 185\n    if n == 94: \n        return 187\n    if n == 95: \n        return 189\n    if n == 96: \n        return 191\n    if n == 97: \n        return 193\n    if n == 98: \n        return 195\n    if n == 99: \n        return 197\n    if n == 100: \n        return 199\n    if n == 101: \n        return 201\n    if n == 102: \n        return 203\n    if n == 103: \n        return 205\n    if n == 104: \n        return 207\n    if n == 105: \n        return 209\n    if n == 106: \n        return 211\n    if n == 107: \n        return 213\n    if n == 108: \n        return 215\n    if n == 109: \n        return 217\n    if n == 110: \n        return 219\n    if n == 111: \n        return 221\n    if n == 112: \n        return 223\n    if n == 113: \n        return 225\n    if n == 114: \n        return 227\n    if n == 115: \n        return 229\n    if n == 116: \n        return 231\n    if n == 117: \n        return 233\n    if n == 118: \n        return 235\n    if n == 119: \n        return 237\n    if n == 120: \n        return 239\n    if n == 121: \n        return 241\n    if n == 122: \n        return 243\n    if n == 123: \n        return 245\n    if n == 124: \n        return 247\n    if n == 125: \n        return 249\n    if n == 126: \n        return 251\n    if n == 127: \n        return 253\n    if n == 128: \n        return 255\n    if n == 129: \n        return 257\n    if n == 130: \n        return 259\n    if n == 131: \n        return 261\n    if n == 132: \n        return 263\n    if n == 133: \n        return 265\n    if n == 134: \n        return 267\n    if n == 135: \n        return 269\n    if n == 136: \n        return 271\n    if n == 137: \n        return 273\n    if n == 138: \n        return 275\n    if n == 139: \n        return 277\n    if n == 140: \n        return 279\n    if n == 141: \n        return 281\n    if n == 142: \n        return 283\n    if n == 143: \n        return 285\n    if n == 144: \n        return 287\n    if n == 145: \n        return 289\n    if n == 146: \n        return 291\n    if n == 147: \n        return 293\n    if n == 148: \n        return 295\n    if n == 149: \n        return 297\n    if n == 150: \n        return 299\n    if n == 151: \n        return 301\n    if n == 152: \n        return 303\n    if n == 153: \n        return 305\n    if n == 154: \n        return 307\n    if n == 155: \n        return 309\n    if n == 156: \n        return 311\n    if n == 157: \n        return 313\n    if n == 158: \n        return 315\n    if n == 159: \n        return 317\n    if n == 160: \n        return 319\n    if n == 161: \n        return 321\n    if n == 162: \n        return 323\n    if n == 163: \n        return 325\n    if n == 164: \n        return 327\n    if n == 165: \n        return 329\n    if n == 166: \n        return 331\n    if n == 167: \n        return 333",
        "num_ids": 2017
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 3\n    \n    if n == 3:\n        return 7\n    \n    i = 4\n    while i <= n:\n        i *= 6\n    \n    return (i - (n - 1) * 6) + 7\n",
        "num_ids": 98
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n*(n+1)-1)//2\n",
        "num_ids": 19
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n * (2 * n - 1) / 2)\n",
        "num_ids": 19
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-1)\n    \n    \ndef hexagonal_num2(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-3)\n    \n    \ndef hexagonal_num3(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-5)\n    \n    \ndef hexagonal_num4(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-7)\n    \n    \ndef hexagonal_num5(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-9)\n    \n    \ndef hexagonal_num6(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-11)\n    \n    \ndef hexagonal_num7(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-13)\n    \n    \ndef hexagonal_num8(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-15)\n    \n    \ndef hexagonal_num9(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-17)\n    \n    \ndef hexagonal_num10(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-19)\n    \n    \ndef hexagonal_num11(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-21)\n    \n    \ndef hexagonal_num12(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-23)\n    \n    \ndef hexagonal_num13(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-25)\n    \n    \ndef hexagonal_num14(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-27)\n    \n    \ndef hexagonal_num15(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-29)\n    \n    \ndef hexagonal_num16(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-31)\n    \n    \ndef hexagonal_num17(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-33)\n    \n    \ndef hexagonal_num18(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-35)\n    \n    \ndef hexagonal_num19(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-37)\n    \n    \ndef hexagonal_num20(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-39)\n    \n    \ndef hexagonal_num21(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-41)\n    \n    \ndef hexagonal_num22(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-43)\n    \n    \ndef hexagonal_num23(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-45)\n    \n    \ndef hexagonal_num24(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-47)\n    \n    \ndef hexagonal_num25(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-49)\n    \n    \ndef hexagonal_num26(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-51)\n    \n    \ndef hexagonal_num27(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-53)\n    \n    \ndef hexagonal_num28(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-55)\n    \n    \ndef hexagonal_num29(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-57)\n    \n    \ndef hexagonal_num30(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-59)\n    \n    \ndef hexagonal_num31(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-61)\n    \n    \ndef hexagonal_num32(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-63)\n    \n    \ndef hexagonal_num33(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-65)\n    \n    \ndef hexagonal_num34(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-67)\n    \n    \ndef hexagonal_num35(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-69)\n    \n    \ndef hexagonal_num36(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # code goes here\n    \n    return n*(2*n-71)\n",
        "num_ids": 22
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(pow(n, 0.5)) * ((2 * n) - 1) \n",
        "num_ids": 26
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            nonzero += 1\n    return zero_count/nonzero\n",
        "num_ids": 56
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n",
        "num_ids": 65
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n            count += 1\n        else:\n            count += 1\n    return zeroes/count\n",
        "num_ids": 65
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero = 0\n    zeroes = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            non_zero += 1\n        else:\n            zeroes += 1\n    return zeroes/non_zero\ndef array_count(arr):\n    '''\n    Write a function to count the number of times an integer occurs in an array\n    of integers.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i]:\n            count += 1\n    return count\ndef average(nums):\n    '''\n    Write a function to compute the average of all elements in the given array.\n    '''\n    return sum(nums)/len(nums)\ndef min_num(nums):\n    '''\n    Write a function to compute the minimum number in an array of integers.\n    '''\n    min_num = nums[0]\n    for i in range(len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n    return min_num\ndef max_num(nums):\n    '''\n    Write a function to compute the maximum number in an array of integers.\n    '''\n    max_num = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n    return max_num\ndef is_power_of(n):\n    '''\n    Write a function to test whether a given number is a power of a given number.\n    '''\n    n = int(n)\n    if n!= 0:\n        while n!= 1:\n            if n == 1:\n                return True\n            if n % 2!= 0:\n                return False\n            n = n/2\n    return False\ndef reverse_list(nums):\n    '''\n    Write a function to reverse the order of the given list.\n    '''\n    nums.reverse()\n    return nums\ndef find_max_val(arr):\n    '''\n    Write a function to find the maximum value in the given array.\n    '''\n    max_val = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val\ndef merge_sort(nums):\n    '''\n    Write a function to sort the given list of integers using merge sort.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums)//2\n    left = nums[0:mid]\n    right = nums[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    nums = merge(left, right)\n    return nums\ndef merge(arr1, arr2):\n    '''\n    Write a function to merge the given lists of integers.\n    '''\n    i = j = 0\n    merged_arr = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n    return merged_arr\ndef is_palindrome(s):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    s = s.strip().lower()\n    return s == s[::-1]\ndef remove_duplicate_letters(s):\n    '''\n    Write a function to remove all duplicates letters from a given string s.\n    '''\n    a = []\n    for i in s:\n        if i not in a:\n            a.append(i)\n    return \"\".join(a)\ndef count_primes(n):\n    '''\n    Write a function to count the number of prime numbers in an interval of given size.\n    '''\n    count = 0\n    for i in range(n+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n    return count\ndef remove_duplicate_letters2(s):\n    '''\n    Write a function to remove all duplicates letters from a given string s.\n    '''\n    return \"\".join(set(s))\ndef is_palindrome2(s):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    s = s.strip().lower()\n    return s == s[::-1]\ndef k_closest_points(points, K):\n    '''\n    Write a function to return the indices of K closest points in a given array of points.\n    '''\n    max_dist = 0\n    point_indices = []\n    for i in range(len(points)):\n        for j in range(i, len(points)):\n            dist = distance(points[i], points[j])\n            if dist > max_dist:\n                max_dist = dist\n                point_indices = []\n            if dist == max_dist:\n                point_indices.append(i)\n    point_indices.sort()\n    return point_indices[0:K]\ndef distance(p1, p2):\n    '''\n    Write a function to return the distance between two points.\n    '''\n    x = p1[0] - p2[0]\n    y = p1[1] - p2[1]\n    return abs(x**2 + y**2)**0.5\ndef group_anagrams(words):\n    '''\n    Write a function to group anagrams together.\n    '''\n    anagrams = []\n    for i in range(len(words)):\n        anagrams.append([])\n    for i in range(len(words)):\n        anagrams[i] = sorted(words[i])\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if sorted(words[i]) == sorted(words[j]):\n                anagrams[i] = anagrams[i] + words[j]\n                anagrams[j] = []\n    for i in range(len(anagrams)):\n        if len(anagrams[i])!= 0:\n            anagrams[i] = anagrams[i]\n    return anagrams\ndef count_odd_occurrences(nums):\n    '''\n    Write a function to count the number of odd occurrences of all the numbers in an array.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            count += 1\n    return count\ndef search_in_rotated_sorted_array(nums, target):\n    '''\n    Write a function to search a target value in a sorted rotated array.\n    '''\n    if len(nums) == 1:\n        return 0 if nums[0] == target else -1\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        mid = left + ((right - left) >> 1)\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < nums[right]:\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        else:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    if nums[left] == target:\n        return left\n    return -1\ndef rearrange_digits(nums):\n    '''\n    Write a function to rearrange the digits of an integer.\n    '''",
        "num_ids": 1
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # A more efficient method of counting zeros is to use the fact that the sum of the elements in an array is equivalent to the sum of the numbers of zeros and the number of ones in the array.\n",
        "num_ids": 47
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return float(len(nums)) / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    print(nums)\n    zeros = 0\n    non_zeros = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n",
        "num_ids": 65
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    n = 0\n    for i in nums:\n        if i == 0:\n            z += 1\n        else:\n            n += 1\n    return z/n\n",
        "num_ids": 47
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # if n is 0 then it cannot be the sum of the powers of 2\n    if n == 0:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n <= 0): \n        print(\"Invalid Input\") \n        return\n    while (n!= 0): \n        rem = n % 10\n        if (rem == 0): \n            print(\"Invalid Input\") \n            return\n        n = n//10\n        n = n*2\n    print(\"Yes\") \n",
        "num_ids": 80
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n==0):\n        return False\n",
        "num_ids": 14
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    \n    while (n > 0):\n        count += 1\n        n = n/2\n    \n    if(count == 0):\n        return False\n    \n    return True\n",
        "num_ids": 49
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0) : \n        return 0\n    if (n > 0) : \n        for i in range(1, n + 1): \n            if (i * i) <= n: \n                s = i * i\n                f = n - s\n                if (f > 0) and (f % 2 == 0): \n                    return 1\n                else: \n                    continue\n            else: \n                break\n    return 0\n",
        "num_ids": 107
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n==1) or (n==0): \n        return True\n    else: \n        i = 0\n        while (2**i) <= n: \n            i += 1\n        return (i and (n == 2**i)) \n",
        "num_ids": 62
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while (n > 0):\n        n, digit = divmod(n, 10)\n        sum += digit ** 2\n    return sum == n\n",
        "num_ids": 41
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(0,32):\n        if(n==2**i):\n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    n = abs(int(n))\n    while n % 2 == 0:\n        res += 1\n        n = n // 2\n    if res == 0:\n        print(n, \" is Sum of power of 2\")\n    else:\n        print(n, \" is not Sum of power of 2\")\n",
        "num_ids": 78
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n <= 0): \n        print (\"The number should be greater than 0\") \n        return\n    count = 0\n    while (n > 0): \n        if (n % 2 == 0): \n            n = n // 2\n            count = count + 1\n        else: \n            break\n    if (count == 0 or count == 1): \n        print (\"It can be represented as a sum of non-zero powers of two\") \n    else: \n        print (\"It can't be represented as a sum of non-zero powers of two\") \n    return\n",
        "num_ids": 136
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # \n    # Write your code below:\n    #\n    return r * 2 * math.pi\n    \n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    \n    return 2 * pi * r\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r\n",
        "num_ids": 13
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(itertools.chain(*test_list))\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for x in range(len(test_list)):\n        if type(test_list[x]) == list:\n            flat_list.append(extract_singly(test_list[x]))\n        else:\n            flat_list.append(test_list[x])\n    return flat_list\n",
        "num_ids": 82
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #create a list to store the values\n    result = []\n    #iterate over the test_list\n    for i in test_list:\n        #iterate over the values in the list\n        for j in i:\n            #append the value to the result list\n            result.append(j)\n    #return the result\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) == 1:\n            new_list.append(test_list[i][0])\n        elif len(test_list[i]) > 1:\n            new_list.append(test_list[i])\n    return new_list\n",
        "num_ids": 88
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    s = set()\n    for i in test_list:\n        if not type(i) == list:\n            s.add(i)\n        else:\n            s |= set(extract_singly(i))\n    return s\n",
        "num_ids": 59
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n",
        "num_ids": 8
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set([item for sublist in test_list for item in sublist]))\n",
        "num_ids": 24
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    s = set()\n    for e in test_list:\n        if isinstance(e,list):\n            s.update(extract_singly(e))\n        else:\n            s.add(e)\n    return s\n",
        "num_ids": 57
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    # iterate through the list\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    \n    return result\n",
        "num_ids": 50
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # convert to set of ints\n    out = set()\n    for el in test_list:\n        out.update(el)\n",
        "num_ids": 34
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(num1,num2,lst):\n        lst[num1],lst[num2]=lst[num2],lst[num1]\n    \n    def flip(index,lst):\n        length=len(lst)\n        if index==length:\n            return\n        i=index\n        while i<length:\n            swap(index,i,lst)\n            i+=1\n    \n    def inversion_helper(lst):\n        length=len(lst)\n        if length<=1:\n            return lst\n        mid=int(length/2)\n        left=inversion_helper(lst[:mid])\n        right=inversion_helper(lst[mid:])\n        i=0\n        j=0\n        index=0\n        while i<len(left) and j<len(right):\n            if left[i]>right[j]:\n                swap(i,index,lst)\n                index+=1\n            i+=1\n            j+=1\n        if i==len(left):\n            index=len(right)\n        elif j==len(right):\n            index=len(left)\n        left=flip(index,left)\n        right=flip(index,right)\n        return left+right\n",
        "num_ids": 313
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return nums\n    p = -1\n    max_value = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max_value:\n            max_value = nums[i]\n            p = i\n    if p == -1:\n        return nums\n    else:\n        nums.pop(p)\n        nums.append(max_value)\n        nums = sorted(nums)\n        nums.pop(0)\n        return nums\n",
        "num_ids": 138
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # swap\n    # remove\n    # insert\n    # undo\n    # \n    # insert 2,1\n    # insert 1,2\n    # insert 1,1\n    # swap\n    # undo\n    # insert 1,2\n    # undo\n    # insert 1,1\n    # swap\n    # undo\n    # insert 2,1\n    # undo\n    # insert 1,1\n    # undo\n    # insert 2,2\n    # undo\n    # \n    \n    n = len(nums)\n    if n <= 1:\n        return nums\n    \n    i = 0\n    while i < n:\n        idx = nums.index(max(nums[i:]), i)\n        if idx!= i:\n            nums[i], nums[idx] = nums[idx], nums[i]\n        i += 1\n    return nums\n",
        "num_ids": 215
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    [1, 2, 3] \n    [3, 2, 1] \n    [3, 1, 2] \n    [1, 2, 3] \n    [2, 1, 3] \n    [1, 3, 2] \n    [2, 3, 1] \n    [2, 1, 3] \n    [1, 3, 2] \n    '''\n    #nums = []\n    #nums = [1, 2, 3]\n    #nums = [3, 2, 1]\n    n = len(nums)\n    for i in range(n):\n        print(nums)\n        if i == 0:\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                continue\n        elif i == n - 1:\n            if nums[i] > nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n                continue\n        elif nums[i] > nums[i+1]:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n            continue\n        elif nums[i] > nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            continue\n",
        "num_ids": 263
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        j = 0\n        while j < i:\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n            j += 1\n",
        "num_ids": 81
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    for i in range(n//2):\n        min_idx = i\n        for j in range(i, n-1):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        if min_idx!= i:\n            nums[i], nums[min_idx] = nums[min_idx], nums[i]\n            \n        for k in range(n-1, i, -1):\n            if nums[k] < nums[k-1]:\n                nums[k], nums[k-1] = nums[k-1], nums[k]\n                \n    return nums\n",
        "num_ids": 178
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print(nums)\n    nums_sorted = nums.copy()\n    nums_sorted.sort()\n    print(nums_sorted)\n    for i in range(len(nums)):\n        nums[i], nums_sorted[i] = nums_sorted[i], nums[i]\n    print(nums)\n    return nums\n",
        "num_ids": 96
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_i = nums.index(max(nums[0:i+1]))\n        if max_i!= i:\n            nums[i], nums[max_i] = nums[max_i], nums[i]\n            if i!= 1:\n                pancake_sort(nums[0:i])\n            else:\n                print(nums)\n    return nums",
        "num_ids": 125
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        # print(\"i =\",i)\n        \n        # j = len(nums)-1\n        # while j>0 and nums[j] < nums[j-1]:\n        #     nums[j],nums[j-1] = nums[j-1],nums[j]\n        #     j -= 1\n        j = 0\n        while j<i and nums[j]>nums[j+1]:\n            nums[j],nums[j+1] = nums[j+1],nums[j]\n            j += 1\n    return nums\n",
        "num_ids": 162
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #print(nums)\n    if len(nums) <= 1:\n        return nums\n    max_val = max(nums)\n    pancakes = []\n    #print(max_val)\n    for i in range(0,max_val):\n        pancakes.append(i)\n    #print(pancakes)\n    if nums == pancakes:\n        return nums\n    while(True):\n        for i in range(0,max_val):\n            temp = pancakes.pop()\n            #print(temp)\n            if i == temp:\n                continue\n            else:\n                pancakes.insert(0,temp)\n                break\n        if len(pancakes) == len(nums):\n            break\n    return pancakes\n",
        "num_ids": 183
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    # for item in list1:\n    #     for item2 in list2:\n    #         for item3 in list3:\n    #             if item == item2 and item == item3:\n    #                 count += 1\n    # return count\n    for item1,item2,item3 in zip(list1,list2,list3):\n        if item1 == item2 and item1 == item3:\n            count += 1\n    return count\n",
        "num_ids": 112
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i] and list1[i]!='':\n            count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                count=count+1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res=0\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                res+=1\n    return res\n",
        "num_ids": 81
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            same += 1\n    print(f\"Total items that are same in the same position of three lists are: {same}\")\n",
        "num_ids": 75
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k] and list1[i] == list3[k]:\n                    c += 1\n    return c\n",
        "num_ids": 93
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_item = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            same_item = same_item + 1\n    return same_item\n",
        "num_ids": 65
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_item=0\n    for item in range(len(list1)):\n        for items in range(len(list2)):\n            if list1[item]==list2[items] and list1[item]==list3[items]:\n                count_item+=1\n    return count_item\n",
        "num_ids": 74
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)): \n        if type(Input[i]) == list: \n            count = count + 1\n    print(count)\n",
        "num_ids": 46
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_Count = 0 \n    for i in Input: \n        if type(i) == list: \n            List_Count += 1 \n    return List_Count \n",
        "num_ids": 44
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = Input\n    for i in l:\n        print(i)\n    count = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    counter = 0\n    for i in range(0, len(Input)):\n        if type(Input[i]) == type([]):\n            counter += 1\n    return counter \n",
        "num_ids": 45
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # convert the input to a list\n    Input = list(Input)\n    \n    # create a empty list to store the final output\n    Output = []\n    \n    # create a set to store the list data\n    Set = set()\n    \n    # iterate over the input list and add each list to the set\n    for i in Input:\n        Set.add(i)\n    \n    # add the length of the set to the output\n    Output.append(len(Set))\n    \n    # return the final output\n    return Output\n",
        "num_ids": 129
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n=0\n    for i in range(len(Input)):\n        if isinstance(Input[i],tuple):\n            n+=1\n    return n\n    \n",
        "num_ids": 43
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(f\"The number of lists present in the given tuple is: {len(Input)}\")\n",
        "num_ids": 25
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i)==list:\n            count += 1\n    return count\n        \n",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(type(Input))\n    print(Input)\n    no_of_lists = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            no_of_lists += 1\n    return no_of_lists\n",
        "num_ids": 66
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # print(\"Input tuple : \", Input)\n    # list_count = 0\n    # # 1, 2, 3, 4\n    # for i in range(len(Input)-1):\n    #     # i = 0, 1, 2, 3\n    #     for j in range(i+1, len(Input)):\n    #         # j = 1, 2, 3, 4\n    #         if(Input[i] == Input[j]):\n    #             list_count += 1\n    #             print(\"i = \", i, \"j = \", j)\n    #             break\n    # return list_count\n    list_count = 0\n    for i in range(len(Input)-1):\n        # i = 0, 1, 2, 3\n        for j in range(i+1, len(Input)):\n            # j = 1, 2, 3, 4\n            if(Input[i] == Input[j]):\n                list_count += 1\n                print(\"i = \", i, \"j = \", j)\n                break\n    return list_count\n",
        "num_ids": 251
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    # arr = [-1, 2, 3, 4, -5]\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n",
        "num_ids": 99
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = arr.copy()\n    arr.sort()\n    max = 0\n    for i in range(0, len(arr)-1):\n        temp = abs(arr[i]-arr[i+1])\n        if temp > max:\n            max = temp\n    return max\n",
        "num_ids": 68
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > maxDiff:\n                maxDiff = diff\n    return maxDiff\n",
        "num_ids": 74
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Code here\n    arr.sort()\n    diff=arr[1]-arr[0]\n    for i in range(len(arr)-1):\n        if (arr[i+1]-arr[i])>diff:\n            diff=arr[i+1]-arr[i]\n    print(diff)\n",
        "num_ids": 75
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    for i in range(len(arr)-1):\n        if abs(arr[i+1]-arr[i]) > max_diff:\n            max_diff = abs(arr[i+1]-arr[i])\n    return max_diff\n",
        "num_ids": 66
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    if len(arr) == 0:\n        return max_diff\n    if len(arr) == 1:\n        return abs(arr[0])\n    for i in range(len(arr) - 1):\n        if abs(arr[i]) > max_diff:\n            max_diff = abs(arr[i])\n        if i == len(arr) - 2:\n            break\n        if abs(arr[i + 1]) > max_diff:\n            max_diff = abs(arr[i + 1])\n    return max_diff\n",
        "num_ids": 135
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = -1\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            if i!= j and abs(arr[i] - arr[j]) > max: \n                max = abs(arr[i] - arr[j]) \n",
        "num_ids": 73
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -999\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (abs(arr[i]-arr[j]) > max_diff):\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n",
        "num_ids": 79
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # declare a helper function\n    def max_Diff(arr, start, end): \n        max_diff = 0\n        \n        # check for max_diff \n        for i in range(start, end): \n            diff = abs(arr[i] - arr[i+1]) \n            \n            # update max_diff if needed\n            if max_diff < diff: \n                max_diff = diff \n                \n        return max_diff \n    \n    # find max_diff in arr[start, end]\n    start = 0\n    end = len(arr) - 1\n    max_diff = max_Diff(arr, start, end)\n    \n    # find max_diff in arr[start, end]\n    start = 0\n    end = len(arr) - 1\n    max_diff = max(max_Diff(arr, start, end), max_diff)\n    \n    # find max_diff in arr[start, end]\n    start = 0\n    end = len(arr) - 1\n    max_diff = max(max_Diff(arr, start, end), max_diff)\n    \n    # find max_diff in arr[start, end]\n    start = 0\n    end = len(arr) - 1\n    max_diff = max(max_Diff(arr, start, end), max_diff)\n    \n    # return max_diff\n    return max_diff \n    \n    \narr = [-5, 3, 5, 10, 11, -15, 6, 3, -1, 1, 5, 4] ",
        "num_ids": 367
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = arr[:]\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 80
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # The polynomial is x^2 + 2ax + b. The discriminant is |b^2 - 4ax|.\n    # x^2 + 2ax + b = 0\n    # (-b +- sqrt(b^2 - 4ac)) / 2a\n    a = int(a)\n    b = int(b)\n    n = int(n)\n    if a == 0:\n        return None\n    else:\n        discriminant = b ** 2 - 4 * a * n\n        if discriminant < 0:\n            return None\n        else:\n            x1 = (-b - sqrt(discriminant)) / (2 * a)\n            x2 = (-b + sqrt(discriminant)) / (2 * a)\n            return (x1, x2)\n",
        "num_ids": 187
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, a):\n        if (a*i + b*i) == n:\n            return (a*i, b*i)\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    for i in range(0, n):\n        a1 = a\n        b1 = b\n        x1 = x\n        y1 = y\n        while a1 > 0:\n            a1, x1 = divmod(a1, 10)\n            x = x1\n            a = a1\n            \n        while b1 > 0:\n            b1, y1 = divmod(b1, 10)\n            y = y1\n            b = b1\n        if x == x1 and y == y1:\n            return (x, y)\n    return None\n",
        "num_ids": 146
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, a):\n        for y in range(1, b):\n            if x + y == n:\n                return x, y\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = a\n    y = b\n    while x!= y:\n        if x + y == n:\n            return x, y\n        if x + y < n:\n            x += 1\n        else:\n            y -= 1\n    return None\n",
        "num_ids": 62
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n",
        "num_ids": 12
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # a*x + b*y = n\n    # x + y = -a - b / a\n    # y = -a / x\n    # x = -b / y\n    # x = -b / y - a / x\n",
        "num_ids": 58
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = 0, 1\n    while a * x + b * y!= n:\n        if a * x + b * y < n:\n            x += 1\n        else:\n            x -= 1\n        y += 1\n    return x, y\n",
        "num_ids": 63
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    while True:\n        a_tmp = a\n        b_tmp = b\n        for i in range(1, a_tmp):\n            if x*a_tmp + y*b_tmp == n:\n                return (x, y)\n            elif x*a_tmp + y*b_tmp < n:\n                x += 1\n                y = 0\n            elif x*a_tmp + y*b_tmp > n:\n                x = x-1\n                y += 1\n        a *= 2\n        b *= 2\n        if a > 2**31 -1:\n            return None\n    \n",
        "num_ids": 156
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    for x in range(1, n):\n        for y in range(1, n):\n            if (a * x + b * y) == n:\n                return (x, y)\n    return None\n",
        "num_ids": 53
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n",
        "num_ids": 18
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l1 = list1\n    l2 = list2\n    while l1:\n        if l1 in l2:\n            l2.remove(l1)\n        else:\n            l1 = l1.next\n    return l2\n",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n    list3 = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list3.append(list1[i])\n    return list3\n",
        "num_ids": 65
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for num in list1:\n        if num not in list2:\n            result.append(num)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    return list(set(list1) - set(list2))\n    \nlist1 = [1,2,3,4,5]\nlist2 = [2,4,6]\nprint(remove_elements(list1,list2))\n",
        "num_ids": 62
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l1 = []\n    for i in list1:\n        if i not in list2:\n            l1.append(i)\n    return l1\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    return list(set(list1) - set(list2))\n",
        "num_ids": 38
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in list2:\n            temp.append(i)\n    for i in list2:\n        if i not in list1:\n            temp.append(i)\n    return temp\n    \nprint(remove_elements([1,2,3,4,5,6,7], [1,2,3]))\nprint(remove_elements([1,1,1], [1]))\nprint(remove_elements([1,2,3], []))\n",
        "num_ids": 127
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + sum_series(n-2) if n else 0\n    \ndef sum_series2(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n < 2 else n + sum_series2(n-2)\n    \ndef rec(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return rec(n-2) + n\n    \ndef rec2(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n if n < 2 else rec2(n-2) + n\n    \ndef nth_root(n, r):\n    '''\n    Write a function to calculate the nth root of a number x, where the root is x**(1/r).\n    '''\n    return x**(1/r) if x > 0 else None\n    \ndef nth_root2(n, r):\n    '''\n    Write a function to calculate the nth root of a number x, where the root is x**(1/r).\n    '''\n    if x <= 0:\n        return None\n    return x**((1/r)/2) if x >= n else nth_root(n, r)\n    \ndef nth_root3(n, r):\n    '''\n    Write a function to calculate the nth root of a number x, where the root is x**(1/r).\n    '''\n    if x <= 0:\n        return None\n    if x >= n:\n        return nth_root2(n, r)\n    x = (n/r)**(1/2)\n    #if x <= 0:\n    #    return None\n    return x**(1/r)\n    \ndef nth_root4(n, r):\n    '''\n    Write a function to calculate the nth root of a number x, where the root is x**(1/r).\n    '''\n    if x <= 0:\n        return None\n    if x >= n:\n        return nth_root2(n, r)\n    x = (n/r)**(1/2)\n    if x <= 0:\n        return None\n    return x**(1/r)\n    \ndef lcm(a, b):\n    '''\n    Write a function to find and return the least common multiple (LCM) of two numbers.\n    '''\n    return a*b // gcd(a, b)\n    \ndef gcd(a, b):\n    '''\n    Write a function to find and return the greatest common divisor of two numbers.\n    '''\n    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a+b\n    \ndef gcd_and_lcm(a, b):\n    '''\n    Write a function to find and return the least common multiple (LCM) of two numbers.\n    '''\n    if a == 0 and b == 0:\n        return 0\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > 0 and b > 0:\n        return gcd(a, b)\n    if a < 0 and b < 0:\n        return gcd(abs(a), abs(b))\n    \ndef add_zero(n):\n    '''\n    Write a function to add leading zero at the beginning of an integer and return the result.\n    '''\n    return str(n) if n!= 0 else '0'\n    \ndef add_zero2(n):\n    '''\n    Write a function to add leading zero at the beginning of an integer and return the result.\n    '''\n    return '0' + str(n) if n!= 0 else str(n)\n    \ndef add_zero3(n):\n    '''\n    Write a function to add leading zero at the beginning of an integer and return the result.\n    '''\n    return '0'*(len(str(n))-1) + str(n) if n!= 0 else str(n)\n    \ndef list_comprehension():\n    '''\n    Write a function to return a list of all prime numbers in a range of 2,5,10,15.\n    '''\n    return [x for x in range(2,16) if isPrime(x)]\n    \ndef list_comprehension2():\n    '''\n    Write a function to return a list of all prime numbers in a range of 2,5,10,15.\n    '''\n    return [x for x in range(2,16) if not isPrime(x)]\n    \ndef list_comprehension3():\n    '''\n    Write a function to return a list of all prime numbers in a range of 2,5,10,15.\n    '''\n    return [x for x in range(2,16) if not isPrime(x) and not isPrime(x+2) and not isPrime(x+4) and not isPrime(x+6) and not isPrime(x+8) and not isPrime(x+10) and not isPrime(x+12) and not isPrime(x+14) and not isPrime(x+16)]\n    \ndef list_comprehension4():\n    '''\n    Write a function to return a list of all prime numbers in a range of 2,5,10,15.\n    '''\n    return list(filter(isPrime, range(2,16)))\n    \ndef list_comprehension5():\n    '''\n    Write a function to return a list of all prime numbers in a range of 2,5,10,15.\n    '''\n    return list(filter(isPrime, range(2,16)))\n    \ndef is_palindrome(x):\n    '''\n    Write a function to check whether an integer is a palindrome or not.\n    '''\n    x = str(x)\n    return x == x[::-1]\n    \ndef is_palindrome2(x):\n    '''\n    Write a function to check whether an integer is a palindrome or not.\n    '''\n    return x == ''.join(reversed(x))\n    \ndef is_palindrome3(x):\n    '''\n    Write a function to check whether an integer is a palindrome or not.\n    '''\n    return x == x[::-1]\n    \ndef is_palindrome4(x):\n    '''\n    Write a function to check whether an integer is a palindrome or not.\n    '''\n    if x < 0:\n        return False\n    rev_x = 0\n    while x > rev_x:\n        rev_x = rev_x*10 + x%10\n        x = x//10\n    return x == rev_x or x == rev_x//10\n    \ndef count_total_elements(l):\n    '''\n    Write a function to count total number of elements in a list.\n    '''\n    return len(l)\n    \ndef count_total_elements2(l):\n    '''\n    Write a function to count total number of elements in a list.\n    '''\n    return sum(1 for _ in l)\n    \ndef count_total_elements3(l):\n    '''\n    Write a function to count total number of elements in a list.\n    '''\n    return sum(1 for _ in l)\n    \ndef count_total_elements4(l):\n    '''\n    Write a function to count total number of elements in a list.\n    '''\n    return sum(1 for _ in l)\n    \ndef count_total_elements5(l):\n    '''\n    Write a function to count tota",
        "num_ids": 10
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 0\n    return sum_series(n-1) + (n-1)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n        if i < n // 2:\n            sum -= i\n        else:\n            sum += i\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n+n-2) if n>=0 else 0\n",
        "num_ids": 19
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + (sum_series(n-2))\n    \nsum_series(0)\n",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 0\n    if n == 0:\n        return 0\n    return n + (n-2)\n",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return n\n    if n == 2:\n        return 2\n    for i in range(n):\n        total += (n-2*i)\n    return total\n",
        "num_ids": 64
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4) + (n-6) + (n-8) + (n-10) + (n-12) + (n-14) + (n-16) + (n-18)\n",
        "num_ids": 60
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return None\n    else:\n        return sum_series(n - 2) + n\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * (s - l) / 2\ndef area_parallelogram(a, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the height and width.\n    '''\n    return a * h\ndef area_trapezium(a, h):\n    '''\n    Write a function to calculate the area of a trapezium given the height and width.\n    '''\n    return a * h / 2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length.\n    '''\n    return s**2\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the height and width.\n    '''\n    return b * h\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the height and width.\n    '''\n    return (b * h) / 2\ndef area_parallelogram(a, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the height and width.\n    '''\n    return a * h / 2\ndef area_trapezium(a, h):\n    '''\n    Write a function to calculate the area of a trapezium given the height and width.\n    '''\n    return (a * h) / 2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length.\n    '''\n    return s**2\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the height and width.\n    '''\n    return b * h\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the height and width.\n    '''\n    return b * h / 2\ndef area_parallelogram(a, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the height and width.\n    '''\n    return a * h / 2\ndef area_trapezium(a, h):\n    '''\n    Write a function to calculate the area of a trapezium given the height and width.\n    '''\n    return a * h / 2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length.\n    '''\n    return s**2\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the height and width.\n    '''\n    return b * h\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the height and width.\n    '''\n    return b * h / 2\ndef area_parallelogram(a, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the height and width.\n    '''\n    return a * h / 2\ndef area_trapezium(a, h):\n    '''\n    Write a function to calculate the area of a trapezium given the height and width.\n    '''\n    return a * h / 2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length.\n    '''\n    return s**2\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the height and width.\n    '''\n    return b * h\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the height and width.\n    '''\n    return b * h / 2\ndef area_parallelogram(a, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the height and width.\n    '''\n    return a * h / 2\ndef area_trapezium(a, h):\n    '''\n    Write a function to calculate the area of a trapezium given the height and width.\n    '''\n    return a * h / 2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length.\n    '''\n    return s**2\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the height and width.\n    '''\n    return b * h\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the height and width.\n    '''\n    return b * h / 2\ndef area_parallelogram(a, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the height and width.\n    '''\n    return a * h / 2\ndef area_trapezium(a, h):\n    '''\n    Write a function to calculate the area of a trapezium given the height and width.\n    '''\n    return a * h / 2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length.\n    '''\n    return s**2\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the height and width.\n    '''\n    return b * h\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the height and width.\n    '''\n    return b * h / 2\ndef area_parallelogram(a, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the height and width.\n    '''\n    return a * h / 2\ndef area_trapezium(a, h):\n    '''\n    Write a function to calculate the area of a trapezium given the height and width.\n    '''\n    return a * h / 2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length.\n    '''\n    return s**2\ndef area_rectangle(b, h):\n    '''\n    Write a function to calculate the area of a rectangle given the height and width.\n    '''\n    return b * h\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the height and width.\n    '''\n    return b * h / 2\ndef area_parallelogram(a, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the height and width.\n    '''\n    return a * h / 2\ndef area_trapezium(a, h):\n    '''\n    Write a function to calculate the area of a trapezium given the height and width.\n    '''\n    return a * h / 2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return pi * r**2\ndef area_square(s):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l) / 2\n    \nprint(area_polygon(3, 3)) # expected 3.0\nprint(area_polygon(5, 3)) # expected 6.0\nprint(area_polygon(7, 5)) # expected 25.0\nprint(area_polygon(2, 2)) # expected 4.0\nprint(area_polygon(6, 4)) # expected 16.0\nprint(area_polygon(3, 5)) # expected 12.5\nprint(area_polygon(5, 4)) # expected 22.0\nprint(area_polygon(3, 5)) # expected 12.5\n",
        "num_ids": 150
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = float(s)\n    l = float(l)\n    n = int(l / s)\n    return n * s * tan(pi / n)\nprint(area_polygon(2,3))\n",
        "num_ids": 53
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi * (l * s)\n",
        "num_ids": 12
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/(4*tan(pi/s))\n",
        "num_ids": 19
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-l)*0.5) / (tan(pi/s) - tan((pi*(s-2)/s)))\n    return area\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / (tan(pi / s))\n",
        "num_ids": 18
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    assert type(s) == float, f'{s} must be a float.'\n    assert type(l) == float, f'{l} must be a float.'\n    assert s > 0, f'{s} must be greater than zero.'\n    assert l > 0, f'{l} must be greater than zero.'\n    return pi/s * s * (l - 2)\n",
        "num_ids": 92
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 1/s*(l**2*tan(pi/l))\n",
        "num_ids": 20
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    l = []\n    l.append(1)\n    i = 2\n    while i < n:\n        if n%i == 0:\n            l.append(i)\n            if n//i == i:\n                l.append(n//i)\n            else:\n                l.append(n//i)\n        i += 1\n    if sum(l) == n:\n        return True\n    else:\n        return False\n    ",
        "num_ids": 105
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = 1\n    while divisor < math.ceil(n/2):\n        if n % divisor == 0:\n            print(n, divisor)\n            return divisor\n        else:\n            divisor += 1\n            if n % divisor == 0:\n                print(n, divisor)\n                return divisor\n            else:\n                return False\n    return False\n",
        "num_ids": 102
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, math.floor(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            if i!= n // i:\n                divisors.add(n // i)\n    return len(divisors) == 2\n",
        "num_ids": 84
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = int(n)\n    divisors = []\n    for i in range(1, int(math.sqrt(s)) + 1): \n        if s % i == 0: \n            divisors.append(i) \n            divisors.append(s//i) \n    return set(divisors) == set([1, s]) \n    \n    \ndef div_sum_memo(n, cache):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = int(n)\n    divisors = []\n    for i in range(1, int(math.sqrt(s)) + 1): \n        if s % i == 0: \n            divisors.append(i) \n            divisors.append(s//i) \n    return set(divisors) == set([1, s]) \n    \n    \ndef div_sum_dp(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = int(n)\n    divisors = {}\n    for i in range(1, int(math.sqrt(s)) + 1): \n        if s % i == 0: \n            divisors[i] = divisors.get(i, 0) + 1\n            divisors[s//i] = divisors.get(s//i, 0) + 1\n    return divisors == {1: 1, s: 1}\n    \n",
        "num_ids": 113
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return True\n    n = abs(n)\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i!= n // i:\n                sum_divisors += n // i\n    return sum_divisors == n\n",
        "num_ids": 100
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    return sum(set(div(n)).difference(set([n]))) == 0\n    \ndef div(n): \n    '''\n    Write a function that takes as input an integer n and returns the list of all its divisors\n    (including 1 and the number itself).\n    '''\n    l=[]\n    for i in range(2,n):\n        if(n%i==0):\n            l.append(i)\n    return l\n",
        "num_ids": 40
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1,n):\n        if n%i == 0:\n            s += i\n    if s == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # base case\n    if n == 1 or n == 0: \n        return False\n        \n    # initializing two variables\n    # divides = 0 and sum = 0\n    divides, sum = 0, 0\n    \n    # looping through all numbers between 1 and n\n    for i in range(1, n + 1):\n        \n        # if the number is divisible by i\n        if n % i == 0:\n            divides += 1\n            sum += i \n            \n        # if the number is not divisible by i\n        else:\n            # if the number is not divisible by more than i, \n            # break the loop\n            if i > divides:\n                break\n    \n    # condition to check if the sum is equal to the divisors\n    if sum == n and divides == 2: \n        return True\n    else: \n        return False\n",
        "num_ids": 206
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisor.append(i)\n    if sum(divisor) == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    l=[]\n    div_sum = 0\n    for i in range(1, n): \n        if n%i==0: \n            div_sum += i \n            l.append(i)\n    return div_sum == n and len(l)==2\n    '''\n    My Code\n    '''\n    #div_sum = n\n    #for i in range(1, n):\n    #    if n%i == 0:\n    #        div_sum += i\n    #return div_sum == n and len(set(l))==2\n",
        "num_ids": 60
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        if (str1.upper()[i].isalpha()):\n            count = count+1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    list_letter=[]\n    list_pos=[]\n    count=0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].isupper():\n            list_letter.append(str1[i])\n            list_pos.append(i)\n    for i in range(len(list_letter)):\n        if list_pos.count(i) > 1:\n            count += 1\n    print(count)\n",
        "num_ids": 116
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    ans=0\n    str2=''\n    for i in str1:\n        if ord(i)>=ord('a') and ord(i)<=ord('z'):\n            if ord(i)==ord(str2[ans]):\n                ans+=1\n            else:\n                str2+=i\n    return str2\n    ",
        "num_ids": 83
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].upper():\n            count += 1\n    return count",
        "num_ids": 46
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # 1st solution:\n    pos_dict = {}\n    for i in range(0, len(str1)):\n        if pos_dict.get(str1[i]) == None:\n            pos_dict[str1[i]] = 1\n        else:\n            pos_dict[str1[i]] = pos_dict.get(str1[i]) + 1\n",
        "num_ids": 90
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(0,len(str1)):\n        if str1.count(str1[i]) > 1:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    pos = {}\n    for i in str1:\n        if i.lower() in pos:\n            pos[i.lower()] += 1\n        else:\n            pos[i.lower()] = 1\n    for k, v in pos.items():\n        if k in \"qwertyuiopasdfghjklzxcvbnm\":\n            count += v\n    return count\n",
        "num_ids": 98
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(0,len(str1)):\n        if str1[i].lower() in d:\n            d[str1[i].lower()] +=1\n        else:\n            d[str1[i].lower()] = 1\n    count = 0\n    for j in d:\n        if d[j] > 0:\n            count += d[j]\n    return count\n",
        "num_ids": 101
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Alphabet dictionary\n    alphabets = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    counter = 0\n    # Iterate through the str1 and increase the value of counter if the str1[i] is same as str1[i-1]\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            counter += 1\n    return counter\n",
        "num_ids": 217
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    occurrence_count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            for j in range(len(str1)):\n                if str1[j].isalpha():\n                    if str1[i].lower() == str1[j].lower():\n                        occurrence_count += 1\n    return occurrence_count\n",
        "num_ids": 90
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    res = 0\n    while len(A) > 1:\n        if A[0] ^ A[1] == 0:\n            res += 1\n        A.pop(0)\n        A.pop(0)\n    return res\n",
        "num_ids": 71
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A: \n        return 0\n    A_dict = {}\n    for i in A: \n        if i not in A_dict: \n            A_dict[i] = 1\n        else: \n            A_dict[i] += 1\n    xor_even_count = 0\n    for i in A_dict: \n        if A_dict[i] % 2!= 0: \n            xor_even_count += 1\n    return xor_even_count\n",
        "num_ids": 119
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # edge case\n    if len(A) == 0: \n        return 0\n",
        "num_ids": 22
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    i = 1\n    while i < len(A):\n        if A[i] == A[i-1] and (A[i] ^ A[i-1]) % 2 == 0:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum([x ^ 2 for x in A if x ^ 2 & 1])\n",
        "num_ids": 21
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in range(0, len(A)):\n        for j in range(0, len(A)):\n            if (A[i] ^ A[j]) == 0:\n                even = even + 1\n",
        "num_ids": 58
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    res = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                res += 1\n    return res\n",
        "num_ids": 62
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    n = len(A)\n",
        "num_ids": 17
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    result = 1\n    while(result <= n):\n        result = result << 1\n    return result - 1\n",
        "num_ids": 28
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    binary_rep = bin(n).replace(\"0b\", \"\")\n    if len(binary_rep)!= 32:\n        return int(binary_rep + \"0\" * (32 - len(binary_rep)))\n    else:\n        return n\n",
        "num_ids": 61
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while True:\n        if (n & -n) == n:\n            return n\n        else:\n            n = n + 1\n",
        "num_ids": 34
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while (i <= n):\n        i *= 2\n    return i\n",
        "num_ids": 25
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n<0:\n        return 0\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    \n    temp=n\n    count=0\n    while temp!=1:\n        temp=temp>>1\n        count+=1\n    return count+2\n",
        "num_ids": 97
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while 2**i <= n:\n        i += 1\n    return 2**i\n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    x = 1\n    while (n >> 1) > 0:\n        n >>= 1\n        x <<= 1\n    return x\n",
        "num_ids": 45
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # code here\n    x = 1\n    while (x<=n):\n        x = x << 1\n    return x\n",
        "num_ids": 32
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    print('n is:',n)\n    i = 1\n    while (i <= n):\n        print('i is:',i)\n        i = 2*i\n    return i - 1\n",
        "num_ids": 48
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n).bit_length() - 1\n",
        "num_ids": 16
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = a.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if(a[i] == x):\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i == x])\n",
        "num_ids": 17
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in range(len(a)):\n        if(a[i]==x):\n            c+=1\n    return c\n",
        "num_ids": 39
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    print(\"The number of occurrences of the number \",x,\" in the given list is\",count)\n",
        "num_ids": 58
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list_sum = 0\n    for i in range(m, n+1):\n        list_sum += list1[i]\n    return list_sum\n",
        "num_ids": 39
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        if i > m and i < n:\n            sum += list1[i]\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n > len(list1):\n        return None\n    else:\n        for i in range(m, n + 1):\n            return sum(list1[i])\n",
        "num_ids": 47
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n",
        "num_ids": 14
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    print(sum)\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        if i>=m and i<=n:\n            sum_list.append(sum_list)\n    return sum_list\n",
        "num_ids": 53
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n > len(list1):\n        print('\\nWrong indices')\n        return\n    return sum(list1[m:n+1])\n    \nsum_range_list([1,2,3,4,5],1,4)\nsum_range_list([1,2,3,4,5],2,5)\nsum_range_list([1,2,3,4,5],1,1)\nsum_range_list([1,2,3,4,5],0,2)\nsum_range_list([1,2,3,4,5],-1,5)\nsum_range_list([1,2,3,4,5],-1,-1)\n",
        "num_ids": 173
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)/2\n",
        "num_ids": 11
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    s = (1 + math.sqrt(5)) / 2\n    print(round((math.sqrt(5) / 2) * a, 2))\n    return round((math.sqrt(5) / 2) * a, 2)\n    \n    \ndef rectangle_area(a, b):\n    '''\n    Write a function to find the area of a rectangle from its length and breadth.\n    '''\n    print(a * b)\n    \n    \ndef rectangle_volume(a, b):\n    '''\n    Write a function to find the volume of a rectangle from its length and breadth.\n    '''\n    print(a * b)\n    \n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    print(math.pi * (r ** 2))\n    \n    \ndef circle_volume(r):\n    '''\n    Write a function to find the volume of a circle from its radius.\n    '''\n    print(math.pi * (r ** 3))\n    \n    \ndef triangle_area(b, h):\n    '''\n    Write a function to find the area of a triangle from its base and height.\n    '''\n    print((b * h) / 2)\n    \n    \ndef triangle_volume(a, b, h):\n    '''\n    Write a function to find the volume of a triangle from its base, height and slant height.\n    '''\n    print((a * b * h) / 3)\n    \n    \ndef trapezoid_area(a, b, h):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and slant height.\n    '''\n    print(((a + b) * h) / 2)\n    \n    \ndef trapezoid_volume(a, b, h):\n    '''\n    Write a function to find the volume of a trapezoid from its base, height and slant height.\n    '''\n    print(((a + b) * h) / 2)\n    \n    \ndef cylinder_volume(r, h):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    print((math.pi * (r ** 2) * h) / 3)\n    \n    \ndef cylinder_surface(r, h):\n    '''\n    Write a function to find the surface of a cylinder from its radius and height.\n    '''\n    print((math.pi * (r ** 2) * h))\n    \n    \ndef cone_volume(r, h):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    print((math.pi * (r ** 2) * h))\n    \n    \ndef cone_surface(r, h):\n    '''\n    Write a function to find the surface of a cone from its radius and height.\n    '''\n    print((math.pi * (r ** 2) * h) / 3)\n    \n    \ndef right_triangle_area(b, h):\n    '''\n    Write a function to find the area of a right triangle from its base and height.\n    '''\n    print((b * h) / 2)\n    \n    \ndef right_triangle_volume(a, b, h):\n    '''\n    Write a function to find the volume of a right triangle from its base, height and slant height.\n    '''\n    print((a * b * h) / 2)\n    \n    \ndef right_triangle_surface(a, b, h):\n    '''\n    Write a function to find the surface of a right triangle from its base, height and slant height.\n    '''\n    print(((a + b) * h) / 2)\n    \n    \ndef right_rectangle_area(a, b):\n    '''\n    Write a function to find the area of a right rectangle from its length and breadth.\n    '''\n    print(a * b)\n    \n    \ndef right_rectangle_volume(a, b):\n    '''\n    Write a function to find the volume of a right rectangle from its length and breadth.\n    '''\n    print(a * b)\n    \n    \ndef right_circle_area(r):\n    '''\n    Write a function to find the area of a right circle from its radius.\n    '''\n    print(math.pi * (r ** 2))\n    \n    \ndef right_circle_volume(r):\n    '''\n    Write a function to find the volume of a right circle from its radius.\n    '''\n    print(math.pi * (r ** 3))\n    \n    \ndef trapezoid_area(a, b, h):\n    '''\n    Write a function to find the area of a trapezoid from its base, height and slant height.\n    '''\n    print(((a + b) * h) / 2)\n    \n    \ndef trapezoid_volume(a, b, h):\n    '''\n    Write a function to find the volume of a trapezoid from its base, height and slant height.\n    '''\n    print(((a + b) * h) / 2)\n    \n    \ndef cube_area(l):\n    '''\n    Write a function to find the area of a cube from its length.\n    '''\n    print(l ** 2)\n    \n    \ndef cube_volume(l):\n    '''\n    Write a function to find the volume of a cube from its length.\n    '''\n    print(l ** 3)\n    \n    \ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere from its radius.\n    '''\n    print(4 * math.pi * (r ** 2))\n    \n    \ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere from its radius.\n    '''\n    print(4 * math.pi * (r ** 3))\n    \n    \ndef hemisphere_area(l):\n    '''\n    Write a function to find the area of a hemisphere from its length.\n    '''\n    print(math.pi * (l ** 2))\n    \n    \ndef hemisphere_volume(l):\n    '''\n    Write a function to find the volume of a hemisphere from its length.\n    '''\n    print(math.pi * (l ** 3))\n    \n    \ndef cylinder_area(r, h):\n    '''\n    Write a function to find the area of a cylinder from its radius and height.\n    '''\n    print(math.pi * (r ** 2) * h)\n    \n    \ndef cylinder_volume(r, h):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    print(math.pi * (r ** 2) * h)\n    \n    \ndef right_cylinder_area(r, h):\n    '''\n    Write a function to find the area of a right cylinder from its radius and height.\n    '''\n    print(math.pi * (r ** 2) * h)\n    \n    \ndef right_cylinder_volume(r, h):\n    '''\n    Write a function to find the volume of a right cylinder from its radius and height.\n    '''\n    print(math.pi * (r ** 2) * h)\n    \n    \ndef right_sphere_area(r):\n    '''\n    Write a function to find the area of a right sphere from its radius.\n    '''\n    print(math.pi * (r ** 2))\n    \n    \ndef right_sphere_volume(r):\n    '''\n    Write a function to find the volume of a right sphere from its radius.\n    '''\n    print(math.pi * (r ** 3))\n    \n    \ndef right_hemisphere_area(l):\n    '''\n    Write a function to find the area of a right hemisphere from its length.\n    '''\n    print(math.pi * (l ** 2))\n    \n    \ndef right_hemisphere_volume(l):\n    '''\n    Write a function to find the volume of a right hemisphere from its length.\n    '''\n    print(math.pi * (l ** 3))\n    \n    \ndef right_sphere_area(r):\n    '''\n    Write a function to find the area of a right spher",
        "num_ids": 15
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = 5 * a\n    return a + (math.sqrt(5) - 1) * a / 2\n    \nprint(perimeter_pentagon(10))",
        "num_ids": 41
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<0:\n        raise ValueError('Negative value')\n    return 4*(a**2)/(1-math.sqrt(1+4*(math.pow(a,2))))\n",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2*a*math.sin(math.pi/5)\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2*(a**0.5)\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * math.sqrt(5)\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = a * 5 / 2\n    return 4 * (s * s - math.sqrt(3 * s * s - 4 * s))\n",
        "num_ids": 36
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(5)*a\n    \n",
        "num_ids": 15
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5*(1+math.sqrt(5)))//2\n",
        "num_ids": 22
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    count = 0\n    s = s.replace(' ','')\n    s = s.replace('.','')\n    s = s.replace(';',' ')\n    s = s.replace(',','')\n    s = s.replace('-',' ')\n    s = s.replace(':',' ')\n    s = s.replace('/',' ')\n    s = s.replace('\\n','')\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n",
        "num_ids": 142
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    return s.count('std')\n",
        "num_ids": 19
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    while True:\n        if s.find('std')!= -1:\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    while s.find('std')!= -1:\n        count += 1\n        s = s[s.find('std') + 4:]\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    i = s.find('std')\n    s = s[:i] + '0' + s[i+3:]\n    return s.count('0')\n",
        "num_ids": 41
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = 0\n    for i in s:\n        if i == 'd':\n            c += 1\n    return c\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        for i in range(len(test_tuple)):\n            assert type(test_tuple[i]) == type(test_tuple[0])\n    except AssertionError:\n        print('[ERROR] check_type: All the elements of a list must be of same data type.')\n        raise AssertionError\n    else:\n        print('[SUCCESS] check_type: All the elements of a list must be of same data type.')\n        return True\n",
        "num_ids": 118
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    tup1 = (1,2,3,4,\"hello\", \"world\", \"spam\", \"eggs\")\n    tup2 = ('hello', 'world','spam', 'eggs')\n    tup3 = ('hello', 'world')\n    tup4 = (1)\n    tup5 = (1,2,3)\n",
        "num_ids": 85
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if test_tuple[0] == 'apple' and type(test_tuple[1]) == int and type(test_tuple[2]) == str and type(test_tuple[3]) == float and type(test_tuple[4]) == bool:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 89
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple_lst = []\n    for i in test_tuple:\n        test_tuple_lst.append(i)\n    \n    # for i in test_tuple:\n    #     print(i)\n    print(test_tuple_lst)\n    print(type(test_tuple_lst[0]))\n    print(type(test_tuple_lst[1]))\n    print(type(test_tuple_lst[2]))\n    print(type(test_tuple_lst[3]))\n    print(type(test_tuple_lst[4]))\n    print(type(test_tuple_lst[5]))\n    print(type(test_tuple_lst[6]))\n    print(type(test_tuple_lst[7]))\n",
        "num_ids": 206
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count_int = 0\n    count_float = 0\n    count_str = 0\n    count_list = 0\n    count_bool = 0\n    for value in test_tuple:\n        if value.is_integer():\n            count_int += 1\n        elif value.is_floating():\n            count_float += 1\n        elif value.is_string():\n            count_str += 1\n        elif value.is_list():\n            count_list += 1\n        elif value.is_boolean():\n            count_bool += 1\n    print(f\"{count_int} integers, {count_float} floating values, {count_str} strings and {count_list} lists and {count_bool} boolean.\")\n    if count_int == len(test_tuple):\n        print(\"All data types are same.\")\n",
        "num_ids": 199
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # return type(test_tuple[0])==type(test_tuple[1])==type(test_tuple[2])\n    # return type(test_tuple[0])==type(test_tuple[1])\n    # return all(type(i)==type(test_tuple[0]) for i in test_tuple)\n    return all(type(i)==type(test_tuple[0]) for i in test_tuple)\n    # return all(type(i)==type(test_tuple[0]) for i in test_tuple)\n",
        "num_ids": 141
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_type_list = list(map(type,test_tuple))\n    if len(set(test_type_list)) == 1:\n        return True\n    else:\n        return False\n    \nprint(check_type([1,'a',2.5,'abc',True,False]))\n",
        "num_ids": 73
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    first = 0\n    last = n - 1\n    while first <= last:\n        middle = (first + last)//2\n        # print(middle)\n        # print(arr[middle])\n        if arr[middle] == x:\n            return True\n        if arr[middle] > x:\n            last = middle - 1\n        else:\n            first = middle + 1\n    return False\n",
        "num_ids": 94
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # your code here\n    start_idx, end_idx = 0, n-1\n    return True if (start_idx + end_idx) % 2!= 0 else False\n",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge cases\n    if len(arr) == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return arr[0] == arr[1]\n",
        "num_ids": 53
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > (n/2):\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if(x in arr):\n        return True\n    else:\n        for i in range(0,n):\n            if arr[i] == x:\n                c = arr.count(x)\n                if c > n//2:\n                    return True\n                else:\n                    return False\n",
        "num_ids": 70
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n-1\n    while i < j:\n        mid = (i+j) // 2\n        if arr[mid] == x:\n            i = mid\n            j = mid-1\n        elif arr[mid] > x:\n            j = mid - 1\n        elif arr[mid] < x:\n            i = mid + 1\n    return i\n",
        "num_ids": 94
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n",
        "num_ids": 33
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    i = 0\n    while count!= 0:\n        if arr[i] == x:\n            count += 1\n            i += 1\n        elif arr[i]!= x:\n            count -= 1\n            i += 1\n    return True if i < n/2 else False\n",
        "num_ids": 74
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #print(arr[0], arr[1], arr[2])\n    if n==1:\n        if arr[0]==x:\n            return True\n        else:\n            return False\n    if n==2:\n        if arr[0]==x or arr[1]==x:\n            return True\n        else:\n            return False\n    if arr[0]==x:\n        return True\n    if arr[n-1]==x:\n        return True\n    if (x in arr[0:n-1]):\n        return True\n    else:\n        return False\n",
        "num_ids": 141
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > (n/2):\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0\n    while n:\n        cnt += n & 1\n        n >>= 1\n    return cnt\n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # return bin(n).count('1')\n    return n.bit_length()\n",
        "num_ids": 23
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = bin(n)\n    n = n.replace(\"0b\", \"\")\n    return len(n)\n",
        "num_ids": 30
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n!= 0:\n        if n & 1:\n            c += 1\n        n >>= 1\n    return c\n    \nif __name__ == \"__main__\": \n    # function call\n    print(count_Set_Bits(57)) \n    print(count_Set_Bits(101)) \n    print(count_Set_Bits(11)) \n    print(count_Set_Bits(120)) \n    \n    \n    \n    \n    \n",
        "num_ids": 122
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if i & i == i:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # function to check if the given number is negative, positive or zero \n    def is_Negative_Positive_Zero(n): \n        if (n < 0):  \n            return \"negative\"\n        elif (n == 0):  \n            return \"zero\"\n        else:  \n            return \"positive\"\n",
        "num_ids": 77
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n = n & (n - 1)\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n!= 0):\n        count += 1\n        n = n & (n-1)\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "num_ids": 46
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(list(filter(lambda x: x%2==0, list(str))))\n",
        "num_ids": 26
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i%2!=0:\n            result += str[i]\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_val = \"\".join(ch for i, ch in enumerate(str) if i%2 == 1)\n    return odd_val\n",
        "num_ids": 36
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(filter(lambda x: x in str and str.index(x) % 2 == 0,str))\n",
        "num_ids": 31
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Replace pass below\n    s = 'abcdefgh'\n    new_string = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_string += s[i]\n    return new_string\n",
        "num_ids": 61
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    a=str.replace(\" \",\"\")\n    d=str.split(\" \")\n    lst=[]\n    for i in range(len(d)):\n        if i%2==0:\n            lst.append(d[i])\n    return \" \".join(lst)\n",
        "num_ids": 71
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list1 = list(str)\n    new_list = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            new_list.append(list1[i])\n    string = \"\".join(new_list)\n    return string\n",
        "num_ids": 69
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([x for i, x in enumerate(str) if i % 2 == 0])\n",
        "num_ids": 27
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    temp = []\n    for i in range(0, len(str)):\n        if i%2 == 0:\n            temp.append(str[i])\n",
        "num_ids": 40
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a,b,c\n",
        "num_ids": 10
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b and a<c):\n        min_value = a\n    elif (b<a and b<c):\n        min_value = b\n    else:\n        min_value = c\n    return min_value\n",
        "num_ids": 58
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\nmin_of_three(1,2,3)",
        "num_ids": 25
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b: \n        if a<c:\n            return a\n        else:\n            return c \n    else:\n        if b<c:\n            return b\n        else:\n            return c\nprint(min_of_three(5,7,9))\n",
        "num_ids": 68
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\nprint(min_of_three(10,20,30))\n",
        "num_ids": 56
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b and a<c):\n        return a\n    elif (b<a and b<c):\n        return b\n    else:\n        return c\n",
        "num_ids": 43
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n",
        "num_ids": 47
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a = (r - l) + 1\n    for i in range(0, a):\n        if (n & (1 << i))!= 0:\n            return False\n    return True\n    \n",
        "num_ids": 49
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    no_of_bits = r-l+1\n    if (n==0):\n        return True\n    if (n<0):\n        n = n & 0xffffffff\n    bin_num = bin(n)\n    bin_num = bin_num[2:]\n    for i in range(0,no_of_bits):\n        if (bin_num[i]=='1'):\n            return False\n    return True\n",
        "num_ids": 105
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # code here\n    all_unset_bits = 0\n    for i in range(l,r+1):\n        all_unset_bits = all_unset_bits | i\n",
        "num_ids": 47
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    result = []\n    for i in range(l, r+1):\n        x = format(i, 'b')\n        if '0' in x:\n            result.append(i)\n    return result\n    \ndef all_Bits_Set_In_The_Given_Range_Using_XOR(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    result = []\n    for i in range(l, r+1):\n        x = format(i, 'b')\n        if '1' in x:\n            result.append(i)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    binary_number = \"{0:b}\".format(n)\n    #print(binary_number)\n    if l == r:\n        if binary_number[l] == '1':\n            return False\n        else:\n            return True\n    else:\n        if binary_number[l] == '1' or binary_number[r] == '1':\n            return False\n        else:\n            return True\n",
        "num_ids": 99
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    for i in range(0,n):\n        for j in range(l,r+1):\n            if i&j:\n                return False\n    return True\n    \ndef binary_to_decimal(binary_number):\n    binary_number = str(binary_number)\n    decimal_number = 0\n    for index in range(len(binary_number)):\n        decimal_number += 2**index * int(binary_number[index])\n    return decimal_number\n",
        "num_ids": 117
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #print (n,l,r)\n    \n    if n == 0:\n        return \"Given number is 0. No Bits are set.\"\n    \n    if l == 0 and r == 0:\n        return \"Given range is empty.\"\n    \n    if l > r:\n        return \"Given range is not valid.\"\n    \n    if l == r:\n        return \"No Bits are set.\"\n    \n    if n == 2**l:\n        return \"Given number is a power of 2\"\n    \n    if (2**(r-1)) <= n:\n        return \"Given number is a power of 2\"\n    \n    if n!= 0:\n        for i in range(l,r):\n            if n & (1<<i):\n                return \"Given number is not a power of 2\"\n    return \"Given number is a power of 2\"\n",
        "num_ids": 202
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (r-l)%2!= 0:\n        return False\n    for i in range(l,r):\n        if i&1 == 1:\n            return False\n    return True\n    ",
        "num_ids": 49
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    res = 0\n    for i in range(n):\n        res = res | l\n    for i in range(n):\n        res = res & (r - l)\n    if res:\n        return 'No'\n    else:\n        return 'Yes'",
        "num_ids": 65
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        count += i.bit_length()\n    if count == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 53
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # return sorted(arr[:n]) + sorted(arr[n:], key=lambda x: x < 0)\n    return sorted(arr, key=lambda x: x < 0) + sorted(arr[n:], key=lambda x: x >= 0)\n",
        "num_ids": 63
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            j += 1\n    return arr\n",
        "num_ids": 57
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    print(arr)\n    pos = n - 1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos -= 1\n",
        "num_ids": 64
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr[:n], ans = sorted(arr[:n], reverse=True), []\n    for i in arr[:n]:\n        if i >= 0:\n            ans.append(i)\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            ans.append(arr[i])\n    return ans\n",
        "num_ids": 86
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # edge case - empty list\n    if len(arr) == 0:\n        return arr\n",
        "num_ids": 26
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not arr or n <= 0:\n        return None\n    \n    neg_idx = 0\n    pos_idx = n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_idx = i\n            break\n    \n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg_idx] = arr[neg_idx], arr[i]\n            neg_idx += 1\n    \n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            arr[pos_idx], arr[i] = arr[i], arr[pos_idx]\n            pos_idx += 1\n    \n    return arr\n",
        "num_ids": 183
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    if neg:\n        neg.sort()\n    if pos:\n        pos.sort()\n    if neg:\n        arr[0:len(neg)] = neg\n    if pos:\n        arr[len(neg):len(arr)] = pos\n",
        "num_ids": 113
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n",
        "num_ids": 14
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    neg_idx = 0\n    pos_idx = 0\n    while pos_idx < n:\n        if arr[pos_idx] < 0:\n            arr[pos_idx], arr[neg_idx] = arr[neg_idx], arr[pos_idx]\n            neg_idx += 1\n        pos_idx += 1\n",
        "num_ids": 90
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    if arr is not None and len(arr) > 0 and n >= 0:\n        for i in range(n):\n            if arr[i] < 0:\n                neg.append(arr[i])\n            else:\n                pos.append(arr[i])\n        i = 0\n        for j in range(n):\n            if neg[i] < 0:\n                pos.append(neg[i])\n                neg.pop(i)\n            else:\n                neg.append(pos[i])\n                pos.pop(i)\n        return neg + pos\n    else:\n        return None\n",
        "num_ids": 152
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = str1.replace(\" \", char)\n    return result\n",
        "num_ids": 18
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == '':\n        return char\n    else:\n        return str1.replace(' ','')\n",
        "num_ids": 29
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #Initialize blank string\n    blank_string = ''\n    # Loop through each character of the string\n    for i in range(len(str1)):\n        # If the character is blank, add the character to the blank string\n        if str1[i] =='':\n            blank_string = blank_string + char\n        else:\n            # If the character is not blank, add the character to the blank string\n            blank_string = blank_string + str1[i]\n    return blank_string\n",
        "num_ids": 119
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n    str1 = str1.replace(\" \",\"\")\n    return char + str1 + char\n",
        "num_ids": 30
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == \" \":\n        str1 = char\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    h1=[]\n    a=[]\n    for i in range(n):\n        heapq.heappush(h1,i)\n    for i in range(len(list1)):\n        if i==0:\n            a.append(list1[i])\n        else:\n            if list1[i]>list1[h1[0]]:\n                heapq.heapreplace(h1,i)\n                a.append(list1[i])\n    return a\n",
        "num_ids": 120
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create an empty list\n    heap = []\n    # iterate over the list and append the items to the heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # iterate over the list and pop the items from the heap\n    for i in range(len(list1) - n, len(list1)):\n        heapq.heappop(heap)\n    return heap\n",
        "num_ids": 110
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\ndef larg_sum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list2 = []\n    for i in range(n):\n        list2.append(list1[i])\n    return list2\ndef larg_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    list2 = []\n    for i in range(n):\n        list2.append(list1[i])\n    return list2\ndef larg_sort_b(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    list2 = []\n    for i in range(n):\n        list2.append(list1[i])\n    return list2\ndef list_sort(list1):\n    '''\n    Write a function that takes in a list and returns a sorted list.\n    '''\n    list1.sort()\n    return list1\ndef list_sort_b(list1):\n    '''\n    Write a function that takes in a list and returns a sorted list.\n    '''\n    return sorted(list1)\ndef list_reverse(list1):\n    '''\n    Write a function that takes in a list and returns a reversed list.\n    '''\n    list1.reverse()\n    return list1\ndef list_reverse_b(list1):\n    '''\n    Write a function that takes in a list and returns a reversed list.\n    '''\n    return list1[::-1]\ndef last_index(list1,element):\n    '''\n    Write a function that takes in a list and an element and returns the last index of that element.\n    '''\n    return list1.index(element)\ndef last_index_b(list1,element):\n    '''\n    Write a function that takes in a list and an element and returns the last index of that element.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == element:\n            return i\ndef first_index(list1,element):\n    '''\n    Write a function that takes in a list and an element and returns the first index of that element.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == element:\n            return i\ndef first_index_b(list1,element):\n    '''\n    Write a function that takes in a list and an element and returns the first index of that element.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == element:\n            return i\ndef count_element(list1,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the element appears in the list.\n    '''\n    return list1.count(element)\ndef count_element_b(list1,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the element appears in the list.\n    '''\n    return list1.count(element)\ndef max_element(list1):\n    '''\n    Write a function that takes in a list and returns the largest element in the list.\n    '''\n    max_el = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] > max_el:\n            max_el = list1[i]\n    return max_el\ndef max_element_b(list1):\n    '''\n    Write a function that takes in a list and returns the largest element in the list.\n    '''\n    return max(list1)\ndef min_element(list1):\n    '''\n    Write a function that takes in a list and returns the smallest element in the list.\n    '''\n    min_el = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] < min_el:\n            min_el = list1[i]\n    return min_el\ndef min_element_b(list1):\n    '''\n    Write a function that takes in a list and returns the smallest element in the list.\n    '''\n    return min(list1)\ndef max_min_element(list1):\n    '''\n    Write a function that takes in a list and returns the minimum and maximum elements in the list.\n    '''\n    return (min(list1),max(list1))\ndef max_min_element_b(list1):\n    '''\n    Write a function that takes in a list and returns the minimum and maximum elements in the list.\n    '''\n    return (min(list1),max(list1))\ndef count_char(string1,char1):\n    '''\n    Write a function that takes in a string and an element and returns the number of times the element appears in the string.\n    '''\n    return string1.count(char1)\ndef count_char_b(string1,char1):\n    '''\n    Write a function that takes in a string and an element and returns the number of times the element appears in the string.\n    '''\n    return string1.count(char1)\ndef max_char(string1):\n    '''\n    Write a function that takes in a string and returns the character that appears the most in the string.\n    '''\n    return max(set(string1),key=string1.count)\ndef max_char_b(string1):\n    '''\n    Write a function that takes in a string and returns the character that appears the most in the string.\n    '''\n    return max(set(string1),key=string1.count)\ndef min_char(string1):\n    '''\n    Write a function that takes in a string and returns the character that appears the least in the string.\n    '''\n    return min(set(string1),key=string1.count)\ndef min_char_b(string1):\n    '''\n    Write a function that takes in a string and returns the character that appears the least in the string.\n    '''\n    return min(set(string1),key=string1.count)\ndef char_count(string1,char1):\n    '''\n    Write a function that takes in a string and an element and returns the number of times the element appears in the string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if char1 == string1[i]:\n            count += 1\n    return count\ndef char_count_b(string1,char1):\n    '''\n    Write a function that takes in a string and an element and returns the number of times the element appears in the string.\n    '''\n    return string1.count(char1)\ndef second_max_char(string1):\n    '''\n    Write a function that takes in a string and returns the second most common character in the string.\n    '''\n    char_count_dict = {}\n    for char in string1:\n        char_count_dict[char] = string1.count(char)\n    char_count_dict = sorted(char_count_dict.items(),key=lambda x:x[1],reverse=True)\n    return char_count_dict[1][0]\ndef second_max_char_b(string1):\n    '''\n    Write a function that takes in a string and returns the second most common character in the string.\n    '''\n    char_count_dict = {}\n    for char in string1:\n        char_count_dict[char] = string1.count(char)\n    char_count_dict = sorted(char_count_dict.items(),key=lambda x:x[1],reverse=True)\n    return char_count_dict[1][0]\ndef third_max_char(string1):\n    '''\n    Write a function that takes in a string and returns the third most common character in the string.\n    '''\n    char_count_dict = {}\n    fo",
        "num_ids": 13
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for num in list1[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap,num)\n    return heap\n",
        "num_ids": 65
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    heapq.heapify(list1)\n    final_list = []\n    for i in range(n):\n        final_list.append(heapq.heappop(list1))\n    return final_list\n",
        "num_ids": 58
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    return list1[:n]\n    pass\n",
        "num_ids": 25
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return []\n    else:\n        list1.sort()\n        return list1[:n]\n",
        "num_ids": 36
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    n = 3\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 34
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    while list1:\n        heapq.heappush(list2,-1*list1[0])\n        del list1[0]\n        list1=list(filter(lambda x:x>-1*list2[0],list1))\n    return list2\nprint(larg_nnum([5,2,8,1,7,0,-1,-2,6],2))\n",
        "num_ids": 100
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1)\n    if(len(list1)<n):\n        return list1\n    return list1[:n]\n",
        "num_ids": 39
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*r + 2*math.pi*h\n",
        "num_ids": 26
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    \n    # use variables from earlier functions\n    vol = 4/3 * np.pi * r**3\n    surface_area = 2 * np.pi * r * h\n    \n    return vol * surface_area\n",
        "num_ids": 59
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area, R + 2*pi*h, which is the surface area of a hollow cylinder.\n    return(pi*r*(r+2*pi*h))\n",
        "num_ids": 47
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    p=math.pi\n    A=p*r**2\n    a=2*p*r\n    B=math.pi*r**2\n    s=A*h\n    return s\n",
        "num_ids": 53
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of a cylinder\n    # Using the formula.\n",
        "num_ids": 21
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=math.pi\n    r=float(r)\n    h=float(h)\n    if(r<0):\n        print('r cannot be a negative number')\n        return 0\n    else:\n        return 2*pi*r*(r+h)+(2*pi*r**2)+(2*pi*r*h)\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pi=math.pi\n    r=float(r)\n    return 4*pi*r*(r**2)\n",
        "num_ids": 31
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    h=float(h)\n    r=float(r)\n    import math\n    area=2*math.pi*r*(h/2)\n    return area\n",
        "num_ids": 43
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    a=2*math.pi*r\n    area=h*a\n    return area\n    \ndef lateral_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=2*math.pi*r\n    area=h*a\n    return area\n    \ndef lateral_cone(r1,r2,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    a=2*math.pi*r2\n    area=h*a\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #height of the cylinder\n    height=h\n    #radius of the cylinder\n    radius=r\n    #total surface area\n    surfacearea=2*3.14*radius*height+2*3.14*radius*radius\n    #returning the total surface area of the cylinder\n    return surfacearea\ndef lateral_surface_cylinder(r,h,w):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #height of the cylinder\n    height=h\n    #radius of the cylinder\n    radius=r\n    #width of the cylinder\n    width=w\n    #total surface area\n    surfacearea=2*3.14*radius*height+2*3.14*radius*radius\n    #returning the total surface area of the cylinder\n    return surfacearea\ndef lateral_surface_cylinder_alt(r,h,w):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #height of the cylinder\n    height=h\n    #radius of the cylinder\n    radius=r\n    #width of the cylinder\n    width=w\n    #total surface area\n    surfacearea=2*3.14*radius*height+2*3.14*radius*radius\n    #returning the total surface area of the cylinder\n    return surfacearea\ndef lateral_surface_cylinder_alt2(r,h,w):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #height of the cylinder\n    height=h\n    #radius of the cylinder\n    radius=r\n    #width of the cylinder\n    width=w\n    #total surface area\n    surfacearea=2*3.14*radius*height+2*3.14*radius*radius\n    #returning the total surface area of the cylinder\n    return surfacearea\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    #radius of the sphere\n    radius=r\n    #total surface area\n    surfacearea=4*3.14*radius*radius\n    #returning the total surface area of the sphere\n    return surfacearea\ndef lateral_surface_sphere_alt(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    #radius of the sphere\n    radius=r\n    #total surface area\n    surfacearea=4*3.14*radius*radius\n    #returning the total surface area of the sphere\n    return surfacearea\ndef lateral_surface_sphere_alt2(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    #radius of the sphere\n    radius=r\n    #total surface area\n    surfacearea=4*3.14*radius*radius\n    #returning the total surface area of the sphere\n    return surfacearea\ndef lateral_surface_sphere_alt3(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    #radius of the sphere\n    radius=r\n    #total surface area\n    surfacearea=4*3.14*radius*radius\n    #returning the total surface area of the sphere\n    return surfacearea\ndef lateral_surface_ellipsoid(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid.\n    '''\n    #radius of the ellipsoid\n    radius=r\n    #height of the ellipsoid\n    height=h\n    #total surface area\n    surfacearea=2*3.14*radius*radius*height\n    #returning the total surface area of the ellipsoid\n    return surfacearea\ndef lateral_surface_ellipsoid_alt(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid.\n    '''\n    #radius of the ellipsoid\n    radius=r\n    #height of the ellipsoid\n    height=h\n    #total surface area\n    surfacearea=2*3.14*radius*radius*height\n    #returning the total surface area of the ellipsoid\n    return surfacearea\ndef lateral_surface_ellipsoid_alt2(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid.\n    '''\n    #radius of the ellipsoid\n    radius=r\n    #height of the ellipsoid\n    height=h\n    #total surface area\n    surfacearea=2*3.14*radius*radius*height\n    #returning the total surface area of the ellipsoid\n    return surfacearea\ndef lateral_surface_ellipsoid_alt3(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid.\n    '''\n    #radius of the ellipsoid\n    radius=r\n    #height of the ellipsoid\n    height=h\n    #total surface area\n    surfacearea=2*3.14*radius*radius*height\n    #returning the total surface area of the ellipsoid\n    return surfacearea\ndef lateral_surface_ellipsoid_alt4(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid.\n    '''\n    #radius of the ellipsoid\n    radius=r\n    #height of the ellipsoid\n    height=h\n    #total surface area\n    surfacearea=2*3.14*radius*radius*height\n    #returning the total surface area of the ellipsoid\n    return surfacearea\ndef lateral_surface_ellipsoid_alt5(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid.\n    '''\n    #radius of the ellipsoid\n    radius=r\n    #height of the ellipsoid\n    height=h\n    #total surface area\n    surfacearea=2*3.14*radius*radius*height\n    #returning the total surface area of the ellipsoid\n    return surfacearea\ndef lateral_surface_ellipsoid_alt6(r,h):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid.\n    '''\n    #radius of the ellipsoid\n    radius=r\n    #height of the ellipsoid\n    height=h\n    #total surface area\n    surfacearea=2*3.14*radius*radius*height\n    #returning the total surface area of the ellipsoid\n    return surfacearea\ndef lateral_surface_spheroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a spheroid.\n    '''\n    #radius of the spheroid\n    radius=r\n    #height of the spheroid\n    height=h\n    #total surface area\n    surfacearea=3.14*radius*radius*height\n    #returning the total surface area of the spheroid\n    return surfacearea\ndef lateral_surface_spheroid_alt(r,h):\n    '''\n    Write a function to find the lateral surface area of a spheroid.\n    '''\n    #radius of the spheroid\n    radius=r\n    #height of the spheroid\n    height=h\n    #total surface area\n    surfacearea=3.14*radius*radius*height\n    #returning the total surface area of the spheroid\n    return surfacearea\ndef lateral_surface_spheroid_alt2(r,h):\n    '''\n    Write a function to find the lateral surface area of a spheroid.\n    '''\n    #radius of the spheroid\n    radius=r\n    #height of the spheroid\n    height=h\n    #total surface area\n    surfacearea=3.14*radius*radius*height\n    #returning the total surface area of the spheroid\n    return surfacearea\ndef lateral_surface_spheroid_alt3(r,h):\n    '''\n    Write a function to find the lateral surface area of a spheroid.\n    '''\n    #radius of the spheroid\n    radius=r\n    #height of the spheroid\n    height=h\n    #total surface area\n    surfacearea=3.14*radius*radius*height\n    #returning the total surface area of the s",
        "num_ids": 61
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2 * pi * r * h\n    area = pi * r**2 * (h**2 + 2 * pi * r * h)\n    return area\n",
        "num_ids": 40
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    ",
        "num_ids": 9
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = int(input('Enter the length: '))\n    return l**3\n",
        "num_ids": 22
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return int(l**3)\n",
        "num_ids": 11
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 1/3 * (l ** 3)\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l * l * l\n    return volume\n",
        "num_ids": 15
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    return (4/3) * (math.pi * r**3)\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    return (math.pi * r**2 * h)\n",
        "num_ids": 16
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #hint: the volume of a cube is the base * height * length.\n    #first, ask for the length of the cube.\n    side_length = float(input(\"Enter the side length of the cube: \"))\n",
        "num_ids": 54
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Your code here\n    return n | 2**(n.bit_length() - 1)\n",
        "num_ids": 25
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Your code here\n    return (n | 0x01) << 1\nprint(even_bit_set_number(6))\n",
        "num_ids": 33
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # n = int(input())\n    # num = n ^ 0b1111\n    # print(num)\n    # print(type(n))\n    # print(type(n & ~0b1111))\n    # print(n ^ 0b1111)\n",
        "num_ids": 62
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #n = int(input())\n    #print('Original Number: ',n)\n    n = int(bin(n)[2:],2)\n    #print('Number after conversion: ',n)\n    #print('Number after modulus: ',n%2)\n    n = n%2\n    print('Number after bitwise AND: ',n)\n    \neven_bit_set_number(99)\neven_bit_set_number(68)\neven_bit_set_number(25)\neven_bit_set_number(80)\neven_bit_set_number(100)\neven_bit_set_number(11)\neven_bit_set_number(17)\neven_bit_set_number(12)\neven_bit_set_number(9)\neven_bit_set_number(27)\neven_bit_set_number(17)\neven_bit_set_number(99)\neven_bit_set_number(22)\neven_bit_set_number(48)\neven_bit_set_number(50)\neven_bit_set_number(101)\neven_bit_set_number(54)\neven_bit_set_number(77)\neven_bit_set_number(26)\neven_bit_set_number(88)\neven_bit_set_number(91)\neven_bit_set_number(1)\neven_bit_set_number(32)\neven_bit_set_number(80)\neven_bit_set_number(67)\neven_bit_set_number(89)\neven_bit_set_number(89)\neven_bit_set_number(46)\neven_bit_set_number(72)\neven_bit_set_number(98)\neven_bit_set_number(65)\neven_bit_set_number(76)\neven_bit_set_number(29)\neven_bit_set_number(81)\neven_bit_set_number(79)\neven_bit_set_number(45)\neven_bit_set_number(15)\neven_bit_set_number(50)\neven_bit_set_number(1)\neven_bit_set_number(48)\neven_bit_set_number(91)\neven_bit_set_number(53)\neven_bit_set_number(55)\neven_bit_set_number(77)\neven_bit_set_number(54)\neven_bit_set_number(23)\neven_bit_set_number(17)\neven_bit_set_number(22)\neven_bit_set_number(20)\neven_bit_set_number(78)\neven_bit_set_number(1)\neven_bit_set_number(88)\neven_bit_set_number(46)\neven_bit_set_number(49)\neven_bit_set_number(74)\neven_bit_set_number(25)\neven_bit_set_number(2)\neven_bit_set_number(65)\neven_bit_set_number(26)\neven_bit_set_number(37)\neven_bit_set_number(61)\neven_bit_set_number(88)\neven_bit_set_number(72)\neven_bit_set_number(19)\neven_bit_set_number(13)\neven_bit_set_number(56)\neven_bit_set_number(27)\neven_bit_set_number(58)\neven_bit_set_number(70)\neven_bit_set_number(14)\neven_bit_set_number(23)\neven_bit_set_number(54)\neven_bit_set_number(43)\neven_bit_set_number(68)\neven_bit_set_number(43)\neven_bit_set_number(54)\neven_bit_set_number(11)\neven_bit_set_number(55)\neven_bit_set_number(89)\neven_bit_set_number(41)\neven_bit_set_number(61)\neven_bit_set_number(79)\neven_bit_set_number(3)\neven_bit_set_number(37)\neven_bit_set_number(43)\neven_bit_set_number(38)\neven_bit_set_number(38)\neven_bit_set_number(31)\neven_bit_set_number(46)\neven_bit_set_number(28)\neven_bit_set_number(67)\neven_bit_set_number(68)\neven_bit_set_number(32)\neven_bit_set_number(25)\neven_bit_set_number(27)\neven_bit_set_number(2)\neven_bit_set_number(10)\neven_bit_set_number(70)\neven_bit_set_number(76)\neven_bit_set_number(50)\neven_bit_set_number(31)\neven_bit_set_number(65)\neven_bit_set_number(77)\neven_bit_set_number(5)\neven_bit_set_number(74)\neven_bit_set_number(55)\neven_bit_set_number(73)\neven_bit_set_number(68)\neven_bit_set_number(43)\neven_bit_set_number(37)\neven_bit_set_number(34)\neven_bit_set_number(53)\neven_bit_set_number(23)\neven_bit_set_number(36)\neven_bit_set_number(36)\neven_bit_set_number(4)\neven_bit_set_number(31)\neven_bit_set_number(31)\neven_bit_set_number(3)\neven_bit_set_number(36)\neven_bit_set_number(32)\neven_bit_set_number(31)\neven_bit_set_number(37)\neven_bit_set_number(13)\neven_bit_set_number(45)\neven_bit_set_number(38)\neven_bit_set_number(5)\neven_bit_set_number(55)\neven_bit_set_number(46)\neven_bit_set_number(6)\neven_bit_set_number(34)\neven_bit_set_number(58)\neven_bit_set_number(5)\neven_bit_set_number(36)\neven_bit_set_number(54)\neven_bit_set_number(22)\neven_bit_set_number(4)\neven_bit_set_number(2)\neven_bit_set_number(72)\neven_bit_set_number(11)\neven_bit_set_number(9)\neven_bit_set_number(37)\neven_bit_set_number(53)\neven_bit_set_number(20)\neven_bit_set_number(9)\neven_bit_set_number(43)\neven_bit_set_number(65)\neven_bit_set_number(14)\neven_bit_set_number(51)\neven_bit_set_number(49)\neven_bit_set_number(40)\neven_bit_set_number(47)\neven_bit_set_number(2)\neven_bit_set_number(3)\neven_bit_set_number(46)\neven_bit_set_number(22)\neven_bit_set_number(36)\neven_bit_set_number(36)\neven_bit_set_number(3)\neven_bit_set_number(41)\neven_bit_set_number(22)\neven_bit_set_number(18)\neven_bit_set_number(48)\neven_bit_set_number(26)\neven_bit_set_number(20)\neven_bit_set_number(58)\neven_bit_set_number(57)\neven_bit_set_number(14)\neven_bit_set_number(26)\neven_bit_set_number(59)\neven_bit_set_number(23)\neven_bit_set_number(48)\neven_bit_set_number(52)\neven_bit_set_number(13)\neven_bit_set_number(5)\neven",
        "num_ids": 2012
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #using mask\n    mask = 0b1\n    return n | mask\n",
        "num_ids": 20
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #write your python function here\n    \n    return (n | (1<<n.bit_length()))\n",
        "num_ids": 28
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for i in range(32):\n        result += (n & 1) << i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # print('EvenBitSetter')\n    n = n | (1<<1)\n    n = n | (1<<2)\n    n = n | (1<<3)\n    n = n | (1<<4)\n    n = n | (1<<5)\n    n = n | (1<<6)\n    n = n | (1<<7)\n    n = n | (1<<8)\n    n = n | (1<<9)\n    n = n | (1<<10)\n    n = n | (1<<11)\n    n = n | (1<<12)\n    n = n | (1<<13)\n    n = n | (1<<14)\n    n = n | (1<<15)\n    return n\n",
        "num_ids": 181
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return 1<<(n.bit_length()-1)\n",
        "num_ids": 17
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for item in test_list:\n        d.setdefault(item, 0)\n        d[item] += 1\n    return d\n",
        "num_ids": 39
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #Initializing the empty dictionary\n    count_dict = {}\n",
        "num_ids": 17
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    new_d = {}\n    for i in test_list:\n        if i in new_d:\n            new_d[i] += 1\n        else:\n            new_d[i] = 1\n    return new_d\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        d[i] = d.get(i,0) + 1\n    return d\n",
        "num_ids": 37
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n",
        "num_ids": 20
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for item in test_list:\n        occurences[item] = item in occurences.keys() + 1\n    return occurences\n",
        "num_ids": 43
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    '''\n    def check_occurences(test_list):\n    '''\n    # test_list = [('a','b','c'), ('a','b','c'),('a','b','c'), ('a','b','c'),('a','b','c'), ('a','b','c')]\n    # print(test_list)\n    # return dict(Counter(test_list))\n    return dict(Counter(dict(test_list).values()))\n    # return dict(Counter(dict(test_list)))\n",
        "num_ids": 104
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # list = [[(1, 2), (2, 3)], [(3, 4)], [(1, 2), (2, 3), (3, 4), (4, 5)]]\n    # output = {(1, 2): 1, (2, 3): 2, (3, 4): 1, (4, 5): 1}\n",
        "num_ids": 80
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    answer = {}\n    for element in test_list:\n        key = str(element)\n        if key in answer:\n            answer[key] += 1\n        else:\n            answer[key] = 1\n",
        "num_ids": 51
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for elem in test_list:\n        if elem in occurences:\n            occurences[elem] += 1\n        else:\n            occurences[elem] = 1\n    return occurences\n",
        "num_ids": 61
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # Solution 1\n    '''\n    Number of substrings in a string : C(n, k) = n!/k!/(n-k)!\n    Total number of substrings = 2^n\n    Total number of substrings with length = 2^n \n    Total number of substrings with length > 2^n\n    Total number of substrings with length < 2^n\n    '''\n    \n    # Solution 2\n    '''\n    Efficient way to find the number of substrings is to keep track of the starting position and the end position of the substring.\n    '''\n    \n    count = 0\n    start = 0\n    end = 0\n    \n    for i in range(len(str)):\n        count = count + 1\n        end = end + 1\n        \n        while end < len(str) and str[end] not in str[start:end]:\n            end = end + 1\n        \n        if end == len(str):\n            break\n        \n        start = end\n        end = end + 1\n    \n    print(count)\n",
        "num_ids": 114
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #code here\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            count = count+1\n        else:\n            if str[i+1]!='':\n                count = count+1\n    print(count)\n",
        "num_ids": 72
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= \"\":\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    total_sub_strings = 0\n    n = len(str)\n    if n == 0:\n        return 0\n    for i in range(n):\n        for j in range(i, n+1):\n            if is_substring(str, i, j):\n                total_sub_strings += 1\n    return total_sub_strings\n",
        "num_ids": 83
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # first_occur = {}\n    # # for idx, char in enumerate(str):\n    # #     if char in first_occur:\n    # #         first_occur[char] = idx\n    # #     else:\n    # #         first_occur[char] = idx\n    # # return len(first_occur)\n    # first_occur = {}\n    # last_occur = {}\n    # for idx, char in enumerate(str):\n    #     if char in first_occur:\n    #         last_occur[char] = idx\n    #     else:\n    #         first_occur[char] = idx\n    # count = 0\n    # for key, val in first_occur.items():\n    #     if val > last_occur[key]:\n    #         count += val - last_occur[key]\n    # return count\n",
        "num_ids": 221
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)+1):\n            if str[i:j]==\"\":\n                break\n            count+=1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([s for s in str.split(' ') if s])\n",
        "num_ids": 20
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            sub = str[i:j]\n            if len(sub) > 0:\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # 1-3 2-5 3-6 4-8 5-9\n    # 1 - 3  = 1\n    # 3 - 6  = 3\n    # 6 - 8  = 2\n    # 8 - 9  = 1\n    count = 0\n    # print(type(count))\n",
        "num_ids": 70
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # return len(list(filter(lambda x: x!= '', str.split(' '))))\n    \n    # number_of_substrings = lambda x : len(list(filter(lambda x: x!= '', x.split(' '))))\n    # print(number_of_substrings('Hello, my name is Avinash and I am happy to learn python'))\n    \n    # print(list(filter(lambda x: x!= '', 'Hello, my name is Avinash and I am happy to learn python')))\n",
        "num_ids": 127
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def possible_sequences(n,m):\n        if n==0:\n            return 1\n        if n<0:\n            return 0\n        if n==1:\n            return m+1\n        a = possible_sequences(n-1,m)\n        b = possible_sequences(n-1,m+1)\n        c = a+b\n        return c\n",
        "num_ids": 92
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Your code here\n    def list_of_all_sublists(lst):\n        new_list = []\n        for length in range(1,len(lst) + 1):\n            for i in range(len(lst) - length + 1):\n                sub = lst[i:i+length]\n                new_list.append(sub)\n        return new_list\n    total_number = 0\n    for i in range(m,n+1):\n        sublist = list_of_all_sublists(list(range(1,i)))\n        total_number += len(sublist)\n    return total_number\n",
        "num_ids": 152
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    #create the first number that has to be <= 2*last_number\n    for i in range(1, m+1):\n        #add one to the current number in the sequence \n        current_number = i\n        #add the number of sequences of length i\n        for j in range(1,n+1):\n            #check if the current number is less than or equal to 2*last_number\n            if current_number <= 2*last_number:\n                #if it is, add the next number to the sequence and iterate\n                total += 1\n            current_number += 1\n    return total\n",
        "num_ids": 146
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #SOLUTION\n    #two possible sequences = n numbers\n    #then we need to multiply those numbers by 2\n    #then we need to check if its in the range from m\n    #so we just need to find how many numbers in range m = 0 to m*2\n    #so m = 0 and m = 2\n    #if we multiply those 2 by 2 it will be 2\n",
        "num_ids": 90
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    #create an empty dictionary to hold all of the results\n    results = {}\n",
        "num_ids": 22
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n < 0:\n        return 0\n    if m < 0:\n        return 0\n    if n == 0:\n        return 1\n",
        "num_ids": 35
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 1:\n        return 0\n    else:\n        x = m\n        y = 1\n        count = 0\n        while y < x:\n            count = count + n * (n - 1) / 2 + n\n            x = x - 2\n            y = y + 1\n        count = count + n * (n - 1) / 2 + n\n        return count\n",
        "num_ids": 91
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #TODO: replace this with your code\n",
        "num_ids": 14
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #get the number of integers in the range of (m,n)\n    total_number_of_integers = n-m+1\n",
        "num_ids": 35
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    dp_table = [0] * (n + 1)\n    dp_table[0] = 1\n    for i in range(1, n + 1):\n        if i == 1:\n            dp_table[i] = 1\n        elif i > 1:\n            for j in range(i):\n                if j == 0:\n                    dp_table[i] += dp_table[i - j]\n                elif j >= 1:\n                    dp_table[i] += dp_table[i - j] * (i - j)\n    return dp_table[n]\n    \n    \ndef get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    dp_table = [0] * (n + 1)\n    dp_table[0] = 1\n    for i in range(1, n + 1):\n        if i == 1:\n            dp_table[i] = 1\n        elif i > 1:\n            for j in range(i):\n                if j == 0:\n                    dp_table[i] += dp_table[i - j]\n                elif j >= 1:\n                    dp_table[i] += dp_table[i - j] * (i - j)\n    return dp_table[n]\n    \n    ",
        "num_ids": 144
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    new_list.append(list1[0])\n    new_list += list2[:-1]\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
        "num_ids": 41
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1\n",
        "num_ids": 22
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for x in list2:\n        list1.append(x)\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1\n",
        "num_ids": 22
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n",
        "num_ids": 14
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    list1.pop()\n    print(list2)\n    list1.extend(list2)\n    print(list1)\nreplace_list([1,2,3],[\"a\",\"b\",\"c\"]",
        "num_ids": 58
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    n = 0\n    for i in str1:\n        n+=1\n    return n\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for x in str1:\n        char_count += 1\n    return char_count\n",
        "num_ids": 30
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=int(math.sqrt(N))\n    while x*x<N:\n        x+=1\n    return x*x\n",
        "num_ids": 35
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N\n    while True: \n        n += 1\n        if n**2 > N: \n            return n**2\ndef check_prime(n):\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\ndef N_is_Palindrome(n):\n    n = str(n)\n    if n == n[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True\ndef isPalindrome(num): \n    num = str(num) \n    i = 0\n    j = len(num) - 1\n    while i < j: \n        while i < j and not num[i].isdigit(): \n            i += 1\n        while i < j and not num[j].isdigit(): \n            j -= 1\n        if num[i]!= num[j]: \n            return False\n        i += 1\n        j -= 1\n    return True",
        "num_ids": 2024
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq=N\n    while True:\n        sq=int((sq+1)**0.5)\n        if sq*sq==N:\n            return sq\n",
        "num_ids": 40
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = N\n    while True:\n        sq = math.floor(math.sqrt(sq))\n        if sq*sq == N:\n            break\n        else:\n            sq += 1\n    return sq*sq\n",
        "num_ids": 54
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    powN=int(math.sqrt(N))\n    powN+=1\n    if powN**2==N:\n        return powN**2\n    return powN**2\n",
        "num_ids": 48
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    y = math.sqrt(x)\n    while True:\n        if y*y == x:\n            return x\n        else:\n            x = y*y\n            y = math.sqrt(x)\ndef perfect_Square_Num(N):\n    '''\n    Write a python function to find the number of perfect squares that are smaller than the given number.\n    '''\n    count = 0\n    for i in range(1,N+1):\n        if i**2 < N:\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # initialize the range (number less than 2)\n    i = 2\n    # number is already a perfect square, go to next number\n    if N == 1:\n        print(1)\n        return N\n",
        "num_ids": 50
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0 or N == 1: \n        return N \n    l = N + 1 \n    r = N // 2\n    while r >= l: \n        x = (r + l) // 2\n        y = x * x \n        if y > N: \n            r = x - 1\n        elif y < N: \n            l = x + 1\n        else: \n            return x \n    return l\nprint(\"=== output ===\")\nprint(next_Perfect_Square(12))\n",
        "num_ids": 124
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while(True):\n        x=N\n        while(True):\n            if(x%2==0):\n                x=x//2\n                break\n            else:\n                x=x+1\n        if(x==1):\n            return N\n        N=x\n",
        "num_ids": 67
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        print(\"Wrong input\")\n    else:\n        while True:\n            if N == 1:\n                break\n            elif (N-1)**2 < N:\n                N += 1\n                continue\n            else:\n                N -= 1\n                break\n        return N\n",
        "num_ids": 74
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr)==0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #method 1:\n    #bitonic_subsequence_sum = []\n    #bitonic_subsequence_sum.append(arr[0])\n",
        "num_ids": 37
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #base case\n    if len(arr)==1:\n        return arr[0]\n",
        "num_ids": 24
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    print('\\n\\nIn function max_sum')\n    print('arr = ', arr)\n    arr.sort()\n    print('arr = ', arr)\n",
        "num_ids": 40
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    # base case\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    # recursive call\n    return max(max_sum(arr[0:len(arr) // 2]), max_sum(arr[len(arr) // 2:len(arr)]))",
        "num_ids": 112
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    N = len(arr)\n    if N < 2:\n        return None\n    max_sum = arr[0]\n    left = 0\n    right = 0\n    while right < N and left < N:\n        if arr[left] < arr[right]:\n            max_sum = max(max_sum, arr[left] + arr[right])\n            left += 1\n            right += 1\n        else:\n            right += 1\n    return max_sum\n",
        "num_ids": 110
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize maxsum and maxstart with -infinity\n    maxsum, maxstart = float('-inf'), float('-inf')\n",
        "num_ids": 33
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # ---SOLUTION---\n    # keep a max_sum array\n    # use a for loop\n    # for each index i\n    #   set max_sum_array[i] to the max(max_sum_array[i-1], max_sum_array[i-2], max_sum_array[i-3], arr[i])\n    # print(max_sum_array)\n    # return max_sum_array[-1]\n",
        "num_ids": 108
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Number must be positive')\n    \n    guess = number / 2\n    count = 0\n    while abs(guess ** 2 - number) > 0.001:\n        count += 1\n        guess = (guess + number / guess) / 2\n    print(count)\n    return guess\n",
        "num_ids": 82
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0.0\n    while abs(number-root**2) > 0.001:\n        root = (root+number/root)/2\n    return root\n",
        "num_ids": 41
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            return new_guess\n        guess = new_guess\n        \n",
        "num_ids": 68
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.001\n    k = 1\n    x = number\n    while True:\n        fx = x*(1/x)\n        if abs(fx - x) < epsilon:\n            return fx\n        x = fx\n",
        "num_ids": 62
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if (number < 0):\n        print(\"Error: number must be greater than 0.\")\n        return None\n    elif (number == 0):\n        return 0\n    else:\n        while (True):\n            next_root = number / 2\n            if (next_root < 1):\n                return next_root\n            else:\n                number = next_root\n",
        "num_ids": 86
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Needed variables\n    count = 0\n    first = 1\n    second = 1\n    answer = 1\n",
        "num_ids": 28
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    \n    while abs(guess**2 - number) >= 0.01:\n        guess = guess - ((guess**2 - number)/(2.0*guess))\n        \n    print(guess)\n    \nbabylonian_squareroot(16",
        "num_ids": 74
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    for i in range(number):\n        x = (i+1)**(1/2)\n    return x\n",
        "num_ids": 30
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while True:\n        guess = (guess + number/guess)/2\n        if abs(number - guess**2) < 1e-6:\n            break\n    return guess\n",
        "num_ids": 54
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    else:\n        dp_table = [[0 for i in range(len(str))] for j in range(len(str))]\n        for i in range(len(str)):\n            dp_table[i][i] = 1\n        for i in range(len(str)-1):\n            dp_table[i][i+1] = 2 if str[i] == str[i+1] else 1\n        for j in range(2, len(str)):\n            for i in range(len(str)-j):\n                dp_table[i][i+j] = max(dp_table[i][i+j-1], dp_table[i+1][i+j])\n                if str[i] == str[i+j]:\n                    dp_table[i][i+j] = max(dp_table[i][i+j], dp_table[i+1][i+j-1]+2)\n        return dp_table[0][len(str)-1]\n",
        "num_ids": 255
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_len = 0\n    start = 0\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n",
        "num_ids": 38
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n        if i < n - 1:\n            dp[i][i + 1] = 2\n        for j in range(i + 2, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n",
        "num_ids": 149
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def dp(str, i, j):\n        if i > j:\n            return 0\n        if i == j:\n            return 1\n",
        "num_ids": 36
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    if n < 2: \n        return n \n    dp_arr = [[0 for i in range(n)] \n                for j in range(n)] \n    for i in range(n): \n        dp_arr[i][i] = 1\n    max_len = 1\n    start = 0\n    for i in range(1, n): \n        for j in range(0, i + 1): \n            if str[i] == str[j] and ((i - j < 2) or dp_arr[j + 1][i - 1]): \n                dp_arr[j][i] = 1\n                if i + 1 - j > max_len: \n                    max_len = i + 1 - j \n                    start = j \n    return (str[start:start + max_len])\n",
        "num_ids": 204
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    size = len(str)\n    dp = [[0]*size for i in range(size)]\n    \n    max_len = 1\n    for i in range(1,size):\n        for j in range(size):\n            if(j-i<=0):\n                dp[i][j] = 0\n            elif(j-i==1):\n                if(str[i]==str[j]):\n                    dp[i][j] = 1\n                    max_len = max(max_len,dp[i][j])\n                else:\n                    dp[i][j] = 0\n            else:\n                dp[i][j] = 0\n                for k in range(1,j-i+1):\n                    if(str[i]==str[j-k]):\n                        dp[i][j] = k+1\n                        max_len = max(max_len,dp[i][j])\n                        break\n    return max_len\n",
        "num_ids": 227
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    if n<2: \n        return 0\n    dp = [[0 for i in range(n)]  \n           for j in range(n)] \n",
        "num_ids": 47
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_rec(string,l,r):\n        if r<l:\n            return 0\n        if l==r:\n            return 1\n        if string[l]==string[r]:\n            return 2+lps_rec(string,l+1,r-1)\n        else:\n            return max(lps_rec(string,l+1,r),lps_rec(string,l,r-1))\n    if type(str) is str:\n        return lps_rec(str,0,len(str)-1)\n    else:\n        return \"Invalid Input\"\n        \nprint(lps(\"ccdabcd\"))\n",
        "num_ids": 157
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def helper(str,i,j): \n        if(i>=j):\n            return 0\n        if(str[i]==str[j]):\n            return 1+helper(str,i+1,j-1)\n        else:\n            return max(helper(str,i+1,j),helper(str,i,j-1))\n    return helper(str,0,len(str)-1) \nprint(lps(\"kakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakaka",
        "num_ids": 2010
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = 0\n    if str == \"\":\n        return 0\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n",
        "num_ids": 44
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n    \nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(5))\n",
        "num_ids": 64
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n + 1)) / 2\n",
        "num_ids": 15
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result = result + (1/i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int(n * (n - 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s = 0\n    for i in range(n):\n        s += 1 / i\n    return s\n",
        "num_ids": 27
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i/(i+1)\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    return sum((i + 1) / (i + 2) for i in range(n - 1))\n    \nharmonic_sum(3) # 1.5\nharmonic_sum(5) # 0.8333333333333334\nharmonic_sum(7) # 0.0\nharmonic_sum(11) # 1.1666666666666667\nharmonic_sum(13) # 2.0\nharmonic_sum(15) # 2.0\nharmonic_sum(17) # 2.181818181818182\nharmonic_sum(19) # 2.2222222222222223\nharmonic_sum(21) # 2.333333333333334\nharmonic_sum(23) # 2.4\nharmonic_sum(25) # 2.5\nharmonic_sum(27) # 2.555555555555556\nharmonic_sum(29) # 2.6666666666666665\nharmonic_sum(31) # 2.777777777777777\nharmonic_sum(33) # 2.8888888888888888\nharmonic_sum(35) # 2.9555555555555557\nharmonic_sum(37) # 3.0\nharmonic_sum(39) # 3.0\nharmonic_sum(41) # 3.0\nharmonic_sum(43) # 3.142857142857143\nharmonic_sum(45) # 3.285714285714286\nharmonic_sum(47) # 3.428571428571429\nharmonic_sum(49) # 3.571428571428571\nharmonic_sum(51) # 3.6666666666666665\nharmonic_sum(53) # 3.833333333333334\nharmonic_sum(55) # 4.0\nharmonic_sum(57) # 4.333333333333333\nharmonic_sum(59) # 4.5\nharmonic_sum(61) # 4.666666666666665\nharmonic_sum(63) # 4.933333333333333\nharmonic_sum(65) # 5.0\nharmonic_sum(67) # 5.2\nharmonic_sum(69) # 5.4\nharmonic_sum(71) # 5.6\nharmonic_sum(73) # 5.8\nharmonic_sum(75) # 6.0\nharmonic_sum(77) # 6.142857142857143\nharmonic_sum(79) # 6.333333333333333\nharmonic_sum(81) # 6.5\nharmonic_sum(83) # 6.6666666666666665\nharmonic_sum(85) # 6.933333333333333\nharmonic_sum(87) # 7.0\nharmonic_sum(89) # 7.0\nharmonic_sum(91) # 7.142857142857143\nharmonic_sum(93) # 7.333333333333334\nharmonic_sum(95) # 7.555555555555556\nharmonic_sum(97) # 7.777777777777777\nharmonic_sum(99) # 7.9\nharmonic_sum(101) # 8.0\nharmonic_sum(103) # 8.142857142857143\nharmonic_sum(105) # 8.333333333333333\nharmonic_sum(107) # 8.5\nharmonic_sum(109) # 8.6666666666666665\nharmonic_sum(111) # 8.933333333333333\nharmonic_sum(113) # 9.0\nharmonic_sum(115) # 9.142857142857143\nharmonic_sum(117) # 9.333333333333334\nharmonic_sum(119) # 9.5\nharmonic_sum(121) # 9.6666666666666665\nharmonic_sum(123) # 9.9\nharmonic_sum(125) # 10.0\nharmonic_sum(127) # 10.142857142857143\nharmonic_sum(129) # 10.333333333333333\nharmonic_sum(131) # 10.5\nharmonic_sum(133) # 10.6666666666666665\nharmonic_sum(135) # 10.933333333333333\nharmonic_sum(137) # 11.0\nharmonic_sum(139) # 11.142857142857143\nharmonic_sum(141) # 11.333333333333334\nharmonic_sum(143) # 11.5\nharmonic_sum(145) # 11.6666666666666665\nharmonic_sum(147) # 11.933333333333333\nharmonic_sum(149) # 12.0\nharmonic_sum(151) # 12.142857142857143\nharmonic_sum(153) # 12.333333333333334\nharmonic_sum(155) # 12.5\nharmonic_sum(157) # 12.6666666666666665\nharmonic_sum(159) # 12.933333333333333\nharmonic_sum(161) # 13.0\nharmonic_sum(163) # 13.142857142857143\nharmonic_sum(165) # 13.333333333333334\nharmonic_sum(167) # 13.5\nharmonic_sum(169) # 13.6666666666666665\nharmonic_sum(171) # 13.933333333333333\nharmonic_sum(173) # 14.0\nharmonic_sum(175) # 14.142857142857143\nharmonic_sum(177) # 14.333333333333334\nharmonic_sum(179) # 14.5\nharmonic_sum(181) # 14.6666666666666665\nharmonic_sum(183) # 14.933333333333333\nharmonic_sum(185) # 15.0\nharmonic_sum(187) # 15.142857142857143\nharmonic_sum(189) # 15.333333333333334\nharmonic_sum(191) # 15.5\nharmonic_sum(193) # 15.6666666666666665\nharmonic_sum(195) # 15.933333333333333\nharmonic_sum(197) # 16.0\nharmonic_sum(199) # 16.142857142857143\nharmonic_sum(201) # 16.333333333333334\nharmonic_sum(203) # 16.5\nharmonic_sum(205) # 16.6666666666666665\nharmonic_sum(207) # 16.933333333333333\nharmonic_sum(209) # 17.0\nharmonic_sum(211) # 17.142857142857143\nharmonic_sum(213) # 17.333333333333334\nharmonic_sum(215) # 17.5\nharmonic_sum(217) # 17.6666666666666665\nharmonic_sum(219) # 17.933333333333333\nharmonic_sum(221) # 18.0\nharmonic_sum(223) # 18.142857142857143\nharmonic_sum(225) # 18.333333333333334\nharmonic_sum(227) # 18.5\nharmonic_sum(229) # 18.6666666666666665\nharmonic_sum(231) # 18.933333333333333\nharmonic_sum(233) # 19.0\nharmonic_sum(235) # 19.142857142857143\nharmonic_sum(237) # 19.333333333333334\nharmonic_sum(239) # 19.5\nharmonic_sum(241) # 19.6666666666666665\nharmonic_sum(243) # 19.933333333333333\nharmonic_sum(245) # 20.0\nharmonic_sum(247) # 20.142857142857143\nharmonic_sum(249) # 20.333333333333334\nharmonic_sum(251) # 20.5\nharmonic_sum(253) # 20.6666666666666665\nharmonic_sum(255) # 20.933333333333333\nharmonic_sum(257) # 21.0\nharmonic_sum(259) # 21.142857142857143\nharmonic_sum(261) # 21.333333333333334\nharmonic_sum(263) # 21.5\nharmonic_sum(265) # 21.6666666666666665\nharmonic_sum(267) # 21.933333333333333\nharmonic_sum(269) # 22.0\nharmonic_sum(271) # 22.142857142857143\nharmonic_sum(273) # 22.333333333333334\nharmonic_sum",
        "num_ids": 2012
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + sum(1/(i+1) for i in range(n-1))\n",
        "num_ids": 26
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)>len(array_nums2):\n        for i in array_nums1:\n            if i in array_nums2:\n                return i\n    elif len(array_nums2)>len(array_nums1):\n        for i in array_nums2:\n            if i in array_nums1:\n                return i\n    else:\n        for i in array_nums1:\n            if i in array_nums2:\n                return i\n",
        "num_ids": 125
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # loop through array 1\n    # if array number in array 1 == array number in array 2, return that number\n    # else move on to the next array element\n    # loop through array 2\n    # if array number in array 2 == array number in array 1, return that number\n    # else move on to the next array element\n    # keep looping until one of the loops is finished\n",
        "num_ids": 89
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    length_1 = len(array_nums1)\n    length_2 = len(array_nums2)\n    output = []\n    for i in range(length_1):\n        if array_nums1[i] in array_nums2:\n            output.append(array_nums1[i])\n    return output\n",
        "num_ids": 82
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_nums = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersect_nums.append(array_nums1[i])\n",
        "num_ids": 63
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return set1.intersection(set2)\n",
        "num_ids": 40
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # len_array_nums1 = len(array_nums1)\n    # len_array_nums2 = len(array_nums2)\n    # if len_array_nums1 > len_array_nums2:\n    #     for i in range(len_array_nums1):\n    #         if array_nums1[i] in array_nums2:\n    #             return array_nums1[i]\n    # else:\n    #     for i in range(len_array_nums2):\n    #         if array_nums2[i] in array_nums1:\n    #             return array_nums2[i]\n    return list(set(array_nums1).intersection(set(array_nums2)))\n",
        "num_ids": 189
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    print(\"\\nInput array: \")\n    print(array_nums1)\n    print(\"\\nInput array: \")\n    print(array_nums2)\n    print(\"\\nIntersection of two arrays: \")\n    intersection = []\n    for element in array_nums1:\n        if element in array_nums2:\n            if element not in intersection:\n                intersection.append(element)\n    return intersection\n",
        "num_ids": 107
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) <= len(array_nums2):\n        num_set1 = set(array_nums1)\n        num_set2 = set(array_nums2)\n        num_set3 = num_set1 & num_set2\n        return num_set3\n    else:\n        num_set1 = set(array_nums2)\n        num_set2 = set(array_nums1)\n        num_set3 = num_set1 & num_set2\n        return num_set3\n",
        "num_ids": 132
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_set = set(array_nums1)\n    intersection_set = intersection_set.intersection(set(array_nums2))\n    return list(intersection_set)\n",
        "num_ids": 49
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    n = 0\n    for i in tup:\n        if i == x:\n            n += 1\n    return n\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if(list[i] == element):\n            list.insert(i,element)\n    return list\n",
        "num_ids": 39
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [list[i-1] if i > 0 else element for i in range(len(list)+1)]\nprint(insert_element([], 0)",
        "num_ids": 38
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list = list[:];\n    list.append(element)\n    return list;\n",
        "num_ids": 23
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = list[:]\n    for i in range(len(list)):\n        result.insert(i,element)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    while element in list:\n        list.insert(0,list[0])\n        del list[0]\n    list.insert(0,element)\n    return list\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        list.append(element)\n        return list\n    else:\n        for i in range(len(list)):\n            if element == list[i]:\n                list.insert(i,element)\n                return list\n        list.append(element)\n        return list\n",
        "num_ids": 72
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    new_list = []\n    while i < len(list):\n        new_list.append(list[i])\n        if list[i] == element:\n            new_list.append(element)\n            i += 1\n        else:\n            new_list.append(list[i])\n        i += 1\n    return new_list\n",
        "num_ids": 87
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        list.insert(i, element)\n        i = i + 1\n    return list\n",
        "num_ids": 37
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]*len(list) + list\n",
        "num_ids": 15
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if element < list[i]:\n            new_list.append(element)\n            new_list.append(list[i])\n        else:\n            new_list.append(list[i])\n    return new_list\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2001
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = {}\n    result['real'] = 0\n    result['img'] = 0\n    if (numbers > 0):\n        result['real'] = numbers.real\n        result['img'] = numbers.imag\n    elif (numbers < 0):\n        result['real'] = -1 * numbers.real\n        result['img'] = numbers.imag\n    return result\n        \ndef sgn(number):\n    '''\n    Write a python function to find sign of complex numbers.\n    '''\n    if (number < 0):\n        return -1\n    return 1\n",
        "num_ids": 19
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list1 = []\n    for i in numbers:\n        list1.append(((i.real ** 2 + i.imag ** 2) ** 0.5, i.real * i.imag))\n    list1.sort()\n    return list1\n",
        "num_ids": 60
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radius = 0\n    theta = 0\n    for i in range(len(numbers)):\n        n = numbers[i]\n        \n        if n == 0:\n            continue\n        radius = radius + 1 / n\n        theta = theta + 1 / n * (360 / 2 * 3.14) / 180 * (i + 1)\n    return radius, theta\n",
        "num_ids": 91
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print (\"\\nThe Given Complex Numbers: \", numbers)\n    mag = 0\n    phase = 0\n    if numbers!= None:\n        for index,item in enumerate(numbers):\n            if item!= 0:\n                mag = abs(item)\n                phase = cmath.phase(item)\n                break\n    print (\"\\nConverted Complex Number: \", mag, phase)\n    return mag, phase\n",
        "num_ids": 99
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if isinstance(numbers, complex):\n        a = numbers.real\n        b = numbers.imag\n        return (a,b)\n    else:\n        print(\"Wrong input\")\n",
        "num_ids": 47
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers[0]\n    b = numbers[1]\n    c = numbers[2]\n    d = (a**2 + b**2 - c**2)/2\n    e = cmath.sqrt(d)\n    if d == 0:\n        return a, e\n    elif d > 0:\n        return e, a\n    else:\n        return e, -a\n        \n    \nnumbers = [1, -2, 1]\nresult = convert(numbers)\nprint(result)\n    \n    \ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    r = numbers[0]\n    theta = numbers[1]\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y\n        \n    \nnumbers = [1, -2, 1]\nresult = convert(numbers)\nprint(result)\n",
        "num_ids": 82
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    def polar(n):\n        \n        '''\n        The function which returns the polar coordinates of the complex number n.\n        '''\n        if not n:\n            return 0\n        x, y = n.real, n.imag\n        r = math.sqrt(x ** 2 + y ** 2)\n        r = float(\"{0:.2f}\".format(r))\n        theta = cmath.phase(n)\n        theta = math.degrees(theta)\n        if x < 0:\n            theta = 360 - theta\n        return r, theta\n    \n    polar_list = []\n    for i in numbers:\n        polar_list.append(polar(i))\n    \n    return polar_list",
        "num_ids": 146
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c=[]\n    for i in numbers:\n        c.append(complex(i))\n    return c\n",
        "num_ids": 28
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    real = numbers.real\n    img = numbers.imag\n    \n    if real == 0:\n        if img == 0:\n            print(\"Zero\")\n        else:\n            print(\"Real = 0 and Imaginary =\",img,\"Angle = \",cmath.phase(numbers))\n    elif img == 0:\n        print(\"Real =\",real,\"Angle = 0\")\n    else:\n        if img >= 0:\n            print(\"Real =\",real,\"Angle =\",cmath.phase(numbers),\"[Radian]\")\n        else:\n            print(\"Real =\",real,\"Angle =\",cmath.phase(numbers),\"[Radian]\")\n    return\n",
        "num_ids": 162
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    radius = math.sqrt(numbers[0]**2+numbers[1]**2)\n    phi = cmath.phase(numbers[0])\n    theta = cmath.phase(numbers[1])\n    return (radius, phi, theta)\n",
        "num_ids": 70
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i,int):\n            count +=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n",
        "num_ids": 10
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) is int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if i.isdigit()==True:\n            count+=1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if element % 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if type(i) == int:\n            counter += 1\n    return counter\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for elem in list1:\n        if elem.is_integer():\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count = count + 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combination = []\n    for i in range(l):\n        combination.append([])\n        for j in range(n):\n            combination[i].append(i)\n    return combination\nprint(combinations_colors([1,2,3,4,5,6], 4))\n",
        "num_ids": 72
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return[tuple(i) for i in combinations_with_replacement(l, n)]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if l == [] or n == 0:\n        return []\n    elif n == 1:\n        return [[item] for item in l]\n    else:\n        return [[l[0]] + rest for rest in combinations_colors(l[1:], n-1) ] + combinations_colors(l[1:], n)\n",
        "num_ids": 81
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color = []\n    for i in range(n):\n        for combo in combinations_with_replacement(l, i + 1):\n            color.append(combo)\n    return color\n",
        "num_ids": 47
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for x in range(n):\n        combinations.append(l[x])\n    return combinations\n",
        "num_ids": 32
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l_size = len(l)\n    if n > l_size:\n        raise ValueError(\"Input list is too small\")\n    res = []\n    for i in range(l_size):\n        for j in range(l_size):\n            if i!= j:\n                res.append(tuple(l[i:i+n+1]))\n    return res\n",
        "num_ids": 92
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        combs.append(tuple(l[i]*n))\n    return combs\n",
        "num_ids": 42
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(n):\n        temp = l[i]\n        l = list(l)\n        for j in range(len(l)):\n            if j == i:\n                continue\n            else:\n                l[j] = 'x'\n        l = tuple(l)\n        combos.append(l)\n    return combos\n",
        "num_ids": 90
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for x in range(1,n):\n        if n%x == 0:\n            count+=1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True]*(n + 1)\n    is_prime[0], is_prime[1] = False, False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n + 1, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n    ",
        "num_ids": 118
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Define a primes list\n    primes = []\n    # Define a is_prime boolean function\n    def is_prime(number):\n        for n in range(2, number):\n            if number % n == 0:\n                return False\n        else:\n            return True\n",
        "num_ids": 69
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    x = 0\n    for i in range(2, n):\n        if n % i == 0:\n            x += 1\n    return x\n",
        "num_ids": 36
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<1:\n        return 0\n    cnt=0\n    for i in range(2,n+1):\n        #print(i,cnt)\n        if prime_check(i):\n            cnt+=1\n    return cnt\n",
        "num_ids": 62
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n+1):\n        for j in range(2,(i-1)//2+1):\n            if i % j == 0:\n                break\n        else:\n            count = count + 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = list(range(n + 1))\n    nums[1] = 0\n    for i in range(2,n+1):\n        if nums[i]!= 0:\n            for j in range(i,n+1,i):\n                nums[j] = 0\n    return nums.count(1)\n",
        "num_ids": 83
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(n):\n        if is_prime(num) == True:\n            count += 1\n    print(count)\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    def _is_prime(number):\n        '''\n        Assumes input number is a non-negative integer\n        Returns a boolean value\n        '''\n        \n        if number < 2:\n            return False\n        if number == 2:\n            return True\n        else:\n            for i in range(2, number):\n                if number % i == 0:\n                    return False\n            return True\n    \n    # Function body\n    count = 0\n    # Number of prime numbers less than or equal to n\n    for i in range(n + 1):\n        if _is_prime(i):\n            count += 1\n    return count\n",
        "num_ids": 113
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    print(\"\\n\\n\\n------Function: \",count_Primes_nums.__name__,\" ------\\n\")\n    count = 0\n    for i in range(1,n):\n        if isPrime(i):\n            count+=1\n    print(\"Number of prime numbers less than\",n,\"is\",count)\n    \ncount_Primes_nums(50)\n",
        "num_ids": 91
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a + b\n    d = b + a\n    return (d,c)\n",
        "num_ids": 24
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    #second = b\n    #first = a\n    return (second,first)\n",
        "num_ids": 32
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = a\n    y = b\n    a = x\n    b = y\n    return (b,a)\n",
        "num_ids": 30
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (a,b)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    return b,a\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # take first element of first tuple\n    max_element = test_tup1[0]\n",
        "num_ids": 25
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if (len(test_tup1) > len(test_tup2)):\n        max_tup = test_tup1\n        min_tup = test_tup2\n    else:\n        max_tup = test_tup2\n        min_tup = test_tup1\n    \n    for i in range(len(max_tup)):\n        if (max_tup[i] < min_tup[i]):\n            max_tup[i] = min_tup[i]\n    \n    return max_tup\n",
        "num_ids": 139
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tup1 = (max(test_tup1[0],test_tup2[0]), max(test_tup1[1],test_tup2[1]))\n    new_tup2 = (min(test_tup1[0],test_tup2[0]), min(test_tup1[1],test_tup2[1]))\n    return (new_tup1, new_tup2)\n",
        "num_ids": 110
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1), max(test_tup2))\n",
        "num_ids": 22
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n",
        "num_ids": 43
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result_tuple = result_tuple + (test_tup1[i],)\n        else:\n            result_tuple = result_tuple + (test_tup2[i],)\n    return result_tuple\n",
        "num_ids": 101
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    temp = max(test_tup1[0], test_tup1[1])\n    temp2 = max(test_tup2[0], test_tup2[1])\n    if temp < temp2:\n        return test_tup2\n    else:\n        return test_tup1\n",
        "num_ids": 75
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    x = max(test_tup1[0], test_tup2[0])\n    y = max(test_tup1[1], test_tup2[1])\n    z = max(test_tup1[2], test_tup2[2])\n    return (x, y, z)\n",
        "num_ids": 78
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1_max = 0\n    test_tup2_max = 0\n    for ele in test_tup1:\n        if ele > test_tup1_max:\n            test_tup1_max = ele\n",
        "num_ids": 59
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #    worst case case: 2^n\n    test_tup1 = (1,2,3,4,5,6,7,8)\n    test_tup2 = (5,6,7,8)\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n    max_tup = max_1, max_2\n    return max_tup\n",
        "num_ids": 104
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # if prime:\n    #     print(num)\n    #     return num\n    # else:\n    #     num += 1\n    #     if num % 2 == 0:\n    #         num += 1\n    #         return newman_prime(num)\n    #     else:\n    #         return newman_prime(num)\n    # return num\n    i = 2\n    primes = [2]\n    while i < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes[-1]\n",
        "num_ids": 139
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isprime(n):\n        if n == 2:\n            return True\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    def get_primes(n):\n        primes = []\n        if n == 1:\n            return primes\n        nth_prime = 2\n        while nth_prime < n:\n            if isprime(nth_prime):\n                primes.append(nth_prime)\n            nth_prime = nth_prime + 1\n        return primes\n    primes = get_primes(n)\n    if primes == None:\n        return None\n    count = 0\n    while n > 0:\n        n = n-1\n        count += 1\n    next_prime = primes[count]\n    if next_prime == n:\n        return next_prime\n    else:\n        return None\n",
        "num_ids": 218
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #return False\n    if n<1:\n        raise ValueError(\"n cannot be less than 1\")\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n==4:\n        return 7\n    # first n-1 numbers are primes\n    p=0\n    i=1\n    while p+i<=n-1:\n        p+=i\n        i+=1\n    if p+i<n:\n        return False\n    m=i-1\n    #return primes\n    while p+i<n:\n        p+=m\n        m+=1\n        if p==n:\n            return False\n        if p%2==0:\n            p+=1\n        if p%3==0:\n            p+=1\n        if p%5==0:\n            p+=1\n    return False\n",
        "num_ids": 216
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    print(n)\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n==4:\n        return 5\n    elif n==5:\n        return 7\n    elif n==6:\n        return 11\n    elif n==7:\n        return 13\n    elif n==8:\n        return 17\n    elif n==9:\n        return 19\n    elif n==10:\n        return 23\n    elif n==11:\n        return 29\n    elif n==12:\n        return 31\n    elif n==13:\n        return 37\n    elif n==14:\n        return 41\n    elif n==15:\n        return 43\n    elif n==16:\n        return 47\n    elif n==17:\n        return 53\n    elif n==18:\n        return 59\n    elif n==19:\n        return 61\n    elif n==20:\n        return 67\n    elif n==21:\n        return 73\n    elif n==22:\n        return 79\n    elif n==23:\n        return 83\n    elif n==24:\n        return 89\n    elif n==25:\n        return 97\n    elif n==26:\n        return 101\n    elif n==27:\n        return 103\n    elif n==28:\n        return 107\n    elif n==29:\n        return 109\n    elif n==30:\n        return 113\n    elif n==31:\n        return 127\n    elif n==32:\n        return 131\n    elif n==33:\n        return 137\n    elif n==34:\n        return 139\n    elif n==35:\n        return 149\n    elif n==36:\n        return 151\n    elif n==37:\n        return 157\n    elif n==38:\n        return 163\n    elif n==39:\n        return 167\n    elif n==40:\n        return 173\n    elif n==41:\n        return 179\n    elif n==42:\n        return 181\n    elif n==43:\n        return 191\n    elif n==44:\n        return 193\n    elif n==45:\n        return 197\n    elif n==46:\n        return 199\n    elif n==47:\n        return 211\n    elif n==48:\n        return 223\n    elif n==49:\n        return 227\n    elif n==50:\n        return 229\n    elif n==51:\n        return 233\n    elif n==52:\n        return 239\n    elif n==53:\n        return 241\n    elif n==54:\n        return 251\n    elif n==55:\n        return 257\n    elif n==56:\n        return 263\n    elif n==57:\n        return 269\n    elif n==58:\n        return 271\n    elif n==59:\n        return 277\n    elif n==60:\n        return 281\n    elif n==61:\n        return 289\n    elif n==62:\n        return 293\n    elif n==63:\n        return 307\n    elif n==64:\n        return 311\n    elif n==65:\n        return 313\n    elif n==66:\n        return 317\n    elif n==67:\n        return 323\n    elif n==68:\n        return 329\n    elif n==69:\n        return 331\n    elif n==70:\n        return 337\n    elif n==71:\n        return 347\n    elif n==72:\n        return 349\n    elif n==73:\n        return 353\n    elif n==74:\n        return 359\n    elif n==75:\n        return 367\n    elif n==76:\n        return 373\n    elif n==77:\n        return 379\n    elif n==78:\n        return 383\n    elif n==79:\n        return 389\n    elif n==80:\n        return 397\n    elif n==81:\n        return 401\n    elif n==82:\n        return 409\n    elif n==83:\n        return 419\n    elif n==84:\n        return 421\n    elif n==85:\n        return 431\n    elif n==86:\n        return 433\n    elif n==87:\n        return 439\n    elif n==88:\n        return 443\n    elif n==89:\n        return 449\n    elif n==90:\n        return 457\n    elif n==91:\n        return 461\n    elif n==92:\n        return 463\n    elif n==93:\n        return 467\n    elif n==94:\n        return 469\n    elif n==95:\n        return 471\n    elif n==96:\n        return 477\n    elif n==97:\n        return 479\n    elif n==98:\n        return 483\n    elif n==99:\n        return 489\n    elif n==100:\n        return 491\n    elif n==101:\n        return 499\n    elif n==102:\n        return 511\n    elif n==103:\n        return 513\n    elif n==104:\n        return 541\n    elif n==105:\n        return 543\n    elif n==106:\n        return 547\n    elif n==107:\n        return 557\n    elif n==108:\n        return 563\n    elif n==109:\n        return 569\n    elif n==110:\n        return 571\n    elif n==111:\n        return 577\n    elif n==112:\n        return 581\n    elif n==113:\n        return 583\n    elif n==114:\n        return 591\n    elif n==115:\n        return 597\n    elif n==116:\n        return 601\n    elif n==117:\n        return 607\n    elif n==118:\n        return 613\n    elif n==119:\n        return 619\n    elif n==120:\n        return 621\n    elif n==121:\n        return 623\n    elif n==122:\n        return 631\n    elif n==123:\n        return 641\n    elif n==124:\n        return 643\n    elif n==125:\n        return 647\n    elif n==126:\n        return 653\n    elif n==127:\n        return 659\n    elif n==128:\n        return 661\n    elif n==129:\n        return 673\n    elif n==130:\n        return 677\n    elif n==131:\n        return 683\n    elif n==132:\n        return 691\n    elif n==133:\n        return 697\n    elif n==134:\n        return 709\n    elif n==135:\n        return 711\n    elif n==136:\n        return 717\n    elif n==137:\n        return 723\n    elif n==138:\n        return 729\n    elif n==139:\n        return 731\n    elif n==140:\n        return 743\n    elif n==141:\n        return 747\n    elif n==142:\n        return 753\n    elif n==143:\n        return 757\n    elif n==144:\n        return 761\n    elif n==145:\n        return 773\n    elif n==146:\n        return 777\n    elif n==147:\n        return 779\n    elif n==148:\n        return 783\n    elif n==149:\n        return 787\n    elif n==150:\n        return 797\n    elif n==151:\n        return 809\n    elif n==152:\n        return 811\n    elif n==153:\n        return 821\n    elif n==154:\n        return 823\n    elif n==155:\n        return 827\n    elif n==156:\n        return 829\n    elif n==157:\n        return 839\n    elif n==158:\n        return 841\n    elif n==159:\n        return 857\n    elif n==160:\n        return 863\n    elif n==161:\n        return 86",
        "num_ids": 2008
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    num = 0\n    #n is prime\n    if n == 1:\n        return 0\n    else:\n        for i in range(n-1):\n            num = num + 1\n            #print(num)\n            if n%num == 0:\n                return num\n        #last number in loop\n        return num+1\n        \nprint(newman_prime(10))\nprint(newman_prime(20))\nprint(newman_prime(5))\nprint(newman_prime(9))\n",
        "num_ids": 121
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def count_divisors(num): \n        divisors = 1\n        for i in range(2, num): \n            if num % i == 0: \n                divisors += 1\n        return divisors \n",
        "num_ids": 59
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n > 0\n    if n == 1:\n        return 2\n    \n    if n == 2:\n        return 3\n    \n    if n == 3:\n        return 5\n    \n    if n == 4:\n        return 7\n    \n    x = 5\n    for _ in range(n - 4):\n        x = x + 2\n    \n    if x % 2 == 0:\n        x = x + 1\n    \n    return x\n",
        "num_ids": 107
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n += 1 # n has to be at least 1\n    if n == 1: return 2\n    if n == 2: return 3\n    if n == 3: return 5\n    if n % 2 == 0:\n        for i in range(5, n, 2):\n            if is_prime(i):\n                return i\n        return 5\n    if n % 3 == 0:\n        for i in range(5, n, 3):\n            if is_prime(i):\n                return i\n        return 5\n    if n % 5 == 0:\n        for i in range(5, n, 5):\n            if is_prime(i):\n                return i\n        return 5\n    if n % 7 == 0:\n        for i in range(5, n, 7):\n            if is_prime(i):\n                return i\n        return 5\n    a = 1\n    b = 2\n    if not is_prime(2):\n        while b <= n:\n            while a <= n:\n                if is_prime(a) and is_prime(b):\n                    return a + b\n                a += 1\n            a = 2\n            b = a + 1\n    else:\n        while b <= n:\n            while a <= n:\n                if is_prime(a) and is_prime(b):\n                    return a + b\n                a += 1\n            a = 2\n            b = a + 1\n",
        "num_ids": 328
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Your code here\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    # i can't understand the problem, not sure if it is a bug\n    if(type(tup1)!= tuple or type(tup2)!= tuple):\n        raise TypeError(\"Division elements must be tuples.\")\n    if(len(tup1)!= len(tup2)):\n        raise TypeError(\"Tuple lengths must be equal.\")\n    if(len(tup1) == 0):\n        raise TypeError(\"Empty tuple.\")\n    if(len(tup1) == 1):\n        return (tup1[0] / tup2[0], )\n    else:\n        for i in range(len(tup1)):\n            if (tup1[i] == 0) or (tup2[i] == 0):\n                raise ZeroDivisionError(\"Tuple division by zero.\")\n        \n        return ((tup1[0] / tup2[0]), )\n",
        "num_ids": 245
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # print(\"Before: \",test_tup1, test_tup2)\n    # print(\"After: \",test_tup1)\n    # print(test_tup2)\n    # print(\"Done\")\n    \n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        if len(test_tup1) == len(test_tup2):\n            for i in range(len(test_tup1)):\n                test_tup1[i] = int(test_tup1[i] / test_tup2[i])\n        else:\n            return (\"Error: Tuple lengths are different.\")\n    else:\n        return (\"Error: Invalid types.\")\n    # print(\"Tuple division: \",test_tup1, test_tup2)\n    return test_tup1\n    \n",
        "num_ids": 210
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup_lst1 = []\n    tup_lst2 = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            try:\n                tup_lst1.append(test_tup1[i] / test_tup2[i])\n            except ZeroDivisionError:\n                tup_lst1.append(test_tup1[i])\n            else:\n                tup_lst2.append(test_tup2[i])\n    else:\n        print('The tuples should have equal number of elements')\n    return tup_lst1, tup_lst2\n",
        "num_ids": 174
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # If the two tuples are equal, return 1\n    if test_tup1 == test_tup2:\n        return 1\n    else:\n        try:\n            return (test_tup1[0] / test_tup2[0])\n        except ZeroDivisionError:\n            print(\"Can't divide by zero\")\n        except TypeError:\n            print(\"Can't perform division on string\")\n        except IndexError:\n            print(\"Cannot divide by zero because either of the tuples are not same length\")\n        except ValueError:\n            print(\"Cannot perform division with non numeric value\")\n        except Exception:\n            print(\"Unknown Error\")\n",
        "num_ids": 155
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda i, j: i / j, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            new_tup = (new_tup + (test_tup1[i] // test_tup2[i],), )\n        except ZeroDivisionError:\n            new_tup = (new_tup + (0,), )\n    return new_tup\n",
        "num_ids": 96
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        a = ()\n        b = ()\n        for i in range(len(test_tup1)):\n            a += (test_tup1[i] / test_tup2[i], )\n            b += (test_tup1[i] // test_tup2[i], )\n        return a, b\n    else:\n        return None\n",
        "num_ids": 108
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (int(test_tup1[0]) / int(test_tup2[0]), int(test_tup1[1]) / int(test_tup2[1]))\n    \ndef division_elements_short(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (int(test_tup1[0]) / int(test_tup2[0]), int(test_tup1[1]) / int(test_tup2[1]))\n    \ndef multiplication_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    return (int(test_tup1[0]) * int(test_tup2[0]), int(test_tup1[1]) * int(test_tup2[1]))\n    \ndef multiplication_elements_short(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    return (int(test_tup1[0]) * int(test_tup2[0]), int(test_tup1[1]) * int(test_tup2[1]))\n    \ndef difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise subtraction from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) - int(test_tup2[0]), int(test_tup1[1]) - int(test_tup2[1]))\n    \ndef difference_elements_short(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise subtraction from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) - int(test_tup2[0]), int(test_tup1[1]) - int(test_tup2[1]))\n    \ndef add_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise addition from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) + int(test_tup2[0]), int(test_tup1[1]) + int(test_tup2[1]))\n    \ndef add_elements_short(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise addition from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) + int(test_tup2[0]), int(test_tup1[1]) + int(test_tup2[1]))\n    \ndef subtract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise subtraction from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) - int(test_tup2[0]), int(test_tup1[1]) - int(test_tup2[1]))\n    \ndef subtract_elements_short(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise subtraction from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) - int(test_tup2[0]), int(test_tup1[1]) - int(test_tup2[1]))\n    \ndef modulo_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise modulo from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) % int(test_tup2[0]), int(test_tup1[1]) % int(test_tup2[1]))\n    \ndef modulo_elements_short(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise modulo from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) % int(test_tup2[0]), int(test_tup1[1]) % int(test_tup2[1]))\n    \ndef exponent_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise exponentiation from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) ** int(test_tup2[0]), int(test_tup1[1]) ** int(test_tup2[1]))\n    \ndef exponent_elements_short(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise exponentiation from test_tup2 to test_tup1.\n    '''\n    return (int(test_tup1[0]) ** int(test_tup2[0]), int(test_tup1[1]) ** int(test_tup2[1]))\n    \ndef square_elements(test_tup1):\n    '''\n    Write a function that takes in a single tuple and performs element-wise square of the tuple elements.\n    '''\n    return (int(test_tup1[0]) * int(test_tup1[0]), int(test_tup1[1]) * int(test_tup1[1]))\n    \ndef square_elements_short(test_tup1):\n    '''\n    Write a function that takes in a single tuple and performs element-wise square of the tuple elements.\n    '''\n    return (int(test_tup1[0]) * int(test_tup1[0]), int(test_tup1[1]) * int(test_tup1[1]))\n    \ndef cube_elements(test_tup1):\n    '''\n    Write a function that takes in a single tuple and performs element-wise cube of the tuple elements.\n    '''\n    return (int(test_tup1[0]) ** 3, int(test_tup1[1]) ** 3)\n    \ndef cube_elements_short(test_tup1):\n    '''\n    Write a function that takes in a single tuple and performs element-wise cube of the tuple elements.\n    '''\n    return (int(test_tup1[0]) ** 3, int(test_tup1[1]) ** 3)\n    \ndef reciprocal_elements(test_tup1):\n    '''\n    Write a function that takes in a single tuple and performs element-wise reciprocal of the tuple elements.\n    '''\n    return (1 / int(test_tup1[0]), 1 / int(test_tup1[1]))\n    \ndef reciprocal_elements_short(test_tup1):\n    '''\n    Write a function that takes in a single tuple and performs element-wise reciprocal of the tuple elements.\n    '''\n    return (1 / int(test_tup1[0]), 1 / int(test_tup1[1]))\n    \ndef root_elements(test_tup1):\n    '''\n    Write a function that takes in a single tuple and performs element-wise root of the tuple elements.\n    '''\n    return (int(test_tup1[0]) ** (1/2), int(test_tup1[1]",
        "num_ids": 31
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div = tuple(int(test_tup1[i]) / int(test_tup2[i]) for i in range(0, len(test_tup1)))\n    return div\n",
        "num_ids": 48
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, None)\n    else:\n        return (list1[:L], list1[L:])\n",
        "num_ids": 42
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    \nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n",
        "num_ids": 51
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return([], [])\n    if L < 0:\n        print(\"Error! L must be an integer that is greater than 0.\")\n        return\n    if L > len(list1):\n        print(\"Error! L must be less than the length of the list.\")\n        return\n    list1_1 = list1[:L]\n    list1_2 = list1[L:]\n    return (list1_1, list1_2)\n",
        "num_ids": 112
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= len(list1):\n        list1_first = list1[0:L]\n        list1_rest = list1[L:]\n        return (list1_first, list1_rest)\n    else:\n        return(None)\n",
        "num_ids": 62
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_len = len(list1)\n    list2 = list1[list_len - L:]\n    list1 = list1[:list_len - L]\n    return list1, list2\n",
        "num_ids": 50
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your Code Here\n    return(list1[:L],list1[L:])\n",
        "num_ids": 24
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if i<L:\n            list2.append(list1[i])\n    list3=list1[L:]\n    return list2,list3\n    \n    \n    \n",
        "num_ids": 64
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1[:L]\n    list2 = list1[L:]\n    return list1, list2\n",
        "num_ids": 31
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L1 = list1[:L]\n    L2 = list1[L:]\n    return (L1, L2)\n",
        "num_ids": 33
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n",
        "num_ids": 12
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_years = h_age * 7\n    print(dog_years)\n",
        "num_ids": 23
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age/7)\n",
        "num_ids": 12
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = int(h_age) + 6\n",
        "num_ids": 16
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n",
        "num_ids": 12
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # NOTE: You cannot use the math library directly.\n    return(int((h_age * 7) + 0.5))\n",
        "num_ids": 32
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(0, len(S), step):\n        a.append(S[i:i+step])\n    return a\n    \ndef list_split_all(S):\n    '''\n    Write a function that takes in a list and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(0, len(S)):\n        a.append(S[i::])\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    assert type(S) == list\n    assert type(step) == int\n    assert step > 0\n    assert len(S) >= 1\n    assert S[0] == 1\n    assert len(S) == len(set(S))\n    res = []\n    if step == 1:\n        res.append(S)\n    else:\n        lst = S[0::step]\n        res.append(lst)\n        for i in range(1,len(S),step):\n            lst = S[i::step]\n            res.append(lst)\n    return res\n",
        "num_ids": 141
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    if len(S) == 0:\n        return lst\n    if len(S) == 1:\n        return [S]\n    if step == 0:\n        return []\n    \n    for i in range(0, len(S), step):\n        lst.append(S[i:i+step])\n    return lst\n",
        "num_ids": 87
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    print(S)\n    return [[S[i], S[i+step]] for i in range(0, len(S), step)]\n",
        "num_ids": 35
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if S == []:\n        return [[]]\n    if S[0] % step == 0:\n        return [S] + list_split(S[1:], step)\n    else:\n        return list_split(S[1:], step) + list_split(S[1:], step)\n    \ndef string_split(S, step):\n    '''\n    Write a function that takes in a string and an integer n and splits a string for every nth character, returning a list of the resulting strings.\n    '''\n    if S == \"\":\n        return []\n    if step == 1:\n        return [S]\n    elif step % 2 == 0:\n        return string_split(S[:len(S)//step], step) + string_split(S[len(S)//step:], step)\n    else:\n        return string_split(S[:len(S)//step], step) + string_split(S[len(S)//step:], step)\n    \ndef list_split_sum(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if S == []:\n        return 0\n    if S[0] % step == 0:\n        return S[0] + list_split_sum(S[1:], step)\n    else:\n        return list_split_sum(S[1:], step) + list_split_sum(S[1:], step)\n    \ndef string_split_sum(S, step):\n    '''\n    Write a function that takes in a string and an integer n and splits a string for every nth character, returning a list of the resulting strings.\n    '''\n    if S == \"\":\n        return 0\n    if step == 1:\n        return S\n    elif step % 2 == 0:\n        return string_split_sum(S[:len(S)//step], step) + string_split_sum(S[len(S)//step:], step)\n    else:\n        return string_split_sum(S[:len(S)//step], step) + string_split_sum(S[len(S)//step:], step)\n    \ndef linear_search(L, x):\n    '''\n    Write a function that takes in a list and an element x and returns the index of the first occurrence of x in the list, or -1 if x is not in the list.\n    '''\n    for i in range(len(L)):\n        if L[i] == x:\n            return i\n    return -1\n    \ndef binary_search(L, x):\n    '''\n    Write a function that takes in a sorted list and an element x and returns the index of the first occurrence of x in the list, or -1 if x is not in the list.\n    '''\n    if L == []:\n        return -1\n    low = 0\n    high = len(L)-1\n    \n    while low <= high:\n        mid = (low+high)//2\n        if x == L[mid]:\n            return mid\n        elif x < L[mid]:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n    \ndef merge(L1, L2):\n    '''\n    Write a function that takes in a list of elements (L1) and a list of elements (L2), and returns a new list of the same length as L1 and L2 where each element is the concatenation of the corresponding elements in L1 and L2.\n    '''\n    if L1 == [] and L2 == []:\n        return []\n    elif L1 == [] and L2!= []:\n        return L2\n    elif L1!= [] and L2 == []:\n        return L1\n    elif L1!= [] and L2!= []:\n        mid1 = len(L1)//2\n        mid2 = len(L2)//2\n        L1_left = L1[:mid1]\n        L1_right = L1[mid1:]\n        L2_left = L2[:mid2]\n        L2_right = L2[mid2:]\n        return merge(L1_left, L2_left) + merge(L1_right, L2_right)\n    \ndef merge_sort(L):\n    '''\n    Write a function that takes in a list and returns a sorted copy of the list.\n    '''\n    if L == []:\n        return []\n    if len(L) == 1:\n        return L\n    mid = len(L)//2\n    L1 = merge_sort(L[:mid])\n    L2 = merge_sort(L[mid:])\n    return merge(L1, L2)\n    \ndef merge_sort_improved(L):\n    '''\n    Write a function that takes in a list and returns a sorted copy of the list.\n    '''\n    if L == []:\n        return []\n    if len(L) == 1:\n        return L\n    mid = len(L)//2\n    L1 = merge_sort_improved(L[:mid])\n    L2 = merge_sort_improved(L[mid:])\n    return merge_improved(L1, L2)\n    \ndef merge_improved(L1, L2):\n    '''\n    Write a function that takes in a list of elements and returns a new sorted list that is the result of merging two sorted lists.\n    '''\n    if L1 == [] and L2 == []:\n        return []\n    elif L1 == []:\n        return L2\n    elif L2 == []:\n        return L1\n    elif L1[0] <= L2[0]:\n        return [L1[0]] + merge_improved(L1[1:], L2)\n    else:\n        return [L2[0]] + merge_improved(L1, L2[1:])\n    \ndef find_min_index(L):\n    '''\n    Write a function that takes in a list and returns the index of the smallest value in the list.\n    '''\n    if L == []:\n        return -1\n    low = 0\n    high = len(L)-1\n    while low <= high:\n        mid = (low+high)//2\n        if L[mid] > L[high]:\n            low = mid + 1\n        elif L[mid] < L[high]:\n            high = mid - 1\n        else:\n            return mid\n    return low\n    \ndef binary_search_recursive(L, x, low, high):\n    '''\n    Write a function that takes in a sorted list of integers and an integer and returns the index of the first occurrence of x in the list, or -1 if x is not in the list.\n    '''\n    if low > high:\n        return -1\n    mid = (low + high)//2\n    if x == L[mid]:\n        return mid\n    elif x < L[mid]:\n        return binary_search_recursive(L, x, low, mid-1)\n    else:\n        return binary_search_recursive(L, x, mid+1, high)\n    \ndef binary_search_recursive_improved(L, x, low, high):\n    '''\n    Write a function that takes in a sorted list of integers and an integer and returns the index of the first occurrence of x in the list, or -1 if x is not in the list.\n    '''\n    if low > high:\n        return -1\n    mid = (low + high)//2\n    if L[mid] == x:\n        return mid\n    elif x < L[mid]:\n        return binary_search_recursive_improved(L, x, low, mid-1)\n    else:\n        return binary_search_recursive_improved(L, x, mid+1, high)\n    \ndef recursive_binary_search(L, x):\n    '''\n    Write a function that takes in a sorted list of integers and an integer and returns the index of the first occurrence of x in the list, or -1 if x is not in the list.\n    '''\n    if L == []:\n        return -1\n    low = 0\n    high = len(L)-1\n    return binary_search_recursive(L, x, low, high",
        "num_ids": 44
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(len(S)):\n        result.append(S[i::step])\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    output = []\n    for i in range(0, len(S), step):\n        output.append(S[i:i+step])\n    return output\n",
        "num_ids": 40
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # your code here\n    x = []\n    for i in range(0, len(S), step):\n        x.append(S[i:i+step])\n    return x\n",
        "num_ids": 46
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return S\n    if step == 0 or step == 1:\n        return []\n",
        "num_ids": 31
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # split the list into pieces\n    # if the list has an odd number of items, the last piece must be the leftover\n    # iterate through the list\n    # if the index is divisible by the step, then add it to the output\n    # if the index is not divisible by the step, then the last piece must be the leftover\n    return []\n",
        "num_ids": 83
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #function\n    return 6 * l**2\n",
        "num_ids": 14
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert(l > 0)\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    s = l * 6\n    return s * s\n",
        "num_ids": 23
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l**2) * 6\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l * 6\n    return s\n    \ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    s = l * w\n    return s\n    \ndef lateralsurface_triangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a triangle given its length and width.\n    '''\n    s = l * w\n    return s\n    \ndef lateralsurface_pyramid(l,w):\n    '''\n    Write a function to find the lateral surface area of a pyramid given its base and height.\n    '''\n    s = (l * w) / 2 + l\n    return s\n    \ndef lateralsurface_parallelogram(l,w):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given its length and width.\n    '''\n    s = 2 * l * w\n    return s\n    \ndef lateralsurface_rectangle_parallelogram(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle parallelogram given its length, width and height.\n    '''\n    s = 2 * l * h\n    return s\n    \ndef lateralsurface_rhombus(l,w):\n    '''\n    Write a function to find the lateral surface area of a rhombus given its length and width.\n    '''\n    s = 2 * l * w\n    return s\n    \ndef lateralsurface_hexagon(l,w):\n    '''\n    Write a function to find the lateral surface area of a hexagon given its length and width.\n    '''\n    s = 3 * l * w\n    return s\n    \ndef lateralsurface_square(l,w):\n    '''\n    Write a function to find the lateral surface area of a square given its length and width.\n    '''\n    s = l * w\n    return s\n    \ndef lateralsurface_parallelogram_square(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram square given its length and width.\n    '''\n    s = 2 * l * h\n    return s\n    \ndef lateralsurface_rectangle_parallelogram_square(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle parallelogram square given its length and width.\n    '''\n    s = 2 * l * w\n    return s\n    \ndef lateralsurface_square_parallelogram_square(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a square parallelogram square given its length and width.\n    '''\n    s = l * w\n    return s\n    \ndef lateralsurface_parallelogram_rectangle_square(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram rectangle square given its length and width.\n    '''\n    s = l * w\n    return s\n    \ndef lateralsurface_rectangle_parallelogram_rectangle_square(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle parallelogram rectangle square given its length and width.\n    '''\n    s = 2 * l * w\n    return s\n    \ndef lateralsurface_square_square(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a square square given its length and width.\n    '''\n    s = l * w\n    return s\n    \ndef lateralsurface_square_rectangle_square(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a square rectangle square given its length and width.\n    '''\n    s = l * w\n    return s\n    \ndef lateralsurface_rectangle_rectangle_square(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle rectangle square given its length and width.\n    '''\n    s = l * w\n    return s\n    \ndef lateralsurface_rectangle_rectangle_rectangle_square(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle rectangle rectangle square given its length and width.\n    '''\n    s = 4 * l * w\n    return s\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its length, width and height.\n    '''\n    s = l * w * h\n    return s\n    \ndef lateralsurface_square_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a square cuboid given its length, width and height.\n    '''\n    s = l * w * h\n    return s\n    \ndef lateralsurface_rectangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle cuboid given its length, width and height.\n    '''\n    s = 2 * l * w * h\n    return s\n    \ndef lateralsurface_cube_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid cube given its length, width and height.\n    '''\n    s = l * w * h\n    return s\n    \ndef lateralsurface_rectangle_rectangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle rectangle cuboid given its length, width and height.\n    '''\n    s = 2 * l * w * h\n    return s\n    \ndef lateralsurface_rectangle_rectangle_rectangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle rectangle rectangle cuboid given its length, width and height.\n    '''\n    s = 4 * l * w * h\n    return s\n    \ndef lateralsurface_triangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a triangle cuboid given its length, width and height.\n    '''\n    s = l * w * h / 2\n    return s\n    \ndef lateralsurface_square_triangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a square triangle cuboid given its length, width and height.\n    '''\n    s = l * w * h / 2\n    return s\n    \ndef lateralsurface_rectangle_triangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle triangle cuboid given its length, width and height.\n    '''\n    s = l * w * h / 2\n    return s\n    \ndef lateralsurface_cube_triangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cube triangle cuboid given its length, width and height.\n    '''\n    s = l * w * h / 2\n    return s\n    \ndef lateralsurface_rectangle_triangle_triangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle triangle triangle cuboid given its length, width and height.\n    '''\n    s = l * w * h / 2\n    return s\n    \ndef lateralsurface_rectangle_triangle_triangle_triangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle triangle triangle triangle cuboid given its length, width and height.\n    '''\n    s = l * w * h / 2\n    return s\n    \ndef lateralsurface_rectangle_triangle_rectangle_triangle_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle triangle triangle triangle cuboid given its length, width and height.\n    '''\n    s = l * w * ",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n",
        "num_ids": 8
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_square = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            sum_square += i**2\n    return sum_square\n",
        "num_ids": 47
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res += i**2\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i % 2!= 0])\n",
        "num_ids": 29
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def squareSum(n):\n        sum_sq = 0\n        for i in range(n):\n            if i%2 == 1:\n                sum_sq += i**2\n        return sum_sq\n    return squareSum(n)\n",
        "num_ids": 58
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        if (i % 2) == 1:\n            a = a + i**2\n    return a\n",
        "num_ids": 44
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i%2 == 1])\n",
        "num_ids": 28
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum+=(i*i)\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum = sum + i**2\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**2\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #Number of Odd natural numbers\n    num = (n//2)*2 +1\n    #Square of the number\n    sq = (num**2)\n    return sq\n    \n    \n",
        "num_ids": 46
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n-1) / 2 + n\n",
        "num_ids": 31
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 0 if n == 0 else (n-1)*3 + 2\n",
        "num_ids": 19
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 0\n    \ndef find_pair_sum(n):\n    '''\n    Write a function to find the pair sum of then'th number.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n",
        "num_ids": 75
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # loop from 1 to n and subtract 1 from n as each star will be the n-1th number.\n    # since n is 1 indexed, subtract 1 to get the correct star number.\n    # and return the star number.\n    for i in range(1, n):\n        n -= 1\n        \n    return n\n",
        "num_ids": 76
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # algorithm: n is even, star is a sine of n\n    if n % 2 == 0:\n        return int(n/2)\n    else:\n        return int(3*n/2)\n",
        "num_ids": 51
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # a0,a1,a2,a3.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....aN-1\n    # a0,a1,a2.....",
        "num_ids": 2016
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = 1\n    while n <= 6:\n        n += 1\n    return n\n",
        "num_ids": 23
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is not str:\n        return('No valid input')\n    else:\n        ascii_code = ord(k)\n        return(ascii_code)\n",
        "num_ids": 47
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef in_range(k,start,end):\n    '''\n    Write a function to check whether a character is in range.\n    '''\n    return start <= ord(k) <= end\ndef in_order_search(arr,k):\n    '''\n    Write a function to check whether an array is sorted in ascending order.\n    '''\n    l = len(arr)\n    lo = 0\n    hi = l-1\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if arr[mid] < k:\n            lo = mid+1\n        elif arr[mid] > k:\n            hi = mid-1\n        else:\n            return True\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return ord(k)\n    except:\n        return None\n",
        "num_ids": 21
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    n = ord(k)\n    if 0 <= n < 64:\n        return n\n    else:\n        return 64\n",
        "num_ids": 31
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i = 0\n    sum = 0\n    while i < len(arr):\n        if i % 2 == 0:\n            sum += arr[i]\n        i += 1\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    # Hint: Check if the element is even and add it to the sum.\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            s = s + arr[i]\n    print(s)\n",
        "num_ids": 52
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    sum_even_numbers = 0\n    list_len = len(arr)\n    \n    if list_len == 0:\n        return 0\n    \n    for i in range(list_len):\n        if arr[i] % 2 == 0:\n            sum_even_numbers = sum_even_numbers + arr[i]\n    \n    return sum_even_numbers\n",
        "num_ids": 95
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    i = 0\n    j = 0\n",
        "num_ids": 17
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 46
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(0,len(arr),2) if arr[i]%2==0])\n",
        "num_ids": 34
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr),2):\n        if arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    if arr is None:\n        return 0\n        \n    sum_even = 0\n    \n    for i in range(0,len(arr)):\n        if i % 2 == 0:\n            sum_even += arr[i]\n            \n    return sum_even\n",
        "num_ids": 67
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if(i % 2 == 0):\n            sum += arr[i]\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return (n**5)\n    '''\n    Odd Sum\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    a = 0\n    i = 1\n    while i <= n:\n        a += i\n        i += 2\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<=0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return even_Power_Sum(n-1) + 2**(n-1)*(2**n-1)\n",
        "num_ids": 58
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum = sum + i**5\n    print(sum)\n",
        "num_ids": 44
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 1:\n        return -1\n    even_sum = 0\n    for i in range(n):\n        even_sum += i**5\n    return even_sum",
        "num_ids": 44
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\nprint(even_Power_Sum(4))\n",
        "num_ids": 47
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    i = 5\n    while i <= n:\n        even_sum = even_sum + i ** 5\n        i += 1\n    return even_sum\n",
        "num_ids": 45
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total += i ** 5\n    print(total)\n",
        "num_ids": 38
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum += i**5\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def even_Power_Sum(n):\n        Sum = 0\n        for i in range(n):\n            if i % 2 == 0:\n                Sum += i ** 5\n        return Sum\n",
        "num_ids": 47
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #solution\n    return [item[1] for item in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for x in test_list:\n        new_list.append(x[0])\n    return new_list\n",
        "num_ids": 36
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n",
        "num_ids": 19
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[2] for t in test_list]\n    \ndef the_average(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the average of the rear element of each tuple.\n    '''\n    return sum(test_list)/len(test_list)\n    \ndef the_median(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the middle element of each tuple if the list contains an odd number of tuples.\n    Otherwise, it returns the average of the middle two elements.\n    '''\n    n = len(test_list)\n    if n % 2 == 1:\n        return test_list[n//2][2]\n    else:\n        return (test_list[n//2-1][2] + test_list[n//2][2])/2\n        \ndef the_minimum(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the smallest element of each tuple.\n    '''\n    return min(test_list)\n    \ndef the_maximum(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the largest element of each tuple.\n    '''\n    return max(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    for i in test_list:\n        print(i[-1])\n",
        "num_ids": 20
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_list[-1]]\n",
        "num_ids": 13
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: x[-1], test_list))\n",
        "num_ids": 21
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[-1])\n    return rear\n",
        "num_ids": 33
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup_a = []\n    tup_b = []\n    for i in range(len(test_tup1)):\n        tup_a.append(test_tup1[i] - test_tup2[i])\n    for i in range(len(test_tup2)):\n        tup_b.append(test_tup2[i] - test_tup1[i])\n    return tup_a, tup_b\n",
        "num_ids": 114
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i], )\n    return result\n    \n    \n    \ndef count_mismatch(test_tup, correct_tup):\n    '''\n    Write a function that counts the number of mismatches between two tuples. A mismatch is when an element of the first tuple does not match an element of the second tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= correct_tup[i]:\n            result += 1\n    return result\n    \n    \n    \ndef replace_elements(test_tup, correct_tup):\n    '''\n    Write a function that takes in two tuples and replaces the elements of the first tuple with the corresponding elements of the second tuple.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] = correct_tup[i]\n    return test_tup\n    \n    \n    \ndef remove_elements(test_tup, correct_tup):\n    '''\n    Write a function that takes in two tuples and removes the elements of the first tuple that are present in the second tuple.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        if test_tup[i] not in correct_tup:\n            result += (test_tup[i], )\n    return result\n    \n    \n    \ndef equal_lists(test_list, correct_list):\n    '''\n    Write a function that takes in two lists and returns True if the lists are equal, False if they are not.\n    '''\n    result = True\n    if len(test_list)!= len(correct_list):\n        result = False\n    for i in range(len(test_list)):\n        if test_list[i]!= correct_list[i]:\n            result = False\n    return result\n    \n    \n    \ndef sort_lists(test_list, correct_list):\n    '''\n    Write a function that takes in two lists and returns True if they are sorted in the same order, False otherwise.\n    '''\n    result = True\n    if len(test_list)!= len(correct_list):\n        result = False\n    for i in range(len(test_list)):\n        if test_list[i]!= correct_list[i]:\n            result = False\n    if test_list == sorted(test_list):\n        result = True\n    return result\n    \n    \n    \ndef string_split(test_string, correct_string):\n    '''\n    Write a function that takes in a string and splits it into a list.\n    '''\n    result = (test_string.split(correct_string), )\n    return result\n    \n    \n    \ndef count_words(test_string, correct_string):\n    '''\n    Write a function that takes in a string and counts the number of words in the string.\n    '''\n    result = len(test_string.split())\n    return result\n    \n    \n    \ndef string_join(test_list, correct_string):\n    '''\n    Write a function that takes in a list and joins the elements of the list into a string.\n    '''\n    result = (correct_string.join(test_list), )\n    return result\n    \n    \n    \ndef string_length(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns the length of the string.\n    '''\n    result = len(test_string)\n    return result\n    \n    \n    \ndef reverse_string(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns it in reverse order.\n    '''\n    result = test_string[::-1]\n    return result\n    \n    \n    \ndef is_palindrome(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome, False otherwise.\n    '''\n    result = test_string == correct_string[::-1]\n    return result\n    \n    \n    \ndef dict_from_string(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns a dictionary that contains each letter of the string as a key and the number of times it occurs as the value.\n    '''\n    result = {}\n    for i in test_string:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n    \n    \n    \ndef dict_from_string_sorted(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns a dictionary that contains each letter of the string as a key and the number of times it occurs as the value. The dictionary should be sorted in alphabetical order.\n    '''\n    result = {}\n    for i in test_string:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return sorted(result.items())\n    \n    \n    \ndef is_anagram(test_string, correct_string):\n    '''\n    Write a function that takes in two strings and returns True if the letters in one string can be rearranged to spell the second string.\n    '''\n    result = True\n    test_string = list(test_string)\n    correct_string = list(correct_string)\n    test_string.sort()\n    correct_string.sort()\n    if test_string == correct_string:\n        result = True\n    return result\n    \n    \n    \ndef string_contains(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns True if it contains a particular string, False if it does not.\n    '''\n    result = True\n    if correct_string in test_string:\n        result = True\n    return result\n    \n    \n    \ndef remove_letters(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns a new string that is comprised of the characters in the original string that are not in the second string.\n    '''\n    result = ()\n    if test_string == correct_string:\n        return test_string\n    for i in range(len(test_string)):\n        if test_string[i] in correct_string:\n            continue\n        else:\n            result += (test_string[i], )\n    return result\n    \n    \n    \ndef replace_letters(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns a new string that is comprised of the characters in the original string that are not in the second string.\n    '''\n    result = ()\n    if test_string == correct_string:\n        return test_string\n    for i in range(len(test_string)):\n        if test_string[i] in correct_string:\n            continue\n        else:\n            result += (correct_string[i], )\n    return result\n    \n    \n    \ndef replace_letters_with_spaces(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns a new string that is comprised of the characters in the original string that are not in the second string.\n    '''\n    result = ()\n    if test_string == correct_string:\n        return test_string\n    for i in range(len(test_string)):\n        if test_string[i] in correct_string:\n            continue\n        else:\n            result += (' ', )\n    return result\n    \n    \n    \ndef is_palindrome_with_spaces(test_string, correct_string):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome, False otherwise.\n    '''\n    result = False\n    test_string = list(test_string)\n    correct_string = list(correct_string)\n    test_string.sort()\n    correct_string.sort()\n    if test_string == correct_string:\n        result = True\n    return resul",
        "num_ids": 67
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert type(test_tup1) == tuple, 'First argument must be a tuple'\n    assert type(test_tup2) == tuple, 'Second argument must be a tuple'\n",
        "num_ids": 46
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            sub.append(test_tup1[i] - test_tup2[i])\n    return sub\n",
        "num_ids": 70
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (tuple(map(lambda x, y: x - y, test_tup1, test_tup2)))\n",
        "num_ids": 32
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(0, len(test_tup1))])\n",
        "num_ids": 40
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1_list = []\n    tup2_list = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        tup1_list.append(tup1)\n        tup2_list.append(tup2)\n",
        "num_ids": 73
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = list()\n    new_tuple = test_tup1[:]\n    new_tuple[:] = list()\n    for i in range(len(test_tup2)):\n        new_tuple[i] = test_tup1[i] - test_tup2[i]\n    return new_tuple\nprint(substract_elements((1,2,3),(2,3,4)))\n",
        "num_ids": 108
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([el1-el2 for el1, el2 in zip(test_tup1, test_tup2)])\n",
        "num_ids": 34
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[:], tuple(x-y for x, y in zip(test_tup1[:], test_tup2))\n",
        "num_ids": 39
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        #print(i)\n        if i%2==0:\n            sum += math.factorial(n)/math.factorial(n-i)\n    return sum\nprint(even_binomial_Coeff_Sum(10))\n",
        "num_ids": 76
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    \n    if n == 1:\n        Sum = 0\n        return(Sum)\n",
        "num_ids": 27
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(0,n):\n        total = total + (n-i) * ((i+1)/(i+2))\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # NOTE: An even index binomial coefficient is an integer equal to (n / 2) * (n / 2) + n / 2\n    # Note that n / 2 is the nth index binomial coefficient.\n    # This solution uses dynamic programming to calculate the value of the binomial coefficient n.\n    # Note that we will be using the binomial coefficient formula:\n    #    binomialCoeffFormula = 1 * (n / 2) + 0 * n + (n / 2) * (n / 2) + n / 2 * (n / 2) +... + 1 * 1 + 0 * 2 + 1 * 3 + 2 * 4 + 3 * 5 +... + n / 2 * (n / 2)\n    # So, we can see that we are writing down the formulae for all of the nth index binomial coefficient\n    # We then will apply the formula for the sum of the binomial coefficient to find the sum of all of the index binomial coefficients.\n",
        "num_ids": 220
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coefficient_array = []\n    binomial_coefficient_array.append(1)\n    for i in range(2, n + 1):\n        binomial_coefficient_array.append(0)\n        \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            binomial_coefficient_array[i] = binomial_coefficient_array[i - 2] + binomial_coefficient_array[i - 1] \n",
        "num_ids": 117
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff_list = []\n    for i in range(n+1):\n        binomial_coeff_list.append(math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n        \n    even_binomial_Coeff_Sum = 0\n    for j in range(n+1):\n        if(j%2==0):\n            even_binomial_Coeff_Sum += binomial_coeff_list[j]\n        \n    return even_binomial_Coeff_Sum\n",
        "num_ids": 135
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    \n    for i in range(0, n+1):\n        ans += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n    return ans \n    \ndef even_binomial_Coeff_Sum_3_9( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the even index binomial coefficients with n = 3, n = 9, and n = 17.\n    '''\n    \n    ans = 0\n    \n    for i in range(0, n+1):\n        ans += math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return ans\n",
        "num_ids": 56
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_Coeff_list = []\n    for i in range(1, n+1):\n        sum_of_even_binomial_Coeff = math.factorial(i)/(math.factorial(i-2)*math.factorial(2))\n        even_binomial_Coeff_list.append(sum_of_even_binomial_Coeff)\n    \n    return even_binomial_Coeff_list\n",
        "num_ids": 111
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    S = 0\n    for i in range(0,n+1):\n        S += (i*((2*i)-1)/6)\n    return S\n",
        "num_ids": 40
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 ==0:\n            sum = sum + math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    v=pi*r**2*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    v=pi*r*h\n    return v\ndef volume_rectangle(l,b):\n    '''\n    Write a function that takes in the length and the breadth of a rectangle and returns the volume.\n    '''\n    v=l*b\n    return v\ndef volume_pyramid(l,h):\n    '''\n    Write a function that takes in the length and the height of a pyramid and returns the volume.\n    '''\n    v=l*h\n    return v\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function that takes in the length, width and height of a cuboid and returns the volume.\n    '''\n    v=l*w*h\n    return v\ndef area_square(l):\n    '''\n    Write a function that takes in the length of a square and returns the area.\n    '''\n    a=l**2\n    return a\ndef area_rectangle(l,b):\n    '''\n    Write a function that takes in the length and the breadth of a rectangle and returns the area.\n    '''\n    a=l*b\n    return a\ndef area_pyramid(l,h):\n    '''\n    Write a function that takes in the length and the height of a pyramid and returns the area.\n    '''\n    a=l*h\n    return a\ndef area_triangle(b,h):\n    '''\n    Write a function that takes in the base and the height of a triangle and returns the area.\n    '''\n    a=0.5*b*h\n    return a\ndef area_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the area.\n    '''\n    a=pi*r**2*h\n    return a\ndef area_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the area.\n    '''\n    a=pi*r**2*h\n    return a\ndef area_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the area.\n    '''\n    a=pi*r*h\n    return a\ndef area_rectangle(l,b):\n    '''\n    Write a function that takes in the length and the breadth of a rectangle and returns the area.\n    '''\n    a=l*b\n    return a\ndef area_pyramid(l,h):\n    '''\n    Write a function that takes in the length and the height of a pyramid and returns the area.\n    '''\n    a=l*h\n    return a\ndef area_cuboid(l,w,h):\n    '''\n    Write a function that takes in the length, width and height of a cuboid and returns the area.\n    '''\n    a=l*w*h\n    return a\ndef side_length(a,b,c):\n    '''\n    Write a function that takes in the length, width and height of a triangle and returns the length of the sides.\n    '''\n    s=a+b+c\n    return s\ndef perimeter_triangle(b,h):\n    '''\n    Write a function that takes in the base and the height of a triangle and returns the perimeter of the triangle.\n    '''\n    p=b+b+h\n    return p\ndef perimeter_rectangle(l,b):\n    '''\n    Write a function that takes in the length and the breadth of a rectangle and returns the perimeter of the rectangle.\n    '''\n    p=l+b\n    return p\ndef perimeter_pyramid(l,h):\n    '''\n    Write a function that takes in the length and the height of a pyramid and returns the perimeter of the pyramid.\n    '''\n    p=2*l+2*h\n    return p\ndef perimeter_cuboid(l,w,h):\n    '''\n    Write a function that takes in the length, width and height of a cuboid and returns the perimeter of the cuboid.\n    '''\n    p=2*l+2*w+2*h\n    return p\ndef side_perimeter(a,b,c):\n    '''\n    Write a function that takes in the length, width and height of a triangle and returns the length of the side.\n    '''\n    p=a+b+c\n    return p\ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume of that sphere.\n    '''\n    v=4/3*(pi)*(r**3)\n    return v\ndef area_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the area of that sphere.\n    '''\n    a=4*pi*(r**3)\n    return a\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the surface area of that cylinder.\n    '''\n    a=2*pi*r*h\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the volume of that cone.\n    '''\n    v=pi*r*h\n    return v\ndef surface_area_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the surface area of that cone.\n    '''\n    a=2*pi*r*h\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume of that sphere.\n    '''\n    v=4/3*pi*(r**3)\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the surface area of that sphere.\n    '''\n    a=4*pi*(r**2)\n    return a\ndef surface_area_cuboid(l,w,h):\n    '''\n    Write a function that takes in the length, width and height of a cuboid and returns the surface area of that cuboid.\n    '''\n    a=l*w*h\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume of that sphere.\n    '''\n    v=4/3*pi*(r**3)\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the surface area of that sphere.\n    '''\n    a=4*pi*(r**2)\n    return a\ndef volume_pyramid(l,h):\n    '''\n    Write a function that takes in the length and the height of a pyramid and returns the volume of that pyramid.\n    '''\n    v=l*h\n    return v\ndef surface_area_pyramid(l,h):\n    '''\n    Write a function that takes in the length and the height of a pyramid and returns the surface area of that pyramid.\n    '''\n    a=2*l*h\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the volume of that cylinder.\n    '''\n    v=pi*r**2*h\n    return v\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the surface area of that cylinder.\n    '''\n    a=2*pi*r*h\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the volume of that cone.\n    '''\n    v=pi*r*h\n    return v\ndef surface_area_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the surface area of tha",
        "num_ids": 23
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (pi * r**2 * h)\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume = (math.pi)*(r**2)*h\n    return volume\n    \n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    volume = (4/3)*(math.pi)*(r**3)\n    return volume\n    \n    \n    \ndef area_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the surface area.\n    '''\n    import math\n    area = (math.pi)*(r**2)*(h+r)\n    return area\n    \n    \n    \ndef area_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the surface area.\n    '''\n    area = (4*math.pi)*(r**2)\n    return area\n    \n    \n    \ndef area_parallelogram(b,h):\n    '''\n    Write a function that takes in the base and height of a parallelogram and returns the area.\n    '''\n    area = b*h\n    return area\n    \n    \n    \ndef volume_parallelogram(b,h):\n    '''\n    Write a function that takes in the base and height of a parallelogram and returns the volume.\n    '''\n    volume = b*h\n    return volume\n    \n    \n    \ndef circumference_triangle(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns the circumference.\n    '''\n    circumference = 2*(b+h)\n    return circumference\n    \n    \n    \ndef area_triangle(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns the area.\n    '''\n    area = (0.5)*(b*h)\n    return area\n    \n    \n    \ndef area_trapezoid(h1,h2,h3):\n    '''\n    Write a function that takes in the height of each side of a triangle and returns the area.\n    '''\n    area = h1+h2+h3\n    return area\n    \n    \n    \ndef volume_trapezoid(h1,h2,h3):\n    '''\n    Write a function that takes in the height of each side of a triangle and returns the volume.\n    '''\n    volume = h1+h2+h3\n    return volume\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    import re\n    word = word.lower()\n    word = re.sub(\"\\W\",\"\",word)\n    if word == word[::-1]:\n        return True\n    return False\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes in a word and returns whether or not that word is a palindrome.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \n    \n    \ndef is_pa",
        "num_ids": 59
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = math.pi\n    volume = pi*r**2*h\n    return volume\n    \nprint(volume_cylinder(2,1))\nprint(volume_cylinder(2,3))\nprint(volume_cylinder(3,2))\n",
        "num_ids": 62
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (math.pi*r*r*h)/3\n    return volume\n",
        "num_ids": 22
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*(r**2)*h\n    # volume = pi * (r**2) * h\n    # return volume\n",
        "num_ids": 34
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #volume = ((radius * radius * math.pi) / (4 * math.pi)) * (math.pi * (radius * radius + height * height))\n    volume = ((4 * math.pi * (r * r) * h) / 3)\n    return volume\n",
        "num_ids": 65
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r**2*h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = (4/3)*pi*r**3\n    return volume\n",
        "num_ids": 26
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    l = []\n    for k in dict:\n        if dict[k] >= n:\n            l.append(k)\n    return dict\n",
        "num_ids": 36
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    new = {}\n    for key,value in dict.items():\n        if value >= n:\n            new[key] = value\n    return new",
        "num_ids": 38
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n    # or\n    # return {key:value for key,value in dict.items() if value >= n}\n",
        "num_ids": 49
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_dict = {}\n    for key in dict.keys():\n        if dict[key]>=n:\n            filter_dict[key] = dict[key]\n    return filter_dict\n",
        "num_ids": 48
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d={key:value for key,value in dict.items() if value>=n}\n    return d\n",
        "num_ids": 28
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict.keys():\n        if dict[key]<=n:\n            yield dict[key]\n",
        "num_ids": 30
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    new_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            n+=1\n    return n\n",
        "num_ids": 52
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    print(count)\n",
        "num_ids": 51
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup = test_tup\n    n = 0\n    for i in range(len(tup)):\n        if tup[i] > tup[i+1]:\n            n += 1\n    return n\n",
        "num_ids": 54
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n",
        "num_ids": 19
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(test_tup[0])\n    \n",
        "num_ids": 21
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            n += 1\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    cnt = 0\n    for ele in test_tup:\n        if test_tup[cnt] < ele:\n            break\n        cnt += 1\n    return cnt\n",
        "num_ids": 46
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[result]:\n            result = i\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] <= test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #create a list with the numbers from 1 to N\n    num_list = range(1,n+1)\n",
        "num_ids": 29
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # A Python3 program to find the nth decagonal number. \n    \n    # Function to calculate nth decagonal \n    def decagonals(n): \n        result = 1\n        for i in range(1, n + 1): \n            result = result*(i + 1) \n        return result\n    \n    # Driver Code \n    if n <= 0: \n        print('n must be greater than 0')\n    else: \n        print(decagonals(n)) \n",
        "num_ids": 120
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    else:\n        return n * (1 + n) // 2\n    \n",
        "num_ids": 42
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = 1\n    while n > 0:\n        decagonal_number += 1\n        n = n - 1\n    return decagonal_number\n",
        "num_ids": 39
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    while n > count:\n        n = int(count * (3 * count - 1) / 2)\n        count += 1\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 1\n    for i in range(n): \n        dec_num = dec_num * (1 + 1/dec_num)\n        dec_num = dec_num * (1 + 1/dec_num)\n    return dec_num\n",
        "num_ids": 63
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(n+1)//2)\n",
        "num_ids": 16
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    i = 1\n    while i <= n:\n        decagonal += i\n        i += 1\n    return decagonal\n",
        "num_ids": 36
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    while n:\n        n -= 1\n        if n == i:\n            return i\n        n = n - 1\n",
        "num_ids": 35
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    res = 0\n    for i in range(1, n + 1):\n        res += i * (i - 1) // 2\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n",
        "num_ids": 31
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    \n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return True, pos\n    else:\n        return False, -1\n",
        "num_ids": 75
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Start at index 0 and compare each element\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    # If we get to the end and haven't returned yet, then the element isn't in the array\n    return False, -1\n",
        "num_ids": 72
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    \n    return False, -1\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 41
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return (found, index)\n",
        "num_ids": 59
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n",
        "num_ids": 34
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 45
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    count = 0\n    found = False\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return found, count\n        count += 1\n    return found, count\n",
        "num_ids": 60
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\n    \nif __name__ == \"__main__\":\n    # test 1\n    test_list = ['a', 'b', 'c', 'd']\n    if all_unique(test_list):\n        print(\"List is unique\")\n    else:\n        print(\"List is not unique\")\n    \n    # test 2\n    test_list = ['a', 'b', 'c', 'd', 'e']\n    if all_unique(test_list):\n        print(\"List is unique\")\n    else:\n        print(\"List is not unique\")\n    \n    # test 3\n    test_list = ['a', 'b', 'c', 'd', 'e', 'a', 'c', 'd']\n    if all_unique(test_list):\n        print(\"List is unique\")\n    else:\n        print(\"List is not unique\")\n    \n    # test 4\n    test_list = ['a', 'b', 'c', 'd', 'e', 'a', 'c']\n    if all_unique(test_list):\n        print(\"List is unique\")\n    else:\n        print(\"List is not unique\")\n    \n    # test 5\n    test_list = ['a', 'b', 'c', 'd', 'e', 'a', 'c', 'd', 'f', 'g']\n    if all_unique(test_list):\n        print(\"List is unique\")\n    else:\n        print(\"List is not unique\")\n    \n    # test 6\n    test_list = ['a', 'b', 'c', 'd', 'e', 'a', 'c', 'd', 'f', 'g', 'h']\n    if all_unique(test_list):\n        print(\"List is unique\")\n    else:\n        print(\"List is not unique\"",
        "num_ids": 444
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 37
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_lst = list(test_list)\n    if len(test_list_lst) == len(set(test_list_lst)):\n        print(\"The list contains all unique values.\")\n    else:\n        print(\"The list contains some repeated values.\")\n",
        "num_ids": 68
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    n=len(test_list)\n    if n==0:\n        print(\"empty list\")\n    else:\n        if n==len(set(test_list)):\n            print(\"All unique\")\n        else:\n            print(\"not unique\")\n",
        "num_ids": 62
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Python code for checking if all the characters in a given list are unique.\n    # importing 'collections' for 'Counter'\n    from collections import Counter\n    # print(Counter(test_list).most_common())\n    # sorted_x = sorted(Counter(test_list).items(), key=lambda x: x[1])\n    # print(sorted_x)\n    # If any of the elements are present in the dictionary more than once then return False else return True.\n    # sorted_x = sorted(Counter(test_list).items(), key=lambda x: x[1])\n    # if sorted_x:\n    #     if sorted_x[0][1] > 1:\n    #         return False\n    #     else:\n    #         return True\n    # else:\n    #     return True\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 209
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    flag = 0\n    if(len(test_list) == len(set(test_list))):\n        flag = 1\n        print(\"The elements are unique\")\n    else:\n        flag = 0\n        print(\"The elements are not unique\")\n    return flag\n",
        "num_ids": 64
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    return [n1 - n2 for n1, n2 in zip(nums1, nums2)]\n",
        "num_ids": 61
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    length = min(len(nums1),len(nums2))\n    res = []\n    for i in range(length):\n        res.append(nums1[i]-nums2[i])\n    return res\n    \ndef remove_duplicates(nums):\n    '''\n    Given a sorted list nums, remove the duplicates in-place such that each element appears only once and returns the new length.\n    '''\n    length = len(nums)\n    if length <= 1:\n        return length\n    i = 0\n    while i < length-1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n            length -= 1\n        else:\n            i += 1\n    return length\n    \ndef remove_zero_elements(nums):\n    '''\n    Given a list of integers, remove the elements which are zero.\n    '''\n    length = len(nums)\n    i = 0\n    while i < length:\n        if nums[i] == 0:\n            nums.pop(i)\n            length -= 1\n        else:\n            i += 1\n    return length\n    \ndef add_sublists(nums1,nums2):\n    '''\n    Given two sorted lists nums1 and nums2 of size m and n respectively, return a sorted list of all the possible merges\n    of the two sorted lists.\n    \n    Example 1:\n    Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n    Output: [\n    [2,1,2],\n    [2,2,5],\n    [2,2,6]\n    ]\n    \n    Example 2:\n    Input: nums1 = [1], m = 1, nums2 = [], n = 0\n    Output: []\n    \n    Constraints:\n    n == nums1.length\n    m == nums1.length\n    n == nums2.length\n    m == nums2.length\n    1 <= n, m <= 1000\n    1 <= m, n <= n\n    nums1, nums2 are both sorted.\n    Each element in the result is distinct.\n    '''\n    length = min(len(nums1),len(nums2))\n    res = []\n    for i in range(length):\n        if nums1[i] == 0 and nums2[i] == 0:\n            continue\n        elif nums1[i] == 0:\n            res.append(nums2[:i]+[0])\n            nums2.pop(0)\n        elif nums2[i] == 0:\n            res.append(nums1[:i]+[0])\n            nums1.pop(0)\n        else:\n            res.append(nums1[:i]+nums2[:i]+[nums1[i]+nums2[i]]+nums1[i+1:])\n            nums1.pop(i+1)\n            nums2.pop(i)\n    return res\n    \ndef rotate_matrix(matrix):\n    '''\n    Given a square 2D matrix, rotate it by 90 degrees (clockwise).\n    \n    Example 1:\n    Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    Output: [[7,4,1],[8,5,2],[9,6,3]]\n    \n    Constraints:\n    matrix is a 2D square matrix.\n    (1 <= matrix.length, matrix[0].length <= 100)\n    '''\n    if len(matrix) == 0:\n        return matrix\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i+1,n):\n            matrix[i][j],matrix[j][i] = matrix[j][i],matrix[i][j]\n    for i in range(n):\n        for j in range(n//2):\n            matrix[i][j],matrix[i][n-1-j] = matrix[i][n-1-j],matrix[i][j]\n    return matrix\n    \ndef build_rectangle(width,height):\n    '''\n    Given the width and height of a rectangle, return its coordinates\n    \n    Example 1:\n    Input: width = 5, height = 4\n    Output: [[0,0],[0,4],[5,0],[5,4]]\n    \n    Constraints:\n    1 <= width, height <= 100\n    '''\n    res = []\n    for i in range(width):\n        for j in range(height):\n            res.append([i,j])\n    return res\n    \ndef max_array(nums):\n    '''\n    Given an array, find the maximal length of a contiguous subarray with the same elements.\n    \n    Example 1:\n    Input: nums = [1,2,3,2,1]\n    Output: 4\n    \n    Constraints:\n    1 <= nums.length <= 10^4\n    -10^4 <= nums[i] <= 10^4\n    '''\n    length = len(nums)\n    if length <= 1:\n        return length\n    start,end = 0,0\n    max_length = 0\n    while end < length:\n        while end < length and nums[end] == nums[end-1]:\n            end += 1\n        if end == length or nums[start]!= nums[end-1]:\n            max_length = max(max_length,end - start)\n            start = end\n    return max_length\n    \ndef find_single_number(nums):\n    '''\n    Given an array of integers nums, in which exactly two integers appear only once and all the other integers appear exactly twice. Find the two integers that appear only once.\n    \n    Example 1:\n    Input: nums = [1,2,1,3,2,5]\n    Output: [3,5]\n    \n    Constraints:\n    The input array will only contain integers in the range [0, 100,000].\n    The length of the input array will be in the range [0, 1000].\n    '''\n    length = len(nums)\n    if length <= 1:\n        return None\n    hashtable = {}\n    for num in nums:\n        if num in hashtable:\n            hashtable[num] += 1\n        else:\n            hashtable[num] = 1\n    for key in hashtable:\n        if hashtable[key] == 1:\n            return key\n    return None\n    \ndef find_subarray_sum(nums,k):\n    '''\n    Given an array of integers nums and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.\n    \n    Example 1:\n    Input: nums = [1,1,1], k = 2\n    Output: 2\n    \n    Constraints:\n    1 <= nums.length <= 2*10^4\n    -10^4 <= nums[i] <= 10^4\n    -10^4 <= k <= 10^4\n    '''\n    length = len(nums)\n    if length <= 1:\n        return 0\n    sum_map = {}\n    count = 0\n    sum_map[0] = 1\n    for num in nums:\n        if num in sum_map:\n            sum_map[num] += 1\n        else:\n            sum_map[num] = 1\n        if sum(sum_map.keys()) == k:\n            count += 1\n        while sum(sum_map.keys()) > k:\n            if sum_map[nums[0]] > 1:\n                sum_map[nums[0]] -= 1\n            else:\n                del sum_map[nums[0]]\n            nums.pop(0)\n    return count\n    \ndef find_subarray_sum_of_k(nums,k):\n    '''\n    Given an array of integers nums and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.\n    \n    Example 1:\n    Input: nums = [1,1,1], k = 2\n    Output: 2\n    \n    Constraints:\n    1 <= nums.length <= 2*10^4\n    -1",
        "num_ids": 88
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x for x in nums1 if x not in nums2]\n",
        "num_ids": 21
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = [float(n) for n in nums1]\n    nums2 = [float(n) for n in nums2]\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    if len(nums1)!= len(nums2):\n        return []\n    s = []\n    for i in range(len(nums1)):\n        s.append(nums1[i]-nums2[i])\n    return s\n",
        "num_ids": 159
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] - nums2[i])\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list1 = nums1\n    list2 = nums2\n    lst3 = []\n    for i in range(0,len(list1)):\n        lst3.append(list1[i]-list2[i])\n    return lst3\n",
        "num_ids": 64
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.extend(nums2)\n    return nums1\n",
        "num_ids": 21
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    diff_list=[]\n    for i in range(len(nums1)):\n        diff_list.append(nums1[i]-nums2[i])\n    return diff_list\n",
        "num_ids": 49
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    a = [x-y for x, y in zip(nums1,nums2)]\n    return a\n    \ndef pascal_row(n):\n    '''\n    Given a non-negative integer n, generate a square pascal's triangle.\n    '''\n    t=[[1]]\n    for i in range(n):\n        # t=[]\n        t.append([t[i][j]+t[i+1][j] for j in range(i+1)])\n        # t=[[1] for i in range(n+1)]\n        # t=[]\n        # t.append(1)\n        # for j in range(i+1):\n        #     t.append(t[j] + t[j+1])\n    return t\n",
        "num_ids": 121
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n",
        "num_ids": 35
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str1 = str(n)\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \nn = int(input())\ncount = validate(n)\nlst = []\nfor key,value in count.items():\n    if value <= int(key):\n        lst.append(key)\nlst = sorted(lst,reverse=True)\nfor i in lst:\n    print(i,end=\"\")",
        "num_ids": 132
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = \"123456789\"\n    count = 0\n    for i in digits:\n        if n == i:\n            count = count + 1\n    print(count)\n",
        "num_ids": 45
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 1\n    number = str(n)\n    while count <= len(number):\n        print(number[count - 1])\n        count = count + 1\n    return number\n    \nprint(validate(153))\n",
        "num_ids": 55
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    while n > 0:\n        if n % 10 > n:\n            print(\"Frequency of each digit in the integer is less than or equal to the digit itself.\")\n            break\n        n = n // 10\n    else:\n        print(\"Frequency of each digit in the integer is greater than or equal to the digit itself.\")\n",
        "num_ids": 76
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # traverse in the range of 0 to the n \n    for i in range(10): \n        print (n)\n        #  print the output in the form of string \n        print(i, \" : \", end =\"\") \n        # check the frequency of the digit in the number \n        if(n%i == 0): \n            print(i, end =\" \") \n    print() \n",
        "num_ids": 101
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    n = int(n)\n    while n!= 0:\n        count = count + 1\n        n = int(n/10)\n    if count >= int(n):\n        return False\n    else:\n        return True\n    \ndef val():\n    '''\n    Write a python function takes in two integers as input. Return True if their sum equals the difference between them else return False.\n    '''\n    num = int(input())\n    den = int(input())\n    if (num+den) == (num-den):\n        return True\n    else:\n        return False\n    \ndef solve(m,n):\n    '''\n    Write a python function takes in two integers as input. Return the sum of the prime factors of their product.\n    '''\n    sum = 1\n    m = int(m)\n    n = int(n)\n    while m > 0 or n > 0:\n        if m % 2 == 0:\n            m = m/2\n            sum = sum*2\n        elif n % 2 == 0:\n            n = n/2\n            sum = sum*2\n        elif m % 3 == 0:\n            m = m/3\n            sum = sum*3\n        elif n % 3 == 0:\n            n = n/3\n            sum = sum*3\n        elif m % 5 == 0:\n            m = m/5\n            sum = sum*5\n        elif n % 5 == 0:\n            n = n/5\n            sum = sum*5\n        elif m % 7 == 0:\n            m = m/7\n            sum = sum*7\n        elif n % 7 == 0:\n            n = n/7\n            sum = sum*7\n        elif m % 11 == 0:\n            m = m/11\n            sum = sum*11\n        elif n % 11 == 0:\n            n = n/11\n            sum = sum*11\n        elif m % 13 == 0:\n            m = m/13\n            sum = sum*13\n        elif n % 13 == 0:\n            n = n/13\n            sum = sum*13\n        elif m % 17 == 0:\n            m = m/17\n            sum = sum*17\n        elif n % 17 == 0:\n            n = n/17\n            sum = sum*17\n        elif m % 19 == 0:\n            m = m/19\n            sum = sum*19\n        elif n % 19 == 0:\n            n = n/19\n            sum = sum*19\n        elif m % 23 == 0:\n            m = m/23\n            sum = sum*23\n        elif n % 23 == 0:\n            n = n/23\n            sum = sum*23\n        elif m % 29 == 0:\n            m = m/29\n            sum = sum*29\n        elif n % 29 == 0:\n            n = n/29\n            sum = sum*29\n        elif m % 31 == 0:\n            m = m/31\n            sum = sum*31\n        elif n % 31 == 0:\n            n = n/31\n            sum = sum*31\n        elif m % 37 == 0:\n            m = m/37\n            sum = sum*37\n        elif n % 37 == 0:\n            n = n/37\n            sum = sum*37\n        elif m % 41 == 0:\n            m = m/41\n            sum = sum*41\n        elif n % 41 == 0:\n            n = n/41\n            sum = sum*41\n        elif m % 43 == 0:\n            m = m/43\n            sum = sum*43\n        elif n % 43 == 0:\n            n = n/43\n            sum = sum*43\n        elif m % 47 == 0:\n            m = m/47\n            sum = sum*47\n        elif n % 47 == 0:\n            n = n/47\n            sum = sum*47\n        elif m % 49 == 0:\n            m = m/49\n            sum = sum*49\n        elif n % 49 == 0:\n            n = n/49\n            sum = sum*49\n        elif m % 53 == 0:\n            m = m/53\n            sum = sum*53\n        elif n % 53 == 0:\n            n = n/53\n            sum = sum*53\n        elif m % 59 == 0:\n            m = m/59\n            sum = sum*59\n        elif n % 59 == 0:\n            n = n/59\n            sum = sum*59\n        elif m % 61 == 0:\n            m = m/61\n            sum = sum*61\n        elif n % 61 == 0:\n            n = n/61\n            sum = sum*61\n        elif m % 67 == 0:\n            m = m/67\n            sum = sum*67\n        elif n % 67 == 0:\n            n = n/67\n            sum = sum*67\n        elif m % 71 == 0:\n            m = m/71\n            sum = sum*71\n        elif n % 71 == 0:\n            n = n/71\n            sum = sum*71\n        elif m % 73 == 0:\n            m = m/73\n            sum = sum*73\n        elif n % 73 == 0:\n            n = n/73\n            sum = sum*73\n        elif m % 79 == 0:\n            m = m/79\n            sum = sum*79\n        elif n % 79 == 0:\n            n = n/79\n            sum = sum*79\n        elif m % 83 == 0:\n            m = m/83\n            sum = sum*83\n        elif n % 83 == 0:\n            n = n/83\n            sum = sum*83\n        elif m % 89 == 0:\n            m = m/89\n            sum = sum*89\n        elif n % 89 == 0:\n            n = n/89\n            sum = sum*89\n        elif m % 97 == 0:\n            m = m/97\n            sum = sum*97\n        elif n % 97 == 0:\n            n = n/97\n            sum = sum*97\n        elif m % 101 == 0:\n            m = m/101\n            sum = sum*101\n        elif n % 101 == 0:\n            n = n/101\n            sum = sum*101\n        elif m % 103 == 0:\n            m = m/103\n            sum = sum*103\n        elif n % 103 == 0:\n            n = n/103\n            sum = sum*103\n        elif m % 107 == 0:\n            m = m/107\n            sum = sum*107\n        elif n % 107 == 0:\n            n = n/107\n            sum = sum*107\n        elif m % 109 == 0:\n            m = m/109\n            sum = sum*109\n        elif n % 109 == 0:\n            n = n/109\n            sum = sum*109\n        elif m % 113 == 0:\n            m = m/113\n            sum = sum*113\n        elif n % 113 == 0:\n            n = n/113\n            sum = sum*113\n        elif m % 127 == 0:\n            m = m/127\n            sum = sum*127\n        elif n % 127 == 0:\n            n = n/127\n            sum = sum*127\n        elif m % 131 == 0:\n            m = m/131\n            sum = sum*131\n        elif n % 131 == 0:\n            n = n/131\n            sum = sum*131\n        elif m % 137 == 0:\n            m = m/137\n            sum = sum*137\n        elif n % 137 == 0:\n            n = n/137\n            sum = sum*137\n        elif m % 139 == 0:\n            m = m/139\n            sum = sum*139\n        elif n % 139 == 0:\n            n = n/139\n            sum = sum*139\n        elif m % 149 == 0:\n            m = m/149\n            sum = sum*149\n        elif n % 149 == 0:\n            n = n/149\n            sum = sum*149\n        elif m % 157 == 0:\n            m = m/157\n            sum = sum*157\n        elif n % 157 == 0:\n            n = n/157\n            sum = sum*157\n        elif m % 163 == 0:\n            ",
        "num_ids": 1820
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = dict()\n    while n > 0:\n        if n not in freq:\n            freq[n] = 1\n        else:\n            freq[n] += 1\n        n = n//10\n    \n    for k in freq:\n        if freq[k] <= k:\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    assert n > 0, \"number is negative\"\n    d = str(n)\n    d = sorted(d)\n    for i in range(len(d)):\n        if i == 0:\n            if int(d[i]) > int(d[i+1]):\n                return False\n        elif i == len(d)-1:\n            if int(d[i]) > int(d[i-1]):\n                return False\n        else:\n            if int(d[i]) > int(d[i-1]) and int(d[i]) > int(d[i+1]):\n                return False\n    return True",
        "num_ids": 153
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    freq = {}\n    for i in range(0,len(n)):\n        freq[n[i]] = n.count(n[i])\n    for k,v in freq.items():\n        if v > int(k):\n            return False\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    count = 0\n    while n!= 0:\n        digits.append(n%10)\n        n = n//10\n    for x in digits:\n        count+=1\n        if x<=x:\n            print(\"No\")\n            return\n    print(\"Yes\")\n    return\nvalidate(56)\nvalidate(7)",
        "num_ids": 88
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return check_element(list[1:],element)\n",
        "num_ids": 46
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return True if all(list[i] == element for i in range(len(list))) else False\n",
        "num_ids": 26
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    if len(list)==1:\n        return True if element == list[0] else False\n    if len(list)>1:\n        if list[0]==element:\n            return True\n        else:\n            return check_element(list[1:],element)\n",
        "num_ids": 81
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if not list:\n        return False\n    if len(list) == 1 and list[0] == element:\n        return True\n    else:\n        return element == list[0] and check_element(list[1:],element)\n",
        "num_ids": 58
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # 1st solution\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n    # 2nd solution\n    # return element in list\n",
        "num_ids": 52
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    if count == len(list):\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for item in list:\n        if item == element:\n            count += 1\n    if count == len(list):\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    if count == len(list):\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!=element:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return(re.match(r\"ab*b\", text))\n",
        "num_ids": 18
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match=re.search(r'a[b]{2,3}',text)\n    if match:\n        return 'Match Found!'\n    else:\n        return 'No Match!'\n",
        "num_ids": 47
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    if re.search(\"[ab]\", text):\n        return \"Looks like a bbbaa\"\n    elif re.search(\"[ab]{2}\", text):\n        return \"Looks like a baabbaa\"\n    elif re.search(\"[ab]{3}\", text):\n        return \"Looks like a bbbbbbbb\"\n    else:\n        return \"Not a bbbaa\"\n        \n",
        "num_ids": 104
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search('ab+', text)) or bool(re.search('ab*', text)) or bool(re.search('ab?', text))\n",
        "num_ids": 40
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return True if re.search(\"[ab]+b\", text) else False\n",
        "num_ids": 20
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # return True if the string contains the letter 'a' followed by two or three 'b' characters. \n    # Otherwise, return False.\n    # A list of all of the letters in the alphabet:\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # Make a list to store the counts.\n    counts = []\n    for character in alphabet:\n        counts.append(0)\n",
        "num_ids": 163
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex_pattern = r\"ab*b\"\n    if re.search(regex_pattern, text):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 45
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.findall('ab+',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_two(text):\n    '''\n    Write a function that checks whether a string contains only the 'a' character and the 'b' character.\n    '''\n    match = re.findall('a+',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_two_three(text):\n    '''\n    Write a function that checks whether a string contains only the 'a' character, 'b' character and 'c' character.\n    '''\n    match = re.findall('a+b+c',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b(text):\n    '''\n    Write a function that checks whether a string contains 'a' and 'b' characters.\n    '''\n    match = re.findall('a+b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_ab(text):\n    '''\n    Write a function that checks whether a string contains 'a' and 'b' characters only.\n    '''\n    match = re.findall('a*b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_ab_cb(text):\n    '''\n    Write a function that checks whether a string contains 'a' and 'b' characters followed by 'c' and 'b' characters.\n    '''\n    match = re.findall('a+c?b+c?',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_a(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters.\n    '''\n    match = re.findall('^a*$',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_a_b(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters.\n    '''\n    match = re.findall('^a+b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_ab(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters.\n    '''\n    match = re.findall('^a+b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_ab_cb(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' and 'b' characters.\n    '''\n    match = re.findall('^a+bc?b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_ab(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters.\n    '''\n    match = re.findall('^a+b',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' characters.\n    '''\n    match = re.findall('^a*b*c',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c_d(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' characters followed by 'd' characters.\n    '''\n    match = re.findall('^a*b*c+d',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c_d_e(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' characters followed by 'd' characters followed by 'e' characters.\n    '''\n    match = re.findall('^a*b*c*d*e',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c_d_e_f(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' characters followed by 'd' characters followed by 'e' characters followed by 'f' characters.\n    '''\n    match = re.findall('^a*b*c*d*e*f',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c_d_e_f_g(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' characters followed by 'd' characters followed by 'e' characters followed by 'f' characters followed by 'g' characters.\n    '''\n    match = re.findall('^a*b*c*d*e*f*g',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c_d_e_f_g_h(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' characters followed by 'd' characters followed by 'e' characters followed by 'f' characters followed by 'g' characters followed by 'h' characters.\n    '''\n    match = re.findall('^a*b*c*d*e*f*g*h',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c_d_e_f_g_h_i(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' characters followed by 'd' characters followed by 'e' characters followed by 'f' characters followed by 'g' characters followed by 'h' characters followed by 'i' characters.\n    '''\n    match = re.findall('^a*b*c*d*e*f*g*h*i',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c_d_e_f_g_h_i_j(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' characters followed by 'd' characters followed by 'e' characters followed by 'f' characters followed by 'g' characters followed by 'h' characters followed by 'i' characters followed by 'j' characters.\n    '''\n    match = re.findall('^a*b*c*d*e*f*g*h*i*j',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c_d_e_f_g_h_i_j_k(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by 'b' characters followed by 'c' characters followed by 'd' characters followed by 'e' characters followed by 'f' characters followed by 'g' characters followed by 'h' characters followed by 'i' characters followed by 'j' characters followed by 'k' characters.\n    '''\n    match = re.findall('^a*b*c*d*e*f*g*h*i*j*k',text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_a_b_c_d_e_f_g_h_i_j_k_l(text):\n    '''\n    Write a function that checks whether a string contains only 'a' characters followed by '",
        "num_ids": 20
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.replace('a','').replace('b','').replace(' ','')\n    return text.find('bbb') == 1\n",
        "num_ids": 37
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #return bool(re.search(r\"(ab*?)b\",text))\n    return bool(re.search(r\"(a(b)*b?)\",text))\n",
        "num_ids": 41
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # code here\n    for i in range(n-1, 0, -1):\n        a[i] += max(a[i+1:i+1+k])\n    return max(a[:-1])\n",
        "num_ids": 54
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if k == 0:\n        return a[0]\n    \n    \n    if n < k:\n        return max_sub_array_sum_repeated(a, n, k-1)\n    \n    if n == k:\n        return max(a[0], a[1] * k)\n        \n    return max(max_sub_array_sum_repeated(a, n, k-1), a[k-1] + max_sub_array_sum_repeated(a, n-k, k-1))\n",
        "num_ids": 130
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # s = sum(a[0:n])\n    # l = 0\n    # r = n - 1\n    # while l <= r:\n    #     if s < k:\n    #         if s + a[l] < k:\n    #             s = s + a[l]\n    #         l = l + 1\n    #     else:\n    #         if s + a[r] < k:\n    #             s = s + a[r]\n    #         r = r - 1\n    # return s\n    s = 0\n    r = n - 1\n    l = 0\n    while l <= r:\n        if l == r:\n            s = max(s, a[l])\n            l = l + 1\n            continue\n        if s < k:\n            s = max(s, a[l] + a[r])\n            l = l + 1\n        else:\n            s = max(s, a[r] + a[l])\n            r = r - 1\n    return s\n",
        "num_ids": 243
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # F[i] represents the maximum sum of the sub-array with repetition upto i.\n    # There are two cases for each element of F[i] - either F[i] = A[i], or F[i] = F[i - 1] + A[i].\n    # The two cases are stored in a hash-map.\n    # So we only need to store the first value.\n    # So we can also use a variable that stores the last value.\n    \n    if (n == 0):\n        return 0\n    \n    F = {}\n    F[0] = a[0]\n    \n    if (F[0] == 0):\n        return F[0]\n    \n    F[1] = a[0]\n    \n    if (F[1] == 0):\n        return F[1]\n    \n    for i in range(2, n):\n        F[i] = max(F[i - 1] + a[i], F[i - 2] + a[i])\n    \n    return max(F[n - 1], F[n - 2])\n",
        "num_ids": 258
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # 3rd parameter is number of times k is repeated\n    \n    max_sum = float('-inf')\n    prefix_sum = 0\n    \n    for i in range(n):\n        prefix_sum += a[i]\n        \n        if i >= k:\n            prefix_sum -= a[i-k]\n            \n        if max_sum < prefix_sum:\n            max_sum = prefix_sum\n            \n    return max_sum\n",
        "num_ids": 107
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_val = 0\n    max_sum_val = -999999999\n    for i in range(n):\n        if sum_val + a[i] > max_sum_val:\n            max_sum_val = sum_val + a[i]\n        sum_val = max(sum_val + a[i], a[i])\n    if sum_val > max_sum_val:\n        max_sum_val = sum_val\n    return max_sum_val\n",
        "num_ids": 116
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 0\n    while i + n - k < len(a):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[i + j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        i += 1\n    print(max_sum)\n    \n",
        "num_ids": 87
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -9999999\n    for i in range(n - k + 1):\n        sum = 0\n        for j in range(k):\n            sum += a[i + j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n",
        "num_ids": 70
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_so_far, max_ending_here = 0, 0\n    for i in range(0, n - k + 1):\n        max_ending_here = 0\n        for j in range(i, i + k):\n            max_ending_here = max_ending_here + a[j]\n        max_sum_so_far = max(max_sum_so_far, max_ending_here)\n    return max_sum_so_far\n        \n",
        "num_ids": 114
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    k = k - 1\n    i = 0\n    j = 0\n    while i < n and j < n:\n        max_sum = max(max_sum, sum(a[i:k + j]))\n        i += 1\n        j += 1\n    return max_sum\n    \n    ",
        "num_ids": 79
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares=0\n    for i in range(1,n+1):\n        if(i%2==0):\n            sum_of_squares=sum_of_squares+i**2\n    return sum_of_squares\n",
        "num_ids": 63
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum=sum+i**2\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # take a sqrt of n using square root \n    sqrt_n = n**(0.5)\n    # take the square root of sqrt_n and multiply by 2 to get the whole sum\n    return (sqrt_n**2)*2\n",
        "num_ids": 62
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # write your python function here\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    # initialize a list to store the square of all the even numbers\n    square_list = []\n    \n    # loop to store the square of even numbers\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            square_list.append(i**2)\n            \n    return sum(square_list)\n",
        "num_ids": 84
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum=sum+i**2\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum = sum + i**2\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    x = 1\n    sum = 0\n    while x <= n:\n        sum = sum + (x**2)\n        x = x + 1\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_list=[]\n    for i in range(0,n+1):\n        sum_list.append(i*i)\n    return sum(sum_list)\n    \n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n",
        "num_ids": 39
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_max = []\n    for i in list1:\n        if len(i) >= len(list_max):\n            list_max = i\n    return list_max\n    \n    \ndef second_last_index(list1):\n    '''\n    Write a function to find the index of the second-to-last element in a list.\n    '''\n    list_max = max_length(list1)\n    for i in range(len(list_max)-1, -1, -1):\n        if list_max[i] == list_max[-2]:\n            return list_max.index(list_max[i])\n        else:\n            list_max = max_length(list1)\n",
        "num_ids": 85
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #1\n    if len(list1) == 0:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for sub_list in list1:\n        if max_len < len(sub_list):\n            max_len = len(sub_list)\n    return max_len\n",
        "num_ids": 50
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    n = len(list1[0])\n    max_length = list1[0]\n    for i in range(1, len(list1)):\n        if len(list1[i]) > n:\n            n = len(list1[i])\n            max_length = list1[i]\n    print(max_length)\n",
        "num_ids": 82
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=1\n    for item in list1:\n        if len(item)>max_length:\n            max_length=len(item)\n    return max_length\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    size = len(list1)\n    max_len = 0\n    for i in range(size):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "num_ids": 61
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    max_list = []\n    for i in list1:\n        if len(i) > length:\n            length = len(i)\n            max_list.clear()\n            max_list.append(i)\n        elif len(i) == length:\n            max_list.append(i)\n    return max_list\n",
        "num_ids": 85
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize the maximum length as zero\n    max_length = 0\n",
        "num_ids": 19
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # This is a dynamic programming based solution\n    memo = {}\n    def _count_no_of_ways(n, k, current, current_color, memo):\n        if n == 0:\n            return 1\n        if n == 1:\n            return k\n        if n == 2:\n            if current_color == current:\n                return 1\n            else:\n                return k\n        if (current, current_color) in memo:\n            return memo[(current, current_color)]\n        memo[(current, current_color)] = 0\n        for j in range(k):\n            if current_color == j:\n                temp = _count_no_of_ways(n-1, k, current + 1, current_color, memo)\n            else:\n                temp = _count_no_of_ways(n-1, k, current + 1, j, memo)\n            memo[(current, current_color)] = temp\n        return memo[(current, current_color)]\n    return _count_no_of_ways(n, k, 0, 0, memo)\n",
        "num_ids": 257
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    dp = [0]*(n+1)\n    \n    for i in range(1,n+1):\n        if i == 1:\n            dp[i] = 1\n        elif i == 2:\n            dp[i] = 2\n        else:\n            dp[i] = dp[i-2] + dp[i-1]\n        \n    return dp[n]\n    \nprint(count_no_of_ways(3,2))\nprint(count_no_of_ways(5,3))\n",
        "num_ids": 131
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0 for i in range(k + 1)] for j in range(n + 1)]\n",
        "num_ids": 26
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = {}\n",
        "num_ids": 8
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[-1] * (k+1) for i in range(n+1)]\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    dp[1][1] = 1\n    dp[1][2] = 2\n    dp[2][1] = 2\n    dp[2][2] = 1\n    for i in range(3, n+1): \n        for j in range(1, k+1): \n            if j == 1: \n                dp[i][j] = dp[i-1][j]\n            elif j == 2: \n                dp[i][j] = dp[i-1][j] + dp[i-2][j]\n            else: \n                dp[i][j] = dp[i-1][j] + dp[i-2][j] + dp[i-3][j]\n    return dp[n][k]\n",
        "num_ids": 245
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k+1)] for j in range(n+1)] \n    for i in range(n+1): \n        for j in range(k+1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n            if i == 1 or j == 1: \n                dp[i][j] = 1\n            if j >= 2: \n                dp[i][j] = dp[i-1][j-2] + dp[i-1][j] \n    return dp[n][k] \n",
        "num_ids": 145
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0] * (k+1) for _ in range(n)]\n",
        "num_ids": 22
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2:\n        return n - 1\n    dp = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "num_ids": 1988
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[[0]*k for i in range(n)] for j in range(n)]\n    for i in range(k):\n        ways[0][0][i] = 1\n        ways[0][1][i] = 2\n        \n    for i in range(n):\n        for j in range(k):\n            ways[i][i][j] = 1\n            \n    for i in range(1, n):\n        for j in range(k):\n            ways[i][i-1][j] = ways[i-1][i][j]\n            ways[i][i][j] = ways[i-1][i][j] + ways[i][i-1][j]\n            \n    return ways[n-1][n-1][k-1]\n        \ndef count_no_of_ways_memo(n, k):\n    ways = [[[0]*k for i in range(n)] for j in range(n)]\n    \n    def get_ways(i, j, k, ways):\n        # if (i == n or j == k):\n        #     return 1\n        if ways[i][j][k]!= 0:\n            return ways[i][j][k]\n        ways[i][j][k] = 0\n        if i == j:\n            ways[i][j][k] = get_ways(i+1, j, k, ways)\n        if i < j:\n            ways[i][j][k] = get_ways(i, j-1, k, ways) + get_ways(i+1, j, k, ways)\n        return ways[i][j][k]\n        \n    return get_ways(0, n-1, k-1, ways)\n",
        "num_ids": 415
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 and k == 1:\n        return 1\n    if n == 1 and k > 1:\n        return 0\n    if k == 1:\n        return n\n    # if n == k and n == 0:\n    #     return 0\n    ways = 0\n    for i in range(1, k+1):\n        ways += count_no_of_ways(n-1, k-i)\n    return ways\n",
        "num_ids": 103
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    elif n<0:\n        return -find(m-n,m)\n    return find(n-1,m)+(m if n%m==0 else m)\n",
        "num_ids": 55
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n    \ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    return int(n*n)\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef fibonacci(n):\n    '''\n    Write a python function to print the fibonacci series in which the values are less than or equal to n.\n    '''\n    a=0\n    b=1\n    while a<n:\n        print(a)\n        a,b=b,a+b\n    \ndef multiple(n):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return n*n\n    \ndef add(a,b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    return n%2==0\n    \ndef armstrong(n):\n    '''\n    Write a python function to check if a number is Armstrong number or not.\n    '''\n    sum=0\n    temp=n\n    while temp>0:\n        digit=temp%10\n        sum=sum+pow(digit,3)\n        temp=temp//10\n    return n==sum\n    \ndef is_balanced(s):\n    '''\n    Write a python function to check if a string is balanced or not.\n    '''\n    stack=[]\n    for char in s:\n        if char in \"([{\":\n            stack.append(char)\n        elif char in \")]}\":\n            if not stack:\n                return False\n            top_element=stack.pop()\n            if not matches(top_element,char):\n                return False\n    return not stack\n    \ndef matches(open_char,close_char):\n    '''\n    Write a python function to check if a string has balanced pair of parenthesis.\n    '''\n    return open_char=='(' and close_char==')' or open_char=='{' and close_char=='}' or open_char=='[' and close_char==']'\n    \ndef partition(s):\n    '''\n    Write a python function to partition the string s into three parts.\n    '''\n    stack=[]\n    for char in s:\n        if char in \"([{\":\n            stack.append(char)\n        elif char in \")]}\":\n            if stack:\n                top_element=stack.pop()\n                if not matches(top_element,char):\n                    return False\n    return not stack\n    \ndef display_odd_even(n):\n    '''\n    Write a python function to check if a number is even or odd.\n    '''\n    if n%2==0:\n        return 'Even'\n    else:\n        return 'Odd'\n    \ndef simple_interest(p,r,t):\n    '''\n    Write a python function to compute simple interest.\n    '''\n    return p*r*t/100\n    \ndef array_count9(nums):\n    '''\n    Write a python function to check if a number in an array or not.\n    '''\n    return 1 in nums\n    \ndef two_sum(nums,target):\n    '''\n    Write a python function to add two numbers in a list and returns the sum.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i]+nums[j]==target:\n                return (i,j)\n    return -1\n    \ndef swap(nums,a,b):\n    '''\n    Write a python function to swap numbers in a list.\n    '''\n    nums[a],nums[b]=nums[b],nums[a]\n    \ndef k_fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number in a list.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    return k_fibonacci(n-1)+k_fibonacci(n-2)\n    \ndef get_power(a,b):\n    '''\n    Write a python function to compute a**b.\n    '''\n    if b==0:\n        return 1\n    return get_power(a,b-1)*a\n    \ndef count_inversions(nums):\n    '''\n    Write a python function to count inversions in a list.\n    '''\n    return count_inversions_helper(nums,0,len(nums)-1)\n    \ndef count_inversions_helper(nums,low,high):\n    if low==high:\n        return 0\n    mid=partition(nums,low,high)\n    inversions_left=count_inversions_helper(nums,low,mid-1)\n    inversions_right=count_inversions_helper(nums,mid+1,high)\n    return inversions_left+inversions_right+count_merge(nums,low,mid,high)\n    \ndef count_merge(nums,low,mid,high):\n    inversions=0\n    n1=mid-low+1\n    n2=high-mid\n    i=0\n    j=0\n    k=0\n    left=list(nums[low:mid+1])\n    right=list(nums[mid+1:high+1])\n    while i<n1 and j<n2:\n        if left[i]<=right[j]:\n            nums[k]=left[i]\n            i+=1\n        else:\n            inversions+=n1-i\n            nums[k]=right[j]\n            j+=1\n        k+=1\n    while i<n1:\n        nums[k]=left[i]\n        i+=1\n        k+=1\n    while j<n2:\n        nums[k]=right[j]\n        j+=1\n        k+=1\n    return inversions\n    \ndef palindrome_partition(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    left=0\n    right=len(s)-1\n    while left<right:\n        if s[left]!=s[right]:\n            return False\n        left+=1\n        right-=1\n    return True\n    \ndef palindrome_partition_rec(s,left,right):\n    if left>right:\n        return True\n    if s[left]!=s[right]:\n        return False\n    return palindrome_partition_rec(s,left+1,right-1)\n    \ndef insertion_sort(n):\n    '''\n    Write a python function to sort the numbers in a given list in increasing order.\n    '''\n    for i in range(1,len(n)):\n        j=i\n        while j>0 and n[j]<n[j-1]:\n            swap(n,j,j-1)\n            j-=1\n            \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return ''.join(reversed(s))\n    \ndef palindrome_check(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return s==reverse_string(s)\n    \ndef count_digits(n):\n    '''\n    Write a python function to count the numbers in a given string.\n    '''\n    count=0\n    while n:\n        count+=1\n        n=n//10\n    return count\n    \ndef count_lower_upper(s):\n    '''\n    Write a python function to count the numbers in a given string.\n    '''\n    return count_digits(s.lower()),count_digits(s.upper())\n    \ndef find_nth_index(s,n):\n    '''\n    Write a python function to find the nth index in a given string.\n",
        "num_ids": 19
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n / m)\n    return quotient",
        "num_ids": 18
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m%n == 0:\n        return n\n    else:\n        return m//n+1\n",
        "num_ids": 27
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m!= 0:\n        return n//m\n    else:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \n    \n    \n    \n    \n",
        "num_ids": 18
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n >= 0 and m >= 0:\n        return n//m\n    else:\n        return -1\n",
        "num_ids": 28
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if w**2+h**2!=math.sqrt(w**2+h**2):\n        return 0\n    else:\n        return math.sqrt(w**2+h**2)\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if w**2+h**2!=math.sqrt(w**2+h**2):\n        return 0\n    else:\n        return math.sqrt(w**2+h**2)\ndef otherside_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if a**2+b**2!=math.sqrt(a**2+b**2) or c**2!=math.sqrt(a**2+b**2) or a**2+c**2!=math.sqrt(a**2+b**2):\n        return 0\n    else:\n        return math.sqrt(a**2+b**2)\ndef otherside_right_triangle(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if a**2+b**2!=math.sqrt(a**2+b**2):\n        return 0\n    else:\n        return math.sqrt(a**2+b**2)\ndef otherside_square(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if a**2+b**2!=math.sqrt(a**2+b**2) or c**2!=math.sqrt(a**2+b**2) or a**2+c**2!=math.sqrt(a**2+b**2) or d**2!=math.sqrt(a**2+b**2) or b**2+d**2!=math.sqrt(a**2+b**2) or a**2+d**2!=math.sqrt(a**2+b**2) or c**2+d**2!=math.sqrt(a**2+b**2):\n        return 0\n    else:\n        return math.sqrt(a**2+b**2)\ndef otherside_square_triangle(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if a**2+b**2!=math.sqrt(a**2+b**2) or c**2!=math.sqrt(a**2+b**2) or a**2+c**2!=math.sqrt(a**2+b**2) or d**2!=math.sqrt(a**2+b**2) or b**2+d**2!=math.sqrt(a**2+b**2) or a**2+d**2!=math.sqrt(a**2+b**2) or c**2+d**2!=math.sqrt(a**2+b**2):\n        return 0\n    else:\n        return math.sqrt(a**2+b**2)\ndef otherside_rectangle_triangle(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if a**2+b**2!=math.sqrt(a**2+b**2) or c**2!=math.sqrt(a**2+b**2) or a**2+c**2!=math.sqrt(a**2+b**2) or d**2!=math.sqrt(a**2+b**2) or b**2+d**2!=math.sqrt(a**2+b**2) or a**2+d**2!=math.sqrt(a**2+b**2) or c**2+d**2!=math.sqrt(a**2+b**2):\n        return 0\n    else:\n        return math.sqrt(a**2+b**2)\ndef otherside_triangle_triangle(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if a**2+b**2!=math.sqrt(a**2+b**2) or c**2!=math.sqrt(a**2+b**2) or a**2+c**2!=math.sqrt(a**2+b**2) or d**2!=math.sqrt(a**2+b**2) or b**2+d**2!=math.sqrt(a**2+b**2) or a**2+d**2!=math.sqrt(a**2+b**2) or c**2+d**2!=math.sqrt(a**2+b**2):\n        return 0\n    else:\n        return math.sqrt(a**2+b**2)\ndef otherside_right_triangle_triangle(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if a**2+b**2!=math.sqrt(a**2+b**2) or c**2!=math.sqrt(a**2+b**2) or a**2+c**2!=math.sqrt(a**2+b**2) or d**2!=math.sqrt(a**2+b**2) or b**2+d**2!=math.sqrt(a**2+b**2) or a**2+d**2!=math.sqrt(a**2+b**2) or c**2+d**2!=math.sqrt(a**2+b**2):\n        return 0\n    else:\n        return math.sqrt(a**2+b**2)\ndef otherside_square_triangle_triangle(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if a**2+b**2!=math.sqrt(a**2+b**2) or c**2!=math.sqrt(a**2+b**2) or a**2+c**2!=math.sqrt(a**2+b**2) or d**2!=math.sqrt(a**2+b**2) or b**2+d**2!=math.sqrt(a**2+b**2) or a**2+d**2!=math.sqrt(a**2+b**2) or c**2+d**2!=math.sqrt(a**2+b**2):\n        return 0\n    else:\n        return math.sqrt(a**2+b**2)\ndef otherside_rectangle_triangle_triangle(a,b,c,d):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    import math\n    \n    if a**2+b**2!=math.sqrt(a**2+b**2) or c**2!=math.sqrt(a**2+b**2) or a**2+c**2!=math.sqrt(a**2+b**2) or d**2!=math.sqrt(a**2+b**2) or b**2+d**2!=math.sqrt(a**2+b**2) or a**2+d**2!=math.sqrt(a**2+b**2) or c**2+d**2!=math.sqrt(a**2+b**2):\n        return 0\n    else:\n        return math.sqrt(a**2+b**2)\ndef otherside_triangle_triangle_triangle(a",
        "num_ids": 203
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b = math.sqrt(math.pow(h,2) + math.pow(w,2))\n    c = h + w\n    return b, c\n",
        "num_ids": 43
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h\n    \ndef factorial(num):\n    '''\n    Write a function to calculate factorial.\n    '''\n    if num == 0:\n        return 1\n    return num * factorial(num-1)\n    \ndef recursive_factorial(num):\n    '''\n    Write a function that calculate the factorial of a number using recursive function.\n    '''\n    if num == 0:\n        return 1\n    return num * recursive_factorial(num-1)\n    \ndef fibonacci(num):\n    '''\n    Write a function that calculate fibonacci number using recursion.\n    '''\n    if num == 0:\n        return 0\n    return num + fibonacci(num-1)\n    \ndef print_n_recursive(num):\n    '''\n    Write a function that print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_recursive(num-1)\n    print(num)\n    \ndef print_n(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n(num-1)\n    \ndef print_n_iterative(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_recursive_2(num-1)\n    print(num)\n    \ndef print_n_2(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n_2(num-1)\n    \ndef print_n_iterative_2(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_2_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_2_recursive_2(num-1)\n    print(num)\n    \ndef print_n_3(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n_3(num-1)\n    \ndef print_n_iterative_3(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_3_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_3_recursive_2(num-1)\n    print(num)\n    \ndef print_n_4(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n_4(num-1)\n    \ndef print_n_iterative_4(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_4_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_4_recursive_2(num-1)\n    print(num)\n    \ndef print_n_5(num):\n    '''\n    Write a function to print a list.\n    '''\n    if num == 0:\n        return\n    print(num)\n    print_n_5(num-1)\n    \ndef print_n_iterative_5(num):\n    '''\n    Write a function to print a list using iteration.\n    '''\n    if num == 0:\n        return\n    temp = num\n    while temp!= 0:\n        print(temp)\n        temp = temp - 1\n        \ndef print_n_5_recursive_2(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_2(num-1)\n    print(num)\n    \ndef print_n_5_recursive_3(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_3(num-1)\n    print(num)\n    \ndef print_n_5_recursive_4(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_4(num-1)\n    print(num)\n    \ndef print_n_5_recursive_5(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_5(num-1)\n    print(num)\n    \ndef print_n_5_recursive_6(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_6(num-1)\n    print(num)\n    \ndef print_n_5_recursive_7(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_7(num-1)\n    print(num)\n    \ndef print_n_5_recursive_8(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_8(num-1)\n    print(num)\n    \ndef print_n_5_recursive_9(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_9(num-1)\n    print(num)\n    \ndef print_n_5_recursive_10(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_10(num-1)\n    print(num)\n    \ndef print_n_5_recursive_11(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_11(num-1)\n    print(num)\n    \ndef print_n_5_recursive_12(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_12(num-1)\n    print(num)\n    \ndef print_n_5_recursive_13(num):\n    '''\n    Write a function to print a list using recursion.\n    '''\n    if num == 0:\n        return\n    print_n_5_recursive_13(num-1)\n    print(num)\n    \ndef print_",
        "num_ids": 40
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2 - 2*w*h*math.sin(math.radians(90)))\n",
        "num_ids": 35
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2 - 2*w*h*math.cos(math.pi/4))\n",
        "num_ids": 34
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    b=a\n    c=math.sqrt(w**2+h**2)\n    return c\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    b=math.sqrt(w**2+h**2)\n    c=a\n    return c\ndef area_triangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_quadrilateral(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_quad_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_rectangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_rect_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef perimeter_rectangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef perimeter_rect_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_hexagon(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_hex_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_square(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_sq_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef perimeter_square(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef perimeter_sq_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_trapezium(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_trapez_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_parallelogram(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_par_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_square_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_rectangle_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_square_rightangle_perimeter(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_rectangle_rightangle_perimeter(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_trapezium_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_trapez_rightangle_perimeter(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_par_rightangle_perimeter(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_par_rightangle_perimeter_perimeter(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef perimeter_square_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef perimeter_rectangle_rightangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_rectangle_rightangle_perimeter(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_rectangle_rightangle_perimeter_perimeter(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef perimeter_triangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_triangle(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_trapez_rightangle_perimeter(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=math.sqrt(w**2+h**2)\n    return a\ndef area_trapez_rightangle_perimeter_perimeter(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2 - w*h\n    \ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle, given its three side lengths.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    \ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle given its radius.\n    '''\n    return math.pi*r**2\n    \ndef main():\n    '''\n    Write the code to test your functions.\n    '''\n    print(\"Testing otherside_rightangle\")\n    print(\"The answer is %s.\" % otherside_rightangle(3,4))\n    print(\"The answer is %s.\" % otherside_rightangle(4,3))\n    print(\"The answer is %s.\" % otherside_rightangle(5,6))\n    \n    print(\"\\nTesting area_of_triangle\")\n    print(\"The answer is %s.\" % area_of_triangle(3,4,5))\n    print(\"The answer is %s.\" % area_of_triangle(3,4,6))\n    \n    print(\"\\nTesting area_of_circle\")\n    print(\"The answer is %s.\" % area_of_circle(2))\n    print(\"The answer is %s.\" % area_of_circle(3))\n    print(\"The answer is %s.\" % area_of_circle(4))\n",
        "num_ids": 212
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (math.sqrt((w**2) + (h**2)))\n",
        "num_ids": 21
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n    \n    \ndef otherside_rectangle(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return a + b\n",
        "num_ids": 8
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_n = 0\n    for i in listval:\n        if max_n < i:\n            max_n = i\n    return max_n\n    \n",
        "num_ids": 41
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in listval:\n            if i > max_val:\n                max_val = i\n        return max_val\n",
        "num_ids": 62
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    \n    for i in range(len(listval)):\n        if max_val == None:\n            max_val = listval[i]\n        else:\n            if listval[i] > max_val:\n                max_val = listval[i]\n                \n    return max_val\n",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for i in range(0,len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n",
        "num_ids": 42
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = 0\n    for i in range(len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num\n",
        "num_ids": 52
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    a = listval\n    if len(a) == 0:\n        return\n    elif len(a) == 1:\n        return a[0]\n    elif len(a) == 2:\n        return max(a[0], a[1])\n    else:\n        return max(a[0], max_val(a[1:]))\n",
        "num_ids": 85
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n",
        "num_ids": 50
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    return_val=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]>return_val:\n            return_val=listval[i]\n    return return_val\n",
        "num_ids": 73
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_val = listval[0]\n    for num in listval:\n        if num > max_val:\n            max_val = num\n    return max_val\n",
        "num_ids": 45
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divs += i\n    return divs\n",
        "num_ids": 39
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(number) - number\n",
        "num_ids": 11
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n",
        "num_ids": 42
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    i = 2\n    while i <= number:\n        if number % i == 0:\n            sum = sum + i\n        i = i + 1\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def sum_div_of_number(number):\n        sum = 0\n        for i in range(1, number+1):\n            if number % i == 0:\n                sum += i\n        return sum\n    print(sum_div_of_number(number))\n",
        "num_ids": 65
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_ = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_ += i\n    return sum_\n",
        "num_ids": 41
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def mergeSort(start, end): \n        if start >= end: \n            return\n        mid = start + (end - start) // 2\n        mergeSort(start, mid) \n        mergeSort(mid + 1, end) \n        merge(start, mid, end) \n        \n    def merge(start, mid, end): \n        inversions = 0\n        left, right = start, mid + 1\n        arr = list(range(start, end + 1)) \n        for i in range(start, end + 1): \n            # compare arr[i] with the smallest of its two children\n            if arr[i] > arr[right]: \n                inversions += (right - left) \n                arr[i], arr[right] = arr[right], arr[i] \n            if arr[left] > arr[i]: \n                inversions += (mid - left) \n                arr[left], arr[i] = arr[i], arr[left] \n            left, right = left + 1, right - 1\n        # print(\"merging \", arr[start: end + 1]) \n        # print(\"inversions is \", inversions) \n        \n    mergeSort(0, len(arr) - 1) \n    return inversions\n",
        "num_ids": 302
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) >1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        \n        get_Inv_Count(L)\n        get_Inv_Count(R)\n        \n        i = 0\n        j = 0\n        k = 0\n        \n        while i < len(L) and j < len(R):\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        \n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        \n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    \n    return arr\n",
        "num_ids": 219
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                inversions+=1\n    return inversions\n    \n",
        "num_ids": 63
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_cnt = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_cnt += 1\n    return inv_cnt\n    \n    \n    \nif __name__ == '__main__':\n    arr1 = [2,1,3,4]\n    print(get_Inv_Count(arr1))\n",
        "num_ids": 110
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n",
        "num_ids": 56
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                count += 1\n    return count \n",
        "num_ids": 72
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                count += 1\n    print(\"Inversions: \", count)\n    return arr\n",
        "num_ids": 97
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j] and count < j: \n                count = j\n    return count \n",
        "num_ids": 68
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if isinstance(list1,list):\n        return list1[0] + flatten_list(list1[1:])\n    return [list1]\n",
        "num_ids": 55
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    out = []\n    for i in list1:\n        if type(i) == list:\n            out += flatten_list(i)\n        else:\n            out += i\n    return out\n",
        "num_ids": 49
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            for sub_elements in element:\n                flattened_list.append(sub_elements)\n        else:\n            flattened_list.append(element)\n    return flattened_list\n",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == None or len(list1) == 0:\n        return []\n    new_list = []\n    for x in list1:\n        if type(x) == list:\n            new_list.extend(flatten_list(x))\n        else:\n            new_list.append(x)\n    return new_list\n",
        "num_ids": 83
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    elif isinstance(list1, list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1]\n",
        "num_ids": 61
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    ans = []\n    for sublist in list1:\n        if type(sublist) == list:\n            ans.extend(flatten_list(sublist))\n        else:\n            ans.append(sublist)\n    return ans\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #your code here\n    result_list = []\n    for sublist in list1:\n        for sub_sublist in sublist:\n            result_list.append(sub_sublist)\n    return result_list\n",
        "num_ids": 54
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item,list):\n            for sub_item in flatten_list(item):\n                flattened_list.append(sub_item)\n        else:\n            flattened_list.append(item)\n    return flattened_list\n",
        "num_ids": 79
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten = []\n    for elem in list1:\n        if type(elem) == list:\n            flatten += flatten_list(elem)\n        else:\n            flatten.append(elem)\n    return flatten\n",
        "num_ids": 60
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n",
        "num_ids": 47
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = defaultdict(int)\n    for day,value in stdata:\n        result[day] += value\n    result = dict(sorted(result.items()))\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_s = 0\n    max_t = 0\n    for s, t in stdata:\n        if max_s < s:\n            max_s = s\n        if max_t < t:\n            max_t = t\n    return max_s + max_t\n",
        "num_ids": 68
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_amount = 0\n    for i in range(len(stdata)):\n        if stdata[i][2] > max_amount:\n            max_amount = stdata[i][2]\n    return max_amount\ndef max_aggregate1(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    amounts = defaultdict(int)\n    max_amount = 0\n    for i in range(len(stdata)):\n        amounts[stdata[i][0]] += stdata[i][2]\n        if amounts[stdata[i][0]] > max_amount:\n            max_amount = amounts[stdata[i][0]]\n    return max_amount\ndef max_aggregate2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    from collections import defaultdict\n    amounts = defaultdict(int)\n    max_amount = 0\n    for i in range(len(stdata)):\n        amounts[stdata[i][0]] += stdata[i][2]\n        if amounts[stdata[i][0]] > max_amount:\n            max_amount = amounts[stdata[i][0]]\n    return max_amount\n",
        "num_ids": 97
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for s, t in stdata:\n        d[s].append(t)\n    max_count = 0\n    max_value = 0\n    for i in d:\n        count = 0\n        tmp_sum = 0\n        for j in d[i]:\n            count += 1\n            tmp_sum += j\n        if tmp_sum > max_value:\n            max_value = tmp_sum\n        if tmp_sum > max_count:\n            max_count = tmp_sum\n    return max_count\n",
        "num_ids": 131
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_list = []\n    for i in range(0, len(stdata)):\n        temp = 0\n        for j in range(0, len(stdata[i])):\n            temp += stdata[i][j]\n        aggregate_list.append(temp)\n    print(aggregate_list)\n    return max(aggregate_list)\n",
        "num_ids": 88
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    output = defaultdict(int)\n    for x in stdata:\n        for y in x:\n            output[y] += 1\n    \n    max_value = 0\n    for key, value in output.items():\n        if value > max_value:\n            max_value = value\n    \n    return max_value\n",
        "num_ids": 78
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #stdata = [(10,20,30),(10,20,30),(20,30,40),(20,30,40)]\n    max_val = 0\n    count = 0\n    for i in range(len(stdata)):\n        if max_val < stdata[i][0]:\n            max_val = stdata[i][0]\n        if max_val < stdata[i][1]:\n            max_val = stdata[i][1]\n        if max_val < stdata[i][2]:\n            max_val = stdata[i][2]\n        count += 1\n    print(max_val,count)\n    return max_val\n",
        "num_ids": 163
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for i, n in stdata:\n        d[i] += n\n    return max(d.values())\n",
        "num_ids": 38
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Write your function here\n    stdata.sort(key=lambda x: x[1])\n    max_ = 0\n    for i in range(len(stdata)):\n        if stdata[i][1]>max_:\n            max_ = stdata[i][1]\n    return max_\n",
        "num_ids": 75
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxagg = 0\n    curr = 0\n    for i in stdata:\n        curr += i[1]\n        if curr > maxagg:\n            maxagg = curr\n    return maxagg\n",
        "num_ids": 52
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def get_sum(arr, n): \n        sum = 0\n        for i in range(n): \n            sum += arr[i]\n        return sum \n    \n    def get_sum_rev(arr, n): \n        sum = 0\n        for i in range(n): \n            sum += arr[i]\n        return sum \n    \n    def find_count(n): \n        if n == 0: \n            return 0\n        arr = [0] * (2*n) \n        arr[n] = 1\n        count = 0\n        for i in range(n, 2*n): \n            arr[i] = 1\n            sum = get_sum(arr, i)\n            if get_sum_rev(arr, i) == sum: \n                count += 1\n        return count \n    return find_count(n)\n",
        "num_ids": 207
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # code here\n    dp = [[0]*(n+1) for i in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i == 1:\n                dp[i][j] = j\n            else:\n                dp[i][j] = dp[i-1][j-1] + j\n    return dp[n][n]\n",
        "num_ids": 108
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1,2**n):\n        bit_str = bin(i)[2:]\n        bit_str = '0'*(n-len(bit_str)) + bit_str\n        if sum(bit_str) == sum(bit_str[::-1]):\n            count += 1\n    return count\n",
        "num_ids": 85
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(num): \n        n = num -1\n        x = 0\n        while (1 << x) <= num: \n            x += 1\n        \n        m = (1 << x) - 1\n        \n        \n        # print(m, n, x, 2)\n        res = 0\n        if (num & m) == m:\n            res += 1\n        # print(res)\n        return res\n        \n    \n    \n    res = 0\n    i = 0\n    while i < n: \n        res += count(n - i)\n        i += 1\n    \n    return res\n",
        "num_ids": 146
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1: \n        return 1 \n    return count_binary_seq(n - 1) + 2 * count_binary_seq(n - 2)\n",
        "num_ids": 41
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def count_sequences(n):\n        '''\n        The function will find the total number of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        \n        result = 0\n        \n        for i in range(1, (2*n)+1):\n            # for first i bits of sequence\n            first_bits = bin(i)[2:]\n            \n            # for last i bits of sequence\n            last_bits = bin(i+n-1)[2:]\n            \n            # padding with 0's in both sides\n            last_bits = '0'*(2*n-len(last_bits)) + last_bits\n            \n            # take the complement of the above padded sequence\n            temp_seq = int(first_bits, 2) + int(last_bits, 2)\n            \n            # checking if the temp_seq satisfies the condition\n            if temp_seq == 1:\n                result += 1\n        \n        return result\n    \n    return count_sequences(n)\n",
        "num_ids": 194
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    for i in range(1, 2**n):\n        curr_sum = 0\n        curr_num = bin(i)[2:]\n        if len(curr_num)!= n:\n            curr_num = '0'*(n - len(curr_num)) + curr_num\n        curr_sum = int(curr_num[0]) + int(curr_num[1])\n        res += curr_sum\n    return res\n",
        "num_ids": 118
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = n + 1\n    count = 0\n    a = 2**n\n    for i in range(a):\n        temp = i\n        s = bin(temp)\n        l = list(s[2:])\n        l.reverse()\n        if (sum(l[:n]) == sum(l[n:])):\n            count = count + 1\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    i, j, res = 2, 2, 0\n    while i <= n:\n        j = i\n        while j <= n:\n            res += 2 ** i * 2 ** (n - j + 1)\n            j += 1\n        i += 1\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**n - 2**(n-1) + (2**(n-1) - 1)\n    \ndef count_binary_seq_till(n,x):\n    '''\n    Write a function to find count of all binary sequences such that the sum of first n bits is not equal to sum of last n bits.\n    '''\n    return 2**n - 2**(n-1) + (2**(n-1) - 1) - x\n",
        "num_ids": 30
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return 1 + max(map(lambda x: dict_depth(x), d.values()))",
        "num_ids": 39
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    else:\n        return 1 + max([dict_depth(i) for i in d.values()])\n",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d={'key1': {'nestedkey': {'subnestedkey': {'subsubnestedkey': 'value'}}}\n    return(d.keys().__len__())\n",
        "num_ids": 47
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n",
        "num_ids": 9
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 0\n        depth = 1\n        for k in d.keys():\n            depth += dict_depth(d[k])\n        return depth\n    else:\n        return 0\n",
        "num_ids": 64
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    else:\n        depth = 0\n        for i in d.values():\n            depth += 1 + dict_depth(i)\n        return depth\n",
        "num_ids": 51
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(dict_depth,d.items()))+1 if d else 0\n",
        "num_ids": 24
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while isinstance(d, dict):\n        d = d.get('val')\n        depth += 1\n    return depth\n",
        "num_ids": 36
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(dict_depth, d.values())) + 1 if d else 0\n",
        "num_ids": 24
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left, right = 0, len(arr)\n    while left <= right :\n        mid = (left+right)//2\n        if arr[mid] == index :\n            for i in range(rotations) :\n                if mid < len(arr) :\n                    mid += 1\n                else :\n                    mid = 0\n            return mid\n        elif arr[mid] < index :\n            left = mid + 1\n        else :\n            right = mid - 1\n    return -1\n",
        "num_ids": 115
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Write your solution here\n    n = len(arr)\n    s = 0\n    for i in range(index+1):\n        s += ranges[i]\n    \n    if(s + rotations < index or s + rotations > index):\n        return -1\n    else:\n        return arr[s + rotations - 1]\n",
        "num_ids": 82
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # for i in range(rotations) :\n    #     temp = arr[index]\n    #     arr[index] = arr[index+ranges]\n    #     arr[index+ranges] = temp\n",
        "num_ids": 53
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    x = index\n    a = arr[ranges[index]]\n    while a > 0 :\n        x = (x+rotations[index])%ranges[index]\n        a = arr[ranges[index]][x]\n    return x\n",
        "num_ids": 61
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if index >= ranges[i] and index < ranges[i + 1] :\n            if rotations[i] == 0 :\n                return arr[i]\n            else :\n                return find_Element(arr,ranges,rotations,index - ranges[i])\n    return -1\n",
        "num_ids": 82
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    c = 0\n    for i in range(index, len(arr)) :\n        if(arr[i] >= ranges[c]) :\n            c += 1\n        elif(arr[i] <= ranges[c]) :\n            c -= 1\n            if(c < 0) :\n                break\n    return c\n",
        "num_ids": 76
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    while count <= rotations :\n        if index == arr[(count % len(arr))] :\n            break\n        count += 1\n    \n    if count >= rotations :\n        print(\"Element not found in the array.\")\n",
        "num_ids": 60
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)):\n        if index == arr[i]:\n            return i\n    return -1\n    \n    \n    ",
        "num_ids": 39
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > ranges[i] and arr[i] < ranges[i+1]:\n            if rotations[i] > index and rotations[i] < index+1:\n                return arr[i]\n    return -1\n        \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 87
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index<=ranges) :\n        index = index % ranges\n        if(index==0) :\n            return(arr[index])\n        return(find_Element(arr,ranges,rotations-1,index-1))\n    else :\n        return(\"null\")\n",
        "num_ids": 69
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def is_starting_p(word):\n        return word[0] == 'p'\n",
        "num_ids": 24
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split(' ')\n    for i in range(0,len(words)):\n        if words[i].startswith('p'):\n            return words[i], words[i+1]\n",
        "num_ids": 53
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word\n",
        "num_ids": 25
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0],words[1]\n",
        "num_ids": 13
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith('p'):\n            print(i)\n",
        "num_ids": 27
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a = []\n    b = []\n    for i in words:\n        if i[0] == 'p':\n            a.append(i)\n        else:\n            continue\n    for j in words:\n        if j[0] == 'p':\n            b.append(j)\n        else:\n            continue\n    return a,b\n",
        "num_ids": 84
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    # return[n for n in words if n.startswith('p')]\n    return list(filter(lambda x: x.startswith('p'), words))\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i-1], words[i]\ndef two_letter_words(words):\n    '''\n    Write a function to return the set of two words that occur in the input string\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if len(words[i]) == 2 and len(words[j]) == 2:\n                return words[i], words[j]\ndef longest_common_subsequence(string1, string2):\n    '''\n    Write a function to return the longest common substring between the input strings.\n    '''\n    string1 = string1.replace('.','')\n    string2 = string2.replace('.','')\n    for i in range(len(string1)):\n        if string1[i] == string2[i]:\n            continue\n        elif string1[i]!= string2[i] and string1[i]!= '.' and string2[i]!= '.':\n            return string1[:i], string1[i+1:], string2[:i], string2[i+1:]\ndef suffix_match(string, pattern):\n    '''\n    Write a function to check whether the input string is a suffix of the input pattern or not.\n    '''\n    string = string.replace('.','')\n    pattern = pattern.replace('.','')\n    for i in range(len(pattern)-1, -1, -1):\n        if string[i] == pattern[i]:\n            continue\n        elif string[i]!= pattern[i] and string[i]!= '.' and pattern[i]!= '.':\n            return False\n    return True\ndef at_least_once(word, suffix):\n    '''\n    Write a function to return the set of all words whose suffixes starts with the given suffix.\n    '''\n    words = []\n    suffix = suffix.replace('.','')\n    for i in range(len(word)):\n        words.append(word[i:])\n    for i in range(len(words)):\n        if suffix == words[i][:len(suffix)]:\n            return words[i]\ndef two_word_set(words):\n    '''\n    Write a function to return the set of all unique words that occur at least twice in the input string.\n    '''\n    words = words.split(' ')\n    words.sort()\n    for i in range(len(words)-1):\n        if words.count(words[i]) >= 2:\n            return words[i], words[i+1]\ndef all_unique(words):\n    '''\n    Write a function to return the set of all words that occur only once in the input string.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        if words.count(words[i]) > 1:\n            return False\n    return True\ndef word_divisor(words):\n    '''\n    Write a function to return the set of all unique words that are divisible by 2 in the input string.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        if len(words[i]) >= 2:\n            if words[i] % 2 == 0:\n                return words[i]\ndef word_in_vocabulary(words, vocabulary):\n    '''\n    Write a function to return the set of all words that are in the input set and are not in the\n    input vocabulary.\n    '''\n    vocabulary = vocabulary.split(' ')\n    words = words.split(' ')\n    words.sort()\n    for i in range(len(words)):\n        if words[i] not in vocabulary and words[i]!= words[i]:\n            return words[i]\ndef how_many_words_in_vocabulary(vocabulary):\n    '''\n    Write a function to return the sum of the number of words in the input string which are\n    present in the input vocabulary.\n    '''\n    vocabulary = vocabulary.split(' ')\n    words = vocabulary.count(' ')\n    return words\ndef is_anagram(string1, string2):\n    '''\n    Write a function to return True if the input strings are anagrams and False otherwise.\n    '''\n    string1 = string1.replace('.','')\n    string2 = string2.replace('.','')\n    if len(string1)!= len(string2):\n        return False\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            return False\n    return True\ndef is_palindrome(string):\n    '''\n    Write a function to return True if the input string is a palindrome and False otherwise.\n    '''\n    string = string.replace('.','')\n    for i in range(len(string)):\n        if string[i]!= string[len(string)-i-1]:\n            return False\n    return True\ndef are_words_anagrams(string1, string2):\n    '''\n    Write a function to return True if the input strings are anagrams and False otherwise.\n    '''\n    string1 = string1.replace('.','')\n    string2 = string2.replace('.','')\n    if len(string1)!= len(string2):\n        return False\n    for i in range(len(string1)):\n        if string1[i]!= string2[i]:\n            return False\n    return True\ndef char_range(string):\n    '''\n    Write a function to return the set of all characters that occur in the input string.\n    '''\n    chars = set()\n    for i in range(len(string)):\n        chars.add(string[i])\n    return chars\ndef same_first_and_last(string):\n    '''\n    Write a function to return True if the input string is a palindrome and False otherwise.\n    '''\n    string = string.replace('.','')\n    if len(string) < 2:\n        return False\n    for i in range(len(string)):\n        if string[i]!= string[len(string)-i-1]:\n            return False\n    return True\ndef is_palindrome(string):\n    '''\n    Write a function to return True if the input string is a palindrome and False otherwise.\n    '''\n    string = string.replace('.','')\n    for i in range(len(string)):\n        if string[i]!= string[len(string)-i-1]:\n            return False\n    return True\ndef is_greater_than(string1, string2):\n    '''\n    Write a function to return True if the first string is greater than the second string and\n    False otherwise.\n    '''\n    string1 = string1.replace('.','')\n    string2 = string2.replace('.','')\n    for i in range(len(string1)):\n        if string1[i] > string2[i]:\n            return True\n        elif string1[i] < string2[i]:\n            return False\n    return False\ndef is_greater_than_or_equal(string1, string2):\n    '''\n    Write a function to return True if the first string is greater than or equal to the second\n    string and False otherwise.\n    '''\n    string1 = string1.replace('.','')\n    string2 = string2.replace('.','')\n    for i in range(len(string1)):\n        if string1[i] >= string2[i]:\n            return True\n        elif string1[i] < string2[i]:\n            return False\n    return False\ndef is_less_than_or_equal(string1, string2):\n    '''\n    Write a function to return True if the first string is less than or equal to the second\n    string and False otherwise.\n    '''\n    string1 = string1.replace('.','')\n    string2 = string2.replace('.','')\n    for i in range(len(string1)):\n        if string1[i] <= string2[i]:\n            return True\n        elif string1[i] > string2[i]:\n        ",
        "num_ids": 75
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    for word in words:\n        if word.startswith('l'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    for word in words:\n        if word.startswith('q'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    for word in words:\n        if word.startswith('r'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withv(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'v'.\n    '''\n    for word in words:\n        if word.startswith('v'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withy(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'y'.\n    '''\n    for word in words:\n        if word.startswith('y'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withk(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'k'.\n    '''\n    for word in words:\n        if word.startswith('k'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withe(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'e'.\n    '''\n    for word in words:\n        if word.startswith('e'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withj(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'j'.\n    '''\n    for word in words:\n        if word.startswith('j'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withi(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'i'.\n    '''\n    for word in words:\n        if word.startswith('i'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_witho(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'o'.\n    '''\n    for word in words:\n        if word.startswith('o'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    for word in words:\n        if word.startswith('n'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withm(words):\n    '''\n    Write a function to return two words from a list of words starting with letter'm'.\n    '''\n    for word in words:\n        if word.startswith('m'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withh(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'h'.\n    '''\n    for word in words:\n        if word.startswith('h'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'z'.\n    '''\n    for word in words:\n        if word.startswith('z'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withc(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'c'.\n    '''\n    for word in words:\n        if word.startswith('c'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withb(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'b'.\n    '''\n    for word in words:\n        if word.startswith('b'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withq(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'q'.\n    '''\n    for word in words:\n        if word.startswith('q'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withd(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'd'.\n    '''\n    for word in words:\n        if word.startswith('d'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    for word in words:\n        if word.startswith('l'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_witho(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'o'.\n    '''\n    for word in words:\n        if word.startswith('o'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_witht(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 't'.\n    '''\n    for word in words:\n        if word.startswith('t'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withs(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    for word in words:\n        if word.startswith('s'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withx(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'x'.\n    '''\n    for word in words:\n        if word.startswith('x'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withm(words):\n    '''\n    Write a function to return two words from a list of words starting with letter'm'.\n    '''\n    for word in words:\n        if word.startswith('m'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withg(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'g'.\n    '''\n    for word in words:\n        if word.startswith('g'):\n            return word, words.pop(words.index(word))\n        else:\n            continue\ndef start_withc(words):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -float('inf')\n    \n    for i in range(index+1):\n        if a[i] == k:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k - 1))\n            \n        if a[i] < k:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k))\n            \n    return max_sum + a[index]\n    \ndef max_sum_increasing_subseq_dp(a, n, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0 for j in range(k + 1)] for i in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = a[i]\n        \n    for i in range(1, n):\n        for j in range(1, k + 1):\n            if a[i] <= j:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]] + a[i])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[n - 1][k]\n    ",
        "num_ids": 158
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # base case:\n    if index == n:\n        return 0\n    \n    # idea:\n    # max_sum = a[index]\n    # if index >= k:\n    #     max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index+1, k) + a[index])\n    # return max_sum\n",
        "num_ids": 92
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n",
        "num_ids": 44
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(n == 0):\n        return 0\n    if(n == 1):\n        return a[0]\n    if(n == 2):\n        return max(a[0], a[1])\n    \n    if(index == 0):\n        return max(a[0], a[1], a[2])\n    \n    if(k > index):\n        return max_sum_increasing_subseq(a, n-1, index, k)\n    \n    l = max_sum_increasing_subseq(a, n-1, index, k)\n    r = max_sum_increasing_subseq(a, n-1, index, k+1)\n    \n    if(a[index] > l and a[index] > r):\n        return a[index]\n    else:\n        return max(l, r)\n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 213
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # dp[i][k] = the max sum of increasing subsequence including i index and kth element.\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(1,n):\n        dp[i][i] = a[i]\n        for j in range(i):\n            dp[i][i] = max(dp[i][i], dp[i-1][j]+a[i])\n            \n    for i in range(n-1):\n        dp[i][i+1] = dp[i][i]\n        for j in range(i+2, n):\n            dp[i][j] = max(dp[i][j], dp[i][j-1]+a[j])\n    \n    # print(\"dp\",dp)\n    # return dp\n    '''\n    for i in range(1,n):\n        for j in range(i):\n            print(dp[i][j], end =\" \")\n        print()\n    '''\n    return dp[n-1][k]\n",
        "num_ids": 14
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == n-1:\n        return sum(a[:index+1])\n    if k > n-1:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k-1))\n    \n    return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k-1))\n",
        "num_ids": 140
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if index == k:\n        return a[index]\n    left_sum = max_sum_increasing_subseq(a, n, index+1, k)\n    right_sum = max_sum_increasing_subseq(a, n, index+2, k)\n    return max(left_sum, right_sum) + a[index]\n",
        "num_ids": 95
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #\n    dp = [[0 for i in range(n)] for j in range(k)]\n    dp[0][0] = a[index]\n    #\n    for i in range(1, n):\n        dp[0][i] = a[index] + dp[0][i - 1]\n    #\n    for i in range(1, k):\n        dp[i][0] = 0\n    #\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[j][i] = max(dp[j][i - 1], dp[j - 1][i] + a[i])\n    #\n    return dp[-1][-1]\n",
        "num_ids": 172
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    m = {}\n    s = 0\n    for i in range(index, n):\n        if a[i] in m:\n            s = m[a[i]] + a[i]\n        else:\n            s = a[i]\n        m[a[i]] = s\n    if a[k] in m:\n        return m[a[k]]\n    else:\n        return a[k]\n",
        "num_ids": 100
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if a[index] == k:\n        return 1\n    max1 = 0\n    max2 = 0\n    for i in range(index, n):\n        if a[i] < k and a[i] > max1:\n            max2 = max1\n            max1 = a[i]\n        elif a[i] < k and a[i] > max2:\n            max2 = a[i]\n    return max1 + max2\n",
        "num_ids": 120
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result=[]\n    for i in range(len(tuplex)):\n        if i%2==0:\n            result.append(tuplex[i])\n        else:\n            result.append(tuplex[i][::-1])\n    res_tuplex=tuple(result)\n    print(res_tuplex)\ndef riddle_scrambled(text):\n    '''\n    Write a function that scrambles a given string,\n    so that \"d\" comes before \"b\" and \"a\" comes before \"f\".\n    '''\n    text=text.lower()\n    text=list(text)\n    for i in range(len(text)):\n        if text[i]=='d':\n            text[i],text[i-1]=text[i-1],text[i]\n        elif text[i]=='b':\n            text[i],text[i-1]=text[i-1],text[i]\n        elif text[i]=='a':\n            text[i],text[i-1]=text[i-1],text[i]\n        elif text[i]=='f':\n            text[i],text[i-1]=text[i-1],text[i]\n        elif text[i]=='c':\n            text[i],text[i-1]=text[i-1],text[i]\n    res=''\n    for i in range(len(text)):\n        res+=text[i]\n    return res\ndef ucase_first(text):\n    '''\n    Write a function that uppercases the first letter of a string\n    and then returns it.\n    '''\n    if type(text)==list:\n        return [i.upper() for i in text]\n    else:\n        return text.upper()\ndef remove_dup(l):\n    '''\n    Write a function that removes duplicate elements from a list.\n    '''\n    if type(l)==list:\n        return [i for i in l if l.count(i)==1]\n    else:\n        return []\ndef get_thrice(l):\n    '''\n    Write a function that returns the third element from a list if it exists,\n    otherwise returns the last element.\n    '''\n    if type(l)==list:\n        return l[2] if len(l)>2 else l[-1]\n    else:\n        return []\ndef sort_list(l):\n    '''\n    Write a function that sorts a list,\n    and returns the sorted list.\n    '''\n    if type(l)==list:\n        l=sorted(l)\n        return l\n    else:\n        return []\ndef get_dup(l):\n    '''\n    Write a function that returns all duplicates of a list.\n    '''\n    if type(l)==list:\n        return [i for i in l if l.count(i)>1]\n    else:\n        return []\ndef all_the_same(l):\n    '''\n    Write a function that takes a list and returns True\n    if it is all the same, otherwise returns False.\n    '''\n    if type(l)==list:\n        return True if l.count(l[0])==len(l) else False\n    else:\n        return False\ndef remove_negatives(l):\n    '''\n    Write a function that removes all the negative numbers from a list\n    and returns the list.\n    '''\n    if type(l)==list:\n        return list(filter(lambda i: i>0,l))\n    else:\n        return []\ndef sum_3(l):\n    '''\n    Write a function that adds the numbers in a list\n    and returns the sum.\n    '''\n    if type(l)==list:\n        return sum(l)\n    else:\n        return 0\ndef get_cofactors(n):\n    '''\n    Write a function that gets the cofactors of a number.\n    '''\n    if type(n)==int:\n        if n<0:\n            return -(abs(n)//2)\n        else:\n            return n*(n+1)//2\n    else:\n        return []\ndef first_non_repeating_char(s):\n    '''\n    Write a function that returns the first non-repeating character\n    in a string. If there is no non-repeating character, return '_'.\n    '''\n    if type(s)==list:\n        return [i for i in s if s.count(i)==1][0]\n    else:\n        return ''\ndef is_anagram(s1,s2):\n    '''\n    Write a function that takes two strings and returns True\n    if they are anagrams.\n    '''\n    if type(s1)==str and type(s2)==str:\n        s1=s1.lower()\n        s2=s2.lower()\n        return sorted(s1)==sorted(s2)\n    else:\n        return False\ndef count_evens(l):\n    '''\n    Write a function that counts how many even numbers\n    are in a list.\n    '''\n    if type(l)==list:\n        return sum([1 for i in l if i%2==0])\n    else:\n        return 0\ndef count_vowels(s):\n    '''\n    Write a function that counts how many vowels\n    are in a string.\n    '''\n    if type(s)==str:\n        vowels=['a','e','i','o','u']\n        return len([i for i in s if i in vowels])\n    else:\n        return 0\ndef find_max(l):\n    '''\n    Write a function that finds the max of a list,\n    and returns the max.\n    '''\n    if type(l)==list:\n        return max(l)\n    else:\n        return 0\ndef find_max_index(l):\n    '''\n    Write a function that finds the max of a list,\n    and returns the index of the max element.\n    '''\n    if type(l)==list:\n        return l.index(max(l))\n    else:\n        return 0\ndef replace_char(s,old,new):\n    '''\n    Write a function that replaces all occurrences of a character\n    in a string with another character.\n    '''\n    if type(s)==str and type(old)==str and type(new)==str:\n        return s.replace(old,new)\n    else:\n        return ''\ndef sum_5(l):\n    '''\n    Write a function that takes a list and returns the sum\n    of the last 5 elements of the list.\n    '''\n    if type(l)==list:\n        return sum(l[-5:])\n    else:\n        return 0\ndef last_3(l):\n    '''\n    Write a function that returns the last 3 elements of a list.\n    '''\n    if type(l)==list:\n        return l[-3:]\n    else:\n        return []\ndef reverse_list(l):\n    '''\n    Write a function that reverses a list,\n    and returns the reversed list.\n    '''\n    if type(l)==list:\n        return list(reversed(l))\n    else:\n        return []\ndef reverse_string(s):\n    '''\n    Write a function that reverses a string.\n    '''\n    if type(s)==str:\n        return s[::-1]\n    else:\n        return ''\ndef is_prime(n):\n    '''\n    Write a function that checks whether a number is prime or not.\n    '''\n    if type(n)==int:\n        if n<2:\n            return False\n        else:\n            for i in range(2,n):\n                if n%i==0:\n                    return False\n            return True\n    else:\n        return False\ndef sum_of_digits(l):\n    '''\n    Write a function that returns the sum of digits of a string.\n    '''\n    if type(l)==str:\n        return sum([int(i) for i in l])\n    else:\n        return 0\ndef is_palindrome(l):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m] + (tuplex[m+1:], )\n",
        "num_ids": 25
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l=len(tuplex)\n    for i in range(l):\n        if tuplex[i][1]==m and tuplex[i][2]==n:\n            return tuplex[i]\n        else:\n            continue\n    return ()\ndef sudoku(sudoku):\n    '''\n    Write a function to get a sudoku instance.\n    '''\n    #print(sudoku)\n    #print(sudoku[0])\n    #print(sudoku[1])\n    #print(sudoku[2])\n    #print(sudoku[3])\n    #print(sudoku[4])\n    #print(sudoku[5])\n    #print(sudoku[6])\n    #print(sudoku[7])\n    #print(sudoku[8])\n    #print(sudoku[9])\n    #print(sudoku[10])\n    #print(sudoku[11])\n    #print(sudoku[12])\n    #print(sudoku[13])\n    #print(sudoku[14])\n    #print(sudoku[15])\n    #print(sudoku[16])\n    #print(sudoku[17])\n    #print(sudoku[18])\n    #print(sudoku[19])\n    #print(sudoku[20])\n    #print(sudoku[21])\n    #print(sudoku[22])\n    #print(sudoku[23])\n    #print(sudoku[24])\n    #print(sudoku[25])\n    #print(sudoku[26])\n    #print(sudoku[27])\n    #print(sudoku[28])\n    #print(sudoku[29])\n    #print(sudoku[30])\n    #print(sudoku[31])\n    #print(sudoku[32])\n    #print(sudoku[33])\n    #print(sudoku[34])\n    #print(sudoku[35])\n    #print(sudoku[36])\n    #print(sudoku[37])\n    #print(sudoku[38])\n    #print(sudoku[39])\n    #print(sudoku[40])\n    #print(sudoku[41])\n    #print(sudoku[42])\n    #print(sudoku[43])\n    #print(sudoku[44])\n    #print(sudoku[45])\n    #print(sudoku[46])\n    #print(sudoku[47])\n    #print(sudoku[48])\n    #print(sudoku[49])\n    #print(sudoku[50])\n    #print(sudoku[51])\n    #print(sudoku[52])\n    #print(sudoku[53])\n    #print(sudoku[54])\n    #print(sudoku[55])\n    #print(sudoku[56])\n    #print(sudoku[57])\n    #print(sudoku[58])\n    #print(sudoku[59])\n    #print(sudoku[60])\n    #print(sudoku[61])\n    #print(sudoku[62])\n    #print(sudoku[63])\n    #print(sudoku[64])\n    #print(sudoku[65])\n    #print(sudoku[66])\n    #print(sudoku[67])\n    #print(sudoku[68])\n    #print(sudoku[69])\n    #print(sudoku[70])\n    #print(sudoku[71])\n    #print(sudoku[72])\n    #print(sudoku[73])\n    #print(sudoku[74])\n    #print(sudoku[75])\n    #print(sudoku[76])\n    #print(sudoku[77])\n    #print(sudoku[78])\n    #print(sudoku[79])\n    #print(sudoku[80])\n    #print(sudoku[81])\n    #print(sudoku[82])\n    #print(sudoku[83])\n    #print(sudoku[84])\n    #print(sudoku[85])\n    #print(sudoku[86])\n    #print(sudoku[87])\n    #print(sudoku[88])\n    #print(sudoku[89])\n    #print(sudoku[90])\n    #print(sudoku[91])\n    #print(sudoku[92])\n    #print(sudoku[93])\n    #print(sudoku[94])\n    #print(sudoku[95])\n    #print(sudoku[96])\n    #print(sudoku[97])\n    #print(sudoku[98])\n    #print(sudoku[99])\n    #print(sudoku[100])\n    #print(sudoku[101])\n    #print(sudoku[102])\n    #print(sudoku[103])\n    #print(sudoku[104])\n    #print(sudoku[105])\n    #print(sudoku[106])\n    #print(sudoku[107])\n    #print(sudoku[108])\n    #print(sudoku[109])\n    #print(sudoku[110])\n    #print(sudoku[111])\n    #print(sudoku[112])\n    #print(sudoku[113])\n    #print(sudoku[114])\n    #print(sudoku[115])\n    #print(sudoku[116])\n    #print(sudoku[117])\n    #print(sudoku[118])\n    #print(sudoku[119])\n    #print(sudoku[120])\n    #print(sudoku[121])\n    #print(sudoku[122])\n    #print(sudoku[123])\n    #print(sudoku[124])\n    #print(sudoku[125])\n    #print(sudoku[126])\n    #print(sudoku[127])\n    #print(sudoku[128])\n    #print(sudoku[129])\n    #print(sudoku[130])\n    #print(sudoku[131])\n    #print(sudoku[132])\n    #print(sudoku[133])\n    #print(sudoku[134])\n    #print(sudoku[135])\n    #print(sudoku[136])\n    #print(sudoku[137])\n    #print(sudoku[138])\n    #print(sudoku[139])\n    #print(sudoku[140])\n    #print(sudoku[141])\n    #print(sudoku[142])\n    #print(sudoku[143])\n    #print(sudoku[144])\n    #print(sudoku[145])\n    #print(sudoku[146])\n    #print(sudoku[147])\n    #print(sudoku[148])\n    #print(sudoku[149])\n    #print(sudoku[150])\n    #print(sudoku[151])\n    #print(sudoku[152])\n    #print(sudoku[153])\n    #print(sudoku[154])\n    #print(sudoku[155])\n    #print(sudoku[156])\n    #print(sudoku[157])\n    #print(sudoku[158])\n    #print(sudoku[159])\n    #print(sudoku[160])\n    #print(sudoku[161])\n    #print(sudoku[162])\n    #print(sudoku[163])\n    #print(sudoku[164])\n    #print(sudoku[165])\n    #print(sudoku[166])\n    #print(sudoku[167])\n    #print(sudoku[168])\n    #print(sudoku[169])\n    #print(sudoku[170])\n    #print(sudoku[171])\n    #print(sudoku[17",
        "num_ids": 1912
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex)\n    #print(type(tuplex))\n    colon = []\n    if m>0:\n        colon.append(tuplex[0])\n    for i in range(1,m):\n        if i<m:\n            colon.append(tuplex[i])\n    #print(colon)\n    if n>0:\n        colon.append(tuplex[-1])\n    #print(colon)\n    #print(len(colon))\n    return tuple(colon)\ndef fcmp(x,y):\n    '''\n    Compares two numbers x and y, ignoring their sign.\n    '''\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x < 0:\n        x = -x\n    if y < 0:\n        y = -y\n    if x < y:\n        return -1\n    if x == y:\n        return 0\n    if x > y:\n        return 1\n",
        "num_ids": 84
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(n):\n        colon.append((tuplex[i],tuplex[i+(m-1)*n]))\n    return tuple(colon)\ndef check_tuplex(tuplex,m,n):\n    '''\n    Write a function to check if a tuple is a permutation of another tuple.\n    '''\n    for i in range(m):\n        if tuplex[i]!=i+1:\n            return False\n    return True\ndef transpose(tuplex,m,n):\n    '''\n    Write a function to transpose a tuple.\n    '''\n    transpose=[]\n    for i in range(n):\n        transpose.append(tuplex[(i+1)*(m-1):i*(m-1):-1])\n    return tuple(transpose)\ndef reverse(tuplex,m,n):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef list2tuplex(listx,m,n):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\ndef tuplex2list(tuplex,m,n):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tuplex)\ndef list2colon(listx,m,n):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return list(colon_tuplex(tuplex2list(listx,m,n),m,n))\ndef colon2list(colon,m,n):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tuplex2list(colon_tuplex(colon,m,n),m,n))\ndef matrix2tuple(matrix,m,n):\n    '''\n    Write a function to convert a 2d-matrix to tuple.\n    '''\n    return tuple(tuple(matrix[i]) for i in range(m))\ndef tuple2matrix(tuple_,m,n):\n    '''\n    Write a function to convert a tuple to a 2d-matrix.\n    '''\n    return tuple(tuple_)\ndef two_tuple_add(tuple1,tuple2,m,n):\n    '''\n    Write a function to add 2 tuples.\n    '''\n    colon_tuple1=colon_tuplex(tuple1,m,n)\n    colon_tuple2=colon_tuplex(tuple2,m,n)\n    new_tuple=colon_tuplex((colon_tuple1[0]+colon_tuple2[0],colon_tuple1[1]+colon_tuple2[1]),m,n)\n    return new_tuple\ndef two_tuple_sub(tuple1,tuple2,m,n):\n    '''\n    Write a function to subtract 2 tuples.\n    '''\n    colon_tuple1=colon_tuplex(tuple1,m,n)\n    colon_tuple2=colon_tuplex(tuple2,m,n)\n    new_tuple=colon_tuplex((colon_tuple1[0]-colon_tuple2[0],colon_tuple1[1]-colon_tuple2[1]),m,n)\n    return new_tuple\ndef two_tuple_mul(tuple1,tuple2,m,n):\n    '''\n    Write a function to multiply 2 tuples.\n    '''\n    colon_tuple1=colon_tuplex(tuple1,m,n)\n    colon_tuple2=colon_tuplex(tuple2,m,n)\n    new_tuple=colon_tuplex((colon_tuple1[0]*colon_tuple2[0],colon_tuple1[1]*colon_tuple2[1]),m,n)\n    return new_tuple\ndef two_tuple_div(tuple1,tuple2,m,n):\n    '''\n    Write a function to divide 2 tuples.\n    '''\n    colon_tuple1=colon_tuplex(tuple1,m,n)\n    colon_tuple2=colon_tuplex(tuple2,m,n)\n    new_tuple=colon_tuplex((colon_tuple1[0]/colon_tuple2[0],colon_tuple1[1]/colon_tuple2[1]),m,n)\n    return new_tuple\ndef two_tuple_divide(tuple1,tuple2,m,n):\n    '''\n    Write a function to divide 2 tuples.\n    '''\n    colon_tuple1=colon_tuplex(tuple1,m,n)\n    colon_tuple2=colon_tuplex(tuple2,m,n)\n    new_tuple=colon_tuplex((colon_tuple1[0]/colon_tuple2[0],colon_tuple1[1]/colon_tuple2[1]),m,n)\n    return new_tuple\ndef two_tuple_max(tuple1,tuple2,m,n):\n    '''\n    Write a function to get maximum of 2 tuples.\n    '''\n    colon_tuple1=colon_tuplex(tuple1,m,n)\n    colon_tuple2=colon_tuplex(tuple2,m,n)\n    new_tuple=colon_tuplex((max(colon_tuple1[0],colon_tuple2[0]),max(colon_tuple1[1],colon_tuple2[1])),m,n)\n    return new_tuple\ndef two_tuple_min(tuple1,tuple2,m,n):\n    '''\n    Write a function to get minimum of 2 tuples.\n    '''\n    colon_tuple1=colon_tuplex(tuple1,m,n)\n    colon_tuple2=colon_tuplex(tuple2,m,n)\n    new_tuple=colon_tuplex((min(colon_tuple1[0],colon_tuple2[0]),min(colon_tuple1[1],colon_tuple2[1])),m,n)\n    return new_tuple\ndef two_tuple_max_min(tuple1,tuple2,m,n):\n    '''\n    Write a function to get maximum and minimum of 2 tuples.\n    '''\n    colon_tuple1=colon_tuplex(tuple1,m,n)\n    colon_tuple2=colon_tuplex(tuple2,m,n)\n    new_tuple=colon_tuplex((max(colon_tuple1[0],colon_tuple2[0]),min(colon_tuple1[1],colon_tuple2[1])),m,n)\n    return new_tuple\ndef two_tuple_add_mul(tuple1,tuple2,m,n):\n    '''\n    Write a function to add 2 tuples and multiply 2 tuples.\n    '''\n    colon_tuple1=colon_tuplex(tuple1,m,n)\n    colon_tuple2=colon_tuplex(tuple2,m,n)\n    new_tuple=colon_tuplex((colon_tuple1[0]+colon_tuple2[0],colon_tuple1[1]+colon_tuple2[1]),m,n)\n    return new_tuple\ndef two_tuple_add_mul_divide(tuple1,tuple2,m,n):\n    '''\n    Write a function to add 2 tuples and multiply 2 tuples and divide 2 t",
        "num_ids": 20
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    b = []\n    b.append(tuplex[0][:m])\n    b.append(tuplex[0][m:])\n    b.append(tuplex[1][:m])\n    b.append(tuplex[1][m:])\n    return tuple(b)\n",
        "num_ids": 74
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    i = 0\n    while i<len(tuplex):\n        result.append(tuplex[i])\n        if i+m>=len(tuplex):\n            break\n        result.append(tuplex[i+m])\n        i+=m\n    result.extend(tuplex[i:])\n    return result\ndef col_order(colon):\n    '''\n    Write a function to get the order of a colon.\n    '''\n    tuplex = tuple(colon)\n    colon = colon\n    count = 0\n    tuplex = colon_tuplex(colon,1,1)\n    for i in range(len(tuplex)):\n        if i==0:\n            if tuplex[i]>tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        elif i==len(tuplex)-1:\n            if tuplex[i]>tuplex[i-1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        else:\n            if tuplex[i]>tuplex[i-1] and tuplex[i]>tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n    return count\ndef col_reverse(colon):\n    '''\n    Write a function to get the reverse of a colon.\n    '''\n    tuplex = tuple(colon)\n    colon = colon\n    count = 0\n    tuplex = colon_tuplex(colon,1,1)\n    for i in range(len(tuplex)):\n        if i==0:\n            if tuplex[i]<tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        elif i==len(tuplex)-1:\n            if tuplex[i]<tuplex[i-1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        else:\n            if tuplex[i]<tuplex[i-1] and tuplex[i]<tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n    return count\ndef order_colon(colon):\n    '''\n    Write a function to check if a colon is ordered.\n    '''\n    tuplex = tuple(colon)\n    colon = colon\n    count = 0\n    tuplex = colon_tuplex(colon,1,1)\n    for i in range(len(tuplex)):\n        if i==0:\n            if tuplex[i]>tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        elif i==len(tuplex)-1:\n            if tuplex[i]>tuplex[i-1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        else:\n            if tuplex[i]>tuplex[i-1] and tuplex[i]>tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n    return count\ndef col_compare(colon1,colon2):\n    '''\n    Write a function to check if two colons are equal.\n    '''\n    tuplex1 = tuple(colon1)\n    tuplex2 = tuple(colon2)\n    tuplex1 = colon_tuplex(colon1,1,1)\n    tuplex2 = colon_tuplex(colon2,1,1)\n    if tuplex1==tuplex2:\n        return True\n    else:\n        return False\ndef col_not_compare(colon1,colon2):\n    '''\n    Write a function to check if two colons are not equal.\n    '''\n    tuplex1 = tuple(colon1)\n    tuplex2 = tuple(colon2)\n    tuplex1 = colon_tuplex(colon1,1,1)\n    tuplex2 = colon_tuplex(colon2,1,1)\n    if tuplex1!=tuplex2:\n        return True\n    else:\n        return False\ndef order_colon_reverse(colon):\n    '''\n    Write a function to check if a colon is ordered.\n    '''\n    tuplex = tuple(colon)\n    colon = colon\n    count = 0\n    tuplex = colon_tuplex(colon,1,1)\n    for i in range(len(tuplex)):\n        if i==0:\n            if tuplex[i]<tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        elif i==len(tuplex)-1:\n            if tuplex[i]<tuplex[i-1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        else:\n            if tuplex[i]<tuplex[i-1] and tuplex[i]<tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n    return count\ndef order_colon_not_reverse(colon):\n    '''\n    Write a function to check if a colon is ordered.\n    '''\n    tuplex = tuple(colon)\n    colon = colon\n    count = 0\n    tuplex = colon_tuplex(colon,1,1)\n    for i in range(len(tuplex)):\n        if i==0:\n            if tuplex[i]>tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        elif i==len(tuplex)-1:\n            if tuplex[i]>tuplex[i-1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        else:\n            if tuplex[i]>tuplex[i-1] and tuplex[i]>tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n    return count\ndef check_colon(colon):\n    '''\n    Write a function to check if a colon is ordered.\n    '''\n    tuplex = tuple(colon)\n    colon = colon\n    count = 0\n    tuplex = colon_tuplex(colon,1,1)\n    for i in range(len(tuplex)):\n        if i==0:\n            if tuplex[i]>tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        elif i==len(tuplex)-1:\n            if tuplex[i]>tuplex[i-1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n        else:\n            if tuplex[i]>tuplex[i-1] and tuplex[i]>tuplex[i+1]:\n                tuplex = colon_tuplex(colon,1,1)\n                count+=1\n    return count\ndef order_colon_not_compare(colon1,colon2):\n    '''\n    Write a function to check if two colons are not equal.\n    '''\n    tuplex1 = tuple(colon1)\n    tuplex2 = tuple(colon2)\n    tuplex1 = colon_tuplex(colon1,1,1)\n    tuplex2 = colon_tuplex(colon2,1",
        "num_ids": 66
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-1):\n        tuplex = ('{} : {}'.format(tuplex[i],tuplex[i+1]))\n    tuplex = ('{} : {}'.format(tuplex[m-1],tuplex[m]))\n    return tuplex\n",
        "num_ids": 77
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex=[]\n    for i in range(m):\n        for j in range(n):\n            new_tuplex.append(tuplex[i][j])\n    return tuple(new_tuplex)\n",
        "num_ids": 58
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = ()\n    if m%2 == 1:\n        colon_tuplex += (tuplex[-1],)\n        colon_tuplex += tuplex[:m-1]\n    elif m%2 == 0:\n        colon_tuplex += (tuplex[0],)\n        colon_tuplex += tuplex[1:m]\n    if n%2 == 1:\n        colon_tuplex += (tuplex[0],)\n        colon_tuplex += tuplex[m:n-1]\n    elif n%2 == 0:\n        colon_tuplex += (tuplex[-1],)\n        colon_tuplex += tuplex[m:n]\n    return colon_tuplex\n",
        "num_ids": 199
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort nums1 and nums2 by descending order to get the largest products\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n",
        "num_ids": 45
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    From the given lists, select one factor from each list and multiply them together.\n    Return a list of all products, and the product of the first element from each list.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2 or N < 1:\n        return None\n",
        "num_ids": 23
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Dictionaries and arrays\n    products = []\n    products_dict = {}\n    nums1.sort()\n    nums2.sort()\n    # Checking to make sure that the lists are the same length\n    if len(nums1)!= len(nums2):\n        print('Lists are not of the same length')\n        return products\n    # Searching through the lists to find the largest product\n    for i in range(N):\n        if nums1[i] > 1:\n            products_dict[nums1[i]] = nums2[i]\n        else:\n            products_dict[nums1[i]] = nums2[i]\n        # Searching through the dictionary to find the largest product\n        for key in products_dict:\n            # Find the largest product of the two factors\n            if key * key > products_dict[key]:\n                products.append(key)\n                products.append(products_dict[key])\n                break\n    return products\n",
        "num_ids": 234
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # first we sort nums1 and nums2.\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    # set the result as -1 since there are no result.\n    result = -1\n    \n    # start with len1 = len2 = 1 because we need to choose 1 from both lists.\n    i = 1\n    j = 1\n    \n    # while i < len(nums1) and j < len(nums2):\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] > nums2[j]:\n            result = max(result, nums1[i] * nums2[j])\n            i += 1\n        elif nums1[i] < nums2[j]:\n            result = max(result, nums1[i] * nums2[j])\n            j += 1\n        else:\n            i += 1\n            j += 1\n    \n    # lastly we need to take care of the last one.\n    while i < len(nums1):\n        result = max(result, nums1[i] * nums2[j])\n        i += 1\n        \n    while j < len(nums2):\n        result = max(result, nums1[i] * nums2[j])\n        j += 1\n    \n    return result\n",
        "num_ids": 338
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    p1 = [n for n in nums1]\n    p2 = [n for n in nums2]\n    p1.sort(reverse=True)\n    p2.sort(reverse=True)\n    i, j = 0, 0\n    max_value = 0\n    while i < N and j < N:\n        if p1[i] > p2[j]:\n            max_value = max(max_value, p1[i] * p2[j])\n            j += 1\n        else:\n            i += 1\n    print(max_value)\n",
        "num_ids": 138
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    if N > len(nums1) + len(nums2):\n        return result\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        result.append(product)\n        result.sort(reverse=True)\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Nums1 = [1, 2, 3, 4, 5]\n    # Nums2 = [2, 3, 4, 5]\n    # N = 3\n    # return [20, 12, 20]\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    max_prod = nums1[0] * nums2[0]\n    i = 0\n    j = 0\n    while i < N and j < N:\n        if nums1[i] * nums2[j] > max_prod:\n            max_prod = nums1[i] * nums2[j]\n        if nums2[j] >= nums1[i]:\n            i += 1\n        else:\n            j += 1\n    return max_prod\n",
        "num_ids": 205
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(0, N):\n        result.append([nums1[i], nums2[i]])\n    result.sort(key=lambda x: x[0] * x[1], reverse=True)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest = []\n    if len(nums1) < len(nums2):\n        return largest\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i == j:\n                continue\n            product = nums1[i] * nums2[j]\n            largest.append(product)\n    return sorted(largest, reverse=True)[:N]\n",
        "num_ids": 104
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return \"Nothin\"\nprint(maximum(2,8))\nprint(maximum(4,3))\nprint(maximum(5,3))\n",
        "num_ids": 64
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max_num = a if a > b else b\n    return max_num\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a, \" is maximum\")\n    elif(a<b):\n        print(b,\" is maximum\")\n    else:\n        print(\"Both numbers are equal\")\nmaximum(5,10)\nmaximum(10,10)\nmaximum(10,15)\nmaximum(-10,-10)\n",
        "num_ids": 79
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n",
        "num_ids": 17
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a > b else b\n    \n    ",
        "num_ids": 15
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\nprint(maximum(100,200))\n",
        "num_ids": 20
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\nmaximum(3,4)\n",
        "num_ids": 32
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \n    \n",
        "num_ids": 25
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        lst.append(str1[i])\n    return tuple(lst)\n",
        "num_ids": 41
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    res = tuple(str1)\n    return res\n",
        "num_ids": 28
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    tuple1 = tuple(list1)\n    return tuple1\n",
        "num_ids": 28
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    tup1 = tuple(list1)\n    return tup1\n",
        "num_ids": 29
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1=[]\n    for i in str1:\n        list1.append(i)\n    return tuple(list1)\n",
        "num_ids": 33
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst=list(str1)\n    result=tuple(lst)\n    print(result)\n",
        "num_ids": 28
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n",
        "num_ids": 12
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    def set_left_most_unset_bit(n): \n        # if n = 000 \n        # 000 -> 111 \n        n = n | (1 << 0)\n        # if n = 111 \n        # 111 -> 110 \n        n = n | (1 << 1)\n        # if n = 110 \n        # 110 -> 100 \n        n = n | (1 << 2)\n        # if n = 100 \n        # 100 -> 010 \n        n = n | (1 << 3)\n        # if n = 010 \n        # 010 -> 001 \n        n = n | (1 << 4)\n        # if n = 001 \n        # 001 -> 000 \n        n = n | (1 << 5)\n        # if n = 000 \n        # 000 -> 000 \n        return n \n",
        "num_ids": 201
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Base case \n    if n == 0: \n        return 1\n    # Bitwise AND operation \n    return (n & (~n + 1)) \n",
        "num_ids": 40
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # The following loop iterates over all the bits in a number from least significant bit to most significant. \n    # For each bit, if the bit is set to 0, it is changed to 1, else it remains 0. \n    # The resultant number is returned.\n    n = n & (~n+1)\n    return n\n",
        "num_ids": 77
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(n-1) \n",
        "num_ids": 14
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n=n&~(n-1)\n    return n\n",
        "num_ids": 18
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = 0b11111111111111111111111111111110\n    print(\"Original value is \", bin(n)) \n    n ^= 0b10000000\n    print(\"After XOR: \", bin(n)) \n",
        "num_ids": 53
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    #code here \n    n &= (~n) \n    return n \n",
        "num_ids": 24
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    while (n & 1) == 0:\n        n = n >> 1\n    return n | (1 << (n.bit_length() - 1))\n",
        "num_ids": 49
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1<<n.bit_length()-1)\ndef left_most_unset_bit(n): \n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    return n & (~(1 << n.bit_length() -1)) ",
        "num_ids": 20
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n << 1)\n",
        "num_ids": 10
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14\n    v = pi * r**2 * h\n    return v\nprint(volume_cone(1,2))\n",
        "num_ids": 35
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi * (r ** 2) * h,2)\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def volume_cone_volume(r,h):\n        #The formula is calculated by the given formula in class\n        #The formula is in SI unit\n        return (4/3)*math.pi*((r**2)*((h/r)-1))\n",
        "num_ids": 61
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return (pi*r**2*h)\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate pi\n    pi = math.pi\n",
        "num_ids": 15
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    h = float(h)\n    r = float(r)\n    print(\"The volume of a cone with radius {} is {}\".format(r,4/3*pi*r**3))\n    print(\"The volume of a cone with height {} is {}\".format(h,4/3*pi*r**3*h))\n    return 4/3*pi*r**3\n",
        "num_ids": 97
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if h == 0 or r == 0:\n        return 0\n    return math.pi * r**2 * h/3\n",
        "num_ids": 31
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return math.pow(l,3)\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(4*math.pi*math.pow(r,2),4)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return round(2*math.pi*math.pow(r,2)*h,4)\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return round(0.5*math.pi*math.pow(r,2)*h,4)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4/3*math.pi*math.pow(r,3),4)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef cylinder_radius(r,h):\n    '''\n    Write a function to find the radius of a cylinder.\n    '''\n    return round((2*math.pi*r*h)/math.pow(2,1/3),4)\ndef cone_radius(r,h):\n    '''\n    Write a function to find the radius of a cone.\n    '''\n    return round(2*math.pi*r*h,4)\ndef sphere_radius(r):\n    '''\n    Write a function to find the radius of a sphere.\n    '''\n    return round((4/3)*math.pi*r,4)\ndef cone_height(r,h):\n    '''\n    Write a function to find the height of a cone.\n    '''\n    return round(math.sqrt(math.pow(r,2)*math.pow(h,2)-math.pow(r,2))+h,4)\ndef sphere_height(r,h):\n    '''\n    Write a function to find the height of a sphere.\n    '''\n    return round(math.sqrt(math.pow(r,2)*math.pow(h,2)),4)\ndef cone_radius_height(r,h):\n    '''\n    Write a function to find the radius and height of a cone.\n    '''\n    return round((2*math.pi*r*h)/math.pow(2,1/3),4)\ndef sphere_radius_height(r,h):\n    '''\n    Write a function to find the radius and height of a sphere.\n    '''\n    return round((2*math.pi*r*h),4)\ndef cone_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef sphere_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(4*math.pi*math.pow(r,3),4)\ndef cylinder_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return round(2*math.pi*math.pow(r,2)*h,4)\ndef sphere_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(4*math.pi*math.pow(r,3),4)\ndef cone_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return round(2*math.pi*math.pow(r,2)*h,4)\ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(4*math.pi*math.pow(r,3),4)\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4/3*math.pi*math.pow(r,3),4)\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4/3*math.pi*math.pow(r,3),4)\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef sphere_diameter(r):\n    '''\n    Write a function to find the diameter of a sphere.\n    '''\n    return round((2*math.pi*r*r),4)\ndef cone_diameter(r,h):\n    '''\n    Write a function to find the diameter of a cone.\n    '''\n    return round((2*math.pi*r*h),4)\ndef sphere_diameter(r):\n    '''\n    Write a function to find the diameter of a sphere.\n    '''\n    return round((2*math.pi*r*r),4)\ndef cone_diameter(r,h):\n    '''\n    Write a function to find the diameter of a cone.\n    '''\n    return round((2*math.pi*r*h),4)\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4/3*math.pi*math.pow(r,3),4)\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef sphere_surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(4*math.pi*math.pow(r,3),4)\ndef cone_surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return round(math.pi*math.pow(r,2)*h,4)\ndef cylinder_surface_are",
        "num_ids": 30
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4/3)*math.pi*r**3*h\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\n",
        "num_ids": 27
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1\n    while x <= n:\n        x = 2*x\n    return x\n",
        "num_ids": 25
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    '''\n    If n is odd, then no power of 2 can be formed.\n    So return -1.\n    '''\n    if n == 1:\n        return -1\n    if n == 0:\n        return 0\n    if n == 2:\n        return 1\n    '''\n    Find the highest power of 2 that is less than n.\n    '''\n    if n & 1:\n        return 0\n    if n == 0:\n        return 1\n    if n & 1:\n        return 2\n    m = 3\n    while m < n:\n        if n & m:\n            return m\n        m += 2\n    return m\n",
        "num_ids": 67
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    i = 1\n    while i <= n:\n        power += 1\n        i = i << 1\n    return power\n",
        "num_ids": 35
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1\n    while x <= n:\n        x = 2 * x\n    return x\n",
        "num_ids": 25
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #Your code here\n    return 0\n    \n",
        "num_ids": 14
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return power\n",
        "num_ids": 36
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    while (2**max_power) <= n:\n        max_power = max_power + 1\n    print(max_power)\n",
        "num_ids": 41
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    assert isinstance(n,int), \"Input should be an integer\"\n    assert n>=0, \"Input should be a positive integer\"\n    assert n<=2**31-1, \"Input should be a positive integer less than or equal to 2**31-1\"\n    \n    power = 0\n    while n//2**power>=n:\n        power+=1\n    return power\n",
        "num_ids": 93
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 8\n    if n == 6:\n        return 10\n    if n == 7:\n        return 12\n    if n == 8:\n        return 16\n    if n == 9:\n        return 32\n    if n == 10:\n        return 64\n    if n == 11:\n        return 128\n    if n == 12:\n        return 256\n    if n == 13:\n        return 512\n    if n == 14:\n        return 1024\n    if n == 15:\n        return 2048\n    if n == 16:\n        return 4096\n    if n == 17:\n        return 8192\n    if n == 18:\n        return 16384\n    if n == 19:\n        return 32768\n    if n == 20:\n        return 65536\n    if n == 21:\n        return 131072\n    if n == 22:\n        return 262144\n    if n == 23:\n        return 524288\n    if n == 24:\n        return 1048576\n    if n == 25:\n        return 2097152\n    if n == 26:\n        return 4194304\n    if n == 27:\n        return 8388608\n    if n == 28:\n        return 16777216\n    if n == 29:\n        return 33554432\n    if n == 30:\n        return 67108864\n    if n == 31:\n        return 134217728\n    if n == 32:\n        return 268435456\n    if n == 33:\n        return 536870912\n    if n == 34:\n        return 1073741824\n    if n == 35:\n        return 2147483648\n    if n == 36:\n        return 4294967296\n    if n == 37:\n        return 8589934592\n    if n == 38:\n        return 17179869184\n    if n == 39:\n        return 34359738368\n    if n == 40:\n        return 68719476736\n    if n == 41:\n        return 137438953472\n    if n == 42:\n        return 274877906944\n    if n == 43:\n        return 549755813888\n    if n == 44:\n        return 1099511627776\n    if n == 45:\n        return 2199023255552\n    if n == 46:\n        return 4503599627370496\n    if n == 47:\n        return 96901496907216\n    if n == 48:\n        return 17592186044416\n    if n == 49:\n        return 35184372088832\n    if n == 50:\n        return 70368744177664\n    if n == 51:\n        return 140737488355328\n    if n == 52:\n        return 274877906944\n    if n == 53:\n        return 549755813888\n    if n == 54:\n        return 1125899906842624\n    if n == 55:\n        return 2251799813685248\n    if n == 56:\n        return 4398046511104\n    if n == 57:\n        return 8796093022208\n    if n == 58:\n        return 167772160\n    if n == 59:\n        return 33554432\n    if n == 60:\n        return 67108864\n    if n == 61:\n        return 134217728\n    if n == 62:\n        return 268435456\n    if n == 63:\n        return 536870912\n    if n == 64:\n        return 1073741824\n    if n == 65:\n        return 2147483648\n    if n == 66:\n        return 4294967296\n    if n == 67:\n        return 8589934592\n    if n == 68:\n        return 17179869184\n    if n == 69:\n        return 34359738368\n    if n == 70:\n        return 68719476736\n    if n == 71:\n        return 137438953472\n    if n == 72:\n        return 274877906944\n    if n == 73:\n        return 549755813888\n    if n == 74:\n        return 1099511627776\n    if n == 75:\n        return 2199023255552\n    if n == 76:\n        return 4503599627370496\n    if n == 77:\n        return 96901496907216\n    if n == 78:\n        return 17592186044416\n    if n == 79:\n        return 35184372088832\n    if n == 80:\n        return 70368744177664\n    if n == 81:\n        return 140737488355328\n    if n == 82:\n        return 274877906944\n    if n == 83:\n        return 549755813888\n    if n == 84:\n        return 1125899906842624\n    if n == 85:\n        return 2251799813685248\n    if n == 86:\n        return 4398046511104\n    if n == 87:\n        return 8796093022208\n    if n == 88:\n        return 167772160\n    if n == 89:\n        return 33554432\n    if n == 90:\n        return 67108864\n    if n == 91:\n        return 134217728\n    if n == 92:\n        return 268435456\n    if n == 93:\n        return 536870912\n    if n == 94:\n        return 1073741824\n    if n == 95:\n        return 2147483648\n    if n == 96:\n        return 4294967296\n    if n == 97:\n        return 8589934592\n    if n == 98:\n        return 17179869184\n    if n == 99:\n        return 34359738368\n    if n == 100:\n        return 68719476736\n    if n == 101:\n        return 137438953472\n    if n == 102:\n        return 274877906944\n    if n == 103:\n        return 549755813888\n    if n == 104:\n        return 1099511627776\n    if n == 105:\n        return 2199023255552\n    if n == 106:\n        return 4503599627370496\n    if n == 107:\n        return 96901496907216\n    if n == 108:\n        return 17592186044416\n    if n == 109:\n        return 35184372088832\n    if n == 110:\n        return 70368744177664\n    if n == 111:\n        return 140737488355328\n    if n == 112:\n        return 274877906944\n    if n == 113:\n        return 549755813888\n    if n == 114:\n        return 1125899906842624\n    if n == 115:\n        return 2251799813685248\n    if n == 116:\n        return 4398046511104\n    if n == 117:\n        return 8796093022208\n    if n == 118:\n        return 167772160\n    if n == 119:\n        return 33554432\n    if n == 120:\n        return 67108864\n    if n == 121:\n        return 134217728\n    if n == 122:\n        return 268435456\n    if n == 123:\n        return 536870912\n    if n == 124:\n        return 1073741824\n    if n == 125:\n        return 2147483648\n    if n == 126:\n        return 4294967296\n    if n == 127:\n        return 8589934592\n    if n == 128:\n        return 17179869184\n    if n == 129:\n        return 34359738368\n    if n == 130:\n        return 68719476736\n    if n == 131:\n        return 137438953472\n    if n == 132:\n        return 274877906944\n    if n == 133:\n        return 549755813888\n    if n == 134:\n        return 1099511627776\n    if n == 135:\n        return 2199023255552\n    if n == 136:\n        return 4503599627370496\n    if n == 137:\n    ",
        "num_ids": 2007
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    return 1 if 2**(n-1) > n else 2**(n-1)\n",
        "num_ids": 35
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 56
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 1\n    b = 2\n    while n!= 1:\n        n -= 1\n        a,b = b, a+b\n    print(b)\n",
        "num_ids": 42
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 2\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = 1\n    y = 1\n    for i in range(n):\n        x = x + y\n        y = x - y\n    return x\n    \ndef find_lucas_n(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    x = 1\n    y = 1\n    result = []\n    for i in range(n):\n        x = x + y\n        y = x - y\n        result.append(x)\n    return result\n    \ndef find_lucas_iter(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    x = 1\n    y = 1\n    result = []\n    while n > 0:\n        result.append(x)\n        x = x + y\n        y = x - y\n        n = n - 1\n    return result\n    \ndef find_lucas_iter2(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    x = 1\n    y = 1\n    result = []\n    while n > 0:\n        result.append(x)\n        x = x + y\n        y = x - y\n        n = n - 1\n    return result[::-1]\n    \ndef find_lucas_rec(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    def lucas_helper(n, x, y):\n        if n == 0:\n            return x\n        return lucas_helper(n - 1, x + y, x - y)\n    \n    return lucas_helper(n, 1, 1)\n    \ndef find_lucas_rec2(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    def lucas_helper(n, x, y):\n        if n == 0:\n            return x\n        return lucas_helper(n - 1, x + y, x - y)\n    \n    return lucas_helper(n, 1, 1)\n    \ndef find_lucas_iter3(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    def lucas_helper(n, x, y):\n        if n == 0:\n            return x\n        return lucas_helper(n - 1, x + y, x - y)\n    \n    x = y = 1\n    result = []\n    while n > 0:\n        result.append(x)\n        x = x + y\n        y = x - y\n        n = n - 1\n    return result\n    \ndef find_lucas_iter4(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    def lucas_helper(n, x, y):\n        if n == 0:\n            return x\n        return lucas_helper(n - 1, x + y, x - y)\n    \n    x = y = 1\n    result = []\n    while n > 0:\n        result.append(x)\n        x = x + y\n        y = x - y\n        n = n - 1\n    return result[::-1]\n    \ndef find_lucas_rec3(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    def lucas_helper(n, x, y):\n        if n == 0:\n            return x\n        return lucas_helper(n - 1, x + y, x - y)\n    \n    return lucas_helper(n, 1, 1)\n    \ndef find_lucas_rec4(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    def lucas_helper(n, x, y):\n        if n == 0:\n            return x\n        return lucas_helper(n - 1, x + y, x - y)\n    \n    return lucas_helper(n, 1, 1)\n    \ndef test_find_lucas():\n    for i in range(10):\n        print('n =', i)\n        assert find_lucas(i) == i\n    \n    for i in range(10):\n        print('n =', i)\n        assert find_lucas_n(i) == find_lucas_iter(i)\n    \n    for i in range(10):\n        print('n =', i)\n        assert find_lucas_n(i) == find_lucas_iter2(i)\n    \n    for i in range(10):\n        print('n =', i)\n        assert find_lucas_n(i) == find_lucas_rec2(i)\n    \n    for i in range(10):\n        print('n =', i)\n        assert find_lucas_n(i) == find_lucas_rec3(i)\n    \n    for i in range(10):\n        print('n =', i)\n        assert find_lucas_n(i) == find_lucas_rec4(i)\n    \n    for i in range(100):\n        print('n =', i)\n        assert find_lucas_rec2(i) == find_lucas_rec3(i)\n    \n    for i in range(100):\n        print('n =', i)\n        assert find_lucas_rec2(i) == find_lucas_rec4(i)\n    \n    for i in range(1, 100):\n        print('n =', i)\n        assert find_lucas_rec3(i) == find_lucas_rec4(i)\n",
        "num_ids": 473
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Returns lucas number\n    if n <= 0:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = lucas_number(1,2)\n    return lucas\n",
        "num_ids": 22
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 52
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n_to_store = n+1\n    lucas_numbers = [0, 1]\n    \n    while n_to_store > len(lucas_numbers):\n        lucas_numbers.append(lucas_numbers[-2]+lucas_numbers[-1])\n        \n    return lucas_numbers[-1]\n    \nif __name__ == \"__main__\":\n    print(find_lucas(5))\n    print(find_lucas(6))\n    print(find_lucas(7))\n    print(find_lucas(8))\n    print(find_lucas(9))\n    print(find_lucas(10))\n    print(find_lucas(11))\n    print(find_lucas(12))\n    print(find_lucas(13))\n    print(find_lucas(14))\n    print(find_lucas(15))\n    print(find_lucas(16))\n    print(find_lucas(17))\n    print(find_lucas(18))\n    print(find_lucas(19))\n    print(find_lucas(20)",
        "num_ids": 296
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    else: \n        return find_lucas(n-1) + find_lucas(n-2) \n",
        "num_ids": 44
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string)\n    return list_\n",
        "num_ids": 16
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n",
        "num_ids": 10
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(list_) <= 0:\n        return list_\n    else:\n        return list_.insert(0, string.format(list_[0])) + add_string(list_[1:], string)\n",
        "num_ids": 54
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n",
        "num_ids": 15
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.format(*string)\n",
        "num_ids": 11
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.__format__(string)\n",
        "num_ids": 13
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    list_.append(string)\n    \n    return list_\n",
        "num_ids": 19
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.__add__([string % x for x in list_])\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string.split())\n    return list_\n",
        "num_ids": 18
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = l2[i]\n        dictionary[l1[i]][l2[i]] = l3[i]\n    return dictionary\n",
        "num_ids": 63
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # edge case, empty list \n    if not l1 or not l2:\n        return l1 or l2\n",
        "num_ids": 32
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    converted_dic = {}\n    for index, value in enumerate(l1):\n        converted_dic[value] = l2[index]\n        converted_dic[value] = l3[index]\n    return converted_dic\n",
        "num_ids": 63
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {l1[i]: l2[i] for i in range(len(l1))}\n    d.update({l3[i]: l4[i] for i in range(len(l3))})\n    return d\n",
        "num_ids": 59
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0 or len(l2) == 0 or len(l3) == 0:\n        return None\n    for i in range(len(l1)):\n        if len(l2) == 0 or len(l3) == 0:\n            return None\n        d1 = {l1[i]: l2[i], l3[i]: l3[i]}\n        d1.update(d2)\n        d3 = {l1[i]: d1}\n        d2 = {l2[i]: d2}\n        d3.update(d2)\n    return d3\n",
        "num_ids": 148
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    data = dict()\n    \n    for i in range(0, len(l1)):\n        data[l1[i]] = {\n            'Male' : l2[i],\n            'Female' : l3[i]\n        }\n        \n    return data\n",
        "num_ids": 69
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    i = 0\n    while i < len(l1):\n        dictionary[l1[i]] = l2[i]\n        i += 1\n    for i in range(len(l3)):\n        dictionary[l3[i]] = l1[i]\n    return dictionary\n    \nprint(convert_list_dictionary([1, 2, 3], ['one', 'two', 'three'], ['a', 'b', 'c']))\n",
        "num_ids": 116
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {}\n    for i in range(len(l1)):\n        if i == 0:\n            dict[l1[i]] = {l2[i]: l3[i]}\n        else:\n            if l1[i] in dict:\n                if l2[i] in dict[l1[i]]:\n                    if l3[i] in dict[l1[i]][l2[i]]:\n                        dict[l1[i]][l2[i]][l3[i]] += 1\n                    else:\n                        dict[l1[i]][l2[i]][l3[i]] = 1\n                else:\n                    dict[l1[i]][l2[i]] = {}\n                    dict[l1[i]][l2[i]][l3[i]] = 1\n            else:\n                dict[l1[i]] = {}\n                dict[l1[i]][l2[i]] = {}\n                dict[l1[i]][l2[i]][l3[i]] = 1\n    return dict\n",
        "num_ids": 256
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    \n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n        \n    for i in range(len(l2)):\n        d2[l2[i]] = l3[i]\n        \n    for i in range(len(l3)):\n        d3[l3[i]] = l1[i]\n        \n    return d1, d2, d3\n",
        "num_ids": 126
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    for i in range(len(l1)):\n        new_dict[l1[i]] = l2[i]\n        new_dict[l3[i]] = l2[i]\n    return new_dict\n",
        "num_ids": 62
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    n = int(n)\n    if n % 2 == 0:\n        return get_max_sum(n//2)\n    if n % 3 == 0:\n        return get_max_sum(n//3)\n    if n % 4 == 0:\n        return get_max_sum(n//4)\n    if n % 5 == 0:\n        return get_max_sum(n//5)\n    return n\n",
        "num_ids": 104
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # dynamic programming\n    if n == 0:\n        return 0\n    if n < 5:\n        return n\n    if n < 10:\n        return (n + 1) * (n + 2) // 2\n    \n    return max(get_max_sum (n//2), get_max_sum (n//3), get_max_sum (n//4), get_max_sum (n//5), n)\n",
        "num_ids": 101
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def check(n):\n        if n == 0:\n            return n\n        else:\n            return max(check(n/2), check(n/3), check(n/4), check(n/5)) + n\n    print(check(n))\n",
        "num_ids": 63
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 9\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n",
        "num_ids": 108
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    return max(get_max_sum(n / 2), get_max_sum(n / 3), get_max_sum(n / 4), get_max_sum(n / 5)) + n\n",
        "num_ids": 115
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base Case\n    if n <= 5:\n        return n\n    \n    # Recursive Call\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n    \n    ",
        "num_ids": 76
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 0:\n            return 0\n        else:\n            return max(f(n//2), f(n//3), f(n//4), f(n//5)) + n\n    return f(n)\n",
        "num_ids": 62
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = -math.inf\n    for num in range(1,n+1):\n        max_sum = max(max_sum, (get_max_sum_recursive(num//2) + get_max_sum_recursive(num//3) + get_max_sum_recursive(num//4) + get_max_sum_recursive(num//5)), num)\n    return max_sum\n",
        "num_ids": 101
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(n):\n        if i*2 <= n and i*3 <= n and i*4 <= n and i*5 <= n:\n            max_sum = max(max_sum, i*(i+1)//2 + i*(i+2)//3 + i*(i+3)//4 + i*(i+4)//5)\n        else:\n            max_sum = max(max_sum, i)\n    return max_sum\n",
        "num_ids": 121
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if(n == 0):\n        return 0\n    if(n == 1):\n        return 1\n    if(n == 2):\n        return 2\n    if(n == 3):\n        return 4\n    if(n == 4):\n        return 8\n    return max( get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 112
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize the list with largest length to 0\n    max_len = 0\n    # loop to check every element in list\n    for i in input_list:\n        if len(i) >= max_len:\n            max_len = len(i)\n    # initialize the empty list and return it\n    output_list = []\n    for i in input_list:\n        if len(i) == max_len:\n            output_list.append(i)\n    # return the list\n    return output_list\n",
        "num_ids": 121
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    result = -1\n    \n    for item in input_list:\n        if max_length < len(item):\n            max_length = len(item)\n            result = item\n    \n    return result\n",
        "num_ids": 59
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n",
        "num_ids": 60
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_item = item\n",
        "num_ids": 63
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    x = []\n    if len(input_list) > 0:\n        for item in input_list:\n            if len(x) == 0:\n                x.append(item)\n                continue\n            if len(item) > len(x[0]):\n                x = [item]\n            elif len(item) == len(x[0]):\n                x.append(item)\n    return x\n",
        "num_ids": 99
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for index in range(1, len(input_list)):\n        if len(input_list[index]) > max_len:\n            max_len = len(input_list[index])\n            max_list = input_list[index]\n",
        "num_ids": 86
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = max(len(l) for l in input_list)\n",
        "num_ids": 21
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n",
        "num_ids": 59
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = max(len(x) for x in input_list)\n    return [x for x in input_list if len(x) == max_len]\n",
        "num_ids": 42
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n",
        "num_ids": 15
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # return not any(element for element in test_tup)\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    temp = set(test_tup)\n    if len(temp) == len(test_tup):\n        return False\n    else:\n        return True\n",
        "num_ids": 40
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Set/Dictionary approach\n    dict_tup = set(test_tup)\n    if len(dict_tup) == len(test_tup):\n        return False\n    else:\n        return True\n    # # List/Tuple approach\n    # if len(test_tup) == len(set(test_tup)):\n    #     return False\n    # else:\n    #     return True\n",
        "num_ids": 102
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = True\n    for i in range(len(test_tup)):\n        if test_tup[i] in test_tup[i+1:]:\n            distinct = False\n            break\n    return distinct\n",
        "num_ids": 57
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = list(test_tup)\n    for i in range(len(test_tup)):\n        if test_tup.count(test_tup[i]) > 1:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = []\n    for i in str1:\n        if i not in chars:\n            chars.append(i)\n        else:\n            continue\n    return chars[0]\n",
        "num_ids": 47
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # METHOD 1: Using a dictionary\n    if not str1 or not str1.strip():\n        return None\n    d = {}\n    for s in str1:\n        if s in d:\n            d[s] = d[s] + 1\n        else:\n            d[s] = 1\n    for s in str1:\n        if d[s] == 1:\n            return s\n    return None\n",
        "num_ids": 100
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #create a set and add the each character in str1 into it, if there is a repetition of character the repetition should occur only once\n    #we don't want to loop through the whole string and find the first occurrence of a character, we are just looking for the first one\n    #and its the first one we are looking for\n    char_set = set(str1)\n    #find out the first repetition of a character\n    for each_char in char_set:\n        if str1.count(each_char) == 1:\n            return each_char\n    return None\n    \n",
        "num_ids": 134
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    n = len(str1)\n    count = 0\n    i = 0\n    while (count<n):\n        if str1[count] in str1[count+1:n]:\n            count = count + 1\n        else:\n            return count\n    return -1\n",
        "num_ids": 67
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # using hashmap\n    hashmap = {}\n    for each_char in str1:\n        if each_char in hashmap:\n            hashmap[each_char] += 1\n        else:\n            hashmap[each_char] = 1\n    \n    for each_char, count in hashmap.items():\n        if count == 1:\n            return each_char\n",
        "num_ids": 89
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for char in str1:\n        if char in dict1:\n            dict1[char] += 1\n        else:\n            dict1[char] = 1\n    \n    for i in range(len(str1)):\n        if dict1[str1[i]] == 1:\n            return str1[i]\n",
        "num_ids": 83
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    print(list(set(str1)))\n",
        "num_ids": 13
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    string = list(str1)\n    if len(string) == 0:\n        return None\n    else:\n        for i in range(len(string)):\n            if (string[i] in string[i+1:]) == False:\n                return string[i]\n        return None\n",
        "num_ids": 71
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n",
        "num_ids": 79
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n        \n        \n        \n        \n",
        "num_ids": 34
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\nprint(check_char('a'))\nprint(check_char('b'))\nprint(check_char('abc'))\nprint(check_char('aaaa'))\n",
        "num_ids": 56
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith(string[0]) and string.endswith(string[-1]):\n        print(\"True\")\n    else:\n        print(\"False\")\n    return True\n    # Write a python program to find whether a given character is present at any particular index of a string or not.\ndef check_char_index(string, char):\n    '''\n    Write a function that checks whether a given character is present at any particular index of a string or not.\n    '''\n    if char in string:\n        print(\"True\")\n    else:\n        print(\"False\")\n    return True\n    # Write a python program to check whether all words of a given sentence are present at any particular index or not.\ndef check_char_index_sentence(sentence):\n    '''\n    Write a function that checks whether all words of a given sentence are present at any particular index or not.\n    '''\n    for i in sentence.split(\" \"):\n        if i not in sentence:\n            print(\"False\")\n        else:\n            print(\"True\")\n    return True\n    # Write a python program to check whether the first and the last character of a string are same or not.\ndef check_char_last_first(string):\n    '''\n    Write a function that checks whether the first and the last character of a string are same or not.\n    '''\n    if string[0] == string[-1]:\n        print(\"True\")\n    else:\n        print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any digit or not.\ndef check_digit(string):\n    '''\n    Write a function to check whether the string contains any digit or not.\n    '''\n    for i in string:\n        if i.isdigit():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any alphabets or not.\ndef check_alpha(string):\n    '''\n    Write a function to check whether the string contains any alphabets or not.\n    '''\n    for i in string:\n        if i.isalpha():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any special character or not.\ndef check_special(string):\n    '''\n    Write a function to check whether the string contains any special character or not.\n    '''\n    for i in string:\n        if not i.isalnum():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any alphanumeric characters or not.\ndef check_alphanumeric(string):\n    '''\n    Write a function to check whether the string contains any alphanumeric characters or not.\n    '''\n    for i in string:\n        if i.isalnum():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any lowercase or upper case letters or not.\ndef check_lower(string):\n    '''\n    Write a function to check whether the string contains any lowercase or upper case letters or not.\n    '''\n    for i in string:\n        if i.islower():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any uppercase or lower case letters or not.\ndef check_upper(string):\n    '''\n    Write a function to check whether the string contains any uppercase or lower case letters or not.\n    '''\n    for i in string:\n        if i.isupper():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any white space or not.\ndef check_space(string):\n    '''\n    Write a function to check whether the string contains any white space or not.\n    '''\n    for i in string:\n        if i == \" \":\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any alpha numeric characters or not.\ndef check_alpha_num(string):\n    '''\n    Write a function to check whether the string contains any alpha numeric characters or not.\n    '''\n    for i in string:\n        if not i.isalnum():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any white space or not.\ndef check_space_word(string):\n    '''\n    Write a function to check whether the string contains any white space or not.\n    '''\n    for i in string.split(\" \"):\n        if i == \" \":\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any alphabetical characters or not.\ndef check_alpha_lower(string):\n    '''\n    Write a function to check whether the string contains any alphabetical characters or not.\n    '''\n    for i in string:\n        if not i.isalpha():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any numeric characters or not.\ndef check_numeric(string):\n    '''\n    Write a function to check whether the string contains any numeric characters or not.\n    '''\n    for i in string:\n        if not i.isdigit():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any alphabetical characters or not.\ndef check_alpha_upper(string):\n    '''\n    Write a function to check whether the string contains any alphabetical characters or not.\n    '''\n    for i in string:\n        if not i.isalpha():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any numeric characters or not.\ndef check_numeric_word(string):\n    '''\n    Write a function to check whether the string contains any numeric characters or not.\n    '''\n    for i in string.split(\" \"):\n        if not i.isdigit():\n            print(\"True\")\n        else:\n            print(\"False\")\n    return True\n    # Write a python program to check whether the string contains any numeric characters or not.\ndef check_match(string):\n    '''\n    Write a function to check whether the string matches the regular expression or not.\n    '''\n    if re.match(regex, string) is not None:\n        print(\"True\")\n    else:\n        print(\"False\")\n    return True\n    # Write a python program to check whether the string matches the regular expression or not.\ndef check_match_group(string):\n    '''\n    Write a function to check whether the string matches the regular expression or not.\n    '''\n    if re.search(regex, string) is not None:\n        print(\"True\")\n    else:\n        print(\"False\")\n    return True\n    # Write a python program to check whether the string matches the regular expression or not.\ndef check_contain_substring(string):\n    '''\n    Write a function to check whether the string matches the regular expression or not.\n    '''\n    if re.search(regex, string) is not None:\n        print(\"True\")\n    else:\n        print(\"False\")\n    return True\n    # Write a python program to check whether the string matches the regular expression or not.\ndef check_contain_substring_group(string):\n    '''\n    Write a function to check whether the string matches the regular expression or not.\n    '''\n    if re.search(regex, string) is not None:\n        print(\"True\")\n    else:\n        print(\"False\")\n    return True\n    # Write a python program to check whether the string matches the regular expression or not.\ndef check_substring(string):\n    '''\n    Write a function to check whether the string matches the regular expression or not.\n    '''\n    if re.search(regex, string) is not None:\n        print(\"True\")\n",
        "num_ids": 24
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[-1]): \n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]==string[-1] and (re.search(regex, string)):\n        return True\n    else:\n        return False\ndef check_str(string):\n    '''\n    Write a function to check whether the given string contains only digits or not.\n    '''\n    if re.search(r'^[0-9]*$', string):\n        return True\n    else:\n        return False\ndef check_str_upper(string):\n    '''\n    Write a function to check whether the given string contains only upper case letters or not.\n    '''\n    if re.search(r'[A-Z]', string):\n        return True\n    else:\n        return False\ndef check_str_lower(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters or not.\n    '''\n    if re.search(r'[a-z]', string):\n        return True\n    else:\n        return False\ndef check_str_space(string):\n    '''\n    Write a function to check whether the given string contains only spaces or not.\n    '''\n    if re.search(r'\\s', string):\n        return True\n    else:\n        return False\ndef check_char_upper(string):\n    '''\n    Write a function to check whether the given string contains only upper case letters or not.\n    '''\n    if re.search(r'[A-Z]', string):\n        return True\n    else:\n        return False\ndef check_char_lower(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters or not.\n    '''\n    if re.search(r'[a-z]', string):\n        return True\n    else:\n        return False\ndef check_char_space(string):\n    '''\n    Write a function to check whether the given string contains only spaces or not.\n    '''\n    if re.search(r'\\s', string):\n        return True\n    else:\n        return False\ndef check_str_lower_space(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters and spaces or not.\n    '''\n    if re.search(r'[a-z ]', string):\n        return True\n    else:\n        return False\ndef check_str_upper_space(string):\n    '''\n    Write a function to check whether the given string contains only upper case letters and spaces or not.\n    '''\n    if re.search(r'[A-Z ]', string):\n        return True\n    else:\n        return False\ndef check_str_digit(string):\n    '''\n    Write a function to check whether the given string contains only digits or not.\n    '''\n    if re.search(r'^[0-9]*$', string):\n        return True\n    else:\n        return False\ndef check_str_letter(string):\n    '''\n    Write a function to check whether the given string contains only letters or not.\n    '''\n    if re.search(r'[a-zA-Z]', string):\n        return True\n    else:\n        return False\ndef check_str_upper_letter(string):\n    '''\n    Write a function to check whether the given string contains only upper case letters or not.\n    '''\n    if re.search(r'[A-Z][a-z]', string):\n        return True\n    else:\n        return False\ndef check_str_lower_letter(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters or not.\n    '''\n    if re.search(r'[a-z][a-z]', string):\n        return True\n    else:\n        return False\ndef check_str_space_upper(string):\n    '''\n    Write a function to check whether the given string contains only upper case letters and spaces or not.\n    '''\n    if re.search(r'[A-Z ]', string):\n        return True\n    else:\n        return False\ndef check_str_space_lower(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters and spaces or not.\n    '''\n    if re.search(r'[a-z ]', string):\n        return True\n    else:\n        return False\ndef check_str_space_upper_lower(string):\n    '''\n    Write a function to check whether the given string contains only upper case letters, lower case letters and spaces or not.\n    '''\n    if re.search(r'[A-Z ]', string):\n        return True\n    if re.search(r'[a-z ]', string):\n        return True\n    else:\n        return False\ndef check_str_space_lower_upper(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters, upper case letters and spaces or not.\n    '''\n    if re.search(r'[a-z ]', string):\n        return True\n    if re.search(r'[A-Z ]', string):\n        return True\n    else:\n        return False\ndef check_str_space_upper_letter(string):\n    '''\n    Write a function to check whether the given string contains only upper case letters and spaces or not.\n    '''\n    if re.search(r'[A-Z ]', string):\n        return True\n    else:\n        return False\ndef check_str_space_lower_letter(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters and spaces or not.\n    '''\n    if re.search(r'[a-z ]', string):\n        return True\n    else:\n        return False\ndef check_str_space_upper_lower_letter(string):\n    '''\n    Write a function to check whether the given string contains only upper case letters, lower case letters and spaces or not.\n    '''\n    if re.search(r'[A-Z ]', string):\n        return True\n    if re.search(r'[a-z ]', string):\n        return True\n    else:\n        return False\ndef check_str_space_lower_upper_letter(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters, upper case letters and spaces or not.\n    '''\n    if re.search(r'[a-z ]', string):\n        return True\n    if re.search(r'[A-Z ]', string):\n        return True\n    else:\n        return False\ndef check_str_space_lower_upper_letter_digit(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters, upper case letters and spaces or not.\n    '''\n    if re.search(r'[a-z ]', string):\n        return True\n    if re.search(r'[A-Z ]', string):\n        return True\n    if re.search(r'[0-9]', string):\n        return True\n    else:\n        return False\ndef check_str_space_lower_upper_letter_digit_letter(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters, upper case letters and spaces or not.\n    '''\n    if re.search(r'[a-z ]', string):\n        return True\n    if re.search(r'[A-Z ]', string):\n        return True\n    if re.search(r'[0-9]', string):\n        return True\n    if re.search(r'[a-z ]', string):\n        return True\n    else:\n        return False\ndef check_str_space_lower_upper_letter_digit_letter_digit(string):\n    '''\n    Write a function to check whether the given string contains only lower case letters, upper case letters and spaces or not.\n    '''\n    if re.search(r'[a-z ]', string):\n        return True\n    if re.search(r'[A-Z ]', string):\n        return True\n    if re.search(r'[0-9]', string):\n        return True\n    if re.search(r'[a-z ]'",
        "num_ids": 79
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[-1]) and (re.search(regex, string)): \n        return True\n    else: \n        return False\n        \nstring = input(\"Please enter a string: \")\nprint(check_char(string)",
        "num_ids": 64
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n    \nprint(check_char(\"Hello World!\"))\n",
        "num_ids": 27
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a, b, c]\n    num_list.sort()\n    num_list = num_list[1:]\n    if len(num_list) % 2 == 0:\n        median = (num_list[int((len(num_list)) / 2) - 1] + num_list[int((len(num_list)) / 2)]) / 2\n    else:\n        median = num_list[int((len(num_list)) / 2)]\n    return median\n",
        "num_ids": 120
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif a<c:\n            return c\n        else:\n            return b\n    elif b>a:\n        if b>c:\n            return b\n        elif b<c:\n            return c\n        else:\n            return a\n    else:\n        if b<c:\n            return c\n        elif b>c:\n            return b\n        else:\n            return a\n            \n            \n            \n            \n",
        "num_ids": 122
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    s = sorted([a,b,c])\n    if s[0] == a:\n        if s[1] == b:\n            return (s[2]+s[0])/2\n        else:\n            return s[2]\n    if s[0] == b:\n        if s[1] == c:\n            return (s[2]+s[0])/2\n        else:\n            return s[1]\n    if s[0] == c:\n        if s[1] == a:\n            return (s[2]+s[0])/2\n        else:\n            return s[2]\n    if s[1] == a:\n        if s[2] == b:\n            return (s[0]+s[1])/2\n        else:\n            return s[2]\n    if s[1] == b:\n        if s[2] == c:\n            return (s[0]+s[1])/2\n        else:\n            return s[2]\n    if s[1] == c:\n        if s[2] == a:\n            return (s[0]+s[1])/2\n        else:\n            return s[0]\n    if s[2] == a:\n        if s[1] == b:\n            return (s[0]+s[1])/2\n        else:\n            return s[2]\n    if s[2] == b:\n        if s[1] == c:\n            return (s[0]+s[1])/2\n        else:\n            return s[1]\n    if s[2] == c:\n        if s[1] == a:\n            return (s[0]+s[1])/2\n        else:\n            return s[0]\n",
        "num_ids": 419
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num1=max(a,b,c)\n    num2=min(a,b,c)\n    num3=abs(a-b)\n    num4=abs(b-c)\n    num5=abs(c-a)\n    num6=a+b+c\n    num7=num6/2\n    if num1 == a and num2 == b and num3 == c:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == b and num3 < c:\n        print(\"The median of these numbers is:\",num2)\n    elif num1 == a and num2 == b and num3 > c:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == b and num3 < c:\n        print(\"The median of these numbers is:\",num6)\n    elif num1 == a and num2 == c and num3 == b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == c and num3 < b:\n        print(\"The median of these numbers is:\",num6)\n    elif num1 == a and num2 == c and num3 > b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == b and num2 == a and num3 == c:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == b and num2 == a and num3 < c:\n        print(\"The median of these numbers is:\",num4)\n    elif num1 == b and num2 == a and num3 > c:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == b and num2 == a and num3 < c:\n        print(\"The median of these numbers is:\",num5)\n    elif num1 == b and num2 == c and num3 == a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == b and num2 == c and num3 < a:\n        print(\"The median of these numbers is:\",num5)\n    elif num1 == b and num2 == c and num3 > a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == a and num3 == b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == a and num3 < b:\n        print(\"The median of these numbers is:\",num6)\n    elif num1 == c and num2 == a and num3 > b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == a and num3 < b:\n        print(\"The median of these numbers is:\",num4)\n    elif num1 == c and num2 == b and num3 == a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == b and num3 < a:\n        print(\"The median of these numbers is:\",num5)\n    elif num1 == c and num2 == b and num3 > a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == c and num3 == a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == c and num3 < a:\n        print(\"The median of these numbers is:\",num6)\n    elif num1 == c and num2 == c and num3 > a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == c and num3 == b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == c and num3 < b:\n        print(\"The median of these numbers is:\",num4)\n    elif num1 == a and num2 == c and num3 > b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == c and num3 < b:\n        print(\"The median of these numbers is:\",num5)\n    elif num1 == a and num2 == b and num3 == c:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == b and num3 < c:\n        print(\"The median of these numbers is:\",num6)\n    elif num1 == a and num2 == b and num3 > c:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == b and num3 < c:\n        print(\"The median of these numbers is:\",num5)\n    elif num1 == a and num2 == b and num3 == c:\n        print(\"The median of these numbers is:\",num4)\n    elif num1 == a and num2 == c and num3 == b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == c and num3 < b:\n        print(\"The median of these numbers is:\",num6)\n    elif num1 == a and num2 == c and num3 > b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == a and num2 == c and num3 < b:\n        print(\"The median of these numbers is:\",num5)\n    elif num1 == b and num2 == a and num3 == c:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == b and num2 == a and num3 < c:\n        print(\"The median of these numbers is:\",num4)\n    elif num1 == b and num2 == a and num3 > c:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == b and num2 == a and num3 < c:\n        print(\"The median of these numbers is:\",num5)\n    elif num1 == b and num2 == c and num3 == a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == b and num2 == c and num3 < a:\n        print(\"The median of these numbers is:\",num6)\n    elif num1 == b and num2 == c and num3 > a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == a and num3 == b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == a and num3 < b:\n        print(\"The median of these numbers is:\",num4)\n    elif num1 == c and num2 == a and num3 > b:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == a and num3 < b:\n        print(\"The median of these numbers is:\",num5)\n    elif num1 == c and num2 == b and num3 == a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == b and num3 < a:\n        print(\"The median of these numbers is:\",num6)\n    elif num1 == c and num2 == b and num3 > a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == b and num3 < a:\n        print(\"The median of these numbers is:\",num5)\n    elif num1 == c and num2 == b and num3 == a:\n        print(\"The median of these numbers is:\",num4)\n    elif num1 == c and num2 == c and num3 == a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == c and num3 < a:\n        print(\"The median of these numbers is:\",num6)\n    elif num1 == c and num2 == c and num3 > a:\n        print(\"The median of these numbers is:\",num7)\n    elif num1 == c and num2 == c and num3 < a:\n        print(\"The median of these numbers is:\",num5",
        "num_ids": 2015
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and b<c:\n        if a<c:\n            return b\n        else:\n            return c\n    elif a>b and b>c:\n        if a>c:\n            return a\n        else:\n            return c\n    else:\n        if a>b and a>c:\n            return a\n        else:\n            return b\n",
        "num_ids": 90
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b<c:\n        if a<c:\n            return c\n        else:\n            return a\n    elif a<b:\n        if a<c:\n            return c\n        else:\n            return a\n    elif b<c:\n        if b<a:\n            return a\n        else:\n            return b\n    else:\n        if b<a:\n            return a\n        else:\n            return b\n",
        "num_ids": 107
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a,b,c])\n    return sorted_numbers[1]\n",
        "num_ids": 28
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted([a,b,c])[(len(sorted([a,b,c])) - 1)//2]\n",
        "num_ids": 33
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sort_a=sorted(a)\n    sort_b=sorted(b)\n    sort_c=sorted(c)\n    if sort_a==sort_b==sort_c:\n        return (sort_a[1] + sort_b[1] + sort_c[1]) / 3\n    elif sort_a==sort_b:\n        return (sort_a[1] + sort_b[1]) / 2\n    elif sort_a==sort_c:\n        return (sort_a[1] + sort_c[1]) / 2\n    elif sort_b==sort_a:\n        return (sort_b[1] + sort_a[1]) / 2\n    elif sort_b==sort_c:\n        return (sort_b[1] + sort_c[1]) / 2\n    elif sort_c==sort_a:\n        return (sort_c[1] + sort_a[1]) / 2\n    elif sort_c==sort_b:\n        return (sort_c[1] + sort_b[1]) / 2\n    else:\n        return 'Not Defined'\n",
        "num_ids": 274
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for n in nums:\n        total += digit_sum(n)\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    def sum_of_digits_helper(num):\n        '''\n        Returns the sum of digits in num.\n        '''\n        if num == 0:\n            return 0\n        else:\n            return num % 10 + sum_of_digits_helper(num // 10)\n    \n    return sum(map(sum_of_digits_helper, nums))\n",
        "num_ids": 60
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    lst = list(map(int, nums))\n    return sum([num % 10 for num in lst])\n",
        "num_ids": 30
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not isinstance(nums,list):\n        raise TypeError('Please enter list')\n    if not nums:\n        raise TypeError('Please enter non empty list')\n    if len(nums)==1:\n        return nums[0]\n    return sum(int(x) for x in str(nums[0])) + sum_of_digits(nums[1:])\n",
        "num_ids": 96
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum_of_digits_recursive(num)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_digits(num)\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, nums))\n",
        "num_ids": 14
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    ans = 0\n    for i in nums:\n        ans += int(i)\n    return ans\n",
        "num_ids": 27
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # s = 0\n    # for num in nums:\n    #     s += int(num)\n    # return s\n",
        "num_ids": 32
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(0, len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup\n",
        "num_ids": 61
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(operator.xor, test_tup1, test_tup2))\n",
        "num_ids": 26
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    (x, y) = test_tup1\n    (z, w) = test_tup2\n    return x ^ z ^ w\n",
        "num_ids": 36
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = 0\n    for i in range(len(test_tup1)):\n        x = x ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        x = x ^ test_tup2[i]\n    return x\n",
        "num_ids": 71
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([int(a) ^ int(b) for a,b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 36
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = int(test_tup1[0]) ^ int(test_tup2[0])\n    y = int(test_tup1[1]) ^ int(test_tup2[1])\n    return (x, y)\n",
        "num_ids": 60
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #print(test_tup1, test_tup2)\n    x = test_tup1[0]\n    y = test_tup2[0]\n    #print(x, y)\n    res = x ^ y\n    #print(res)\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    res = {}\n    for word in test_list:\n        if word not in res:\n            res[word] = 1\n        else:\n            res[word] += 1\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n    # freq = {}\n    # for item in test_list:\n    #     if item in freq:\n    #         freq[item] += 1\n    #     else:\n    #         freq[item] = 1\n    # return freq\n",
        "num_ids": 113
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    return len(set(tuple(row) for row in test_list))\n",
        "num_ids": 23
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for i in test_list:\n        t = tuple(i)\n        if not test_list.count(t):\n            freq += 1\n    return freq\n",
        "num_ids": 48
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d.keys())\n",
        "num_ids": 52
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 62
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    freq_set = set()\n    for val in test_list:\n        if val in freq_set:\n            freq_set.remove(val)\n        else:\n            freq_set.add(val)\n    return len(freq_set)\n",
        "num_ids": 72
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(map(tuple, test_list))))\n    #print(len(set(tuple(map(tuple, test_list)))))\n",
        "num_ids": 43
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = set(tuple(x) for x in test_list)\n    unique_tuple_count = len(unique_tuple)\n    return unique_tuple_count\n    \n    \n    \n    \n    \ndef extract_unique_tuples(list1):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = set(tuple(x) for x in list1)\n    unique_tuple_count = len(unique_tuple)\n    return unique_tuple_count\n    \n    \n    \n    \n    \n    \ndef extract_unique_tuples_sorted(list1):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    list1.sort()\n    unique_tuple = set(tuple(x) for x in list1)\n    unique_tuple_count = len(unique_tuple)\n    return unique_tuple_count\n    \n    \n    \n    \n    \n    \ndef unique_tuples(list1):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    set_tuple = set(tuple(x) for x in list1)\n    un_tuple_count = len(set_tuple)\n    return un_tuple_count\n    \n    \n    \n    \n    \n    \ndef unique_tuples_sorted(list1):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    list1.sort()\n    set_tuple = set(tuple(x) for x in list1)\n    un_tuple_count = len(set_tuple)\n    return un_tuple_count\n    \n    \n    \n    \n    \n    \ndef search_character_in_string(string, character):\n    '''\n    Write a function to search for a given character in a given string.\n    '''\n    if character in string:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef search_character_in_string_sorted(string, character):\n    '''\n    Write a function to search for a given character in a given string.\n    '''\n    string.sort()\n    if character in string:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef check_list_is_sorted(list1):\n    '''\n    Write a function to check if the list is sorted.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \ndef check_list_is_sorted_sorted(list1):\n    '''\n    Write a function to check if the list is sorted.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef search_list_in_sorted_list(list1, search_value):\n    '''\n    Write a function to search for a given element in a given sorted list.\n    '''\n    if search_value in list1:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef search_list_in_sorted_list_sorted(list1, search_value):\n    '''\n    Write a function to search for a given element in a given sorted list.\n    '''\n    list1.sort()\n    if search_value in list1:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse the given list.\n    '''\n    list1.reverse()\n    return list1\n    \n    \n    \n    \n    \ndef reverse_list_sorted(list1):\n    '''\n    Write a function to reverse the given list.\n    '''\n    list1.sort(reverse=True)\n    return list1\n    \n    \n    \n    \n    \n    \ndef count_occurences(list1, search_value):\n    '''\n    Write a function to count the occurrence of a given value in the list.\n    '''\n    occ_count = 0\n    for i in list1:\n        if i == search_value:\n            occ_count += 1\n    return occ_count\n    \n    \n    \n    \n    \n    \ndef count_occurences_sorted(list1, search_value):\n    '''\n    Write a function to count the occurrence of a given value in the list.\n    '''\n    occ_count = 0\n    for i in range(len(list1)):\n        if list1[i] == search_value:\n            occ_count += 1\n    return occ_count\n    \n    \n    \n    \n    \n    \ndef binary_search_recursive(list1, start, end, search_value):\n    '''\n    Write a function to search for a given element in a given sorted list using Binary Search.\n    '''\n    if start > end:\n        return None\n    mid = start + (end-start)//2\n    if list1[mid] == search_value:\n        return mid\n    elif search_value < list1[mid]:\n        return binary_search_recursive(list1, start, mid-1, search_value)\n    else:\n        return binary_search_recursive(list1, mid+1, end, search_value)\n    \n    \n    \n    \n    \n    \ndef binary_search_recursive_sorted(list1, start, end, search_value):\n    '''\n    Write a function to search for a given element in a given sorted list using Binary Search.\n    '''\n    if start > end:\n        return None\n    mid = start + (end-start)//2\n    if search_value == list1[mid]:\n        return mid\n    elif search_value < list1[mid]:\n        return binary_search_recursive_sorted(list1, start, mid-1, search_value)\n    else:\n        return binary_search_recursive_sorted(list1, mid+1, end, search_value)\n    \n    \n    \n    \n    \n    \ndef binary_search_iterative(list1, search_value):\n    '''\n    Write a function to search for a given element in a given sorted list using Binary Search.\n    '''\n    lst_len = len(list1)\n    if lst_len == 0:\n        return None\n    if lst_len == 1:\n        if search_value == list1[0]:\n            return 0\n        else:\n            return None\n    if list1[0] == search_value:\n        return 0\n    if search_value < list1[0]:\n        return binary_search_iterative(list1[1:], search_value)\n    else:\n        return binary_search_iterative(list1[:len(list1)-1], search_value)\n    \n    \n    \n    \n    \n    \ndef binary_search_iterative_sorted(list1, search_value):\n    '''\n    Write a function to search for a given element in a given sorted list using Binary Search.\n    '''\n    lst_len = len(list1)\n    if lst_len == 0:\n        return None\n    if lst_len == 1:\n        if search_value == list1[0]:\n            return 0\n        else:\n            return None\n    if list1[0] == search_value:\n        return 0\n    if search_value < list1[0]:\n        return binary_search_iterative_sorted(list1[1:], search_value)\n    else:\n        return binary_search_iterative_sorted(list1[:len(list1)-1], search_value)\n    \n    \n    \n    \n    \n    \ndef swap_elements(list1, first_element, second_element):\n    '''\n    Write a function to swap two given elements in a list.\n    '''\n    list1[first_element], list1[second",
        "num_ids": 14
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n    # your code here\n    \n    num = 0\n    for i in test_list:\n        if i not in test_list:\n            num += 1\n    return num\n",
        "num_ids": 46
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_list = []\n    test_list2 = []\n",
        "num_ids": 17
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(i1 + i2 for i1, i2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append((lst1[i] + lst2[i]))\n    return tuple(lst3)\n    \n",
        "num_ids": 86
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = tuple()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i], )\n    return new_tup\n",
        "num_ids": 60
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = (1,2,3,4,5)\n    test_tup2 = (4,5,6,7,8)\n    print(\"\\nOutput: \")\n    print(add_nested_tuples(test_tup1, test_tup2))\n",
        "num_ids": 74
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(test_list)\n",
        "num_ids": 59
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = []\n    for i in range(0,len(test_tup1)):\n        test_tup3.append(test_tup1[i]+test_tup2[i])\n    return test_tup3\n",
        "num_ids": 63
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return(tuple(sum((i,j),()) for i,j in zip(test_tup1,test_tup2)))\n",
        "num_ids": 35
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i, j in zip(test_tup1, test_tup2):\n        yield i+j\n",
        "num_ids": 30
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = (1,2,3,4,5,6,7,8,9)\n    test_tup2 = ((1,2,3,4,5,6,7),(8,9,10,11,12,13,14))\n",
        "num_ids": 67
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a < b):\n        print(\"Minimum is \", a)\n    else:\n        print(\"Minimum is \", b)\n",
        "num_ids": 32
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    return b\nprint(minimum(2,3))\n",
        "num_ids": 27
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    return a if a > b else b\n",
        "num_ids": 31
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a > b:\n        print(b)\n    else:\n        print(a)\n",
        "num_ids": 27
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n",
        "num_ids": 21
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1 \nprint(check_tuplex((3, 4, 5),(1, 2, 3, 4)))\n",
        "num_ids": 36
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    return any(i in tuplex for i in tuple1)\n    \n    \n    \ndef check_tuplex_not_in(tuplex,tuple1):\n    '''\n    Write a function to check whether an element does not exist within a tuple.\n    '''\n    \n    return all(i not in tuplex for i in tuple1)\n    \n    \n    \ndef check_list(list1,list2):\n    '''\n    Write a function to check whether all items in the list exist in another list.\n    '''\n    \n    return all(i in list2 for i in list1)\n    \n    \n    \ndef check_list_not_in(list1,list2):\n    '''\n    Write a function to check whether all items in the list are not in another list.\n    '''\n    \n    return all(i not in list2 for i in list1)\n    \n    \n    \ndef check_list_overlap(list1,list2):\n    '''\n    Write a function to check whether there are items that exist in both lists.\n    '''\n    \n    return any(i in list1 and i in list2 for i in list1)\n    \n    \n    \ndef check_list_duplicates(list1):\n    '''\n    Write a function to check whether any items are duplicates in the list.\n    '''\n    \n    return any(i in list1 for i in list1)\n    \n    \n    \ndef check_list_in_list(list1,list2):\n    '''\n    Write a function to check whether all items in list1 are also in list2.\n    '''\n    \n    return all(i in list1 for i in list2)\n    \n    \n    \ndef check_list_not_in_list(list1,list2):\n    '''\n    Write a function to check whether all items in list1 are not in list2.\n    '''\n    \n    return all(i not in list1 for i in list2)\n    \n    \n    \ndef check_list_contains(list1,list2):\n    '''\n    Write a function to check whether a list contains another list.\n    '''\n    \n    return any(i in list2 for i in list1)\n    \n    \n    \ndef check_list_not_contains(list1,list2):\n    '''\n    Write a function to check whether a list does not contain another list.\n    '''\n    \n    return all(i not in list2 for i in list1)\n    \n    \n    \ndef check_list_equals(list1,list2):\n    '''\n    Write a function to check whether the lists are identical.\n    '''\n    \n    return list1==list2\n    \n    \n    \ndef check_list_contains_unique(list1,list2):\n    '''\n    Write a function to check whether list1 contains unique elements in list2.\n    '''\n    \n    return list(set(list1)&set(list2))==set()\n    \n    \n    \ndef check_list_no_elements(list1,list2):\n    '''\n    Write a function to check whether the lists are identical.\n    '''\n    \n    return len(list1)==len(list2)==0\n    \n    \n    \ndef check_list_length_is_even(list1):\n    '''\n    Write a function to check whether the list is of even length.\n    '''\n    \n    return len(list1)%2==0\n    \n    \n    \ndef check_list_length_is_odd(list1):\n    '''\n    Write a function to check whether the list is of odd length.\n    '''\n    \n    return len(list1)%2==1\n    \n    \n    \ndef check_list_length_is_zero_or_one(list1):\n    '''\n    Write a function to check whether the list is of length 0 or 1.\n    '''\n    \n    return len(list1)==0 or len(list1)==1\n    \n    \n    \ndef check_list_contains_any(list1,list2):\n    '''\n    Write a function to check whether any element in list1 is also in list2.\n    '''\n    \n    return any(i in list1 for i in list2)\n    \n    \n    \ndef check_list_no_elements_any(list1,list2):\n    '''\n    Write a function to check whether the lists are identical.\n    '''\n    \n    return len(list1)==0 or len(list2)==0\n    \n    \n    \ndef check_list_length_is_in_between(list1,min_length,max_length):\n    '''\n    Write a function to check whether the list is of length between min_length and max_length.\n    '''\n    \n    return min_length<=len(list1)<=max_length\n    \n    \n    \ndef check_list_positive_length(list1):\n    '''\n    Write a function to check whether the list is of length greater than 0.\n    '''\n    \n    return len(list1)>0\n    \n    \n    \ndef check_list_negative_length(list1):\n    '''\n    Write a function to check whether the list is of length less than 0.\n    '''\n    \n    return len(list1)<0\n    \n    \n    \ndef check_list_all_positive(list1):\n    '''\n    Write a function to check whether all elements in list are positive.\n    '''\n    \n    return all(i>=0 for i in list1)\n    \n    \n    \ndef check_list_all_negative(list1):\n    '''\n    Write a function to check whether all elements in list are negative.\n    '''\n    \n    return all(i<=0 for i in list1)\n    \n    \n    \ndef check_list_all_even(list1):\n    '''\n    Write a function to check whether all elements in list are even.\n    '''\n    \n    return all(i%2==0 for i in list1)\n    \n    \n    \ndef check_list_all_odd(list1):\n    '''\n    Write a function to check whether all elements in list are odd.\n    '''\n    \n    return all(i%2==1 for i in list1)\n    \n    \n    \ndef check_list_all_same(list1):\n    '''\n    Write a function to check whether all elements in list are same.\n    '''\n    \n    return all(i==list1[0] for i in list1)\n    \n    \n    \ndef check_list_all_distinct(list1):\n    '''\n    Write a function to check whether all elements in list are distinct.\n    '''\n    \n    return all(i not in list1 for i in list1)\n    \n    \n    \ndef check_list_greater_than_length(list1,length):\n    '''\n    Write a function to check whether list is of length greater than length.\n    '''\n    \n    return len(list1)>length\n    \n    \n    \ndef check_list_equal_length(list1,length):\n    '''\n    Write a function to check whether list is of equal length to the specified length.\n    '''\n    \n    return len(list1)==length\n    \n    \n    \ndef check_list_has_all_same_elements(list1):\n    '''\n    Write a function to check whether all elements in list are same.\n    '''\n    \n    return all(i==list1[0] for i in list1)\n    \n    \n    \ndef check_list_has_no_more_than_n(list1,n):\n    '''\n    Write a function to check whether list has at most n items.\n    '''\n    \n    return n<=len(list1)\n    \n    \n    \ndef check_list_has_no_more_than_m_duplicates(list1,m):\n    '''\n    Write a function to check whether list has at most m duplicates.\n    '''\n    \n    return len(set(list1))<=m\n    \n    \n    \ndef check_list_has_no_more_than_m_same_elements(list",
        "num_ids": 44
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(i in tuplex for i in tuple1)\n",
        "num_ids": 18
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple1(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple2(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple3(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple4(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple5(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple6(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple7(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple8(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple9(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple10(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple11(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple12(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple13(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple14(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple15(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple16(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple17(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple18(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple19(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple20(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple21(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple22(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple23(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple24(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple25(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple26(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple27(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple28(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple29(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_tuple30(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        print(\"True\")\n    else:\n        print(\"False\"",
        "num_ids": 26
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count = 0\n    for i in tuplex:\n        if i in tuple1:\n            count += 1\n    if count == len(tuplex):\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n        else:\n            return False\n",
        "num_ids": 31
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1\n",
        "num_ids": 11
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    return (x & 1)\n",
        "num_ids": 12
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1: \n        return True\n    return False\n",
        "num_ids": 18
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    Parity = 0\n    while(x!=0):\n        Parity = (Parity + x)%2\n        x = x // 2\n    return Parity\n",
        "num_ids": 42
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 1\n",
        "num_ids": 10
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s = str(x)\n    sum1 = 0\n    for i in s:\n        sum1 += int(i)\n    if sum1 % 2!= 0:\n        print(\"The parity of the number {} is odd.\".format(x))\n    else:\n        print(\"The parity of the number {} is even.\".format(x))\n",
        "num_ids": 83
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    a=x\n    b=0\n    while x>0:\n        b=b+x%10\n        x=x//10\n    if b%2==0:\n        print(b,\"is even\")\n    else:\n        print(b,\"is odd\")\n",
        "num_ids": 66
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    count = 0\n    parity = 0\n",
        "num_ids": 15
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x!=0:\n        x = x & (x-1)\n        parity = 1 - parity\n    print('The parity of a given number is', parity)\n    \n    \ndef check_Palindrome(x):\n    '''\n    Write a python function to check whether a given number is a palindrome or not.\n    '''\n    reverse = 0\n    while x!=0:\n        reminder = x%10\n        reverse = (reverse*10)+reminder\n        x = x//10\n    if reverse == x:\n        print(x,'is palindrome')\n    else:\n        print(x,'is not palindrome')\n    \n    \ndef find_lucky(lucky_num):\n    '''\n    Write a python function to find whether a given number is lucky or not.\n    '''\n    num = int(input('enter the number:'))\n    if num == lucky_num:\n        print('you got it')\n    else:\n        print('sorry, try again')\n    \n    \ndef find_Prime_Factors(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    while True:\n        if n==1:\n            break\n        for i in range(2,n):\n            if n%i==0:\n                n = n//i\n                print(i)\n                break\n                \n                \ndef find_factor(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 1\n    while i < num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_prime_factor(n):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i = 1\n    while i < n:\n        if n%i==0:\n            print(i)\n        i+=1\n    \n    \ndef check_prime_number(num):\n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    i = 2\n    while i <= num//2:\n        if num%i==0:\n            return False\n        i+=1\n    return True\n    \n    \ndef prime_factors(num):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    i = 2\n    while i < num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_prime_factors(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef prime_number(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef check_prime_number(num):\n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            return False\n        i+=1\n    return True\n    \n    \ndef find_prime_factors(num):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef prime_number(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef prime_number(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef prime_number(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef prime_number(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef prime_number(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef prime_number(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef prime_number(num):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    i = 2\n    while i <= num:\n        if num%i==0:\n            print(i)\n        i+=1\n    \n    \ndef prime_number(num):\n    ''",
        "num_ids": 48
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2)!= 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return 1\n    else:\n        return 0\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % ",
        "num_ids": 8
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = []\n    while(n):\n        res.append(n % 10)\n        n = n // 10\n    \n    while(len(res) < 3):\n        res.append(0)\n    \n    res = sorted(res, reverse = True)\n    \n    #print(res)\n    \n    n = res[0] * 10 + res[1]\n    #print(n)\n    \n    for i in range(2, len(res)):\n        n = n * 10 + res[i]\n    \n    return n\n",
        "num_ids": 132
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)-1):\n        for j in range(len(n)-1-i):\n            if int(n[j]) > int(n[j+1]):\n                n = n[:j] + str(int(n[j]) + 1) + n[j+1:]\n    return int(n)\n",
        "num_ids": 92
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    r = 0\n    for i in range(0, len(n) - 1):\n        if n[i] > n[i+1]:\n            r = int(n[:i] + str(int(n[i])+1) + n[i+1:])\n            break\n    return r\n",
        "num_ids": 83
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    temp = n\n    if temp < 10:\n        return n\n",
        "num_ids": 18
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    l = len(n)\n    for i in range(l-1, -1, -1):\n        if int(n[i]) < int(n[i-1]):\n            return int(n[:i-1]+str(int(n[i-1])+1)+n[i+1:])\n    return int(n[0]+str(int(n[1:])+1))\n",
        "num_ids": 107
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = list(str(n))\n    # print(arr)\n    for i in range(len(arr) - 1):\n        # print(i)\n        if int(arr[i]) < int(arr[i + 1]):\n            # print(arr[i])\n            temp = arr[i]\n            # print(temp)\n            arr[i] = arr[i + 1]\n            # print(arr)\n            arr[i + 1] = temp\n            # print(arr)\n    new_num = ''.join(arr)\n    # print(new_num)\n    return int(new_num)\n",
        "num_ids": 150
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # first we will get the length of the string and make sure that it is an integer\n    n = str(n)\n    len_n = len(n)\n    n = int(n)\n",
        "num_ids": 48
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        n = list(str(n))\n        n = sorted(n)\n        max_digit = n.index(max(n))\n        n = sorted(n, reverse=True)\n        n = int(''.join(n))\n        return n\n    n = list(str(n))\n    n.sort(reverse=True)\n    n = int(''.join(n))\n    return next_bigger(n)\n",
        "num_ids": 112
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    def bigNum(num):\n        res = 0\n        while num:\n            res = res * 10 + num % 10\n            num //= 10\n        return res\n    \n    def nextBigger(num):\n        if bigNum(num) == bigNum(num+1):\n            return -1\n        \n        arr = list(str(bigNum(num)))\n        for i in range(len(arr)):\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                break\n            elif arr[i] < arr[i+1]:\n                return -1\n        \n        return int(\"\".join(arr))\n    \n    print(nextBigger(6))\n",
        "num_ids": 186
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # count the number of digits in the given number\n    \n    # loop through each digit of the given number\n    \n    # if the current digit is smaller than its neighbor, then swap them\n    \n    # return the current number\n",
        "num_ids": 56
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # using heap\n    h = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            h.append((nums1[i] + nums2[j], i, j))\n",
        "num_ids": 63
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k > len(nums1) + len(nums2):\n        return []\n    index1 = 0\n    index2 = 0\n    result = []\n    minHeap = []\n    result = []\n    n = len(nums1)\n    m = len(nums2)\n    while True:\n        if index1 == n:\n            return result\n        if index2 == m:\n            return result\n        if len(minHeap) < k:\n            heapq.heappush(minHeap, nums1[index1])\n            heapq.heappush(minHeap, nums2[index2])\n            index1 += 1\n            index2 += 1\n        else:\n            if minHeap[0] > nums1[index1]:\n                heapq.heappop(minHeap)\n                heapq.heappush(minHeap, nums1[index1])\n                index1 += 1\n            if minHeap[0] > nums2[index2]:\n                heapq.heappop(minHeap)\n                heapq.heappush(minHeap, nums2[index2])\n                index2 += 1\n        if minHeap[0] <= minHeap[1]:\n            result.append([nums1[index1], nums2[index2]])\n            index1 += 1\n            index2 += 1\n        else:\n            result.append([nums2[index2], nums1[index1]])\n            index1 += 1\n            index2 += 1\n",
        "num_ids": 384
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    heap = [(nums1[i] + nums2[j], i, j) for i, nums1_i in enumerate(nums1) for j, nums2_j in enumerate(nums2)]\n    heapq.heapify(heap)\n    res = []\n    for _ in range(k):\n        res.append((heapq.heappop(heap))[1:])\n    return res\n",
        "num_ids": 111
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1+num2, num1, num2))\n    k_pairs = []\n    for i in range(k):\n        num1, num2 = heapq.heappop(min_heap)\n        k_pairs.append([num1, num2])\n    return k_pairs\n",
        "num_ids": 117
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    def partition(nums,l,r):\n        pivot = nums[l]\n        left = l+1\n        right = r\n        while left <= right:\n            while left <= r and nums[left] <= pivot:\n                left+=1\n            while right > l and nums[right] > pivot:\n                right-=1\n            if left <= right:\n                nums[left],nums[right] = nums[right],nums[left]\n        nums[l],nums[right] = nums[right],nums[l]\n        return right\n    def k_smallest(nums1,nums2,k):\n        l = 0\n        r = len(nums2)\n        while l <= r:\n            p = partition(nums1,l,r)\n            if p+1 == k:\n                return nums1[p]\n            elif p+1 < k:\n                l = p+1\n            else:\n                r = p - 1\n    return k_smallest(nums1,nums2,k)\n",
        "num_ids": 265
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    ans = []\n    arr_1 = []\n    arr_2 = []\n    for i, num in enumerate(nums1):\n        arr_1.append((num, i))\n    for i, num in enumerate(nums2):\n        arr_2.append((num, i))\n    heapq.heapify(arr_1)\n    heapq.heapify(arr_2)\n    while k > 0:\n        n1, idx_1 = heapq.heappop(arr_1)\n        n2, idx_2 = heapq.heappop(arr_2)\n        ans.append((n1, n2))\n        if arr_1:\n            heapq.heappush(arr_1, (n1, idx_1))\n        if arr_2:\n            heapq.heappush(arr_2, (n2, idx_2))\n        k -= 1\n    return ans\n",
        "num_ids": 231
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    heap = nums1 + nums2\n    heapq.heapify(heap)\n    for i in range(k):\n        res.append(heapq.heappop(heap))\n    return res\n",
        "num_ids": 62
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # first, sort the first array in ascending order (if there are more than k elements, not feasible)\n    # second, sort the second array in ascending order\n    # third, for each element in first array, find the index of its smallest element in the second array\n    # for each pair, keep the smallest element from the first array\n    # all pairs are unique\n    # two sorted arrays, one smaller than the other\n    \n    if not nums1 or not nums2 or len(nums1) + len(nums2) < k or k < 0:\n        return []\n    \n    # sort the first array\n    heapq.heapify(nums1)\n    # sort the second array\n    heapq.heapify(nums2)\n    # count the first array elements\n    count = 0\n    for i in range(len(nums1)):\n        # loop through the second array until the index of the smallest element in the second array is greater than the index of the element in the first array\n        while nums2 and nums1[i] >= nums2[0]:\n            nums2.pop(0)\n        # if the element in the second array is not in the first array, add it to the result\n        if not nums2:\n            return []\n        # add the first element of the first array as the result\n        # maintain the count of the first array elements\n        count += 1\n        # if the count is greater than k\n        if count > k:\n            break\n    # sort the second array and return the result\n    nums2 = heapq.nlargest(k, nums2)\n    return list(zip(nums1, nums2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1988
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # heapq, less heap, max heap\n    # heap = heapq.nsmallest(k, nums1+nums2)\n    heap = [(nums1[i] + nums2[i], i) for i in range(len(nums1))]\n    heapq.heapify(heap)\n    res = []\n    for i in range(k):\n        val, idx = heapq.heappop(heap)\n        res.append([nums1[idx], nums2[idx]])\n    return res\n",
        "num_ids": 137
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # nums1 = nums1[:]\n    # nums2 = nums2[:]\n    pq = []\n    # for i in range(min(len(nums1), k)):\n    #     heapq.heappush(pq, (nums1[i] - nums2[i], i, 0))\n",
        "num_ids": 86
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    a = list1\n    a.sort()\n    for i in range(len(a)):\n        a[i] = a[i] + (1,)\n    a.sort()\n    a.reverse()\n    #print(a)\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            a[i][j] = a[i][j] + (a[i][j][0]*a[i][j][1],)\n            #print(a[i][j])\n    #print(a)\n    a.sort(key = lambda x: x[0])\n    #print(a)\n    a.sort(key = lambda x: x[1])\n    #print(a)\n    a.reverse()\n    return a\n    \n",
        "num_ids": 195
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # print(list1)\n    minimum = 0\n    # list1 = sorted(list1, key=lambda x: x[0])\n    # print(list1)\n    for i in range(len(list1)):\n        # print(list1[i])\n        for j in range(i+1, len(list1)):\n            # print(list1[j])\n            if list1[i][0] * list1[j][0] < minimum:\n                minimum = list1[i][0] * list1[j][0]\n            # print(i, j, minimum)\n    # print(minimum)\n    return minimum\n",
        "num_ids": 155
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Note: Use list comprehension to find min product\n    l = [(x, y) for x, y in list1]\n    minimum = min(l, key = lambda x: x[0] * x[1])\n    return minimum\n",
        "num_ids": 57
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = list1[0]\n    for t in list1:\n        if result[0]*t[0] < t[0]*result[0]:\n            result = t\n        elif result[1]*t[1] < t[1]*result[1]:\n            result = t\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    #print(list1)\n    if len(list1) == 1:\n        return list1[0]\n    #print(list1)\n    if len(list1) == 2:\n        return min(list1[0],list1[1])\n    #print(list1)\n    if len(list1) == 3:\n        return min(min(list1[0],list1[1]),list1[2])\n    #print(list1)\n    if len(list1) > 3:\n        new_list = []\n        for i in range(1,len(list1)):\n            new_list.append(min(min(list1[0],list1[1]),list1[i]))\n        return min_product_tuple(new_list)\n",
        "num_ids": 202
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_value = min(list1, key=lambda x: x[0] * x[1])\n    return min_value\n",
        "num_ids": 33
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i][0] * list1[i][1])\n    return min(list2)\n",
        "num_ids": 51
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_val = min(list1)\n    min_tup = list1.index(min_val)\n    list1.remove(min_val)\n    result = []\n    for i in range(min_tup, len(list1)):\n        result.append(list1[i])\n    result.reverse()\n    result.append(min_val)\n    return tuple(result)\n",
        "num_ids": 97
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                continue\n            temp = list1[i][0] * list1[j][0]\n            if min_product == None or temp < min_product:\n                min_product = temp\n    return min_product\n",
        "num_ids": 92
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in list1:\n        a = i[0]\n        b = i[1]\n        if min_product is None:\n            min_product = a*b\n        if a*b < min_product:\n            min_product = a*b\n",
        "num_ids": 71
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n    \ndef sum_val(listval):\n    '''\n    Write a function to find the sum of the values in a given heterogeneous list.\n    '''\n    sum_val = 0\n    for i in listval:\n        sum_val = sum_val + i\n    return sum_val\n    \ndef avg_val(listval):\n    '''\n    Write a function to find the average of the values in a given heterogeneous list.\n    '''\n    return sum_val(listval) / len(listval)\n",
        "num_ids": 18
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for x in range(1,len(listval)):\n        if listval[x] < min:\n            min = listval[x]\n    return min\n    \n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for x in range(1,len(listval)):\n        if listval[x] > max:\n            max = listval[x]\n    return max\n    \n    \ndef sum_val(listval):\n    '''\n    Write a function to find the sum of all the values in a heterogeneous list.\n    '''\n    sum = 0\n    for x in range(0,len(listval)):\n        sum = sum + listval[x]\n    return sum\n    \n    \ndef delete_val(listval,val):\n    '''\n    Write a function to delete a value in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef reverse_val(listval):\n    '''\n    Write a function to reverse a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef is_sorted_val(listval):\n    '''\n    Write a function to check if a heterogeneous list is sorted.\n    '''\n    # Add code here.\n    \ndef top_n_val(listval,n):\n    '''\n    Write a function to find the top n values in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef frequency_val(listval):\n    '''\n    Write a function to find the frequency of a given value in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef frequency_sort_val(listval):\n    '''\n    Write a function to sort the frequency of a given value in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef append_val(listval):\n    '''\n    Write a function to append a value at the end of a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef extend_val(listval):\n    '''\n    Write a function to extend the heterogeneous list.\n    '''\n    # Add code here.\n    \ndef is_balanced_val(listval):\n    '''\n    Write a function to check if a heterogeneous list is balanced or not.\n    '''\n    # Add code here.\n    \ndef get_mid_val(listval):\n    '''\n    Write a function to find the mid value in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef get_mid_index_val(listval):\n    '''\n    Write a function to find the index of the mid value in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef concat_val(listval):\n    '''\n    Write a function to concatenate a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef append_set_val(listval):\n    '''\n    Write a function to append a set in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef extend_set_val(listval):\n    '''\n    Write a function to extend a set in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef intersection_val(listval1,listval2):\n    '''\n    Write a function to find the intersection of two heterogeneous lists.\n    '''\n    # Add code here.\n    \ndef union_val(listval1,listval2):\n    '''\n    Write a function to find the union of two heterogeneous lists.\n    '''\n    # Add code here.\n    \ndef difference_val(listval1,listval2):\n    '''\n    Write a function to find the difference of two heterogeneous lists.\n    '''\n    # Add code here.\n    \ndef is_subset_val(listval1,listval2):\n    '''\n    Write a function to find if a set is a subset of another heterogeneous list.\n    '''\n    # Add code here.\n    \ndef get_diff_val(listval1,listval2):\n    '''\n    Write a function to get the difference of a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef mult_val(listval,value):\n    '''\n    Write a function to multiply all the values in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef divide_val(listval,value):\n    '''\n    Write a function to divide all the values in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef swap_val(listval,index1,index2):\n    '''\n    Write a function to swap two values in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef duplicate_val(listval,value):\n    '''\n    Write a function to duplicate a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef sum_val_index(listval,index):\n    '''\n    Write a function to sum all the values in a heterogeneous list at a given index.\n    '''\n    # Add code here.\n    \ndef sum_val_range(listval,low,high):\n    '''\n    Write a function to sum all the values in a heterogeneous list between low and high indexes.\n    '''\n    # Add code here.\n    \ndef sum_val_all(listval):\n    '''\n    Write a function to sum all the values in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef multiply_val_index(listval,index,value):\n    '''\n    Write a function to multiply all the values in a heterogeneous list at a given index.\n    '''\n    # Add code here.\n    \ndef multiply_val_range(listval,low,high,value):\n    '''\n    Write a function to multiply all the values in a heterogeneous list between low and high indexes.\n    '''\n    # Add code here.\n    \ndef multiply_val_all(listval,value):\n    '''\n    Write a function to multiply all the values in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef get_range_sum_val(listval,low,high):\n    '''\n    Write a function to sum all the values in a heterogeneous list between low and high indexes.\n    '''\n    # Add code here.\n    \ndef get_range_sum_val_index(listval,low,high):\n    '''\n    Write a function to sum all the values in a heterogeneous list between low and high indexes.\n    '''\n    # Add code here.\n    \ndef insert_val(listval,index,value):\n    '''\n    Write a function to insert a value at a given index in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef insert_index_val(listval,index,value):\n    '''\n    Write a function to insert a value at a given index in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef delete_val(listval,value):\n    '''\n    Write a function to delete a value from a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef delete_index_val(listval,index):\n    '''\n    Write a function to delete a value from a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef reverse_val_index(listval,index):\n    '''\n    Write a function to reverse all the values in a heterogeneous list at a given index.\n    '''\n    # Add code here.\n    \ndef reverse_val_range(listval,low,high):\n    '''\n    Write a function to reverse all the values in a heterogeneous list between low and high indexes.\n    '''\n    # Add code here.\n    \ndef reverse_val_all(listval):\n    '''\n    Write a function to reverse all the values in a heterogeneous list.\n    '''\n    # Add code here.\n    \ndef sort_val_index(listval,index):\n    '''\n    Write a function to sort a heterogeneous list at ",
        "num_ids": 14
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for element in listval:\n        if element < min_val:\n            min_val = element\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Using max()\n    # l = [1,5,7,9,3]\n    # print(min(l))\n",
        "num_ids": 33
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef sum_val(listval):\n    '''\n    Write a function to find the sum of all items in a given heterogeneous list.\n    '''\n    return sum(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for x in listval:\n        if x < min_value:\n            min_value = x\n    return min_value\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for x in listval:\n        if x < min:\n            min = x\n    return min\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    if len(listval) == 0:\n        return None\n    \n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n",
        "num_ids": 72
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n",
        "num_ids": 58
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #assert isinstance(listval, list) or isinstance(listval, set) or isinstance(listval, tuple)\n    #min_element = listval[0]\n    #for element in listval:\n        #if element < min_element:\n            #min_element = element\n    #return min_element\n",
        "num_ids": 78
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # get the words in the string\n    words = word.split('_')\n    # take the first word in the string\n    # capitalize it and join the rest in camel case\n    return words[0].capitalize() + ''.join([w.capitalize() for w in words[1:]])\n",
        "num_ids": 72
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n    ",
        "num_ids": 17
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert the string to lower case\n    word_lower = word.lower()\n    # replace words that are not capital letter with dash\n    word_lower = re.sub(r'[^a-z]', '-', word_lower)\n    # replace the first letter with upper case\n    word_upper = word_lower[0].upper() + word_lower[1:]\n    # return the result\n    return word_upper\n",
        "num_ids": 102
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    output = words[0]\n    for word in words[1:]:\n        output = output + word.title()\n    return output\n",
        "num_ids": 44
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word: return word\n    s = re.findall(r'(?<!^)(?=[A-Z])', word)\n    if len(s)==1:\n        return word\n    else:\n        return ''.join([s[0], *[i.capitalize() for i in s[1:]]])\n    \nprint(snake_to_camel(\"snake_case_string\")) # Should be Snake_Case_String\nprint(snake_to_camel(\"snake_case_sting\")) # Should be Snake_Case_String\nprint(snake_to_camel(\"\")) # Should be an empty string\nprint(snake_to_camel(\"FirstName\")) # Should be FirstName\nprint(snake_to_camel(\"firstName\")) # Should be FirstName\nprint(snake_to_camel(\"FirstName_SecondName\")) # Should be FirstNameSecondName\nprint(snake_to_camel(\"firstName_SecondName\")) # Should be FirstNameSecondName\nprint(snake_to_camel(\"_firstName_SecondName\")) # Should be _firstNameSecondName\nprint(snake_to_camel(\"firstName_SecondName\")) # Should be FirstNameSecondName\n",
        "num_ids": 290
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #s = re.sub('_', '-', word)\n    #print(s)\n    return word.title()\n",
        "num_ids": 32
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #word = 'hello_world'\n    #word = 'hello_world2'\n    word = word.replace('_',' ')\n    word = word.replace('-',' ')\n    word = re.sub('[^a-zA-Z0-9]','',word)\n    word = word.title()\n    word = word.replace(' ','')\n    return word\n",
        "num_ids": 94
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.lower()\n    word_list = re.findall(r'[a-z0-9]+', word)\n    word_list = list(map(str.capitalize, word_list))\n    result = ''.join(word_list)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    comp_word = \"\"\n    for i in range(1,len(word)):\n        if word[i].isupper():\n            comp_word += word[i].lower()\n        else:\n            comp_word += word[i].upper()\n    return comp_word+word[0].upper()\n",
        "num_ids": 74
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i=0\n    while i<len(l):\n        if l[i]%2!=0:\n            l.remove(l[i])\n        else:\n            i+=1\n    return l\n",
        "num_ids": 52
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Empty list\n    l = []\n    # Deleting odd numbers\n    for i in range(len(l)):\n        if(l[i] % 2 == 0):\n            del l[i]\n    # Return modified list\n    return l\n",
        "num_ids": 61
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x : x % 2 == 0,l))\n",
        "num_ids": 20
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for num in l:\n        if num % 2!= 0:\n            odd.append(num)\n    return odd\n",
        "num_ids": 36
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n    return l\n",
        "num_ids": 49
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if i%2!= 0:\n            l.pop(i)\n    return l\n",
        "num_ids": 36
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l ==[]:\n        return\n    else:\n        if l[0] % 2!=0:\n            l.remove(l[0])\n            return remove_odd(l)\n        else:\n            return l[0]\n",
        "num_ids": 59
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_nums = []\n    for num in l:\n        if num % 2 == 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "num_ids": 44
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.pop(i)\n    print(l)\n",
        "num_ids": 41
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return list1\n    if n == len(list1):\n        return None\n    if n < len(list1):\n        return list1[n]\n",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[n])\n    return list2\n",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    '''\n    The solution below uses slicing on the list, which is inefficient.\n    We will use a generator expression instead.\n",
        "num_ids": 27
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    x = []\n    for i in list1:\n        x.append(i[n])\n    return x\n",
        "num_ids": 29
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        return 'no such element'\n    else:\n        return list1[n]\n",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlap=0\n    for i in list1:\n        if i in list2:\n            overlap=1\n    if overlap==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return i\n    return None\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    cnt=0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                cnt=cnt+1\n                break\n    return cnt>=1\n",
        "num_ids": 51
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if (set1 & set2):\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag=False\n    if(len(list1)>len(list2)):\n        for i in list1:\n            for j in list2:\n                if(i==j):\n                    flag=True\n        return flag\n    else:\n        for i in list2:\n            for j in list1:\n                if(i==j):\n                    flag=True\n        return flag\n",
        "num_ids": 93
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num=max(arr)\n    arr=sorted(arr)\n    if(arr[0]<0):\n        return None\n    elif(arr[0]==0):\n        return None\n    else:\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                if(arr[i]*arr[j]>max_num):\n                    max_num=arr[i]*arr[j]\n                    res=arr[i]\n                    res1=arr[j]\n        return max_num,res,res1\n",
        "num_ids": 147
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = 0\n    high = 0\n    low = 0\n",
        "num_ids": 17
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    curr_product = 1\n    \n    for i in range(len(arr)-1):\n        curr_product = max(arr[i], arr[i+1])\n        max_product = max(max_product, curr_product)\n    return max_product\n",
        "num_ids": 74
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    arr.sort() \n    prod = 1\n    i = 0\n    j = n-1\n    while i<j: \n        if arr[i]*arr[j] < 0: \n            prod = max(prod, arr[i]*arr[j]) \n            i += 1\n        else: \n            j -= 1\n    return prod \n    \n        \n        \n        ",
        "num_ids": 107
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0] * arr[1]\n    max2 = arr[0] * arr[2]\n    max3 = arr[1] * arr[2]\n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] * arr[j] > max1): \n                max1 = arr[i] * arr[j]\n            if (arr[i] * arr[j] > max2): \n                max2 = arr[i] * arr[j]\n            if (arr[i] * arr[j] > max3): \n                max3 = arr[i] * arr[j]\n    print (\"Maximum product is:\",max1)\n    print (\"Maximum product is:\",max2)\n    print (\"Maximum product is:\",max3)\n",
        "num_ids": 208
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #sort the array and find the highest\n    arr.sort()\n    print(arr)\n    high = arr[-1]\n    return high*arr[-2]\n    \ndef max_Product(arr): \n    '''\n    Write a python function to find the pair with maximum product from a given array of integers.\n    '''\n    #sort the array and find the max product\n    arr.sort()\n    return max(arr)\n",
        "num_ids": 26
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = len(arr)\n    result = [-1, 0]\n    \n    for i in range(l): \n        for j in range(i+1, l):\n            product = arr[i] * arr[j]\n            if product > result[1]:\n                result[0], result[1] = i, product\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = 1\n    second_max = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] * arr[j] > max: \n                second_max = max \n                max = arr[i] * arr[j] \n            elif arr[i] * arr[j] > second_max: \n                second_max = arr[i] * arr[j] \n    print(\"Second highest number is: \", second_max)\n",
        "num_ids": 133
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    if(arr[0]>0):\n        return arr[0]\n    if(arr[0]<0):\n        return arr[0]\n    if(arr[0]==0):\n        return 0\n",
        "num_ids": 63
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = -999999999999999999\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp = arr[i]*arr[j]\n            if temp > max:\n                max = temp\n    return max\n",
        "num_ids": 69
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [a for a,b in Input if a[0] == min(b)]\n",
        "num_ids": 23
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    final_list = []\n    for i in range(0, len(Input)):\n        final_list.append(Input[i][0])\n        final_list.append(Input[i][1])\n    final_list.sort()\n    return final_list[0]\n",
        "num_ids": 68
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i][0])\n                break\n            else:\n                continue\n    return Output\n",
        "num_ids": 78
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(dict.fromkeys(Input))\n",
        "num_ids": 14
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_list = {}\n    for i in Input:\n        if i[0] in grouped_list:\n            grouped_list[i[0]].append(i[1])\n        else:\n            grouped_list[i[0]] = [i[1]]\n    return grouped_list\n",
        "num_ids": 74
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    min_element = Input[0]\n    max_element = Input[-1]\n    common = []\n    start = 0\n    end = len(Input) - 1\n    while(start < end):\n        if min_element[0] == max_element[0]:\n            common.append(min_element[0])\n            return common\n        elif min_element[0] == Input[start][0]:\n            common.append(min_element[0])\n            start += 1\n        elif max_element[0] == Input[end][0]:\n            common.append(max_element[0])\n            end -= 1\n        else:\n            start += 1\n            end -= 1\n    return common\n",
        "num_ids": 177
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                result.append(Input[i][0])\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_2(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_3(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_4(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_5(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_6(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_7(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_8(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_9(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_10(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_11(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_12(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_13(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element_14(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    def common_first_element(lst): \n        #[(2, 5), (5, 9), (10, 15)]\n        if len(lst) <= 1:\n            return lst[0]\n        return common_first_element(lst[1:]) if lst[0][0] == lst[1][0] else lst[0]\n    return common_first_element(Input)\n    \ndef common_first_element",
        "num_ids": 117
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    '''\n    Given a list of tuple (sorted) of unique elements and a value\n    common_first =\n    [\n        (0, 0), (1, 1), (2, 2),\n        (1, 2), (2, 0), (2, 1),\n        (3, 0)\n    ]\n    Output:\n    [(0, 0), (1, 1), (2, 2), (3, 0)]\n    '''\n    common_first = []\n    \n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1]:\n                common_first.append(Input[i])\n    return common_first\n",
        "num_ids": 83
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    set1 = set(Input)\n    set1 = list(set1)\n    if len(set1) == 0:\n        return None\n    else:\n        for i in range(len(set1)):\n            for j in range(i+1,len(set1)):\n                if set1[i][0] == set1[j][0]:\n                    return set1[i][0]\n            \n    \ndef remove_dup(Input):\n    '''\n    Write a function to remove duplicate elements from given list.\n    '''\n    set1 = set(Input)\n    set1 = list(set1)\n    if len(set1) == 0:\n        return None\n    else:\n        for i in range(len(set1)):\n            for j in range(i+1,len(set1)):\n                if set1[i] == set1[j]:\n                    set1.pop(j)\n    return set1\n    \ndef array_rotation(arr,d):\n    '''\n    Given an array A of size N and a number \u2018D\u2019, rotate the array by \u2018D\u2019 positions.\n    Input: arr=[1,2,3,4,5,6], D=3\n    Output: arr=[4,5,6,1,2,3]\n    '''\n    #arr = arr.append(0)\n    arr = list(arr)\n    arr_len = len(arr)\n    d = d%arr_len\n    \n    arr = arr[d:] + arr[:d]\n    return arr\n    \ndef binary_search(arr, search):\n    '''\n    Given a sorted array and a number,\n    find the position of that number in the array.\n    '''\n    arr_len = len(arr)\n    l = 0\n    h = arr_len - 1\n    \n    while l <= h:\n        mid = (l+h)//2\n        \n        if arr[mid] == search:\n            return mid\n        \n        elif arr[mid] > search:\n            h = mid - 1\n            \n        else:\n            l = mid + 1\n            \ndef fizzBuzz(n):\n    '''\n    Write a function that prints the numbers from 1 to n. \n    But for multiples of three print \u201cFizz\u201d instead of the number and \n    for the multiples of five print \u201cBuzz\u201d. For numbers which are multiples\n    of both three and five print \u201cFizzBuzz\u201d.\n    '''\n    arr = list(range(1,n+1))\n    \n    for i in range(n):\n        if i%3 == 0 and i%5 == 0:\n            print(\"FizzBuzz\")\n            continue\n        elif i%3 == 0:\n            print(\"Fizz\")\n            continue\n        elif i%5 == 0:\n            print(\"Buzz\")\n            continue\n        print(arr[i])\n        \ndef find_sum(arr, n, k):\n    '''\n    Find the sum of first n elements in a list,\n    whose sum is not equal to k.\n    '''\n    arr = list(arr)\n    arr_len = len(arr)\n    summ = 0\n    if arr_len < n:\n        return None\n    for i in range(arr_len):\n        summ = summ + arr[i]\n    summ = summ - k\n    for i in range(arr_len):\n        if summ == arr[i]:\n            return summ\n    \n    \ndef sum_pairs(arr,k):\n    '''\n    Find the sum of all the pairs of numbers in a list,\n    whose sum is equal to a particular number \u2018K\u2019.\n    '''\n    arr = list(arr)\n    arr_len = len(arr)\n    if arr_len < 2:\n        return None\n    \n    for i in range(arr_len):\n        for j in range(i+1,arr_len):\n            if arr[i] + arr[j] == k:\n                return arr[i],arr[j]\n                \n    \ndef three_sum(arr, target):\n    '''\n    Given an array of n + 1 numbers,\n    find the three numbers which sum is equal to target.\n    The numbers in input array should be distinct.\n    '''\n    arr = list(arr)\n    arr_len = len(arr)\n    if arr_len < 3:\n        return None\n    \n    arr.sort()\n    for i in range(arr_len):\n        if i > 0 and arr[i-1] == arr[i]:\n            continue\n        \n        l = i + 1\n        r = arr_len - 1\n        \n        while l < r:\n            summ = arr[i] + arr[l] + arr[r]\n            if summ == target:\n                return arr[i], arr[l], arr[r]\n            elif summ < target:\n                l += 1\n            else:\n                r -= 1\n                \n                \ndef find_triplet(arr, target):\n    '''\n    Given an array S of n integers, find three integers in S such that the sum is equal to the target.\n    Return the sum of the three integers. \n    If there are more than one solutions, return the smallest sum.\n    '''\n    arr = list(arr)\n    arr_len = len(arr)\n    if arr_len < 3:\n        return None\n    \n    arr.sort()\n    for i in range(arr_len):\n        if i > 0 and arr[i-1] == arr[i]:\n            continue\n        \n        l = i + 1\n        r = arr_len - 1\n        \n        while l < r:\n            summ = arr[i] + arr[l] + arr[r]\n            if summ == target:\n                return arr[i], arr[l], arr[r]\n            elif summ < target:\n                l += 1\n            else:\n                r -= 1\n                \ndef is_perfect_square(num):\n    '''\n    Given a number, determine if it is a perfect square.\n    '''\n    if num < 0:\n        return False\n    \n    r = int(num**0.5)\n    if r*r == num:\n        return True\n    else:\n        return False\n        \ndef flip_bit(num):\n    '''\n    Given a non-negative number,\n    count the number of 1 bits in its binary representation.\n    '''\n    \n    if num == 0:\n        return 0\n    \n    bin_num = bin(num).replace(\"0b\",\"\")\n    count = 0\n    \n    for i in range(len(bin_num)):\n        if bin_num[i] == \"1\":\n            count += 1\n            \n    return count\n",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    \n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            return lst[i]\n",
        "num_ids": 96
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    for i in lst:\n        if len(i) == max_len:\n            return i\n    \n",
        "num_ids": 45
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    return max_len\n",
        "num_ids": 25
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in lst:\n        if len(i) > m:\n            m = len(i)\n            max_ = i\n    return max_\n",
        "num_ids": 44
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            return lst[i]\nlst = [['a', 'b', 'c', 'd'], ['m', 'n', 'k', 'j', 'o'], ['p', 'q', 'e']]\nprint('Max element is', Find_Max(lst))\n'''\nOutput:\nMax element is ['p', 'q', 'e']\n'''\n",
        "num_ids": 2
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(1,len(lst)): \n        if len(lst[i]) > len(max): \n            max = lst[i]\n    return max\n",
        "num_ids": 56
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max(map(len,lst))\n    return [el for el in lst if len(el) == max_length]\n",
        "num_ids": 37
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n    for i in range(len(lst)):\n        if max == len(lst[i]):\n            return lst[i]\n",
        "num_ids": 67
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst=lst\n    max_length=0\n    for elem in lst:\n        if len(elem)>max_length:\n            max_length=len(elem)\n    return max_length\n        \ndef main():\n    '''\n    Write a python program to find the average of a list.\n    '''\n    lst=[[1,2,3,4],['a','b','c'],(1,2,3),[1,2,3,4]]\n    avg=0\n    for elem in lst:\n        avg+=len(elem)\n    avg=avg/(len(lst))\n    print(avg)\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 101
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        max_length = 0\n        for element in lst:\n            if len(element) > max_length:\n                max_length = len(element)\n    max_length = 0\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    max_length = 0\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    max_length = 0\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    max_length = 0\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    max_length = 0\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    max_length = 0\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in lst:\n        if len(element) > max_length:\n            max_length ",
        "num_ids": 2015
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    sum_of_numbers = sum(list1)\n    return round(sum_of_numbers / length)\n    \ndef round_and_sum_2(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(round(x / len(list1)) for x in list1)\n    \ndef reverse(list1):\n    '''\n    Write a function to reverse a given list of numbers.\n    '''\n    return list1[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        i = int(round(i))\n        total += i*len(list1)\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    for i in range(0,length):\n        list1[i] = round(list1[i])\n    return list1\n",
        "num_ids": 42
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in list1:\n        i = round(i)\n        sum1 += i\n    print(f\"The sum is: {sum1}\")\n    return sum1 * len(list1)\n",
        "num_ids": 56
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_total = []\n    for index, value in enumerate(list1):\n        round_total.append(round(value, 2))\n    round_total = sum(round_total)\n    print(round_total * len(list1))\n",
        "num_ids": 61
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num) * len(list1)\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    total = sum(list1)\n    for i in list1:\n        total = total + round(i)\n    return total * len(list1)\n",
        "num_ids": 44
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    x = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        x += list1[i]\n    print(x * len(list1))\n",
        "num_ids": 55
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_and_sum = []\n    rounded = []\n    sum = 0\n    for x in range(0,len(list1)):\n        round_and_sum.append(round(list1[x]))\n    for y in range(0,len(round_and_sum)):\n        sum += round_and_sum[y]\n    print(sum)\n    \n    \n",
        "num_ids": 94
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1_rounded = list(map(lambda x: round(x, 3), list1))\n    print(sum(list1_rounded) * len(list1))\n    return\n",
        "num_ids": 45
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    print(cube_sum)\n",
        "num_ids": 35
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1,n):\n        total = total + i**3\n    print(total)\n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    print(\"Cube Sum of\",n,\"natural numbers:\",(n*(n+1)*(2*n+1))/6)\n    return (n*(n+1)*(2*n+1))/6",
        "num_ids": 53
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**3\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        i = i+1\n        sum = sum + i**3\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for i in range(n):\n        if i % 2 == 0:\n            c = c + i**3\n    print(c)\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))//6\n",
        "num_ids": 22
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<0:\n        return 'Invalid Input'\n    sum=0\n    i=0\n    while i<=n:\n        sum = sum+i*i*i\n        i+=1\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum = cube_sum + i**3\n    return cube_sum\n",
        "num_ids": 37
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in test_tup:\n        print(i, end=' ')\n",
        "num_ids": 22
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # A = (1,2,3)\n    # A = (1,2,3,4,5)\n    # A = (\"a\",\"b\",\"c\")\n    # A = (\"a\",\"b\",\"c\",\"d\")\n    # A = (\"a\",\"b\",\"c\",\"d\",\"e\")\n    # print(\"A = \", A)\n    A = test_tup\n    return str(test_tup).replace(',', '')\n",
        "num_ids": 106
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    l = []\n    for i in test_tup:\n        if type(i) == type(()):\n            l.append(concatenate_tuple(i))\n        else:\n            l.append(i)\n    return delimiter.join(l)\n",
        "num_ids": 67
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += element + ', '\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for item in test_tup:\n        res += str(item) + '-'\n    return res[:-1]\n",
        "num_ids": 36
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for item in test_tup:\n        res += str(item) + '|'\n",
        "num_ids": 29
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return f\"{test_tup[0]}\" + ''.join(test_tup[1:])\n",
        "num_ids": 29
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_list = []\n    for i in range(len(test_tup)):\n        concatenated_list.append(test_tup[i])\n    concatenated_list.append(' ')\n    return tuple(concatenated_list)\n",
        "num_ids": 70
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # concatenation of two strings\n    return ''.join(test_tup)\n",
        "num_ids": 23
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + i**3\n    return total/n\n",
        "num_ids": 35
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    i=0\n    sum =0\n    while i<n:\n        sum = sum + i**3\n        i=i+1\n    return (sum)/n\ndef find_Average_Of_Cube2(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    sum =0\n    sum =sum + i**3\n    return sum/n\ndef find_Average_Of_Cube3(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    sum =0\n    return sum/n\ndef find_Average_Of_Cube4(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3/n\ndef find_Average_Of_Cube5(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i*i*i/n\ndef find_Average_Of_Cube6(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i*i*i*i/n\ndef find_Average_Of_Cube7(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i/n\ndef find_Average_Of_Cube8(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i*i/n\ndef find_Average_Of_Cube9(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i*i*i/n\ndef find_Average_Of_Cube10(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i/n\ndef find_Average_Of_Cube11(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3/n\ndef find_Average_Of_Cube12(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube13(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3/n\ndef find_Average_Of_Cube14(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube15(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3/n\ndef find_Average_Of_Cube16(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube17(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube18(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube19(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube20(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube21(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube22(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube23(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i/n\ndef find_Average_Of_Cube24(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    while i<n:\n        i=i+1\n    return i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3*i**3/n\ndef find_Average_Of_Cube25(n):\n    '''\n    Write a python function to find th",
        "num_ids": 10
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    average = sum / n\n    print(average)\n",
        "num_ids": 40
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        sum += i**3\n        i+=1\n    print(sum/n)\n",
        "num_ids": 39
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def find_Average_Of_Cube(n):\n        '''\n        Write a python function to find the average of cubes of first n natural numbers.\n        '''\n        res = 0\n        for i in range(1,n+1):\n            res += i**3\n        return res/n\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #code here\n    i = 1\n    sum = 0\n    while i<=n:\n        sum = sum + i**3\n        i = i + 1\n    avg = sum/n\n    return avg\n    \n",
        "num_ids": 55
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Initializing an empty array\n    empty_array = []\n",
        "num_ids": 17
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**3\n    return sum/n\n",
        "num_ids": 31
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = int(n)\n    result = 0\n    for i in range(n+1):\n        result += i**3\n    return result/n\n",
        "num_ids": 39
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for s in test_tuple:\n        rear_list.append(s[-1])\n    return tuple(rear_list)\n",
        "num_ids": 44
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if len(test_tuple) == 0:\n        return ()\n    else:\n        return (test_tuple[-1],)\n",
        "num_ids": 36
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for i in test_tuple:\n        result_tuple += (i[-1],)\n    return result_tuple\n    \n    \ndef extract_middle(test_tuple):\n    '''\n    Write a function to extract only the middle index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for i in test_tuple:\n        result_tuple += (i[(len(i)//2)-1],)\n    return result_tuple\n    \n    \ndef extract_front_and_middle(test_tuple):\n    '''\n    Write a function to extract front and middle index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for i in test_tuple:\n        result_tuple += ((i[0],i[(len(i)//2)-1]),)\n    return result_tuple\n",
        "num_ids": 52
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your code here\n    return (' '.join([str(i) for i in test_tuple]))\n",
        "num_ids": 28
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1])\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list1 =[]\n    for i in range(len(test_tuple)):\n        list1.append(test_tuple[i][-1])\n    print(list1)\n    return tuple(list1)\n",
        "num_ids": 55
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(\"{}\".format(test_tuple))\n    def extract_rear(test_tuple):\n        print(\"{}\".format(test_tuple))\n        return test_tuple[2]\n    return extract_rear(test_tuple)\n",
        "num_ids": 66
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    return test_tuple[-1]\n    \ndef extract_all_from_tuple(test_tuple):\n    '''\n    Write a function to extract all elements of a given tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    return test_tuple\n    \ndef extract_first_from_tuple(test_tuple):\n    '''\n    Write a function to extract the first element of a given tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    return test_tuple[0]\n    \ndef extract_all_except_first_from_tuple(test_tuple):\n    '''\n    Write a function to extract all elements of a given tuple except first element of the tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    return test_tuple[1:]\n    \ndef test_extract_first_from_tuple():\n    '''\n    Testing function for extract_first_from_tuple()\n    '''\n    print(\"Testing function for extract_first_from_tuple():\")\n    \n    assert(extract_first_from_tuple(('a', 'b', 'c', 'd')) == 'b')\n    assert(extract_first_from_tuple(('a', 'b', 'c', 'd', 'e')) == 'c')\n    assert(extract_first_from_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == 'e')\n    \n    print(\"Test passed!\")\n    print()\n    \ndef test_extract_all_from_tuple():\n    '''\n    Testing function for extract_all_from_tuple()\n    '''\n    print(\"Testing function for extract_all_from_tuple():\")\n    \n    assert(extract_all_from_tuple(('a', 'b', 'c', 'd')) == tuple('abc'))\n    assert(extract_all_from_tuple(('a', 'b', 'c', 'd', 'e')) == tuple('cde'))\n    assert(extract_all_from_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == tuple('efghi'))\n    \n    print(\"Test passed!\")\n    print()\n    \ndef test_extract_rear_from_tuple():\n    '''\n    Testing function for extract_rear_from_tuple()\n    '''\n    print(\"Testing function for extract_rear_from_tuple():\")\n    \n    assert(extract_rear_from_tuple(('a', 'b', 'c', 'd')) == 'd')\n    assert(extract_rear_from_tuple(('a', 'b', 'c', 'd', 'e')) == 'd')\n    assert(extract_rear_from_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == 'd')\n    \n    print(\"Test passed!\")\n    print()\n    \ndef test_extract_all_except_first_from_tuple():\n    '''\n    Testing function for extract_all_except_first_from_tuple()\n    '''\n    print(\"Testing function for extract_all_except_first_from_tuple():\")\n    \n    assert(extract_all_except_first_from_tuple(('a', 'b', 'c', 'd')) == tuple('abc'))\n    assert(extract_all_except_first_from_tuple(('a', 'b', 'c', 'd', 'e')) == tuple('cde'))\n    assert(extract_all_except_first_from_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == tuple('efghi'))\n    \n    print(\"Test passed!\")\n    print()\n    \ndef test_extract_first_from_tuple():\n    '''\n    Testing function for extract_first_from_tuple()\n    '''\n    print(\"Testing function for extract_first_from_tuple():\")\n    \n    assert(extract_first_from_tuple(('a', 'b', 'c', 'd')) == 'a')\n    assert(extract_first_from_tuple(('a', 'b', 'c', 'd', 'e')) == 'b')\n    assert(extract_first_from_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == 'c')\n    \n    print(\"Test passed!\")\n    print()\n    \ndef test_extract_all_except_first_from_tuple():\n    '''\n    Testing function for extract_all_except_first_from_tuple()\n    '''\n    print(\"Testing function for extract_all_except_first_from_tuple():\")\n    \n    assert(extract_all_except_first_from_tuple(('a', 'b', 'c', 'd')) == tuple('c'))\n    assert(extract_all_except_first_from_tuple(('a', 'b', 'c', 'd', 'e')) == tuple('cde'))\n    assert(extract_all_except_first_from_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == tuple('efghi'))\n    \n    print(\"Test passed!\")\n    print()\n    \ndef test_extract_first_from_tuple():\n    '''\n    Testing function for extract_first_from_tuple()\n    '''\n    print(\"Testing function for extract_first_from_tuple():\")\n    \n    assert(extract_first_from_tuple(('a', 'b', 'c', 'd')) == 'a')\n    assert(extract_first_from_tuple(('a', 'b', 'c', 'd', 'e')) == 'b')\n    assert(extract_first_from_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == 'c')\n    \n    print(\"Test passed!\")\n    print()\n    \ndef test_extract_all_except_first_from_tuple():\n    '''\n    Testing function for extract_all_except_first_from_tuple()\n    '''\n    print(\"Testing function for extract_all_except_first_from_tuple():\")\n    \n    assert(extract_all_except_first_from_tuple(('a', 'b', 'c', 'd')) == tuple('c'))\n    assert(extract_all_except_first_from_tuple(('a', 'b', 'c', 'd', 'e')) == tuple('cde'))\n    assert(extract_all_except_first_from_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == tuple('efghi'))\n    \n    print(\"Test passed!\")\n    print()\n    \ndef test_extract_rear_from_tuple():\n    '''\n    Testing function for extract_rear_from_tuple()\n    '''\n    print(\"Testing function for extract_rear_from_tuple():\")\n    \n    assert(extract_rear_from_tuple(('a', 'b', 'c', 'd')) == 'd')\n    assert(extract_rear_from_tuple(('a', 'b', 'c', 'd', 'e')) == 'd')\n    assert(extract_rear_from_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == 'd')\n    \n    print(\"Test passed!\")\n    print()\n    \ndef test_extract_all_except_first_from_tuple():\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(reversed([i[-1] for i in test_tuple]))\n",
        "num_ids": 25
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for tuple in test_tuple:\n        result.append(tuple[-1])\n    return tuple(result)\n",
        "num_ids": 36
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return 1 if x == list1[0] else 0\n    if x == list1[0]:\n        return 1 + count_element_in_list(list1[1:],x)\n    if x!= list1[0]:\n        return count_element_in_list(list1[1:],x)\n",
        "num_ids": 103
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0\n    for sublist in list1:\n        if x in sublist:\n            result += 1\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            c=c+1\n    return c\n",
        "num_ids": 42
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt = 0\n    for i in list1:\n        if x in i:\n            cnt += 1\n    return cnt\n",
        "num_ids": 34
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for l in list1:\n        if x in l:\n            count += 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            c += 1\n    return c\n",
        "num_ids": 42
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Your code here\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for number in nums:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # for i in range(len(nums)):\n    #     if i % 2 == 0:\n    #         yield nums[i]\n    #     else:\n    #         continue\n    #         # i += 2\n    #         # yield nums[i]\n    # return [i for i in range(len(nums)) if i % 2!= 0]\n    # return list(filter(lambda x: x % 2!= 0, nums))\n    # return list(map(lambda x: x % 2!= 0, nums))\n    return (i for i in range(len(nums)) if i % 2!= 0)\n",
        "num_ids": 157
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return nums[::2]\n",
        "num_ids": 11
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0,nums))\n",
        "num_ids": 22
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for i in nums:\n        if i%2!=0:\n            odd_nums.append(i)\n",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in nums:\n        if i % 2!= 0:\n            oddnumbers.append(i)\n    return oddnumbers\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = list()\n    for x in nums:\n        if x % 2!= 0:\n            odd_numbers.append(x)\n    return odd_numbers\n",
        "num_ids": 47
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda n : n%2,nums))\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnums = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            oddnums.append(nums[i])\n",
        "num_ids": 49
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    months = {1:\"JAN\",2:\"FEB\",3:\"MAR\",4:\"APR\",5:\"MAY\",6:\"JUN\",7:\"JUL\",8:\"AUG\",9:\"SEP\",10:\"OCT\",11:\"NOV\",12:\"DEC\"}\n    month = dt[0:3]\n    d = int(dt[4:6])\n    y = int(dt[6:10])\n    mon = months[int(month)]\n    dt = f\"{d}-{mon}-{y}\"\n    return dt\ndef validate_pin(pin):\n    '''\n    Write a function to validate pin numbers\n    '''\n    if re.match(r\"^[1-9][0-9]{4}$\", pin):\n        return True\n    else:\n        return False\ndef validate_name(name):\n    '''\n    Write a function to validate name\n    '''\n    if re.match(r\"^[A-Za-z ]*$\", name):\n        return True\n    else:\n        return False\ndef calculate_ranges(a_list):\n    '''\n    Write a function to calculate ranges\n    '''\n    list_1 = []\n    list_2 = []\n    for i in range(len(a_list)):\n        if i == 0:\n            list_1.append(a_list[i])\n        else:\n            list_2.append(a_list[i])\n    list_1.sort()\n    list_2.sort()\n    list_3 = list_1 + list_2\n    list_3.sort()\n    return list_3\ndef combine_list(a_list):\n    '''\n    Write a function to combine two lists into a new list\n    '''\n    combined_list = []\n    for i in range(len(a_list)):\n        combined_list.append(a_list[i])\n    return combined_list\ndef convert_int_to_string(a_list):\n    '''\n    Write a function to convert integers to strings.\n    '''\n    new_list = []\n    for i in range(len(a_list)):\n        new_list.append(str(a_list[i]))\n    return new_list\ndef sort_dict(dict1):\n    '''\n    Write a function to sort the dictionary by date\n    '''\n    list1 = dict1.keys()\n    list1.sort()\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    return list2\ndef validate_phone_number(ph_num):\n    '''\n    Write a function to validate phone numbers\n    '''\n    if re.match(r'^\\d{3}\\-\\d{3,4}\\-\\d{4}$', ph_num):\n        return True\n    else:\n        return False\ndef validate_course_list(c_list):\n    '''\n    Write a function to validate course list\n    '''\n    if len(c_list)!= 6:\n        return False\n    else:\n        return True\ndef validate_course_id(c_id):\n    '''\n    Write a function to validate course ids\n    '''\n    if re.match(r'^\\d{4}$',c_id):\n        return True\n    else:\n        return False\ndef validate_fees_list(fees):\n    '''\n    Write a function to validate fees list\n    '''\n    if len(fees) == 6:\n        return True\n    else:\n        return False\ndef validate_fees_id(f_id):\n    '''\n    Write a function to validate fees ids\n    '''\n    if re.match(r'^\\d{6}$',f_id):\n        return True\n    else:\n        return False\ndef get_val(name):\n    '''\n    Write a function to get the value of a key in dictionary\n    '''\n    if name in name_dict:\n        return name_dict[name]\n    else:\n        return -1\ndef count_words(text):\n    '''\n    Write a function to count words in text\n    '''\n    text = text.lower()\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    text = text.replace('-',' ')\n    text = text.replace('_',' ')\n    text = text.replace('*',' ')\n    text = text.replace('\\'',' ')\n    text = text.replace('?',' ')\n    text = text.replace('!',' ')\n    text = text.replace(';',' ')\n    text = text.replace(':',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('/',' ')\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    text = text.replace('-',' ')\n    text = text.replace('_',' ')\n    text = text.replace('*',' ')\n    text = text.replace('\\'',' ')\n    text = text.replace('?',' ')\n    text = text.replace('!',' ')\n    text = text.replace(';',' ')\n    text = text.replace(':',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('/',' ')\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    text = text.replace('-',' ')\n    text = text.replace('_',' ')\n    text = text.replace('*',' ')\n    text = text.replace('\\'',' ')\n    text = text.replace('?',' ')\n    text = text.replace('!',' ')\n    text = text.replace(';',' ')\n    text = text.replace(':',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('/',' ')\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    text = text.replace('-',' ')\n    text = text.replace('_',' ')\n    text = text.replace('*',' ')\n    text = text.replace('\\'',' ')\n    text = text.replace('?',' ')\n    text = text.replace('!',' ')\n    text = text.replace(';',' ')\n    text = text.replace(':',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('/',' ')\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    text = text.replace('-',' ')\n    text = text.replace('_',' ')\n    text = text.replace('*',' ')\n    text = text.replace('\\'',' ')\n    text = text.replace('?',' ')\n    text = text.replace('!',' ')\n    text = text.replace(';',' ')\n    text = text.replace(':',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('/',' ')\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    text = text.replace('-',' ')\n    text = text.replace('_',' ')\n    text = text.replace('*',' ')\n    text = text.replace('\\'',' ')\n    text = text.replace('?',' ')\n    text = text.replace('!',' ')\n    text = text.replace(';',' ')\n    text = text.replace(':',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('/',' ')\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    text = text.replace('-',' ')\n    text = text.replace('",
        "num_ids": 989
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = str(dt)\n    dt = dt.split('-')\n    dt = '-'.join(dt)\n    dt = dt.split(' ')\n    dt = dt[0]\n    return dt\n",
        "num_ids": 57
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    date = date[::-1]\n    new_date = '-'.join(date)\n    return new_date\n    \n    \ndef get_date_format(dt):\n    '''\n    Write a function to convert a date of dd-mm-yyyy format to yyyy-mm-dd format.\n    '''\n    date = dt.split('-')\n    date = date[::-1]\n    date = '-'.join(date)\n    return date\n    \n    \ndef get_time_format(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    hour = time.split(':')[0]\n    minute = time.split(':')[1]\n    second = time.split(':')[2]\n    return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_ampm_time_format(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hh:mm AM/PM format.\n    '''\n    if time == '12:00:00 AM':\n        return '00:00:00 AM'\n    elif time == '12:00:00 PM':\n        return '12:00:00 PM'\n    else:\n        hour = time.split(':')[0]\n        minute = time.split(':')[1]\n        second = time.split(':')[2]\n        return '{0}:{1}:{2} PM'.format(hour, minute, second)\n    \n    \ndef get_full_time_format(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    hour = time.split(':')[0]\n    minute = time.split(':')[1]\n    second = time.split(':')[2]\n    return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_ampm_full_time_format(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hh:mm AM/PM format.\n    '''\n    if time == '12:00:00 AM':\n        return '00:00:00 AM'\n    elif time == '12:00:00 PM':\n        return '12:00:00 PM'\n    else:\n        hour = time.split(':')[0]\n        minute = time.split(':')[1]\n        second = time.split(':')[2]\n        return '{0}:{1}:{2} PM'.format(hour, minute, second)\n    \n    \ndef get_time_in_range(time1, time2):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    if time1 == time2:\n        return '{0}:{1}:{2}'.format(time1.split(':')[0], time1.split(':')[1], time1.split(':')[2])\n    if time2 == '12:00:00 AM':\n        return '00:00:00'\n    elif time2 == '12:00:00 PM':\n        return '12:00:00'\n    else:\n        hour = time1.split(':')[0]\n        minute = time1.split(':')[1]\n        second = time1.split(':')[2]\n        hour2 = time2.split(':')[0]\n        minute2 = time2.split(':')[1]\n        second2 = time2.split(':')[2]\n        return '{0}:{1}:{2}'.format(hour, minute, second)\n        \n        \ndef get_ampm_time_in_range(time1, time2):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    if time1 == time2:\n        return '{0}:{1}:{2}'.format(time1.split(':')[0], time1.split(':')[1], time1.split(':')[2])\n    elif time2 == '12:00:00 AM':\n        return '00:00:00'\n    elif time2 == '12:00:00 PM':\n        return '12:00:00'\n    else:\n        hour = time1.split(':')[0]\n        minute = time1.split(':')[1]\n        second = time1.split(':')[2]\n        hour2 = time2.split(':')[0]\n        minute2 = time2.split(':')[1]\n        second2 = time2.split(':')[2]\n        return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_full_time_in_range(time1, time2):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    if time1 == time2:\n        return '{0}:{1}:{2}'.format(time1.split(':')[0], time1.split(':')[1], time1.split(':')[2])\n    elif time2 == '12:00:00 AM':\n        return '00:00:00 AM'\n    elif time2 == '12:00:00 PM':\n        return '12:00:00 PM'\n    else:\n        hour = time1.split(':')[0]\n        minute = time1.split(':')[1]\n        second = time1.split(':')[2]\n        hour2 = time2.split(':')[0]\n        minute2 = time2.split(':')[1]\n        second2 = time2.split(':')[2]\n        return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_ampm_full_time_in_range(time1, time2):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    if time1 == time2:\n        return '{0}:{1}:{2}'.format(time1.split(':')[0], time1.split(':')[1], time1.split(':')[2])\n    elif time2 == '12:00:00 AM':\n        return '00:00:00 AM'\n    elif time2 == '12:00:00 PM':\n        return '12:00:00 PM'\n    else:\n        hour = time1.split(':')[0]\n        minute = time1.split(':')[1]\n        second = time1.split(':')[2]\n        hour2 = time2.split(':')[0]\n        minute2 = time2.split(':')[1]\n        second2 = time2.split(':')[2]\n        return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_time_in_range_without_ampm(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    hour = time.split(':')[0]\n    minute = time.split(':')[1]\n    second = time.split(':')[2]\n    return '{0}:{1}:{2}'.format(hour, minute, second)\n    \n    \ndef get_ampm_time_in_range_without_ampm(time):\n    '''\n    Write a function to convert a time in hh:mm:ss format to hhmmss format.\n    '''\n    hour = time.split(':')[0]\n    minute = time.split(':')[1]\n    second = time.split(':')[2]\n    return '{0}:{1}:{2}'.format(hour, minute, second",
        "num_ids": 61
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = re.split('-|:',dt)\n    return '-'.join([d[2],d[1],d[0]])\n",
        "num_ids": 36
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #print(dt)\n    dt1 = dt.split('-')\n    return f\"{dt1[2]}-{dt1[1]}-{dt1[0]}\"\n",
        "num_ids": 47
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list = list(dt.split(\"-\"))\n    dt_list[0] = dt_list[0].lstrip('0')\n    dt_list[2] = dt_list[2].lstrip('0')\n    dt_list[1] = dt_list[1].lstrip('0')\n    date = dt_list[0] + \"-\" + dt_list[1] + \"-\" + dt_list[2]\n    return date\n",
        "num_ids": 116
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2}).*')\n    dt = pattern.findall(dt)\n    # print(dt)\n    date = \" \".join(dt[0])\n    # print(date)\n    return date\ndef check_numerical_range(num):\n    '''\n    Write a program to check whether the given number is within 100 of 100 or 200 or 300 or 400.\n    '''\n    # return num in range(100,400) or num in range(200,400) or num in range(300,400) or num in range(400,400)\n    # return num in range(100,400) and num in range(200,400) and num in range(300,400) and num in range(400,400)\n    pattern = re.compile(r'(\\d{1,2})-(\\d{1,2})-(\\d{2})')\n    dt = pattern.findall(num)\n    # print(dt)\n    year = \" \".join(dt[0])\n    # print(year)\n    if int(year) in range(100,400):\n        return True\n    else:\n        return False\ndef find_numerical_range(num):\n    '''\n    Write a program to check whether the given number is within 100 or 200 or 300 or 400.\n    '''\n    # return num in range(100,400) or num in range(200,400) or num in range(300,400) or num in range(400,400)\n    pattern = re.compile(r'(\\d{1,2})-(\\d{1,2})-(\\d{2})')\n    dt = pattern.findall(num)\n    # print(dt)\n    year = \" \".join(dt[0])\n    # print(year)\n    return int(year)\ndef find_numerical_range_again(num):\n    '''\n    Write a program to check whether the given number is within 100 or 200 or 300 or 400.\n    '''\n    # return num in range(100,400) or num in range(200,400) or num in range(300,400) or num in range(400,400)\n    pattern = re.compile(r'(\\d{1,2})-(\\d{1,2})-(\\d{2})')\n    dt = pattern.findall(num)\n    # print(dt)\n    year = \" \".join(dt[0])\n    # print(year)\n    return int(year)\ndef check_alphabets(st):\n    '''\n    Write a program to check whether the given string contains any alphabets.\n    '''\n    return any(c.isalpha() for c in st)\ndef check_lowercase(st):\n    '''\n    Write a program to check whether the given string contains any lowercase alphabets.\n    '''\n    return any(c.islower() for c in st)\ndef check_uppercase(st):\n    '''\n    Write a program to check whether the given string contains any uppercase alphabets.\n    '''\n    return any(c.isupper() for c in st)\ndef check_digit(st):\n    '''\n    Write a program to check whether the given string contains any digits.\n    '''\n    return any(c.isdigit() for c in st)\ndef check_special_character(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_2(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_3(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_4(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_5(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_6(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_7(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_8(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_9(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_10(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_11(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_12(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_13(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_14(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_15(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_16(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_17(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_18(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_19(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_20(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_21(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_22(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(c.isalnum() for c in st)\ndef check_special_character_23(st):\n    '''\n    Write a program to check whether the given string contains any special characters.\n    '''\n    return any(",
        "num_ids": 6
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    format = '%d-%m-%Y'\n    return dt.strftime(format)\n",
        "num_ids": 27
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    months_short = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    months_abbr = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']\n    months_abbr_short = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']\n    day = int(dt.split('-')[0])\n    month = months.index(dt.split('-')[1]) + 1\n    year = int(dt.split('-')[2])\n    date = months_abbr[month] +'' + str(day) + ',' + str(year)\n    return date\n",
        "num_ids": 227
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap >= 1:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n",
        "num_ids": 106
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    count = 1\n    while count < len(my_list):\n        for i in range(len(my_list)-count):\n            if my_list[i] > my_list[i+1]:\n                my_list[i], my_list[i+1] = my_list[i+1], my_list[i]\n        count = count*2\n",
        "num_ids": 89
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j > 0:\n                if my_list[j] < my_list[j-gap]:\n                    my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap = gap // 2\n",
        "num_ids": 110
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        gap = len(my_list) - i\n        while gap > 0:\n            for j in range(gap, len(my_list)):\n                if my_list[j] < my_list[j - gap]:\n                    my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n            gap = gap // 2\n    return my_list\n",
        "num_ids": 113
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j],my_list[j-gap] = my_list[j-gap],my_list[j]\n                j -= gap\n        gap //= 2\n    print(my_list)\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = 1\n    while gap <= length // 3:\n        for j in range(gap, length):\n            i = j\n            while i > 0:\n                if my_list[i] < my_list[i - gap]:\n                    my_list[i], my_list[i - gap] = my_list[i - gap], my_list[i]\n                i -= gap\n        gap = gap * 3\n    return my_list\n",
        "num_ids": 116
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = 1\n    while gap < length:\n        gap = gap * 3 + 1\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap / 3)\n",
        "num_ids": 126
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Edge case\n    if not my_list:\n        return []\n",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = 1\n    while gap < length:\n        gap = gap * 3 + 1\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n    return my_list\n",
        "num_ids": 115
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    print(f'\\n{test_tup1[0]} {test_tup1[1]} is {test_tup1[0]} and {test_tup1[1]} is {test_tup1[1]}')\n    print(f'{test_tup2[0]} {test_tup2[1]} is {test_tup2[0]} and {test_tup2[1]} is {test_tup2[1]}')\n    return test_tup1[0] == test_tup1[1] and test_tup1[0] == test_tup2[1] and test_tup2[0] == test_tup2[1]\n",
        "num_ids": 170
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(i for i in test_tup1 if i in test_tup2), tuple(i for i in test_tup1 if not i in test_tup2))\n",
        "num_ids": 48
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1[0] and tup2[0] for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 42
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] and test_tup2[i])\n    return and_tup\n",
        "num_ids": 59
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1]), (test_tup1[2] and test_tup2[2])\n",
        "num_ids": 59
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1[0] and tup2[0] for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 42
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1]), (test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1])\n",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 28
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n",
        "num_ids": 67
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*b**2 + b*c**2 - 2*a*c)/(2*a**2)\n",
        "num_ids": 31
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * b * c\n",
        "num_ids": 10
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    h = 1 / (a**2 + b**2)\n    x = np.linspace(0, 1)\n    y = h * x**2 + c\n    x_directrix = x[y == y.max()]\n    y_directrix = y[y == y.max()]\n    return x_directrix, y_directrix\n",
        "num_ids": 87
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(a,b)\n    y = (a**2 - b**2 + c**2)/(2 * a * b) * x + (a**2 - b**2 - c**2)/(2 * a * b)\n    plt.plot(x,y)\n    plt.show()\n",
        "num_ids": 80
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (c - b**2 / a) / (2 * a)\n",
        "num_ids": 20
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return lambda x: a*x**2+b*x+c\n",
        "num_ids": 19
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    \n    x = (c - a*c - b*a**2)/(2*b)\n    y = c + a*x + b*x**2\n    \n    return x, y\n    \n    \ndef parabola_roots(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    import math\n    \n    d = b**2 - 4*a*c\n    \n    if d >= 0:\n        x1 = ((-b) + math.sqrt(d))/(2*a)\n        x2 = ((-b) - math.sqrt(d))/(2*a)\n        \n        return x1, x2\n    \n    else:\n        return -1\n    \n    \ndef parabola_roots_recursive(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    import math\n    \n    def _parabola_roots_recursive(a, b, c, x):\n        '''\n        Recursive function to find the roots of a parabola.\n        '''\n        if a == 0:\n            y = c/x\n            return x, y\n        else:\n            d = b**2 - 4*a*c\n            \n            if d >= 0:\n                x1 = ((-b) + math.sqrt(d))/(2*a)\n                x2 = ((-b) - math.sqrt(d))/(2*a)\n                \n                return x1, x2\n            else:\n                return -1\n            \n    x, y = _parabola_roots_recursive(a, b, c, x)\n    \n    if x == -1:\n        return 'no roots'\n    else:\n        return x, y\n    \n    \ndef parabola_roots_iterative(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    import math\n    \n    def _parabola_roots_iterative(a, b, c, x):\n        '''\n        Iterative function to find the roots of a parabola.\n        '''\n        d = b**2 - 4*a*c\n        \n        while d >= 0:\n            x1 = ((-b) + math.sqrt(d))/(2*a)\n            x2 = ((-b) - math.sqrt(d))/(2*a)\n            \n            return x1, x2\n            \n        return -1\n    \n    x, y = _parabola_roots_iterative(a, b, c, x)\n    \n    if x == -1:\n        return 'no roots'\n    else:\n        return x, y\n    \n    \ndef parabola_roots_simplified_iterative(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    import math\n    \n    def _parabola_roots_simplified_iterative(a, b, c, x):\n        '''\n        Simplified iterative function to find the roots of a parabola.\n        '''\n        d = b**2 - 4*a*c\n        \n        while d >= 0:\n            x1 = ((-b) + math.sqrt(d))/(2*a)\n            x2 = ((-b) - math.sqrt(d))/(2*a)\n            \n            return x1, x2\n            \n        return -1\n    \n    x, y = _parabola_roots_simplified_iterative(a, b, c, x)\n    \n    if x == -1:\n        return 'no roots'\n    else:\n        return x, y\n    \n    \ndef parabola_roots_simplified_recursive(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    import math\n    \n    def _parabola_roots_simplified_recursive(a, b, c, x):\n        '''\n        Simplified recursive function to find the roots of a parabola.\n        '''\n        d = b**2 - 4*a*c\n        \n        if d >= 0:\n            x1 = ((-b) + math.sqrt(d))/(2*a)\n            x2 = ((-b) - math.sqrt(d))/(2*a)\n            \n            return x1, x2\n        \n        else:\n            return -1\n        \n    x, y = _parabola_roots_simplified_recursive(a, b, c, x)\n    \n    if x == -1:\n        return 'no roots'\n    else:\n        return x, y\n    \n    \ndef parabola_roots_simplified_recursive_iterative(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    import math\n    \n    def _parabola_roots_simplified_recursive_iterative(a, b, c, x):\n        '''\n        Simplified iterative recursive function to find the roots of a parabola.\n        '''\n        d = b**2 - 4*a*c\n        \n        while d >= 0:\n            x1 = ((-b) + math.sqrt(d))/(2*a)\n            x2 = ((-b) - math.sqrt(d))/(2*a)\n            \n            return x1, x2\n            \n        return -1\n    \n    x, y = _parabola_roots_simplified_recursive_iterative(a, b, c, x)\n    \n    if x == -1:\n        return 'no roots'\n    else:\n        return x, y\n    \n    \ndef parabola_roots_simplified_recursive_iterative_two(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    import math\n    \n    def _parabola_roots_simplified_recursive_iterative_two(a, b, c, x):\n        '''\n        Simplified iterative recursive function to find the roots of a parabola.\n        '''\n        d = b**2 - 4*a*c\n        \n        if d >= 0:\n            x1 = ((-b) + math.sqrt(d))/(2*a)\n            x2 = ((-b) - math.sqrt(d))/(2*a)\n            \n            return x1, x2\n        \n        else:\n            return -1\n    \n    x, y = _parabola_roots_simplified_recursive_iterative_two(a, b, c, x)\n    \n    if x == -1:\n        return 'no roots'\n    else:\n        return x, y\n    \n    \ndef parabola_roots_simplified_recursive_iterative_three(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    import math\n    \n    def _parabola_roots_simplified_recursive_iterative_three(a, b, c, x):\n        '''\n        Simplified iterative recursive function to find the roots of a parabola.\n        '''\n        d = b**2 - 4*a*c\n        \n        if d >= 0:\n            x1 = ((-b) + math.sqrt(d))/(2*a)\n            x2 = ((-b) - math.sqrt(d))/(2*a)\n            \n            return x1, x2\n        \n        else:\n            return -1\n    \n    x, y = _parabola_roots_simplified_recursive_iterative_three(a, b, c, x)\n    \n    if x == -1:\n        return 'no roots'\n    else:\n        return x, y\n    \n    \ndef parabola_roots_simplified_recursive_iterative_four(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n",
        "num_ids": 17
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0 and b == 0: \n        return []\n",
        "num_ids": 18
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = 0\n    x1 = 0\n    y1 = 0\n    m = a * c * 0.5\n    while (y1 ** 2 + x1 ** 2) <= m:\n        x1 = x1 + c * x1 / abs(x1)\n        y1 = y1 + c * y1 / abs(y1)\n        x = x + a * x / abs(x)\n        y = y + a * y / abs(y)\n    print(x1, y1)\n    return x1, y1\n",
        "num_ids": 134
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = [a, b, c]\n    return directrix\n",
        "num_ids": 19
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n",
        "num_ids": 30
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n            return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for item in list1:\n        if item in list2:\n            common_list.append(item)\n    if len(common_list) == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if(len(list1)>=1 and len(list2)>=1):\n        for item in list1:\n            if(item in list2):\n                return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common_list.append(i)\n    if len(common_list) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        for element2 in list2:\n            if element == element2:\n                return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == [] or list2 == []:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    result = False\n    for i in list1:\n        if i in list2:\n            result = True\n            break\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    q1 = area/2\n    q2 = area/2\n    \n    median = q2 + q2 - q1\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        if median > 0:\n            return median\n        elif median < 0:\n            return 0\n        else:\n            return median\n    else:\n        return 0\n        \n        \ndef median_trapezium_round(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        return area/2\n    else:\n        return area/2\n    \ndef median_trapezium_fast(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        if area > 0:\n            return area/2\n        elif area < 0:\n            return 0\n        else:\n            return area/2\n    else:\n        return 0\n    \ndef median_trapezium_fast_2(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        if area > 0:\n            return area/2\n        elif area < 0:\n            return 0\n        else:\n            return area/2\n    else:\n        return 0\n",
        "num_ids": 141
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #base1 and base2 are the length of the base of a trapezium\n    #height is the height of the trapezium\n    return ((base1*base2)/2)*height\n",
        "num_ids": 46
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half = (base1 + base2) / 2.0\n    h = base1 * base2\n    area = height / 2.0\n    return half + area * height / h\n",
        "num_ids": 45
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    if height < 0:\n        raise ValueError(\"height must be > 0\")\n    elif base1 < 0 or base2 < 0:\n        raise ValueError(\"Base must be > 0\")\n    elif height == 0 or base1 == 0 or base2 == 0:\n        raise ValueError(\"height, base1, and base2 must all be > 0\")\n    elif base1 + base2 == height:\n        return base1\n    elif base1 == 0 or base2 == 0:\n        return 0\n    \n    base = max(base1, base2)\n    height -= base\n    middle_point = base + height//2\n    height = height//2\n    \n    if base1 > base2:\n        base1, base2 = base2, base1\n    \n    if height == 0:\n        return (base1 + base2)\n    elif height == 1:\n        if base1 > base2:\n            return base1\n        else:\n            return base2\n    \n    return middle_point + median_trapezium(base1, middle_point, height) + median_trapezium(middle_point, base2, height)\n",
        "num_ids": 273
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*0.5+height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(\"the height of the trapezium is: {}\".format(height))\n    median = (base1 + base2)/2\n    print(\"the median length is: {}\".format(median))\n    return median\n",
        "num_ids": 54
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) *.5 + height / 2\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (height + base1 + base2)/2\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = height / 2\n    b = (height * (height + 1) ) / 2\n    c = (base1 + base2) / 2\n    return (a + b + c) / 2\n",
        "num_ids": 49
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n",
        "num_ids": 11
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0,len(arr)):\n        if(arr[i]>number):\n            return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n",
        "num_ids": 11
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i]>number:\n            return True\n    return False\n    \nprint(check_greater([1, 2, 4, 3, 5], 5))\n",
        "num_ids": 56
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[number] >= number:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'(a.*?b.*?\\ba.*?)', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall(r'a+b', text)\n",
        "num_ids": 18
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab')\n    if re.match(pattern, text):\n        return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile('ab+')\n    #matches = pattern.search(text)\n    #if matches:\n    #    return matches.span()\n    #else:\n    #    return None\n",
        "num_ids": 53
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    True\n    '''\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    True\n    '''\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    True\n    '''\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    True\n    '''\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    True\n    '''\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    True\n    '''\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    True\n    '''\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    True\n    '''\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    True\n    '''\n    \ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty one or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty two or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty three or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty four or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty five or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty six or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    Expected Output:\n    False\n    '''\n    \ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty seven or more b's.\n    '''\n    #return text.startswith('abb')\n    #return True\n    '''\n    E",
        "num_ids": 4
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a = re.search(r\"a+b\", text)\n    if a:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('ab+', text)\n    # return re.search('a{1,}b+', text)\n",
        "num_ids": 32
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if not text or not isinstance(text,str):\n        return False\n    pattern = r'a+b'\n    return re.search(pattern,text) is not None\n",
        "num_ids": 44
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)[-1]\n",
        "num_ids": 12
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)\nprint(last_Digit(120)) #11\n",
        "num_ids": 21
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if not isinstance(n, int):\n        raise TypeError('last_Digit : n must be integer')\n    return str(n)[-1]\n",
        "num_ids": 39
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        while (n!= 0):\n            rem = n % 10\n            n = n // 10\n        return rem\n",
        "num_ids": 57
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n % 10)\n",
        "num_ids": 11
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    n = abs(n)\n    while (n) :\n        n = n // 10\n    return n % 10\n",
        "num_ids": 42
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    num = n\n    while(num!= 0) :\n        num = num // 10\n        print(num)\n    print(num)\n    return num\nprint(last_Digit(1745456))\n",
        "num_ids": 52
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    ans = []\n    for i in list1:\n        if i < 0:\n            ans.append(i)\n    return ans\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    a = []\n    for i in range(len(list1)):\n        a.append(-list1[i])\n    return a\n    ",
        "num_ids": 36
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_no = []\n    for i in list1:\n        if i > 0:\n            neg_no.append(-1*i)\n        else:\n            continue\n    return neg_no\n",
        "num_ids": 49
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    a = []\n    for i in range(len(list1)):\n        a.append(list1[i])\n    for i in range(len(a)):\n        if a[i] < 0:\n            a[i] = -a[i]\n    return a\n",
        "num_ids": 69
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [item for item in list1 if item < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    x=[]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            x.append(list1[i])\n    print(x)\nneg_nos([-1,-2,0,5,6])",
        "num_ids": 63
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = list(list1)\n    list1.sort(reverse=True)\n    list1 = list(set(list1))\n    list1 = list(map(int,list1))\n    return list1\n",
        "num_ids": 54
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l=[]\n    for i in range(0,len(list1)):\n        if list1[i]<0:\n            l.append(list1[i])\n    return l\n",
        "num_ids": 48
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(0,len(list1)):\n        list1[i] = -list1[i]\n    return list1\nlist1 = [-12, 5, -1, -4, -5]\nprint(\"Given list is\", list1)\nprint(\"Negative numbers in list:\", neg_nos(list1))",
        "num_ids": 80
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i=0\n    new_str = \"\"\n    while i < len(str1):\n        if str1[i]!= \" \":\n            if str1[i]!= \"\\n\" and str1[i]!= \"\\t\":\n                new_str += str1[i]\n            else:\n                pass\n        i+=1\n    return new_str\n",
        "num_ids": 90
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    '''\n    This is not really required, but it's a good example of\n    how to implement a function, and should give you some\n    examples of the various kinds of ways to do this.\n    '''\n    '''\n    This is a very good example of the problem of the\n    sequence in which one character appears more than\n    once in a string.\n    '''\n    '''\n    return \"\".join([i for i in str1 if i not in str1[::2]])\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # return str1.replace('o',' ')\n    return \"\".join(filter(lambda x: x%2 == 0, str1))\n",
        "num_ids": 36
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_list = []\n    for i in str1:\n        if i.isdigit():\n            odd_list.append(i)\n    odd_list.reverse()\n    new_str = ''.join(odd_list)\n    return new_str\n",
        "num_ids": 64
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i.isdigit()])\n",
        "num_ids": 23
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    length = len(str1)\n    for i in range(length):\n        if str1[i] % 2 == 1:\n            str1 = str1[:i] + str1[i + 1:]\n    return str1\n",
        "num_ids": 57
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_char = ''\n    for i in range(len(str1)):\n        if ord(str1[i]) % 2 == 0:\n            odd_char += str1[i]\n    return odd_char\n    \n",
        "num_ids": 56
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(' ', '')\n",
        "num_ids": 13
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i % 2 == 0:\n            new_str = new_str + i\n",
        "num_ids": 37
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list.sort()\n    tup_cnt = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] > test_list[i+1]:\n            tup_cnt += 1\n    return tup_cnt\n",
        "num_ids": 70
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    if len(test_list) < 2:\n        return count\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for a,b in zip(test_list, reversed(test_list)):\n        if a == b:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i][0] < test_list[i+1][0] and test_list[i][1] > test_list[i+1][1]:\n            total += 1\n    return total\n",
        "num_ids": 74
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for tup in test_list:\n        if tup[0] < tup[1]:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([x for x in test_list if is_bidirectional(x)])\n",
        "num_ids": 24
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your code here\n    # ###############################################################################\n    # # Solution 1:\n    # count_tuple = 0\n    # for i in test_list:\n    #     for j in test_list:\n    #         if (i[0] == j[1]) or (i[1] == j[0]):\n    #             count_tuple += 1\n    #     print(count_tuple)\n    #     count_tuple = 0\n    # ###############################################################################\n    # # Solution 2:\n    # for i in test_list:\n    #     for j in test_list:\n    #         if (i[1] == j[0]) or (i[0] == j[1]):\n    #             count_tuple += 1\n    #     print(count_tuple)\n    #     count_tuple = 0\n    # ###############################################################################\n    # # Solution 3:\n    # count_tuple = 0\n    # for i in test_list:\n    #     for j in test_list:\n    #         if (i[0] == j[1]) or (i[1] == j[0]):\n    #             count_tuple += 1\n    #     print(count_tuple)\n    #     count_tuple = 0\n    # ###############################################################################\n    # # Solution 4:\n    # count_tuple = 0\n    # for i in test_list:\n    #     for j in test_list:\n    #         if (i[1] == j[0]) or (i[0] == j[1]):\n    #             count_tuple += 1\n    #     print(count_tuple)\n    #     count_tuple = 0\n    # ###############################################################################\n    # Solution 5:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[0] == j[1]) or (i[1] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 6:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[0]) or (i[0] == j[1]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 7:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[1]) or (i[0] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 8:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[1]) or (i[0] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 9:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[1]) or (i[0] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 10:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[0] == j[1]) or (i[1] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 11:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[0] == j[1]) or (i[1] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 12:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[0] == j[1]) or (i[1] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 13:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[0] == j[1]) or (i[1] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 14:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[0]) or (i[0] == j[1]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 15:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[0]) or (i[0] == j[1]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 16:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[1]) or (i[0] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 17:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[1]) or (i[0] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 18:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[0]) or (i[0] == j[1]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 19:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[1] == j[1]) or (i[0] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 20:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[0] == j[1]) or (i[1] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 21:\n    count_tuple = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[0] == j[1]) or (i[1] == j[0]):\n                count_tuple += 1\n        print(count_tuple)\n        count_tuple = 0\n    # ###############################################################################\n    # Solution 22:\n    count_tuple = 0\n    for i in test_list:\n        for ",
        "num_ids": 1997
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    odd_num = 0\n    even_num = 0\n    odd_pairs = []\n    even_pairs = []\n    for i in range(0, len(test_list)-1):\n        # print(i)\n        odd_pairs.append(test_list[i][0])\n        even_pairs.append(test_list[i][1])\n    # print(odd_pairs)\n    # print(even_pairs)\n    for i in range(0, len(odd_pairs)):\n        for j in range(0, len(even_pairs)):\n            if(odd_pairs[i] == even_pairs[j]):\n                odd_num = odd_num + 1\n    print(odd_num)\n    # for i in range(0, len(odd_pairs)):\n    #     for j in range(0, len(even_pairs)):\n    #         if(odd_pairs[i] == even_pairs[j]):\n    #             even_num = even_num + 1\n    # print(odd_num)\n",
        "num_ids": 264
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    res = 0\n    for i, (i_1, i_2) in enumerate(test_list):\n        for j, (j_1, j_2) in enumerate(test_list):\n            if i_1 == j_2 and i_2 == j_1:\n                res += 1\n    return res\n",
        "num_ids": 79
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_pairs = []\n    for (a, b) in test_list:\n        tuple_pairs.append((a, b))\n        tuple_pairs.append((b, a))\n    return len(set(tuple_pairs))\n",
        "num_ids": 65
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    L = L[0]\n    \n    for i in range(1, len(L)):\n        L = int(L + str(L[i]) + '00')\n    \n    return L\n",
        "num_ids": 52
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "num_ids": 9
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return L.pop()\n",
        "num_ids": 9
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # if not isinstance(L, list):\n    #     raise TypeError('The parameter must be a list')\n    # if any([not isinstance(i, int) for i in L]):\n    #     raise ValueError('The parameter must be a list of integers')\n    # if any([i < 0 for i in L]):\n    #     raise ValueError('The parameter must be a list of integers')\n    # if any([i > 9999 for i in L]):\n    #     raise ValueError('The parameter must be a list of integers')\n    if L!= sorted(L):\n        L.sort()\n    return sum(L)\n",
        "num_ids": 154
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    l = L\n    m = int(0)\n    for i in l:\n        m = m + i\n    return m\n",
        "num_ids": 33
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(L).replace(\",\",\"\"))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "num_ids": 9
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "num_ids": 9
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return None\n    return reduce(lambda x,y:x*y, L)\n",
        "num_ids": 29
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([int(i) for i in L])\n",
        "num_ids": 16
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.split()\n    adverbs_list = []\n    for i in range(0, len(text)-1):\n        if text[i] in ['am','are','is','was','were','be','being']:\n            adverbs_list.append(i)\n    return adverbs_list\n",
        "num_ids": 75
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    verb_list = ['get','kill','eat','speak','think','wear','have','eat','use','use','start','end','run','jump','run','jump','scream','run','say','come','run','jump','jump','ride','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump','jump',",
        "num_ids": 2009
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text.find(\"adverb\") == -1:\n        return (\"No Adverbs\")\n    else:\n        position = \"\"\n        index = 0\n        for word in text:\n            if word == \"and\":\n                position += \" and \"\n            elif word == \"every\":\n                position += \" every \"\n            elif word == \"if\":\n                position += \" if \"\n            elif word == \"or\":\n                position += \" or \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"a\":\n                position += \" a \"\n            elif word == \"an\":\n                position += \" an \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"during\":\n                position += \" during \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"over\":\n                position += \" over \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"round\":\n                position += \" round \"\n            elif word == \"off\":\n                position += \" off \"\n            elif word == \"down\":\n                position += \" down \"\n            elif word == \"off\":\n                position += \" off \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"only\":\n                position += \" only \"\n            elif word == \"whole\":\n                position += \" whole \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"than\":\n                position += \" than \"\n            elif word == \"if\":\n                position += \" if \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"further\":\n                position += \" further \"\n            elif word == \"during\":\n                position += \" during \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"or\":\n                position += \" or \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"down\":\n                position += \" down \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"during\":\n                position += \" during \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"round\":\n                position += \" round \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"to\":\n                position += \" to \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"every\":\n                position += \" every \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"so\":\n                position += \" so \"\n            elif word == \"when\":\n                position += \" when \"\n            elif word == \"if\":\n                position += \" if \"\n            elif word == \"on\":\n                position += \" on \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"begins\":\n                position += \" begins \"\n            elif word == \"to\":\n                position += \" to \"\n            elif word == \"to\":\n                position += \" to \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"about\":\n                position += \" about \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"a\":\n                position += \" a \"\n            elif word == \"an\":\n                position += \" an \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"after\":\n                position += \" after \"\n            elif word == \"every\":\n                position += \" every \"\n            elif word == \"round\":\n                position += \" round \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"as\":\n                position += \" as \"\n            elif word == \"or\":\n                position += \" or \"\n            elif word == \"than\":\n                position += \" than \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"every\":\n                position += \" every \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"of\":\n                position += \" of \"\n            elif word == \"a\":\n                position += \" a \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"that\":\n                position += \" that \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"at\":\n                position += \" at \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"and\":\n                position += \" and \"\n            elif word == \"before\":\n                position += \" before \"\n            elif word == \"for\":\n                position += \" for \"\n            elif word == \"it\":\n                position += \" it \"\n            elif word == \"the\":\n                position += \" the \"\n            elif word == \"with\":\n                position += \" with \"\n            elif word == \"in\":\n                position += \" in \"\n            elif word == \"it\":\n            ",
        "num_ids": 2009
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = re.findall('(.*) to', text)\n    adverb_pos_list = re.findall('(.*).(.*)', text)\n    print(adverb_pos_list)\n    print(adverb_list)\n",
        "num_ids": 64
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.finditer(r\"(?i)[a-zA-Z]*\\b(?:ad|to)\\b(?:\\s|\\,\\s|\\.)*\",text)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n
        "num_ids": 2009
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = re.sub('[^A-Za-z0-9]+', '', text.lower()).replace(\"'s\",\" '\")\n    pattern = r\"(?<=[a-z])(?P<adverb>ad|really|perfectly)[\\S ]+(?=\\W)\"\n    adverb_matches = re.finditer(pattern, text, re.I)\n    return adverb_matches\n",
        "num_ids": 102
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    try:\n        sentence = re.sub(r'\\n|\\t', '', text)\n        sentence = sentence.strip()\n        print('Given sentence:', sentence)\n        sentence = sentence.split()\n        # print(sentence)\n        list_index = []\n        for i in range(len(sentence)):\n            if sentence[i] == 'often':\n                list_index.append(i)\n        list_index.append(len(sentence)-1)\n        print('Adverb Positions:', list_index)\n        return list_index\n    except Exception as e:\n        print('Please give a valid sentence')\n        return []\n",
        "num_ids": 160
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r'\\b(?:verb\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?\\s?\\d?",
        "num_ids": 2008
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(?:[^\\d\\W]\\w*)(?:(?:-|to|at|\\(|\\)|in|'\n        '\\$|on|or|that|at|by|\\d|for|against|between|into|through|from|out|above|below|'\n        'in|under|next|and|yet|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|and|if|'\n        'of|is|are|into|up|down|here|than|first|second|third|forth|fifth|sixth|seventh|eighth|'\n        'ninth|tenth|eleventh|twelfth|thirteenth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth|fourteenth|fifteenth|sixteenth|seventeenth|'\n        'eighteenth|nineteenth|twentieth|thirtieth",
        "num_ids": 2008
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #return 6*(l**2)\n    return (l*6)\n",
        "num_ids": 21
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\ndef cuboid(length,breadth,height):\n    '''\n    Write a function to calculate the surface area of a cuboid\n    '''\n    return 2 * (length*breadth + breadth*height + length*height)\ndef latlng(lat,lng):\n    '''\n    Write a function to take in two latitude and longitude values and\n    return their distance in meters using the Haversine formula.\n    '''\n    #lat, lng = latlng_values\n    #import math\n    #earth_radius = 3958.8 #in meters\n    #lat1 = radians(lat)\n    #lat2 = radians(lat_2)\n    #delta_lat = radians(lat_2 - lat_1)\n    #delta_lng = radians(lng_2 - lng_1)\n    #a = sin(delta_lat/2)**2 + cos(lat1) * cos(lat2) * sin(delta_lng/2)**2\n    #c = 2 * atan2(sqrt(a), sqrt(1-a))\n    #return earth_radius * c\n    #lat1 = radians(lat)\n    #lat2 = radians(lat_2)\n    #delta_lat = radians(lat_2 - lat_1)\n    #delta_lng = radians(lng_2 - lng_1)\n    #return (sin(delta_lat/2))**2 + (cos(lat1) * cos(lat2))**2 * (sin(delta_lng/2))**2\n    import math\n    earth_radius = 3958.8 #in meters\n    lat1 = radians(lat)\n    lat2 = radians(lat_2)\n    delta_lat = radians(lat_2 - lat_1)\n    delta_lng = radians(lng_2 - lng_1)\n    a = sin(delta_lat/2)**2 + cos(lat1) * cos(lat2) * sin(delta_lng/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    return earth_radius * c\n    \ndef get_neighboring_cities(city):\n    '''\n    Write a function that takes in a city and returns all the neighboring cities.\n    '''\n    #https://www.sparknotes.com/blog/python-fuzzy-string-comparison/\n    #import re\n    #r1 = 'd\\d$'\n    #r2 = '^[a-z]{3}'\n    #neighboring_cities = re.findall(r1,city) + re.findall(r2,city)\n    #neighboring_cities = [city]\n    import re\n    neighboring_cities = []\n    r1 = re.compile(r'\\d\\d$')\n    r2 = re.compile(r'^[a-z]{3}')\n    neighboring_cities = re.findall(r1,city) + re.findall(r2,city)\n    neighboring_cities.remove(city)\n    return neighboring_cities\n    #write a function to find the nearest city\ndef find_nearest_city(lat,lng,neighboring_cities):\n    '''\n    Write a function that takes in a list of cities and\n    a latitude and longitude value and returns the city\n    that is nearest to the given point.\n    '''\n    #use geopy\n    #import geopy\n    #from geopy.geocoders import Nominatim\n    #geolocator = Nominatim(user_agent=\"specify_your_app_name_here\")\n    #lat_1 = lat\n    #lng_1 = lng\n    #city = \"\"\n    #lat_2 = radians(lat)\n    #lng_2 = radians(lng)\n    #delta_lat = radians(lat_2 - lat_1)\n    #delta_lng = radians(lng_2 - lng_1)\n    #a = sin(delta_lat/2)**2 + cos(lat_1) * cos(lat_2) * sin(delta_lng/2)**2\n    #c = 2 * atan2(sqrt(a), sqrt(1-a))\n    #distance = earth_radius * c\n    #nearest_city = \"NA\"\n    #if distance <= 0.1:\n    #    nearest_city = geolocator.reverse(lat_1,lng_1).address\n    #    print(nearest_city)\n    #return nearest_city\n    #return \"N/A\"\n    #return \"NA\"\n    #using libraries\n    #import math\n    #import geopy\n    #geopy.geocoders.options.default_user_agent = \"specify_your_app_name_here\"\n    #import geopy.distance\n    #geopy.geocoders.options.default_user_agent = \"specify_your_app_name_here\"\n    #from geopy.geocoders import Nominatim\n    #from geopy.distance import vincenty\n    #geolocator = Nominatim(user_agent=\"specify_your_app_name_here\")\n    #lat_1 = radians(lat)\n    #lng_1 = radians(lng)\n    #city = \"NA\"\n    #nearest_city = \"NA\"\n    #lat_2 = radians(lat)\n    #lng_2 = radians(lng)\n    #delta_lat = radians(lat_2 - lat_1)\n    #delta_lng = radians(lng_2 - lng_1)\n    #a = sin(delta_lat/2)**2 + cos(lat_1) * cos(lat_2) * sin(delta_lng/2)**2\n    #c = 2 * atan2(sqrt(a), sqrt(1-a))\n    #distance = vincenty(lat_1, lng_1, lat_2, lng_2).miles\n    #if distance <= 0.1:\n    #    nearest_city = geolocator.reverse(lat_1,lng_1).address\n    #    print(nearest_city)\n    #return nearest_city\n    #return \"N/A\"\n    #return \"NA\"\n    #lat_1 = radians(lat)\n    #lng_1 = radians(lng)\n    #city = \"NA\"\n    #nearest_city = \"NA\"\n    #lat_2 = radians(lat)\n    #lng_2 = radians(lng)\n    #delta_lat = radians(lat_2 - lat_1)\n    #delta_lng = radians(lng_2 - lng_1)\n    #a = sin(delta_lat/2)**2 + cos(lat_1) * cos(lat_2) * sin(delta_lng/2)**2\n    #c = 2 * atan2(sqrt(a), sqrt(1-a))\n    #distance = earth_radius * c\n    #if distance <= 0.1:\n    #    nearest_city = geolocator.reverse(lat_1,lng_1).address\n    #    print(nearest_city)\n    #return nearest_city\n    #return \"N/A\"\n    #return \"NA\"\n    #import math\n    #import geopy\n    #geopy.geocoders.options.default_user_agent = \"specify_your_app_name_here\"\n    #from geopy.distance import vincenty\n    #geolocator = Nominatim(user_agent=\"specify_your_app_name_here\")\n    #lat_1 = radians(lat)\n    #lng_1 = radians(lng)\n    #city = \"NA\"\n    #nearest_city = \"NA\"\n    #lat_2 = radians(lat)\n    #lng_2 = radians(lng)\n    #delta_lat = radians(la",
        "num_ids": 1147
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*(l**2)\n    return surface_area\n",
        "num_ids": 21
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    cube_surface_area = 6 * (l * l)\n    return cube_surface_area\n",
        "num_ids": 27
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l**2\n    return 6*a\n",
        "num_ids": 15
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums:\n        total = 0\n        for i in range(0, len(nums)):\n            if nums[i] > 0:\n                total += 1\n        return total\n    else:\n        return 0\n",
        "num_ids": 56
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            c += 1\n    return c/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i >= 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]>=0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 47
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 0:\n            pos_count += 1\n    return pos_count\n",
        "num_ids": 48
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in nums:\n        if i > 0:\n            pos_count += 1\n    return pos_count / len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(0,len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 48
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=-1\n    for i in range(len(list1)):\n        if max<list1[i] and list1[i]<0:\n            max=list1[i]\n    return max\n",
        "num_ids": 52
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    \n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg\n",
        "num_ids": 62
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    n = len(list1)\n    largest_neg = float('-inf')\n    for i in range(n):\n        if list1[i] < 0 and list1[i] > largest_neg:\n            largest_neg = list1[i]\n    return largest_neg\n",
        "num_ids": 69
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_val=list1[0]\n    for i in range(1,len(list1)):\n        if max_val<0 and list1[i]>max_val:\n            max_val=list1[i]\n    return max_val\n",
        "num_ids": 64
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max= -999999999999999999999999999999999\n    for i in list1:\n        if i<0:\n            if i>max:\n                max = i\n    return max\n",
        "num_ids": 47
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = sorted(list1)\n    max_neg
        "num_ids": 2015
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_len = len(list1)\n    largest_num = -1\n    for i in range(0,list_len):\n        if(list1[i]<0):\n            if(list1[i]>largest_num):\n                largest_num = list1[i]\n    return largest_num\n",
        "num_ids": 77
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -99999999\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest\n",
        "num_ids": 37
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for i in list1:\n        if i < 0:\n            if i > largest:\n                largest = i\n    return largest\n",
        "num_ids": 39
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    temp = 0\n    for i in range(len(list1)):\n        if list1[i]<0:\n            if list1[i]>temp:\n                temp = list1[i]\n    return temp\n",
        "num_ids": 55
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for elem in test_list:\n        if len(elem) == K:\n            new_list.append(elem)\n    return new_list\n",
        "num_ids": 47
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n        if len(test_list[i]) < K:\n            test_list[i] = test_list[i] + (K - len(test_list[i])) * ('Null')\n    return test_list\n",
        "num_ids": 86
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i])!= K:\n            test_list[i] = test_list[i][:K]\n    return test_list\n",
        "num_ids": 55
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return (trim_tuple(test_list[1:], K) + test_list[:1] + trim_tuple(test_list[1:], K)) if test_list else test_list\n",
        "num_ids": 52
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_tuple_list = []\n    for each_tuple in test_list:\n        trim_tuple_list.append(each_tuple[:K])\n    return trim_tuple_list\n",
        "num_ids": 54
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for item in test_list:\n        trimmed_list.append(item[:K])\n",
        "num_ids": 35
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            test_list[i] = tuple(test_list[i])\n    return test_list\n    \ndef find_same_data(data_list):\n    '''\n    Write a function to find the record in the data_list that has the same name, city, and state.\n    Return a dictionary that includes the name, city, and state of the record.\n    '''\n    final_data_list = []\n    for i in range(len(data_list)):\n        for j in range(len(data_list)):\n            if data_list[i][0] == data_list[j][0] and data_list[i][1] == data_list[j][1] and data_list[i][2] == data_list[j][2]:\n                final_data_list.append(data_list[i])\n    data_dict = {}\n    for i in range(len(final_data_list)):\n        data_dict[i] = tuple(final_data_list[i])\n    return data_dict\n    \ndef main():\n    '''\n    Write a function to read the file name from the command line, get the data, and trim the data using trim_tuple()\n    and find the data with the same name, city, and state.\n    '''\n    file_name = input(\"Enter file name: \")\n    data = read_file(file_name)\n    data_list = data_to_list(data)\n    print(trim_tuple(data_list, 3))\n    print(find_same_data(data_list))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 88
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            test_list[i] = test_list[i] + ((K - len(test_list[i])) * (None,))\n    return test_list\n",
        "num_ids": 69
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # Input:\n    # test_list = [('h',1),('e','v'),('l',2),('l','o'),('o',3)]\n    # K = 2\n    \n    # Output:\n    # test_list = [('h',1),('e','v'),('l',2),('l','o')]\n",
        "num_ids": 84
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if type(test_tup1) is not tuple or type(test_tup2) is not tuple:\n        raise TypeError('Invalid Input')\n",
        "num_ids": 38
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_list1 = []\n    index_list2 = []\n",
        "num_ids": 18
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    first_tup = []\n    second_tup = []\n    for i in range(len(test_tup1)):\n        first_tup.append(test_tup1[i]*test_tup2[i])\n    for i in range(len(test_tup2)):\n        second_tup.append(test_tup1[i]*test_tup2[i])\n    return (tuple(first_tup),tuple(second_tup))\n",
        "num_ids": 122
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(x * y for (x, y) in zip(test_tup1, test_tup2))\n",
        "num_ids": 31
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i]*test_tup2[i])\n    return tuple(res)\n",
        "num_ids": 53
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return list(map(lambda x,y:x*y, test_tup1, test_tup2))\n    else:\n        raise Exception('Multiplication is not defined for tuples of different lengths')\n",
        "num_ids": 72
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(0, len(test_tup1)):\n        new_tup += (test_tup1[i]*test_tup2[i], )\n    return new_tup\n",
        "num_ids": 61
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n",
        "num_ids": 34
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [i*j for i, j in zip(test_tup1, test_tup2)]\n",
        "num_ids": 28
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    return(c.most_common(1))\n",
        "num_ids": 23
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] in tup:\n            count = count + 1\n    return count\ndef maximum(lst, count):\n    '''\n    Write a python function to find the maximum value of a list of numbers.\n    '''\n    max = lst[0]\n    for i in range(1, count):\n        if lst[i] > max:\n            max = lst[i]\n    return max\ndef check_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef fibonacci(n):\n    '''\n    Write a python function to find the fibonacci series upto n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\ndef smallest(lst):\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    count = len(lst)\n    if count == 0:\n        return 0\n    min = lst[0]\n    for i in range(1, count):\n        if lst[i] < min:\n            min = lst[i]\n    return min\ndef largest(lst):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    count = len(lst)\n    if count == 0:\n        return 0\n    max = lst[0]\n    for i in range(1, count):\n        if lst[i] > max:\n            max = lst[i]\n    return max\ndef sum_list(lst):\n    '''\n    Write a python function to find the sum of all elements in a list.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum = sum + lst[i]\n    return sum\ndef next_prime(n):\n    '''\n    Write a python function to find the next prime number in a given number.\n    '''\n    while n!= 1:\n        if check_prime(n):\n            if n == 2:\n                return 3\n            n = n - 1\n            for i in range(n + 1, 2 * n + 1):\n                if check_prime(i):\n                    n = i\n                    break\n        else:\n            n = n - 1\n    return n\ndef max_consecutive_sum(lst, n):\n    '''\n    Write a python function to find the maximum sum of n consecutive numbers in a list.\n    '''\n    count = len(lst)\n    sum = 0\n    if count < n:\n        return 0\n    for i in range(n):\n        sum = sum + lst[i]\n    max = sum\n    for i in range(n, count):\n        sum = sum + lst[i]\n        if sum > max:\n            max = sum\n    return max\ndef sum_even_or_odd(lst, n):\n    '''\n    Write a python function to find the sum of all even or odd numbers in a list.\n    '''\n    count = len(lst)\n    if count == 0:\n        return 0\n    sum = 0\n    for i in range(count):\n        if lst[i] % 2 == 0:\n            sum = sum + lst[i]\n        else:\n            sum = sum - lst[i]\n    return sum\ndef average(lst):\n    '''\n    Write a python function to find the average of a list.\n    '''\n    count = len(lst)\n    if count == 0:\n        return 0\n    return sum(lst) / count\ndef shortest_word(lst):\n    '''\n    Write a python function to find the shortest word in a list of words.\n    '''\n    word = lst[0]\n    count = len(lst)\n    for i in range(count):\n        if len(word) > len(lst[i]):\n            word = lst[i]\n    return word\ndef longest_word(lst):\n    '''\n    Write a python function to find the longest word in a list of words.\n    '''\n    word = lst[0]\n    count = len(lst)\n    for i in range(count):\n        if len(word) < len(lst[i]):\n            word = lst[i]\n    return word\ndef most_frequent(lst):\n    '''\n    Write a python function to find the most frequent element in a list.\n    '''\n    if len(lst) == 0:\n        return 0\n    count = 0\n    most_frequent = lst[0]\n    for i in range(len(lst)):\n        if lst[i] > lst[count]:\n            count = i\n    for i in range(count + 1, len(lst)):\n        if lst[i] > lst[count]:\n            count = i\n    return most_frequent\ndef common(lst1, lst2):\n    '''\n    Write a python function to find the common elements in two lists.\n    '''\n    count = 0\n    common = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2 and lst1[i] not in common:\n            common.append(lst1[i])\n    return common\ndef intersection(lst1, lst2):\n    '''\n    Write a python function to find the common elements in two lists.\n    '''\n    count = 0\n    common = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            count = count + 1\n            common.append(lst1[i])\n    return common\ndef union(lst1, lst2):\n    '''\n    Write a python function to find the union of two lists.\n    '''\n    count = 0\n    common = []\n    for i in range(len(lst1)):\n        if lst1[i] not in common:\n            count = count + 1\n            common.append(lst1[i])\n    for i in range(len(lst2)):\n        if lst2[i] not in common:\n            count = count + 1\n            common.append(lst2[i])\n    return common\ndef no_duplicates(lst):\n    '''\n    Write a python function to find the unique elements in a list.\n    '''\n    count = 0\n    unique = []\n    for i in range(len(lst)):\n        if lst[i] not in unique:\n            unique.append(lst[i])\n    return unique\ndef product_of_all_numbers(lst):\n    '''\n    Write a python function to find the product of all the numbers in a list.\n    '''\n    count = len(lst)\n    if count == 0:\n        return 0\n    product = 1\n    for i in range(count):\n        product = product * lst[i]\n    return product\ndef power_of_3(n):\n    '''\n    Write a python function to find the power of 3 in a given number.\n    '''\n    count = 0\n    if n < 1:\n        return 0\n    while n > 1:\n        if n % 3 == 0:\n            count = count + 1\n        n = n // 3\n    return count\ndef power_of_3_count(n):\n    '''\n    Write a python function to find the number of power of 3 in a given number.\n    '''\n    count = 0\n    if n < 1:\n        return 0\n    while n > 1:\n        if n % 3 == 0:\n            count = count + 1\n        n = n // 3\n    return count\ndef power_of_2(n):\n    '''\n    Write a python function to find the number of power of 2 in a given number.\n    '''\n    count = 0\n    if n < 1:\n        retur",
        "num_ids": 17
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n",
        "num_ids": 10
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    x=Counter(lst) \n    count = 0\n    for i in x:\n        if i in tup:\n            count+=1\n    return count \ntup1=(10,20,30,40,50,60,70,80,90)\ntup2=(40,50,60,80,90)\nx=count_Occurrence(tup1,tup2)\nprint(x)\n",
        "num_ids": 101
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return(Counter(lst).items())\nprint(count_Occurrence((1,3,4), [3,4,4,3]))\n",
        "num_ids": 37
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if tup.count(i) > 0:\n            count += tup.count(i)\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    count_list = Counter(lst)\n    for i in tup:\n        count_lst.append(count_list[i])\n    return tuple(count_lst)\n",
        "num_ids": 54
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = 0\n    for item in lst:\n        if item in tup:\n            counter = counter + 1\n    return counter\n",
        "num_ids": 34
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n",
        "num_ids": 28
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    final_list = []\n    for i in range(0, len(lst)):\n        c = lst.count(lst[i])\n        final_list.append(c)\n    return final_list\n    \ndef sum_Occurrence(tup, lst): \n    '''\n    Write a python function to sum all the occurence of all elements of list in a tuple.\n    '''\n    final_list = []\n    for i in range(0, len(lst)):\n        c = sum(lst)\n        final_list.append(c)\n    return final_list\n    \ndef multiply_Occurrence(tup, lst): \n    '''\n    Write a python function to multiply all the occurence of all elements of list in a tuple.\n    '''\n    final_list = []\n    for i in range(0, len(lst)):\n        c = lst[i]*(len(lst))\n        final_list.append(c)\n    return final_list\n    \ndef max_Occurrence(tup, lst): \n    '''\n    Write a python function to find the element which has maximum occurence in a tuple.\n    '''\n    final_list = []\n    for i in range(0, len(lst)):\n        c = Counter(lst).most_common()\n        if len(c)!= 1:\n            final_list.append(c)\n        else:\n            final_list.append(None)\n    return final_list\n",
        "num_ids": 77
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i ** 3)\n",
        "num_ids": 18
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(0,len(nums)):\n        nums[i]=nums[i]**3\n    return nums\n    \ncube_nums([1,2,3,4,5])\n",
        "num_ids": 54
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    ans = []\n    for i in nums:\n        ans.append(i**3)\n    return ans\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = list()\n    for num in nums:\n        cube_list.append(num ** 3)\n    print(cube_list)\n",
        "num_ids": 38
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for num in nums:\n        cube.append(num**3)\n    return cube\ncube_nums([1,2,3,4])\n",
        "num_ids": 43
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)\n    return nums\n",
        "num_ids": 23
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda num:num**3, nums))\nprint(cube_nums([1,2,3]))\n",
        "num_ids": 34
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 3\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    if n == 1:\n        s = 1\n    else:\n        s = n * cal_sum(n-1)\n    return s\n    ",
        "num_ids": 42
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 0\n    elif n%2==1:\n        return cal_sum(n-1)+(n*(n+1))\n    else:\n        return cal_sum(n-2)+(n*(n+1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2018
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    return n + cal_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def sum_perrin(n):\n        '''\n        Function to calculate the sum of perrin numbers.\n        '''\n        n = int(n)\n        if n == 1:\n            return 1\n        else:\n            return n + sum_perrin(n-1)\n    return sum_perrin(n)\n",
        "num_ids": 49
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))/2\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    while n:\n        sum+=n%10\n        n//=10\n    return sum\ndef get_num():\n    '''\n    Write a function to get a random number.\n    '''\n    import random\n    return random.randint(0,9)\n",
        "num_ids": 18
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = ''\n    if len(str) > l:\n        for i in range(l):\n            res += str[i]\n    elif len(str) < l:\n        for i in range(len(str)):\n            res += str[i]\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in range(l):\n        s = s + str[i]\n    return s\n    \nif __name__ == \"__main__\":\n    str = [\"Hi\", \"Hello\", \"Hello\", \"Hello\", \"Hello\"]\n    l = 5\n    result = extract_string(str, l)\n    print(result)",
        "num_ids": 84
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for i in range(l):\n        str_list.append(str[i][0:10])\n    return str_list\n",
        "num_ids": 40
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[l:]\n",
        "num_ids": 9
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n",
        "num_ids": 11
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for i in range(len(str)):\n        if i == l:\n            break\n        str_list.append(str[i])\n    return str_list\n",
        "num_ids": 49
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return ''.join(str[i] for i in range(l))\n",
        "num_ids": 20
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return_str = \"\"\n    for i in str:\n        return_str += i[0:l]\n    return return_str\n",
        "num_ids": 34
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < l:\n        return str[0:l]\n    else:\n        return str[0:l] + '...'\n",
        "num_ids": 38
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str)>l:\n        return str[:l]\n    else:\n        return str\n",
        "num_ids": 28
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n",
        "num_ids": 17
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace(\" \",\"\")\n    return text\ndef check_dots(text1):\n    '''\n    Write a function to check whether there are two consecutive dots (.) or not.\n    '''\n    if text1.count('.') == 2:\n        return True\n    else:\n        return False\ndef check_number(text1):\n    '''\n    Write a function to check whether the given text is a number or not.\n    '''\n    if re.search(r'[0-9]+',text1)!= None:\n        return True\n    else:\n        return False\ndef check_non_alnum(text1):\n    '''\n    Write a function to check whether the given text contains any non alphanumeric character or not.\n    '''\n    if re.search(r'[^a-zA-Z0-9]',text1)!= None:\n        return True\n    else:\n        return False\ndef check_unique(text1):\n    '''\n    Write a function to check whether the given text contains any duplicate characters or not.\n    '''\n    if text1.count(text1) > 1:\n        return True\n    else:\n        return False\ndef check_special_characters(text1):\n    '''\n    Write a function to check whether the given text contains any special characters or not.\n    '''\n    if re.search(r'[@$&^*()_-+=|{}[]:;,<.>/?]',text1)!= None:\n        return True\n    else:\n        return False\ndef check_length(text1):\n    '''\n    Write a function to check whether the given text is greater than or equal to 7 characters or not.\n    '''\n    if len(text1) >= 7:\n        return True\n    else:\n        return False\ndef check_alphabets(text1):\n    '''\n    Write a function to check whether the given text contains any alphabetical characters or not.\n    '''\n    if re.search(r'[a-zA-Z]+',text1)!= None:\n        return True\n    else:\n        return False\ndef check_special_characters_number(text1):\n    '''\n    Write a function to check whether the given text contains any special characters or not.\n    '''\n    if re.search(r'[@#$%^&*()_-+=|{}[]:;,<.>/?]',text1)!= None:\n        return True\n    else:\n        return False\ndef check_only_alphabets(text1):\n    '''\n    Write a function to check whether the given text contains any alphabets characters or not.\n    '''\n    if re.search(r'[a-zA-Z]+',text1)!= None:\n        return True\n    else:\n        return False\ndef check_no_punctuations(text1):\n    '''\n    Write a function to check whether the given text contains any punctuation characters or not.\n    '''\n    if re.search(r'[.,-()/;:!?\\,<>@#$%^&*_=+\\s]',text1)!= None:\n        return True\n    else:\n        return False\ndef check_upper_case_letter(text1):\n    '''\n    Write a function to check whether the given text contains any upper case letters or not.\n    '''\n    if re.search(r'[A-Z]+',text1)!= None:\n        return True\n    else:\n        return False\ndef check_lower_case_letter(text1):\n    '''\n    Write a function to check whether the given text contains any lower case letters or not.\n    '''\n    if re.search(r'[a-z]+',text1)!= None:\n        return True\n    else:\n        return False\ndef check_hyphen(text1):\n    '''\n    Write a function to check whether the given text contains any hyphen or not.\n    '''\n    if re.search(r'-',text1)!= None:\n        return True\n    else:\n        return False\ndef check_zero_in_list(text1):\n    '''\n    Write a function to check whether the given text contains any zero in the list or not.\n    '''\n    if re.search(r'\\b0+\\b',text1)!= None:\n        return True\n    else:\n        return False\ndef check_positive_numbers(text1):\n    '''\n    Write a function to check whether the given text contains any positive numbers or not.\n    '''\n    if re.search(r'\\b[+]\\d+\\b',text1)!= None:\n        return True\n    else:\n        return False\ndef check_positive_numbers_with_space(text1):\n    '''\n    Write a function to check whether the given text contains any positive numbers or not.\n    '''\n    if re.search(r'\\b[+]\\d+\\b',text1)!= None:\n        return True\n    else:\n        return False\ndef check_negative_numbers(text1):\n    '''\n    Write a function to check whether the given text contains any negative numbers or not.\n    '''\n    if re.search(r'\\b[-]\\d+\\b',text1)!= None:\n        return True\n    else:\n        return False\ndef check_negative_numbers_with_space(text1):\n    '''\n    Write a function to check whether the given text contains any negative numbers or not.\n    '''\n    if re.search(r'\\b[-]\\d+\\b',text1)!= None:\n        return True\n    else:\n        return False\ndef check_uppercase_letters(text1):\n    '''\n    Write a function to check whether the given text contains any uppercase letters or not.\n    '''\n    if re.search(r'[A-Z]+',text1)!= None:\n        return True\n    else:\n        return False\ndef check_lowercase_letters(text1):\n    '''\n    Write a function to check whether the given text contains any lowercase letters or not.\n    '''\n    if re.search(r'[a-z]+',text1)!= None:\n        return True\n    else:\n        return False\ndef check_numbers_with_hyphen(text1):\n    '''\n    Write a function to check whether the given text contains any numbers or not.\n    '''\n    if re.search(r'\\b\\d+[-]+\\d+\\b',text1)!= None:\n        return True\n    else:\n        return False\ndef check_emails(text1):\n    '''\n    Write a function to check whether the given text contains any email addresses or not.\n    '''\n    if re.search(r'[a-zA-Z]+\\@[a-z]+\\.(com|edu|org)',text1)!= None:\n        return True\n    else:\n        return False\ndef check_urls(text1):\n    '''\n    Write a function to check whether the given text contains any urls or not.\n    '''\n    if re.search(r'(https?://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|])',text1)!= None:\n        return True\n    else:\n        return False\ndef check_words_with_hyphen(text1):\n    '''\n    Write a function to check whether the given text contains any hyphenated words or not.\n    '''\n    if re.search(r'\\b[a-z]+\\-[a-z]+\\b',text1)!= None:\n        return True\n    else:\n        return False\ndef check_words_with_underscore(text1):\n    '''\n    Write a function to check whether the given text contains any underscore in the word or not.\n    '''\n    if re.search(r'\\b[a-z]+_[a-z]+\\b',text1)!= None:\n        return True\n    else:\n        return False\ndef check_words_with_asterisk(text1):\n    '''\n    Write a function to check whether the given text contains any asterisk in the word or not.\n    '''\n    if re",
        "num_ids": 5
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #text1 ='' + text1 +''\n    text1 = re.sub('\\s+', '', text1)\n    return text1\n    #return text1.strip()\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    #text1 = re.sub(r'[^\\w\\s]', '', text1)\n    text1 = re.sub(r'[^\\w\\s]+', '', text1)\n    return text1\n    #return text1.strip()\ndef check_spelling(text1):\n    '''\n    Write a function to check for spelling errors.\n    '''\n    #text1 = text1.lower()\n    #text1 = text1.strip()\n    #text1 = re.sub(r'[^\\w\\s]', '', text1)\n    #text1 = re.sub(r'\\s+', '', text1)\n    #text1 = text1.strip()\n    text1 = re.sub(r'[^\\w\\s]+', '', text1)\n    #text1 = re.sub(r'\\s+', '', text1)\n    return text1\n    #return text1.strip()\ndef remove_sentence_marks(text1):\n    '''\n    Write a function to remove sentence marks and special characters.\n    '''\n    #text1 = re.sub(r'[!?:;]', '', text1)\n    text1 = re.sub(r'[\\W\\d\\s]+', '', text1)\n    return text1\n    #return text1.strip()\ndef check_sentence_marks(text1):\n    '''\n    Write a function to check for sentence marks and special characters.\n    '''\n    #text1 = re.sub(r'[!?:;]', '', text1)\n    text1 = re.sub(r'[\\W\\d\\s]+', '', text1)\n    #text1 = re.sub(r'\\s+', '', text1)\n    return text1\n    #return text1.strip()\ndef remove_newlines(text1):\n    '''\n    Write a function to remove newlines.\n    '''\n    text1 = re.sub(r'[\\n]+','', text1)\n    return text1\n    #return text1.strip()\ndef check_newlines(text1):\n    '''\n    Write a function to check for newlines.\n    '''\n    text1 = re.sub(r'[\\n]+','', text1)\n    #text1 = re.sub(r'\\s+', '', text1)\n    return text1\n    #return text1.strip()\ndef remove_numbers(text1):\n    '''\n    Write a function to remove numbers.\n    '''\n    #text1 = re.sub(r'\\d+', '', text1)\n    #text1 = re.sub(r'\\s+', '', text1)\n    #text1 = re.sub(r'\\d+', '', text1)\n    text1 = re.sub(r'\\d+\\s', '', text1)\n    return text1\n    #return text1.strip()\ndef check_numbers(text1):\n    '''\n    Write a function to check for numbers.\n    '''\n    #text1 = re.sub(r'\\d+', '', text1)\n    #text1 = re.sub(r'\\s+', '', text1)\n    #text1 = re.sub(r'\\d+', '', text1)\n    text1 = re.sub(r'\\d+\\s', '', text1)\n    return text1\n    #return text1.strip()\ndef remove_extra_spaces(text1):\n    '''\n    Write a function to remove extra spaces.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1\n    #return text1.strip()\ndef check_extra_spaces(text1):\n    '''\n    Write a function to check for extra spaces.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1\n    #return text1.strip()\ndef check_separators(text1):\n    '''\n    Write a function to check for separators.\n    '''\n    text1 = re.sub(r'[,;:; ]', '', text1)\n    return text1\n    #return text1.strip()\ndef remove_parenthesized(text1):\n    '''\n    Write a function to remove parenthesized expressions.\n    '''\n    #text1 = re.sub(r'\\([^()]*\\)', '', text1)\n    #text1 = re.sub(r'[^(\\d)\\s]+', '', text1)\n    #text1 = re.sub(r'(\\d)\\s+', '', text1)\n    text1 = re.sub(r'\\s*\\([^()]*\\)\\s*', '', text1)\n    text1 = re.sub(r'\\s*[^(\\d)\\s]+\\s*', '', text1)\n    text1 = re.sub(r'\\s*(\\d)\\s+', '', text1)\n    text1 = re.sub(r'\\s*\\([^()]*\\)', '', text1)\n    return text1\n    #return text1.strip()\ndef check_parenthesized(text1):\n    '''\n    Write a function to check for parenthesized expressions.\n    '''\n    #text1 = re.sub(r'\\([^()]*\\)', '', text1)\n    #text1 = re.sub(r'[^(\\d)\\s]+', '', text1)\n    #text1 = re.sub(r'(\\d)\\s+', '', text1)\n    text1 = re.sub(r'\\s*\\([^()]*\\)\\s*', '', text1)\n    text1 = re.sub(r'\\s*[^(\\d)\\s]+\\s*', '', text1)\n    text1 = re.sub(r'\\s*(\\d)\\s+', '', text1)\n    text1 = re.sub(r'\\s*\\([^()]*\\)', '', text1)\n    return text1\n    #return text1.strip()\ndef remove_urls(text1):\n    '''\n    Write a function to remove URLs from the given string.\n    '''\n    #text1 = re.sub(r'http[^\\s]+', '', text1)\n    text1 = re.sub(r'http\\S+', '', text1)\n    return text1\n    #return text1.strip()\ndef check_urls(text1):\n    '''\n    Write a function to check for URLs in the given string.\n    '''\n    #text1 = re.sub(r'http[^\\s]+', '', text1)\n    text1 = re.sub(r'http\\S+', '', text1)\n    return text1\n    #return text1.strip()\ndef remove_phone_numbers(text1):\n    '''\n    Write a function to remove phone numbers from the given string.\n    '''\n    #text1 = re.sub(r'\\+?\\d{2,4}-?\\d{4,7}-?\\d{4}', '', text1)\n    #text1 = re.sub(r'\\d{2,4}-?\\d{4,7}-?\\d{4}', '', text1)\n    text1 = re.sub(r'\\+?\\d{2,4}-?\\d{4,7}-?\\d{4}', '', text1)\n    #text1 = re.sub(r'(\\d{2,4}-?\\d{4,7}-?\\d{4})', '', text1)\n    return text1\n    #return text1.strip()\ndef check_phone_numbers(text1):\n    '''\n    Write a function to check for phone numbers in the given string.\n    ''",
        "num_ids": 19
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1:\n        return text1.replace(' ','').replace('\\n','').replace('\\t','').replace('\\r','')\n    else:\n        return None\n",
        "num_ids": 48
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove_whitespaces(\"   \")\n    return text1.strip()\n",
        "num_ids": 21
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = re.sub('\\s+', '', text1)\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n",
        "num_ids": 19
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','',text1)\n",
        "num_ids": 19
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #res = re.sub(r'\\s+', \"\", text1)\n    \n    #res = re.sub(\"\\s+\", \"\", text1)\n    #res = re.sub(r'\\s+', '', text1)\n    return text1\n    \n    \ndef is_palindrome(text2):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    \n    if len(text2) < 1:\n        return False\n    \n    res = text2\n    \n    if len(text2) % 2 == 0:\n        res = text2[:len(text2)//2] + text2[len(text2)//2:]\n    else:\n        res = text2[:len(text2)//2]\n    return res == res[::-1]\n    \n    \ndef is_palindrome_2(text3):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    \n    # We can also check the first and last character\n    # if they are same\n    if len(text3) < 1:\n        return False\n    \n    i = 0\n    j = len(text3) - 1\n    \n    while i < j:\n        if text3[i]!= text3[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n    \n    \ndef is_palindrome_3(text4):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if len(text4) < 1:\n        return False\n    \n    first, second = 0, len(text4) - 1\n    \n    while first < second:\n        if text4[first]!= text4[second]:\n            return False\n        first += 1\n        second -= 1\n    \n    return True\n    \n    \ndef is_palindrome_4(text5):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if len(text5) < 1:\n        return False\n    \n    def is_palindrome_rec(text5, first, last):\n        if text5 == \"\" or first > last:\n            return True\n        if text5[first]!= text5[last]:\n            return False\n        return is_palindrome_rec(text5, first + 1, last - 1)\n    \n    return is_palindrome_rec(text5, 0, len(text5) - 1)\n    \n    \ndef is_palindrome_5(text6):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if len(text6) < 1:\n        return False\n    \n    res = text6[::-1]\n    \n    return text6 == res\n    \n    \ndef remove_duplicates(text7):\n    '''\n    Write a function to remove all duplicates from the given string.\n    '''\n    \n    if len(text7) < 1:\n        return \"\"\n    \n    res = \"\"\n    \n    for i in range(len(text7)):\n        if i == 0 or text7[i]!= text7[i-1]:\n            res += text7[i]\n    \n    return res\n    \n    \ndef remove_duplicates_2(text8):\n    '''\n    Write a function to remove all duplicates from the given string.\n    '''\n    if len(text8) < 1:\n        return \"\"\n    \n    res = \"\"\n    \n    for i in range(len(text8)):\n        if i == 0 or text8[i]!= text8[i-1]:\n            res += text8[i]\n    \n    return res\n    \n    \ndef remove_duplicates_3(text9):\n    '''\n    Write a function to remove all duplicates from the given string.\n    '''\n    if len(text9) < 1:\n        return \"\"\n    \n    res = \"\"\n    \n    i = 0\n    \n    while i < len(text9):\n        if i == 0 or text9[i]!= text9[i-1]:\n            res += text9[i]\n        i += 1\n    \n    return res\n    \n    \ndef remove_duplicates_4(text10):\n    '''\n    Write a function to remove all duplicates from the given string.\n    '''\n    if len(text10) < 1:\n        return \"\"\n    \n    res = \"\"\n    \n    i = 0\n    while i < len(text10):\n        if i == 0 or text10[i]!= text10[i-1]:\n            res += text10[i]\n            i += 1\n    \n    return res\n    \n    \ndef remove_duplicates_5(text11):\n    '''\n    Write a function to remove all duplicates from the given string.\n    '''\n    if len(text11) < 1:\n        return \"\"\n    \n    res = \"\"\n    \n    i = 0\n    while i < len(text11):\n        if i == 0 or text11[i]!= text11[i-1]:\n            res += text11[i]\n        i += 1\n    \n    return res\n    \n    \ndef remove_repeating_char(text12):\n    '''\n    Write a function to remove all repeating characters from the given string.\n    '''\n    if len(text12) < 1:\n        return \"\"\n    \n    res = \"\"\n    \n    i = 0\n    while i < len(text12):\n        if i == 0 or text12[i]!= text12[i-1]:\n            res += text12[i]\n        i += 1\n    \n    return res\n    \n    \ndef remove_repeating_char_2(text13):\n    '''\n    Write a function to remove all repeating characters from the given string.\n    '''\n    if len(text13) < 1:\n        return \"\"\n    \n    res = \"\"\n    \n    i = 0\n    while i < len(text13):\n        if i == 0 or text13[i]!= text13[i-1]:\n            res += text13[i]\n        i += 1\n    \n    return res\n    \n    \ndef is_palindrome_6(text14):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if len(text14) < 1:\n        return False\n    \n    i, j = 0, len(text14) - 1\n    \n    while i <= j:\n        if text14[i]!= text14[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n    \n    \ndef is_palindrome_7(text15):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if len(text15) < 1:\n        return False\n    \n    def is_palindrome_rec(text15, first, last):\n        if text15 == \"\" or first > last:\n            return True\n        if text15[first]!= text15[last]:\n            return False\n        return is_palindrome_rec(text15, first + 1, last - 1)\n    \n    return is_palindrome_rec(text15, 0, len(text15) - 1)\n    \n    \ndef is_palindrome_8(text16):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if len(text16) < 1:\n        return False\n    \n    def is_palindrome_rec(text16, first, last):\n        if text16 == \"\" or first > last:\n            return True\n        if text16[first]!= text16[last]:\n            return False\n        return is_palindrome_rec(text16, first + 1, last - 1)\n    \n    return is_palindrome_rec(text16, 0, len(text16) - 1)\n    \n    \ndef is_palindrome_9(text17):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n",
        "num_ids": 21
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return (sale_amount - actual_cost) \n",
        "num_ids": 34
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0:\n        return 0\n    else:\n        return actual_cost - sale_amount\n",
        "num_ids": 29
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        if actual_cost > sale_amount:\n            return (sale_amount/actual_cost)*100\n        else:\n            return 0\n    except TypeError:\n        return 0",
        "num_ids": 47
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if sale_amount < actual_cost else 0\n",
        "num_ids": 22
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = 0\n    if actual_cost > sale_amount: \n        loss_amount = actual_cost - sale_amount\n    return loss_amount\n",
        "num_ids": 40
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n        \ndef loss_amount_rec(actual_cost,sale_amount): \n    '''\n    Write a recursive function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return loss_amount_rec(actual_cost+sale_amount,sale_amount) + actual_cost\n    \ndef loss_amount_rec2(actual_cost,sale_amount): \n    '''\n    Write a recursive function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    elif sale_amount < actual_cost:\n        return loss_amount_rec2(actual_cost,sale_amount) + actual_cost\n    else:\n        return loss_amount_rec2(actual_cost+sale_amount,sale_amount) + actual_cost\n        \n        \ndef lottery(winners, tickets, draws, draws_won):\n    '''\n    Write a function that takes in the winning number of a lottery and returns the number of draws won by the lottery.\n    '''\n    draw_won = draws_won\n    for draw in range(draws):\n        if len(winners) == len(tickets):\n            return draw_won\n        ticket = tickets.pop()\n        if ticket in winners:\n            winners.remove(ticket)\n            draw_won += 1\n            return lottery(winners, tickets, draws, draw_won)\n            \ndef lottery2(winners, tickets, draws, draws_won):\n    '''\n    Write a function that takes in the winning number of a lottery and returns the number of draws won by the lottery.\n    '''\n    if len(winners) == len(tickets):\n        return draws_won\n    ticket = tickets.pop()\n    if ticket in winners:\n        winners.remove(ticket)\n        draws_won += 1\n        return lottery2(winners, tickets, draws, draws_won)\n    return lottery2(winners, tickets, draws, draws_won)\n",
        "num_ids": 88
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return (sale_amount - actual_cost) / actual_cost\n",
        "num_ids": 37
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount if actual_cost-sale_amount > 0 else 0\n",
        "num_ids": 24
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(range(1,n,2))\nprint(sumofFactors(12))\n",
        "num_ids": 25
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            sum += i\n            if i * i!= n :\n                sum += n//i\n    if n > 0 :\n        sum += n\n    return sum\n",
        "num_ids": 76
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n) :\n        if (n%i==0) : \n            if (i%2==0) : \n                sum=sum+i \n    return sum \n",
        "num_ids": 56
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        if (n % i == 0) :\n            sum = sum + i\n    print(sum)\n",
        "num_ids": 45
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (math.floor(n/2))+ (math.floor(n/3) +math.floor(n/4))+math.floor(n/6)\n    #return (math.floor(n/2))+ (math.floor(n/3) +math.floor(n/4))\n    #return math.floor(n/2) + math.floor(n/3) +math.floor(n/4)\n    #return (n-1)/2 + (n-1)/3 + (n-1)/4 + (n-1)/6 + (n-1)/8 + (n-1)/9 + (n-1)/10 + (n-1)/11\n",
        "num_ids": 163
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = [] \n    for i in range(1, n) : \n        if (n % i == 0) : \n            factors.append(i) \n    sum = 0\n    for j in factors : \n        if j % 2 == 0 : \n            sum = sum + j \n    return sum",
        "num_ids": 78
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            if(i%2==0):\n                sum=sum+i\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Function to find the sum of even factors of a number n.\n    sum_of_even_factors = 0\n",
        "num_ids": 30
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            total = total + i\n    return total\nprint(sumofFactors(12))\n",
        "num_ids": 51
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    print(\"\\n\\n-------->\", text_match_wordz.__name__, \"<--------\")\n    r = re.compile(r\"\\bz\\b\")\n    print(\"Match:\", r.search(text))\n    print(\"No Match:\", r.search(\"foo bar\"))\n",
        "num_ids": 72
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"\\bz\\b\"\n    x = re.search(pattern, text)\n    if x:\n        print(f\"Found 'z' word at index: {x.start()}\")\n    else:\n        print(\"z word not found\")\n    \ndef text_match_wordz",
        "num_ids": 74
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = 'z'\n    regex = '.*z.*'\n    if re.search(regex, text)!= None:\n        print('Match Found:'+ word)\n    else:\n        print('Match Not Found')\n",
        "num_ids": 56
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matches = re.findall(r'\\bz\\w+', text)\n    return matches\n",
        "num_ids": 27
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Your code here\n    match = re.findall('z',text)\n    return match\n",
        "num_ids": 25
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\b'\n    result = re.findall(pattern, text)\n    return result\nprint(text_match_wordz(\"This is a test of the z! regex!\"))\n",
        "num_ids": 55
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'[zZ]+',text)\n",
        "num_ids": 18
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Your code here\n    #pattern = re.compile(r\"z\")\n    #search_obj = pattern.search(text)\n    #return search_obj\n    #return pattern.findall(text)\n    for word in text.split(\" \"):\n        if \"z\" in word:\n            return word\n        else:\n            continue\n    return None\nprint(text_match_wordz(\"This is a test of the zipped function.\"))\n",
        "num_ids": 109
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.match(r\"z$\", text):\n        print(text)\n    else:\n        print(\"No match\")\n    \ntext_match_wordz(\"z\")\ntext_match_wordz(\"zebra\")\n",
        "num_ids": 56
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # in_text = re.findall(r\"z\",text)\n    in_text = re.findall(r\"\\w*z\\w*\",text)\n    if in_text:\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_31 = {1:31,2:28,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n    if monthnum2 in month_31.keys():\n        return True\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #define a monthnumb\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 185
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in month_days:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 0 and monthnum2 <= 12:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return 1\n        else:\n            return 0\n    else:\n        return \"invalid input\"\n",
        "num_ids": 86
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return 31\n    elif monthnum2 == 3:\n        return 31\n    elif monthnum2 == 4:\n        return 30\n    elif monthnum2 == 5:\n        return 31\n    elif monthnum2 == 6:\n        return 30\n    elif monthnum2 == 7:\n        return 31\n    elif monthnum2 == 8:\n        return 31\n    elif monthnum2 == 9:\n        return 30\n    elif monthnum2 == 10:\n        return 31\n    elif monthnum2 == 11:\n        return 30\n    elif monthnum2 == 12:\n        return 31\n    else:\n        return False\n",
        "num_ids": 177
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 0 or monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return True\n",
        "num_ids": 65
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 31\n    else:\n        return 30\ndef check_number_of_days_in_month(monthnum2):\n    '''\n    Write a function to check whether the given month contains 30 days or not.\n    '''\n    if monthnum2 == 2:\n        return 28\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 31\n    else:\n        return 30\ndef check_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if (year%4)==0:\n        if (year%100)==0:\n            if (year%400)==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print('The given number is january')\n    elif monthnum2 == 2:\n        print('The given number is february')\n    elif monthnum2 == 3:\n        print('The given number is march')\n    elif monthnum2 == 4:\n        print('The given number is april')\n    elif monthnum2 == 5:\n        print('The given number is may')\n    elif monthnum2 == 6:\n        print('The given number is june')\n    elif monthnum2 == 7:\n        print('The given number is july')\n    elif monthnum2 == 8:\n        print('The given number is august')\n    elif monthnum2 == 9:\n        print('The given number is september')\n    elif monthnum2 == 10:\n        print('The given number is october')\n    elif monthnum2 == 11:\n        print('The given number is november')\n    elif monthnum2 == 12:\n        print('The given number is december')\n    else:\n        print('The given number is invalid')\n    return None\n",
        "num_ids": 272
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 1:\n        return 31\n    else:\n        return 28\n",
        "num_ids": 25
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # for x in stringlist:\n    #     x = x[::-1]\n    for i, x in enumerate(stringlist):\n        stringlist[i] = x[::-1]\n    return stringlist\n",
        "num_ids": 55
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist.reverse()\n    \ndef reverse_string_list_rec(stringlist):\n    '''\n    Write a recursive function that takes a list of strings and reverses each string in the list.\n    '''\n    if len(stringlist) == 1:\n        return stringlist\n    else:\n        return reverse_string_list_rec(stringlist[1:]) + stringlist[:1]\n    \ndef rotate_string(string, n):\n    '''\n    Write a function that takes a string and an integer and returns a new string that is the string rotated n\n    places.\n    '''\n    return string[n:] + string[:n]\n    \ndef rotate_string_rec(string, n):\n    '''\n    Write a recursive function that takes a string and an integer and returns a new string that is the string\n    rotated n places.\n    '''\n    if len(string) == 1:\n        return string\n    else:\n        return rotate_string_rec(string[1:], n) + string[:1]\n    \ndef word_search(board, word):\n    '''\n    Write a function that takes a board list and a word to search for. The function returns True if and only if\n    the entire word is found in the grid.\n    '''\n    word_list = word.upper()\n    rows = len(board)\n    cols = len(board[0])\n    word_found = False\n    for row in range(rows):\n        for col in range(cols):\n            if board[row][col] == word_list[0]:\n                word_found = True\n                if word_found == True:\n                    if check_valid_index(board, word_list, row, col):\n                        word_list_copy = word_list.copy()\n                        word_list_copy.pop(0)\n                        word_list_copy = word_list_copy[::-1]\n                        for i in range(1, len(word_list_copy)):\n                            if board[row][col + i]!= word_list_copy[i]:\n                                break\n                        else:\n                            word_found = True\n                            break\n    return word_found\n    \ndef word_search_rec(board, word):\n    '''\n    Write a recursive function that takes a board list and a word to search for. The function returns True if and only if\n    the entire word is found in the grid.\n    '''\n    word_list = word.upper()\n    rows = len(board)\n    cols = len(board[0])\n    word_found = False\n    for row in range(rows):\n        for col in range(cols):\n            if board[row][col] == word_list[0]:\n                word_found = True\n                if word_found == True:\n                    if check_valid_index(board, word_list, row, col):\n                        word_list_copy = word_list.copy()\n                        word_list_copy.pop(0)\n                        word_list_copy = word_list_copy[::-1]\n                        for i in range(1, len(word_list_copy)):\n                            if board[row][col + i]!= word_list_copy[i]:\n                                break\n                        else:\n                            word_found = True\n                            break\n    return word_found\n",
        "num_ids": 214
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_list = []\n    for string in stringlist:\n        rev_list.append(string[::-1])\n    return rev_list\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_string = \"\"\n    for i in range(len(stringlist)):\n        rev_string = rev_string + stringlist[i][::-1]\n    return rev_string\n",
        "num_ids": 47
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n",
        "num_ids": 32
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    reverse_string_list = []\n    \n    for i in range(len(stringlist)):\n        reverse_string_list.append(stringlist[i][::-1])\n    \n    return reverse_string_list\n",
        "num_ids": 57
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 44
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    smallest = len(lst)\n    pos = 0\n    count = 0\n    for i in range(0,len(lst)):\n        if len(lst[i]) < smallest:\n            smallest = len(lst[i])\n            pos = i\n    return lst[pos]\n",
        "num_ids": 75
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sub_lst =[]\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if(len(lst[i:j+1])>len(min_sub_lst)):\n                min_sub_lst = lst[i:j+1]\n            else:\n                pass\n    return min_sub_lst\n",
        "num_ids": 102
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_item = None\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n            min_item = item\n    return min_item\n",
        "num_ids": 62
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    l = []\n    for i in range(0, len(lst)-1):\n        l.append(lst[i+1]-lst[i])\n    return l.index(min(l))\n",
        "num_ids": 86
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0][0]\n    min_lst = []\n    for i in lst:\n        if i[0] < min_len:\n            min_len = i[0]\n            min_lst = [i]\n        elif i[0] == min_len:\n            min_lst.append(i)\n    return min_lst\n",
        "num_ids": 94
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst==[]:\n        return -1\n    l=len(lst)\n    min_l=lst[0]\n    min_index=0\n    for i in range(0,l):\n        if lst[i]<min_l:\n            min_l=lst[i]\n            min_index=i\n    return min_index\n    \n",
        "num_ids": 92
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    res = []\n    for i in range(len(lst)):\n        if min_len > len(lst[i]):\n            min_len = len(lst[i])\n            res = []\n            res.append(lst[i])\n        elif min_len == len(lst[i]):\n            res.append(lst[i])\n    return res\n",
        "num_ids": 105
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst == []:\n        return None\n    else:\n        min = lst[0]\n        for i in range(len(lst)):\n            if len(lst[i]) < len(min):\n                min = lst[i]\n    return min\n    \n    \n    \ndef Find_Max(lst): \n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    if lst == []:\n        return None\n    else:\n        max = lst[0]\n        for i in range(len(lst)):\n            if len(lst[i]) > len(max):\n                max = lst[i]\n    return max\n    \ndef Sort_List_of_Sublists(lst): \n    '''\n    Write a python function to sort the sublist in the list.\n    '''\n    if lst == []:\n        return None\n    else:\n        lst.sort(key = len)\n    return lst\n",
        "num_ids": 34
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    min_len = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]!= lst[i-1] + 1:\n            min_len = lst[i]\n            break\n    print(lst[i])\n",
        "num_ids": 78
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key = len)\n",
        "num_ids": 14
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\nprint(rectangle_area(6,8))\n",
        "num_ids": 20
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = (2*l) + (2*b)\n    return perimeter\n",
        "num_ids": 22
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l==b:\n        return l*b\n    else:\n        return 2*(l+b)\n",
        "num_ids": 29
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # calculate the length and the width of the rectangle\n    l = int(input(\"Enter the length of the rectangle: \"))\n    b = int(input(\"Enter the width of the rectangle: \"))\n    # calculate the area\n    area = l*b\n    # return the area\n    return area\n",
        "num_ids": 71
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Take the input\n    str1 = input(\"Enter the string: \")\n    # Check if its uppercase\n    if str1.isupper():\n        # If yes then remove all uppercase from the string\n        return str1.replace(str1,\"\")\n    else:\n        # Else do nothing\n        return str1\n",
        "num_ids": 80
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile(\"[A-Z]+\")\n    result = regex.sub(\"\", str1)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    lst=[]\n    for i in range(len(str1)):\n        if ord(str1[i])<=ord('z'):\n            lst.append(str1[i])\n    return ''.join(lst)\n",
        "num_ids": 70
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #return str1.lower()\n    \n    return re.sub(r'[A-Z]+', '', str1, re.IGNORECASE)\n",
        "num_ids": 40
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(0,len(str1)):\n        str1=str1.replace(str1[i],\"\")\n    return str1\n        \ndef remove_punctuations(str1):\n    '''\n    Write a function to remove all punctuations from a given string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    for i in range(0,len(str1)):\n        str1=str1.replace(str1[i],\"\")\n    return str1\n",
        "num_ids": 51
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n    return lst\n    \ndef Remove(lst): \n    '''\n    Write a python function to get the last element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][-1]\n    return lst\n    \ndef Reverse(lst): \n    '''\n    Write a python function to get the reversed list.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][::-1]\n    return lst\n    \ndef check_list_identity(lst):\n    '''\n    Write a python function to check if the list is same or not.\n    '''\n    if lst is lst:\n        return True\n    else:\n        return False\n        \ndef check_list_identity2(lst):\n    '''\n    Write a python function to check if the list is same or not.\n    '''\n    if lst == lst:\n        return True\n    else:\n        return False\n    \ndef check_list_identity3(lst):\n    '''\n    Write a python function to check if the list is same or not.\n    '''\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n    \ndef merge_the_tools(string, k):\n    '''\n    Write a python function to merge a list of list of words into a list of words.\n    '''\n    # initialize list\n    lst = []\n    # initialize iterator for string\n    iter_str = iter(string)\n    \n    # loop till length of string\n    for i in range(0, len(string), k):\n        # store the k-mer of string\n        kmer = \"\".join([next(iter_str) for j in range(k)])\n        # append the k-mer into lst\n        lst.append(kmer)\n    return lst\n    \ndef common_elements(lst1, lst2):\n    '''\n    Write a python function to find the common elements in two given lists.\n    '''\n    lst1 = list(lst1)\n    lst2 = list(lst2)\n    common = set(lst1) & set(lst2)\n    lst = []\n    for i in common:\n        lst.append(i)\n    return lst\n    \ndef common_elements2(lst1, lst2):\n    '''\n    Write a python function to find the common elements in two given lists.\n    '''\n    lst1 = list(lst1)\n    lst2 = list(lst2)\n    common = set(lst1) & set(lst2)\n    lst = []\n    for i in common:\n        lst.append(i)\n    return lst\n",
        "num_ids": 70
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n    \n",
        "num_ids": 12
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res \n",
        "num_ids": 30
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = []\n    for i in range(0, len(lst)):\n        first.append(lst[i][0])\n    print(first)\n",
        "num_ids": 41
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    n = len(lst)\n    for i in range(n):\n        lst[i] = lst[i][0]\n    return lst\n",
        "num_ids": 40
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for x in range(0, len(lst)):\n        if (type(lst[x]) is list):\n            for y in range(0, len(lst[x])):\n                if (type(lst[x][y]) is list):\n                    lst[x][y] = Extract(lst[x][y])\n            lst[x] = lst[x][0]\n    return lst\n",
        "num_ids": 103
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for l in lst:\n        result.append(l[0])\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if i == 0:\n            lst[i] = lst[i][0]\n        else:\n            lst[i] = lst[i][0]\n    return lst\n",
        "num_ids": 61
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first=[]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            first.append(lst[i][j][0])\n    return first\n",
        "num_ids": 54
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    d={}\n    for i in range(len(lst)):\n        if i==0:\n            d[i]=lst[i][0]\n        else:\n            d[i]=lst[i][0]+d[i-1]\n    return d\nprint(Extract([[1, 2], [3, 4, 5, 6], [7, 8]]))\n",
        "num_ids": 93
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for c in str:\n        if c.isupper():\n            upper_ctr = upper_ctr + 1\n    print(upper_ctr)\n",
        "num_ids": 43
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(count)\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    print(count)\n    return count\n        \ndef even_odd(num):\n    '''\n    Write a python function to print whether the given number is even or odd.\n    '''\n    if num%2==0:\n        print('even')\n    else:\n        print('odd')\n",
        "num_ids": 27
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isupper():\n            cnt += 1\n    return cnt\n",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum([1 for i in range(len(str)) if str[i].isupper()])\n",
        "num_ids": 26
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count=0\n    for i in str:\n        if i.isupper():\n            upper_count+=1\n    print(upper_count)\n    return upper_count\n    \ndef sum_of_num(nums):\n    '''\n    Write a python function to calculate the sum of a given list of numbers.\n    '''\n    num_sum=0\n    for i in nums:\n        num_sum+=i\n    return num_sum\n    \ndef sum_of_num_even(nums):\n    '''\n    Write a python function to calculate the sum of the even numbers in a given list of numbers.\n    '''\n    sum_even=0\n    for i in nums:\n        if i%2==0:\n            sum_even+=i\n    return sum_even\n    \ndef sum_of_num_odd(nums):\n    '''\n    Write a python function to calculate the sum of the odd numbers in a given list of numbers.\n    '''\n    sum_odd=0\n    for i in nums:\n        if i%2!=0:\n            sum_odd+=i\n    return sum_odd\n    \ndef square_of_num(nums):\n    '''\n    Write a python function to calculate the square of a given list of numbers.\n    '''\n    square=0\n    for i in nums:\n        square+=i*i\n    return square\n    \ndef square_of_num_sum(nums):\n    '''\n    Write a python function to calculate the sum of the squares of a given list of numbers.\n    '''\n    square_sum=0\n    for i in nums:\n        square_sum+=i*i\n    return square_sum\n    \ndef reverse_list(nums):\n    '''\n    Write a python function to reverse a given list of numbers.\n    '''\n    i=0\n    while i<len(nums):\n        nums[i]=nums[i-1]\n        i+=1\n    return nums\n    \ndef reverse_list_even(nums):\n    '''\n    Write a python function to reverse the even numbers in a given list of numbers.\n    '''\n    i=0\n    while i<len(nums):\n        if nums[i]%2==0:\n            nums[i]=nums[i-1]\n        i+=1\n    return nums\n    \ndef reverse_list_odd(nums):\n    '''\n    Write a python function to reverse the odd numbers in a given list of numbers.\n    '''\n    i=0\n    while i<len(nums):\n        if nums[i]%2!=0:\n            nums[i]=nums[i-1]\n        i+=1\n    return nums\n    \ndef palindrome_num(nums):\n    '''\n    Write a python function to check whether the given list is palindrome or not.\n    '''\n    nums=reverse_list(nums)\n    for i in range(0,len(nums)):\n        if nums[i]!=nums[len(nums)-i-1]:\n            return False\n    return True\n    \ndef palindrome_num_odd(nums):\n    '''\n    Write a python function to check whether the given list is palindrome or not.\n    '''\n    nums=reverse_list_odd(nums)\n    for i in range(0,len(nums)):\n        if nums[i]!=nums[len(nums)-i-1]:\n            return False\n    return True\n    \ndef palindrome_num_even(nums):\n    '''\n    Write a python function to check whether the given list is palindrome or not.\n    '''\n    nums=reverse_list_even(nums)\n    for i in range(0,len(nums)):\n        if nums[i]!=nums[len(nums)-i-1]:\n            return False\n    return True\n    \ndef find_max_num(nums):\n    '''\n    Write a python function to find the maximum number in a given list of numbers.\n    '''\n    max_num=0\n    for i in nums:\n        if i>max_num:\n            max_num=i\n    return max_num\n    \ndef find_max_num_odd(nums):\n    '''\n    Write a python function to find the maximum number in a given list of numbers.\n    '''\n    max_num=0\n    for i in nums:\n        if i%2!=0:\n            if i>max_num:\n                max_num=i\n    return max_num\n    \ndef find_max_num_even(nums):\n    '''\n    Write a python function to find the maximum number in a given list of numbers.\n    '''\n    max_num=0\n    for i in nums:\n        if i%2==0:\n            if i>max_num:\n                max_num=i\n    return max_num\n    \ndef find_min_num(nums):\n    '''\n    Write a python function to find the minimum number in a given list of numbers.\n    '''\n    min_num=0\n    for i in nums:\n        if i<min_num:\n            min_num=i\n    return min_num\n    \ndef find_min_num_odd(nums):\n    '''\n    Write a python function to find the minimum number in a given list of numbers.\n    '''\n    min_num=0\n    for i in nums:\n        if i%2!=0:\n            if i<min_num:\n                min_num=i\n    return min_num\n    \ndef find_min_num_even(nums):\n    '''\n    Write a python function to find the minimum number in a given list of numbers.\n    '''\n    min_num=0\n    for i in nums:\n        if i%2==0:\n            if i<min_num:\n                min_num=i\n    return min_num\n    \ndef find_greatest_num(nums):\n    '''\n    Write a python function to find the largest number in a given list of numbers.\n    '''\n    greatest_num=0\n    for i in nums:\n        if i>greatest_num:\n            greatest_num=i\n    return greatest_num\n    \ndef find_greatest_num_odd(nums):\n    '''\n    Write a python function to find the largest number in a given list of numbers.\n    '''\n    greatest_num=0\n    for i in nums:\n        if i%2!=0:\n            if i>greatest_num:\n                greatest_num=i\n    return greatest_num\n    \ndef find_greatest_num_even(nums):\n    '''\n    Write a python function to find the largest number in a given list of numbers.\n    '''\n    greatest_num=0\n    for i in nums:\n        if i%2==0:\n            if i>greatest_num:\n                greatest_num=i\n    return greatest_num\n    \ndef find_average(nums):\n    '''\n    Write a python function to find the average of a given list of numbers.\n    '''\n    sum_of_nums=0\n    for i in nums:\n        sum_of_nums+=i\n    average=sum_of_nums/len(nums)\n    return average\n    \ndef find_average_odd(nums):\n    '''\n    Write a python function to find the average of a given list of numbers.\n    '''\n    sum_of_nums=0\n    for i in nums:\n        if i%2!=0:\n            sum_of_nums+=i\n    average=sum_of_nums/len(nums)\n    return average\n    \ndef find_average_even(nums):\n    '''\n    Write a python function to find the average of a given list of numbers.\n    '''\n    sum_of_nums=0\n    for i in nums:\n        if i%2==0:\n            sum_of_nums+=i\n    average=sum_of_nums/len(nums)\n    return average\n    \ndef find_range(nums):\n    ''",
        "num_ids": 72
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    combinations_list = []\n    # Write your code here\n    combinations = list(itertools.combinations(list1, 2))\n",
        "num_ids": 42
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combs = [[]]\n    for i in list1:\n        for j in range(len(combs)):\n            combs.append(combs[j]+[i])\n    return combs\n",
        "num_ids": 50
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # list_length = len(list1)\n    # if list_length == 0:\n    #     return []\n    # elif list_length == 1:\n    #     return [[list1[0]]]\n    #\n    # comb = []\n    # for i in range(list_length):\n    #     copy = list1[i+1:]\n    #     for j in combinations_list(copy):\n    #         comb += [[list1[i]]+j]\n    # return comb\n    \n    output = []\n    for i in range(0,len(list1)):\n        sublist = []\n        for j in range(0,len(list1)):\n            if i!= j:\n                sublist.append(list1[j])\n        output.append(sublist)\n    return output\n",
        "num_ids": 196
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            for k in range(j + 1, len(list1)):\n                for l in range(k + 1, len(list1)):\n                    yield (list1[i], list1[j], list1[k], list1[l])\n",
        "num_ids": 91
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    elif len(list1) == 0:\n        return []\n    else:\n        result = []\n        for i in range(len(list1)):\n            tmp = list1.pop(i)\n            a = combinations_list(list1)\n            tmp = tmp + a\n            result += tmp\n        return result\n",
        "num_ids": 96
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return 1\n    if len(list1) == 2:\n        return 2\n    \n    return sum([combinations_list(list1[:x] + list1[x + 1:]) for x in range(len(list1))])\n",
        "num_ids": 70
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #input = list1\n    lst = []\n    def combi(lst1,lst2):\n        comb = []\n        for i in lst1:\n            comb.append(i)\n            for j in lst2:\n                comb.append(i+j)\n        lst.append(comb)\n        combi(lst1,lst2)\n    combi(list1,[])\n    return lst\n",
        "num_ids": 106
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #Create a list to hold combinations\n    combos = []\n    #Iterate through each element in the list\n    for i in list1:\n        #Create an empty list to hold current combination\n        combos.append([])\n        #Iterate through each item of the list\n        for j in list1:\n            #Add the combination to the list\n            combos[-1].append(i + j)\n            #If the combination is not already in the combos list\n            if combos[-1] not in combos:\n                #Add the combination to the list\n                combos.append(combos[-1])\n    #Return the combinations list\n    return combos\n",
        "num_ids": 155
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    def combination_recursive(list1, temp):\n        if len(list1) == 0:\n            result.append(temp)\n            return\n        for i in range(len(list1)):\n            combination_recursive(list1[i+1:], temp + [list1[i]])\n    combination_recursive(list1, [])\n    return result\n",
        "num_ids": 97
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    largest_product = 0\n    largest_product_start = 0\n    largest_product_end = 0\n    temp = []\n    for i in range(len(arr)):\n        if i == 0:\n            temp.append(arr[i])\n            continue\n        if arr[i] < 0:\n            temp.append(0)\n        else:\n            temp.append(arr[i])\n    for i in range(len(temp)):\n        if i == 0:\n            largest_product = max(largest_product, temp[i])\n            largest_product_start = i\n            continue\n        if temp[i] > 0:\n            largest_product = max(largest_product, temp[i])\n            largest_product_end = i\n            continue\n        if largest_product_start == i - 1:\n            largest_product = max(largest_product, 0)\n        else:\n            largest_product = max(largest_product, temp[i])\n    return largest_product, largest_product_start, largest_product_end\n",
        "num_ids": 246
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_val = -2147483648\n    max_prod = 1\n    for i in range(len(arr)):\n        max_val = max(max_val, arr[i])\n        max_prod = max(max_prod, max_val * arr[i])\n    return max_prod\n",
        "num_ids": 93
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    left_index = 0\n    right_index = 0\n    for i in range(1, len(arr)):\n        temp = max_product\n        max_product = max(max_product * arr[i], arr[i])\n        # The max product of the subarray with the current element is greater than the current max product.\n        # Then update the current max product and the left and right index.\n        if max_product > temp:\n            left_index = i\n            right_index = i\n        # If the max product is less than the current max product,\n        # then update the left and right index.\n        else:\n            left_index = max_product = max(max_product, arr[i])\n            right_index = i\n    return arr[left_index:right_index + 1]\n",
        "num_ids": 214
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_prod = arr[0]\n    max_prod_start = arr[0]\n    max_prod_end = arr[0]\n    for i in range(1, len(arr)):\n        temp = max_prod_end * arr[i]\n        if temp > max_prod:\n            max_prod = temp\n            max_prod_start = max_prod_end\n            max_prod_end = arr[i]\n        else:\n            max_prod_end = max(max_prod_end * arr[i], arr[i])\n            \n    print(max_prod, max_prod_start, max_prod_end)\n    return max_prod\n",
        "num_ids": 178
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = arr[0]\n    curr_max = arr[0]\n    for num in arr[1:]:\n        curr_max = max(curr_max * num, num)\n        max_so_far = max(curr_max, max_so_far)\n    return max_so_far\n",
        "num_ids": 101
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -999999999999999\n    left = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            temp = arr[i] * arr[j]\n            if temp > max_product:\n                max_product = temp\n                left = i\n    return left, max_product\n",
        "num_ids": 88
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def product_array(arr):\n        product = 1\n        for i in range(len(arr)):\n            product *= arr[i]\n        return product\n    left = 0\n    right = 0\n    max_product = 0\n    while right < len(arr):\n        if left < right:\n            max_product = max(max_product, product_array(arr[left:right+1]))\n        else:\n            left += 1\n            while left < right and arr[left-1] == 0:\n                left += 1\n            max_product = max(max_product, product_array(arr[left:right+1]))\n        right += 1\n    return max_product\n",
        "num_ids": 165
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    i = 0\n    j = 0\n    max_product = 0\n    while(i < len(arr)):\n        if(j >= len(arr) or i >= len(arr)):\n            break\n        max_product = max(max_product, arr[i] * arr[j])\n        while(i < len(arr) and arr[i] > 0):\n            i += 1\n        while(j < len(arr) and arr[j] > 0):\n            j += 1\n    return max_product\n",
        "num_ids": 124
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # if len(arr) == 0:\n    #     return 0\n    # else:\n    #     min_i = 0\n    #     max_i = 0\n    #     max_sum = float('-inf')\n    #     min_sum = float('inf')\n    #     for i in range(len(arr)):\n    #         curr_sum = arr[i]\n    #         if curr_sum < min_sum:\n    #             min_sum = curr_sum\n    #             min_i = i\n    #         if curr_sum > max_sum:\n    #             max_sum = curr_sum\n    #             max_i = i\n    #     if max_i == len(arr) - 1:\n    #         return max_sum\n    #     else:\n    #         return max_sum * min_sum\n    #     max_sum = float('-inf')\n    #     min_i = 0\n    #     for i in range(len(arr)):\n    #         if arr[i] > max_sum:\n    #             max_sum = arr[i]\n    #             max_i = i\n    #     min_sum = float('inf')\n    #     for i in range(len(arr)):\n    #         if arr[i] < min_sum:\n    #             min_sum = arr[i]\n    #             min_i = i\n    #     return arr[max_i] * arr[min_i]\n    def max_subarray_product(arr):\n    '''\n    Find the max product subarray in the given array\n    '''\n        max_product = float('-inf')\n        max_product_i = 0\n        min_product = float('inf')\n        min_product_i = 0\n        curr_product = float('-inf')\n        curr_i = 0\n        # edge case\n        if len(arr) == 0:\n            return 0\n        else:\n            for i in range(len(arr)):\n                if curr_product * arr[i] < curr_product:\n                    curr_product = arr[i]\n                    curr_i = i\n                if curr_product * arr[i] > curr_product:\n                    curr_product = curr_product * arr[i]\n                    curr_i = i\n            if curr_i == 0:\n                return curr_product * curr_product\n            else:\n                return curr_product\n        return max_product\n",
        "num_ids": 214
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_product_idx = -1\n",
        "num_ids": 24
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict:\n        if dict[x]!= n:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict) == len(set(dict.values()))\n",
        "num_ids": 19
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values())!= 1:\n        return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        if len(dict.values()) == 1:\n            return False\n        else:\n            return True\n    else:\n        if len(dict.values()) == 1:\n            return False\n        else:\n            return True\n",
        "num_ids": 64
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) > 1:\n        for key, value in dict.items():\n            if value!= dict[key - 1]:\n                return False\n    else:\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n",
        "num_ids": 16
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return not len(dict.values()) > n\n",
        "num_ids": 14
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict) == len(set(dict.values()))\n",
        "num_ids": 19
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    res = {}\n    for key, value in dict1.items():\n        if value:\n            res[key] = value\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    print('Original dictionary: ', dict1)\n    dict1 = {k: v for k, v in dict1.items() if v}\n    print('After removing empty values: ', dict1)\n",
        "num_ids": 48
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            dict1.pop(key)\n        else:\n            continue\n    return dict1",
        "num_ids": 40
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if v:\n            break\n    else:\n        dict1.pop(k,None)\n",
        "num_ids": 37
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_list = []\n    for key,value in dict1.items():\n        if value == \"\":\n            empty_list.append(key)\n    for key in empty_list:\n        dict1.pop(key)\n    return dict1\n",
        "num_ids": 61
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict={}\n    for k,v in dict1.items():\n        if v:\n            new_dict[k]=v\n    return new_dict\n",
        "num_ids": 41
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    count = 0\n    for key in dict1.keys():\n        if dict1[key]==\"\":\n            del dict1[key]\n    print (dict1)\n",
        "num_ids": 43
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {k: v for k, v in dict1.items() if v!= None}\n    return dict1\n",
        "num_ids": 32
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if not dict1[item]:\n            del dict1[item]\n    return dict1\n",
        "num_ids": 32
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1:\n        return {k: v for k, v in dict1.items() if v}\n    else:\n        return dict1\n    \ndef drop_empty(dict1):\n    if dict1:\n        return {k: v for k, v in dict1.items() if v}\n    else:\n        return dict1\n",
        "num_ids": 83
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    min_element = arr[0]\n    max_element = arr[0]\n    max_prod = arr[0]\n",
        "num_ids": 33
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    curr_max, max_prod = arr[0], arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max * arr[i])\n        max_prod = max(curr_max, max_prod)\n        \n    return max_prod\n        \n        \nprint(max_product([3, 5, 6]))\nprint(max_product([-1, 0, 2, -3, -5]))\nprint(max_product([3, 0, 2, -3, -5]))\n",
        "num_ids": 163
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            result = max(result, max_product)\n            max_product = result * arr[i]\n        else:\n            result = max(result, max_product)\n            max_product = 1\n    return result\n    \n    \nprint(max_product([1, 8, 4, 5, 7, 2, 4, 5]))    ",
        "num_ids": 126
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    from math import inf\n    max_product = -inf\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n",
        "num_ids": 69
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    arr.sort()\n    max_prod = -2147483647\n    for i in range(n):\n        if i == 0:\n            max_prod = max(max_prod, arr[i])\n        else:\n            max_prod = max(max_prod, arr[i]*max_prod)\n    return max_prod\n",
        "num_ids": 98
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0: return -1\n    if len(arr) == 1: return arr[0]\n    if len(arr) == 2: return max(arr[0], arr[1])\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        tmp = max_product\n        max_product = max(max_product, arr[i] * arr[i - 1])\n        tmp = max(max_product, arr[i] * arr[i - 2])\n        max_product = max(max_product, tmp)\n    return max_product",
        "num_ids": 150
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_product = max(arr[i] * max_product, arr[i])\n        else:\n            max_product = max(arr[i] * max_product, arr[i])\n    return max_product\n",
        "num_ids": 88
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return \n    max_ending_here = arr[0]\n    curr_max = max_ending_here\n    for i in range(1,len(arr)):\n        curr_max = max(curr_max, arr[i])\n        max_ending_here = max(max_ending_here, curr_max * arr[i])\n    return max_ending_here\n",
        "num_ids": 101
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            max_prod = max(max_prod,arr[i]*arr[j])\n    return max_prod\n",
        "num_ids": 69
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_val = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_val = max(max_val,arr[i]*arr[j])\n    \n    return max_val\n",
        "num_ids": 68
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    if len(tup) == 0:\n        print(\"List is empty\")\n    elif len(tup) == 1:\n        print(\"List contains only one element\")\n    else:\n        print(\"List contains {} elements\".format(len(tup)-1))\n        for i in range(0, len(tup)-1):\n            print(\"{}+{}={}\".format(tup[i], tup[i+1], tup[i]+tup[i+1]))\n",
        "num_ids": 129
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result_list = []\n    for i in range(len(test_tup)-1):\n        result_list.append(test_tup[i] + test_tup[i+1])\n    result_list.append(test_tup[len(test_tup)-1] + test_tup[0])\n    return tuple(result_list)\n",
        "num_ids": 89
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_list = []\n    for i in range(len(test_tup)):\n        if i+1 < len(test_tup):\n            sum_list.append(test_tup[i] + test_tup[i+1])\n    return sum_list\n",
        "num_ids": 69
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup\n    return x + y, x - y, x * y, x / y\n",
        "num_ids": 30
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def pairwise(a):\n        return tuple(a[i]+a[i+1] for i in range(len(a)-1))\n",
        "num_ids": 36
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    try:\n        if len(test_tup) <= 1:\n            return test_tup\n        else:\n            return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])\n    except:\n        return None\n",
        "num_ids": 70
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def pairwise(tup):\n        return tup[0]+tup[1],tup[1]+tup[0]\n    a = tup[0]\n    b = tup[1]\n    print(pairwise(tup))\n",
        "num_ids": 62
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(sum, zip(*test_tup)))\n",
        "num_ids": 18
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if test_tup[1] + 1!= test_tup[0]:\n        print(test_tup[0], '+', test_tup[1], '=', test_tup[0]+test_tup[1])\n    elif test_tup[1] - 1!= test_tup[0]:\n        print(test_tup[0], '+', test_tup[1], '=', test_tup[0]+test_tup[1])\n    elif test_tup[0] + 1!= test_tup[1]:\n        print(test_tup[0], '+', test_tup[1], '=', test_tup[0]+test_tup[1])\n    elif test_tup[0] - 1!= test_tup[1]:\n        print(test_tup[0], '+', test_tup[1], '=', test_tup[0]+test_tup[1])\n",
        "num_ids": 241
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup\n    result = 0\n    for i in range(len(x)):\n        result += x[i] + y[i]\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = prod * num\n    return prod % n\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    multiply = 1\n    for i in arr:\n        multiply *= i\n    multiply = multiply%n\n    return multiply\n",
        "num_ids": 37
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    assert (n > 0)\n    arr_sum = sum(arr)\n    arr_mod = arr_sum % n\n    return arr_mod\n",
        "num_ids": 37
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # n = 3\n    # arr = [1, 2, 3, 4]\n    # expected output = (1*2*3*4)%3 = 24\n    #actual output = (1*2*3*4)%3 = 24\n    # return n*np.prod(arr) % n\n",
        "num_ids": 75
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x, y: x * y % n, arr, 1)\n",
        "num_ids": 22
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * arr[i]\n        prod = prod % n\n    return prod\n",
        "num_ids": 43
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Algo:\n    # Initialize (r0, r1), r2\n    r0 = 1\n    r1 = 1\n    r2 = 1\n    \n    # Iterate from 3 to n\n    for i in range(3,n+1): \n        \n        # Update r0 and r1\n        r0 = (r0 * i) % n\n        r1 = (r1 * i) % n\n        \n        # Update r2\n        r2 = (r0 * r1) % n \n    \n    return r2\n",
        "num_ids": 132
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return (np.dot(arr, arr)) % n\n",
        "num_ids": 16
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mult = 1\n    for i in arr:\n        mult *= i\n    return mult % n\n",
        "num_ids": 26
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(len(arr)): \n        remainder = (remainder * arr[i]) % n\n    return remainder\n",
        "num_ids": 43
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        print('No consecutive integers found')\n        return\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            print('Consecutive integers found')\n            return\n    print('No consecutive integers found')\n",
        "num_ids": 73
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #x=set(l)\n    #y=list(x)\n    #print(y)\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]==l[j]:\n                return False\n    return True\nprint(check_Consecutive([1,2,2,4,5,1]))",
        "num_ids": 96
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if(i==len(l)-1):\n            break\n        elif(l[i]==l[i+1]-1):\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #start writing your code here\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return 0\n    return 1\n",
        "num_ids": 45
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True\n    \ndef remove_Consecutive(l):\n    '''\n    Write a python function to remove all consecutive numbers from the list.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            l.pop(i+1)\n    return l\n    \ndef odd_even_list(l):\n    '''\n    Write a python function to create an even and odd list from the given list.\n    '''\n    \n    odd = []\n    even = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return odd, even\n    \ndef list_difference(l1, l2):\n    '''\n    Write a python function to find the difference between two lists.\n    '''\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    \n    count = 0\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            count += 1\n    return count\n    \ndef merge_sorted_list(l1, l2):\n    '''\n    Write a python function to merge two sorted list.\n    '''\n    \n    merged = []\n    i = j = 0\n    \n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            merged.append(l1[i])\n            i += 1\n        else:\n            merged.append(l2[j])\n            j += 1\n            \n    merged += l1[i:]\n    merged += l2[j:]\n    return merged\n    \ndef merge_sort(l):\n    '''\n    Write a python function to merge all the sorted lists from the given list.\n    '''\n    \n    if len(l) < 2:\n        return l\n    \n    middle = len(l)//2\n    \n    l1 = merge_sort(l[:middle])\n    l2 = merge_sort(l[middle:])\n    \n    return merge_sorted_list(l1, l2)\n    \ndef group_anagrams(l):\n    '''\n    Write a python function to group all the anagrams from the given list.\n    '''\n    \n    anagram_dict = {}\n    \n    for word in l:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word in anagram_dict:\n            anagram_dict[sorted_word].append(word)\n        else:\n            anagram_dict[sorted_word] = [word]\n            \n    return anagram_dict.values()\n    \ndef max_distance(graph, source):\n    '''\n    Write a python function to find the maximum distance possible between the source node from a directed graph.\n    '''\n    \n    from collections import deque\n    \n    q = deque()\n    q.append(source)\n    visited = set()\n    \n    dist = 0\n    while len(q) > 0:\n        n = q.popleft()\n        visited.add(n)\n        dist = max(dist, len(visited))\n        for u in graph[n]:\n            if u not in visited:\n                q.append(u)\n    return dist\n    \ndef connected_components(graph):\n    '''\n    Write a python function to find the number of connected components in a graph.\n    '''\n    from collections import deque\n    \n    visited = set()\n    count = 0\n    \n    q = deque()\n    for u in graph:\n        if u not in visited:\n            q.append(u)\n            visited.add(u)\n            count += 1\n            while len(q) > 0:\n                v = q.popleft()\n                for u in graph[v]:\n                    if u not in visited:\n                        visited.add(u)\n                        q.append(u)\n    return count\n    \ndef check_parens(s):\n    '''\n    Write a python function to check whether the given string contains balanced parentheses or not.\n    '''\n    \n    stack = []\n    parens = ['(', ')', '{', '}', '[', ']']\n    for p in s:\n        if p in parens:\n            stack.append(p)\n        else:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if (top == '(' and p!= ')') or (top == '[' and p!= ']') or (top == '{' and p!= '}'):\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n    \ndef same_intervals(a, b):\n    '''\n    Write a python function to check whether two given interval lists are exactly the same or not.\n    '''\n    \n    if len(a)!= len(b):\n        return False\n    \n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n    \ndef sum_lists(l1, l2):\n    '''\n    Write a python function to find the sum of two lists.\n    '''\n    \n    result = []\n    for i in range(len(l1)):\n        result.append(l1[i] + l2[i])\n    return result\n    \ndef sum_of_numbers(l):\n    '''\n    Write a python function to find the sum of all numbers from the list.\n    '''\n    \n    return sum(l)\n    \ndef sum_digit_numbers(l):\n    '''\n    Write a python function to find the sum of all digits from the numbers in the given list.\n    '''\n    \n    return sum(map(int, str(l)))\n    \ndef max_in_list(l):\n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    \n    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n    \ndef multiply_list(l):\n    '''\n    Write a python function to multiply all the elements in the list.\n    '''\n    \n    res = 1\n    for i in l:\n        res *= i\n    return res\n    \ndef append_string(l1, l2):\n    '''\n    Write a python function to join two strings.\n    '''\n    \n    l1 = l1.split(' ')\n    l2 = l2.split(' ')\n    return''.join(l1 + l2)\n    \ndef remove_list(l, num):\n    '''\n    Write a python function to remove the given number from the list.\n    '''\n    \n    l.remove(num)\n    return l\n    \ndef delete_duplicates(l):\n    '''\n    Write a python function to delete all the duplicates from the given list.\n    '''\n    \n    l = set(l)\n    return list(l)\n    \ndef count_occurrences(l, word):\n    '''\n    Write a python function to find the count of occurrences of a particular word in a list.\n    '''\n    \n    count = 0\n    for i in l:\n        if i == word:\n            count += 1\n    return count\n    \ndef extend_list(l, n):\n    '''\n    Write a python function to extend the list by n more elements.\n    '''\n    \n    l.extend(l[:n])\n    return l\n    \ndef reverse_list(l):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    \n    l.reverse()\n    return l\n    \ndef reverse_n_lists(l, n):\n    '''\n    Write a python function to reverse the nth list in the given list.\n    '''\n    \n    n = n - 1\n    result = []\n    for i in range(n, len",
        "num_ids": 25
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i+1] - l[i] == 1:\n            print(l[i],\"and\",l[i+1],\"are consecutive numbers.\")\n        else:\n            print(l[i],\"and\",l[i+1],\"are not consecutive numbers.\")\n",
        "num_ids": 79
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Write your solution here\n    if len(l) <= 1:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if(l == None or len(l) < 2):\n        return False\n    for i in range(len(l)-1):\n        if(l[i] == l[i+1] - 1):\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 1:\n        return True\n    \n    for i in range(1,len(l)):\n        if l[i] == l[i-1] + 1:\n            continue\n        else:\n            return False\n            \n    return True\n    \n    \n    ",
        "num_ids": 71
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n    for i in range(1, len(l)):\n        if l[i] - l[i - 1]!= 1:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_tuple = set(test_list1) & set(test_list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_even_odd_list(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_dict(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_set(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_list(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets_with_order(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets_with_order(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets_with_order(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets_with_order(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets_with_order(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets_with_order(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets_with_order(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return a tuple\n    of those elements whose occurrence in both the list is same.\n    (ii) If both the lists are of different lengths, then the function should return the union of those elements whose occurrence in both the list is same.\n    '''\n    new_tuple = set(list1) & set(list2)\n    print(\"tuple intersection\", new_tuple)\n    \ndef tuple_intersection_with_sets_with_order(list1, list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list.\n    (i) If both the lists are of same length, then the function should return ",
        "num_ids": 39
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return tuple(intersection)\n",
        "num_ids": 45
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n",
        "num_ids": 24
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n    return set_list1.intersection(set_list2)\n",
        "num_ids": 46
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    i = 0\n    while i < len(test_list1):\n        if test_list1[i] in test_list2:\n            print(test_list1[i])\n        i += 1\n",
        "num_ids": 51
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # Using set.intersection()\n    # time complexity : O(n)\n    # space complexity : O(n)\n    \n    result = set(test_list1).intersection(set(test_list2))\n    \n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2002
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                new_list.append(i)\n    return new_list\n",
        "num_ids": 52
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_copy = test_list1[:]\n    test_list2_copy = test_list2[:]\n    test_list1_copy.sort()\n    test_list2_copy.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < len(test_list1_copy) and j < len(test_list2_copy):\n        if test_list1_copy[i] == test_list2_copy[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif test_list1_copy[i] < test_list2_copy[j]:\n            i += 1\n        else:\n            j += 1\n    return count\n",
        "num_ids": 173
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_tuple = set()\n    for value in test_list1:\n        if value in test_list2:\n            intersection_tuple.add(value)\n    return intersection_tuple\n",
        "num_ids": 51
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = list(test_list1)\n    test_list2 = list(test_list2)\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n    test_set3 = test_set1.intersection(test_set2)\n    test_tuple = list(test_set3)\n    return test_tuple\n",
        "num_ids": 99
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # your code goes here\n    return newch\n",
        "num_ids": 14
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #str1=str1.replace(ch,newch)\n    #str1=str1.replace(ch,newch)\n    #return str1\n    str1=str1.replace(ch,'')\n    return str1\n",
        "num_ids": 58
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n    \n",
        "num_ids": 24
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,newch)\n    return str2\n    ",
        "num_ids": 23
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    return ''.join(str1)\n",
        "num_ids": 56
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if(str1[i]==ch):\n            str1[i] = newch\n    return \"\".join(str1)\nstr1=\"Python\"\nprint(replace_char(str1,\"o\",\"a\"))\n",
        "num_ids": 77
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #create a list of tuples with (v, k)\n    sorted_list = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    #return a sorted dictionary\n    return {k:v for v, k in sorted_list}\n",
        "num_ids": 67
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    \nif __name__ == '__main__':\n    d = {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': 50}\n    print('Original dictionary', d)\n    print('The sorted dictionary by value is', sort_counter(d))\n    print('\\n')\n    #\n    def letter_count(word):\n        return len(word)\n    \n    def vowel_count(word):\n        return sum(1 for c in word if c in 'aeiouAEIOU')\n    \n    def digit_count(word):\n        return sum(1 for c in word if c.isdigit())\n    \n    def count_word(word):\n        return dict(Counter(word))\n    \n    def is_palindrome(word):\n        if len(word) <= 1:\n            return True\n        if word[0]!= word[-1]:\n            return False\n        return is_palindrome(word[1:-1])\n    \n    def xyz_checker(word):\n        return word.islower() or word.isupper()\n    \n    \n    def is_vowel(letter):\n        return letter.lower() in 'aeiou'\n    \n    def is_consonant(letter):\n        return letter.lower() not in 'aeiou'\n    \n    \n    def sort_by_count(d):\n        return sorted(d.items(), key=lambda kv: kv[1])\n    \n    #\n    def min_max(input_list):\n        '''\n        The function should return a tuple with the minimum and maximum\n        number in the input list.\n        '''\n        return (min(input_list), max(input_list))\n    \n    #\n    def check_binary(input_str):\n        '''\n        The function should return True if the input\n        string is binary and False if it is not.\n        '''\n        input_str = str(input_str).lower()\n        input_str = input_str.replace(' ', '')\n        if len(input_str) == 0:\n            return False\n        return any(x in input_str for x in '0 1')\n    \n    #\n    def check_valid_email(email):\n        '''\n        The function should return True if the email is valid\n        else return False.\n        '''\n        import re\n        try:\n            if re.search(r'^[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+$', email):\n                return True\n            return False\n        except:\n            return False\n    \n    #\n    def is_unique_chars(string):\n        '''\n        The function should return True if all the characters are unique in the string and False if any\n        character is repeated or there are duplicate characters.\n        '''\n        return len(set(string)) == len(string)\n    \n    #\n    def is_palindrome(string):\n        '''\n        The function should return True if the string is a palindrome\n        else return False.\n        '''\n        return string == string[::-1]\n    \n    #\n    def get_longest_word(word_list):\n        '''\n        The function should return the longest word in the list.\n        '''\n        return max(word_list, key=len)\n    \n    #\n    def count_evens(input_list):\n        '''\n        The function should return the number of even numbers in the list.\n        '''\n        return sum([x%2 == 0 for x in input_list])\n    \n    #\n    def get_pairs(input_list):\n        '''\n        The function should return a list of tuples in which each tuple contains two elements\n        (i, j) where i divides j.\n        '''\n        result = []\n        for i in range(len(input_list)):\n            for j in range(i+1, len(input_list)):\n                if input_list[i]%input_list[j] == 0:\n                    result.append((input_list[i], input_list[j]))\n        return result\n    \n    #\n    def get_digits(input_str):\n        '''\n        The function should return a list of digits in the string.\n        '''\n        return list(filter(str.isdigit, input_str))\n    \n    #\n    def get_sorted_index(input_list):\n        '''\n        The function should return the indices of the sorted list in an ascending order.\n        '''\n        return list(map(int, sorted(input_list, key=lambda x: int(x))))\n    \n    #\n    def sort_and_reverse(input_list):\n        '''\n        The function should sort the list in ascending order then reverse it.\n        '''\n        return list(reversed(sorted(input_list)))\n    \n    #\n    def sum_all_odd_positions(input_list):\n        '''\n        The function should return the sum of all the odd elements of the list.\n        '''\n        return sum(filter(lambda x: x%2 == 1, input_list))\n    \n    #\n    def merge_ranges(input_list):\n        '''\n        The function should return a list with the merged ranges.\n        '''\n        return list(sorted(list(set([tuple(sorted(x)) for x in input_list]))))\n    \n    #\n    def intersect(input_list1, input_list2):\n        '''\n        The function should return a list which contains the intersecting of the two lists.\n        '''\n        result = []\n        for i in input_list1:\n            if i in input_list2:\n                result.append(i)\n        return result\n    \n    #\n    def get_least_number_from_list(input_list):\n        '''\n        The function should return the least number from the list.\n        '''\n        return min(input_list)\n    \n    #\n    def get_most_number_from_list(input_list):\n        '''\n        The function should return the most number from the list.\n        '''\n        return max(input_list)\n    \n    #\n    def get_frequent_item(input_list):\n        '''\n        The function should return the most occurring item in the list.\n        '''\n        return Counter(input_list).most_common(1)[0][0]\n    \n    #\n    def bubble_sort(input_list):\n        '''\n        The function should sort the list in ascending order using bubble sort.\n        '''\n        for i in range(len(input_list)):\n            for j in range(i+1, len(input_list)):\n                if input_list[i] > input_list[j]:\n                    input_list[i], input_list[j] = input_list[j], input_list[i]\n        return input_list\n    \n    #\n    def print_char_count(input_str):\n        '''\n        The function should print the number of characters and print each character along with the number of occurrences.\n        '''\n        print(len(input_str))\n        for i in input_str:\n            print(i, input_str.count(i))\n    \n    #\n    def find_common_characters(input_str1, input_str2):\n        '''\n        The function should return a dictionary with the common characters and their occurrences.\n        '''\n        return dict(Counter(input_str1) & Counter(input_str2))\n    \n    #\n    def find_common_characters2(input_str1, input_str2):\n        '''\n        The function should return a dictionary with the common characters and their occurrences.\n        '''\n        return Counter(input_str1) & Counter(input_str2)\n    \n    #\n    def find_common_characters3(input_str1, input_str2):\n        '''\n        The function should return a dictionary with the common characters and their occurrences.\n        '''\n        return Counter(input_str1) & Counter(input_str2)\n    ",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    a = Counter(dict1)\n    new_dict = sorted(a.items(), key = lambda x:x[1], reverse = True)\n    \n    return new_dict\n",
        "num_ids": 44
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # return dict(sorted(dict1.items(), key=lambda item: item[1]))\n    \n    # second method\n    return dict(sorted(dict1.items(), key=lambda x: -x[1]))\n",
        "num_ids": 57
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = sorted(dict1.items(), key=lambda x: x[1])\n    dict1 = sorted(dict1, key=lambda x: x[0])\n    return dict1\n",
        "num_ids": 47
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #print(sorted(dict1.items(), key = lambda x:x[1]))\n    return sorted(dict1.items(), key = lambda x:x[1], reverse = True)\n",
        "num_ids": 48
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return new_dict\n",
        "num_ids": 30
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1])\n    \ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1])\n    \ndef sort_dict_greater_than(dict1, val):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1] > val)\n",
        "num_ids": 26
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return(sorted(dict1.items(), key=lambda x:x[1]))\nprint(sort_counter({\"k1\":3,\"k2\":2,\"k3\":1,\"k4\":2,\"k5\":1}))\n",
        "num_ids": 58
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n    \ndef big_sum(nums):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Your code here\n    # print(sum(nums))\n",
        "num_ids": 18
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    min = 0\n    max = 0\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        if nums[i] < min:\n            min = nums[i]\n        sum += nums[i]\n    print(sum - max - min)\n",
        "num_ids": 89
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(min(nums) + max(nums))\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max + min\n",
        "num_ids": 58
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    min_value = min(nums)\n    max_value = max(nums)\n    sum = sum(nums) - min_value - max_value\n    print(sum)\n",
        "num_ids": 47
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = 0\n",
        "num_ids": 13
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums)+min(nums)\n",
        "num_ids": 15
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sorted_array = sorted(nums)\n    largest = sorted_array[0]\n    smallest = sorted_array[-1]\n    return largest + smallest\n",
        "num_ids": 42
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # return string.lower()\n    return string.strip().lower()\n",
        "num_ids": 19
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \n    \n    ",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    s = string\n    lower_s = s.lower()\n    print(lower_s)\n",
        "num_ids": 25
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('',str1)\n",
        "num_ids": 28
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace('a','A').replace('o','O').replace('i','I').replace('u','U').replace('e','E')\n",
        "num_ids": 40
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]*'\n    #print(re.findall(pattern, str1))\n    return re.sub(pattern,'', str1)\n    \ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    pattern = r'[@_!#$%^&*()<>?/\\|}{~:;]*'\n    return re.sub(pattern,'',str1)\n",
        "num_ids": 44
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code here\n    return str1.replace(str1.lower(),'')\n",
        "num_ids": 23
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Write your code here\n    return str1.lower()\n",
        "num_ids": 17
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace('a','')\n",
        "num_ids": 14
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'[a-z]', '', str1)\n    return str1\n",
        "num_ids": 39
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # solution 1\n    return str1.replace('lowercase', '')\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[a-z]', '', str1, flags=re.IGNORECASE)\n    return str2\n",
        "num_ids": 38
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i.isupper():\n            continue\n        else:\n            new_str += i\n    return new_str\n",
        "num_ids": 45
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = n%10\n    return n\ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = n%100\n    n = n%10\n    return n\ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    s = 0\n    while n!= 0 :\n        n = n%10\n        s = s + n\n        return s\ndef is_Palindrome(n) :\n    '''\n    Write a python function to check if a given number is a palindrome or not.\n    '''\n    n = str(n)\n    n = n[::-1]\n    if(n == n[::-1]) :\n        return True\n    else :\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10)%10\n    \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n/10**(1+i)%10)\n    \ndef third_Digit(n) :\n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return int(n%10)\n    \ndef fourth_Digit(n) :\n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    return int(n%10**(1+i)%10)\n    \ndef Digit_Sum(n) :\n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    if i == 0 :\n        return 0\n    if i == 1 :\n        return first_Digit(n)+second_Digit(n)\n    return Digit_Sum(first_Digit(n))+second_Digit(n)+third_Digit(n)\n    \nif __name__ == \"__main__\" :\n    print(Digit_Sum(12345))\n    ",
        "num_ids": 94
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return n\n    else:\n        return n%10\n",
        "num_ids": 23
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s = str(n)\n    return int(s[0])\n",
        "num_ids": 19
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n    ",
        "num_ids": 9
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n=int(input(\"enter a number :\"))\n    #print(n)\n    num=n%10\n    print(num)\n",
        "num_ids": 35
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n)%10\n",
        "num_ids": 11
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if list[i]%2!= 0:\n            odd.append(list[i])\n    return odd\n",
        "num_ids": 46
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            continue\n        else:\n            odd_list.append(list[i])\n    return odd_list\n",
        "num_ids": 58
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\nprint(Split([1,2,3,4,5]))\n",
        "num_ids": 52
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    res = []\n    for i in list:\n        if(i%2==0):\n            continue\n        else:\n            res.append(i)\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x%2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2!= 0:\n            result.append(i)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n            \n    return odd_list\n    \ndef main():\n    '''\n    Write a python function which takes a string and returns the reversed string.\n    '''\n    \n    string = input(\"Please enter a string to reverse: \")\n    if string:\n        print(\"The string in reverse: \",string[::-1])\n        \n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 60
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l = []\n    for i in list:\n        if i%2!= 0:\n            l.append(i)\n    return l\nl = []\nl = [1,2,3,4,5,6]\nprint(Split(l))\n",
        "num_ids": 63
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    def cube_of_first_n(n) :\n    \n        sum = 0\n        for i in range(n) :\n            sum += i**3\n        return sum\n    \n    def difference_of_numbers(sum1,sum2) :\n    \n        return sum2 - sum1\n    \n    sum1 = cube_of_first_n(n)\n    sum2 = sum(n)\n    return difference_of_numbers(sum1,sum2)\n    \nprint(difference(7))",
        "num_ids": 126
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    num = 1\n    result = 0\n",
        "num_ids": 14
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        sum_of_n = 0\n        for i in range(n+1):\n            sum_of_n = sum_of_n + i**3\n        return sum_of_n\n    def difference(n) : \n        '''\n        Write a python function to find the difference between the sum of the cubes of the first n natural numbers and the sum of the first n natural numbers.\n        '''\n        def sum_of_cubes(n):\n            sum_of_n = 0\n            for i in range(n+1):\n                sum_of_n = sum_of_n + i**3\n            return sum_of_n\n        return abs(sum_of_cubes(n) - sum_of_cubes(n-1))\n        \n        \n        \n    print(difference(5))\n    ",
        "num_ids": 101
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    sum1=0\n    for i in range(1,n+1):\n        sum1+=i\n    return sum-sum1\n",
        "num_ids": 59
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    count = 0\n    n_sum = 0\n    \n    for i in range(n):\n        count += 1\n        n_sum = n_sum + count**3\n    print(\"The difference between the sum of cubes of the first\",count,\"natural numbers is\",n_sum-sum(range(1,n+1)))\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2002
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)]) - sum([i**3 for i in range(1,n+1)])",
        "num_ids": 39
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    x = 0\n    for i in range(1, n+1):\n        x += (i ** 3)\n    y = 0\n    for j in range(1, n+1):\n        y += (j ** 3)\n    return (x - y)",
        "num_ids": 63
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    def sum_cubes(n) :\n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        \n        def sum_cubes(n) :\n            '''\n            Write a python function to find the sum of cubes of the first n natural numbers.\n            '''\n        \n        sum_of_cubes = 0\n        \n        for i in range(n) :\n            sum_of_cubes = sum_of_cubes + pow(i, 3)\n        \n        return sum_of_cubes\n    \n    \n    sum_of_natural = 0\n    \n    for i in range(n) :\n        sum_of_natural = sum_of_natural + i + 1\n    \n    difference = pow(sum_of_natural, 3) - sum_cubes(n)\n    \n    return difference",
        "num_ids": 131
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def difference(n):\n        first_n_nums = []\n        for i in range(1, n + 1):\n            first_n_nums.append(i**3)\n        return sum(first_n_nums) - sum(first_n_nums[:n])\n    print(difference(int(input('Enter the size of list: '))))\ndifference(int(input('Enter the size of list: ')))\n",
        "num_ids": 107
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_n = 0\n    sum_of_n_squared = 0\n    for i in range(n):\n        sum_of_n = sum_of_n + i\n        sum_of_n_squared = sum_of_n_squared + (i**3)\n    print(sum_of_n)\n    print(sum_of_n_squared)\n    return sum_of_n - sum_of_n_squared\n    \nprint(difference(4))\nprint(difference(10)",
        "num_ids": 129
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N == 0 : \n        return 0\n    else : \n        return (N//2) + (find_Odd_Pair(A, N//2)) \n",
        "num_ids": 44
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n    '''\n    For a given number of elements, find the number of pairs whose xor value is odd.\n    '''\ndef find_Odd_Pair1(A,N) : \n    '''\n    Given a number of elements N, find the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1, N+1):\n        if (i % 2)!= A[i-1]:\n            count += 1\n    return count \n",
        "num_ids": 45
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        if (A[i] & 1) : \n            count += 1\n    return count \n",
        "num_ids": 41
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pairs = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if (((A[i] ^ A[j]) & 1) == 1) :\n                pairs += 1\n    return pairs\n    \n    \ndef find_Odd_Pair1(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pairs = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if (((A[i] ^ A[j]) & 1) == 1) :\n                pairs += 1\n    return pairs\n    \ndef find_Odd_Pair2(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pairs = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if (((A[i] ^ A[j]) & 1) == 1) :\n                pairs += 1\n    return pairs\n    \ndef find_Odd_Pair3(A,N) :\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pairs = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if (((A[i] ^ A[j]) & 1) == 1) :\n                pairs += 1\n    return pairs\n",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res = 0\n    xor = 0\n    for i in range(N) :\n        xor = xor ^ A[i]\n        if xor & 1 :\n            res += 1\n    print('Number of odd pairs is',res)\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1:\n                res+=1\n    return res\n",
        "num_ids": 53
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        if A[i] & 1!= 0:\n            count += 1\n    return count\n    \nA = [0,0,1,1,1,0,1,1,1,0,1,1,1]\nN = len(A)\nprint(find_Odd_Pair(A,N)) ",
        "num_ids": 92
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Write your code here\n    l = 0\n    r = N-1\n    xor = 0\n    count = 0\n    while l <= r:\n        if A[l] == A[r]:\n            print('{} == {}'.format(A[l],A[r]))\n            count += 1\n            l += 1\n        elif A[l] > A[r]:\n            print('{} > {}'.format(A[l],A[r]))\n            count += 1\n            xor = xor ^ A[l]\n            l += 1\n        else:\n            print('{} < {}'.format(A[l],A[r]))\n            count += 1\n            xor = xor ^ A[r]\n            r -= 1\n",
        "num_ids": 182
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count=0\n    for i in range(N-1):\n        if A[i]^A[i+1]==0:\n            odd_count+=0\n        else:\n            odd_count+=1\n    return odd_count\n",
        "num_ids": 61
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if not string:\n        return string\n",
        "num_ids": 12
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if isinstance(string, str):\n        string = string.upper()\n        string = string.lower()\n        return string\n    else:\n        raise ValueError(\"Input must be a string\")\n",
        "num_ids": 48
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(string.swapcase())\n",
        "num_ids": 15
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digits = len(str(n1))\n    n2_digits = len(str(n2))\n    res = 0\n",
        "num_ids": 37
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    for i in range(10):\n        if n1 % 10 == n2 % 10:\n            diff_sum += 0\n        else:\n            diff_sum += abs(n1 % 10 - n2 % 10)\n        n1 = int(n1/10)\n        n2 = int(n2/10)\n    return diff_sum\n",
        "num_ids": 90
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    n1 = n1 - (10**(len(str(n1))-1))\n    n2 = n2 - (10**(len(str(n2))-1))\n    while n1 > 0 or n2 > 0:\n        if n1 % 10 > n2 % 10:\n            sum += n1 % 10 - n2 % 10\n            n2 = n2 - (n1 % 10)\n            n1 = n1 // 10\n        else:\n            sum += n2 % 10 - n1 % 10\n            n1 = n1 - (n2 % 10)\n            n2 = n2 // 10\n    return sum\n",
        "num_ids": 157
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return(sum([abs(n1-n2) for i in range(10)]))\n",
        "num_ids": 24
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    n1 = int(n1)\n    n2 = int(n2)\n    \n    if n1 < n2:\n        n1, n2 = n2, n1\n    \n    sum_of_digit_diff = 0\n    \n    for i in range(n1, n2 + 1):\n        diff = abs(i - n1)\n        sum_of_digit_diff += diff\n    \n    return sum_of_digit_diff\n",
        "num_ids": 112
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert (type(n1) == int)\n    assert (type(n2) == int)\n    assert (n1!= 0)\n    assert (n2!= 0)\n",
        "num_ids": 46
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_digits = 0\n    \n    # Convert the integers to string\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Find the length of the shorter integer\n    l1 = len(str_n1)\n    l2 = len(str_n2)\n    \n    # Sum up the difference of two strings\n    if l1 > l2:\n        for i in range(0, l1-l2):\n            sum_of_digits += ord(str_n1[i]) - ord(str_n2[i])\n        \n    else:\n        for i in range(0, l2-l1):\n            sum_of_digits += ord(str_n2[i]) - ord(str_n1[i])\n            \n    return sum_of_digits\n    ",
        "num_ids": 207
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    from math import log, sqrt\n    s = 0\n    # print(f\"n1: {n1}, n2: {n2}\")\n    if n1 == n2:\n        return s\n    for i in range(max(len(str(n1)), len(str(n2))), 0, -1):\n        # print(f\"i: {i}, n1: {n1}, n2: {n2}\")\n        n1, n2 = int(n1/pow(10, i)), int(n2/pow(10, i))\n        # print(f\"i: {i}, n1: {n1}, n2: {n2}\")\n        s += abs(n1 - n2)\n    return s\n",
        "num_ids": 182
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def find_diff(n1, n2):\n        '''\n        Write a python function to find the sum of the per-digit difference between two integers.\n        '''\n        diff = 0\n        n1_list = list(str(n1))\n        n2_list = list(str(n2))\n        for i in range(len(n1_list)):\n            if n1_list[i]!= n2_list[i]:\n                diff += int(n1_list[i]) - int(n2_list[i])\n        return diff\n",
        "num_ids": 96
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    num1 = n1\n    num2 = n2\n    \n    n1 = abs(n1)\n    n2 = abs(n2)\n    \n    dist = 0\n    \n    while n1!= 0 and n2!= 0:\n        \n        if n1 >= n2:\n            n1, n2 = n2, n1\n        \n        n1 = n1 // 10\n        n2 = n2 // 10\n        \n        if n1 > n2:\n            n1, n2 = n2, n1\n        \n        dist = dist + abs(n1 - n2)\n        \n    return dist\n    \ndef digit_distance_strings(s1, s2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two strings.\n    '''\n    \n    dist = 0\n    \n    for i in range(0, len(s1)):\n        dist = dist + abs(ord(s1[i]) - ord(s2[i]))\n    \n    return dist\n",
        "num_ids": 56
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_sum = 0\n    curr_sum = 0\n",
        "num_ids": 19
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0 or size == 1:\n        return 0\n    if size == 2:\n        if a[0] > a[1]:\n            return a[0]\n        else:\n            return a[1]\n    max_sum = 0\n    for i in range(0, size):\n        for j in range(i + 1, size):\n            sum = a[i] + a[j]\n            if sum > max_sum:\n                max_sum = sum\n            if max_sum > 0:\n                return max_sum\n",
        "num_ids": 129
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = 0\n    s = 0\n    for i in range(0, size):\n        s += a[i]\n        if s < 0:\n            s = 0\n        elif s > max_sub:\n            max_sub = s\n    return max_sub\n",
        "num_ids": 68
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    local_sum = 0\n    for i in range(size):\n        local_sum += a[i]\n        if local_sum > max_sum:\n            max_sum = local_sum\n        if local_sum < 0:\n            local_sum = 0\n    return max_sum\n",
        "num_ids": 77
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    min_sum = 0\n    max_sum = 0\n    index = 0\n    for i in range(size):\n        if a[i] < min_sum:\n            min_sum = a[i]\n        elif a[i] > max_sum:\n            max_sum = a[i]\n        if max_sum > 0:\n            index = i\n    return (index, max_sum)\n",
        "num_ids": 99
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    curr_sum = 0\n",
        "num_ids": 19
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    start = 0\n    max_sum = -1\n",
        "num_ids": 20
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        dp_table = [[0 for i in range(size)] for j in range(size)]\n        dp_table[0][0] = a[0]\n        max_sub_sum = a[0]\n        for i in range(1, size):\n            dp_table[i][0] = dp_table[i-1][0] + a[i]\n            max_sub_sum = max(max_sub_sum, dp_table[i][0])\n        for i in range(1, size):\n            dp_table[0][i] = dp_table[0][i-1] + a[i]\n            max_sub_sum = max(max_sub_sum, dp_table[0][i])\n        for i in range(1, size):\n            for j in range(1, size):\n                dp_table[i][j] = max(dp_table[i-1][j], dp_table[i][j-1]) + a[i]\n                max_sub_sum = max(max_sub_sum, dp_table[i][j])\n        return max_sub_sum\n",
        "num_ids": 289
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n",
        "num_ids": 16
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # max_sum = 0\n    # for i in range(size):\n    #     cur_sum = 0\n    #     for j in range(i, size):\n    #         cur_sum += a[j]\n    #         if cur_sum > max_sum:\n    #             max_sum = cur_sum\n    # return max_sum\n",
        "num_ids": 85
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    union_list = test_tup1 + test_tup2\n    union_list.sort()\n    return union_list\n",
        "num_ids": 40
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = set(test_tup1) | set(test_tup2)\n    union_tup = sorted(union_tup)\n    return union_tup\n",
        "num_ids": 47
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    union_list.extend(test_tup1)\n    union_list.extend(test_tup2)\n    union_list.sort()\n    return union_list\n",
        "num_ids": 53
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    \n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    \n    for i in test_tup2:\n        if i not in union_tup:\n            union_tup.append(i)\n    \n    return sorted(union_tup)\n    \n    \ndef main():\n    \n    print('\\n\\n--------Union Elements----------\\n')\n    \n    tup1 = (1, 1, 2, 3, 3, 4, 5)\n    tup2 = (2, 2, 4, 5, 6)\n    \n    print(f'Union of the 2 tuples {tup1} and {tup2} is: {union_elements(tup1, tup2)}')\n    print(f'Union of the 2 tuples {tup1} and {tup2} is: {union_elements((1, 2, 3, 4, 5), (2, 4, 6))}')\n    \n    \nif __name__ == \"__main__\":\n    main()\n",
        "num_ids": 268
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    lst = []\n    for i in range(len(test_tup1)):\n        lst.append(test_tup1[i])\n    for j in range(len(test_tup2)):\n        if(test_tup2[j] not in lst):\n            lst.append(test_tup2[j])\n    lst.sort()\n    return lst\n",
        "num_ids": 99
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    union_tup = set(union_tup).union(set(test_tup1))\n    union_tup = set(union_tup).union(set(test_tup2))\n    return sorted(union_tup)\n",
        "num_ids": 68
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #Here we are converting each item in the tuple to set and then converting that set into a list\n    #This way we can sort the list and put it in the final list which we can then return.\n",
        "num_ids": 47
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = list(test_tup1)\n    union.extend(test_tup2)\n    union.sort()\n    return union\n",
        "num_ids": 37
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len=0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if(len(lst[i])==len(lst[j])):\n                max_len=len(lst[i])\n                break\n            else:\n                if(len(lst[i])>max_len):\n                    max_len=len(lst[i])\n    return max_len\n",
        "num_ids": 114
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_lst = lst[i:j]\n            if len(sub_lst) > max_len:\n                max_len = len(sub_lst)\n    return max_len\n",
        "num_ids": 87
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = []\n    for i in range(len(lst)):\n        l.append(len(lst[i]))\n    return(max(l))\n",
        "num_ids": 42
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for item in lst:\n        if len(item)>max:\n            max = len(item)\n    return max\n",
        "num_ids": 37
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dct = {}\n    for i in range(len(lst)):\n        if lst[i] in dct:\n            dct[lst[i]] += 1\n        else:\n            dct[lst[i]] = 1\n    max_value = max(dct.values())\n    max_keys = []\n    for key, value in dct.items():\n        if value == max_value:\n            max_keys.append(key)\n    return max_keys\n",
        "num_ids": 118
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max = 1\n    temp_max = 1\n    for i in range(len(lst)):\n        temp = lst[i: ]\n        if len(temp) > temp_max:\n            temp_max = len(temp)\n        if len(temp) == temp_max:\n            max = max + 1\n    return max\n",
        "num_ids": 97
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = len(lst)\n    # l = lst.__len__()\n    # n = len(lst)\n    max = 0\n    for i in range(n):\n        for j in range(n):\n            if lst[i] < lst[j]:\n                max = lst[j] - lst[i] + 1\n                if max > max:\n                    max = max\n    print(max)\n        \nFind_Max_Length([10,20,30,20,40])\nFind_Max_Length([1,2,3,4,5])\nFind_Max_Length([1,1,1,1,1])\nFind_Max_Length([1,2,3,4,5,6])\nFind_Max_Length([1,2,3,4,5,6,7])\nFind_Max_Length([1,2,3,4,5,6,7,8])\nFind_Max_Length([1,2,3,4,5,6,7,8,9])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39])\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40])\nFin",
        "num_ids": 2014
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    for i in range(len(lst)-1):\n        if lst[i]>lst[i+1]:\n            max_length = max(max_length,i+1)\n    return max_length\n",
        "num_ids": 61
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maximum = 0\n    for i in lst:\n        if len(i) > maximum:\n            maximum = len(i)\n    return maximum\n    \nlst = [[1,2],[3,4],[5,6],[7,8],[9,10]]\nprint(\"The length of the list\",lst)\nprint(\"The maximum length of the list is\",Find_Max_Length(lst))\n",
        "num_ids": 96
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    Max_Len = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if len(lst[i:j+1]) > Max_Len:\n                Max_Len = len(lst[i:j+1])\n",
        "num_ids": 73
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    '''\n    \"This is an example of a good program.\"\n    extract_values(\"This is an example of a good program.\")\n    '[\"good\", \"program\"]'\n    '''\n    return re.findall(r'\"[^\"]*\"', text)\n",
        "num_ids": 20
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    output = re.findall(r'\"[^\"]+\"', text)\n    output.sort()\n    return output\n",
        "num_ids": 31
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text == '':\n        return []\n    \n    values = []\n    for item in text.split('\\n'):\n        \n        if re.search('\"', item) and not re.search('\"', item[-1]) and not re.search('\\s[a-zA-Z]+', item):\n            value = item.split('\"')\n            value = value[-1].replace('\"','').replace('\\s','').replace('\\n','')\n            value = value.replace(' ', '')\n            values.append(value)\n    \n    return values\n    \nprint(extract_values(\"\"\"\n            \"What is the latest news about 'Coronavirus'?\"\n            \"There's a new coronavirus in India!\"\n            \"Wuhan is spreading the virus!\"\n            \"If you are reading this, it means that you are reading the latest news about coronavirus and it's spreading in India!\"\n            \"Coronavirus disease 2019 - Pandemic is getting deeper with the pandemic. Tell your friends, tell your associates, tell your neighbors, tell your friends and family, tell your neighbors and family, tell your friends and relatives, tell your relatives and friends, and so on.\"\n            \"It is always dangerous to go out without preparing beforehand. Take necessary precautions and get to work without delays or restrictions. Stay home! Don't travel alone. Eat Healthy.\"\n            \"\"\"\"\"\"))\n",
        "num_ids": 325
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"[a-zA-Z ]+\\\"'\n    result = re.findall(pattern, text)\n    return result\n    \ndef extract_values_in_brackets(text):\n    '''\n    Write a function to extract values between brackets (e.g. {1,2} ) from a string.\n    '''\n    pattern = r'(\\{[1,2]\\})'\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    quot_list = re.findall(r\"\\\"(.+?)\\\"\",text)\n    return quot_list\n",
        "num_ids": 33
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'[\\w]+', text)\n",
        "num_ids": 19
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p1 = re.compile(r'\\\"')\n    p2 = re.compile(r'\\\"\\\"')\n    p3 = re.compile(r'\\\"\\' ')\n    p4 = re.compile(r'\\n')\n    p5 = re.compile(r'\\\" ')\n    p6 = re.compile(r'\"\"')\n    p7 = re.compile(r'\\' \\' ')\n    p8 = re.compile(r'\\'')\n    p9 = re.compile(r'\\n\\' \\' ')\n    p10 = re.compile(r'\\n\\s')\n    p11 = re.compile(r'\\'\\'\\'')\n    p12 = re.compile(r'\\n\\'\\'\\n')\n    p13 = re.compile(r'\\'')\n    p14 = re.compile(r'\\n')\n    p15 = re.compile(r'\\n\\s')\n    p16 = re.compile(r'\\n\\'\\s')\n    p17 = re.compile(r'\\n\\'\\'\\s')\n    p18 = re.compile(r'\\'\\'\\n')\n    p19 = re.compile(r'\\n \\'\\n')\n    p20 = re.compile(r'\\n \\' \\'\\n')\n    p21 = re.compile(r'\\n\\'\\n')\n    p22 = re.compile(r'\\'\\' \\'\\n')\n    p23 = re.compile(r'\\n\\'\\'\\'\\n')\n    p24 = re.compile(r'\\n\\'\\'\\'\\n\\s')\n    p25 = re.compile(r'\\n\\'\\'\\'\\n\\'\\s')\n    p26 = re.compile(r'\\n\\'\\'\\'\\n\\'\\s')\n    p27 = re.compile(r'\\'\\'\\'\\n\\s')\n    p28 = re.compile(r'\\n\\'\\'\\'\\n\\'\\s')\n    p29 = re.compile(r'\\n\\'\\'\\'\\n\\'\\s')\n    p30 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n')\n    p31 = re.compile(r'\\n\\'\\'\\'\\n\\n')\n    p32 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n')\n    p33 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\s')\n    p34 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\s')\n    p35 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n')\n    p36 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\s')\n    p37 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n')\n    p38 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\s')\n    p39 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n')\n    p40 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\s')\n    p41 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\s')\n    p42 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n')\n    p43 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n')\n    p44 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\s')\n    p45 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\s')\n    p46 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\s')\n    p47 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\s')\n    p48 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\s')\n    p49 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\s')\n    p50 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\s')\n    p51 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p52 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p53 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p54 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p55 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p56 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p57 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p58 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p59 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p60 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p61 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p62 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p63 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p64 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p65 = re.compile(r'\\n\\'\\'\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\'\\n\\n\\'\\n\\n')\n    p66 = re",
        "num_ids": 2015
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    ans=text.split('\"')\n    for i in range(len(ans)):\n        if i!=0:\n            ans[i] = ans[i].replace('\"','')\n    print(ans)\n    return ans\n",
        "num_ids": 59
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #1. I want to extract all the values between quotes\n    #2. I want to remove the leading and trailing white spaces in the extracted values\n    #3. I want to strip the trailing white spaces in the extracted values\n    #4. I want to return the extracted values\n    #Expected output:\n    #['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    text=text.strip()\n    if text.count('\\\"') %2!= 0:\n        text = text.replace(\"\\\"\",\" \")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\";\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\")\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace('\"', \"\")\n    text = text.split()\n    \n    #convert list to a set to remove the duplicates\n    text = list(set(text))\n    \n    #remove leading and trailing white spaces in the extracted values\n    text = [x.strip() for x in text]\n    \n    #strip the trailing white spaces in the extracted values\n    for i in range(len(text)-1,-1,-1):\n        if text[i] == \"\":\n            text.pop(i)\n    return text\n    \ndef sort_list(value):\n    '''\n    Write a function to sort a list of tuples/strings based on the first character of the string/tuple.\n    '''\n    #Expected output:\n    #['D', 'A', 'B', 'C', 'E']\n    sort_list = []\n    \n    for item in value:\n        sort_list.append(item[0])\n    sort_list.sort()\n    return sort_list\n",
        "num_ids": 69
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        regex_pattern = r\"\\\"(.*?)\\\"\"\n        return re.findall(regex_pattern,text)\n    except:\n        return -1\n",
        "num_ids": 45
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] > arr[j]):\n                count = count +1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    i = 0\n    while(i<n):\n        j = 0\n        k = i\n        while(j<n-1):\n            if(arr[j] == arr[j+1]):\n                k = 0\n                i = i+1\n                break\n            else:\n                k = k+1\n            j = j+1\n        if(k<n):\n            i = 0\n        else:\n            print(arr[i],arr[k])\n            i = k+1\n",
        "num_ids": 120
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                cnt+=1\n    return cnt\narr = [1,2,3,4,5,6,7,8,9,10]\nprint(count_Pairs(arr,len(arr)))\n",
        "num_ids": 92
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i] == arr[j]):\n                cnt += 1\n                break\n    print(\"Total number of possible unordered pairs: \" + str(cnt))\n    return\n",
        "num_ids": 88
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    arr.sort()\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            pairs += 1\n    print(\"pairs\", pairs)\n    return pairs\n",
        "num_ids": 58
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    i = 0\n    while i < n:\n        if arr[i]!= arr[i+1]:\n            pairs += 1\n        i += 1\n    print(pairs)\n",
        "num_ids": 53
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    m = n\n    count = 0\n    while m > 0:\n        m = m//2\n        count += n//2\n    \n    return count\n",
        "num_ids": 39
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n        \ndef count_Unordered_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    lst=[]\n    for i in word:\n        lst.append(i)\n    return lst\n",
        "num_ids": 29
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n",
        "num_ids": 10
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    print(word[0])\n",
        "num_ids": 10
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # split the word and return a list\n    return list(word)\n",
        "num_ids": 19
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = [] \n    for i in word:\n        result.append(i)\n    return result \n    \ndef multiply(a,b):\n    '''\n    Write a python function that takes two integers and returns their multiplication.\n    '''\n    result = a * b \n    return result\n",
        "num_ids": 14
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [i for i in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num = int(n)\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num = int(num / 10)\n    return sum\n    # n = int(input())\n    # print(sum_digits(n))\n",
        "num_ids": 64
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    sum_n = 0\n    while n > 0:\n        sum_n = sum_n + n % 10\n        n = n // 10\n        \n    return sum_n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n       ",
        "num_ids": 2014
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -sum_digits(-n)\n    return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 36
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # get the digit and sum\n    # check if n is a positive integer\n    # if not, return 0\n    # else, do the same as above\n",
        "num_ids": 38
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n%10\n        n = n//10\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        while n > 1:\n            # print(f'n = {n}')\n            n = n // 10\n        return n\n",
        "num_ids": 59
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = int(n / 10)\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n!= 0:\n        n, digit = divmod(n, 10)\n        total += digit\n    return total\n",
        "num_ids": 37
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    # my solution\n    def check(list1):\n        return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n    \n    # fastest solution\n    def is_sorted(lst):\n        return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    \n    # best solution\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # an another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    \n    # another\n    def is_sorted",
        "num_ids": 2015
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list_length = len(list1)\n    if list_length == 1:\n        return True\n    for i in range(list_length):\n        if i == list_length - 1:\n            return True\n        if list1[i] > list1[i + 1]:\n            return False\n",
        "num_ids": 72
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1 or len(list1) == 2:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])\n",
        "num_ids": 62
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    assert len(list1) > 1, 'Error: list is empty'\n    if len(list1) == 1:\n        return True\n    if list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n        else:\n            return True\n",
        "num_ids": 44
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #the first element of the list should be the smallest\n    #check if the first element is smaller than the second element\n    #if yes, then start checking from the second element\n    #else, return False\n    if len(list1) < 2:\n        return False\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n",
        "num_ids": 101
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if(list1[i]>list1[i+1]):\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    return issort_list(list1[1:])\n",
        "num_ids": 49
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    empty_list = []\n    for x in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 35
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Your code here\n    return_list = []\n    for i in range(length):\n        return_list.append({})\n    return return_list\n",
        "num_ids": 39
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [{}] * length\n",
        "num_ids": 13
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Create an empty list\n    empty_list = []\n    # Loop N times\n    for i in range(length):\n        # Append empty dictionaries to the list\n        empty_list.append({})\n",
        "num_ids": 51
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n",
        "num_ids": 27
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        d = dict()\n        l.append(d)\n    return l\n",
        "num_ids": 34
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n",
        "num_ids": 18
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        sublists = []\n        for j in range(len(list1[i])):\n            if(list1[i][j]!=''):\n                sublists.append(list1[i][j])\n        sublists.sort()\n        list1[i] = sublists\n    return list1\n",
        "num_ids": 87
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for lst in list1:\n        list2.append(sorted(lst))\n    return(list2)\n",
        "num_ids": 37
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Sort each sublist in reverse order\n    for i in range(len(list1)):\n        list1[i].sort(reverse=True)\n",
        "num_ids": 38
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(list1)):\n        list1[i].sort()\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n    \ndef get_characters_in_string(word):\n    '''\n    Write a function that takes a string and returns a sorted list of all the characters in that string.\n    '''\n    # create a list of characters in the string\n    return sorted([char for char in word])\n",
        "num_ids": 24
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if list1 == [] or list1 == [[]]:\n        return []\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n        for j in range(len(list1[i])):\n            list1[i][j] = int(list1[i][j])\n    return list1\n",
        "num_ids": 87
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2=[]\n    for sublist in list1:\n        list2.append(sorted(sublist))\n    return list2\n",
        "num_ids": 35
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    from collections import Counter\n    from heapq import heappush, heappop\n    # 1. Create a counter object\n    counter = Counter(nums)\n    # 2. Create a list with just the unique values\n    unique_list = []\n    for k, v in counter.items():\n        unique_list.append(k)\n    # 3. Sort the unique list\n    unique_list.sort()\n    # 4. Loop through the sorted list and compare with the original list\n    for i in range(len(nums)):\n        if nums[i] == unique_list[i]:\n            nums.remove(nums[i])\n    return nums\n",
        "num_ids": 158
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set([i for i in nums if nums.count(i) == 1]))\n",
        "num_ids": 27
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    result = []\n    for index, num in enumerate(nums):\n        if num not in result:\n            result.append(num)\n        else:\n            nums.pop(index)\n    return nums\n",
        "num_ids": 64
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    from collections import Counter\n    #get length of each element in list\n    counts = []\n    for i in nums:\n        counts.append(len(i))\n",
        "num_ids": 43
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Naive solution\n    # for i in range(len(nums)):\n    #     for j in range(i+1, len(nums)):\n    #         if nums[i] == nums[j]:\n    #             nums.remove(nums[j])\n    # return nums\n",
        "num_ids": 77
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert list to set\n    nums = set(nums)\n    # Check if there is any duplicate element in the set\n    if len(nums) == len(nums):\n        return nums\n    else:\n        return nums\n",
        "num_ids": 60
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(nums)\n    for i in range(len(nums)):\n        if nums.count(nums[i]) == 1:\n            del nums[i]\n            nums.append(nums[i])\n    return nums\n",
        "num_ids": 66
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    result = []\n    for i in range(len(nums)):\n        if nums[i] not in result:\n            result.append(nums[i])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 47
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) == 0:\n        return 0\n    \n    hash_data = {}\n    for x in list_data:\n        if x in hash_data:\n            hash_data[x] = hash_data[x] + 1\n        else:\n            hash_data[x] = 1\n    \n    for x in hash_data:\n        if hash_data[x] == 1:\n            return x\n        \n    return -1\n",
        "num_ids": 110
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for ele in list_data:\n        result = result * ele\n    return result\nprint(unique_product([1, 2, 3, 4, 5, 1, 2, 4, 4])",
        "num_ids": 51
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    unique_list = []\n    for item in list_data:\n        if item in unique_list:\n            continue\n        else:\n            unique_list.append(item)\n            product = product * item\n    return product\n",
        "num_ids": 60
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # OR\n    # O",
        "num_ids": 2013
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    list_data.sort()\n    for i in range(1, len(list_data)):\n        if list_data[i]!= list_data[i-1]:\n            product *= list_data[i]\n    return product\n",
        "num_ids": 65
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    unique_list = list(set(list_data))\n    print('Unique list : ', unique_list)\n    result = 1\n    for i in unique_list:\n        result *= i\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    \n    for i in list_data:\n        if i not in product:\n            product = product * i\n    return product\n",
        "num_ids": 37
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) == 1:\n        return list_data[0]\n    list_data.sort()\n    d = {}\n    for i in list_data:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d.values():\n        print(i)\n",
        "num_ids": 90
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # CODE HERE\n    # print('Before Calculating Unique Products:',list_data)\n    return 1\n    \n",
        "num_ids": 29
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    lst = []\n    for i in list_data:\n        if i not in lst:\n            lst.append(i)\n    return(reduce(lambda x, y: x*y, lst))\n",
        "num_ids": 54
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    return 2 * pi * r * h + 2 * pi * r ** 2\n",
        "num_ids": 28
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r * 2 * h\n",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = (3.14159*r**2)\n    b = (2*3.14159*r*h)\n    c = (h*2*3.14159)\n    d = (2*3.14159*r*h)\n    e = (3.14159*r**2)\n    f = ((a + b + c + d) - e)\n    s = (f/2)\n    return s\n",
        "num_ids": 105
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*pi*r*(h+r))\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate surface area\n    area = 3.14*r*(r+h)\n    # Return the surface area\n    return area\n",
        "num_ids": 35
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n",
        "num_ids": 16
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=pi*r*r+2*pi*r*h\n    return surfacearea\n",
        "num_ids": 25
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*pi*r*h+2*pi*r*r\n    return surfacearea\n",
        "num_ids": 27
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    surface_area = 2*pi*(r**2) + 2*pi*h*r\n    return surface_area\n",
        "num_ids": 41
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = (2*pi*r**2)+ (2*pi*r*h)\n    return surfacearea\n",
        "num_ids": 30
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = True\n    if A == []:\n        return False\n    for i in range(len(A)):\n        if (sum(A[:i]) == sum(B) and len(A)>=i):\n            flag = False\n    return flag\n",
        "num_ids": 64
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # for i in range(len(A)):\n    #     if A[i:i+len(B)]==B:\n    #         return True\n    # return False\n    # print(A[i:i+len(B)])\n    # print(A.count(B))\n    # print(A)\n    # print(B)\n    # print(A.index(B))\n    # return A.index(B)\n    # print(A.find(B))\n    if A in B:\n        return True\n    else:\n        return False\n    \n    ",
        "num_ids": 139
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #a=A[:]\n    #a.sort()\n    #b=B[:]\n    #b.sort()\n    #if(a==b):\n    #    print(\"true\")\n    #else:\n    #    print(\"false\")\n    #print(a)\n    #print(b)\n    if(all(x in A for x in B)):\n        print(\"true\")\n    else:\n        print(\"false\")\n",
        "num_ids": 107
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    if (len(A) < len(B)): \n        return False\n    while (i < len(A) and j < len(B)): \n        if (A[i] == B[j]): \n            k = k + 1\n            i = i + 1\n            j = j + 1\n        else: \n            j = j + 1\n    if (k == len(B)): \n        return True\n    else: \n        return False\n    \ndef Inverse(a,b):\n    '''\n    Write a python function to find the inverse of a fraction a/b.\n    '''\n    a, b = divmod(a, b)\n    return b, a\n    \ndef common(A,B):\n    '''\n    Write a python function to find common members of two sets.\n    '''\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if (A[i] == B[j]):\n                return A[i]\n",
        "num_ids": 47
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(i in A for i in B)\n",
        "num_ids": 15
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    #for all the elements in list A\n    for i in range(len(A)):\n        #check if A[i] is a subset of A[i+1]\n        if sum(A[i])<sum(A[i+1]):\n            return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    subs = 0\n    for i in range(len(A)):\n        if A[i] in B:\n            subs += 1\n",
        "num_ids": 36
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    try:\n        if (A[0]==B[0]):\n            if (A[-1]==B[-1]):\n                return 1\n        else:\n            return 0\n    except:\n        return 0\n",
        "num_ids": 56
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A) \n    m = len(B) \n    if n > m: \n        return False \n    if A[0:m] == B: \n        return True\n    for i in range(m - n + 1): \n        if A[i : i + n] == B: \n            return True\n    return False",
        "num_ids": 86
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    arr = np.array(A)\n    arr2 = np.array(B)\n    for i in arr:\n        if i in arr2:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0: \n        return 0\n    last_digit = 0\n    while (n!= 0): \n        last_digit = n % 10\n        n = n // 10\n    return last_digit\n",
        "num_ids": 53
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact % 10\n",
        "num_ids": 33
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n > 0:\n        n = n // 10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = int(n)\n    l = []\n    while True:\n        n, r = divmod(n, 10)\n        l.append(r)\n        if n == 0:\n            break\n    return l[-1]\n",
        "num_ids": 59
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact%10\n    \ndef sumOfDigits(n): \n    '''\n    Write a python function to sum of all digits in a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    sum = 0\n    while(fact>0):\n        sum = sum + fact%10\n        fact = fact//10\n    return sum\n    \ndef lengthOfLongestSubstring(string): \n    '''\n    Write a python function to find the length of longest substring in a given string.\n    '''\n    max = 0\n    curr = 0\n    dict = {}\n    for i in string:\n        if i in dict.keys():\n            curr = max\n            max = curr + 1\n            dict = {}\n            dict[i] = 1\n            curr = 1\n        else:\n            curr = 1\n            dict[i] = curr\n            max = curr\n    return max\n    \ndef palindrome(string): \n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    if len(string) == 0:\n        return False\n    if string[0] == string[-1]:\n        return palindrome(string[1:-1])\n    else:\n        return False\n        \ndef timeInWords(h, m): \n    '''\n    Write a python function to print time in words.\n    '''\n    ans = \"\"\n    if (h == 12):\n        ans = \"noon\"\n    elif (h==0):\n        ans = \"midnight\"\n    elif (h < 12):\n        ans = \"good\"\n    else:\n        ans = \"bad\"\n    if (m == 0):\n        ans = ans + \" \" + \"minute\"\n        return ans\n    elif (m < 60):\n        ans = ans + \" \" + \"minute\"\n        return ans\n    else:\n        ans = ans + \" \" + \"hour\"\n        return ans\n    \ndef reverse_string(string): \n    '''\n    Write a python function to reverse a string.\n    '''\n    reversed_string = \"\"\n    for i in range(len(string)-1,-1,-1):\n        reversed_string = reversed_string + string[i]\n    return reversed_string\n    \ndef remove_duplicates(lst):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    new_list = []\n    for item in lst:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n    \ndef remove_duplicates_no_object_ref(lst):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    new_list = []\n    for item in lst:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n    \ndef merge_the_tools(string, k): \n    '''\n    Write a python function to merge all the strings in a list into one using the key.\n    '''\n    res = \"\"\n    for i in range(0,len(string),k):\n        res = res + string[i:i+k]\n    return res\n    \ndef amstrong(n): \n    '''\n    Write a python function to find the amstrong number of a given number.\n    '''\n    sum = 0\n    temp = n\n    while(n>0):\n        digit = n%10\n        sum = sum + digit**3\n        n = n//10\n    return sum == temp\n    \ndef find_pair(arr, target): \n    '''\n    Write a python function to find two elements from an array whose sum is equal to the given target.\n    '''\n    index1 = 0\n    index2 = 0\n    arr = sorted(arr)\n    for i in range(0,len(arr)-1):\n        if arr[i] + arr[i+1] == target:\n            index1 = i\n            index2 = i+1\n            break\n    if index1 == 0 and index2 == 0:\n        return -1,-1\n    if index1 == 0:\n        return -1, arr[index2]\n    if index2 == 0:\n        return arr[index1], -1\n    return arr[index1], arr[index2]\n    \ndef find_substring(string, sub_string): \n    '''\n    Write a python function to find a sub-string in a given string.\n    '''\n    for i in range(0,len(string)-len(sub_string)+1):\n        if string[i:i+len(sub_string)] == sub_string:\n            return True\n    return False\n    \ndef non_overlapping_intervals(intervals): \n    '''\n    Write a python function to find the non-overlapping intervals from the list.\n    '''\n    non_overlapping_intervals = []\n    for i in range(0,len(intervals)):\n        if intervals[i][0] == intervals[i][1]:\n            non_overlapping_intervals.append(intervals[i])\n            continue\n        else:\n            for j in range(i+1,len(intervals)):\n                if intervals[i][1] > intervals[j][0] and intervals[i][1] < intervals[j][1]:\n                    non_overlapping_intervals.append([intervals[i][0], intervals[j][1]])\n                    break\n                if intervals[j][0] > intervals[i][1]:\n                    break\n    return non_overlapping_intervals\n    \ndef sort_list_by_substring(s): \n    '''\n    Write a python function to sort a given list by substring of the list.\n    '''\n    sub_string = s[0]\n    for i in range(1,len(s)):\n        if len(sub_string) < len(s[i]):\n            sub_string = s[i]\n    \n    return sorted(s,key = lambda sub_string: sub_string[0:len(sub_string)])\n    \ndef sort_list_by_substring_v2(s): \n    '''\n    Write a python function to sort a given list by substring of the list.\n    '''\n    sub_string = s[0]\n    for i in range(1,len(s)):\n        if len(sub_string) < len(s[i]):\n            sub_string = s[i]\n    \n    return sorted(s,key = lambda sub_string: sub_string)\n    \ndef partition(arr, low, high): \n    '''\n    Write a python function to partition a given array around a value x.\n    '''\n    i = (low-1)\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1)\n    \ndef quickSort(arr, low, high): \n    '''\n    Write a python function to sort a given array using quick sort.\n    '''\n    if low < high:\n        pi = partition(arr, low, high)\n        quickSort(arr, low, pi-1)\n        quickSort(arr, pi+1, high)\n    return arr\n    \ndef partition_count(arr, low, high): \n    '''\n    Write a python function to find the count of partitions in a given array.\n    '''\n    cnt = 0\n    pivot = arr[high]\n    i = low-1\n    for j in range(low,high):\n        if arr[j] <= pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n            cnt = cnt + 1\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return cnt\n    \nde",
        "num_ids": 111
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fac = 1\n    for i in range(1,n+1):\n        fac = fac*i\n    return(fac%10)\n",
        "num_ids": 35
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        print(\"Incorrect input\") \n    else: \n        fac = 1\n        while(n // 10!= 0): \n            fac = fac * 10\n            n = n // 10\n        return (n * fac) % 10\n",
        "num_ids": 65
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    if(n<0):\n        return 0\n    else:\n        while(n>0):\n            fact*=n\n            n-=1\n        return fact\n    ",
        "num_ids": 48
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n_string = str(n)\n    n_string_list = list(n_string)\n    last_digit = n_string_list[-1]\n    return int(last_digit)\n",
        "num_ids": 50
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    res = 1\n    for i in range(1,n+1):\n        res = res*i\n    return res%10\n",
        "num_ids": 33
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "num_ids": 67
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.extend([list1[i],list2[i],list3[i]])\n    return l\n",
        "num_ids": 47
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "num_ids": 69
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n",
        "num_ids": 53
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    merged_list = []\n    while len(list1) > 0 and len(list2) > 0 and len(list3) > 0:\n        merged_list.extend([list1.pop(0), list2.pop(0), list3.pop(0)])\n    while len(list1) > 0:\n        merged_list.extend([list1.pop(0), list2.pop(0)])\n    while len(list2) > 0:\n        merged_list.extend([list1.pop(0), list2.pop(0)])\n    while len(list3) > 0:\n        merged_list.extend([list1.pop(0), list2.pop(0)])\n    return merged_list\n",
        "num_ids": 183
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n        list3.append(list3[-1])\n    return list3\n",
        "num_ids": 57
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n",
        "num_ids": 9
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n",
        "num_ids": 53
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Declare an empty list\n    list = []\n    # While all lists are not empty\n    while(list1 and list2 and list3):\n        # Add the first element of list1\n        list.append(list1.pop(0))\n        # Add the first element of list2\n        list.append(list2.pop(0))\n        # Add the first element of list3\n        list.append(list3.pop(0))\n    # Return the interleaved list\n    return list\n",
        "num_ids": 119
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    flatten = []\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        flatten.append(list1[i])\n        flatten.append(list2[j])\n        flatten.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return flatten\n",
        "num_ids": 105
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) - set(test_tup2)) + list(set(test_tup2) - set(test_tup1))\n",
        "num_ids": 44
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dic_test = {}\n    set_test = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in set_test:\n            dic_test[test_tup1[i]] = dic_test.get(test_tup1[i], 0) + 1\n        else:\n            dic_test[test_tup1[i]] = 1\n            set_test.add(test_tup1[i])\n    for j in range(len(test_tup2)):\n        if test_tup2[j] in dic_test.keys():\n            dic_test[test_tup2[j]] = dic_test.get(test_tup2[j], 0) - 1\n        else:\n            dic_test[test_tup2[j]] = -1\n    result = []\n    for k, v in dic_test.items():\n        if v == -1:\n            result.append(k)\n    return result\n",
        "num_ids": 253
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n",
        "num_ids": 12
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [i for i in test_tup1 if i not in test_tup2] + [i for i in test_tup2 if i not in test_tup1]\n",
        "num_ids": 46
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(i for i in test_tup1 if i not in test_tup2)\n",
        "num_ids": 26
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1[1]\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2[1]\n        else:\n            return test_tup1[1]\n    else:\n        if test_tup1[0] < test_tup2[0]:\n            return test_tup1[0]\n        elif test_tup1[0] > test_tup2[0]:\n            return test_tup2[0]\n        else:\n            return test_tup1[0]\n",
        "num_ids": 182
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    # set for storing the dissimilar elements\n    dissimilar_set = set()\n    \n    # iterate through both the tuples\n    for num1, num2 in zip(test_tup1, test_tup2):\n        \n        # if the elements are not equal, add to the set\n        if num1!= num2:\n            dissimilar_set.add(num1)\n            dissimilar_set.add(num2)\n            \n    # return the set of dissimilar elements\n    return dissimilar_set\n",
        "num_ids": 130
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    output = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            output.append(test_tup1[i])\n    return output\n",
        "num_ids": 62
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # time complexity O(n)\n    # space complexity O(n)\n    # two for loops\n    for i in test_tup1:\n        if i in test_tup2:\n            return i\n    return None\n",
        "num_ids": 56
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a_string = []\n    tup1_tuple = []\n    tup2_tuple = []\n    for x in range(0,len(test_tup1)):\n        tup1_tuple.append(test_tup1[x])\n        tup2_tuple.append(test_tup2[x])\n    tup1_tuple = tuple(tup1_tuple)\n    tup2_tuple = tuple(tup2_tuple)\n",
        "num_ids": 121
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i][0] % 2!= 0:\n            test_tuple[i] = even_fnc(test_tuple[i])\n    return test_tuple\n",
        "num_ids": 64
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print(test_tuple)\n    \n    for i in test_tuple:\n        if type(i) == tuple:\n            even_ele(i, even_fnc)\n        elif type(i) == int:\n            if i % 2 == 0:\n                even_fnc(i)\n",
        "num_ids": 75
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    i = 0\n    while i < len(test_tuple):\n        if test_tuple[i][0] % 2!= 0:\n            if even_fnc == \"filter\":\n                test_tuple.pop(i)\n            else:\n                test_tuple.remove(test_tuple[i])\n        else:\n            i += 1\n    return test_tuple\n",
        "num_ids": 95
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) > 1:\n        if len(test_tuple) % 2 == 0:\n            result = test_tuple[0::2]\n            return even_ele(result, even_fnc)\n        else:\n            result = test_tuple[1::2]\n            return even_ele(result, even_fnc)\n    else:\n        return test_tuple\n",
        "num_ids": 99
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    out_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            out_tuple.append(i)\n    return tuple(out_tuple)\n",
        "num_ids": 51
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #defining the function\n    def even_ele_wrt(test_tuple):\n        for each_tuple in test_tuple:\n            for each_tuple_2 in each_tuple:\n                if even_fnc(each_tuple_2) == False:\n                    test_tuple.remove(each_tuple)\n    #calling the function\n    even_ele_wrt(test_tuple)\n    return test_tuple\n",
        "num_ids": 111
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            even_ele(test_tuple[i], even_fnc)\n        else:\n            if test_tuple[i]%2==0:\n                continue\n            else:\n                even_fnc(test_tuple)\n                break\n",
        "num_ids": 91
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    while True:\n        try:\n            if test_tuple[0] % 2!= 0:\n                test_tuple = test_tuple[1:]\n            else:\n                test_tuple = test_tuple[2:]\n        except IndexError:\n            return test_tuple\n        else:\n            even_ele(test_tuple, even_fnc)\n",
        "num_ids": 106
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "num_ids": 19
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if type(i) is tuple:\n            even_list.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                even_list.append(i)\n    return tuple(even_list)\n",
        "num_ids": 81
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h = b/s\n    s = b*s\n    ans = 2*s*(s-h)\n    return ans\n",
        "num_ids": 33
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (s*s)/2 + (s*s) + (s*s)\n",
        "num_ids": 23
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #The idea is to add the surfaces of each of the four triangles \n    #We will keep adding the surface of each triangle to the total surface\n    #So the time complexity will be O(n) and the space complexity will be O(1)\n    total_surf = (s*s*b)*(1/2)\n    return total_surf\n",
        "num_ids": 84
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s\n    return area\n",
        "num_ids": 17
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (b * s) / 2\n    return 4 * a\n",
        "num_ids": 19
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    side = s/2\n    area = (s**2)*3.14159265359/4\n    return area\n",
        "num_ids": 30
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (1/2)*(b**2)*s\n    print(area)\n",
        "num_ids": 23
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def pyramid_Surface_Area(height, base): \n        '''\n        Provide the surface area of a square pyramid with a given base edge and height.\n        '''\n        return (base*height*2)+(height*2)\n        \n    print(pyramid_Surface_Area(2,4))\n    \n    '''\n    Write a python function to calculate a person's body mass index.\n    '''\n    def body_mass_index(weight, height): \n        '''\n        Provide a person's body mass index.\n        '''\n        return (weight/height**2)\n        \n    print(body_mass_index(60, 1.71))\n    \n    '''\n    Write a python function that accepts an input of any positive integer and returns that integer in binary.\n    '''\n    def binary(num):\n        '''\n        Convert a integer into its binary form.\n        '''\n        return '{:b}'.format(num)\n        \n    print(binary(5))\n    \n    '''\n    Write a python function that accepts a name and a surname and returns a neatly formatted full name.\n    '''\n    def full_name(name,surname):\n        '''\n        Convert a name and a surname into a neatly formatted full name.\n        '''\n        return name+' '+surname\n        \n    print(full_name('Joe', 'Bloggs'))\n    \n    '''\n    Write a python function to convert a date in yyyy-mm-dd format into dd-mm-yyyy format.\n    '''\n    def date_converter(date):\n        '''\n        Convert a date in yyyy-mm-dd format into dd-mm-yyyy format.\n        '''\n        return '{:%d-%m-%Y}'.format(date)\n        \n    print(date_converter(datetime.date(2020, 4, 4)))\n    \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    def factorial(num):\n        '''\n        Return the factorial of a number.\n        '''\n        if num==0 or num==1:\n            return 1\n        else:\n            return num*factorial(num-1)\n        \n    print(factorial(5))\n    \n    '''\n    Write a python function to find the number of days in each month.\n    '''\n    def num_of_days_in_month(month):\n        '''\n        Return the number of days in a given month.\n        '''\n        if month==1 or month==3 or month==5 or month==7 or month==8 or month==10 or month==12:\n            return 31\n        elif month==4 or month==6 or month==9 or month==11:\n            return 30\n        else:\n            return 28\n        \n    print(num_of_days_in_month(4))\n    \n    '''\n    Write a python function to calculate a person's age in years.\n    '''\n    def age_in_years(age):\n        '''\n        Calculate age in years.\n        '''\n        return (age/365)\n        \n    print(age_in_years(1))\n    \n    '''\n    Write a python function to calculate a person's age in months.\n    '''\n    def age_in_months(age):\n        '''\n        Calculate age in months.\n        '''\n        return age_in_years(age)*12\n        \n    print(age_in_months(30))\n    \n    '''\n    Write a python function to calculate a person's age in weeks.\n    '''\n    def age_in_weeks(age):\n        '''\n        Calculate age in weeks.\n        '''\n        return age_in_months(age)*4\n        \n    print(age_in_weeks(90))\n    \n    '''\n    Write a python function to calculate a person's age in days.\n    '''\n    def age_in_days(age):\n        '''\n        Calculate age in days.\n        '''\n        return age_in_weeks(age)*7\n        \n    print(age_in_days(30))\n    \n    '''\n    Write a python function to calculate the area of a rectangle.\n    '''\n    def rectangle_area(length,width):\n        '''\n        Calculate the area of a rectangle.\n        '''\n        return (length*width)\n        \n    print(rectangle_area(5,5))\n    \n    '''\n    Write a python function to calculate the area of a triangle.\n    '''\n    def triangle_area(base,height):\n        '''\n        Calculate the area of a triangle.\n        '''\n        return (base*height)/2\n        \n    print(triangle_area(5,6))\n    \n    '''\n    Write a python function to calculate the volume of a cylinder.\n    '''\n    def cylinder_volume(radius,height):\n        '''\n        Calculate the volume of a cylinder.\n        '''\n        return (3.14*radius*radius*height)\n        \n    print(cylinder_volume(5,6))\n    \n    '''\n    Write a python function to calculate the volume of a sphere.\n    '''\n    def sphere_volume(radius):\n        '''\n        Calculate the volume of a sphere.\n        '''\n        return (4/3*3.14*radius**3)\n        \n    print(sphere_volume(5))\n    \n    '''\n    Write a python function to find the sum of two integers.\n    '''\n    def sum_int(num1,num2):\n        '''\n        Calculate the sum of two integers.\n        '''\n        return num1+num2\n        \n    print(sum_int(5,5))\n    \n    '''\n    Write a python function to find the sum of two floating points.\n    '''\n    def sum_float(num1,num2):\n        '''\n        Calculate the sum of two floating points.\n        '''\n        return num1+num2\n        \n    print(sum_float(0.25,0.5))\n    \n    '''\n    Write a python function to find the sum of two complex numbers.\n    '''\n    def sum_complex(num1,num2):\n        '''\n        Calculate the sum of two complex numbers.\n        '''\n        return complex(num1,num2)\n        \n    print(sum_complex(0.25+0.5j,0.5-0.25j))\n    \n    '''\n    Write a python function to find the sum of two boolean values.\n    '''\n    def sum_bool(num1,num2):\n        '''\n        Calculate the sum of two boolean values.\n        '''\n        return num1+num2\n        \n    print(sum_bool(True,False))\n    \n    '''\n    Write a python function to find the largest number in a list of numbers.\n    '''\n    def largest_number(numbers):\n        '''\n        Calculate the largest number in a list of numbers.\n        '''\n        if len(numbers)==0:\n            return -1\n        else:\n            for i in range(len(numbers)):\n                if i==0:\n                    numbers[i]=numbers[i]\n                else:\n                    if numbers[i]>numbers[i-1]:\n                        numbers[i]=numbers[i-1]\n                    else:\n                        numbers[i]=numbers[i]\n            return max(numbers)\n        \n    print(largest_number([1,2,3,4,5]))\n    \n    '''\n    Write a python function to find the largest number in a list of numbers.\n",
        "num_ids": 19
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(2*(b+s)*(s+b))\n",
        "num_ids": 18
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (s*s) + 2*(s*b) + (s-b)*b\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "num_ids": 9
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict1=dict1\n    for key,value in dict1.items():\n        if value==None:\n            print('key',key)\n    return dict1\n        \n    \n            \n",
        "num_ids": 47
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not dict1.items()\n    \ndef most_frequent(lst):\n    '''\n    Write a function that takes a list and returns a dictionary\n    that contains the number of times each element in the list\n    occurs.\n    '''\n    return dict(Counter(lst))\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 29
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    empty_dict=False\n    if len(dict1) == 0:\n        empty_dict = True\n    return empty_dict\n",
        "num_ids": 33
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict_empty = False\n    if dict1:\n        dict_empty = True\n    else:\n        dict_empty = False\n    return dict_empty\n",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # recurrence formula\n    C = lambda n, r: 1 if (n == 0 or n == r) else (r * C(n-1, r-1) + (n-r) * C(n-1, r))\n    return C(num, num)\n",
        "num_ids": 66
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2) * 2\n",
        "num_ids": 45
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_numbers = [1]\n",
        "num_ids": 13
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base case\n    if num == 0:\n        return 1\n    # recursive case\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i)*catalan_number(num-1-i)\n        return result\n",
        "num_ids": 67
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    else:\n        for i in range(1,num+1):\n            n = n + (catalan_number(num - i)*i)\n    return n\n    \n",
        "num_ids": 71
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan(num):\n        if num == 1:\n            return 1\n        return (num * catalan(num-1) ) / (1 + num)\n    return catalan(num)\n",
        "num_ids": 49
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 1\n    curr = 1\n    ans = 0\n    while n <= num:\n        curr = curr*(n+1)*(2*n+1)/(n+2)\n        ans = ans+curr\n        n+=1\n    return ans\n",
        "num_ids": 67
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalans = [1]\n    for i in range(1,num):\n        catalans.append(0)\n        for j in range(i):\n            catalans[i] += catalans[j] * (i-j) * catalans[j]\n        # print(catalans)\n    return catalans[num-1]\n",
        "num_ids": 89
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    def catalan(n, m):\n        if n == 0:\n            return 1\n        if n == 1 or m == 0:\n            return 1\n        \n        if m == 1:\n            return catalan(n - 1, m - 1) * 2\n        \n        return catalan(n - 1, m) * catalan(n, m - 1) + catalan(n - 1, m - 1) * 2\n",
        "num_ids": 103
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    endings = ['ly','rly']\n    if text == \"\":\n        return adverbs\n    for ending in endings:\n        text = text.lower()\n        print(text)\n        if ending in text:\n            regex = re.search(ending,text)\n            if regex:\n                begin_pos = regex.start()\n                adverbs.append([begin_pos,begin_pos+len(ending)])\n    return adverbs\n",
        "num_ids": 112
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(\"ly\", text)\n",
        "num_ids": 14
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r\"ly|RB\"\n    regex2 = r\"RB\"\n    result = re.findall(regex, text)\n    result2 = re.findall(regex2, text)\n    print(result)\n    print(result2)\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['at', 'before', 'after', 'but', 'afterly', 'afterwards', 'again', 'against', 'all', 'almost', 'along', 'already', 'also', 'although', 'am', 'among', 'amongst', 'an', 'and', 'any', 'anyhow', 'anyone', 'anyway', 'anywhere', 'are', 'as', 'at', 'be', 'because', 'been', 'before', 'beforehand', 'behind', 'being', 'below', 'beside', 'besides', 'between', 'beyond', 'bill', 'both', 'bottom', 'but', 'by', 'can', 'could', 'couldnt', 'd', 'did', 'didn', 'didn', 'didnt', 'do', 'does', 'doesnt', 'doing', 'don', 'done', 'down', 'down', 'due', 'during', 'each', 'f', 'for', 'forever', 'from', 'full', 'further', 'get', 'gets', 'give', 'given', 'go', 'got', 'had', 'hadnt', 'has', 'hasnt', 'have', 'he', 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'hereupon', 'hers', 'herself', 'him', 'himself', 'his', 'how', 'however', 'hundred', 'i', 'if', 'in', 'inc', 'indeed', 'interest', 'into', 'is', 'isnt', 'it', 'its', 'itself', 'keep', 'last', 'latter', 'latterly', 'least', 'less', 'lest', 'let', 'like', 'liked', 'likely','may','me','meanwhile','might','mill','mine','more','moreover','most','mostly','move','much','must','my','myself', 'name', 'namely', 'neither', 'never', 'nevertheless', 'next', 'nine', 'no', 'nobody', 'none', 'noone', 'nor', 'not', 'nothing', 'now', 'nowhere', 'of', 'off', 'often', 'on', 'once', 'one', 'only', 'onto', 'or', 'other', 'others', 'otherwise', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'part', 'per', 'perhaps', 'please', 'put', 'quite', 'rather','re','same','see','seem','seemed','seeming','seems','serious','several','she','should','show','side','since','sincere','six','sixty','so','some','somehow','someone','something','sometime','sometimes','somewhere','soon','sorry','still','such','system', 'take', 'ten', 'than', 'that', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby', 'therefore', 'therein', 'theres', 'thereupon', 'these', 'they', 'thickv', 'thin', 'third', 'this', 'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'to', 'together', 'too', 'top', 'toward', 'towards', 'twelve', 'twenty', 'two', 'un', 'under', 'until', 'up', 'upon', 'us','very', 'via', 'was', 'we', 'well', 'were', 'what', 'whatever', 'when', 'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'whereupon', 'wherever', 'whether', 'which', 'while', 'whither', 'who', 'whoever', 'whole', 'whom', 'whose', 'why', 'will', 'with', 'within', 'without', 'would', 'yet', 'you', 'your', 'yours', 'yourself', 'yourselves']\n    positions = []\n    for i in range(len(text)):\n        if text[i] in adverbs:\n            positions.append(i)\n    return positions\n",
        "num_ids": 965
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    text = text.split()\n    for i,word in enumerate(text):\n        if \"ly\" in word:\n            result.append(i)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    nouns = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ly'):\n            if word not in nouns:\n                adverbs.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in nouns:\n                nouns.append(word)\n        else:\n            pass\n    return adverbs, nouns\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with 'ing' and its positions in a given string.\n    '''\n    nouns = []\n    adverbs = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ing'):\n            if word not in adverbs:\n                nouns.append(word)\n        else:\n            pass\n    return nouns, adverbs\ndef find_conjunctions(text):\n    '''\n    Write a function to find the first conjunction ending with 'and' and its positions in a given string.\n    '''\n    conjunctions = []\n    nouns = []\n    adjectives = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('and'):\n            if word not in conjunctions:\n                conjunctions.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in adjectives:\n                adjectives.append(word)\n        else:\n            pass\n    return conjunctions, adjectives\ndef find_verb_ending_with(text):\n    '''\n    Write a function to find the first verb ending with a word in a given string.\n    '''\n    verbs = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ly'):\n            if word not in verbs:\n                verbs.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in verbs:\n                verbs.append(word)\n        else:\n            pass\n    return verbs\ndef find_verbs_with(text):\n    '''\n    Write a function to find the first verb ending with a word in a given string.\n    '''\n    verbs = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ly'):\n            if word not in verbs:\n                verbs.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in verbs:\n                verbs.append(word)\n        else:\n            pass\n    return verbs\ndef find_prepositions(text):\n    '''\n    Write a function to find the first prepositions ending with 'of' and their positions in a given string.\n    '''\n    prepositions = []\n    nouns = []\n    adjectives = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('of'):\n            if word not in prepositions:\n                prepositions.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in adjectives:\n                adjectives.append(word)\n        else:\n            pass\n    return prepositions, adjectives\ndef find_prepositions_with(text):\n    '''\n    Write a function to find the first prepositions ending with a word in a given string.\n    '''\n    prepositions = []\n    nouns = []\n    adjectives = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('of'):\n            if word not in prepositions:\n                prepositions.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in adjectives:\n                adjectives.append(word)\n        else:\n            pass\n    return prepositions, adjectives\ndef find_noun_comparison(text):\n    '''\n    Write a function to find the first noun ending with 'is' and its positions in a given string.\n    '''\n    nouns = []\n    adjectives = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('is'):\n            if word not in nouns:\n                nouns.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in adjectives:\n                adjectives.append(word)\n        else:\n            pass\n    return nouns, adjectives\ndef find_noun_comparison_with(text):\n    '''\n    Write a function to find the first noun ending with a word in a given string.\n    '''\n    nouns = []\n    adjectives = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('is'):\n            if word not in nouns:\n                nouns.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in adjectives:\n                adjectives.append(word)\n        else:\n            pass\n    return nouns, adjectives\ndef find_noun_comparison_ending_with(text):\n    '''\n    Write a function to find the first noun ending with 'ing' and its positions in a given string.\n    '''\n    nouns = []\n    adjectives = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ing'):\n            if word not in nouns:\n                nouns.append(word)\n        else:\n            pass\n    return nouns, adjectives\ndef find_noun_comparison_ending_with_with(text):\n    '''\n    Write a function to find the first noun ending with a word in a given string.\n    '''\n    nouns = []\n    adjectives = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ing'):\n            if word not in nouns:\n                nouns.append(word)\n        else:\n            pass\n    return nouns, adjectives\ndef find_verb_ending_with_with(text):\n    '''\n    Write a function to find the first verb ending with a word in a given string.\n    '''\n    verbs = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ly'):\n            if word not in verbs:\n                verbs.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in verbs:\n                verbs.append(word)\n        else:\n            pass\n    return verbs\ndef find_verb_ending_with_with_adv(text):\n    '''\n    Write a function to find the first verb ending with a word in a given string.\n    '''\n    verbs = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ly'):\n            if word not in verbs:\n                verbs.append(word)\n        elif word.endswith('ing') and not word.endswith('ingly'):\n            if word not in verbs:\n                verbs.append(word)\n        else:\n            pass\n    return verbs\ndef find_noun_comparison_ending_with_adv(text):\n    '''\n    Write a function to find the first noun ending with 'ing' and its positions in a given string.\n    '''\n    nouns = []\n    adjectives = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ing'):\n            if word not in nouns:\n                nouns.append(word)\n        else:\n            pass\n    return nouns, adjectives\ndef find_noun_comparison_ending_with_adv(text):\n    '''\n    Write a function to find the first noun ending wit",
        "num_ids": 13
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #your code here\n    adverbs = re.findall('ly', text, re.MULTILINE)\n    return adverbs\n",
        "num_ids": 34
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    positions = []\n    for i in range(len(text)):\n        if re.search('ly', text[i:i+3]):\n            positions.append(i)\n    return positions\n",
        "num_ids": 51
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r\"\\bly\\b|\\bre\\b|\\bde\\b|\\byou\\b|\\byour\\b|\\bours\\b|\\bmon\\b|\\bshe\\b|\\bshe\\b|\\bher\\b|\\bhes\\b|\\bhere\\b|\\bhime\\b|\\bhim\\b|\\bher\\b|\\bhes\\b|\\bhim\\b|\\bhes\\b|\\bhis\\b|\\bhis\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bour\\b|\\bour\\b|\\bours\\b|\\bour\\b|\\bours\\b|\\bours\\b|\\bour\\b|\\bour\\b|\\bour\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours\\b|\\bours",
        "num_ids": 1999
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'\\bly\\b',text)\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #n = 4\n    #items = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    \n    \n    if n == 0:\n        return []\n",
        "num_ids": 59
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n    return heap\n",
        "num_ids": 38
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    expensive_items = heapq.nlargest(n,items,key=lambda x:x[2])\n    return expensive_items\n",
        "num_ids": 33
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        price=int(item.split()[-1])\n        heapq.heappush(heap,(-price,item))\n    result=[]\n    for i in range(n):\n        item=heapq.heappop(heap)\n        result.append(item[1])\n    return result\n",
        "num_ids": 90
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    heap = []\n    for i in items:\n        if len(heap) < n:\n            heapq.heappush(heap,(-i[1],i))\n        elif i[1] > heap[0][0]:\n            heapq.heapreplace(heap,(-i[1],i))\n    for i in heap:\n        result.append(i[1])\n    return result\n",
        "num_ids": 107
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_count = len(items)\n    if n > items_count:\n        return False\n    items_dic = {}\n    for i in items:\n        if i[0] in items_dic:\n            items_dic[i[0]] = items_dic[i[0]] + i[1]\n        else:\n            items_dic[i[0]] = i[1]\n    items_heap = []\n    for i in items_dic:\n        heapq.heappush(items_heap,(-items_dic[i],i))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(items_heap))\n    return result\ndef most_expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_count = len(items)\n    if n > items_count:\n        return False\n    items_dic = {}\n    for i in items:\n        if i[0] in items_dic:\n            items_dic[i[0]] = items_dic[i[0]] + i[1]\n        else:\n            items_dic[i[0]] = i[1]\n    items_heap = []\n    for i in items_dic:\n        heapq.heappush(items_heap,(items_dic[i],i))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(items_heap))\n    return result\ndef most_expensive_items_new(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_count = len(items)\n    if n > items_count:\n        return False\n    items_dic = {}\n    for i in items:\n        if i[0] in items_dic:\n            items_dic[i[0]] = items_dic[i[0]] + i[1]\n        else:\n            items_dic[i[0]] = i[1]\n    items_heap = []\n    for i in items_dic:\n        heapq.heappush(items_heap,(items_dic[i],i))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(items_heap))\n    return result\ndef least_expensive_items(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    items_count = len(items)\n    if n > items_count:\n        return False\n    items_dic = {}\n    for i in items:\n        if i[0] in items_dic:\n            items_dic[i[0]] = items_dic[i[0]] + i[1]\n        else:\n            items_dic[i[0]] = i[1]\n    items_heap = []\n    for i in items_dic:\n        heapq.heappush(items_heap,(items_dic[i],i))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(items_heap))\n    return result\ndef least_expensive_items_new(items,n):\n    '''\n    Write a function to find the n least expensive items in a given dataset.\n    '''\n    items_count = len(items)\n    if n > items_count:\n        return False\n    items_dic = {}\n    for i in items:\n        if i[0] in items_dic:\n            items_dic[i[0]] = items_dic[i[0]] + i[1]\n        else:\n            items_dic[i[0]] = i[1]\n    items_heap = []\n    for i in items_dic:\n        heapq.heappush(items_heap,(-items_dic[i],i))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(items_heap))\n    return result\ndef find_smallest_n(items,n):\n    '''\n    Write a function to find the n smallest items in a given dataset.\n    '''\n    items_count = len(items)\n    if n > items_count:\n        return False\n    items_dic = {}\n    for i in items:\n        if i[0] in items_dic:\n            items_dic[i[0]] = items_dic[i[0]] + i[1]\n        else:\n            items_dic[i[0]] = i[1]\n    items_heap = []\n    for i in items_dic:\n        heapq.heappush(items_heap,(-items_dic[i],i))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(items_heap))\n    return result\ndef find_smallest_n_new(items,n):\n    '''\n    Write a function to find the n smallest items in a given dataset.\n    '''\n    items_count = len(items)\n    if n > items_count:\n        return False\n    items_dic = {}\n    for i in items:\n        if i[0] in items_dic:\n            items_dic[i[0]] = items_dic[i[0]] + i[1]\n        else:\n            items_dic[i[0]] = i[1]\n    items_heap = []\n    for i in items_dic:\n        heapq.heappush(items_heap,(items_dic[i],i))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(items_heap))\n    return result\ndef find_smallest_n_and_largest_n(items,n,k):\n    '''\n    Write a function to find the n smallest items in a given dataset.\n    '''\n    items_count = len(items)\n    if n > items_count:\n        return False\n    items_dic = {}\n    for i in items:\n        if i[0] in items_dic:\n            items_dic[i[0]] = items_dic[i[0]] + i[1]\n        else:\n            items_dic[i[0]] = i[1]\n    items_heap = []\n    for i in items_dic:\n        heapq.heappush(items_heap,(-items_dic[i],i))\n    result_1 = []\n    for i in range(k):\n        result_1.append(heapq.heappop(items_heap))\n    result_2 = []\n    for i in range(n-k):\n        result_2.append(heapq.heappop(items_heap))\n    result = result_1 + result_2\n    return result\ndef find_smallest_n_and_largest_n_new(items,n,k):\n    '''\n    Write a function to find the n smallest items in a given dataset.\n    '''\n    items_count = len(items)\n    if n > items_count:\n        return False\n    items_dic = {}\n    for i in items:\n        if i[0] in items_dic:\n            items_dic[i[0]] = items_dic[i[0]] + i[1]\n        else:\n            items_dic[i[0]] = i[1]\n    items_heap = []\n    for i in items_dic:\n        heapq.heappush(items_heap,(items_dic[i],i))\n    result_1 = []\n    for i in range(k):\n        result_1.append(heapq.heappop(items_heap))\n    result_2 = []\n    for i in range(n-k):\n        result_2.append(heapq.heappop(items_heap))\n    result ",
        "num_ids": 221
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    items = sorted(items,key=lambda x: x[0],reverse=True)\n    return items[:n]\n",
        "num_ids": 52
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.nsmallest(n, items)\n",
        "num_ids": 28
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap, i)\n    for i in range(n):\n        print(heapq.heappop(heap))\n",
        "num_ids": 54
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    import heapq\n    hpq = []\n    result = []\n    for i in range(n):\n        heapq.heappush(hpq, items[i][1])\n    for j in range(n):\n        result.append(heapq.heappop(hpq))\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(n):\n        l = l[1:] + [l[0]]\n    return l\n",
        "num_ids": 29
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[0:n]\n    l2 = l[n:]\n    return l1 + l2\n",
        "num_ids": 30
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return l[:n] + l[n+1:]\n",
        "num_ids": 34
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n",
        "num_ids": 17
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == len(l):\n        return l\n    return l[:n] + l[n:].insert(0, l[n])\n",
        "num_ids": 37
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    return a + b\n",
        "num_ids": 25
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if (l == []):\n        print(\"The list is empty\")\n    if(n > len(l)):\n        print(\"The length of list is smaller than the split point\")\n    if (n < 1):\n        print(\"The split point must be more than zero\")\n    return l[:n]+l[n:]\n",
        "num_ids": 78
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    i = 0\n    j = 0\n    while j < len(l) - n:\n        i += 1\n        j += 1\n    return l[:i], l[i:]\n",
        "num_ids": 46
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    length = len(l)\n    if length <= n:\n        return l\n    for i in range(n, length):\n        l.append(l[i])\n    del l[length-n:]\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        return []\n    if n == 0:\n        return l\n    return l[:n]+l[n:][::-1]\n",
        "num_ids": 41
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    a=tuple(listx)\n    return a\ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    a=set(listx)\n    return a\ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    a=dict(listx)\n    return a\ndef list_object(listx):\n    '''\n    Write a function to convert a list to an object.\n    '''\n    a=object(listx)\n    return a\n",
        "num_ids": 15
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if type(listx) is not list:\n        raise TypeError\n    for item in listx:\n        if type(item) is not int:\n            raise TypeError\n    return tuple(listx)\n",
        "num_ids": 51
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    for x in listx:\n        print(x, end=\",\")\n    print('')\n",
        "num_ids": 26
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef compare_dictionary(d1, d2):\n    '''\n    Write a function to compare 2 dictionaries and return the differnce between them\n    '''\n    return d2.keys() - d1.keys()\n    \ndef get_set(listx):\n    '''\n    Write a function to get set of an iterable object\n    '''\n    return set(listx)\n    \ndef get_unique_set(listx):\n    '''\n    Write a function to get unique set of an iterable object\n    '''\n    return set(list(set(listx)))\n    \ndef get_values_for_key(dic, key):\n    '''\n    Write a function to get the values for a given key in a dictionary\n    '''\n    return dic[key]\n    \ndef get_value_for_keys(dic, keys):\n    '''\n    Write a function to get the value for a given key in a dictionary\n    '''\n    return {k: v for k, v in dic.items() if k in keys}\n    \ndef get_key_for_value(dic, value):\n    '''\n    Write a function to get the key for a given value in a dictionary\n    '''\n    return {k: v for k, v in dic.items() if v == value}\n    \ndef get_keys_for_value(dic, value):\n    '''\n    Write a function to get the keys for a given value in a dictionary\n    '''\n    return {k: v for k, v in dic.items() if v == value}\n    \ndef get_key_for_value_1(dic, value):\n    '''\n    Write a function to get the keys for a given value in a dictionary\n    '''\n    return next(iter(dic[value]))\n    \ndef get_keys_for_value_1(dic, value):\n    '''\n    Write a function to get the keys for a given value in a dictionary\n    '''\n    return set(dic[value])\n    \ndef get_value_for_key_1(dic, key):\n    '''\n    Write a function to get the value for a given key in a dictionary\n    '''\n    return dic[key]\n    \ndef get_item_for_key(dic, key):\n    '''\n    Write a function to get the value for a given key in a dictionary\n    '''\n    return dic[key]\n    \ndef get_items_for_key(dic, key):\n    '''\n    Write a function to get the values for a given key in a dictionary\n    '''\n    return dic.items()\n    \ndef get_item_for_keys(dic, keys):\n    '''\n    Write a function to get the value for a given key in a dictionary\n    '''\n    return dic.items()\n    \ndef get_all_keys_for_value_2(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return set(k for k, v in dic.items() if v == value)\n    \ndef get_all_keys_for_value_3(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return {k for k, v in dic.items() if v == value}\n    \ndef get_keys_for_value_2(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return set(k for k, v in dic.items() if v == value)\n    \ndef get_keys_for_value_3(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return {k for k, v in dic.items() if v == value}\n    \ndef get_keys_for_value_4(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return set(k for k, v in dic.items() if v == value)\n    \ndef get_keys_for_value_5(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return {k for k, v in dic.items() if v == value}\n    \ndef get_values_for_keys(dic, keys):\n    '''\n    Write a function to get the values for a given key in a dictionary\n    '''\n    return dic.values()\n    \ndef get_values_for_keys_2(dic, keys):\n    '''\n    Write a function to get the values for a given key in a dictionary\n    '''\n    return {v for k, v in dic.items() if k in keys}\n    \ndef get_values_for_keys_3(dic, keys):\n    '''\n    Write a function to get the values for a given key in a dictionary\n    '''\n    return {v for k, v in dic.items() if k in keys}\n    \ndef get_values_for_keys_4(dic, keys):\n    '''\n    Write a function to get the values for a given key in a dictionary\n    '''\n    return {v for k, v in dic.items() if k in keys}\n    \ndef get_values_for_keys_5(dic, keys):\n    '''\n    Write a function to get the values for a given key in a dictionary\n    '''\n    return {v for k, v in dic.items() if k in keys}\n    \ndef get_value_for_keys_2(dic, keys):\n    '''\n    Write a function to get the value for a given key in a dictionary\n    '''\n    return {v for k, v in dic.items() if k in keys}\n    \ndef get_value_for_keys_3(dic, keys):\n    '''\n    Write a function to get the value for a given key in a dictionary\n    '''\n    return {v for k, v in dic.items() if k in keys}\n    \ndef get_value_for_keys_4(dic, keys):\n    '''\n    Write a function to get the value for a given key in a dictionary\n    '''\n    return {v for k, v in dic.items() if k in keys}\n    \ndef get_value_for_keys_5(dic, keys):\n    '''\n    Write a function to get the value for a given key in a dictionary\n    '''\n    return {v for k, v in dic.items() if k in keys}\n    \ndef get_all_keys_for_value(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return {k for k, v in dic.items() if v == value}\n    \ndef get_all_keys_for_value_2(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return {k for k, v in dic.items() if v == value}\n    \ndef get_all_keys_for_value_3(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return {k for k, v in dic.items() if v == value}\n    \ndef get_all_keys_for_value_4(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return {k for k, v in dic.items() if v == value}\n    \ndef get_all_keys_for_value_5(dic, value):\n    '''\n    Write a function to get all keys for a given value in a dictionary\n    '''\n    return {k for k, v in dic.items() if v == value}\n    \ndef get_key_for_value_2(dic, value):\n    '''\n    Write a function to get the value for a given key in a dictionary\n    '''\n    return {k for k, v in dic.items() if v == valu",
        "num_ids": 21
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \n",
        "num_ids": 18
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return nums[-1] - nums[0]\n",
        "num_ids": 27
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) <= 1:\n        return max(nums) - min(nums)\n    return max(nums) - min(nums[:len(nums)-1])\n",
        "num_ids": 49
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # min_value = float(\"inf\")\n    # max_value = float(\"-inf\")\n",
        "num_ids": 25
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    maximum = max(nums)\n    minimum = min(nums)\n    return maximum - minimum\n",
        "num_ids": 26
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a=max(nums)\n    b=min(nums)\n    return (a-b)\n    \nprint(big_diff([4,2,-1,1,3]))\n",
        "num_ids": 48
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    size = len(nums)\n    if size == 0:\n        return 0\n    min_element = nums[0]\n    max_element = nums[0]\n    for i in range(1, size):\n        if nums[i] >= max_element:\n            max_element = nums[i]\n        if nums[i] <= min_element:\n            min_element = nums[i]\n    return max_element - min_element\n",
        "num_ids": 113
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = nums\n    l.sort()\n    return l[-1] - l[0]\n",
        "num_ids": 27
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    list_of_squares = []\n    for x in range(a, b+1):\n        if x ** 2 == x:\n            list_of_squares.append(x)\n    return list_of_squares\n",
        "num_ids": 56
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return a if a**0.5==int(a**0.5) else perfect_squares(a-b,b)\n",
        "num_ids": 33
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b):\n        if (i**2) == i:\n            print(i)\n        else:\n            continue\n",
        "num_ids": 37
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = int(math.sqrt(a))\n    m = int(math.sqrt(b))\n    l = []\n    for i in range(n, m+1):\n        if a % i == 0 and b % i == 0:\n            l.append(i)\n    return l\n",
        "num_ids": 73
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a,b+1):\n        if i**2 == i:\n            print(i)\n",
        "num_ids": 30
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    import math\n    return range(int(math.sqrt(a))**2, int(math.sqrt(b))**2 + 1)\n    \nif __name__ == '__main__':\n    print(perfect_squares(2, 2))\n",
        "num_ids": 63
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # assert type(a) == int and type(b) == int and a > 0 and b > 0\n    if b == 1:\n        return a\n    \n    for i in range(int((a + b) / 2), 0, -1):\n        if i * i == a and (i + 1) * (i + 1) == b:\n            return i\n    \n    return -1\n",
        "num_ids": 95
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return (a**2) + (b**2)\n",
        "num_ids": 16
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        if i**2 == a:\n            print(i, \"is the perfect square of\", a)\n        elif i**2 == b:\n            print(i, \"is the perfect square of\", b)\n",
        "num_ids": 64
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i for i in range(a,b+1) if i**2 == i]\n",
        "num_ids": 25
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(x/r)\n    return (r, theta)\n",
        "num_ids": 37
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.atan2(y,x)\n    return (r,theta)\n",
        "num_ids": 44
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x**2+y**2)**0.5, x*y\n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2+y**2)**0.5, 2*x*y\n    \ndef square(x):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return x*x\n",
        "num_ids": 8
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x**2+y**2, 2*x*y\n    \ndef gcd(a, b):\n    '''\n    Write a function to compute the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n",
        "num_ids": 29
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return(x,y)\ndef rect_polar(r,t):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return(r,t)\ndef sin(x):\n    '''\n    Write a function that computes the sine of a number x.\n    '''\n    return x\ndef log(x):\n    '''\n    Write a function that computes the natural logarithm of a number x.\n    '''\n    return x\ndef exp(x):\n    '''\n    Write a function that computes the exponential of a number x.\n    '''\n    return x\ndef square(x):\n    '''\n    Write a function that squares a number x.\n    '''\n    return x**2\ndef roots(a,b,c):\n    '''\n    Write a function that finds the roots of a quadratic equation.\n    '''\n    return (-b + sqrt(b**2 - 4*a*c))/(2*a),(-b - sqrt(b**2 - 4*a*c))/(2*a)\ndef root(a,b,c):\n    '''\n    Write a function that finds the roots of a quadratic equation.\n    '''\n    return (-b + sqrt(b**2 - 4*a*c))/(2*a),(-b - sqrt(b**2 - 4*a*c))/(2*a)\ndef square_root(x):\n    '''\n    Write a function that computes the square root of a number x.\n    '''\n    return x**(1/2)\ndef ln(x):\n    '''\n    Write a function that computes the natural logarithm of a number x.\n    '''\n    return log(x)\ndef natural_log(x):\n    '''\n    Write a function that computes the natural logarithm of a number x.\n    '''\n    return log(x)\ndef ln2(x):\n    '''\n    Write a function that computes the natural logarithm of a number x.\n    '''\n    return log(x)/ln(x)\ndef inverse_trig(func,n):\n    '''\n    Write a function that computes the inverse trigonometric function.\n    '''\n    if(func =='sin'):\n        return 1/sin(n)\n    elif(func == 'cos'):\n        return 1/cos(n)\n    elif(func == 'tan'):\n        return 1/tan(n)\n    elif(func == 'cot'):\n        return 1/cot(n)\n    elif(func =='sec'):\n        return 1/sin(n)\n    elif(func == 'csc'):\n        return 1/cos(n)\n    else:\n        return 'Function not found'\ndef log_log(x,y):\n    '''\n    Write a function that computes the logarithm of the logarithm of a number.\n    '''\n    return log(log(x))\ndef log_log2(x,y):\n    '''\n    Write a function that computes the logarithm of the logarithm of a number.\n    '''\n    return log(log(x))\ndef log_log3(x,y):\n    '''\n    Write a function that computes the logarithm of the logarithm of a number.\n    '''\n    return log(log(x))\ndef log2_log(x,y):\n    '''\n    Write a function that computes the logarithm of the logarithm of a number.\n    '''\n    return log2(log(x))\ndef log2_log2(x,y):\n    '''\n    Write a function that computes the logarithm of the logarithm of a number.\n    '''\n    return log2(log2(x))\ndef log2_log3(x,y):\n    '''\n    Write a function that computes the logarithm of the logarithm of a number.\n    '''\n    return log2(log2(x))\ndef log3_log(x,y):\n    '''\n    Write a function that computes the logarithm of the logarithm of a number.\n    '''\n    return log3(log(x))\ndef log3_log2(x,y):\n    '''\n    Write a function that computes the logarithm of the logarithm of a number.\n    '''\n    return log3(log2(x))\ndef log3_log3(x,y):\n    '''\n    Write a function that computes the logarithm of the logarithm of a number.\n    '''\n    return log3(log3(x))\ndef log_base(x,y):\n    '''\n    Write a function that computes the logarithm of a number in a particular base.\n    '''\n    return log(x)/log(y)\ndef log_base2(x,y):\n    '''\n    Write a function that computes the logarithm of a number in a particular base.\n    '''\n    return log(x)/log(y)\ndef log_base3(x,y):\n    '''\n    Write a function that computes the logarithm of a number in a particular base.\n    '''\n    return log(x)/log(y)\ndef log10(x):\n    '''\n    Write a function that computes the logarithm of a number in base 10.\n    '''\n    return log10(x)/log10(10)\ndef log2(x):\n    '''\n    Write a function that computes the logarithm of a number in base 2.\n    '''\n    return log2(x)/log2(2)\ndef log1p(x):\n    '''\n    Write a function that computes the logarithm of a number plus one.\n    '''\n    return log(x+1)\ndef log1p2(x):\n    '''\n    Write a function that computes the logarithm of a number plus one in base 2.\n    '''\n    return log2(x+1)/log2(2)\ndef log1p3(x):\n    '''\n    Write a function that computes the logarithm of a number plus one in base 3.\n    '''\n    return log3(x+1)/log3(3)\ndef cos(x):\n    '''\n    Write a function that computes the cosine of a number.\n    '''\n    return 1/cmath.sqrt(1 + (x)**2)\ndef sin(x):\n    '''\n    Write a function that computes the sine of a number.\n    '''\n    return x/(cmath.sqrt(1 + (x)**2))\ndef tan(x):\n    '''\n    Write a function that computes the tangent of a number.\n    '''\n    return x/(cmath.sqrt(1 + (x)**2))\ndef cot(x):\n    '''\n    Write a function that computes the cotangent of a number.\n    '''\n    return 1/sin(x)\ndef sec(x):\n    '''\n    Write a function that computes the secant of a number.\n    '''\n    return 1/cos(x)\ndef csc(x):\n    '''\n    Write a function that computes the cosecant of a number.\n    '''\n    return 1/tan(x)\ndef sqrt(x):\n    '''\n    Write a function that computes the square root of a number.\n    '''\n    return x**(1/2)\ndef ln(x):\n    '''\n    Write a function that computes the natural logarithm of a number.\n    '''\n    return cmath.log(x)\ndef natural_log(x):\n    '''\n    Write a function that computes the natural logarithm of a number.\n    '''\n    return log(x)\ndef ln2(x):\n    '''\n    Write a function that computes the natural logarithm of a number.\n    '''\n    return log(x)/ln(x)\ndef inverse_trig(func,n):\n    '''\n    Write a function that computes the inverse trigonometric function.",
        "num_ids": 16
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x * x + y * y\n    \n    theta = cmath.phase(x)\n    \n    return r, theta\n",
        "num_ids": 36
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    angle = cmath.phase(x)+cmath.phase(y)\n    return (r*cmath.cos(angle),r*cmath.sin(angle))\n",
        "num_ids": 53
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex(x,y)\n    a = abs(r)\n    \n    if r.real<0:\n        r = -r\n    \n    if a == 0:\n        return 0,0\n    \n    theta = cmath.phase(r)\n    \n    if a.real<0:\n        theta = 2*cmath.pi+theta\n        \n    if theta == 0:\n        return a.real,0\n    \n    if theta == cmath.pi/2:\n        return 0,a.imag\n    \n    if theta == cmath.pi:\n        return -a.imag,a.real\n    \n    theta = theta%(cmath.pi)\n    \n    if theta == cmath.pi/2:\n        return 0,a.imag\n    \n    if theta == cmath.pi:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*3/2:\n        return 0,-a.imag\n    \n    if theta == cmath.pi*3:\n        return a.imag,0\n    \n    if theta == cmath.pi*5/2:\n        return 0,a.imag\n    \n    if theta == cmath.pi*5:\n        return -a.imag,0\n    \n    if theta == cmath.pi*7/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*7:\n        return a.imag,0\n    \n    if theta == cmath.pi*9/2:\n        return 0,-a.imag\n    \n    if theta == cmath.pi*9:\n        return a.imag,0\n    \n    if theta == cmath.pi*11/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*11:\n        return a.imag,0\n    \n    if theta == cmath.pi*13/2:\n        return 0,a.real\n    \n    if theta == cmath.pi*13:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*15/2:\n        return -a.real,a.real\n    \n    if theta == cmath.pi*15:\n        return a.imag,a.real\n    \n    if theta == cmath.pi*17/2:\n        return 0,a.real\n    \n    if theta == cmath.pi*17:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*19/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*19:\n        return a.real,a.real\n    \n    if theta == cmath.pi*21/2:\n        return 0,-a.imag\n    \n    if theta == cmath.pi*21:\n        return a.imag,0\n    \n    if theta == cmath.pi*23/2:\n        return 0,a.real\n    \n    if theta == cmath.pi*23:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*25/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*25:\n        return a.imag,a.real\n    \n    if theta == cmath.pi*27/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*27:\n        return a.imag,a.real\n    \n    if theta == cmath.pi*29/2:\n        return 0,-a.real\n    \n    if theta == cmath.pi*29:\n        return a.real,0\n    \n    if theta == cmath.pi*31/2:\n        return 0,a.real\n    \n    if theta == cmath.pi*31:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*33/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*33:\n        return a.imag,a.real\n    \n    if theta == cmath.pi*35/2:\n        return 0,-a.real\n    \n    if theta == cmath.pi*35:\n        return a.real,0\n    \n    if theta == cmath.pi*37/2:\n        return 0,a.real\n    \n    if theta == cmath.pi*37:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*39/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*39:\n        return a.imag,a.real\n    \n    if theta == cmath.pi*41/2:\n        return 0,-a.real\n    \n    if theta == cmath.pi*41:\n        return a.real,0\n    \n    if theta == cmath.pi*43/2:\n        return 0,a.real\n    \n    if theta == cmath.pi*43:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*45/2:\n        return -a.real,a.real\n    \n    if theta == cmath.pi*45:\n        return a.real,0\n    \n    if theta == cmath.pi*47/2:\n        return 0,a.real\n    \n    if theta == cmath.pi*47:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*49/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*49:\n        return a.real,a.real\n    \n    if theta == cmath.pi*51/2:\n        return 0,-a.real\n    \n    if theta == cmath.pi*51:\n        return a.real,0\n    \n    if theta == cmath.pi*53/2:\n        return 0,a.real\n    \n    if theta == cmath.pi*53:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*55/2:\n        return -a.real,a.real\n    \n    if theta == cmath.pi*55:\n        return a.real,0\n    \n    if theta == cmath.pi*57/2:\n        return -a.real,a.real\n    \n    if theta == cmath.pi*57:\n        return a.imag,a.real\n    \n    if theta == cmath.pi*59/2:\n        return 0,-a.real\n    \n    if theta == cmath.pi*59:\n        return a.real,0\n    \n    if theta == cmath.pi*61/2:\n        return 0,a.real\n    \n    if theta == cmath.pi*61:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*63/2:\n        return -a.real,a.real\n    \n    if theta == cmath.pi*63:\n        return a.real,0\n    \n    if theta == cmath.pi*65/2:\n        return 0,-a.real\n    \n    if theta == cmath.pi*65:\n        return a.real,0\n    \n    if theta == cmath.pi*67/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*67:\n        return a.imag,a.real\n    \n    if theta == cmath.pi*69/2:\n        return -a.imag,a.real\n    \n    if theta == cmath.pi*69:\n        return a.imag,a.real\n    \n    if theta == cmath.pi*71/2:\n        return 0,-a.real\n    \n    if theta == cmath.pi*71:\n        return a.real,0\n    \n    if theta == cmath.pi*73/2:\n        return 0,a",
        "num_ids": 2014
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Write your code here\n    return (x,y)\ndef sphere(x,y,z):\n    '''\n    Write a function to convert spherical coordinates to cartesian coordinates.\n    '''\n    # Write your code here\n    return (x,y,z)\ndef cartesian(r,theta,phi):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    # Write your code here\n    return (r,theta,phi)\ndef cylindrical(r,z,theta):\n    '''\n    Write a function to convert cylindrical coordinates to cartesian coordinates.\n    '''\n    # Write your code here\n    return (r,z,theta)\ndef polar_rect_cart(r,theta,phi):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    # Write your code here\n    return (r,theta,phi)\ndef cart_rect(x,y,z):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    # Write your code here\n    return (x,y,z)\ndef cart_rect_polar(x,y,z):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    # Write your code here\n    return (x,y,z)\ndef main():\n    '''\n    Main function to test your code.\n    '''\n    print (\"===== Test 1: Convert polar coordinates to cartesian coordinates =====\")\n    print (\"Test 1:  polar_rect(3, 4) = \", polar_rect(3, 4))\n    print (\"Expected: (0.0, 5.0, 2.094395362318841)\")\n    print (\"Actual:   \", polar_rect(3, 4))\n    print ()\n",
        "num_ids": 95
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_r=x\n    y_r=y\n    \n    for i in range(1):\n        x_r=round(x_r,2)\n        y_r=round(y_r,2)\n    return(x_r,y_r)\n",
        "num_ids": 67
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length < 1:\n        return newList\n    else:\n        newList[0], newList[length - 1] = newList[length - 1], newList[0]\n        return newList\n",
        "num_ids": 59
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    a,b = newList[0],newList[-1]\n    newList[0] = b\n    newList[-1] = a\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n",
        "num_ids": 43
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    x = len(newList)\n    swapList = newList[1:x] + newList[0:1]\n    print(swapList)\n",
        "num_ids": 40
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n",
        "num_ids": 43
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    if len(newList) >= 1:\n        if len(newList) >= 2:\n            newList[0], newList[-1] = newList[-1], newList[0]\n        else:\n            newList[0] = newList[-1]\n            newList[-1] = None\n    return newList\n    \n    \n    \n    \n    \nprint(swap_List([2,6,4,3,5]))\nprint(swap_List(['hi','hello']))\nprint(swap_List([]))\nprint(swap_List([5,6,7,8]))\nprint(swap_List([1,2,3,4]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\n",
        "num_ids": 375
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    #If length of list is 2 then interchange \n    #First element with last element and vice versa.\n    if len(newList) == 2:\n        newList[0], newList[1] = newList[1], newList[0]\n",
        "num_ids": 62
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[-1] = first\n    newList[0] = last\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    print(\"size:\",size)\n    newList.pop(size-1)\n    newList.pop(0)\n    print(newList)\n    return newList\n",
        "num_ids": 52
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    def binomial_coeff(n,k): \n        if n > k: \n            return binomial_coeff(n-1,k) + binomial_coeff(n-1,k-1) \n        elif n == k: \n            return 1\n        else: \n            return 0\n    coeff = 0\n    for i in range(n+1): \n        coeff += binomial_coeff(n,i)\n    return coeff \n",
        "num_ids": 118
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #initialize the variable to zero.\n    sum = 0\n    #sum the first k terms using binomial coefficients.\n    for i in range(k):\n        sum = sum + int((pow(2,i) * pow(2,n-i)))\n    #return the sum.\n    return sum\n",
        "num_ids": 74
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (1+(n-k)*(n-k-1)/(n*n))\n",
        "num_ids": 24
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    a = 0\n    b = 0\n    while(a <= k):\n        if(n-a >= 0):\n            a = a + 1\n            b = b + 1\n            sum = sum + binomial_Coeff_Function(n,a,b)\n        else:\n            sum = sum + 0\n    return sum\ndef binomial_Coeff_Function(n,a,b):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return math.factorial(n) / (math.factorial(a) * math.factorial(b))\ndef quadratic_Coeff(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return a * b ** 2 + c * (b ** 2) * (a ** 2)\ndef quadratic_Coeff_Function(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c)\ndef quadratic_Coeff_Function_2(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_3(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_4(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_5(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_6(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_7(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_8(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_9(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_10(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_11(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_12(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_13(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_14(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a + b + c) - math.factorial(a + b + c) * math.factorial(a) * math.factorial(b) * math.factorial(c)\ndef quadratic_Coeff_Function_15(a,b,c):\n    '''\n    Write a python function to find the sum of the product of consecutive quadratic co-efficients.\n    '''\n    return math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(a ",
        "num_ids": 35
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    \n    for i in range(n+1):\n        for j in range(n+1):\n            sum = sum + pow(i,j)\n    \n    return sum\n    \n    \n    ",
        "num_ids": 54
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k:\n        return 0\n    else:\n        return (n**k)\n    \ndef binomial_coeff_sum(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial coefficients using recursion.\n    '''\n    if k==1:\n        return binomial_Coeff(n,1)\n    else:\n        return binomial_Coeff(n,k) + binomial_coeff_sum(n-k,k-1)\n    \ndef sum_of_first_k_binomial_coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of the first k binomial coefficients.\n    '''\n    if k==0:\n        return 1\n    else:\n        return (binomial_coeff_sum(n,k) / (n**k))\n    \ndef find_nth_binomial_coeff(n,k):\n    '''\n    Write a python function to find the n-th binomial coefficient.\n    '''\n    return int((sum_of_first_k_binomial_coeff(n,k) / (n**k)) % 100)\n    \ndef main():\n    '''\n    main function\n    '''\n    print(find_nth_binomial_coeff(5,5))\n    print(find_nth_binomial_coeff(3,4))\n    print(find_nth_binomial_coeff(7,1))\n    print(find_nth_binomial_coeff(7,3))\n    print(find_nth_binomial_coeff(7,7))\n    print(find_nth_binomial_coeff(7,9))\n    \nif __name__==\"__main__\":\n    main()",
        "num_ids": 132
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a = 1\n    i = 0\n    while i <= k:\n        a = a + n - i\n        i += 1\n    print(\"the binomial coefficient at position \", k, \" is \", a)\n    return a\n    \n    \n    \n    \n",
        "num_ids": 63
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #sum_binom = 0\n    if k > 0 and k <= n:\n        C0 = 1\n        C1 = 1\n        C2 = 1\n        for i in range(1,k+1):\n            C0 = C0*(n-i)\n            C1 = C1*(i)\n            C2 = C2*(i)\n        sum_binom = C0/C1/C2\n    return sum_binom\n",
        "num_ids": 110
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if(k==0 or n==k):\n        return 1\n    if(n==1 and k==1):\n        return 1\n    return binomial_Coeff(n-1, k) + binomial_Coeff(n-1, k-1)\n    \n    \ndef factorial(n):\n    if(n==0 or n==1):\n        return 1\n    return n*factorial(n-1)\n",
        "num_ids": 107
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    for i in range(n + 1):\n        s += fact(n) / (fact(i) * fact(n - i))\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(ip == '0'):\n        return '0'\n    return '.'.join(ip.split('.')[:-1])\n",
        "num_ids": 35
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #if ip == '0.0.0.0' or ip == '0.0.0.0':\n    #    return ip\n    a = ip.split('.')\n    #print(a)\n    b = int(a[0])\n    if b == 0:\n        return '0.'+a[1]+'.'+a[2]+'.'+a[3]\n    else:\n        return ip\ndef normalize_ip(ip):\n    '''\n    Write a function to normalize IPv4 addresses to 12 bits (for the range 0-255).\n    '''\n    #return ip\n    #a = ip.split('.')\n    #b = a[0]\n    #if b== '0':\n    #    a.insert(0,0)\n    #    a.pop()\n    #    c = '.'.join(a)\n    #    return c\n    #else:\n    #    return ip\n    ip = ip.split('.')\n    a = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        a = 255\n        ip[1] = str(a)\n    else:\n        a = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        a = 255\n        ip[2] = str(a)\n    else:\n        a = b\n    c = a + (b<<8) + (c<<16) + (d<<24)\n    d = '.'.join(ip)\n    return d\ndef set_to_binary(ip):\n    '''\n    Write a function to turn an IP address into a string of its binary representation.\n    '''\n    ip = ip.split('.')\n    #return ''.join(map(lambda x:str(int(x)),ip))\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        c = 127\n        ip[0] = str(c)\n    else:\n        c = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        d = 255\n        ip[1] = str(d)\n    else:\n        d = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        e = 255\n        ip[2] = str(e)\n    else:\n        e = b\n    if ip[3] == '0':\n        ip[3] = 1\n    b = int(ip[3])\n    if b > 255:\n        f = 255\n        ip[3] = str(f)\n    else:\n        f = b\n    if ip[4] == '0':\n        ip[4] = 1\n    b = int(ip[4])\n    if b > 255:\n        g = 255\n        ip[4] = str(g)\n    else:\n        g = b\n    c = ip[0]+ip[1]+ip[2]+ip[3]+ip[4]\n    d = '.'.join(map(str,ip))\n    return '.'.join([str(int(x,2)),str(int(y,2)),str(int(z,2)),str(int(aa,2)),str(int(bb,2)),str(int(cc,2)),str(int(dd,2)),str(int(ee,2)),str(int(ff,2)),str(int(gg,2))])\ndef set_to_decimal(ip):\n    '''\n    Write a function to turn an IP address into a decimal integer.\n    '''\n    ip = ip.split('.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        d = 255\n        ip[1] = str(d)\n    else:\n        d = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        e = 255\n        ip[2] = str(e)\n    else:\n        e = b\n    if ip[3] == '0':\n        ip[3] = 1\n    b = int(ip[3])\n    if b > 255:\n        f = 255\n        ip[3] = str(f)\n    else:\n        f = b\n    if ip[4] == '0':\n        ip[4] = 1\n    b = int(ip[4])\n    if b > 255:\n        g = 255\n        ip[4] = str(g)\n    else:\n        g = b\n    c = ip[0]+ip[1]+ip[2]+ip[3]+ip[4]\n    d = '.'.join(map(str,ip))\n    return c\ndef set_to_octal(ip):\n    '''\n    Write a function to turn an IP address into an octal integer.\n    '''\n    ip = ip.split('.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        d = 255\n        ip[1] = str(d)\n    else:\n        d = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        e = 255\n        ip[2] = str(e)\n    else:\n        e = b\n    if ip[3] == '0':\n        ip[3] = 1\n    b = int(ip[3])\n    if b > 255:\n        f = 255\n        ip[3] = str(f)\n    else:\n        f = b\n    if ip[4] == '0':\n        ip[4] = 1\n    b = int(ip[4])\n    if b > 255:\n        g = 255\n        ip[4] = str(g)\n    else:\n        g = b\n    c = ip[0]+ip[1]+ip[2]+ip[3]+ip[4]\n    d = '.'.join(map(str,ip))\n    return c\ndef set_to_hex(ip):\n    '''\n    Write a function to turn an IP address into a hexadecimal integer.\n    '''\n    ip = ip.split('.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    i",
        "num_ids": 139
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_int = ip.split('.')\n    ip_int = map(int, ip_int)\n    ip_int = list(ip_int)\n    for i in range(len(ip_int)):\n        if ip_int[i] == 0:\n            ip_int[i] = 0\n    ip = str(ip_int[0]) + '.' + str(ip_int[1]) + '.' + str(ip_int[2]) + '.' + str(ip_int[3])\n    return ip\n",
        "num_ids": 128
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    result = \"\"\n    for i in range(0, len(ip)):\n        if ip[i]!= \"0\":\n            result = result + ip[i]\n",
        "num_ids": 43
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    ip_list_new = []\n    for i in range(len(ip_list)):\n        if int(ip_list[i])!=0:\n            ip_list_new.append(ip_list[i])\n    return '.'.join(ip_list_new)\n",
        "num_ids": 82
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.findall('\\d+\\.\\d+\\.\\d+\\.\\d+',ip)\n    return '.'.join(ip_list)\n",
        "num_ids": 43
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.findall(r'\\d+\\.\\d+\\.\\d+\\.\\d+', ip)\n    return ip_list[0]\n",
        "num_ids": 42
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    def removezero(ip):\n        new_ip = \"\"\n        for i in ip:\n            if i == \"0\":\n                break\n            else:\n                new_ip += i\n        return new_ip\n    return removezero(ip)\n",
        "num_ids": 60
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip[0] == '0':\n        return ip[1:]\n    return ip\n",
        "num_ids": 24
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regex\n    ip = re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}',ip)\n    return ip\n    # or \n    # ip = ip.split('.')\n    # ip = [int(i) for i in ip]\n    # ip = '.'.join([str(i) for i in ip])\n    # return ip\n",
        "num_ids": 111
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_no = 0\n    odd_no = 0\n    for i in range(len(list1)):\n        if i%2==0:\n            even_no = even_no + list1[i]\n        else:\n            odd_no = odd_no + list1[i]\n    return abs(even_no-odd_no)\n    \nprint(diff_even_odd([4, 5, 6, 7, 8, 9]))\n",
        "num_ids": 109
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n",
        "num_ids": 12
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #find the difference of even and odd numbers\n    #find the first even number\n    #find the first odd number\n    #find the difference\n    #return the difference\n    first_even = list1[0]\n    first_odd = list1[1]\n    diff = first_even - first_odd\n    return diff\n    \ndef sum_of_even_numbers(list2):\n    '''\n    Write a function to return the sum of all the even numbers in a given list.\n    '''\n    #iterate through the list and sum all the even numbers\n    #return the sum\n    sum = 0\n    for i in list2:\n        if i%2 == 0:\n            sum += i\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return abs(even - odd)\n",
        "num_ids": 52
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        print(\"List is empty\")\n        return\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(f\"Even numbers are {even_list}\")\n    print(f\"Odd numbers are {odd_list}\")\n    return abs(even_list[0] - odd_list[0])\n",
        "num_ids": 128
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in range(0,len(list1)):\n        if (i%2==0):\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n",
        "num_ids": 63
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    if len(list1) == 1:\n        return list1[0]\n    \n    x = 0\n    y = 0\n    for i in range(len(list1)):\n        if i%2 == 0:\n            x = list1[i]\n        else:\n            y = list1[i]\n    return abs(x-y)\n",
        "num_ids": 102
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for number in list1:\n        if number % 2 == 0:\n            even_numbers.append(number)\n        else:\n            odd_numbers.append(number)\n    return even_numbers[0] - odd_numbers[0]\n",
        "num_ids": 79
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even+=1\n        else:\n            odd+=1\n    return abs(even-odd)\n",
        "num_ids": 61
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even-odd\n",
        "num_ids": 49
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n            str1 = str2[:i] + str2[i+1:] + str1[i] + str1[i+1:]\n    return count \n",
        "num_ids": 81
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    p = n // 2\n    q = n // 2\n    str1 = str1[:p] + '0' + str1[p:]\n    str2 = str2[:q] + '1' + str2[q:]\n    if len(str1) == len(str2):\n        count = 0\n        for i in range(n):\n            if str1[i]!= str2[i]:\n                count += 1\n                str1 = str1[:i] + str2[i] + str1[i+1:]\n                str2 = str2[:i] + str1[i] + str2[i+1:]\n        return count\n    else:\n        return -1\n",
        "num_ids": 178
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def count(str1,str2,index1,index2):\n        count = 0\n        while index1 < len(str1) and index2 < len(str2):\n            if str1[index1]!= str2[index2]:\n                if str1[index1] == '0':\n                    str1 = str1[:index1]+'1'+str1[index1+1:]\n                else:\n                    str1 = str1[:index1]+'0'+str1[index1+1:]\n                if str2[index2] == '0':\n                    str2 = str2[:index2]+'1'+str2[index2+1:]\n                else:\n                    str2 = str2[:index2]+'0'+str2[index2+1:]\n            else:\n                count += 1\n                index1 += 1\n                index2 += 1\n        return str1,str2,count\n    def swap(str1,str2,index1,index2):\n        count = 0\n        while index1 < len(str1) and index2 < len(str2):\n            if str1[index1]!= str2[index2]:\n                if str1[index1] == '0':\n                    str1 = str1[:index1]+'1'+str1[index1+1:]\n                else:\n                    str1 = str1[:index1]+'0'+str1[index1+1:]\n                if str2[index2] == '0':\n                    str2 = str2[:index2]+'1'+str2[index2+1:]\n                else:\n                    str2 = str2[:index2]+'0'+str2[index2+1:]\n            else:\n                index1 += 1\n                index2 += 1\n        return str1,str2,count\n    def f(str1,str2):\n        str1 = str1.replace('0',' ')\n        str2 = str2.replace('0',' ')\n        str1 = str1.replace('1','0')\n        str2 = str2.replace('1','0')\n        str1 = str1.replace(' ','0')\n        str2 = str2.replace(' ','0')\n        if str1 == str2:\n            return 0\n        elif str1 + '1' == str2:\n            return 1\n        elif str1 + '0' == str2:\n            return 1\n        elif str2 + '1' == str1:\n            return 1\n        elif str2 + '0' == str1:\n            return 1\n        else:\n            m,n,count = 0,0,0\n            while m < len(str1) and n < len(str2):\n                if str1[m]!= str2[n]:\n                    if str1[m] == '0':\n                        str1 = str1[:m]+'1'+str1[m+1:]\n                    else:\n                        str1 = str1[:m]+'0'+str1[m+1:]\n                    if str2[n] == '0':\n                        str2 = str2[:n]+'1'+str2[n+1:]\n                    else:\n                        str2 = str2[:n]+'0'+str2[n+1:]\n                else:\n                    count += 1\n                    m += 1\n                    n += 1\n            return count\n    a = f(str1,str2)\n    a2 = f(str2,str1)\n    if a == a2:\n        return 0\n    elif a < a2:\n        return 1\n    else:\n        return 2\n",
        "num_ids": 868
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # To store count of swaps needed to convert str1 to str2\n    # Initialize a count of swaps needed\n    count = 0\n",
        "num_ids": 33
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0 \n    for i in range(0,len(str1)) : \n        if(str1[i]!= str2[i]) : \n            count += 1\n    return count \n",
        "num_ids": 52
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # convert the str to a list\n    binary_list = list(str1)\n    binary_list = [int(i) for i in binary_list]\n    \n    # init count to 0\n    count = 0\n    \n    # traverse the list\n    for i in range(0,len(binary_list)):\n        if binary_list[i] == 0:\n            # move i to the last\n            binary_list.pop(i)\n            binary_list.append(0)\n            count+=1\n    \n    # convert the str to a list\n    binary_list = list(str2)\n    binary_list = [int(i) for i in binary_list]\n    \n    # traverse the list\n    for i in range(0,len(binary_list)):\n        if binary_list[i] == 0:\n            # move i to the last\n            binary_list.pop(i)\n            binary_list.append(0)\n            count+=1\n            \n    # convert the str to a list\n    binary_list = list(str1)\n    binary_list = [int(i) for i in binary_list]\n    \n    # traverse the list\n    for i in range(0,len(binary_list)):\n        if binary_list[i] == 1:\n            # move i to the last\n            binary_list.pop(i)\n            binary_list.append(1)\n            count+=1\n    \n    # convert the str to a list\n    binary_list = list(str2)\n    binary_list = [int(i) for i in binary_list]\n    \n    # traverse the list\n    for i in range(0,len(binary_list)):\n        if binary_list[i] == 1:\n            # move i to the last\n            binary_list.pop(i)\n            binary_list.append(1)\n            count+=1\n    \n    print(count)\n    \n    # write the code here\n",
        "num_ids": 469
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (len(str1)!= len(str2)): \n        return -1\n    s1 = ''.join(sorted(str1))\n    s2 = ''.join(sorted(str2))\n    i = 0\n    count = 0\n    while (i < len(s1)) :\n        if (s1[i]!= s2[i]):\n            count += 1\n        i += 1\n    return count \n",
        "num_ids": 108
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    c1 = Counter(str1)\n    c2 = Counter(str2)\n    temp = 0\n    i = 0\n    while i < n :\n        if c1[str1[i]] > c2[str2[i]]:\n            swap(str1,i)\n            temp+=1\n        i+=1\n    return temp\n        \ndef swap(str1,i) :\n    '''\n    Write a python function to swap the characters in a string in one pass.\n    '''\n    temp = str1[i]\n    str1[i] = str1[i+1]\n    str1[i+1] = temp\n",
        "num_ids": 37
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # count = 0\n    # str1 = str1\n    # str2 = str2\n",
        "num_ids": 24
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # count = 0\n    # for i in range(0,len(str1)):\n    #     if str1[i]!= str2[i]:\n    #         count = count + 1\n    # return count\n    # Your code here\n    str1 = list(str1)\n    str2 = list(str2)\n    i = 0\n    j = 0\n    while (i < len(str1) and j < len(str2)):\n        if str1[i]!= str2[j]:\n            # Swap\n            str1[i], str2[j] = str2[j], str1[i]\n            i = i + 1\n            j = j + 1\n        else:\n            i = i + 1\n            j = j + 1\n    return (i,j)\n    \n",
        "num_ids": 195
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for el in tuple_list:\n        size = size + sys.getsizeof(el)\n    print(size)\n",
        "num_ids": 36
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list)==0:\n        return 0\n    elif type(tuple_list)==tuple:\n        return 4*(sys.getsizeof(tuple_list[0]))+4*(sys.getsizeof(tuple_list[1]))\n    else:\n        return 4*(sys.getsizeof(tuple_list[0]))+4*(sys.getsizeof(tuple_list[1:]))\n",
        "num_ids": 114
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count=0\n    for i in range(len(tuple_list)):\n        count=count+tuple_list[i]*4\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    return len(tuple_list)\n",
        "num_ids": 14
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = sys.getsizeof(tuple_list)\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # write your code here\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 23
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for elem in tuple_list:\n        result += sys.getsizeof(elem)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size\n",
        "num_ids": 38
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # kth element is the index of which the element is to be found\n    if arr1.size == 0 or arr2.size == 0:\n        return -1\n    if arr1.size == 1 and arr2.size == 1:\n        return arr1[0] if k == 1 else arr2[0]\n",
        "num_ids": 76
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if arr1[0] < arr2[0]:\n        return find_kth(arr1, arr2[1:k], k)\n    if arr1[-1] > arr2[-1]:\n        return find_kth(arr1[1:-1], arr2, k)\n    if arr1[0] == arr2[0]:\n        return arr1[0]\n    if arr1[-1] == arr2[-1]:\n        return arr1[-1]\n    return find_kth(arr1[1:], arr2[1:], k-1)\n    \ndef find_kth2(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k]\n    if len(arr2) == 0:\n        return arr1[k]\n    if arr1[0] < arr2[0]:\n        return find_kth2(arr1, arr2[1:k], k)\n    if arr1[-1] > arr2[-1]:\n        return find_kth2(arr1[1:-1], arr2, k)\n    if arr1[0] == arr2[0]:\n        return arr1[0]\n    if arr1[-1] == arr2[-1]:\n        return arr1[-1]\n    return find_kth2(arr1[1:], arr2[1:], k-1)\n",
        "num_ids": 184
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    if m == 0 or n == 0:\n        return -1\n    if m > n:\n        return find_kth(arr2, arr1, k)\n    if m == 1:\n        return arr2[0] if arr2[0] <= k else -1\n    if n == 1:\n        return arr1[0] if arr1[0] <= k else -1\n",
        "num_ids": 111
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len_arr1 = len(arr1)\n    len_arr2 = len(arr2)\n    if k < 0 or k > len_arr1 + len_arr2:\n        return -1\n    i, j = 0, 0\n    res = -1\n    while i < len_arr1 and j < len_arr2:\n        if arr1[i] < arr2[j]:\n            res = max(res, arr1[i])\n            i += 1\n        else:\n            res = max(res, arr2[j])\n            j += 1\n    if i >= len_arr1:\n        return res\n    return res",
        "num_ids": 153
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            #print(first_arr, mid_point, last_arr, arr1, arr2, k, arr1[mid_point], arr2[mid_point])\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v2(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v3(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v4(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v5(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v6(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v7(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v8(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mi",
        "num_ids": 88
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    if n1 > n2:\n        for i in range(n1):\n            if arr1[i] > arr2[k-1]:\n                return arr2[k-1]\n            else:\n                k = k - 1\n    else:\n        for i in range(n2):\n            if arr2[i] > arr1[k-1]:\n                return arr1[k-1]\n            else:\n                k = k - 1\n    return arr2[k-1]\n",
        "num_ids": 141
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    \n    if n == 0:\n        return -1\n    if m == 0:\n        return -1\n    \n    # basically, just merge the two arrays\n    i, j, temp = 0, 0, 0\n    while i < n and j < m:\n        if arr1[i] < arr2[j]:\n            temp = arr1[i]\n            i += 1\n        else:\n            temp = arr2[j]\n            j += 1\n        \n        if k == temp:\n            return temp\n    \n    return -1\n",
        "num_ids": 148
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == i + j:\n                return arr1[i]\n            elif k > i + j:\n                i += 1\n            else:\n                j += 1\n    return -1\n",
        "num_ids": 116
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    arr1.sort()\n    arr2.sort()\n    \n    if n1 == 0:\n        if k > n2:\n            return -1\n        return arr2[k-1]\n",
        "num_ids": 69
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1 = 0\n    idx2 = 0\n    while(True):\n        # print(arr1[idx1], arr2[idx2])\n        if idx1 == len(arr1):\n            return arr2[idx2]\n        if idx2 == len(arr2):\n            return arr1[idx1]\n        if arr1[idx1] < arr2[idx2]:\n            idx1 += 1\n        elif arr1[idx1] > arr2[idx2]:\n            idx2 += 1\n        else:\n            idx1 += 1\n            idx2 += 1\n            \ndef find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1 = 0\n    idx2 = 0\n    while(True):\n        if idx1 == len(arr1):\n            return arr2[idx2]\n        if idx2 == len(arr2):\n            return arr1[idx1]\n        if arr1[idx1] < arr2[idx2]:\n            idx1 += 1\n        elif arr1[idx1] > arr2[idx2]:\n            idx2 += 1\n        else:\n            idx1 += 1\n            idx2 += 1\n",
        "num_ids": 135
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    power_numbers = number\n    sum = 0\n    while power_numbers > 0:\n        sum += pow(power_numbers%10, 3)\n        power_numbers //= 10\n    if number == sum:\n        print(number, 'is an armstrong number')\n    else:\n        print(number, 'is not an armstrong number')\n",
        "num_ids": 87
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if not isinstance(number,int):\n        print(\"Invalid Input\")\n        return 0\n    res = 0\n    temp = number\n    while temp > 0:\n        res = res + (temp%10)**3\n        temp = temp // 10\n    if number == res:\n        return True\n    else:\n        return False\n",
        "num_ids": 80
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")\n",
        "num_ids": 73
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summation = 0\n    while number > 0:\n        digit = number % 10\n        summation += digit ** 3\n        number = number // 10\n    return True if summation == number else False\n",
        "num_ids": 50
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    order=len(str(number))\n    num=number\n    while(num>0):\n        digit=num%10\n        sum+=digit**order\n        num=num//10\n    if(number==sum):\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    x = 0\n    s = 0\n    while number > 0:\n        temp = number % 10\n        s += temp ** 3\n        number = number // 10\n    return s == number\n",
        "num_ids": 46
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    return True if sum == number else False\n    \n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse the string.\n    '''\n    return s[::-1]\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef get_middle_index(lst, low, high):\n    '''\n    Write a function that takes a list and two indices (low and high),\n    and returns the middle element in the list between the indices (if there are an odd number of elements,\n    the middle element is the average of the middle two elements).\n    '''\n    if low > high:\n        return None\n    mid = (low + high) // 2\n    if lst[mid] > lst[mid+1]:\n        return lst[mid+1]\n    else:\n        return lst[mid]\n        \ndef rotate_string(s, k):\n    '''\n    Write a function that takes a string as a parameter and returns the string reversed and rotated k characters.\n    '''\n    if k > len(s):\n        return None\n    return s[k:] + s[:k]\n    \ndef unique_char_in_string(s):\n    '''\n    Write a function that takes a string as a parameter and return the length of the string,\n    where all the characters in the string are unique.\n    '''\n    s = list(s)\n    if len(s) == len(set(s)):\n        return len(s)\n    return None\n    \ndef change_string(s, target, replacement):\n    '''\n    Write a function that takes a string as a parameter and returns the string with all occurrences of target string replaced by replacement string.\n    '''\n    s = list(s)\n    for i, c in enumerate(s):\n        if c == target:\n            s[i] = replacement\n    return ''.join(s)\n    \ndef max_string_length(s, k):\n    '''\n    Write a function that takes a string as a parameter and returns the length of the longest substring in the string.\n    '''\n    def longest_substring(substring):\n        if len(substring) <= k:\n            return len(substring)\n        else:\n            for i in range(len(substring)):\n                for j in range(i+1, len(substring)):\n                    if len(substring[i:j+1]) > max_length:\n                        max_length = len(substring[i:j+1])\n                        max_substring = substring[i:j+1]\n        return max_substring\n        \n    s = list(s)\n    max_length = 0\n    max_substring = ''\n    for i in range(len(s)):\n        substring = longest_substring(s[i:])\n        if max_length < len(substring):\n            max_length = len(substring)\n            max_substring = substring\n    return max_substring\n    \ndef generate_error(n, m, p):\n    '''\n    Write a function that returns the error rate when an n-bit error is applied to an m-bit data stream,\n    which has a probability of p.\n    '''\n    error_count = 0\n    for _ in range(n):\n        if random.random() < p:\n            error_count += 1\n    return error_count / (n*m)\n    \ndef find_min_max_in_array(a):\n    '''\n    Write a function that takes a list of numbers as a parameter,\n    and returns the minimum and maximum values in the array.\n    '''\n    return min(a), max(a)\n    \ndef find_min_max_in_array_2(a):\n    '''\n    Write a function that takes a list of numbers as a parameter,\n    and returns the minimum and maximum values in the array,\n    but does not modify the original list.\n    '''\n    return min(a), max(a)\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function that takes two strings as parameters and returns true if\n    they are anagrams of each other, otherwise, return false.\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    return False\n    \ndef is_anagram_2(str1, str2):\n    '''\n    Write a function that takes two strings as parameters and returns true if\n    they are anagrams of each other, otherwise, return false.\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    return False\n    \ndef get_sum_of_list(lst):\n    '''\n    Write a function that takes a list as a parameter and returns the sum of all items in the list.\n    '''\n    sum = 0\n    for item in lst:\n        sum += item\n    return sum\n    \ndef get_sum_of_list_2(lst):\n    '''\n    Write a function that takes a list as a parameter and returns the sum of all items in the list.\n    '''\n    return sum(lst)\n    \ndef get_index(lst, num):\n    '''\n    Write a function that takes a list and a number as parameters and returns\n    the index position of the first occurrence of the number in the list.\n    If the number does not exist in the list, return -1.\n    '''\n    for i, item in enumerate(lst):\n        if item == num:\n            return i\n    return -1\n    \ndef get_index_2(lst, num):\n    '''\n    Write a function that takes a list and a number as parameters and returns\n    the index position of the first occurrence of the number in the list.\n    If the number does not exist in the list, return -1.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == num:\n            return i\n    return -1\n    \ndef min_max_non_negative_numbers(lst):\n    '''\n    Write a function that takes a list of numbers as a parameter and\n    returns the minimum, maximum and sum of all items in the list,\n    where all the numbers in the list are non-negative.\n    '''\n    min_num = min(lst)\n    max_num = max(lst)\n    sum_num = sum(lst)\n    return min_num, max_num, sum_num\n    \ndef min_max_non_negative_numbers_2(lst):\n    '''\n    Write a function that takes a list of numbers as a parameter and\n    returns the minimum, maximum and sum of all items in the list,\n    where all the numbers in the list are non-negative.\n    '''\n    return min(lst), max(lst), sum(lst)\n    \ndef get_num_of_evens_and_odds(lst):\n    '''\n    Write a function that takes a list of numbers as a parameter and returns the\n    number of even numbers and the number of odd numbers in the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for item in lst:\n        if item % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return even_num, odd_num\n    \ndef get_num_of_evens_and_odds_2(lst):\n    '''\n    Write a function that takes a list of numbers as a parameter and returns the\n    number of even numbers and the number of odd numbers in the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for item in lst:\n        if item % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return even_num, odd_num\n    \ndef is_prime(n):\n    '''\n    Write a function that takes a positive integer as a parameter and returns True\n    if the number is prime and False otherwise.\n    '''\n    if n <= 2:\n        return Fals",
        "num_ids": 13
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    string = str(number)\n    for i in string:\n        sum += int(i) ** len(string)\n    return sum == number\n",
        "num_ids": 41
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    arm = 0\n    n = number\n    while n > 0:\n        r = n % 10\n        arm = arm + (r ** 3)\n        n = n // 10\n    if n == 0:\n        if number == arm:\n            print(f\"{number} is armstrong number\")\n        else:\n            print(f\"{number} is not armstrong number\")\n    else:\n        print(f\"{number} is not armstrong number\")\n",
        "num_ids": 110
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp:\n        sum = sum*10 + temp%10\n        temp = temp//10\n    return (sum == number)\n",
        "num_ids": 43
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number+1):\n        total += i\n    average = total / number\n    return total, average\n",
        "num_ids": 36
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)\n    return sum, average\n",
        "num_ids": 62
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    average = 0\n    for i in range(number):\n        result += i\n        average += 1/i\n    average = average / number\n    return result, average\n",
        "num_ids": 46
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total, i, avr = 0, 1, 0\n    while i <= number:\n        total += i\n        avr += i\n        i += 1\n    print('The sum is:'+ str(total) +'and the average is:'+ str(avr / number))\n",
        "num_ids": 67
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n",
        "num_ids": 25
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total, count = 0.0, 0\n    while count < number:\n        count += 1\n        total += count\n    return total, total / number\n",
        "num_ids": 38
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(number)\n    \n    if n == 0:\n        return 0\n    \n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum / n\n",
        "num_ids": 58
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number + 1):\n        total = total + i\n        count += 1\n    return total, total/count\n",
        "num_ids": 45
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        print(\"Error\")\n    else:\n        sum = 0\n        average = 0\n        for i in range(number):\n            sum += i\n        average = sum / number\n        print(f\"Sum of first {number} natural numbers is {sum}\")\n        print(f\"Average of first {number} natural numbers is {average}\")\n    return\n",
        "num_ids": 91
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return f\"sum = {sum(number)}, average = {sum(number)/len(number)}\"\n",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n    ",
        "num_ids": 11
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2)==0: \n        return True \n    else: \n        return False\nprint(is_Even(3)) \n",
        "num_ids": 38
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2==0) : \n        print(\"{} is an even number.\".format(n))\n    else : \n        print(\"{} is an odd number.\".format(n))\n",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(\"{} is even\".format(n))\n    else : \n        print(\"{} is odd\".format(n))\n",
        "num_ids": 43
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(\"{0} is Even\".format(n))\n    else:\n        print(\"{0} is Odd\".format(n))\n        \ndef multiply(n):\n    '''\n    Write a python function to multiply all the digits of a number\n    '''\n    s = str(n)\n    s = s[::-1]\n    s = int(s)\n    s = s * n\n    return s\n    \ndef count_upper_lower(s):\n    '''\n    Write a python function to count the number of upper case letters, lower case letters and digits in a given string.\n    '''\n    upper = 0\n    lower = 0\n    digit = 0\n    for char in s:\n        if char.isupper():\n            upper += 1\n        elif char.islower():\n            lower += 1\n        elif char.isdigit():\n            digit += 1\n    print(\"No. of Upper case characters :\",upper)\n    print(\"No. of lower case characters :\",lower)\n    print(\"No. of digits in the string :\",digit)\n    \n    \ndef position_of_max_in_list(l):\n    '''\n    Write a python function to find the position of the maximum element in a list.\n    '''\n    m = l[0]\n    for i in range(1,len(l)):\n        if m < l[i]:\n            m = l[i]\n    print(\"The position of the maximum element is :\", l.index(m))\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    s = s[::-1]\n    print(s)\n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    for i in range(len(s)//2):\n        if s[i]!= s[len(s)-1-i]:\n            return False\n    return True\n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    return s == s[::-1]\n    \ndef get_string(s):\n    '''\n    Write a python function to get a string which is reversed\n    '''\n    s = s[::-1]\n    return s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    return s == s[::-1]\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    return s == s[::-1]\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    s = s[::-1]\n    return s == s\n    \ndef is_Palindrome(s):\n    s ",
        "num_ids": 1431
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n    ",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(\"%d is even\"%n) \n    else : \n        print(\"%d is odd\"%n) \n",
        "num_ids": 43
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True\n    else :\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = []\n    for i in str1:\n        if i in lst:\n            return i\n        else:\n            lst.append(i)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    string1 = str1\n    list1 = []\n    for i in string1:\n        list1.append(i)\n    count = 0\n    for i in range(len(list1)):\n        count = list1.count(list1[i])\n        if count == 2:\n            return list1[i]\n    return None\nprint(first_repeated_char(\"abcdde\"))",
        "num_ids": 96
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict = {}\n    for c in str1:\n        if c in dict.keys():\n            dict[c] += 1\n        else:\n            dict[c] = 1\n    for k, v in dict.items():\n        if v > 1:\n            return k\n    return None\n",
        "num_ids": 70
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = set(str1)\n    for ch in s:\n        if str1.count(ch)>1:\n            return ch\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == \"\":\n        return None\n    \n    for i in range(len(str1)):\n        if str1[i]!= str1[0]:\n            break\n        if i == len(str1)-1:\n            return str1[i]\n    return None\n",
        "num_ids": 71
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count={}\n    for char in str1:\n        if char in char_count:\n            char_count[char]+=1\n        else:\n            char_count[char]=1\n",
        "num_ids": 49
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for c in str1:\n        if str1.count(c)>1:\n            return c\n    return None\n",
        "num_ids": 31
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    res = None\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for i in str1:\n        if i in char_count.keys():\n            return i\n        else:\n            char_count[i] = 1\n",
        "num_ids": 46
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return i\n    return -1\n",
        "num_ids": 41
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    a = set()\n    for i in range(1, n + 1):\n        # print(i)\n        for j in range(i + 1):\n            # print(j)\n            if is_lucid(i, j):\n                a.add(i)\n    return a\n",
        "num_ids": 71
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    for i in range(1, n):\n        if is_lucid(i):\n            print(i, end=' ')\n",
        "num_ids": 34
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(n):\n        if is_ludic(i):\n            ludics.append(i)\n    return ludics\n",
        "num_ids": 44
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n):\n        if i == 1 or i == 4 or i == 7:\n            lucid_numbers.append(i)\n        elif i == 2 or i == 3 or i == 5:\n            lucid_numbers.append(i * 2)\n        elif i == 6 or i == 8 or i == 9:\n            lucid_numbers.append(i * 3)\n        elif i == 10 or i == 11 or i == 12:\n            lucid_numbers.append(i * 4)\n        elif i == 13 or i == 14 or i == 15:\n            lucid_numbers.append(i * 5)\n        elif i == 16 or i == 17 or i == 18:\n            lucid_numbers.append(i * 6)\n        elif i == 19 or i == 20 or i == 21:\n            lucid_numbers.append(i * 7)\n        elif i == 22 or i == 23 or i == 24:\n            lucid_numbers.append(i * 8)\n        elif i == 25 or i == 26 or i == 27:\n            lucid_numbers.append(i * 9)\n        elif i == 28 or i == 29 or i == 30:\n            lucid_numbers.append(i * 10)\n        elif i == 31 or i == 32 or i == 33:\n            lucid_numbers.append(i * 11)\n        elif i == 34 or i == 35 or i == 36:\n            lucid_numbers.append(i * 12)\n        elif i == 37 or i == 38 or i == 39:\n            lucid_numbers.append(i * 13)\n        elif i == 40 or i == 41 or i == 42:\n            lucid_numbers.append(i * 14)\n        elif i == 43 or i == 44 or i == 45:\n            lucid_numbers.append(i * 15)\n        elif i == 46 or i == 47 or i == 48:\n            lucid_numbers.append(i * 16)\n        elif i == 49 or i == 50 or i == 51:\n            lucid_numbers.append(i * 17)\n        elif i == 52 or i == 53 or i == 54:\n            lucid_numbers.append(i * 18)\n        elif i == 55 or i == 56 or i == 57:\n            lucid_numbers.append(i * 19)\n        elif i == 58 or i == 59 or i == 60:\n            lucid_numbers.append(i * 20)\n        elif i == 61 or i == 62 or i == 63:\n            lucid_numbers.append(i * 21)\n        elif i == 64 or i == 65 or i == 66:\n            lucid_numbers.append(i * 22)\n        elif i == 67 or i == 68 or i == 69:\n            lucid_numbers.append(i * 23)\n        elif i == 70 or i == 71 or i == 72:\n            lucid_numbers.append(i * 24)\n        elif i == 73 or i == 74 or i == 75:\n            lucid_numbers.append(i * 25)\n        elif i == 76 or i == 77 or i == 78:\n            lucid_numbers.append(i * 26)\n        elif i == 79 or i == 80 or i == 81:\n            lucid_numbers.append(i * 27)\n        elif i == 82 or i == 83 or i == 84:\n            lucid_numbers.append(i * 28)\n        elif i == 85 or i == 86 or i == 87:\n            lucid_numbers.append(i * 29)\n        elif i == 88 or i == 89 or i == 90:\n            lucid_numbers.append(i * 30)\n        elif i == 91 or i == 92 or i == 93:\n            lucid_numbers.append(i * 31)\n        elif i == 94 or i == 95 or i == 96:\n            lucid_numbers.append(i * 32)\n        elif i == 97 or i == 98 or i == 99:\n            lucid_numbers.append(i * 33)\n        elif i == 100 or i == 101 or i == 102:\n            lucid_numbers.append(i * 34)\n        elif i == 103 or i == 104 or i == 105:\n            lucid_numbers.append(i * 35)\n        elif i == 106 or i == 107 or i == 108:\n            lucid_numbers.append(i * 36)\n        elif i == 109 or i == 110 or i == 111:\n            lucid_numbers.append(i * 37)\n        elif i == 112 or i == 113 or i == 114:\n            lucid_numbers.append(i * 38)\n        elif i == 115 or i == 116 or i == 117:\n            lucid_numbers.append(i * 39)\n        elif i == 118 or i == 119 or i == 120:\n            lucid_numbers.append(i * 40)\n        elif i == 121 or i == 122 or i == 123:\n            lucid_numbers.append(i * 41)\n        elif i == 124 or i == 125 or i == 126:\n            lucid_numbers.append(i * 42)\n        elif i == 127 or i == 128 or i == 129:\n            lucid_numbers.append(i * 43)\n        elif i == 130 or i == 131 or i == 132:\n            lucid_numbers.append(i * 44)\n        elif i == 133 or i == 134 or i == 135:\n            lucid_numbers.append(i * 45)\n        elif i == 136 or i == 137 or i == 138:\n            lucid_numbers.append(i * 46)\n        elif i == 139 or i == 140 or i == 141:\n            lucid_numbers.append(i * 47)\n        elif i == 142 or i == 143 or i == 144:\n            lucid_numbers.append(i * 48)\n        elif i == 145 or i == 146 or i == 147:\n            lucid_numbers.append(i * 49)\n        elif i == 148 or i == 149 or i == 150:\n            lucid_numbers.append(i * 50)\n        elif i == 151 or i == 152 or i == 153:\n            lucid_numbers.append(i * 51)\n        elif i == 154 or i == 155 or i == 156:\n            lucid_numbers.append(i * 52)\n        elif i == 157 or i == 158 or i == 159:\n            lucid_numbers.append(i * 53)\n        elif i == 160 or i == 161 or i == 162:\n            lucid_numbers.append(i * 54)\n        elif i == 163 or i == 164 or i == 165:\n            lucid_numbers.append(i * 55)\n        elif i == 166 or i == 167 or i == 168:\n            lucid_numbers.append(i * 56)\n        elif i == 169 or i == 170 or i == 171:\n            lucid_numbers.append(i * 57)\n        elif i == 172 or i == 173 or i == 174:\n            lucid_numbers.append(i * 58)\n        elif i == 175 or i == 176 or i == 177:\n            lucid_numbers.append(i * 59)\n        elif i == 178 or i == 179 or i == 180:\n            lucid_numbers.append(i * 60)\n        elif i == 181 or i == 182 or i == 183:\n            lucid_numbers.append(i * 61)\n        elif i == 184 or i == 185 or i == 186:\n            lucid_numbers.append(i * 62)\n        elif i == 187 or i == 188 or i == 189:\n            lucid_numbers.append(i * 63)\n        elif i == 190 or i == 191 or i == 192:\n            lucid_numbers.append(i * 64)\n        elif i == 193 or i == 19",
        "num_ids": 2014
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(n):\n        return n % 10 == 3 and (n % 100!= 11 or n % 1000!= 23)\n    for i in range(1, n):\n        if is_ludic(i):\n            print(i)\n",
        "num_ids": 63
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def lucid(n):\n        if n % 5 == 0:\n            return 'L' + str(n)\n        if n % 3 == 0:\n            return 'L' + str(n)\n        return str(n)\n    return list(map(lucid, range(1,n+1)))\n",
        "num_ids": 75
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1,n+1) if is_ludicrous(i)]\n",
        "num_ids": 26
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    nums = []\n    for i in range(1, n+1):\n        if is_ludic(i):\n            nums.append(i)\n    return nums\n",
        "num_ids": 45
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i == 2 or i == 3 or i == 5 or i == 7 or i == 11:\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 58
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s)==0:\n        return s\n    \n    arr = s.split(' ')\n    reversed_arr = arr[::-1]\n    return''.join(reversed_arr)\n",
        "num_ids": 54
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    return''.join(reversed(s.split()))\n    \n    \n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse the given string.\n    '''\n    \n    return s[::-1]\n",
        "num_ids": 13
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)\n",
        "num_ids": 47
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split(' ')[::-1]\n",
        "num_ids": 15
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    result = []\n    for word in s.split():\n        result.append(word[::-1])\n    return''.join(result)\n",
        "num_ids": 36
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    #s = \"hello world\"\n    #s = \"      \"\n    #s = \"hello      world\"\n",
        "num_ids": 31
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    words = words[::-1]\n    new_s =''.join(words)\n    return new_s\n",
        "num_ids": 39
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    lst = []\n    for word in words:\n        lst.append(word[::-1])\n    return''.join(lst)\n",
        "num_ids": 47
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    #we can check any number from 2 to sqrt(num)\n    for i in range(2,int(num**0.5)):\n        if num%i==0:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n        else:\n            return True\n",
        "num_ids": 34
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        return True",
        "num_ids": 58
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    #Print(num)\n    divisor = 2\n    while divisor < num:\n        if num % divisor == 0:\n            print(num, \"is not a prime number.\")\n            return\n        divisor += 1\n    print(num, \"is a prime number.\")\n    return\n",
        "num_ids": 74
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = float(degree)\n    radian = degree * math.pi / 180\n    return radian\n",
        "num_ids": 27
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180.0\n    return radian\n",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_degrees_to_radians(degrees):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degrees * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    for i in range(0, len(pattern)):\n        for j in range(0, len(text)):\n            if text[j] == pattern[i]:\n                return text[j], j, j+len(pattern[i])-1\n    return \"\", -1, -1\n",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match_index = pattern.findall(text)\n    return '\\n'.join(match_index)\n    \n    \ndef find_nth_substr(text, pattern, n):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match_index = pattern.finditer(text)\n    match_index = [m.span() for m in match_index]\n    return '\\n'.join(match_index[n - 1])\n    \n",
        "num_ids": 52
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.finditer(pattern, text)\n",
        "num_ids": 14
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    p = re.compile(pattern)\n    result = p.search(text)\n    return result.group(), result.start(), result.end()\n",
        "num_ids": 38
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n    \ndef find_all_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n    \ndef find_all_matches(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n    \ndef find_all_matches_groups(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n        print(i.groups())\n    \ndef find_all_matches_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n        print(i.group(group))\n        \ndef find_all_matches_group_indexes(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group(group))\n        \ndef find_all_matches_group_indexes_with_span(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_groups_with_span(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span())\n        \ndef find_all_matches_groups_with_span_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_groups_with_span_group_indexes(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.group())\n        print(i.start())\n        print(i.end())\n        \ndef find_all_matches_with_match_object_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.group(group))\n        \ndef find_all_matches_with_match_object_group_indexes(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group_indexes(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group_indexes_with_span(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group_indexes_with_span_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group_indexes_with_span_group_indexes(text, pattern, grou",
        "num_ids": 85
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    start = 0\n    end = 0\n    while True:\n        result = regex.search(text,start)\n        if result == None:\n            return text[start:end]\n        else:\n            start = result.start()\n            end = result.end()\n",
        "num_ids": 77
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    # Initialize variables\n    result = []\n    start_index = 0\n    end_index = 0\n    \n    # Iterate through pattern and check for a match\n    while True:\n        start_index = text.find(pattern, start_index)\n        if start_index == -1: # No more matches\n            break\n        end_index = start_index + len(pattern) # end_index is start_index + len(pattern)\n        result.append([start_index, end_index])\n        start_index = end_index\n    \n    # Return a list of matches\n    return result\n",
        "num_ids": 145
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #return(re.search(pattern, text), 0, len(text))\n    #print(text[0:len(text)-1])\n    p = re.compile(pattern)\n    result = p.findall(text)\n    if(result):\n        return(result[0], 0, len(text)-1)\n    else:\n        return(None, None, None)\n",
        "num_ids": 94
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    r = re.search(pattern,text)\n    return r.group(),r.start(),r.end()\n",
        "num_ids": 29
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if len(pattern) == 0:\n        return ''\n    if pattern[0] == '.':\n        return find_literals(text, pattern[1:])\n    else:\n        if re.search(pattern, text):\n            return text[text.find(pattern):]\n        else:\n            return ''\n",
        "num_ids": 77
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    ans = 1\n    for i in range(1,n+1):\n        ans = ans * (i+1)\n    return ans\n",
        "num_ids": 35
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + n\n",
        "num_ids": 30
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    from math import log\n    num = 1\n    i = 1\n    while i < n:\n        num = num * (i + 1) / i\n        i += 1\n    return int(num)\n",
        "num_ids": 50
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if (n <= 1):\n        return 1\n    else:\n        return n * (n-1) // 2\n",
        "num_ids": 30
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    #lst = []\n    #for i in range(1,n):\n    #    lst.append(i)\n    #print(\"lst=\",lst)\n    \n    #lst = list(range(1,n+1))\n    #print(\"lst=\",lst)\n    #lst = list(range(1,n+1))\n    #print(\"lst=\",lst)\n    \n    #lst = list(range(1,n+1))\n    #print(\"lst=\",lst)\n    \n    #lst = list(range(1,n+1))\n    #print(\"lst=\",lst)\n    \n    lst = list(range(1,n+1))\n    print(\"lst=\",lst)\n    print(\"sum=\",sum(lst))\n    return(sum(lst))\n    ",
        "num_ids": 214
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * bell_Number(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a=0\n    b=1\n    if n==0:\n        return a\n    if n==1:\n        return b\n    \n    for i in range(2,n+1):\n        c=a+b\n        a=b\n        b=c\n    return c\n",
        "num_ids": 70
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_number=0\n    for i in range(1,n+1):\n        bell_number=bell_number+i\n    return bell_number\n",
        "num_ids": 39
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Base case.\n    if n == 0:\n        return 1\n",
        "num_ids": 19
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    count = 1\n    a = 1\n    while(count<=n):\n        count = count + 1\n        a = a + 1/count\n    return a\ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if (n == 1 or n == 0):\n        return 1\n    else:\n        return n*factorial(n-1)\ndef sum_List(l):\n    '''\n    Write a python function to get sum of list.\n    '''\n    if(len(l) == 1):\n        return l[0]\n    else:\n        return l[0] + sum_List(l[1:])\ndef product_List(l):\n    '''\n    Write a python function to get product of list.\n    '''\n    if(len(l) == 1):\n        return l[0]\n    else:\n        return l[0] * product_List(l[1:])\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if(len(s) == 1):\n        return True\n    elif(s[0] == s[-1]):\n        return is_palindrome(s[1:-1])\n    else:\n        return False\ndef reverse(s):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return s[::-1]\ndef is_palindrome_using_split(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not using split method.\n    '''\n    temp = s\n    if(len(temp) == 1):\n        return True\n    elif(temp[0] == temp[-1]):\n        return is_palindrome_using_split(temp[1:-1])\n    else:\n        return False\ndef list_factors(n):\n    '''\n    Write a python function to find factors of a given number.\n    '''\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n/2\n    for i in range(3,int(math.sqrt(n)+1),2):\n        while n % i == 0:\n            factors.append(i)\n            n = n/i\n    if(n > 2):\n        factors.append(n)\n    return factors\ndef generate_pattern(n):\n    '''\n    Write a python function to print pattern of given number n.\n    '''\n    if(n == 1):\n        print(\"*\")\n    else:\n        for i in range(n):\n            print('*' + (n-i)*''+ '*')\ndef generate_pattern_using_recursion(n):\n    '''\n    Write a python function to print pattern of given number n.\n    '''\n    def pattern(n):\n        if(n == 1):\n            return\n        else:\n            pattern(n-1)\n            print((n-1)*''+ '*')\n    pattern(n)\ndef generate_pattern_using_generator(n):\n    '''\n    Write a python function to print pattern of given number n.\n    '''\n    def pattern(n):\n        yield from (n*''+ '*' for i in range(n))\n        yield from (n*''+ '*' for i in range(n))\n    for line in pattern(n):\n        print(line)\ndef sum_list_using_generator(l):\n    '''\n    Write a python function to get sum of list using generator method.\n    '''\n    a = 0\n    for i in l:\n        a += i\n    return a\ndef sum_list_using_recursion(l):\n    '''\n    Write a python function to get sum of list using recursion method.\n    '''\n    def sum(n):\n        if(n == 1):\n            return 1\n        else:\n            return n + sum(n-1)\n    return sum(len(l))\ndef sum_list_using_loop(l):\n    '''\n    Write a python function to get sum of list using loop method.\n    '''\n    sum = 0\n    for i in range(len(l)):\n        sum += l[i]\n    return sum\ndef sum_list_using_lists(l):\n    '''\n    Write a python function to get sum of list using lists method.\n    '''\n    a = []\n    sum = 0\n    for i in l:\n        a.append(i)\n    a.append(0)\n    a.sort()\n    for i in range(len(a)-1):\n        sum += a[i]\n    return sum\ndef fibonacci(n):\n    '''\n    Write a python function to find fibonacci number of given number.\n    '''\n    if(n == 1 or n == 0):\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef prime_factors(n):\n    '''\n    Write a python function to find prime factors of given number.\n    '''\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n/2\n    for i in range(3,int(math.sqrt(n)+1),2):\n        while n % i == 0:\n            factors.append(i)\n            n = n/i\n    if(n > 2):\n        factors.append(n)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if(n <= 1):\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if(n % i == 0):\n            return False\n    return True\ndef is_prime_using_math(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if(n <= 1):\n        return False\n    if(n == 2):\n        return True\n    if(n % 2 == 0):\n        return False\n    i = 3\n    while(i*i <= n):\n        if(n % i == 0):\n            return False\n        i += 2\n    return True\ndef count_occurrences(s, char):\n    '''\n    Write a python function to count the occurences of a character in string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if(s[i] == char):\n            count += 1\n    return count\ndef is_subsequence(s, t):\n    '''\n    Write a python function to check whether a given string is subsequence or not.\n    '''\n    if(len(s) == 0 and len(t) == 0):\n        return True\n    if(len(s) > 0 and len(t) > 0):\n        if(s[0] == t[0]):\n            return is_subsequence(s[1:], t[1:])\n        else:\n            return False\n    return False\ndef is_subsequence_using_recursion(s, t):\n    '''\n    Write a python function to check whether a given string is subsequence or not.\n    '''\n    def is_subsequence_recursive(s, t, i, j):\n        if(i == len(s) and j == len(t)):\n            return True\n        elif(i == len(s)):\n            return False\n        elif(j == len(t)):\n            return False\n        else:\n            if(s[i] == t[j]):\n                return is_subsequence_recursive(s, t, i+1, j+1)\n            else:\n                return is_subsequence_recursive(s, t, i, j+1)\n    return is_subsequence_recursive(s, t, 0, 0)\ndef is_subsequence_using_list_comprehension(s, t):\n    '''\n    Write a python function to check whether a given string is subsequence or not.\n    '''\n    if(len(s) == 0 and len(t) == 0):\n        retur",
        "num_ids": 23
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    a = list1.pop(L)\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    #counting number of element in list1\n    count = len(list1)\n    # if k <= count - 1 then we need to delete the k'th element\n    if(L <= count - 1):\n        del list1[L]\n    # if k > count - 1 then we need to delete the first element\n    else:\n        del list1[0]\n    \n    return list1\n",
        "num_ids": 97
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n",
        "num_ids": 16
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #code here\n    s = list1[:L] + list1[L+1:]\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    print(list1)\n",
        "num_ids": 18
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n    l1=list1.copy()\n    l1.pop(L)\n    return l1\n",
        "num_ids": 32
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    if L == []:\n        return []\n    elif k == 0:\n        return list1\n    elif k > len(list1):\n        return list1\n    else:\n        return list1[0:k-1] + list1[k:]\n",
        "num_ids": 66
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your Code Here\n    list1.sort()\n    return list1[:L-1]\n",
        "num_ids": 26
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return []\n    if len(list1) == 1:\n        return list1[0:1]\n    else:\n        list1[L-1] = list1[L-1]\n        list1 = list1[:L-1]\n        return list1\n",
        "num_ids": 73
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        curr_val = 0\n        for j in range(len(test_list[i])):\n            curr_val = max(curr_val, test_list[i][j])\n        if curr_val > max_val:\n            max_val = curr_val\n    return max_val\n",
        "num_ids": 97
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    temp = []\n    for i in range(len(test_list)):\n        temp.append(test_list[i][N-1])\n    max_value = max(temp)\n    return max_value\n",
        "num_ids": 53
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i][N]))\n    return max_list\n",
        "num_ids": 48
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n",
        "num_ids": 9
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val\n",
        "num_ids": 64
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # if then'th column is empty, the max is 0.\n    if len(test_list) == 0:\n        return 0\n    \n    # if then'th column is not empty, we can start iterating through the list.\n    curr_max = max(test_list[0][N - 1], test_list[1][N - 1])\n    \n    for i in range(2, len(test_list)):\n        curr_max = max(curr_max, test_list[i][N - 1])\n    \n    return curr_max\n",
        "num_ids": 139
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        return -1\n    result = []\n    for i in range(0, len(test_list)):\n        result.append(max(test_list[i][:N]))\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 1 and len(test_list[0]) == 1:\n        return test_list[0][0]\n    \n    max_val = test_list[0][0]\n    test_list.reverse()\n    \n    for i in range(1, len(test_list)):\n        max_val = max(max_val, test_list[i][N])\n        \n    return max_val\n",
        "num_ids": 106
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_column_value = 0\n    for i in range(len(test_list)):\n        max_column_value = max_column_value if max_column_value >= test_list[i][N-1] else test_list[i][N-1]\n    return max_column_value\n",
        "num_ids": 74
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return None\n    lst = sorted(lst)\n    merged = []\n    merged.append(lst[0])\n    merged.append(lst[1])\n    return merged\n",
        "num_ids": 57
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #2\n    # lst_len = len(lst)\n    # lst1 = []\n    # lst2 = []\n    # for i in range(lst_len):\n    #     lst1.append(lst[i][0])\n    #     lst2.append(lst[i][1])\n    # return lst1,lst2\n    \n    #1\n    return map(list, zip(*lst))\n",
        "num_ids": 111
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return None\n    if len(lst) <= 1:\n        return lst\n    mid = len(lst) // 2\n    left = merge(lst[:mid])\n    right = merge(lst[mid:])\n    return merge_helper(left, right)\n",
        "num_ids": 76
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final = []\n    for i in range(0,len(lst)):\n        final.append([lst[i][0],lst[i][1]])\n    return final\n",
        "num_ids": 47
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return_lst = []\n    for element in lst:\n        return_lst.append([element[0],element[1]])\n    return return_lst\n",
        "num_ids": 43
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    while(lst):\n        merged.append(lst[0])\n        lst.remove(lst[0])\n    return merged\n",
        "num_ids": 43
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in lst:\n        if len(i) == 2:\n            new_list.append([i[0], i[1]])\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst\n",
        "num_ids": 56
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    return merged_list\n",
        "num_ids": 50
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list=[]\n    # Write your code here\n    for i in range(len(lst)):\n        merged_list.append(lst[i][0])\n        merged_list.append(lst[i][1])\n    return merged_list\n",
        "num_ids": 68
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    s = 0\n    for i in range(len(test_list)):\n        s += test_list[i]\n    return s\n",
        "num_ids": 35
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    if len(test_list) == 0:\n        return 0\n    \n    else:\n        return test_list[0] + cummulative_sum(test_list[1:])\n",
        "num_ids": 49
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    ans=[]\n    for i in range(0,len(test_list)):\n        ans.append(sum(test_list[:i+1]))\n    print(ans)\n    return ans\n",
        "num_ids": 51
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        result += test_list[i]\n        test_list[i] = result\n    return test_list\n",
        "num_ids": 47
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(0,len(test_list)):\n        cummulative_sum = cummulative_sum + test_list[i]\n    return cummulative_sum\n",
        "num_ids": 55
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    csum = 0\n    for i in test_list:\n        csum += i\n        return csum\n",
        "num_ids": 28
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        # print(\"for loop start\")\n        if i == 0:\n            # print(\"if\")\n            if type(test_list[i])!= int:\n                return \"Enter a correct tuple list\"\n            else:\n                cummulative_sum = test_list[i]\n                # print(cummulative_sum)\n                for j in range(len(test_list)-1):\n                    if test_list[j] < test_list[j+1]:\n                        cummulative_sum = cummulative_sum+test_list[j+1]\n                        # print(\"cummulative_sum\",cummulative_sum)\n                    else:\n                        cummulative_sum = cummulative_sum\n                        # print(\"cummulative_sum\",cummulative_sum)\n                return cummulative_sum\n        else:\n            if type(test_list[i])!= int:\n                return \"Enter a correct tuple list\"\n            else:\n                cummulative_sum = cummulative_sum + test_list[i]\n                # print(cummulative_sum)\n                for j in range(len(test_list)-1):\n                    if test_list[j] < test_list[j+1]:\n                        cummulative_sum = cummulative_sum+test_list[j+1]\n                        # print(\"cummulative_sum\",cummulative_sum)\n                    else:\n                        cummulative_sum = cummulative_sum\n                        # print(\"cummulative_sum\",cummulative_sum)\n                return cummulative_sum\n",
        "num_ids": 385
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summ = 0\n    for i in range(len(test_list)):\n        summ += test_list[i]\n    return summ\n",
        "num_ids": 37
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum\n",
        "num_ids": 47
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for i in test_list:\n        result += i\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        avg = total / len(nums[i])\n        nums[i] = (avg, )\n    return nums\nprint(average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]))\n",
        "num_ids": 115
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return (sum(nums)/len(nums))\n",
        "num_ids": 16
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #create a new list for each tuple\n    new_list = []\n    #loop through each tuple of tuples\n    for i in nums:\n        #loop through each element of the tuple\n        for j in i:\n            #append the new value to the new list\n            new_list.append(j)\n    #get the sum of the new list and divide by the length of the new list\n    return sum(new_list)/len(new_list)\n",
        "num_ids": 109
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        tuple_average = sum(nums[i])/len(nums[i])\n        average_list.append(tuple_average)\n    return average_list\n",
        "num_ids": 63
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_of_tuple = tuple(map(tuple, nums))\n    average = tuple(map(lambda x: sum(x)/len(x), tuple_of_tuple))\n    return average\n",
        "num_ids": 52
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    totals = []\n    for i in nums:\n        totals.append(sum(i))\n    average_list = []\n    for i in range(len(nums)):\n        average_list.append(round(totals[i]/len(nums[i]), 2))\n    return average_list\n",
        "num_ids": 81
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_avg = []\n    for tuple in nums:\n        avg = 0\n        for i in tuple:\n            avg += i\n        avg = avg / len(tuple)\n        total_avg.append(avg)\n    return total_avg\n",
        "num_ids": 68
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    l = []\n    for i in range(len(nums)):\n        l.append(sum(nums[i]) / len(nums[i]))\n    return l\n",
        "num_ids": 46
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    l=[]\n    l2=[]\n    for tup in nums:\n        for i in tup:\n            l.append(i)\n        l2.append(sum(l)/len(l))\n        l.clear()\n    return l2\nprint(average_tuple([[1,2,3],[4,5,6]]))\n",
        "num_ids": 86
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # try:\n    nums = tuple(nums)\n    #except ValueError:\n    #    print(\"The tuple must be a tuple of tuples.\")\n",
        "num_ids": 40
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Tuple lengths must be the same\")\n    else:\n        return_tup = ()\n        for i in range(len(test_tup1)):\n            return_tup += (test_tup1[i] % test_tup2[i],)\n        return return_tup\n",
        "num_ids": 96
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        test_tup1_list = list(test_tup1)\n        test_tup2_list = list(test_tup2)\n        test_result = []\n        for i in range(len(test_tup1)):\n            test_result.append(test_tup1_list[i] % test_tup2_list[i])\n        return tuple(test_result)\n",
        "num_ids": 127
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    out_tup = []\n    for i in range(len(test_tup1)):\n        out_tup.append(test_tup1[i] % test_tup2[i])\n    return out_tup\n",
        "num_ids": 59
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(f\"The length of the tuples are different ({len(test_tup1)} and {len(test_tup2)}). Try again!\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n        return test_tup1\n",
        "num_ids": 116
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuple lengths are not the same\")\n    for i in range(len(test_tup1)):\n        test_tup1[i] % test_tup2[i]\n",
        "num_ids": 71
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return(test_tup1[0]%test_tup2[0],test_tup1[1]%test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (0, 0)\n",
        "num_ids": 10
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    for i in range(len(test_tup1)):\n        test_list1[i] = test_list1[i] % test_list2[i]\n    return tuple(test_list1)\n",
        "num_ids": 83
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #print(\"Tuple 1 is:\", test_tup1)\n    #print(\"Tuple 2 is:\", test_tup2)\n    #print(\"Modulo operation:\")\n    #print(f\"Modulo of Tuple 1 and Tuple 2: {tuple_modulo(test_tup1,test_tup2)}\")\n    #print(f\"Modulo of Tuple 1 and Tuple 2: {tuple_modulo(test_tup1,test_tup2)}\")\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple length should be same\")\n        return\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] %= test_tup2[i]\n        return test_tup1\n",
        "num_ids": 204
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #generate the graph\n    graph = generate_Graph(steps, d)\n    #the path is a list of tuples with the start and the end points of the path in the form of (x,y)\n    path = getPath(graph, d)\n    #now we have to find all the nodes we can jump to from the starting node\n    #we can use the below function to find all the nodes that can be reached from the starting node\n    next_nodes = find_reachable_nodes(path)\n    #the jump count will be the number of jumps required to reach the final node\n    return len(next_nodes)\n",
        "num_ids": 148
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 0 or d == 0): \n        return 0\n    if (steps == 1 or d == 1): \n        return 1\n    if (d == 0 or d == 1): \n        return 2\n    n = 0\n    for j in range(1, d): \n        if (steps - j >= 0): \n            n = n + min(j, min_Jumps(steps - j, d)) \n    return n\n",
        "num_ids": 107
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    min_jumps = 0\n    # check if steps can reach 0 position\n    if (0 < (steps//d) <= steps):\n        min_jumps += 1\n    \n    # find number of jumps required\n    while (steps >= d):\n        min_jumps += 1\n        steps -= d\n    \n    return min_jumps\n    \ndef max_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (0, d) from origin in a 2d plane.\n    '''\n    \n    max_jumps = 0\n    # check if steps can reach 0 position\n    if (0 < (steps//d) <= steps):\n        max_jumps += 1\n    \n    # find number of jumps required\n    while (steps >= d):\n        max_jumps += 1\n        steps -= d\n    \n    return max_jumps\n",
        "num_ids": 84
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 0):\n        return 0\n    if (steps == 1):\n        return d\n    \n    min_jumps = float('inf')\n    # if (steps == 2):\n    #     if (d == 1):\n    #         min_jumps = 1\n    #     if (d == 2):\n    #         min_jumps = 1\n    #     if (d == 3):\n    #         min_jumps = 1\n    #     if (d == 4):\n    #         min_jumps = 1\n    #     return min_jumps\n",
        "num_ids": 137
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    while steps > 0: \n        if steps % d == 0:\n            count += 1\n        steps = steps//d\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    j = 1\n    x = 0\n    y = 0\n    while(x < steps):\n        if(y == 0 or y == d):\n            x += 1\n            if(y == 0):\n                y += d\n        else:\n            x += 1\n            if(y!= 0):\n                y -= 1\n    print(j)\n",
        "num_ids": 84
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    s = steps\n    #a = []\n    while True:\n        #a.append(s)\n        if s > 0:\n            if (s-d) >= 0:\n                s = s - d\n            else:\n                s = 0\n        elif s == 0:\n            return -1\n        else:\n            return 0\n",
        "num_ids": 82
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if steps == 0 or d == 0:\n        return 0\n    \n    steps = min(steps, d)\n    \n    steps = min_Jumps(steps - 1, d) + min_Jumps(steps - 2, d) + min_Jumps(steps - 3, d)\n    \n    return steps\n",
        "num_ids": 78
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    \n    if d<0:\n        return -1\n    \n    if d == 1:\n        return 1\n    \n    if d == 2:\n        return 1\n    \n    return min_Jumps(steps, d-1) + min_Jumps(steps, d-2)\n",
        "num_ids": 81
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    count = 0\n    i = 1\n    while i<=steps:\n        if i == 1 and steps == 1:\n            count = 1\n        else:\n            if d % i == 0:\n                count = count + 1\n        i = i + 1\n    print(count)\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # new_list = []\n    # for num1,num2 in zip(nums1,nums2):\n    #     new_list.append(num1/num2)\n    # return new_list\n    \n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n    \nprint(div_list([1,2,3,4], [1,2,3,4]))\nprint(div_list([1,2,3,4], [1,0,3,4]))\nprint(div_list([10,2,3,4], [1,0,3,4]))\nprint(div_list([1,2,3,4], [10,0,3,4]))\nprint(div_list([0,1,2,3,4], [0,0,3,4,4]))\nprint(div_list([0,1,2,3,4], [0,1,2,3,4]))\nprint(div_list([0,1,2,3,4], [1,2,3,4,5]))\nprint(div_list([0,1,2,3,4], [0,0,0,0,0]))\n",
        "num_ids": 299
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [a/b for a,b in zip(nums1,nums2)]\n    \n    ",
        "num_ids": 27
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2), \"Numbers in lists must be same length\"\n    return [[a/b] for a,b in zip(nums1,nums2)]\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n    \n    \ndef sum_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]+nums2[i])\n    return result\n    \ndef sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n    \ndef mult_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]*nums2[i])\n    return result\n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n    \n    \ndef multiply_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]*nums2[i])\n    return result\n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n    \n    \ndef sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n    \n    \ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]+nums2[i])\n    return result\n    \ndef add_list2(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]+nums2[i])\n    return result\n    \n    \ndef list_add(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]+nums2[i])\n    return result\n    \ndef list_add2(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]+nums2[i])\n    return result\n    \ndef list_add3(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]+nums2[i])\n    return result\n    \ndef list_add4(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]+nums2[i])\n    return result\n    \ndef list_sub(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n    \ndef list_sub2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n    \ndef list_sub3(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n    \ndef list_sub4(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n    \ndef list_mult(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]*nums2[i])\n    return result\n    \ndef list_mult2(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]*nums2[i])\n    return result\n    \ndef list_mult3(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]*nums2[i])\n    return result\n    \ndef list_mult4(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]*nums2[i])\n    return result\n    \ndef list_div(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n    \ndef list_div2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n    \ndef list_div3(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n    \ndef list_div4(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n    \ndef list_max(nums",
        "num_ids": 53
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l1 = nums1[:]\n    l2 = nums2[:]\n    len_1 = len(l1)\n    len_2 = len(l2)\n    count = 0\n    if len_1<len_2:\n        for i in range(len_2-len_1):\n            l1.append(0)\n    elif len_1>len_2:\n        for i in range(len_1-len_2):\n            l2.append(0)\n    while count < len_1:\n        l1[count] = l1[count]/l2[count]\n        count += 1\n    return l1\n",
        "num_ids": 158
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num1 = nums1\n    num2 = nums2\n    x = 0\n    y = 0\n    z = 0\n    while (x < len(num1)):\n        num1[x] = num1[x] / num2[y]\n        x += 1\n        y += 1\n    return num1\n",
        "num_ids": 79
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n",
        "num_ids": 35
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    new_str = ''\n    num_str = []\n    \n    for i in range(0, len(test_str)):\n        if test_str[i].isnumeric():\n            num_str.append(test_str[i])\n    \n    while len(num_str) > 0:\n        for i in range(0, len(num_str)):\n            new_str += num_str[i]\n        \n        for i in range(0, len(num_str)):\n            test_str = test_str.replace(num_str[i], '', 1)\n    \n    return new_str\n    \n    \n",
        "num_ids": 157
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Solution 1\n    # return test_str.replace(\" \", \"\")\n",
        "num_ids": 20
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == \"\":\n        return test_str\n",
        "num_ids": 17
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str or len(test_str) == 1:\n        return test_str\n    letters = []\n    numbers = []\n    for ch in test_str:\n        if ch.isalpha():\n            letters.append(ch)\n        else:\n            numbers.append(ch)\n    letters.extend(numbers)\n    letters.reverse()\n    return ''.join(letters)\n",
        "num_ids": 99
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    num_re = re.compile('[0-9]')\n    num_list = num_re.findall(test_str)\n    if len(num_list) == 0:\n        return test_str\n    else:\n        test_str = ''.join(num_list).join(test_str.split(num_list[-1]))\n        return test_str\n",
        "num_ids": 98
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = test_str\n    l = []\n    \n    for c in s:\n        if c.isdigit():\n            l.append(c)\n    \n    l = l[::-1]\n    \n    for i in range(len(l)):\n        s = s.replace(l[i], '')\n        s = s + l[i]\n    \n    return s\n    \nprint(move_num(\"a123bc\")",
        "num_ids": 108
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    print(f\"Original string: {test_str}\")\n    char_list = list(test_str)\n    char_list.sort(key = lambda x: x.isnumeric())\n    sorted_str = ''.join(char_list)\n    print(f\"String after sorting: {sorted_str}\")\n",
        "num_ids": 80
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = '0123456789'\n    result = \"\"\n    for char in test_str:\n        if char in num:\n            result = result + char\n    for char in result:\n        if char in num:\n            return test_str + result\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1].isnumeric() and test_str[i].isnumeric():\n            temp_str = test_str.replace(test_str[i], '')\n            temp_str += test_str[i]\n            test_str = temp_str\n    return test_str\n",
        "num_ids": 93
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) == 0:\n        return ''\n    if len(test_str) == 1:\n        return test_str\n    a = list(test_str)\n    while a[0].isalpha():\n        a.insert(0,a.pop(0))\n    while a[-1].isalpha():\n        a.append(a.pop(-1))\n    return ''.join(a)\n",
        "num_ids": 102
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset_helper(a, start, n):\n        if n == 1:\n            return a\n",
        "num_ids": 30
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max = 0\n    nums = []\n    for num in a:\n        if num not in nums:\n            nums.append(num)\n    for i in range(len(nums)):\n        if max < len(nums[i:]):\n            max = len(nums[i:])\n    return max\n",
        "num_ids": 80
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize the largest subset set and index count\n    largest_set = set()\n    count = 0\n",
        "num_ids": 27
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # 1) get all divisors from numbers:\n    divs = []\n    for num in a:\n        divs += range(1,num+1)\n    # 2) find the divisors:\n    divs = list(set(divs))\n    # 3) sort divisors:\n    divs.sort(reverse=True)\n    # 4) sort sublists:\n    a = sorted(a)\n    # 5) init list with 1:\n    s = [1]\n    # 6) go through divisors and check if they are not in the sublist:\n    for div in divs:\n        if div not in s:\n            s.append(div)\n    return s\n",
        "num_ids": 168
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # dict to store the numbers\n    d={}\n    # array for storing the array of numbers\n    arr=[]\n    # adding numbers to the array\n    for i in a:\n        arr.append(i)\n    # looping through the array to find the largest subset\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]+arr[j])%2==0:\n                if arr[i]+arr[j] not in d:\n                    d[arr[i]+arr[j]]=1\n                else:\n                    d[arr[i]+arr[j]]+=1\n    # taking the maximum value from the dictionary\n    max_value=0\n    for i in d.values():\n        if i>max_value:\n            max_value=i\n    # getting the key from the dictionary\n    for i in d.keys():\n        if d[i]==max_value:\n            return i\n        else:\n            continue\n    ",
        "num_ids": 242
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    def largest_subset(a):\n        a.sort(reverse=True)\n        count = 0\n        length = len(a)\n        \n        for i in range(length):\n            if a[i] % 2!= 0:\n                count += 1\n                \n        if count == 0:\n            return 0\n        \n        else:\n            return count\n    \n    return largest_subset(a)\n    \n    \n    \n    \ndef find_word(s):\n    '''\n    Write a function to count the number of words that can be made using letters from a given string\n    '''\n    \n    def find_word(s):\n        count = 0\n        for i in s:\n            if i.isalpha():\n                count += 1\n        return count\n    \n    return find_word(s)\n    \n    \n    \n    \ndef has_23(a):\n    '''\n    Write a function to check if a given string has any 2 or 3 or not\n    '''\n    \n    def has_23(a):\n        for i in range(len(a)):\n            if int(a[i]) in range(2,5):\n                return True\n        return False\n    \n    return has_23(a)\n    \n    \n    \n    \ndef is_unique(s):\n    '''\n    Write a function to check if a given string has any duplicate characters\n    '''\n    \n    def is_unique(s):\n        for i in s:\n            if s.count(i) > 1:\n                return False\n        return True\n    \n    return is_unique(s)\n    \n    \n    \n    \ndef is_unique_list(a):\n    '''\n    Write a function to check if a given list has any duplicate characters\n    '''\n    \n    def is_unique_list(a):\n        for i in range(len(a)):\n            if a.count(a[i]) > 1:\n                return False\n        return True\n    \n    return is_unique_list(a)\n    \n    \n    \n    \ndef is_power_of_two(n):\n    '''\n    Write a function to check if a given number is power of 2 or not\n    '''\n    \n    def is_power_of_two(n):\n        if n == 0:\n            return False\n        elif n == 1:\n            return True\n        elif n%2 == 0:\n            return is_power_of_two(n/2)\n        else:\n            return False\n    \n    return is_power_of_two(n)\n    \n    \n    \n    \ndef remove_duplicates(s):\n    '''\n    Write a function to remove duplicate characters from a given string\n    '''\n    \n    def remove_duplicates(s):\n        if len(s) == 0:\n            return \"\"\n        \n        elif len(s) == 1:\n            return s\n        \n        else:\n            for i in range(len(s)):\n                if s[i]!= s[i+1]:\n                    return s[:i+1]\n    \n    return remove_duplicates(s)\n    \n    \n    \n    \ndef get_char_count(s):\n    '''\n    Write a function to count the number of characters in a given string\n    '''\n    \n    def get_char_count(s):\n        count = 0\n        for i in s:\n            count += 1\n        return count\n    \n    return get_char_count(s)\n    \n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a given string is palindrome or not\n    '''\n    \n    def is_palindrome(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1:\n            return True\n        else:\n            if s[0] == s[-1]:\n                return is_palindrome(s[1:-1])\n            else:\n                return False\n    \n    return is_palindrome(s)\n    \n    \n    \ndef is_palindrome_no_stack(s):\n    '''\n    Write a function to check if a given string is palindrome or not\n    '''\n    \n    def is_palindrome_no_stack(s):\n        if len(s) == 0:\n            return False\n        \n        elif len(s) == 1:\n            return True\n        else:\n            if s[0] == s[-1]:\n                return is_palindrome_no_stack(s[1:-1])\n            else:\n                return False\n    \n    return is_palindrome_no_stack(s)\n    \n    \n    \n    \ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a given number\n    '''\n    \n    def factorial(n):\n        if n == 1:\n            return n\n        else:\n            return n * factorial(n-1)\n    \n    return factorial(n)\n    \n    \n    \ndef convert_binary_to_decimal(s):\n    '''\n    Write a function to convert a binary number into decimal\n    '''\n    \n    def convert_binary_to_decimal(s):\n        if len(s) == 0:\n            return 0\n        \n        elif len(s) == 1:\n            return int(s)\n        \n        else:\n            return int(s[0]) + 10*convert_binary_to_decimal(s[1:])\n    \n    return convert_binary_to_decimal(s)\n    \n    \n    \n    \ndef convert_decimal_to_binary(n):\n    '''\n    Write a function to convert a decimal number into binary\n    '''\n    \n    def convert_decimal_to_binary(n):\n        if n == 0:\n            return str(n)\n        elif n == 1:\n            return str(n)\n        else:\n            return str(n%2) + convert_decimal_to_binary(n//2)\n    \n    return convert_decimal_to_binary(n)\n    \n    \n    \n    \ndef validate_binary_search_tree(root):\n    '''\n    Write a function to check if a given binary tree is a valid binary search tree\n    '''\n    \n    def validate_binary_search_tree(root):\n        if root is None:\n            return True\n        else:\n            if root.left is None:\n                return True\n            else:\n                if root.right is None:\n                    return True\n                else:\n                    if root.left.val <= root.val and root.right.val >= root.val:\n                        return validate_binary_search_tree(root.left) and validate_binary_search_tree(root.right)\n                    else:\n                        return False\n    \n    return validate_binary_search_tree(root)\n    \n    \n    \n    \ndef min_element(a):\n    '''\n    Write a function to get the minimum element in a given array\n    '''\n    \n    def min_element(a):\n        if len(a) == 0:\n            return None\n        \n        else:\n            min_index = 0\n            for i in range(len(a)):\n                if a[i] < a[min_index]:\n                    min_index = i\n            return a[min_index]\n    \n    return min_element(a)\n    \n    \n    \n    \ndef is_subset(s,t):\n    '''\n    Write a function to check if a given set is subset of another set\n    '''\n    \n    def is_subset(s,t):\n        if len(s) == 0:\n            return True\n        elif len(t) == 0:\n            return False\n        else:\n            if s[0] == t[0]:\n                return is_subset(s[1:],t[1:])\n            else:\n                return is_subset(s[1:],t)\n    \n    return is_subset(s,t)\n    \n    \n    \n    \ndef product_of_all_others(n, arr):\n    '''\n    Write a function to find the product of all the numbers except the current number in a given array\n    '''\n    \n    de",
        "num_ids": 6
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    largest_subset = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i]%a[j]==0:\n                largest_subset = max(largest_subset,a[i]/a[j])\n    return largest_subset\n",
        "num_ids": 81
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    num = {}\n    a.sort()\n    for i in range(len(a)):\n        if a[i] not in num.keys():\n            num[a[i]] = 0\n    for i in range(len(a)):\n        if a[i] not in num.keys():\n            num[a[i]] = 1\n        else:\n            num[a[i]] += 1\n    for i in num.keys():\n        if size <= num[i]:\n            size = num[i]\n    return size\n",
        "num_ids": 132
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # from collections import defaultdict\n    # import math\n    # import random\n    # from heapq import heappop, heappush\n    # from bisect import bisect\n    # import itertools\n    # import time\n    # import pdb\n    # import sys\n",
        "num_ids": 66
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset_rec(arr, i, j):\n        if i >= j:\n            return 0\n        if i == j - 1:\n            return 1\n        if arr[i] % arr[j] == 0:\n            return 1 + largest_subset_rec(arr, i+1, j-1)\n        else:\n            return max(1 + largest_subset_rec(arr, i+1, j), 1 + largest_subset_rec(arr, i, j-1))\n",
        "num_ids": 122
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    if n%2 == 0:\n        median = (arr1[n//2] + arr2[n//2])/2\n        return median\n    else:\n        return arr1[n//2]\n",
        "num_ids": 58
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    mid = n // 2\n    return arr[mid]\n    \n",
        "num_ids": 33
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort both lists\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n",
        "num_ids": 28
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[n//2]\n",
        "num_ids": 30
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (get_median_of_two_sorted_lists(arr1, arr2, (n+1)/2) + get_median_of_two_sorted_lists(arr1, arr2, (n+1)/2))/2\n    else:\n        return get_median_of_two_sorted_lists(arr1, arr2, n/2 + 1)\n",
        "num_ids": 105
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[n//2]\n",
        "num_ids": 30
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n",
        "num_ids": 37
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    length = len(arr1)\n    middle = length // 2\n    if length % 2 == 0:\n        middle_1 = middle - 1\n        arr1_median = (arr1[middle] + arr1[middle_1])/2\n        arr2_median = (arr2[middle] + arr2[middle_1])/2\n        print(arr1_median, arr2_median)\n    else:\n        arr1_median = arr1[middle]\n        arr2_median = arr2[middle]\n        print(arr1_median, arr2_median)\n    return arr1_median, arr2_median\n",
        "num_ids": 160
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0:\n        return arr2[n // 2]\n    elif len(arr2) == 0:\n        return arr1[n // 2]\n    elif len(arr1) == 1 and len(arr2) == 1:\n        return max(arr1[0], arr2[0])\n    else:\n        m = len(arr1)\n        n = len(arr2)\n        if n > m:\n            return get_median(arr2, arr1, m + n - 1)\n        elif n == 0:\n            return None\n        else:\n            mid1 = n // 2\n            mid2 = m // 2\n            return (arr1[mid1] + arr2[mid2]) / 2\n",
        "num_ids": 180
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_list = sorted(arr1+arr2)\n    n = len(sorted_list)\n    print(sorted_list)\n    if n%2 == 0:\n        return (sorted_list[n//2]+sorted_list[n//2-1])/2\n    else:\n        return sorted_list[n//2]\n",
        "num_ids": 87
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    n=int(n)\n    for i in range(0,len(nums)):\n        nums[i]=n*nums[i]\n    return nums\n",
        "num_ids": 44
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return map(lambda x:x**n,nums)\n",
        "num_ids": 17
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    # first, sort the list in ascending order\n    nums.sort()\n",
        "num_ids": 22
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    ans = []\n    if n == 1:\n        for i in nums:\n            ans.append(i**n)\n    else:\n        for i in nums:\n            ans.append(nth_nums(nums,n-1)*i)\n    return ans\n",
        "num_ids": 69
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    list_n = []\n    for i in nums:\n        list_n.append(i**n)\n    return list_n\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**i for i in range(n)]\n",
        "num_ids": 16
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return nums\n    if n == 2:\n        return [x**2 for x in nums]\n    if n == 3:\n        return [x**3 for x in nums]\n    if n == 4:\n        return [x**4 for x in nums]\n    if n == 5:\n        return [x**5 for x in nums]\n    if n == 6:\n        return [x**6 for x in nums]\n    if n == 7:\n        return [x**7 for x in nums]\n    if n == 8:\n        return [x**8 for x in nums]\n    if n == 9:\n        return [x**9 for x in nums]\n    if n == 10:\n        return [x**10 for x in nums]\n",
        "num_ids": 205
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #return nums ** n\n    ans = []\n    for i in nums:\n        ans.append(i**n)\n    return ans\n    \nnth_nums([1,2,3],4)",
        "num_ids": 53
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Initialize string with an empty string\n    new_string = \"\"\n    # For loop to convert each character into uppercase\n    for i in range(len(string)):\n        char = string[i]\n        new_string += char.upper()\n    # Return the string\n    return new_string\n",
        "num_ids": 74
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    x = string.upper()\n    return x\n",
        "num_ids": 14
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase = string.upper()\n    return uppercase\n",
        "num_ids": 18
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # pass\n    # print(string.upper())\n    if string is None:\n        return None\n    return string.upper()\n",
        "num_ids": 33
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n    \ndef get_character(string, character):\n    '''\n    Write a python function to check whether a given string contains a given character.\n    '''\n    return character in string\n    \n    \ndef count_alphabets(string):\n    '''\n    Write a python function to count the number of alphabets in a given string.\n    '''\n    return sum(x.isalpha() for x in string)\n    \n    \ndef is_sorted(list_numbers):\n    '''\n    Write a python function to check whether a given list is sorted.\n    '''\n    return all(x < y for x, y in zip(list_numbers[:-1], list_numbers[1:]))\n    \n    \ndef count_odd(list_numbers):\n    '''\n    Write a python function to count the number of odd numbers in a given list.\n    '''\n    return sum(x % 2!= 0 for x in list_numbers)\n    \n    \ndef sum_of_divisors(number):\n    '''\n    Write a python function to compute the sum of divisors of a given number.\n    '''\n    divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors += i\n    return divisors\n    \n    \ndef get_all_substrings(string):\n    '''\n    Write a python function to get all the substrings in a string.\n    '''\n    return [string[i : j + 1] for i in range(len(string)) for j in range(i, len(string))]\n    \n    \ndef sum_of_digits(number):\n    '''\n    Write a python function to sum the digits in a given number.\n    '''\n    return sum([int(x) for x in str(number)])\n    \n    \ndef is_prime(number):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef sum_of_n_primes(n):\n    '''\n    Write a python function to compute the sum of n primes.\n    '''\n    from math import sqrt\n    sum_n_primes = 0\n    primes = list()\n    for i in range(2, 1000000):\n        if is_prime(i):\n            primes.append(i)\n    for prime in primes:\n        if prime <= sqrt(n):\n            j = 2\n            while j <= prime:\n                if prime % j == 0:\n                    break\n                j += 1\n            else:\n                sum_n_primes += prime\n    return sum_n_primes\n    \n    \ndef get_common_substring(string1, string2):\n    '''\n    Write a python function to find the common substring between two strings.\n    '''\n    min_size = min(len(string1), len(string2))\n    for i in range(min_size):\n        if string1[i]!= string2[i]:\n            return string1[:i]\n    return string1[:min_size]\n    \n    \ndef get_common_characters(string1, string2):\n    '''\n    Write a python function to find the common characters in two strings.\n    '''\n    return list(set(string1) & set(string2))\n    \n    \ndef get_combinations(list_numbers):\n    '''\n    Write a python function to get all the combinations of n elements from a list of elements.\n    '''\n    n = len(list_numbers)\n    if n == 0:\n        return list()\n    combinations = list()\n    list_numbers.sort()\n    for i in range(n):\n        combinations.append(list_numbers[i])\n        for j in range(i + 1, n):\n            combinations.append(list_numbers[i] + list_numbers[j])\n            combinations.append(list_numbers[i] - list_numbers[j])\n            combinations.append(list_numbers[i] * list_numbers[j])\n            if list_numbers[j]!= 0:\n                combinations.append(list_numbers[i] / list_numbers[j])\n    return combinations\n    \n    \ndef get_common_element(list_numbers1, list_numbers2):\n    '''\n    Write a python function to find all the common elements in two lists.\n    '''\n    common_element = list()\n    for element1 in list_numbers1:\n        for element2 in list_numbers2:\n            if element1 == element2:\n                common_element.append(element1)\n    return common_element\n    \n    \ndef swap_element(list_numbers, index_1, index_2):\n    '''\n    Write a python function to swap the element in a given list at given indices.\n    '''\n    list_numbers[index_1], list_numbers[index_2] = list_numbers[index_2], list_numbers[index_1]\n    return list_numbers\n    \n    \ndef search_element(list_numbers, element_to_search):\n    '''\n    Write a python function to search a element in a given list.\n    '''\n    if element_to_search not in list_numbers:\n        return -1\n    for i in range(len(list_numbers)):\n        if element_to_search == list_numbers[i]:\n            return i\n    return -1\n    \n    \ndef get_occurrences(string, element):\n    '''\n    Write a python function to get the number of occurrences of an element in a given string.\n    '''\n    return string.count(element)\n    \n    \ndef get_digit_occurrences(string, digit):\n    '''\n    Write a python function to get the number of occurrences of a digit in a given string.\n    '''\n    return string.count(str(digit))\n    \n    \ndef get_concatenated_string(string1, string2):\n    '''\n    Write a python function to concatenate two given strings.\n    '''\n    return string1 + string2\n    \n    \ndef get_index_of_element_in_list(list_numbers, element_to_search):\n    '''\n    Write a python function to get the index of a given element in a given list.\n    '''\n    for i in range(len(list_numbers)):\n        if list_numbers[i] == element_to_search:\n            return i\n    return -1\n    \n    \ndef check_possibility(list_numbers):\n    '''\n    Write a python function to check whether a given list is possible or not.\n    '''\n    for i in range(len(list_numbers)):\n        if list_numbers[i] == 0:\n            return False\n        elif list_numbers[i]!= 0:\n            return True\n    return False\n    \n    \ndef get_first_n_positive(list_numbers, n):\n    '''\n    Write a python function to get the first n positive integers from a given list.\n    '''\n    if n <= 0:\n        return list()\n    if n == len(list_numbers):\n        return list_numbers\n    for i in range(n, len(list_numbers)):\n        if list_numbers[i] > 0:\n            return list_numbers[:n]\n    return list_numbers\n    \n    \ndef get_first_n_negative(list_numbers, n):\n    '''\n    Write a python function to get the first n negative integers from a given list.\n    '''\n    if n <= 0:\n        return list()\n    if n == len(list_numbers):\n        return list_numbers\n    for i in range(n, len(list_numbers)):\n        if list_numbers[i] < 0:\n            return list_numbers[:n]\n    return list_numbers\n    \n    \ndef get_first_n_zero(list_numbers, n):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string) == str:\n        string = string.upper()\n        return string\n    else:\n        raise Exception(\"Expected a string\")\n        \ndef is_square(matrix):\n    '''\n    Write a python function to determine if a given square matrix is square or not.\n    '''\n    if type(matrix) == list:\n        length = len(matrix)\n        if length == 0:\n            raise Exception(\"Matrix cannot be empty\")\n        for i in range(length):\n            if type(matrix[i])!= list:\n                raise Exception(\"Matrix must be square matrix\")\n            if len(matrix[i])!= length:\n                raise Exception(\"Matrix must be square matrix\")\n        if length == 1:\n            return matrix[0]\n        elif length == 2:\n            return matrix[0][0] == matrix[1][1]\n        else:\n            return matrix[0][0] == matrix[1][1] and matrix[1][1] == matrix[2][2] and matrix[2][2] == matrix[1][1]\n    else:\n        raise Exception(\"Expected a list\")\n        \ndef is_prime(num):\n    '''\n    Write a python function to determine if a given number is a prime or not.\n    '''\n    if type(num) == int:\n        if num < 0:\n            raise Exception(\"Invalid input\")\n        if num == 0 or num == 1:\n            return False\n        else:\n            for i in range(2,num):\n                if num % i == 0:\n                    return False\n            return True\n    else:\n        raise Exception(\"Expected integer\")\n        \ndef get_factors(num):\n    '''\n    Write a python function to find the factors of a given number.\n    '''\n    if type(num) == int:\n        factors = []\n        for i in range(1,num+1):\n            if num % i == 0:\n                factors.append(i)\n        return factors\n    else:\n        raise Exception(\"Expected integer\")\n",
        "num_ids": 66
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # your code here\n    length = len(newList)\n    print(newList[length-1], newList[0])\n    newList[length-1], newList[0] = newList[0], newList[length-1]\n    print(newList)\n    return\n",
        "num_ids": 70
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Code here\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #code here\n    return newList\n    \ndef remove_Duplicates(l): \n    '''\n    Write a python function to remove duplicate elements from a list. \n    '''\n    #code here\n    return l\n",
        "num_ids": 11
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop(0)\n    newList.pop(-1)\n    newList.insert(0, newList.pop())\n    print(newList)\n    \n    \nif __name__ == \"__main__\":\n    #print(swap_List(list1))\n    print(swap_List(list2))",
        "num_ids": 80
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    temp=newList[0]\n    newList[0]=newList[length-1]\n    newList[length-1]=temp\n    print(newList)\n    return newList\ndef remove_Duplicates_list(newList):\n    '''\n    Write a python function to remove the duplicate elements from a given list\n    '''\n    if len(newList)==0:\n        print('List is empty')\n        return\n    if len(newList)==1:\n        print('List contains only one element')\n        return\n    temp=[]\n    for i in range(len(newList)):\n        if newList[i] not in temp:\n            temp.append(newList[i])\n    print(temp)\n    return temp\ndef remove_Duplicates_tuple(newTuple):\n    '''\n    Write a python function to remove the duplicate elements from a given tuple\n    '''\n    newTuple=list(newTuple)\n    for i in range(len(newTuple)-1):\n        for j in range(i+1,len(newTuple)):\n            if newTuple[i]==newTuple[j]:\n                newTuple.pop(j)\n    print(newTuple)\n    return newTuple\n",
        "num_ids": 87
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\nprint(swap_List([1,2,3,4,5]))\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1] + newList[1:] + newList[:1]\n",
        "num_ids": 24
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    last = newList.pop()\n    newList.insert(0,last)\n    return newList\n",
        "num_ids": 27
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    import math\n    \n    if r < 0 :\n        return \"radius cannot be negative\"\n    \n    else:\n        c = math.sqrt(r * (r + 1))\n        a = (1/2) * math.sqrt(r*(r+1)*(r+2))\n        \n        print(\"The area of the triangle is \" + str(c) + \"cm^2\")\n        print(\"The area of the triangle is \" + str(a) + \"cm^2\")\n        \ntriangle_area(5)\n",
        "num_ids": 131
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (math.sqrt(3)/4)*r*r*math.sin(math.pi/3)\n    print(area)\n    return area\n",
        "num_ids": 44
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0.0\n    \n    for i in range(1, int(math.pow(r, 2)) + 1) :\n        area += (r*r) / (2*i)\n    return area\n",
        "num_ids": 58
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1,r+1):\n        for j in range(1,i+1):\n            area = area + 1/2*i*j\n        if area > area:\n            area = area\n    return area\n",
        "num_ids": 62
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def maximum_triangle(r):\n        '''\n        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        def rectangle_area(a,b):\n            '''\n            Write a python function to find the area of the largest rectangle that can be inscribed in a circle with a given radius.\n            '''\n            import math\n            def parallelogram_area(a,b):\n                '''\n                Write a python function to find the area of the largest parallelogram that can be inscribed in a rectangle with a given width and height.\n                '''\n                def trapezoid_area(a,b,c,d):\n                    '''\n                    Write a python function to find the area of the largest trapezoid that can be inscribed in a rectangle with a given width and height.\n                    '''\n                    def circle_area(r):\n                        '''\n                        Write a python function to find the area of a circle with a given radius.\n                        '''\n                        import math\n                        def rectangle_area(a,b):\n                            '''\n                            Write a python function to find the area of a rectangle with a given width and height.\n                            '''\n                            import math\n                            def parallelogram_area(a,b):\n                                '''\n                                Write a python function to find the area of the largest parallelogram that can be inscribed in a rectangle with a given width and height.\n                                '''\n                                def trapezoid_area(a,b,c,d):\n                                    '''\n                                    Write a python function to find the area of the largest trapezoid that can be inscribed in a rectangle with a given width and height.\n                                    '''\n                                    def rectangle_area(a,b):\n                                        '''\n                                        Write a python function to find the area of a rectangle with a given width and height.\n                                        '''\n                                        import math\n                                        def circle_area(r):\n                                            '''\n                                            Write a python function to find the area of a circle with a given radius.\n                                            '''\n                                            import math\n                                            def rectangle_area(a,b):\n                                                '''\n                                                Write a python function to find the area of a rectangle with a given width and height.\n                                                '''\n                                                import math\n                                                def parallelogram_area(a,b):\n                                                    '''\n                                                    Write a python function to find the area of the largest parallelogram that can be inscribed in a rectangle with a given width and height.\n                                                    '''\n                                                    def trapezoid_area(a,b,c,d):\n                                                        '''\n                                                        Write a python function to find the area of the largest trapezoid that can be inscribed in a rectangle with a given width and height.\n                                                        '''\n                                                        def rectangle_area(a,b):\n                                                            '''\n                                                            Write a python function to find the area of a rectangle with a given width and height.\n                                                            '''\n                                                            import math\n                                                            def circle_area(r):\n                                                                '''\n                                                                Write a python function to find the area of a circle with a given radius.\n                                                                '''\n                                                                import math\n                                                                def rectangle_area(a,b):\n                                                                    '''\n                                                                    Write a python function to find the area of a rectangle with a given width and height.\n                                                                    '''\n                                                                    import math\n                                                                    def parallelogram_area(a,b):\n                                                                        '''\n                                                                        Write a python function to find the area of the largest parallelogram that can be inscribed in a rectangle with a given width and height.\n                                                                        '''\n                                                                        def trapezoid_area(a,b,c,d):\n                                                                            '''\n                                                                            Write a python function to find the area of the largest trapezoid that can be inscribed in a rectangle with a given width and height.\n                                                                            '''\n                                                                            def rectangle_area(a,b):\n                                                                                '''\n                                                                                Write a python function to find the area of a rectangle with a given width and height.\n                                                                                '''\n                                                                                import math\n                                                                                def circle_area(r):\n                                                                                    '''\n                                                                                    Write a python function to find the area of a circle with a given radius.\n                                                                                    '''\n                                                                                    import math\n                                                                                    def rectangle_area(a,b):\n                                                                                        '''\n                                                                                        Write a python function to find the area of a rectangle with a given width and height.\n                                                                                        '''\n                                                                                        import math\n                                                                                        def parallelogram_area(a,b):\n                                                                                            '''\n                                                                                            Write a python function to find the area of the largest parallelogram that can be inscribed in a rectangle with a given width and height.\n                                                                                            '''\n                                                                                            def trapezoid_area(a,b,c,d):\n                                                                                            '''\n                                                                                            Write a python function to find the area of the largest trapezoid that can be inscribed in a rectangle with a given width and height.\n                                                                                            '''\n                                                                                            def rectangle_area(a,b):\n                                                                                            '''\n                                                                                            Write a python function to find the area of a rectangle with a given width and height.\n                                                                                            '''\n                                                                                            import math\n                                                                                            def circle_area(r):\n                                                                                                '''\n                                                                                                Write a python function to find the area of a circle with a given radius.\n                                                                                                '''\n                                                                                                import math\n                                                                                                def rectangle_area(a,b):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of a rectangle with a given width and height.\n                                                                                                    '''\n                                                                                                    import math\n                                                                                                    def parallelogram_area(a,b):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of the largest parallelogram that can be inscribed in a rectangle with a given width and height.\n                                                                                                    '''\n                                                                                                    def trapezoid_area(a,b,c,d):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of the largest trapezoid that can be inscribed in a rectangle with a given width and height.\n                                                                                                    '''\n                                                                                                    def rectangle_area(a,b):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of a rectangle with a given width and height.\n                                                                                                    '''\n                                                                                                    import math\n                                                                                                    def circle_area(r):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of a circle with a given radius.\n                                                                                                    '''\n                                                                                                    import math\n                                                                                                    def rectangle_area(a,b):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of a rectangle with a given width and height.\n                                                                                                    '''\n                                                                                                    import math\n                                                                                                    def parallelogram_area(a,b):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of the largest parallelogram that can be inscribed in a rectangle with a given width and height.\n                                                                                                    '''\n                                                                                                    def trapezoid_area(a,b,c,d):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of the largest trapezoid that can be inscribed in a rectangle with a given width and height.\n                                                                                                    '''\n                                                                                                    def rectangle_area(a,b):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of a rectangle with a given width and height.\n                                                                                                    '''\n                                                                                                    import math\n                                                                                                    def circle_area(r):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of a circle with a given radius.\n                                                                                                    '''\n                                                                                                    import math\n                                                                                                    def rectangle_area(a,b):\n                                                                                                    '''\n                                                                                                    Write a python function to find the area of a rectangle with a given width and height.\n                                                                                            ",
        "num_ids": 28
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define constant pi\n    pi = 3.1415926535897931 \n    # Define the formula for the area of the largest triangle inscribed in a semicircle\n    area = pi * r * r\n    # Return the formula for the area of the largest triangle inscribed in a semicircle\n    return area\n    \nprint(triangle_area(5)) # Should print 50.0\nprint(triangle_area(1)) # Should print 0.0\nprint(triangle_area(42)) # Should print 1814.2831604958145\nprint(triangle_area(0)) # Should print 0.0\nprint(triangle_area(-42)) # Should print 0.",
        "num_ids": 160
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    PI = 3.14159\n    return PI*(r*r*r)\n",
        "num_ids": 22
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    import numpy\n    def area(side_a, side_b, side_c):\n        s = (side_a + side_b + side_c) / 2\n        return math.sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\n    radius = 2\n    print(radius)\n    area_1 = area(1, 1, 1)\n    area_2 = area(2, 2, 2)\n    area_3 = area(3, 3, 3)\n    triangle = max(area_1, area_2, area_3)\n    print(triangle)\n",
        "num_ids": 159
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def semi_circle_circumference(radius) :\n        '''\n        Write a python function to find the circumferece of a semicircle, when the radius is given.\n        '''\n        import math\n        return 2 * math.pi * radius\n    \n    def triangle_area(a,b,c) :\n        '''\n        Write a python function to find the area of a triangle when the three sides of the triangle are given.\n        '''\n        a = float(a)\n        b = float(b)\n        c = float(c)\n        s = (a + b + c) / 2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return area\n    \n    def area_triangle(a,b,c) :\n        '''\n        Write a python function to find the area of a triangle when the three sides of the triangle are given.\n        '''\n        a = float(a)\n        b = float(b)\n        c = float(c)\n        s = (a + b + c) / 2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return area\n",
        "num_ids": 69
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def is_integer(n):\n        return n - int(n) == 0\n    \n    def rectangle_area(w,h) :\n        return w*h\n    \n    def triangle_area(a,b,c):\n        s=(a+b+c)/2\n        return (s*(s-a)*(s-b)*(s-c))**0.5\n    \n    def test_triangle_area():\n        assert triangle_area(5,10) == 15\n        assert triangle_area(2,4) == 5\n        assert triangle_area(3,2) == 3\n        assert triangle_area(4,2) == 4\n        assert triangle_area(5,5) == 10\n        assert triangle_area(1,1) == 1\n        assert triangle_area(4,1) == 4\n        assert triangle_area(2,1) == 2\n        assert triangle_area(3,1) == 3\n        assert triangle_area(5,1) == 5\n        assert triangle_area(10,1) == 10\n    \n    print('Function triangle_area called')\n    print('Validating triangle_area')\n    test_triangle_area()\n    \n    from math import sqrt\n    \n    def triangle_area(a,b,c):\n        return 0.5*sqrt(a*b*c)\n    \n    def test_triangle_area():\n        assert triangle_area(5,10) == 15\n        assert triangle_area(2,4) == 5\n        assert triangle_area(3,2) == 3\n        assert triangle_area(4,2) == 4\n        assert triangle_area(5,5) == 10\n        assert triangle_area(1,1) == 1\n        assert triangle_area(4,1) == 4\n        assert triangle_area(2,1) == 2\n        assert triangle_area(3,1) == 3\n        assert triangle_area(5,1) == 5\n        assert triangle_area(10,1) == 10\n    \n    print('Function triangle_area called')\n    print('Validating triangle_area')\n    test_triangle_area()\n    \n    from math import sqrt\n    \n    def triangle_area(a,b,c):\n        return 0.5*sqrt(a*b*c)\n    \n    def test_triangle_area():\n        assert triangle_area(5,10) == 15\n        assert triangle_area(2,4) == 5\n        assert triangle_area(3,2) == 3\n        assert triangle_area(4,2) == 4\n        assert triangle_area(5,5) == 10\n        assert triangle_area(1,1) == 1\n        assert triangle_area(4,1) == 4\n        assert triangle_area(2,1) == 2\n        assert triangle_area(3,1) == 3\n        assert triangle_area(5,1) == 5\n        assert triangle_area(10,1) == 10\n    \n    print('Function triangle_area called')\n    print('Validating triangle_area')\n    test_triangle_area()\n    \n    def triangle_area(a,b,c):\n        return 0.5*sqrt(a*b*c)\n    \n    def test_triangle_area():\n        assert triangle_area(5,10) == 15\n        assert triangle_area(2,4) == 5\n        assert triangle_area(3,2) == 3\n        assert triangle_area(4,2) == 4\n        assert triangle_area(5,5) == 10\n        assert triangle_area(1,1) == 1\n        assert triangle_area(4,1) == 4\n        assert triangle_area(2,1) == 2\n        assert triangle_area(3,1) == 3\n        assert triangle_area(5,1) == 5\n        assert triangle_area(10,1) == 10\n    \n    print('Function triangle_area called')\n    print('Validating triangle_area')\n    test_triangle_area()\n    \n    def triangle_area(a,b,c):\n        return 0.5*sqrt(a*b*c)\n    \n    def test_triangle_area():\n        assert triangle_area(5,10) == 15\n        assert triangle_area(2,4) == 5\n        assert triangle_area(3,2) == 3\n        assert triangle_area(4,2) == 4\n        assert triangle_area(5,5) == 10\n        assert triangle_area(1,1) == 1\n        assert triangle_area(4,1) == 4\n        assert triangle_area(2,1) == 2\n        assert triangle_area(3,1) == 3\n        assert triangle_area(5,1) == 5\n        assert triangle_area(10,1) == 10\n    \n    print('Function triangle_area called')\n    print('Validating triangle_area')\n    test_triangle_area()\n    \n    def triangle_area(a,b,c):\n        return 0.5*sqrt(a*b*c)\n    \n    def test_triangle_area():\n        assert triangle_area(5,10) == 15\n        assert triangle_area(2,4) == 5\n        assert triangle_area(3,2) == 3\n        assert triangle_area(4,2) == 4\n        assert triangle_area(5,5) == 10\n        assert triangle_area(1,1) == 1\n        assert triangle_area(4,1) == 4\n        assert triangle_area(2,1) == 2\n        assert triangle_area(3,1) == 3\n        assert triangle_area(5,1) == 5\n        assert triangle_area(10,1) == 10\n    \n    print('Function triangle_area called')\n    print('Validating triangle_area')\n    test_triangle_area()\n    \n    def triangle_area(a,b,c):\n        return 0.5*sqrt(a*b*c)\n    \n    def test_triangle_area():\n        assert triangle_area(5,10) == 15\n        assert triangle_area(2,4) == 5\n        assert triangle_area(3,2) == 3\n        assert triangle_area(4,2) == 4\n        assert triangle_area(5,5) == 10\n        assert triangle_area(1,1) == 1\n        assert triangle_area(4,1) == 4\n        assert triangle_area(2,1) == 2\n        assert triangle_area(3,1) == 3\n        assert triangle_area(5,1) == 5\n        assert triangle_area(10,1) == 10\n    \n    print('Function triangle_area called')\n    print('Validating triangle_area')\n    test_triangle_area()\n    \n    def triangle_area(a,b,c):\n        return 0.5*sqrt(a*b*c)\n    \n    def test_triangle_area():\n        assert triangle_area(5,10) == 15\n        assert triangle_area(2,4) == 5\n        assert triangle_area(3,2) == 3\n        assert triangle_area(4,2) == 4\n        assert triangle_area(5,5) == 10\n        assert triangle_area(1,1) == 1\n        assert triangle_area(4,1) == 4\n        assert triangle_area(2,1) == 2\n        assert triangle_area(3,1) == 3\n        assert triangle_area(5,1) == 5\n        assert triangle_area(10,1) == 10\n    \n    print('Function triangle_area called')\n    print('Validating triangle_area')\n    test_triangle_area()\n    \n    def triangle_area(a,b,c):\n        return 0.5*sqrt(a*b*c)\n    \n    def test_triangle_area():\n        assert triangle_area(5,10) == 15\n        assert triangle_area(2,4) == 5\n        assert triangle_area(3,2) == 3\n        asser",
        "num_ids": 1900
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    if start < n:\n        if end is None:\n            return find_First_Missing(array,start + 1,n - 1)\n        elif start < end:\n            if array[start]!= start:\n                return find_First_Missing(array,start + 1,end)\n            else:\n                return find_First_Missing(array,start + 1,end)\n    else:\n        return start + 1\n",
        "num_ids": 110
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n",
        "num_ids": 18
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end == start:\n        return array[start]\n    if end < start:\n        return -1\n    middle = int((end + start)/2)\n    if array[middle] == middle:\n        return find_First_Missing(array,start,middle-1)\n    elif array[middle] > middle:\n        return find_First_Missing(array,start,middle-1)\n    else:\n        return find_First_Missing(array,middle+1,end)\n",
        "num_ids": 132
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if len(array)==0:\n        return None\n    elif start==end:\n        return start\n    elif start<end:\n        middle=int((start+end)/2)\n        if array[middle]==middle:\n            return find_First_Missing(array,start,middle)\n        else:\n            return find_First_Missing(array,middle+1,end)\n",
        "num_ids": 109
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end+1):\n        if array[i] < 0 or array[i] > end:\n            return i\n    return end + 1\n",
        "num_ids": 57
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n",
        "num_ids": 18
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end==0:\n        return 1\n    if array[start]==start+1:\n        return start+1\n    if end==1:\n        return 1\n    if array[start]>=array[end]:\n        return start+1\n    middle=int((start+end)/2)\n    if array[middle]>=array[start]:\n        if array[middle]<=array[end]:\n            return find_First_Missing(array,middle+1,end)\n        else:\n            return find_First_Missing(array,start,middle-1)\n    else:\n        if array[middle]>=array[end]:\n            return find_First_Missing(array,start,middle-1)\n        else:\n            return find_First_Missing(array,middle+1,end)\n",
        "num_ids": 207
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array) if not end else end\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1\n",
        "num_ids": 51
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    if end is None:\n        end = n\n    if start < end:\n        mid = int((start + end)/2)\n        if array[mid] == mid + 1:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid] == mid:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,start,mid-1)\n    else:\n        return mid + 1\n",
        "num_ids": 129
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # end is not required but default value will be used if it is not provided\n    if not end:\n        end = len(array)-1\n    # if start is negative then set it to end\n    if start < 0:\n        start = end+1\n    # if start and end are same then return start+1\n    if start == end:\n        return start+1\n    # if start is greater than end then return start\n    if start > end:\n        return start\n    # calculate the middle element\n    middle = (start + end) // 2\n    # base condition is if element is smaller than mid element then left of mid has to be greater than mid and\n    # if element is greater than mid element then right of mid has to be smaller than mid\n    if array[middle] > array[start]:\n        return find_First_Missing(array,start,middle-1)\n    elif array[middle] < array[start]:\n        return find_First_Missing(array,middle+1,end)\n    else:\n        return find_First_Missing(array,start+1,end)\n",
        "num_ids": 253
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.strip()\n    string = string.replace(' ', '%20')\n    return string\n",
        "num_ids": 27
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n",
        "num_ids": 19
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if string is None:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \nprint(replace_spaces('I am a student')) #I%20am%20a%20student\nprint(replace_spaces('This   is a test   of the  function     which     you  passed')) #This%20is%20a%20test%20of%20the%20function%20which%20you%20passed\n",
        "num_ids": 98
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n",
        "num_ids": 19
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_str = string.replace(' ', '%20')\n    return new_str\n",
        "num_ids": 23
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n",
        "num_ids": 67
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    for i in list:\n        if (i%2==0):\n            evenList.append(i)\n    return evenList\n",
        "num_ids": 39
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i%2==0:\n            even_numbers.append(i)\n    return even_numbers\nprint(Split([10, 20, 30, 40, 50, 60, 80, 90, 100]))\nprint('________________________________________________')\n",
        "num_ids": 74
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result =[]\n    for num in list:\n        if num%2==0:\n            result.append(num)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print(list)\n    evens = []\n    for i in list:\n        if i%2 == 0:\n            evens.append(i)\n    print(evens)\n    print()\n    return evens\n",
        "num_ids": 55
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    return even_list\n",
        "num_ids": 51
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Code here\n    even_numbers = []\n    for x in range(len(list)):\n        if x % 2 == 0:\n            even_numbers.append(list[x])\n    return even_numbers\n    \nif __name__ == \"__main__\":\n    # Test case 1\n    print(Split([1, 2, 3, 4]))\n    # Expected Output: [2, 4]\n",
        "num_ids": 102
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    print(\"Adjacents of coordinate:\", ele)\n    if(ele == (0, 0)):\n        sub.append((0, 1))\n        sub.append((0, -1))\n        sub.append((1, 0))\n        sub.append((-1, 0))\n        sub.append((1, 1))\n        sub.append((-1, -1))\n        sub.append((1, -1))\n        sub.append((-1, 1))\n    elif(ele == (0, 1)):\n        sub.append((0, 2))\n        sub.append((0, -2))\n        sub.append((1, 0))\n        sub.append((-1, 0))\n        sub.append((1, 2))\n        sub.append((-1, -2))\n        sub.append((1, -2))\n        sub.append((-1, 1))\n        sub.append((1, 1))\n    elif(ele == (0, -1)):\n        sub.append((0, -2))\n        sub.append((0, 2))\n        sub.append((1, 0))\n        sub.append((-1, 0))\n        sub.append((1, -2))\n        sub.append((-1, 2))\n        sub.append((1, 2))\n        sub.append((-1, -2))\n        sub.append((1, -2))\n    elif(ele == (1, 0)):\n        sub.append((2, 0))\n        sub.append((-2, 0))\n        sub.append((1, 1))\n        sub.append((-1, 1))\n        sub.append((1, -1))\n        sub.append((-1, -1))\n        sub.append((1, -1))\n        sub.append((-1, 2))\n        sub.append((1, 2))\n    elif(ele == (-1, 0)):\n        sub.append((-2, 0))\n        sub.append((-1, 1))\n        sub.append((1, 0))\n        sub.append((-1, -1))\n        sub.append((-1, -2))\n        sub.append((1, -2))\n        sub.append((1, -1))\n        sub.append((-1, -1))\n        sub.append((1, 2))\n        sub.append((-1, 2))\n    elif(ele == (1, 1)):\n        sub.append((2, 1))\n        sub.append((-2, 1))\n        sub.append((1, 2))\n        sub.append((-1, 2))\n        sub.append((1, -2))\n        sub.append((-1, -2))\n        sub.append((1, -2))\n        sub.append((-1, 1))\n        sub.append((1, 1))\n    elif(ele == (-1, 1)):\n        sub.append((-2, 1))\n        sub.append((-1, 2))\n        sub.append((1, 1))\n        sub.append((-1, -2))\n        sub.append((-1, -2))\n        sub.append((1, -2))\n        sub.append((1, -1))\n        sub.append((-1, -1))\n        sub.append((1, 1))\n    elif(ele == (1, -1)):\n        sub.append((2, -1))\n        sub.append((-2, -1))\n        sub.append((1, -2))\n        sub.append((-1, -2))\n        sub.append((1, -1))\n        sub.append((-1, 1))\n        sub.append((1, 1))\n        sub.append((-1, 0))\n        sub.append((1, 0))\n    elif(ele == (-1, -1)):\n        sub.append((-2, -1))\n        sub.append((-1, -2))\n        sub.append((1, -1))\n        sub.append((-1, 1))\n        sub.append((-1, 0))\n        sub.append((1, 0))\n        sub.append((-1, 2))\n        sub.append((1, 2))\n    elif(ele == (1, 2)):\n        sub.append((2, 2))\n        sub.append((-2, 2))\n        sub.append((1, -1))\n        sub.append((-1, -1))\n        sub.append((1, 0))\n        sub.append((-1, 0))\n        sub.append((1, -2))\n        sub.append((-1, -2))\n        sub.append((1, 1))\n        sub.append((-1, 1))\n        sub.append((1, 2))\n        sub.append((-1, 2))\n    elif(ele == (-1, 2)):\n        sub.append((-2, 2))\n        sub.append((-1, 1))\n        sub.append((1, 0))\n        sub.append((-1, 0))\n        sub.append((1, -1))\n        sub.append((-1, -1))\n        sub.append((1, -1))\n        sub.append((-1, 2))\n        sub.append((1, 2))\n        sub.append((-1, 1))\n        sub.append((1, 1))\n    elif(ele == (1, -2)):\n        sub.append((2, -2))\n        sub.append((-2, -2))\n        sub.append((1, -1))\n        sub.append((-1, -1))\n        sub.append((1, 0))\n        sub.append((-1, 0))\n        sub.append((1, -1))\n        sub.append((-1, 1))\n        sub.append((1, 1))\n        sub.append((-1, 2))\n        sub.append((1, 2))\n    elif(ele == (-1, -2)):\n        sub.append((-2, -2))\n        sub.append((-1, 1))\n        sub.append((1, 0))\n        sub.append((-1, 0))\n        sub.append((1, -1))\n        sub.append((-1, -1))\n        sub.append((1, -1))\n        sub.append((-1, 2))\n        sub.append((1, 2))\n        sub.append((-1, 1))\n        sub.append((1, 1))\n    elif(ele == (2, 0)):\n        sub.append((3, 0))\n        sub.append((-3, 0))\n        sub.append((2, 1))\n        sub.append((-2, 1))\n        sub.append((2, -1))\n        sub.append((-2, -1))\n        sub.append((2, -1))\n        sub.append((-2, 2))\n        sub.append((2, 2))\n        sub.append((-2, 1))\n        sub.append((2, 1))\n    elif(ele == (-2, 0)):\n        sub.append((-3, 0))\n        sub.append((-2, 1))\n        sub.append((-1, 0))\n        sub.append((1, 0))\n        sub.append((-1, -1))\n        sub.append((1, -1))\n        sub.append((-1, -1))\n        sub.append((1, -2))\n        sub.append((-1, 2))\n        sub.append((1, 2))\n        sub.append((-1, 1))\n        sub.append((1, 1))\n    elif(ele == (2, 1)):\n        sub.append((3, 1))\n        sub.append((-3, 1))\n        sub.append((2, 2))\n        sub.append((-2, 2))\n        sub.append((2, -2))\n        sub.append((-2, -2))\n        sub.append((2, -2))\n        sub.append((-2, 1))\n        sub.append((2, 1))\n    elif(ele == (-2, 1)):\n        sub.append((-3, 1))\n        sub.append((-2, 2))\n        sub.append((-1, 1))\n        sub.append((1, 1))\n        sub.append((-1, -1))\n        sub.append((1, -1))\n    ",
        "num_ids": 2013
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1), (ele[0]-1, ele[1]-1), (ele[0]-1, ele[1]+1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]+1)]\n",
        "num_ids": 101
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele[0] + 1)\n    sub.append(ele[0] - 1)\n    sub.append(ele[1] + 1)\n    sub.append(ele[1] - 1)\n    sub.append(ele[0] + 1)\n    sub.append(ele[0] - 1)\n    sub.append(ele[1] + 1)\n    sub.append(ele[1] - 1)\n    sub.append(ele[0] + 1)\n    sub.append(ele[0] - 1)\n    sub.append(ele[1] - 1)\n    sub.append(ele[1] + 1)\n    return sub\n",
        "num_ids": 162
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub == []:\n        return result\n    else:\n        result = [(x+1, y) for (x, y) in result if x+1 in range(10) and y in range(10) and (x+1, y) not in sub]\n        result = [(x-1, y) for (x, y) in result if x-1 in range(10) and y in range(10) and (x-1, y) not in sub]\n        result = [(x, y+1) for (x, y) in result if x in range(10) and y+1 in range(10) and (x, y+1) not in sub]\n        result = [(x, y-1) for (x, y) in result if x in range(10) and y-1 in range(10) and (x, y-1) not in sub]\n        result = [(x, y) for (x, y) in result if x in range(10) and y in range(10) and (x, y) not in sub]\n        return result\n",
        "num_ids": 289
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if (ele[0]+1, ele[1]) in board:\n        sub.append((ele[0]+1, ele[1]))\n    if (ele[0], ele[1]+1) in board:\n        sub.append((ele[0], ele[1]+1))\n    if (ele[0]-1, ele[1]) in board:\n        sub.append((ele[0]-1, ele[1]))\n    if (ele[0], ele[1]-1) in board:\n        sub.append((ele[0], ele[1]-1))\n    return sub\n",
        "num_ids": 140
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0:\n        sub.append((ele[0]-1, ele[1]))\n    if ele[1] > 0:\n        sub.append((ele[0], ele[1]-1))\n    if ele[0] < len(grid) - 1:\n        sub.append((ele[0]+1, ele[1]))\n    if ele[1] < len(grid[0]) - 1:\n        sub.append((ele[0], ele[1]+1))\n    return sub\n",
        "num_ids": 124
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    sub.append((x+1, y)) \n    sub.append((x-1, y)) \n    sub.append((x, y+1)) \n    sub.append((x, y-1)) \n    sub.append((x-1, y+1)) \n    sub.append((x+1, y-1)) \n    sub.append((x-1, y-1)) \n    sub.append((x+1, y+1))\n    return sub\n",
        "num_ids": 125
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    x += 1\n    y += 1\n    if x < 0 or y < 0:\n        return sub\n    if x >= N or y >= N:\n        return sub\n    return [(x, y)] + adjac((x, y))\n",
        "num_ids": 65
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #print(sub)\n    sub.append(ele)\n    #print(sub)\n    if ele == (0,0):\n        return \n    if ele == (0,1):\n        return sub\n    if ele == (0,-1):\n        return sub\n    if ele == (1,0):\n        return sub\n    if ele == (-1,0):\n        return sub\n    if ele == (0,2):\n        return sub\n    if ele == (0,-2):\n        return sub\n    if ele == (2,0):\n        return sub\n    if ele == (-2,0):\n        return sub\n    if ele == (1,1):\n        return sub\n    if ele == (-1,-1):\n        return sub\n    if ele == (1,-1):\n        return sub\n    if ele == (-1,1):\n        return sub\n    if ele == (1,2):\n        return sub\n    if ele == (-1,2):\n        return sub\n    if ele == (2,2):\n        return sub\n    if ele == (-2,2):\n        return sub\n    if ele == (1,-2):\n        return sub\n    if ele == (-1,-2):\n        return sub\n    if ele == (2,-2):\n        return sub\n    if ele == (-2,-2):\n        return sub\n    if ele == (0,3):\n        return sub\n    if ele == (0,-3):\n        return sub\n    if ele == (3,0):\n        return sub\n    if ele == (-3,0):\n        return sub\n    if ele == (0,4):\n        return sub\n    if ele == (0,-4):\n        return sub\n    if ele == (4,0):\n        return sub\n    if ele == (-4,0):\n        return sub\n    if ele == (1,3):\n        return sub\n    if ele == (-1,3):\n        return sub\n    if ele == (1,-3):\n        return sub\n    if ele == (-1,-3):\n        return sub\n    if ele == (3,1):\n        return sub\n    if ele == (-3,1):\n        return sub\n    if ele == (3,-1):\n        return sub\n    if ele == (-3,-1):\n        return sub\n    if ele == (1,4):\n        return sub\n    if ele == (-1,4):\n        return sub\n    if ele == (1,-4):\n        return sub\n    if ele == (-1,-4):\n        return sub\n    if ele == (4,1):\n        return sub\n    if ele == (-4,1):\n        return sub\n    if ele == (4,-1):\n        return sub\n    if ele == (-4,-1):\n        return sub\n    if ele == (3,2):\n        return sub\n    if ele == (-3,2):\n        return sub\n    if ele == (3,-2):\n        return sub\n    if ele == (-3,-2):\n        return sub\n    if ele == (2,3):\n        return sub\n    if ele == (-2,3):\n        return sub\n    if ele == (2,-3):\n        return sub\n    if ele == (-2,-3):\n        return sub\n    if ele == (3,4):\n        return sub\n    if ele == (-3,4):\n        return sub\n    if ele == (3,-4):\n        return sub\n    if ele == (-3,-4):\n        return sub\n    if ele == (4,3):\n        return sub\n    if ele == (-4,3):\n        return sub\n    if ele == (4,-3):\n        return sub\n    if ele == (-4,-3):\n        return sub\n    if ele == (3,1):\n        return sub\n    if ele == (-3,1):\n        return sub\n    if ele == (3,-1):\n        return sub\n    if ele == (-3,-1):\n        return sub\n    if ele == (1,4):\n        return sub\n    if ele == (-1,4):\n        return sub\n    if ele == (1,-4):\n        return sub\n    if ele == (-1,-4):\n        return sub\n    if ele == (4,1):\n        return sub\n    if ele == (-4,1):\n        return sub\n    if ele == (4,-1):\n        return sub\n    if ele == (-4,-1):\n        return sub\n    if ele == (1,2):\n        return sub\n    if ele == (-1,2):\n        return sub\n    if ele == (1,-2):\n        return sub\n    if ele == (-1,-2):\n        return sub\n    if ele == (2,1):\n        return sub\n    if ele == (-2,1):\n        return sub\n    if ele == (2,-1):\n        return sub\n    if ele == (-2,-1):\n        return sub\n    if ele == (1,3):\n        return sub\n    if ele == (-1,3):\n        return sub\n    if ele == (1,-3):\n        return sub\n    if ele == (-1,-3):\n        return sub\n    if ele == (3,1):\n        return sub\n    if ele == (-3,1):\n        return sub\n    if ele == (3,-1):\n        return sub\n    if ele == (-3,-1):\n        return sub\n    if ele == (1,4):\n        return sub\n    if ele == (-1,4):\n        return sub\n    if ele == (1,-4):\n        return sub\n    if ele == (-1,-4):\n        return sub\n    if ele == (4,1):\n        return sub\n    if ele == (-4,1):\n        return sub\n    if ele == (4,-1):\n        return sub\n    if ele == (-4,-1):\n        return sub\n    if ele == (3,0):\n        return sub\n    if ele == (-3,0):\n        return sub\n    if ele == (3,-1):\n        return sub\n    if ele == (-3,-1):\n        return sub\n    if ele == (1,0):\n        return sub\n    if ele == (-1,0):\n        return sub\n    if ele == (2,0):\n        return sub\n    if ele == (-2,0):\n        return sub\n    if ele == (1,-1):\n        return sub\n    if ele == (-1,-1):\n        return sub\n    if ele == (1,1):\n        return sub\n    if ele == (-1,1):\n        return sub\n    if ele == (2,1):\n        return sub\n    if ele == (-2,1):\n        return sub\n    if ele == (1,2):\n        return sub\n    if ele == (-1,2):\n        return sub\n    if ele == (2,2):\n        return sub\n    if ele == (-2,2):\n        return sub\n    if ele == (1,-1):\n        return sub\n    if ele == (-1,-1):\n        return sub\n    if ele == (2,-1):\n        return sub\n    if ele == (-2,-1):\n        return sub\n    if ele == (1,-2):\n        return sub\n    if ele == (-1,-2):\n        return sub\n    if ele == (2,-2):\n        return sub\n    if ele == (-2,-2):\n        return sub\n    if ele == (2,1):\n        return sub\n    if ele == (-2,1):\n        return sub\n    if ele == (2,-1):\n        return sub\n    if ele == (-2,-1):\n        return sub\n    if ele == (1,3):\n        return sub\n    if ele == (-1,3):\n        return sub\n    if ele == (1,-3):\n        return sub\n    if ele == (-1,-3):\n        return sub\n    if ele == (3,1):\n        return sub\n    if ele == (-3,1):\n        return sub\n    if ele == (3,-1):\n        return sub\n    if ele == (-3,-1):\n        return sub\n    if ele == (1,4):\n        return sub\n    if ele == (-1,4):\n        return sub\n    if ele == (1,-4):\n        return sub\n    if ele == (-1,-4):\n        return sub\n    if ele == (4,1):\n        return sub\n    if ele == (-4,1):\n        return sub\n    if ele == (4,-1):\n        return sub\n",
        "num_ids": 2012
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n",
        "num_ids": 53
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'+text.replace(' ', '_')+'_'\n",
        "num_ids": 21
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.strip()\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "num_ids": 27
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 12
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 12
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    # Creating a space character\n    space_character = \" \"\n    \n    # Creating a non space character\n    non_space_character = \"_\"\n    \n    # Converting spaces into non spaces\n    text_without_spaces = text.replace(space_character, non_space_character)\n    \n    # Converting non spaces into spaces\n    text_with_spaces = text_without_spaces.replace(non_space_character, space_character)\n    \n    return text_with_spaces\n",
        "num_ids": 123
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('_',' ')\n    return text\n    \n",
        "num_ids": 32
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 21
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_string = ''\n    text = text.split(' ')\n    for word in text:\n        new_string += word.replace(' ', '_')\n    return new_string\nprint(replace_spaces(\"Hello world!\"))\n",
        "num_ids": 58
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    n = len(num_list)\n    while j < n:\n        if num_list[j] == 0:\n            i += 1\n        j += 1\n    for i in range(i,n):\n        num_list[i], num_list[i-i] = num_list[i-i], num_list[i]\n    return num_list\n    \ndef move_zeros(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    n = len(num_list)\n    while j < n:\n        if num_list[j] == 0:\n            i += 1\n        j += 1\n    for i in range(i,n):\n        num_list[i], num_list[i-i] = num_list[i-i], num_list[i]\n    return num_list\n    \ndef find_peak(num_list):\n    '''\n    Write a python function to find the peak element in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    i = 0\n    j = len(num_list) - 1\n    while i < j:\n        mid = (i + j)//2\n        if num_list[mid] > num_list[mid + 1]:\n            j = mid\n        elif num_list[mid] < num_list[mid + 1]:\n            i = mid + 1\n        else:\n            return num_list[mid]\n    return num_list[i]\n    \ndef find_peak_binary(num_list):\n    '''\n    Write a python function to find the peak element in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    left = 0\n    right = len(num_list) - 1\n    while left < right:\n        mid = (left + right)//2\n        if num_list[mid] < num_list[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return num_list[left]\n    \ndef find_peak_hash(num_list):\n    '''\n    Write a python function to find the peak element in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    if len(num_list) == 1:\n        return num_list[0]\n    hash_map = {}\n    for i in num_list:\n        if i not in hash_map:\n            hash_map[i] = 1\n        else:\n            hash_map[i] += 1\n    for key,value in hash_map.items():\n        if value == max(hash_map.values()):\n            return key\n    return None\n    \ndef max_sub_array(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return 0\n    max_sub_sum = 0\n    for i in range(len(num_list)):\n        if max_sub_sum < num_list[i]:\n            max_sub_sum = num_list[i]\n        if max_sub_sum < 0:\n            max_sub_sum = 0\n    for i in range(len(num_list)):\n        if max_sub_sum > 0:\n            if max_sub_sum < num_list[i]:\n                max_sub_sum = num_list[i]\n        elif max_sub_sum < 0:\n            max_sub_sum = 0\n    return max_sub_sum\n    \ndef max_sub_array_rec(num_list,i,j):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if i == j:\n        return num_list[i]\n    mid = (i + j)//2\n    return max(max_sub_array_rec(num_list,i,mid),max_sub_array_rec(num_list,mid+1,j))\n    \ndef max_sub_array_const(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = num_list[0]\n    curr_max = num_list[0]\n    for i in range(1,len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = num_list[0]\n    curr_max = num_list[0]\n    for i in range(1,len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = num_list[0]\n    curr_max = num_list[0]\n    for i in range(1,len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sub_sum(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = 0\n    curr_max = 0\n    for i in range(len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sum(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = 0\n    curr_max = 0\n    for i in range(len(num_list)):\n        curr_max = curr_max + num_list[i]\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sum_trick(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = 0\n    curr_max = 0\n    for i in range(len(num_list)):\n        curr_max = curr_max + num_list[i]\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sum_trick_2(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return num_list\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            break\n    for j in range(len(num_list) - i - 1):\n        num_list[j] = num_list[j + 1]\n    num_list[-1] = 0\n    return num_list\n",
        "num_ids": 102
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    index_start = 0\n    index_end = len(num_list) - 1\n    while index_start <= index_end:\n        if num_list[index_start] == 0:\n            num_list.pop(index_start)\n            num_list.append(0)\n            count += 1\n        index_start += 1\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j += 1\n        i += 1\n",
        "num_ids": 73
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list.append(num_list[i])\n            del num_list[i]\n        else:\n            i += 1\n",
        "num_ids": 65
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # for x in num_list:\n    #     if x == 0:\n    #         num_list.remove(0)\n    #         num_list.append(0)\n    # return num_list\n    nums = []\n    for num in num_list:\n        if num!= 0:\n            nums.append(num)\n",
        "num_ids": 84
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    lst = num_list\n    list_length = len(lst)\n    \n    for i in range(list_length):\n        if lst[i] == 0:\n            lst.append(lst.pop(i))\n            list_length -= 1\n",
        "num_ids": 66
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # count = 0\n    # for i in num_list:\n    #     if i == 0:\n    #         count += 1\n    #     else:\n    #         count = 0\n    # for i in range(count):\n    #     num_list.append(0)\n    # return num_list\n",
        "num_ids": 76
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    new_num = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            new_num.append(num_list[i])\n            count = count + 1\n        if num_list[i] == 0:\n            new_num.append(0)\n    num_list = new_num\n    return num_list\n",
        "num_ids": 99
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    lst = num_list\n    for i in range(len(lst)):\n        if lst[i]!= 0:\n            break\n    for j in range(len(lst)-1,i,-1):\n        lst[j] = lst[j-1]\n    lst[i] = 0\n    return lst\n",
        "num_ids": 85
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0 : return 0\n    if n == 1 : return arr[0]\n",
        "num_ids": 23
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if arr == None or n == None :\n        return -1\n    else:\n        arr.sort()\n        a = 0\n        b = 1\n        while b < n :\n            a = a ^ arr[b]\n            b += 1\n        return a\n",
        "num_ids": 64
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    #print(arr)\n    #print(n)\n    total = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            total = total + (arr[i] ^ arr[j])\n    return total\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2003
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s=0\n    for i in range(0,n-1) :\n        s=s+arr[i]^arr[i+1]\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_Sum = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            xor_Sum += arr[i] ^ arr[j]\n    return xor_Sum\n    \ndef pair_xor_Sum_in_list_3_numbers(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_Sum = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            for k in range(j+1,n) :\n                xor_Sum += arr[i] ^ arr[j] ^ arr[k]\n    return xor_Sum\n    \ndef is_sum_in_list_of_N_numbers(arr,n) : \n    '''\n    Write a python function to check if a given array contains the sum of any subset of n numbers.\n    '''\n    if pair_xor_Sum(arr,n) == 0 :\n        return True\n    else :\n        return False\n    \ndef is_sum_in_list_of_N_numbers_3_numbers(arr,n) : \n    '''\n    Write a python function to check if a given array contains the sum of any subset of n numbers.\n    '''\n    if pair_xor_Sum_in_list_3_numbers(arr,n) == 0 :\n        return True\n    else :\n        return False\n        \ndef next_greater_element(arr,n) : \n    '''\n    Write a python function to find the next greater element (or next smaller element if given array is decreasing) in an array in O(n) time and O(1) space.\n    '''\n    i = 0\n    while i < n and arr[i] <= arr[i+1] :\n        i += 1\n    if i >= n :\n        return -1\n    while arr[i] < arr[i+1] :\n        i += 1\n    return arr[i]\n    \ndef next_greater_element_in_array_with_length(arr,n) : \n    '''\n    Write a python function to find the next greater element (or next smaller element if given array is decreasing) in an array in O(n) time and O(1) space.\n    '''\n    if n == 0 :\n        return -1\n    i = 0\n    while i < n :\n        if arr[i] <= arr[i+1] :\n            i += 1\n        else :\n            return arr[i]\n    return -1\n    \ndef next_greater_element_in_array(arr,n) : \n    '''\n    Write a python function to find the next greater element (or next smaller element if given array is decreasing) in an array in O(n) time and O(1) space.\n    '''\n    if n == 0 :\n        return -1\n    i = 0\n    while i < n :\n        if arr[i] < arr[i+1] :\n            return arr[i]\n        else :\n            i += 1\n    return -1\n    \ndef next_greater_element_in_array_with_length(arr,n) : \n    '''\n    Write a python function to find the next greater element (or next smaller element if given array is decreasing) in an array in O(n) time and O(1) space.\n    '''\n    if n == 0 :\n        return -1\n    i = 0\n    while i < n :\n        if arr[i] < arr[i+1] :\n            return arr[i]\n        else :\n            i += 1\n    return -1\n    \ndef maximum_sub_array(arr,n) : \n    '''\n    Write a python function to find the maximum sum subarray of size k.\n    '''\n    k = 0\n    curr_sum = 0\n    max_sum = 0\n    for i in range(0,n) :\n        curr_sum += arr[i]\n        if i == 0 :\n            max_sum = curr_sum\n        else :\n            if curr_sum <= 0 :\n                curr_sum = 0\n            if curr_sum > max_sum :\n                max_sum = curr_sum\n                k = 1\n    print(max_sum,k)\n    if k == 0 :\n        return -1\n    return max_sum\n    \ndef maximum_sub_array_1(arr,n) : \n    '''\n    Write a python function to find the maximum sum subarray of size k.\n    '''\n    if n == 0 :\n        return -1\n    curr_sum = arr[0]\n    k = 1\n    max_sum = curr_sum\n    for i in range(1,n) :\n        curr_sum += arr[i]\n        if i == 0 :\n            max_sum = curr_sum\n        else :\n            if curr_sum <= 0 :\n                curr_sum = 0\n            if curr_sum > max_sum :\n                max_sum = curr_sum\n                k = 1\n    print(max_sum,k)\n    return max_sum\n    \ndef largest_sum_in_sliding_window(arr,n) : \n    '''\n    Write a python function to find the maximum sum subarray of size k.\n    '''\n    k = 0\n    curr_sum = 0\n    max_sum = 0\n    for i in range(0,n) :\n        curr_sum += arr[i]\n        if i == 0 :\n            max_sum = curr_sum\n        else :\n            if curr_sum <= 0 :\n                curr_sum = 0\n            if curr_sum > max_sum :\n                max_sum = curr_sum\n                k = 1\n    print(max_sum,k)\n    if k == 0 :\n        return -1\n    return max_sum\n    \ndef largest_sum_in_sliding_window_1(arr,n) : \n    '''\n    Write a python function to find the maximum sum subarray of size k.\n    '''\n    if n == 0 :\n        return -1\n    curr_sum = arr[0]\n    max_sum = curr_sum\n    for i in range(1,n) :\n        curr_sum += arr[i]\n        if curr_sum <= 0 :\n            curr_sum = 0\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n    print(max_sum)\n    return max_sum\n    \ndef max_sum_contiguous_subarray(arr,n) : \n    '''\n    Write a python function to find the maximum sum subarray of size k.\n    '''\n    max_sum = 0\n    for i in range(0,n) :\n        if arr[i] > max_sum :\n            max_sum = arr[i]\n    for i in range(0,n) :\n        if arr[i] <= max_sum :\n            max_sum = 0\n    return max_sum\n    \ndef max_sum_contiguous_subarray_1(arr,n) : \n    '''\n    Write a python function to find the maximum sum subarray of size k.\n    '''\n    if n == 0 :\n        return -1\n    max_sum = arr[0]\n    for i in range(1,n) :\n        if arr[i] > max_sum :\n            max_sum = arr[i]\n    for i in range(1,n) :\n        if arr[i] <= max_sum :\n            max_sum = 0\n    return max_sum\n    \ndef max_sum_contiguous_subarray_2(arr,n) : \n    '''\n    Write a python function to find the maximum sum subarray of size k.\n    '''\n    if n == 0 :\n        return -1\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    for i in range(1,n) :\n        curr_sum += arr[i]\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n        if curr_sum <= 0 :\n            cur",
        "num_ids": 92
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor=0\n    i=0\n    while i < n-1:\n        sum_xor += arr[i] ^ arr[i+1]\n        i += 2\n    return sum_xor\n",
        "num_ids": 54
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor=0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = xor ^ (arr[i] ^ arr[j])\n    return xor\n    \n    \ndef pair_xor_Sum_rec(arr,n): \n    if n <= 1: \n        return 0\n    else: \n        return (arr[0] ^ arr[1]) + pair_xor_Sum_rec(arr,n-1)\n    \n        \ndef pair_xor_Sum_fast(arr, n):\n    arr.sort()\n    return sum(arr[0] ^ arr[n-1]) \n    \n",
        "num_ids": 163
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    t = 0\n    for i in range(0, n) : \n        for j in range(0, n) : \n            t = t ^ (arr[i] ^ arr[j]) \n    return t \n    \n",
        "num_ids": 57
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_ = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            sum_ += arr[i] ^ arr[j]\n    return sum_ \n",
        "num_ids": 56
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # create a min-heap\n    # NOTE: when creating a min-heap, we can use the reverse=True\n    # option to flip the sign of the numbers\n    # e.g. 5, 4, 3, 2, 1\n    # 5, 4, 3, 2, 1\n    # 5, 4, 3, 2, 1\n    # 5, 4, 3, 2, 1\n    # 5, 4, 3, 2, 1\n    # 5, 4, 3, 2, 1\n    # 5, -4, -3, -2, -1\n    # 5, -4, -3, -2, -1\n    # 5, -4, -3, -2, -1\n    # 5, -4, -3, -2, -1\n    # 5, -4, -3, -2, -1\n    min_heap = []\n    for x in iterable:\n        hq.heappush(min_heap, (-x, x))\n    \n    # create another list\n    # NOTE: the min-heap will always be left of the heap\n    # the min_heap is always left of the heap\n    # the min_heap is always left of the heap\n    result = []\n    for i in range(n):\n        # extract the smallest value from the min-heap\n        # we want the smallest value from the heap\n        # we need to reverse the sign because the min-heap is\n        # always left of the heap\n        result.append(hq.heappop(min_heap)[1])\n        # extract and remove the smallest item\n        # from the heap\n        # we don't need to reverse the sign because\n        # we are still left of the heap\n        hq.heappop(min_heap)\n    return result\n",
        "num_ids": 432
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return sorted(iterable)\n",
        "num_ids": 22
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        h.append(i)\n    for i in range(len(h)):\n        hq.heapify(h)\n        #print(h)\n        for i in range(len(h)):\n            print(h.pop(), end=' ')\n",
        "num_ids": 77
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    res = []\n    for i in iterable:\n        hq.heappush(h,i)\n    while len(h)>0:\n        res.append(hq.heappop(h))\n    return res\n",
        "num_ids": 62
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    list_length = len(iterable)\n    hq.heapify(iterable)\n    result = []\n    for i in range(0, list_length):\n        result.append(hq.heappop(iterable))\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    print(h)\n    s = []\n    while len(h) > 0:\n        s.append(hq.heappop(h))\n    return s\n",
        "num_ids": 68
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    result = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    for i in range(len(heap)):\n        result.append(hq.heappop(heap))\n    return result\n",
        "num_ids": 68
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Write your code here\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return [x for x in h]\n",
        "num_ids": 45
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    res = []\n    h = []\n    for i in iterable:\n        h.append(i)\n    heapq.heapify(h)\n    for _ in range(len(h)):\n        res.append(heapq.heappop(h))\n    return res\n",
        "num_ids": 72
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    s = set()\n    for i in iterable:\n        if i not in s:\n            hq.heappush(heap,i)\n            s.add(i)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "num_ids": 77
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        print(\"No Profit and Loss\")\n    elif actual_cost>sale_amount:\n        print(\"Profit\")\n    else:\n        print(\"Loss\")\n",
        "num_ids": 52
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    no_profit_amount = actual_cost - sale_amount\n    no_loss_amount = sale_amount - actual_cost\n    if no_profit_amount == no_loss_amount:\n        return 'There is no profit and loss in the sale'\n    else:\n        return 'There is profit and loss'\n        \n        \ndef tax_calculation(sale_amount,rate):\n    '''\n    Write a function to calculate the amount of tax due to the tax rate.\n    '''\n    tax_rate = rate/100\n    tax_calculation = sale_amount * tax_rate\n    return tax_calculation\n",
        "num_ids": 32
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('No Profit and No Loss')\n    else:\n        print('Profit and Loss')\n",
        "num_ids": 36
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_cost = actual_cost + sale_amount\n    if total_cost > 0:\n        return \"profit and loss\"\n    else:\n        return \"no profit and loss\"\n",
        "num_ids": 45
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 29
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost==sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost-sale_amount\n    loss=sale_amount-actual_cost\n    if profit==loss==0:\n        print(\"No Profit No Loss\")\n    elif profit>0 and loss<0:\n        print(\"Loss Only\")\n    elif profit<0 and loss>0:\n        print(\"Profit Only\")\n    elif profit<0 and loss<0:\n        print(\"Loss and Profit\")\n",
        "num_ids": 103
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    if actual_cost < sale_amount:\n        return False\n    return noprofit_noloss(actual_cost - sale_amount,sale_amount)\n",
        "num_ids": 54
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<actual_cost:\n        print(\"loss\")\n    elif actual_cost>sale_amount:\n        print(\"profit\")\n    else:\n        print(\"no profit\")\nnoprofit_noloss(100,40)\nnoprofit_noloss(20,10)\nnoprofit_noloss(15,8)\nnoprofit_noloss(20,20)\nnoprofit_noloss(15,25)\nnoprofit_noloss(25,50)\nnoprofit_noloss(20,75)\nnoprofit_noloss(15,100)\nnoprofit_noloss(25,150)\nnoprofit_noloss(15,150)\nnoprofit_noloss(25,150)\nnoprofit_noloss(25,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125,150)\nnoprofit_noloss(50,150)\nnoprofit_noloss(75,150)\nnoprofit_noloss(100,150)\nnoprofit_noloss(125",
        "num_ids": 2004
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    elif actual_cost <= 0:\n        return False\n    else:\n        return profit(actual_cost,sale_amount)\n",
        "num_ids": 46
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    '''\n    v = float(input('Enter the wind velocity in km/h: '))\n    t = float(input('Enter the temperature in celsius: '))\n    '''\n    v = v*(1.61*math.exp(-0.55*t*(v**0.16)))\n    return v\n    \nprint(wind_chill(10,20))\n",
        "num_ids": 48
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_in_m_per_s = v*1000\n    air_speed_in_kph = 5.670e-8*v_in_m_per_s**2\n    air_speed_in_m_per_s = air_speed_in_kph/3.6\n    \n    t_in_c = t + 273.15\n    air_temp_in_c = 30.0 + (t_in_c/2.0)\n    wind_chill_in_c = 35.74 + (0.6215*air_temp_in_c) - (35.75*(air_speed_in_m_per_s**0.16))\n    wind_chill_in_f = wind_chill_in_c*(9.0/5.0) + 32.0\n    return int(round(wind_chill_in_f))\n    \ndef day_length(hour,min,sec):\n    '''\n    Write a function to return the number of hours in the day given the hour, minutes and seconds in a 24-hour clock.\n    '''\n    hh = hour + (min/60) + (sec/3600)\n    return math.floor(hh)\n    \ndef is_leap_year(year):\n    '''\n    Write a function to return true if the given year is a leap year.\n    '''\n    if(year%4 == 0):\n        if(year%100 == 0):\n            if(year%400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef test_is_leap_year():\n    '''\n    Write a unit test for is_leap_year()\n    '''\n    assert is_leap_year(2001) == True, \"February not a leap year\"\n    assert is_leap_year(2000) == False, \"February is leap year\"\n    assert is_leap_year(2012) == True, \"2012 is a leap year\"\n    assert is_leap_year(1900) == False, \"1900 is not a leap year\"\n    assert is_leap_year(2020) == True, \"2020 is a leap year\"\n    assert is_leap_year(2021) == False, \"2021 is not a leap year\"\n    print(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc\ud558\uc600\uc2b5\ub2c8\ub2e4.\")\n    \ndef is_prime(n):\n    '''\n    Write a function is_prime() that takes an integer and returns True if it is a prime number, and False otherwise.\n    '''\n    if(n <= 1):\n        return False\n    elif(n <= 3):\n        return True\n    elif(n%2 == 0):\n        return False\n    elif(n%3 == 0):\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n))+1, 2):\n            if(n%i == 0):\n                return False\n        return True\n    \ndef test_is_prime():\n    '''\n    Write a unit test for is_prime()\n    '''\n    assert is_prime(2) == True, \"2 is prime\"\n    assert is_prime(3) == True, \"3 is prime\"\n    assert is_prime(5) == True, \"5 is prime\"\n    assert is_prime(11) == True, \"11 is prime\"\n    assert is_prime(13) == False, \"13 is not prime\"\n    assert is_prime(20) == False, \"20 is not prime\"\n    assert is_prime(26) == True, \"26 is prime\"\n    assert is_prime(43) == False, \"43 is not prime\"\n    assert is_prime(52) == False, \"52 is not prime\"\n    assert is_prime(57) == True, \"57 is prime\"\n    assert is_prime(61) == False, \"61 is not prime\"\n    print(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc\ud558\uc600\uc2b5\ub2c8\ub2e4.\")\n    \ndef is_prime_v2(n):\n    '''\n    Write a function is_prime_v2() that takes an integer and returns True if it is a prime number, and False otherwise.\n    '''\n    if(n <= 1):\n        return False\n    elif(n <= 3):\n        return True\n    elif(n%2 == 0):\n        return False\n    elif(n%3 == 0):\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n))+1, 2):\n            if(n%i == 0):\n                return False\n        return True\n    \ndef test_is_prime_v2():\n    '''\n    Write a unit test for is_prime_v2()\n    '''\n    assert is_prime_v2(2) == True, \"2 is prime\"\n    assert is_prime_v2(3) == True, \"3 is prime\"\n    assert is_prime_v2(5) == True, \"5 is prime\"\n    assert is_prime_v2(11) == True, \"11 is prime\"\n    assert is_prime_v2(13) == False, \"13 is not prime\"\n    assert is_prime_v2(20) == False, \"20 is not prime\"\n    assert is_prime_v2(26) == True, \"26 is prime\"\n    assert is_prime_v2(43) == False, \"43 is not prime\"\n    assert is_prime_v2(52) == False, \"52 is not prime\"\n    assert is_prime_v2(57) == True, \"57 is prime\"\n    assert is_prime_v2(61) == False, \"61 is not prime\"\n    print(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc\ud558\uc600\uc2b5\ub2c8\ub2e4.\")\n    \ndef is_prime_v3(n):\n    '''\n    Write a function is_prime_v3() that takes an integer and returns True if it is a prime number, and False otherwise.\n    '''\n    if(n <= 1):\n        return False\n    elif(n <= 3):\n        return True\n    elif(n%2 == 0):\n        return False\n    elif(n%3 == 0):\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n))+1, 2):\n            if(n%i == 0):\n                return False\n        return True\n    \ndef test_is_prime_v3():\n    '''\n    Write a unit test for is_prime_v3()\n    '''\n    assert is_prime_v3(2) == True, \"2 is prime\"\n    assert is_prime_v3(3) == True, \"3 is prime\"\n    assert is_prime_v3(5) == True, \"5 is prime\"\n    assert is_prime_v3(11) == True, \"11 is prime\"\n    assert is_prime_v3(13) == False, \"13 is not prime\"\n    assert is_prime_v3(20) == False, \"20 is not prime\"\n    assert is_prime_v3(26) == True, \"26 is prime\"\n    assert is_prime_v3(43) == False, \"43 is not prime\"\n    assert is_prime_v3(52) == False, \"52 is not prime\"\n    assert is_prime_v3(57) == True, \"57 is prime\"\n    assert is_prime_v3(61) == False, \"61 is not prime\"\n    print(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc\ud558\uc600\uc2b5\ub2c8\ub2e4.\")\n    \ndef next_prime(n):\n    '''\n    Write a function next_prime() that takes an integer and returns the next prime number after the given one.\n    '''\n    if(n <= 1):\n        return 2\n    else:\n        return next_prime(n-1) + 1\n    \ndef test_next_prime():\n    '''\n    Write a unit test for next_prime()\n    '''\n    assert next_prime(1) == 2, \"1 is the only prime\"\n    asser",
        "num_ids": 23
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.5 * (1.7 + 0.6215 * t)\n    wci = c * (v ** 0.16)\n    return round(wci)\n",
        "num_ids": 44
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temp = t\n",
        "num_ids": 14
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    if v <=.1:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16\n    elif v <=.5:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16 - 7.37*v**0.16\n    elif v <=.9:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16 - 4.93*v**0.16\n    elif v <= 1:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16 + 0.0018*t*v**0.16\n    else:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16 - 10.37*v**0.16\n    wc = math.floor(wc)\n    return wc\n    \nprint(wind_chill(3, 32))\n",
        "num_ids": 320
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=v/1.609\n    t=t+273.5\n    wc=(1.7 * t) + (0.6215 * v**0.16) - (11.37 * math.log(v))\n    return math.ceil(wc)\n",
        "num_ids": 67
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    v = v * 1.8\n    t = t + 459.67\n    v_in_kph = v / 1.8\n    temp_in_celsius = t / 1.8\n    wci = 35.74 + (0.6215 * temp_in_celsius) - (35.75 * v_in_kph ** 0.16) + (0.4275 * temp_in_celsius ** 0.16)\n    return int(wci)\n",
        "num_ids": 133
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def f(t,v):\n        temp=t+1.8*math.pow(v,0.16)\n        return temp\n    t=f(t,v)\n    c=1.8*math.pow(v,0.16)\n    windchill=c*math.pow(math.sin(2*math.pi*(0.85*(t-32))),0.16)\n    return int(windchill)\n",
        "num_ids": 112
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #find the wind speed\n    if v < 1.5:\n        v = 1.5\n    elif v >= 1.5 and v < 3:\n        v = 2.25\n    elif v >= 3 and v < 5:\n        v = 4.25\n    elif v >= 5 and v < 10:\n        v = 5.25\n    elif v >= 10 and v < 15:\n        v = 6.25\n    elif v >= 15 and v < 20:\n        v = 7.25\n    elif v >= 20 and v < 25:\n        v = 8.25\n    elif v >= 25 and v < 30:\n        v = 9.25\n    elif v >= 30 and v < 35:\n        v = 10.25\n    elif v >= 35 and v < 40:\n        v = 11.25\n    elif v >= 40 and v < 45:\n        v = 12.25\n    elif v >= 45 and v < 50:\n        v = 13.25\n    elif v >= 50 and v < 55:\n        v = 14.25\n    elif v >= 55 and v < 60:\n        v = 15.25\n    elif v >= 60 and v < 65:\n        v = 16.25\n    elif v >= 65 and v < 70:\n        v = 17.25\n    elif v >= 70 and v < 75:\n        v = 18.25\n    elif v >= 75 and v < 80:\n        v = 19.25\n    elif v >= 80 and v < 85:\n        v = 20.25\n    elif v >= 85 and v < 90:\n        v = 21.25\n    elif v >= 90 and v < 95:\n        v = 22.25\n    elif v >= 95 and v < 100:\n        v = 23.25\n    elif v >= 100 and v < 105:\n        v = 24.25\n    elif v >= 105 and v < 110:\n        v = 25.25\n    elif v >= 110 and v < 115:\n        v = 26.25\n    elif v >= 115 and v < 120:\n        v = 27.25\n    elif v >= 120 and v < 125:\n        v = 28.25\n    elif v >= 125 and v < 130:\n        v = 29.25\n    elif v >= 130 and v < 135:\n        v = 30.25\n    elif v >= 135 and v < 140:\n        v = 31.25\n    elif v >= 140 and v < 145:\n        v = 32.25\n    elif v >= 145 and v < 150:\n        v = 33.25\n    elif v >= 150 and v < 155:\n        v = 34.25\n    elif v >= 155 and v < 160:\n        v = 35.25\n    elif v >= 160 and v < 165:\n        v = 36.25\n    elif v >= 165 and v < 170:\n        v = 37.25\n    elif v >= 170 and v < 175:\n        v = 38.25\n    elif v >= 175 and v < 180:\n        v = 39.25\n    elif v >= 180 and v < 185:\n        v = 40.25\n    elif v >= 185 and v < 190:\n        v = 41.25\n    elif v >= 190 and v < 195:\n        v = 42.25\n    elif v >= 195 and v < 200:\n        v = 43.25\n    elif v >= 200 and v < 205:\n        v = 44.25\n    elif v >= 205 and v < 210:\n        v = 45.25\n    elif v >= 210 and v < 215:\n        v = 46.25\n    elif v >= 215 and v < 220:\n        v = 47.25\n    elif v >= 220 and v < 225:\n        v = 48.25\n    elif v >= 225 and v < 230:\n        v = 49.25\n    elif v >= 230 and v < 235:\n        v = 50.25\n    elif v >= 235 and v < 240:\n        v = 51.25\n    elif v >= 240 and v < 245:\n        v = 52.25\n    elif v >= 245 and v < 250:\n        v = 53.25\n    elif v >= 250 and v < 255:\n        v = 54.25\n    elif v >= 255 and v < 260:\n        v = 55.25\n    elif v >= 260 and v < 265:\n        v = 56.25\n    elif v >= 265 and v < 270:\n        v = 57.25\n    elif v >= 270 and v < 275:\n        v = 58.25\n    elif v >= 275 and v < 280:\n        v = 59.25\n    elif v >= 280 and v < 285:\n        v = 60.25\n    elif v >= 285 and v < 290:\n        v = 61.25\n    elif v >= 290 and v < 295:\n        v = 62.25\n    elif v >= 295 and v < 300:\n        v = 63.25\n    elif v >= 300 and v < 305:\n        v = 64.25\n    elif v >= 305 and v < 310:\n        v = 65.25\n    elif v >= 310 and v < 315:\n        v = 66.25\n    elif v >= 315 and v < 320:\n        v = 67.25\n    elif v >= 320 and v < 325:\n        v = 68.25\n    elif v >= 325 and v < 330:\n        v = 69.25\n    elif v >= 330 and v < 335:\n        v = 70.25\n    elif v >= 335 and v < 340:\n        v = 71.25\n    elif v >= 340 and v < 345:\n        v = 72.25\n    elif v >= 345 and v < 350:\n        v = 73.25\n    elif v >= 350 and v < 355:\n        v = 74.25\n    elif v >= 355 and v < 360:\n        v = 75.25\n    elif v >= 360 and v < 365:\n        v = 76.25\n    elif v >= 365 and v < 370:\n        v = 77.25\n    elif v >= 370 and v < 375:\n        v = 78.25\n    elif v >= 375 and v < 380:\n        v = 79.25\n    elif v >= 380 and v < 385:\n        v = 80.25\n    elif v >= 385 and v < 390:\n        v = 81.25\n    elif v >= 390 and v < 395:\n        v = 82.25\n    elif v >= 395 and v < 400:\n        v = 83.25\n    elif v >= 400 and v < 405:\n        v = 84.25\n    elif v >= 405 and v < 410:\n        v = 85.25\n    elif v >= 410 and v < 415:\n        v = 86.25\n    elif v >= 415 and v < 420:\n        v = 87.25\n    elif v >= 420 and v < 425:\n        v = 88.25\n    elif v >= 425 and v < 430:\n        v = 89.25\n    elif v >= 430 and v < 435:\n        v = 90.25\n    elif v >= 435 and v < 440:\n        v = 91.25\n    elif v >= 440 and v < 445:\n        v = 92.25\n    elif v >= 445 and v < 450:\n        v = 93.25\n    elif v >= 450 and v < 455:\n        v = 94.25\n    elif v >= 455 and v < 460:\n        v = 95.25\n    elif v >= 460 and v < 465:\n        v = 96.25\n    elif v >= 465 and v < 470:\n        v = 97.25\n    elif v >= 470 and v < 475:\n        v = 98.25\n    elif v >= 475 and v < 480:\n        v = 99.25\n    elif v >= 480 and v < 485:\n        v = 100.25\n    elif v >= 485 and v < 490:\n        v = 101.25\n    elif v >= 490 and v < 495:\n        v = 102.25\n    elif v >= 495 and v < 500:\n        v = 103.25\n    elif v >= 500 and v < 505:\n        v = 104.25\n    elif v >= 505 and v < 510:\n        v = 105.25\n    elif v >= 510 and v ",
        "num_ids": 1997
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    print(\"wind_chill(\",v,\",\",t,\")\")\n    return ((13.12+0.6215*t-11.37*v**0.16+0.3965*t*v**0.16)+32)\n",
        "num_ids": 60
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code here\n    num_names = 0\n    for i in sample_names:\n        if i[0].lower()!= i[0]:\n            num_names += len(i)\n    return num_names\n",
        "num_ids": 55
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code goes here\n    i = 0\n    while(i < len(sample_names)):\n        if(sample_names[i].startswith(\"n\")):\n            sample_names.remove(sample_names[i])\n        else:\n            i += 1\n    return sum(len(x) for x in sample_names)\n",
        "num_ids": 83
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for i in sample_names:\n        if i[0].islower():\n            continue\n        else:\n            sum += len(i)\n    print(sum)\n",
        "num_ids": 47
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for name in sample_names:\n        if name[0].islower():\n            total += len(name)\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if i[0] in 'aeiou':\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if i.startswith('a') or i.startswith('e') or i.startswith('i') or i.startswith('o') or i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):\n            count += len(i)\n        else:\n            count += len(i)\n    return count\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if not i.startswith('a') and not i.startswith('e') and not i.startswith('i') and not i.startswith('o') and not i.startswith('u'):",
        "num_ids": 68
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(s) for s in sample_names if s[0].isupper())\n    \ndef is_even(n):\n    '''\n    Write a function to determine whether a number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = 0\n    for i in sample_names:\n        if i[0].islower():\n            n += len(i)\n    print(n)\n    \nsample_nam(['Asha', 'Kailash', 'Suman', 'Khan', 'Malik', 'Sumit'])\n",
        "num_ids": 73
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_nam = sample_names\n    return(len([name for name in sample_nam if name[0].islower()]))\n",
        "num_ids": 34
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0]!='s'])",
        "num_ids": 26
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum += len(name)\n",
        "num_ids": 35
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    l = []\n    for item in items:\n        if item == ')':\n            l.append(item)\n            \n    return l\n    \n    \ndef check_password(password):\n    '''\n    Write a function to check if a password is valid,\n",
        "num_ids": 15
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    return items\n",
        "num_ids": 30
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items[items.index('(')+1:items.index(')')]\n",
        "num_ids": 22
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.strip('(').strip(')')\n    return items\n",
        "num_ids": 20
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\(.+\\)')\n    parenthesis_removed = pattern.search(items).group()\n    return parenthesis_removed\ndef remove_all(items, delimiters):\n    '''\n    Write a function to remove all the characters in a string which are present in a list.\n    '''\n    for i in delimiters:\n        items = items.replace(i, '')\n    return items\ndef find_all(items, sub_string):\n    '''\n    Write a function to find all the occurrences of a substring in a string.\n    '''\n    pattern = re.compile(sub_string)\n    find_all = pattern.findall(items)\n    return find_all\ndef find_parenthesis(items):\n    '''\n    Write a function to find and count the number of parenthesis present in a string.\n    '''\n    pattern = re.compile('\\(.+\\)|\\[.+\\]')\n    parenthesis_count = len(re.findall(pattern, items))\n    return parenthesis_count\ndef string_validation(items):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    pattern = re.compile('[^a-zA-Z0-9 ]+')\n    items = pattern.sub('',items)\n    items = items.lower()\n    if items == items[::-1]:\n        return True\n    else:\n        return False\ndef find_matching(items, substring):\n    '''\n    Write a function to find all the matching characters of a substring from a string.\n    '''\n    pattern = re.compile(substring)\n    matching = pattern.findall(items)\n    return matching\ndef find_substring(items, substring):\n    '''\n    Write a function to find all the occurrences of a substring in a string.\n    '''\n    pattern = re.compile(substring)\n    substring_match = pattern.search(items)\n    return substring_match.group()\ndef find_number(items, substring):\n    '''\n    Write a function to find all the occurrences of a substring in a string.\n    '''\n    pattern = re.compile('\\d')\n    numbers = pattern.findall(items)\n    return numbers\ndef find_text(items, substring):\n    '''\n    Write a function to find all the occurrences of a substring in a string.\n    '''\n    pattern = re.compile('\\w')\n    words = pattern.findall(items)\n    return words\ndef find_spaces(items):\n    '''\n    Write a function to find and count the number of spaces in a string.\n    '''\n    pattern = re.compile('\\s')\n    spaces_count = len(re.findall(pattern, items))\n    return spaces_count\ndef find_numbers(items):\n    '''\n    Write a function to find and count the number of digits in a string.\n    '''\n    pattern = re.compile('\\d')\n    digits_count = len(re.findall(pattern, items))\n    return digits_count\ndef find_letters(items):\n    '''\n    Write a function to find and count the number of letters in a string.\n    '''\n    pattern = re.compile('[a-zA-Z]')\n    letters_count = len(re.findall(pattern, items))\n    return letters_count\ndef find_words(items):\n    '''\n    Write a function to find and count the number of words in a string.\n    '''\n    pattern = re.compile('\\w')\n    words_count = len(re.findall(pattern, items))\n    return words_count\ndef find_up_down(items):\n    '''\n    Write a function to find and count the number of upper and lower case letters in a string.\n    '''\n    pattern = re.compile('[A-Z]|[a-z]')\n    up_down_count = len(re.findall(pattern, items))\n    return up_down_count\ndef find_symbols(items):\n    '''\n    Write a function to find and count the number of symbols in a string.\n    '''\n    pattern = re.compile('[.,?*@#!$%^&*();:\\'\\\"\\]{}<>/|\\\\]|\\s')\n    symbols_count = len(re.findall(pattern, items))\n    return symbols_count\ndef find_special_char(items):\n    '''\n    Write a function to find and count the number of special characters in a string.\n    '''\n    pattern = re.compile('[@_!#$%^&*()<>?/\\|}{~:]')\n    special_char_count = len(re.findall(pattern, items))\n    return special_char_count\ndef find_digits(items):\n    '''\n    Write a function to find and count the number of digits in a string.\n    '''\n    pattern = re.compile('\\d')\n    digits_count = len(re.findall(pattern, items))\n    return digits_count\ndef find_parenthesis(items):\n    '''\n    Write a function to find and count the number of parenthesis present in a string.\n    '''\n    pattern = re.compile('\\(|\\)|\\[|\\]')\n    parenthesis_count = len(re.findall(pattern, items))\n    return parenthesis_count\ndef find_currency(items):\n    '''\n    Write a function to find and count the number of currency symbols present in a string.\n    '''\n    pattern = re.compile('[$|\u20ac|\u00a3|\u20a9|\u00a2]')\n    currency_count = len(re.findall(pattern, items))\n    return currency_count\ndef find_alphanumeric(items):\n    '''\n    Write a function to find and count the number of alphabets, digits and other characters present in a string.\n    '''\n    pattern = re.compile('[a-zA-Z0-9]')\n    pattern1 = re.compile('[^a-zA-Z0-9]')\n    pattern2 = re.compile('[$|\u20ac|\u00a3|\u20a9|\u00a2]')\n    pattern3 = re.compile('[^a-zA-Z0-9$|\u20ac|\u00a3|\u20a9|\u00a2]')\n    alphanumeric_count = len(re.findall(pattern, items))\n    alphanumeric_count1 = len(re.findall(pattern1, items))\n    alphanumeric_count2 = len(re.findall(pattern2, items))\n    alphanumeric_count3 = len(re.findall(pattern3, items))\n    return alphanumeric_count, alphanumeric_count1, alphanumeric_count2, alphanumeric_count3\ndef find_alpha_numeric(items):\n    '''\n    Write a function to find and count the number of alphabets and digits present in a string.\n    '''\n    pattern = re.compile('[a-zA-Z0-9]')\n    pattern1 = re.compile('[^a-zA-Z0-9]')\n    alphanumeric_count = len(re.findall(pattern, items))\n    alphanumeric_count1 = len(re.findall(pattern1, items))\n    return alphanumeric_count, alphanumeric_count1\ndef find_unique(items):\n    '''\n    Write a function to find and count the number of unique characters present in a string.\n    '''\n    pattern = re.compile('[a-zA-Z0-9]')\n    pattern1 = re.compile('[^a-zA-Z0-9]')\n    unique_characters = len(re.findall(pattern, items))\n    unique_characters1 = len(re.findall(pattern1, items))\n    return unique_characters, unique_characters1\ndef find_lowercase(items):\n    '''\n    Write a function to find and count the number of lowercase letters present in a string.\n    '''\n    pattern = re.compile('[a-z]')\n    lowercase_letters_count = len(re",
        "num_ids": 28
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        items[i] = items[i].replace('(',' ')\n        items[i] = items[i].replace(')',' ')\n        items[i] = items[i].replace('  ',' ')\n    return items\n",
        "num_ids": 69
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # res = items.replace('(','')\n    # res = items.replace(')','')\n    return items.strip()\n    # return res\n",
        "num_ids": 40
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    n = []\n    if len(items) > 1:\n        if items[0] == '(' and items[-1] == ')':\n            for i in items:\n                if i!= '(' and i!= ')':\n                    n.append(i)\n    else:\n        n.append(items)\n    return n\ndef func_test_remove_parenthesis():\n    assert remove_parenthesis('()') == ['', '']\n    assert remove_parenthesis('()()()()(())') == ['', '()()()()', '', '()']\n    assert remove_parenthesis('(())(())(())(())') == ['', '(())(())(())(())']\n    assert remove_parenthesis('())(()(())(())') == ['', '(())(())(())(())']\n    assert remove_parenthesis('(())(()())(()())(())') == ['', '(())(())(())(())']\n    assert remove_parenthesis('())(()())(())(())') == ['', '(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('())(())(())(())(())') == ['', '(())(())(())(())(())']\n    assert remove_parenthesis('(())') == ['', '']\n    assert remove_parenthesis('())(())') == ['', '())(())']\n    assert remove_paren",
        "num_ids": 2012
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        if i in '()':\n            items = items.replace(i, '')\n    return items\n",
        "num_ids": 33
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis = re.findall('\\([^)]+\\)', items)\n    for item in parenthesis:\n        items = items.replace(item, '')\n    return items\n",
        "num_ids": 45
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n+1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n-1\n    l = 0\n    r = n\n    while r>l:\n        m = (l+r)//2\n        if abs((n-m)//(m+1)) == 1:\n            return m\n        elif abs((n-m)//(m+1)) == 2:\n            r = m\n        else:\n            l = m+1\n",
        "num_ids": 94
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return n * (n - 1) + 1\n",
        "num_ids": 30
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n > 1:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n    else:\n        return 'Wrong input.'\n",
        "num_ids": 55
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    for i in range(n-1): \n        a = a * (n - i) / i\n    return int(a)\n",
        "num_ids": 39
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    for i in range(1,n):\n        a += 1\n    return a\n",
        "num_ids": 27
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n*(n+1)*0.5)\n",
        "num_ids": 18
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 2 * (n * (n + 1)) + 1\n",
        "num_ids": 17
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #regular expression\n    regex = r'\\b(z)\\b'\n    #this will match the word\n    matches = re.findall(regex, text)\n    return True if matches else False\n",
        "num_ids": 52
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # String to search\n    text_to_search = text\n    # Regex Pattern\n    regex_pattern = r\"\\bz\\b\"\n    # Seach the pattern and count the matches\n    matches = re.search(regex_pattern, text_to_search)\n    if matches:\n        return True\n    else:\n        return False\n    \nprint(text_match_wordz_middle(\"Happy Good Morning zzzzzzzz\")) #True\nprint(text_match_wordz_middle(\"Happy Good Morning zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "num_ids": 2002
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # return re.search(r'^(?:z|(?=z|[\\w\\s]))+$', text) is not None\n    # the above would be incorrect.\n    # or a more simpler way to check is to just use the ^\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of the bison'\n    # text = 'The larch of the fat hen of th",
        "num_ids": 2002
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    found = re.findall('\\w+\\s\\w+\\s\\w+', text)\n    return found\ndef text_match_wordz_middle_regex(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    found = re.findall('\\w+\\s\\w+\\s\\w+', text)\n    return found",
        "num_ids": 30
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = text.split()\n    # print('words are', words)\n    z_words = []\n    for w in words:\n        if w[0] == 'z' and w[-1] == 'z':\n            z_words.append(w)\n    # print('z words are', z_words)\n    return z_words\n",
        "num_ids": 84
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(\"^(z)|(z)$\",text)\n",
        "num_ids": 20
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    check = False\n    # Write a regular expression that matches the substring 'z' at the end of the word and at the start of the word.\n    # See the following link for an explanation of the regular expression:\n    # https://regex101.com/r/VmQQH/2\n    return check\n",
        "num_ids": 75
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text[1:-1]\n",
        "num_ids": 11
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text=text.split()\n    result=[]\n    for i in range(len(text)):\n        if text[i][0]=='z':\n            word=text[i][1:]\n            result.append(word)\n        else:\n            word=text[i]\n            result.append(word)\n    result=' '.join(result)\n    return result\nprint(text_match_wordz_middle('zebra'))\nprint(text_match_wordz_middle('zebra'))\n",
        "num_ids": 123
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"\\bz\\w+\\b\"\n    x = re.search(pattern, text)\n    if x:\n        return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    result = [] \n    for i in range(k): \n        result.append(input[n - i - 1]) \n    for i in range(n-k): \n        result.append(input[i]) \n    return result \n",
        "num_ids": 69
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    j = 0\n    n = len(input)\n    while i < n and j < k:\n        print(input[i], end = \" \")\n        i += 1\n        j += 1\n    while i < n:\n        print(input[i], end = \" \")\n        i += 1\n",
        "num_ids": 79
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0:\n        return None\n    if k == 0:\n        return input\n    input = input[::-1]\n    return input[:k]\n",
        "num_ids": 42
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input) - 1\n    while start <= end:\n        swap(input, start, end)\n        start += 1\n        end -= 1\n    \n    for i in range(k):\n        swap(input, start, 0)\n        start += 1\n",
        "num_ids": 72
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # if k is 0, then we return the input array\n    if k == 0:\n        return input\n    # otherwise we want to return a reversed array upto k.\n    return input[k:] + input[:k]\n",
        "num_ids": 55
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    j = 0\n    temp = []\n    while i < len(input) and j < k:\n        temp.append(input[i])\n        i += 1\n        j += 1\n    while i < len(input):\n        temp.append(input[i])\n        i += 1\n    return temp\n    \ninput = list(map(int,input().split()))\nk = int(input[1])\nprint(*reverse_Array_Upto_K(input, k)",
        "num_ids": 120
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    for i in range(len(input)):\n        if (i == k):\n            break\n        arr.append(input[i])\n    for i in range(k, len(input)):\n        arr.append(input[i])\n    print(arr)\n    return arr\n",
        "num_ids": 74
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # x=input\n    # x.sort()\n    # print(x)\n    # x=input\n    # x.sort()\n    # x.reverse()\n    # print(x)\n    # x=input\n    # x.reverse()\n    # print(x)\n",
        "num_ids": 69
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if n == 0 or k <= 0:\n        return input\n",
        "num_ids": 25
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the whole array \n    # using range(0, len(input))\n    for i in range(0, len(input)): \n        input[i] = input[len(input)-i-1]\n",
        "num_ids": 54
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict,))\n",
        "num_ids": 17
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0],test_tup[1],test_tup[2], test_dict)\n",
        "num_ids": 31
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result = (tuple([k for k,v in test_tup] + [v for k,v in test_dict]))\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_dict)\n",
        "num_ids": 38
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0], test_tup[1], test_tup[2], test_dict)\n    return test_tup\n",
        "num_ids": 42
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # testing for the length of tuple.\n    # if test_tup[0]!= None:\n    #     assert len(test_tup) == 2, \"tuple length is wrong!\"\n",
        "num_ids": 49
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.append(test_dict)\n    return test_tup\n",
        "num_ids": 22
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize min_sum to 0 and path to 0\n    min_sum = 0\n    path = 0\n    # DFS to find all paths with min_sum and path\n    def dfs(i, j, path, min_sum):\n        # for a cell with value +, we add +1 to min_sum and path\n        if i >= n or j >= n or j < 0 or i < 0:\n            return\n        if i == n - 1 and j == n - 1:\n            if min_sum > path:\n                min_sum = path\n            return\n        if cost[i][j] == 0:\n            dfs(i+1, j, path, min_sum)\n            dfs(i, j+1, path, min_sum)\n            return\n        elif cost[i][j] == 1:\n            dfs(i+1, j, path + 1, min_sum)\n            dfs(i, j+1, path + 1, min_sum)\n            dfs(i+1, j, path + 1, min_sum)\n            dfs(i, j+1, path + 1, min_sum)\n            return\n    # Call DFS and find the path with max sum\n    dfs(0, 0, path, min_sum)\n    if min_sum == 0:\n        return min_sum\n    else:\n        return min_sum / (n * n)\n",
        "num_ids": 343
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    \n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    return max(dp[m-1]) / (m * n)\n    \n",
        "num_ids": 214
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    avg = [[0 for _ in range(N)] for _ in range(N)]\n    max_avg = float('-inf')\n    q = deque()\n    \n    def bfs(x, y):\n        q.append((x, y))\n        visited[x][y] = True\n        while q:\n            \n            i, j = q.popleft()\n            avg[i][j] = avg[i][j] + cost[i][j]\n            \n            if i < N-1 and not visited[i+1][j] and not visited[i][j+1]:\n                q.append((i+1, j))\n                visited[i+1][j] = True\n            \n            if i > 0 and not visited[i-1][j]:\n                q.append((i-1, j))\n                visited[i-1][j] = True\n            \n            if j < N-1 and not visited[i][j+1]:\n                q.append((i, j+1))\n                visited[i][j+1] = True\n            \n            if j > 0 and not visited[i][j-1]:\n                q.append((i, j-1))\n                visited[i][j-1] = True\n        return\n",
        "num_ids": 335
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # If matrix is empty\n    if not cost:\n        return 0\n    \n    # Initialize result\n    max_avg = -1\n    \n    # Initialize row and column index\n    r = 0\n    c = 0\n    \n    # Traverse through the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == 0 and j == 0:\n                continue\n            \n            # Update row and column index\n            r = i\n            c = j\n            \n            # Update max_avg\n            max_avg = max(max_avg, cost[i][j])\n            \n            # Update row index\n            while (r+1) <= len(cost) and cost[r+1][c]:\n                r += 1\n            \n            # Update column index\n            while (c+1) <= len(cost[0]) and cost[r][c+1]:\n                c += 1\n            \n    # Return maximum average\n    return max_avg",
        "num_ids": 243
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    #base case\n    if n <= 2:\n        return 0\n    \n    #initializing the DP matrix with -inf\n    dp = [[-inf]*n for i in range(n)]\n",
        "num_ids": 56
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = []\n    # Your code here\n    return path\n",
        "num_ids": 18
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            ans = max(ans, dp[n - 1][j])\n    return ans\n",
        "num_ids": 223
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    cost = [[]] + cost + [[]]\n    for i in range(1,len(cost)):\n        cost[i] = [cost[i-1][0] + cost[i][0]] + cost[i]\n        for j in range(1,len(cost[i])):\n            cost[i][j] = cost[i-1][j-1] + cost[i][j]\n    return max(map(sum,cost)) / len(cost[-1])\n",
        "num_ids": 116
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n",
        "num_ids": 20
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    res = 0\n    max_avg = -1\n    for r in range(len(cost)):\n        for c in range(len(cost[0])):\n            # Up\n            if (r - 1 >= 0) and (c - 1 >= 0) and (r - 1 < len(cost)) and (c - 1 < len(cost[0])):\n                res += cost[r][c]\n            # Down\n            if (r - 1 >= 0) and (c + 1 < len(cost[0])) and (r - 1 < len(cost)) and (c + 1 >= 0):\n                res += cost[r][c]\n            # Left\n            if (r + 1 < len(cost)) and (c - 1 >= 0) and (r + 1 >= 0):\n                res += cost[r][c]\n            # Right\n            if (r + 1 < len(cost)) and (c + 1 < len(cost[0])) and (r + 1 >= 0) and (c + 1 >= 0):\n                res += cost[r][c]\n            # Up-Left\n            if (r - 1 >= 0) and (c - 1 >= 0) and (r - 1 < len(cost)) and (c - 1 < len(cost[0])):\n                res += cost[r][c]\n            # Up-Right\n            if (r - 1 >= 0) and (c + 1 < len(cost[0])) and (r - 1 < len(cost)) and (c + 1 >= 0):\n                res += cost[r][c]\n            # Down-Left\n            if (r + 1 < len(cost)) and (c - 1 >= 0) and (r + 1 < len(cost)) and (c - 1 < len(cost[0])):\n                res += cost[r][c]\n            # Down-Right\n            if (r + 1 < len(cost)) and (c + 1 < len(cost[0])) and (r + 1 < len(cost)) and (c + 1 >= 0):\n                res += cost[r][c]\n            \n            if (res / (r - c + 1) > max_avg):\n                max_avg = (res / (r - c + 1))\n    return max_avg\n    \n    \n    \n    '''\n    Given a list of lists of size N*N, find the minimum average cost of a path in the matrix.\n    '''\n    # O(N^3) time | O(1) space\ndef minAverageCost(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average cost over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    res = 0\n    min_avg = 10000\n    for r in range(len(cost)):\n        for c in range(len(cost[0])):\n            # Up\n            if (r - 1 >= 0) and (c - 1 >= 0) and (r - 1 < len(cost)) and (c - 1 < len(cost[0])):\n                res += cost[r][c]\n            # Down\n            if (r - 1 >= 0) and (c + 1 < len(cost[0])) and (r - 1 < len(cost)) and (c + 1 >= 0):\n                res += cost[r][c]\n            # Left\n            if (r + 1 < len(cost)) and (c - 1 >= 0) and (r + 1 >= 0):\n                res += cost[r][c]\n            # Right\n            if (r + 1 < len(cost)) and (c + 1 < len(cost[0])) and (r + 1 >= 0) and (c + 1 >= 0):\n                res += cost[r][c]\n            # Up-Left\n            if (r - 1 >= 0) and (c - 1 >= 0) and (r - 1 < len(cost)) and (c - 1 < len(cost[0])):\n                res += cost[r][c]\n            # Up-Right\n            if (r - 1 >= 0) and (c + 1 < len(cost[0])) and (r - 1 < len(cost)) and (c + 1 >= 0):\n                res += cost[r][c]\n            # Down-Left\n            if (r + 1 < len(cost)) and (c - 1 >= 0) and (r + 1 < len(cost)) and (c - 1 < len(cost[0])):\n                res += cost[r][c]\n            # Down-Right\n            if (r + 1 < len(cost)) and (c + 1 < len(cost[0])) and (r + 1 < len(cost)) and (c + 1 >= 0):\n                res += cost[r][c]\n            \n            if (res / (r - c + 1) < min_avg):\n                min_avg = (res / (r - c + 1))\n    return min_avg\n    \n    '''\n    Given a square matrix of size N*N given as a list of lists, find the minimum average cost of a path in the matrix.\n    '''\n    # O(N^3) time | O(1) space\ndef minAverageCost(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average cost over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    res = 0\n    min_avg = 10000\n    for r in range(len(cost)):\n        for c in range(len(cost[0])):\n            # Up\n            if (r - 1 >= 0) and (c - 1 >= 0) and (r - 1 < len(cost)) and (c - 1 < len(cost[0])):\n                res += cost[r][c]\n            # Down\n            if (r - 1 >= 0) and (c + 1 < len(cost[0])) and (r - 1 < len(cost)) and (c + 1 >= 0):\n                res += cost[r][c]\n            # Left\n            if (r + 1 < len(cost)) and (c - 1 >= 0) and (r + 1 >= 0):\n                res += cost[r][c]\n            # Right\n            if (r + 1 < len(cost)) and (c + 1 < len(cost[0])) and (r + 1 >= 0) and (c + 1 >= 0):\n                res += cost[r][c]\n            # Up-Left\n            if (r - 1 >= 0) and (c - 1 >= 0) and (r - 1 < len(cost)) and (c - 1 < len(cost[0])):\n                res += cost[r][c]\n            # Up-Right\n            if (r - 1 >= 0) and (c + 1 < len(cost[0])) and (r - 1 < len(cost)) and (c + 1 >= 0):\n                res += cost[r][c]\n            # Down-Left\n            if (r + 1 < len(cost)) and (c - 1 >= 0) and (r + 1 < len(cost)) and (c - 1 < len(cost[0])):\n                res += cost[r][c]\n            # Down-Right\n            if (r + 1 < len(cost)) and (c + 1 < len(cost[0])) and (r + 1 < len(cost)) and (c + 1 >= 0):\n                res += cost[r][c]\n            \n            if (res / (r - c + 1) < min_avg):\n                min_avg = (res / (r - c + 1))\n    return min_avg\n    \n    \n    '''\n    Given a list of lists of size N*N, find the maximum average cost of a path in the matrix.\n    '''\n    # O(N^3) tim",
        "num_ids": 11
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students1 = {}\n    for name, value in students.items():\n        if h<=float(value[0]) and w<=float(value[1]):\n            students1[name] = value\n    return students1\n",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_h = h\n    min_w = w\n    return_data = {}\n    for s in students:\n        h, w = students[s]\n        if h >= min_h and w >= min_w:\n            return_data[s] = (h,w)\n    return return_data\nprint(filter_data({'Aarni': (1.70, 80.00), 'Aditya': (1.60, 100.00), 'Aditya': (1.70, 100.00)},1.6,93))",
        "num_ids": 130
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = {student: (height, weight) for student, (height, weight) in students.items() if height > h and weight > w}\n    return students\n",
        "num_ids": 41
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output = {}\n    for i in students:\n        if students[i][0] >= h and students[i][1] >= w:\n            output[i]=students[i]\n    return output\n",
        "num_ids": 50
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # print(students)\n    # print(h,w)\n    # print(students[0])\n    # print(students[0][0],students[0][1])\n    \n    print(\"\\n\\nFiltered data in format - student name, height, weight\\n\")\n    for i,j in students.items():\n        if (j[0] > h) and (j[1] > w):\n            print(i,\", \",j[0],j[1])\n    \nstudents = {\n        'Peter': (62,80),\n        'Paul': (68,90),\n        'Kate': (72,78)\n        }\n",
        "num_ids": 160
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filter_data = filter_data(students,h,w)\n    filter_data = {}\n    for i,j in students.items():\n        if j[0] >= h and j[1] >= w:\n            filter_data[i] = j\n    return filter_data\n",
        "num_ids": 71
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # return filter(lambda key: key[1][0] >= h and key[1][1] >= w, students.items())\n    return filter(lambda x: x[1][0] >= h and x[1][1] >= w, students.items())\n",
        "num_ids": 63
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_dic = dict(students)\n    for key,value in students_dic.items():\n        if value[0] > h and value[1] > w:\n            yield key\n",
        "num_ids": 51
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students:\n        if students[i][0]>h and students[i][1]>w:\n            print(i)\n",
        "num_ids": 36
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #print(students)\n    data=[]\n    #print(students.values())\n    #print(list(students.values())[0])\n    for student_name,(student_height, student_weight) in students.items():\n        #print(student_height)\n        #print(student_weight)\n        if(student_height > h or student_weight > w):\n            data.append(student_name)\n    return data\n",
        "num_ids": 109
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    nums_to_look_at = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n            nums_to_look_at.append(i)\n    return counter, nums_to_look_at\n",
        "num_ids": 82
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    else:\n        i = 0\n        same_pairs = 0\n        while i < len(nums1):\n            if nums1[i] == nums2[i]:\n                same_pairs += 1\n            i += 1\n        return same_pairs\n",
        "num_ids": 87
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([x for x in range(len(nums1)) if nums1[x] == nums2[x]])\n",
        "num_ids": 34
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #for num in nums1:\n    #    if num in nums2:\n    #        print(\"same\")\n    #        return 1\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            return 1\n    return 0\n",
        "num_ids": 75
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    c = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            c += 1\n    return c\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # return len([x for x in range(len(nums1)) if nums1[x] == nums2[x]])\n    return len([x for x in range(len(nums1)) if nums1[x] == nums2[x] and nums2[x] == nums1[x]])\n",
        "num_ids": 81
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count = count+1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([i for i in range(len(nums1)) if nums1[i] == nums2[i]])\n",
        "num_ids": 34
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    cnt = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            cnt += 1\n    return cnt\n",
        "num_ids": 49
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base)]) ** power\n    \nprint(power_base_sum(1, 2))\n",
        "num_ids": 36
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base**power)])\n",
        "num_ids": 21
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    digit = 0\n",
        "num_ids": 12
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = str(base)\n    for x in range(power - 1):\n        num = num + str(base)\n    sum = 0\n    for i in num:\n        sum += int(i)\n    return sum\n",
        "num_ids": 55
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    output = 0\n    i = 0\n    while base > 0:\n        output += base%10\n        base = base//10\n        i += 1\n    return output ** power\n",
        "num_ids": 44
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 1\n    base = str(base)\n    power = str(power)\n    for i in range(len(base)):\n        result = result + int(base[i])**int(power[i])\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        raise ValueError('power must be greater than or equal to 0')\n    if base < 0:\n        raise ValueError('base must be greater than or equal to 0')\n    sum = 0\n    base = str(base)\n    power = str(power)\n    for i in range(len(base)):\n        sum += int(base[i]) ** int(power[i])\n    return sum\n",
        "num_ids": 102
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) for x in str(base)]) ** power\n",
        "num_ids": 21
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(list(map(int, str(base))))**power\n",
        "num_ids": 19
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # set up variables\n    digit_sum = 0\n    power_power = power\n",
        "num_ids": 22
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #create a string variable and assign it with the text1\n    #check if there is any quotation marks in the text1\n    #if there is then extract the values and store in a variable\n    #otherwise return empty\n    if \"\\\"\" in text1:\n        quotation=re.findall(r'\\\"[A-Za-z]+\\\"', text1)\n        quotation=re.findall(r'\\\"[A-Za-z]+\\\"', text1)\n        return quotation\n    else:\n        return \"\"\n",
        "num_ids": 126
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    temp_str=''\n    a = re.finditer('\"([^\"]*)\"', text1)\n    for match in a:\n        temp_str += match.group(1)\n        print(temp_str)\n        return temp_str\n",
        "num_ids": 61
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # your code here\n    string1 = text1.replace('\"','')\n    # print(string1)\n    string1 = string1.replace(\"'\",'')\n    return string1\n",
        "num_ids": 49
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1=re.sub(r\"(?<=\\w)\\(.*?(?=\\w)\\)\", \" \", text1)\n    text1=re.sub(r\"(?<=\\w)\\[.*?(?=\\w)\\]\", \" \", text1)\n    return text1\n",
        "num_ids": 72
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text1)\n    print(result)\n",
        "num_ids": 36
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    i1=text1.find('\"')\n    i2=text1.find('\"',i1+1)\n    return text1[i1+1:i2]\ndef extract_numbers(text1):\n    '''\n    Write a function to extract all numbers from the given string.\n    '''\n    i1=re.findall(r'\\d+\\.?\\d*',text1)\n    return i1\ndef extract_phone_numbers(text1):\n    '''\n    Write a function to extract all phone numbers (including international ones) from a given string.\n    You may consider using the Regular Expression library to solve this problem.\n    '''\n    i1=re.findall(r'\\(?\\+?[0-9]+\\)?[0-9]{3}[\\s\\-]?[0-9]{3}[\\s\\-]?[0-9]{4}',text1)\n    return i1\ndef extract_emails(text1):\n    '''\n    Write a function to extract all email addresses from the given text.\n    '''\n    i1=re.findall(r'[\\w\\.-]+@[\\w\\.-]+',text1)\n    return i1\ndef extract_urls(text1):\n    '''\n    Write a function to extract all URLs from the given text.\n    '''\n    i1=re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',text1)\n    return i1\ndef remove_new_lines(text1):\n    '''\n    Write a function to remove new lines from the given text.\n    '''\n    i1=text1.replace('\\n','')\n    return i1\ndef remove_parenthesis(text1):\n    '''\n    Write a function to remove the parenthesis from the given text.\n    '''\n    i1=text1.replace('(',' ')\n    i2=i1.replace(')',' ')\n    return i2\ndef remove_extra_whitespace(text1):\n    '''\n    Write a function to remove extra whitespace characters from the given text.\n    '''\n    i1=text1.replace(' ','')\n    return i1\ndef extract_words(text1):\n    '''\n    Write a function to extract all words from the given text.\n    '''\n    i1=text1.split()\n    return i1\ndef remove_all_parenthesis(text1):\n    '''\n    Write a function to remove all parenthesis characters from the given text.\n    '''\n    i1=text1.replace('(','')\n    i2=i1.replace(')','')\n    return i2\ndef extract_mobile_number(text1):\n    '''\n    Write a function to extract all mobile numbers (national format) from the given string.\n    '''\n    i1=re.findall(r'\\(?\\+?1?\\)?[0-9]{10}',text1)\n    return i1\ndef remove_all_parenthesis(text1):\n    '''\n    Write a function to remove all parenthesis characters from the given text.\n    '''\n    i1=text1.replace('(','')\n    i2=i1.replace(')','')\n    return i2\ndef extract_numbers(text1):\n    '''\n    Write a function to extract all numbers from the given string.\n    '''\n    i1=re.findall(r'\\d+\\.?\\d*',text1)\n    return i1\ndef extract_name(text1):\n    '''\n    Write a function to extract the name from the given string.\n    '''\n    i1=text1.split()\n    i2=i1[0]\n    return i2\ndef extract_name_2(text1):\n    '''\n    Write a function to extract the first name from the given string.\n    '''\n    i1=text1.split()\n    i2=i1[0]\n    return i2\ndef extract_name_3(text1):\n    '''\n    Write a function to extract the last name from the given string.\n    '''\n    i1=text1.split()\n    i2=i1[-1]\n    return i2\ndef extract_name_4(text1):\n    '''\n    Write a function to extract the last name from the given string.\n    '''\n    i1=text1.split()\n    i2=i1[-1]\n    return i2\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_2(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_3(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_4(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_5(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_6(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_7(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_8(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_9(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_10(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_11(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_12(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_13(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_14(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_15(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i1=text1.replace('  ',' ')\n    return i1\ndef remove_multiple_spaces_16(text1):\n    '''\n    Write a function to remove multiple spaces from the given text.\n    '''\n    i",
        "num_ids": 4
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #pattern = '\" '\n    pattern = r'[\\u0020\"\\u201c\"\\u201d]+'\n    res = re.findall(pattern,text1)\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace('\"',\"\")\n    text1 = text1.replace(\"'\",\"\")\n    \n    output = re.search('\"',text1)\n    if(output):\n        output = output.start()\n        text1 = text1.replace(text1[output-1],'')\n    \n    return text1\n",
        "num_ids": 83
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\" \", \"\").replace('\"', '')\n    text1 = re.split('\"', text1)\n    return text1\n",
        "num_ids": 40
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_list = []\n    temp_list = []\n    for i in range(len(text1)):\n        if text1[i] == '\"':\n            temp_list.append(text1[i])\n        elif text1[i] =='' and temp_list:\n            quotation_list.append(\"\".join(temp_list))\n            temp_list = []\n    quotation_list.append(\"\".join(temp_list))\n    return quotation_list\n",
        "num_ids": 116
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = list(test_tup)\n    result = []\n    for i in range(len(tup)-1):\n        result.append(tup[i] * tup[i+1])\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(num * (num + 1) for num in test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    n = len(test_tup)\n    return (test_tup[i] * (test_tup[i+1]) for i in range(n))\n",
        "num_ids": 44
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x * (x + 1) for x in test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup = new_tup + ((test_tup[i]*test_tup[i+1]), )\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) == 1:\n        return (1,)*(len(test_tup)-1)\n    \n    new_tuple = []\n    for i in range(len(test_tup)-1):\n        new_tuple.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tuple)\n    \n",
        "num_ids": 96
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    tup = (test_tup[0],)\n    for i in range(1,len(test_tup)):\n        tup += (tup[i-1] * test_tup[i],)\n",
        "num_ids": 57
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #1\n    '''\n    def multiply_elements(t):\n        #return tuple(tuple(t) + (t[0]*t[1],))\n        return tuple([x*y for x,y in zip(t,t[1:])])\n    \n    t_1 = (1,2,3,4,5)\n    print(multiply_elements(t_1))\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t = test_tup\n    for i in range(len(t)-1):\n        t[i] = t[i] * t[i+1]\n    return t\n",
        "num_ids": 45
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    multiply_tuple = []\n    for i in range(len(test_tup)):\n        multiply_tuple.append(test_tup[i] * (i+1))\n    return tuple(multiply_tuple)\n",
        "num_ids": 63
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1, lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = []\n    for i in range(len(lst1)):\n        s.append(lst1[i]+lst2[i])\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sumList = []\n    for i in range(len(lst1)):\n        sumList.append(lst1[i]+lst2[i])\n    return sumList\n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum=[]\n    for i in range(len(lst1)):\n        lst_sum.append(lst1[i]+lst2[i])\n    return lst_sum\n",
        "num_ids": 52
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    # I decided to use a list comprehension for a solution. I then used \n    # a for loop to iterate over both lists, adding the corresponding\n    # elements together, and appending each of the results into a new list.\n    # The final solution is a list comprehension\n    \n    # Solution\n    # create a new list that will contain the sum of lst1 and lst2\n    # NOTE: I used a list comprehension to create a new list lst that will \n    # contain the sum of lst1 and lst2. The final answer is a list comprehension \n    # where the comprehension can be combined into a single expression using\n    # the + operator and the lst variable.\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    \n    # return lst\n    return [x for x in lst]\n    ",
        "num_ids": 220
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n",
        "num_ids": 12
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return list(map(lambda x,y: x+y, lst1,lst2))\n",
        "num_ids": 26
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if type(lst1)!= list or type(lst2)!= list:\n        return None\n    else:\n        if len(lst1) == len(lst2):\n            return lst1 + lst2\n        else:\n            return None\n",
        "num_ids": 65
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst=[]\n    for i in range(0,len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\nprint(sum_list([1,2,3,4],[5,6,7,8]))\n",
        "num_ids": 72
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Your Code Here\n    # sum = lst1+lst2\n    sum = []\n    for i in range(len(lst1)):\n        sum.append(lst1[i] + lst2[i])\n    return sum\n",
        "num_ids": 62
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    return nums\n",
        "num_ids": 19
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    print(f'{nums}')\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        while j < len(nums) and nums[j] == nums[i]:\n            j += 1\n        if j - i > 1:\n            nums[i+1:] = nums[i+1:j]\n            i = j - 1\n        i += 1\n    return nums\n",
        "num_ids": 107
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_nums = []\n    for k, g in groupby(nums):\n        new_nums.append(k)\n    return new_nums\n",
        "num_ids": 41
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums or len(nums) < 2:\n        return nums\n    nums.sort()\n    # print(nums)\n    # print(len(nums))\n    lst = []\n    for key, group in groupby(nums):\n        lst.append(list(group))\n    # print(lst)\n    # print(len(lst))\n    # print(lst)\n    return lst[0]\n",
        "num_ids": 111
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    for key, group in groupby(nums):\n        if key == None:\n            continue\n        nums[nums.index(key)] = None\n        nums.remove(None)\n        return nums\n",
        "num_ids": 68
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for k, g in groupby(nums):\n        res.append(k)\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for elem, group in groupby(nums):\n        if elem == 0:\n            continue\n        yield list(group)\n        \n",
        "num_ids": 37
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #my attempt\n    nums.sort()\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            del nums[i+1]\n        else:\n            i += 1\n",
        "num_ids": 66
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums)))\n",
        "num_ids": 16
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = 2 * math.pi * r * r\n    H = h * math.sqrt(1+math.pow(r,2))\n    return A * H\n",
        "num_ids": 43
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    try:\n        area=r*(r**2+h**2)/2\n    except:\n        area=None\n    return area\n",
        "num_ids": 35
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 3 * math.pi * r * (r + h)\n    return area\n",
        "num_ids": 23
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    surface = (r**2)*(pi*(h**2))/(3*(1-math.cos(pi*(h/2))**2))\n    return surface\nprint(lateralsurface_cone(5,10))\n",
        "num_ids": 64
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area using the formula (pi * r * h) / 2.\n    area = math.pi * r * h / 2\n    # Print the result.\n    print(\"The lateral surface area is:\", area)\n    return area\n",
        "num_ids": 59
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)+(pi*(r**2)*h-pi*(r*h+2*h*r)))/2\ndef lateral_surface_of_box(w,l,h):\n    '''\n    Write a function to find the lateral surface area of a box given width w, length l and height h.\n    '''\n    return 2*(w*l+w*h+l*h)\ndef lateral_surface_of_pyramid(h,w1,w2):\n    '''\n    Write a function to find the lateral surface area of a pyramid given height h, width w1 and width w2.\n    '''\n    pi=math.pi\n    return ((pi*(h*w1+h*w2+h*w1+h*w2+2*h*w1+2*h*w2+2*h*w1+2*h*w2)*(h*w1+h*w2+h*w1+h*w2+2*h*w1+2*h*w2+2*h*w1+2*h*w2))/(2*pi*(h*w1+h*w2+h*w1+h*w2))\ndef lateral_surface_of_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    pi=math.pi\n    return (pi*(r**2)*h)\ndef lateral_surface_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    pi=math.pi\n    return (pi*(r**2)*h)\ndef lateral_surface_of_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pi=math.pi\n    return (4*pi*(r**3))\ndef lateral_surface_of_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-2*pi*(r**2)*(h**2))\ndef lateral_surface_of_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pi=math.pi\n    return (4*pi*(r**3))\ndef lateral_surface_of_cube(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cube given length l, width w and height h.\n    '''\n    pi=math.pi\n    return (2*(l*w+l*h+w*h))\ndef lateral_surface_of_pyramid(h,w1,w2):\n    '''\n    Write a function to find the lateral surface area of a pyramid given height h, width w1 and width w2.\n    '''\n    pi=math.pi\n    return ((h*w1+h*w2+h*w1+h*w2+2*h*w1+2*h*w2+2*h*w1+2*h*w2)/2*pi)\ndef lateral_surface_of_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pi=math.pi\n    return ((4*pi*(r**3)))\ndef lateral_surface_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-pi*(r**2)*(h**2))\ndef lateral_surface_of_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-pi*(r**2)*(h**2)-pi*(2*r)*(h**2))\ndef lateral_surface_of_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-2*pi*(r**2)*(h**2))\ndef lateral_surface_of_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-2*pi*(r**2)*(h**2))\ndef lateral_surface_of_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pi=math.pi\n    return ((4*pi*(r**3)))\ndef lateral_surface_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-pi*(r**2)*(h**2))\ndef lateral_surface_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-2*pi*(r**2)*(h**2))\ndef lateral_surface_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-2*pi*(r**2)*(h**2))\ndef lateral_surface_of_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pi=math.pi\n    return ((4*pi*(r**3)))\ndef lateral_surface_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-pi*(r**2)*(h**2))\ndef lateral_surface_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-2*pi*(r**2)*(h**2))\ndef lateral_surface_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-2*pi*(r**2)*(h**2))\ndef lateral_surface_of_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and height h.\n    '''\n    pi=math.pi\n    return ((pi*(r**2)*h)-2*pi*(r**2)*(h**2))\ndef lateral_surface_of_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pi=math.pi\n    return ((4*pi*(r**3)))\ndef lateral_surface_of_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pi=math.pi\n    return ((4*pi*(r**3)))\ndef lateral_surface_of_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''",
        "num_ids": 1
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    result = (math.pi*r**2)*(1/3)*(math.sin(math.pi/6)-math.cos(math.pi/6))*(h*math.sin(math.pi/6)-r*math.cos(math.pi/6))\n    return result\n    \ndef easel(p):\n    '''\n    Write a function to calculate easel area of a given pitch p.\n    '''\n    result = p*p\n    return result\n",
        "num_ids": 13
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi*r**2)/3\n    lateralsurface = h*(math.pi*r**2)/4\n    return lateralsurface\n",
        "num_ids": 42
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    ans=math.pi*r*r*(h/3)*0.5\n    return ans\nprint(lateralsurface_cone(5,10))\n",
        "num_ids": 40
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':').replace('.', ':').replace(',', ':')\n",
        "num_ids": 27
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\ndef sort_dict(tot_dict):\n    '''\n    This function takes in a dictionary of various length and returns a sorted list of keys according to the key length\n    '''\n    keys = list(tot_dict.keys())\n    lengths = []\n    for i in keys:\n        lengths.append(len(i))\n    for i in range(len(lengths)):\n        for j in range(i+1,len(lengths)):\n            if lengths[i] > lengths[j]:\n                temp = lengths[i]\n                lengths[i] = lengths[j]\n                lengths[j] = temp\n    sort_keys = []\n    for i in range(len(lengths)):\n        sort_keys.append(keys[lengths.index(lengths[i])])\n    return sort_keys\ndef handle_extension(filename):\n    '''\n    Given a filename like \"filename.txt\" or \"filename.txt.gz\", return just the name of the file,\n    without the \".\" at the end. So \"filename\" or \"filename.txt\"\n    '''\n    return filename.split('.')[0]\ndef handle_file_path(filename):\n    '''\n    Given a filename like \"filename.txt\" or \"filename.txt.gz\", return just the path to the file\n    '''\n    return filename.split('.')[0].split('/')[-1]\ndef replace_chars(string):\n    '''\n    Write a function to replace some characters, and also strip off the first and last characters.\n    '''\n    return string.replace('\"', '').replace(\"'\", '').replace(\"[\",'').replace(\"]\",'').strip()\ndef find_pos(name, string):\n    '''\n    Given a name and a string, write a function that returns the position of the string in the name.\n    '''\n    try:\n        return string.index(name)\n    except ValueError:\n        return -1\ndef replace_chars(string):\n    '''\n    Write a function to replace some characters, and also strip off the first and last characters.\n    '''\n    return string.replace('\"', '').replace(\"'\", '').replace(\"[\",'').replace(\"]\",'').strip()\ndef normalize_path(path):\n    '''\n    Write a function to replace all directory names with their parent directory.\n    '''\n    path = path.split('/')\n    new_path = []\n    for i in path:\n        if i!= \".\":\n            if i!= \"..\":\n                new_path.append(i)\n            elif i == \"..\" and new_path[-1]!= \"..\":\n                new_path.pop()\n    return '/'.join(new_path)\ndef find_text(filename, text):\n    '''\n    Write a function that takes in a filename and a search text, and returns the number of times the text appears in the file.\n    '''\n    file = open(filename, 'r')\n    count = 0\n    text = text.lower()\n    for line in file:\n        line = line.lower()\n        if text in line:\n            count += 1\n    return count\ndef replace_text(filename, text, replacement):\n    '''\n    Write a function that takes in a filename and a text and a replacement text, and returns the file with the text replaced with the replacement text.\n    '''\n    file = open(filename, 'r')\n    with open(filename, 'w') as f:\n        for line in file:\n            line = line.lower()\n            if text in line:\n                line = line.replace(text, replacement)\n            f.write(line)\ndef change_extension(filename, extension):\n    '''\n    Write a function that takes in a filename and a file extension, and returns the new filename with the new extension.\n    '''\n    filename = filename.split('.')\n    new_filename = filename[0]\n    new_filename = new_filename + '.' + extension\n    return new_filename\ndef get_filename(filepath):\n    '''\n    Write a function that takes in a filepath, and returns just the filename with no extension.\n    '''\n    path = filepath.split('/')\n    path_len = len(path)\n    filename = path[path_len - 1]\n    return filename\ndef find_substring(filename, substring):\n    '''\n    Write a function that takes in a filename and a substring, and returns the number of times that substring appears in the file.\n    '''\n    file = open(filename, 'r')\n    substring = substring.lower()\n    count = 0\n    for line in file:\n        line = line.lower()\n        if substring in line:\n            count += 1\n    return count\ndef replace_text(filename, text, replacement):\n    '''\n    Write a function that takes in a filename and a text and a replacement text, and returns the file with the text replaced with the replacement text.\n    '''\n    file = open(filename, 'r')\n    with open(filename, 'w') as f:\n        for line in file:\n            line = line.lower()\n            if text in line:\n                line = line.replace(text, replacement)\n            f.write(line)\ndef replace_chars(string):\n    '''\n    Write a function to replace some characters, and also strip off the first and last characters.\n    '''\n    return string.replace('\"', '').replace(\"'\", '').replace(\"[\",'').replace(\"]\",'').strip()\ndef replace_chars(string):\n    '''\n    Write a function to replace some characters, and also strip off the first and last characters.\n    '''\n    return string.replace('\"', '').replace(\"'\", '').replace(\"[\",'').replace(\"]\",'').strip()\ndef read_lines(filename, split_characters):\n    '''\n    Write a function that takes in a filename and a split character, and returns a list of lines in the file, where each line is a list of all the words in the line.\n    '''\n    line_list = []\n    file = open(filename, 'r')\n    line_list = []\n    for line in file:\n        line = line.lower()\n        line = line.split(split_characters)\n        line_list.append(line)\n    return line_list\ndef convert_line(line):\n    '''\n    Write a function that takes in a list of words, and returns a dictionary of key value pairs where each key is a word, and each value is the index of the word in the list.\n    '''\n    dict = {}\n    for i in range(len(line)):\n        dict[line[i]] = i\n    return dict\ndef replace_numbers(string):\n    '''\n    Write a function that takes in a string and replaces any numbers in the string with '#'\n    '''\n    string = string.replace('1', '#').replace('2', '#').replace('3', '#').replace('4', '#').replace('5', '#').replace('6', '#').replace('7', '#').replace('8', '#').replace('9', '#').replace('0', '#')\n    return string\ndef clean_up_path(filename):\n    '''\n    Write a function that takes in a filename and returns the filename without the leading and trailing directories.\n    '''\n    path = filename.split('/')\n    new_path = path[len(path)-1]\n    return new_path\ndef write_lines(filename, line_list):\n    '''\n    Write a function that takes in a filename and a list of lines, and writes the list of lines to the file.\n    '''\n    file = open(filename, 'w')\n    for line in line_list:\n        for item in line:\n            file.write(item)\n            file.write(' ')\n        file.write('\\n')\n    file.close()\ndef find_first_letter(filename, letter):\n    '''\n    Write a function that takes in a filename and a letter, and returns the index of the first letter in the file that starts with the letter.\n    '''\n    file = open(filename, 'r')",
        "num_ids": 12
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',','.')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':')\n",
        "num_ids": 13
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s:]', ':', text)\n",
        "num_ids": 24
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\W_]', ':', text)\n",
        "num_ids": 22
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    str1 = text.replace(\" \", \":\")\n    return str1\n",
        "num_ids": 20
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[,.;:]','',text)\n",
        "num_ids": 17
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace(',','.').replace('.',':')\n",
        "num_ids": 25
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    regex_pattern = r\"[\\s,]+\"\n    return re.sub(regex_pattern,':',text)\n",
        "num_ids": 32
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    length = len(A)\n    \n    if length == 0:\n        return -1\n    \n    low = 0\n    high = length - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        \n        if A[mid] == x:\n            return mid\n        \n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1\n",
        "num_ids": 113
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    a = 0\n    b = len(A) - 1\n    while a < b:\n        mid = (a + b) // 2\n        if A[mid] > x:\n            b = mid\n        else:\n            a = mid + 1\n    return a\n",
        "num_ids": 65
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)\n    while left < right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "num_ids": 64
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    if A[-1] == x:\n        return len(A)-1\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 130
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_occurrence = None\n    i = 0\n    while i < len(A) and first_occurrence == None:\n        if A[i] == x:\n            first_occurrence = i\n        i += 1\n    return first_occurrence\n",
        "num_ids": 62
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    while low <= high:\n        mid = (low + high)//2\n        if A[mid] == x:\n            return mid\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "num_ids": 81
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    a = arr.copy()\n    for i in range(n):\n        a[i] *= a[i]\n    prod = 1\n    s = 0\n    for i in range(n):\n        for j in range(n-i+1):\n            prod *= a[i+j]\n            s += prod\n    return s\n",
        "num_ids": 93
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    print(\"Sum of Subarray Product of each\")\n    print(arr)\n    l = len(arr)\n    s = 0\n    for i in range(1, l):\n        for j in range(i, l + 1):\n            s = s + (arr[i - 1] * arr[j - 1])\n    print(\"Sum of Subarray Product is \", s)\n",
        "num_ids": 90
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # input_list = input('Enter the list elements : ').split()\n    # input_list = list(map(int,input_list))\n    sum_of_products = 1\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                sum_of_products = sum_of_products * arr[i] * arr[j] * arr[k]\n                #print(arr[i],arr[j],arr[k])\n    return sum_of_products\n",
        "num_ids": 145
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            s += arr[i] * arr[j]\n    return s\n",
        "num_ids": 52
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    print (\"The original list:\")\n    print (arr)\n    sublist = []\n    product = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sublist.append(arr[i:j+1])\n        for k in range(len(sublist)):\n            product = product*sublist[k][0]\n        print (sublist)\n        print (\"The product of all elements in sublist:\", product)\n        print (\"\")\n        product = 1\n        sublist = []\n    return product\n",
        "num_ids": 138
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum += arr[i] * arr[j]\n",
        "num_ids": 48
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    product = int(product)\n    sum = 0\n    for i in range(len(arr)):\n        if i == 0:\n            sum += product\n        else:\n            sum += product // i\n    return sum\n",
        "num_ids": 80
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    ans = 0\n    length = len(arr)\n    for i in range(length):\n        for j in range(i,length):\n            ans += arr[i]*arr[j]\n    return ans\n",
        "num_ids": 54
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            product = 1\n            for k in range(i,j+1):\n                product = product * arr[k]\n            sum = sum + product\n    return sum\n",
        "num_ids": 72
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def product(arr):\n        res = 1\n        for x in arr:\n            res *= x\n        return res\n",
        "num_ids": 31
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Code here\n    return (n ^ (1<<n.bit_length()))\n",
        "num_ids": 23
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit = 1<<1\n    n = n & bit\n    n = n | bit\n    return n\n",
        "num_ids": 27
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    while n > 0:\n        if n%2!= 0:\n            n = n ^ (1<<(len(bin(n))-1))\n        else:\n            n = n >> 1\n    return n\n",
        "num_ids": 53
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n << 1\n    n = n & 0b111111111\n    return n\nn = 5\nprint(bin(n))  # 00000000\nprint(bin(set_middle_bits(n))) # 00010101\n",
        "num_ids": 56
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = int(n)\n    n = n | (n << 1)\n    n = n & ~(n >> 1)\n    return n\n",
        "num_ids": 37
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | ((1 << 31) - 1)\n    n = n & ~(1 << 31)\n    return n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1984
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    '''\n    num = 21 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 1 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 2 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 3 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 4 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 5 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 6 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 7 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 8 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 9 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 10 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 11 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 12 \n    print (num) \n    '''\n    '''\n    num = 21 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 1 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 2 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 3 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 4 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 5 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 6 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 7 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 8 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 9 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 10 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 11 \n    print (num) \n    print (\"\\t\") \n    num = num ^ num << 12 \n    print (num) \n    '''\n    # x = int(input(\"Enter the number to toggle bits: \"))\n    # num = x\n    # print(x)\n    # num = num ^ num << 1\n    # print(num)\n    # num = num ^ num << 2\n    # print(num)\n    # num = num ^ num << 3\n    # print(num)\n    # num = num ^ num << 4\n    # print(num)\n    # num = num ^ num << 5\n    # print(num)\n    # num = num ^ num << 6\n    # print(num)\n    # num = num ^ num << 7\n    # print(num)\n    # num = num ^ num << 8\n    # print(num)\n    # num = num ^ num << 9\n    # print(num)\n    # num = num ^ num << 10\n    # print(num)\n    # num = num ^ num << 11\n    # print(num)\n    # num = num ^ num << 12\n    # print(num)\n    \n    # num = num ^ num << 1\n    # print(num)\n    # num = num ^ num << 2\n    # print(num)\n    # num = num ^ num << 3\n    # print(num)\n    # num = num ^ num << 4\n    # print(num)\n    # num = num ^ num << 5\n    # print(num)\n    # num = num ^ num << 6\n    # print(num)\n    # num = num ^ num << 7\n    # print(num)\n    # num = num ^ num << 8\n    # print(num)\n    # num = num ^ num << 9\n    # print(num)\n    # num = num ^ num << 10\n    # print(num)\n    # num = num ^ num << 11\n    # print(num)\n    # num = num ^ num << 12\n    # print(num)\n    # num = num ^ num << 13\n    # print(num)\n    # num = num ^ num << 14\n    # print(num)\n    # num = num ^ num << 15\n    # print(num)\n    # num = num ^ num << 16\n    # print(num)\n    # num = num ^ num << 17\n    # print(num)\n    # num = num ^ num << 18\n    # print(num)\n    # num = num ^ num << 19\n    # print(num)\n    # num = num ^ num << 20\n    # print(num)\n    # num = num ^ num << 21\n    # print(num)\n    # num = num ^ num << 22\n    # print(num)\n    # num = num ^ num << 23\n    # print(num)\n    # num = num ^ num << 24\n    # print(num)\n    # num = num ^ num << 25\n    # print(num)\n    # num = num ^ num << 26\n    # print(num)\n    # num = num ^ num << 27\n    # print(num)\n    # num = num ^ num << 28\n    # print(num)\n    # num = num ^ num << 29\n    # print(num)\n    # num = num ^ num << 30\n    # print(num)\n    # num = num ^ num << 31\n    # print(num)\n    # num = num ^ num << 32\n    # print(num)\n    # num = num ^ num << 33\n    # print(num)\n    # num = num ^ num << 34\n    # print(num)\n    # num = num ^ num << 35\n    # print(num)\n    # num = num ^ num << 36\n    # print(num)\n    # num = num ^ num << 37\n    # print(num)\n    # num = num ^ num << 38\n    # print(num)\n    # num = num ^ num << 39\n    # print(num)\n    # num = num ^ num << 40\n    # print(num)\n    # num = num ^ num << 41\n    # print(num)\n    # num = num ^ num << 42\n    # print(num)\n    # num = num ^ num << 43\n    # print(num)\n    # num = num ^ num << 44\n    # print(num)\n    # num = num ^ num << 45\n    # print(num)\n    # num = num ^ num << 46\n    # print(num)\n    # num = num ^ num << 47\n    # print(num)\n    # num = num ^ num << 48\n    # print(num)\n    # num = num ^ num << 49\n    # print(num)\n    # num = num ^ num << 50\n    # print(num)\n    # num = num ^ num << 51\n    # print(num)\n    # num = num ^ num << 52\n    # print(num)\n    # num = num ^ num << 53\n    # print(num)\n    # num = num ^ num << 54\n    # print(num)\n    # num = num ^ num << 55\n    # print(num)\n    # num = num ^ num << 56\n    # print(num)\n    # num = num ^ num << 57\n    # print(num)\n    # num = num ^ num << 58\n    # print(num)\n    # num = num ^ num << 59\n    # print(num)\n    # num = num ^ num << 60\n    # print(num)\n    # num = num ^ num << 61\n    # print(num)\n    # num = num ^ num << 62\n    # print(num)\n    # num = num ^ num << 63\n    # print(num)\n    # num = num ^ num << 64\n    # print(num)\n    # num = num ^ num << 65\n    # print(num",
        "num_ids": 1342
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # your code here\n    return n ^ (n>>1) \n    \n    \n    ",
        "num_ids": 24
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:]\n    print('the bit to be toggled is at position 1', n[1])\n    print('the bit to be toggled is at position -1', n[-2])\n    n = int(n[::-1], 2)\n    print('the toggled number is', bin(n))\n    return n\n    \ndef set_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:]\n    print('the bit to be toggled is at position 1', n[1])\n    print('the bit to be toggled is at position -1', n[-2])\n    n = int(n[::-1], 2)\n    print('the toggled number is', bin(n))\n    return n\n    \n    ",
        "num_ids": 90
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n - (n & -n)\n    return n\n",
        "num_ids": 18
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    if i == len(a):\n        return len(a) - 1\n    if a[i-1] <= x and a[i] > x:\n        return i\n    else:\n        return i-1\na = list(map(int,input().split()))\nx = int(input())\nn = len(a)\nprint(left_insertion(a, x))",
        "num_ids": 119
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a):\n        return i\n    else:\n        return i-1\n",
        "num_ids": 42
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i:\n        return a[:i]\n    else:\n        return a + [x]\n",
        "num_ids": 43
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        return 0\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if x > a[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "num_ids": 73
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\ndef insertion_sort(a):\n    '''\n    Write a function to sort an array of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(1, n):\n        key = a[i]\n        j = i - 1\n        while j >= 0 and a[j] > key:\n            a[j + 1] = a[j]\n            j = j - 1\n        a[j + 1] = key\n    return a\ndef selection_sort(a):\n    '''\n    Write a function to sort an array of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(n - 1):\n        min = i\n        for j in range(i + 1, n):\n            if a[j] < a[min]:\n                min = j\n        a[i], a[min] = a[min], a[i]\n    return a\ndef shell_sort(a):\n    '''\n    Write a function to sort an array of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and a[j - gap] > a[j]:\n                a[j], a[j - gap] = a[j - gap], a[j]\n                j -= gap\n        gap = gap // 2\n    return a\ndef bucket_sort(a):\n    '''\n    Write a function to sort an array of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    max_value = max(a)\n    min_value = min(a)\n    bucket_size = max_value // len(a)\n    buckets = [[] for i in range(len(a))]\n    for i in range(len(a)):\n        j = i\n        while a[j] > max_value:\n            j += 1\n        index = j // bucket_size\n        buckets[index].append(a[i])\n    for i in range(len(a)):\n        j = 0\n        while len(buckets[j]) > 0:\n            a[i] = buckets[j].pop(0)\n            j += 1\n    return a\ndef merge_sort(a):\n    '''\n    Write a function to sort an array of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    def merge(a, start, mid, end):\n        n1 = mid - start + 1\n        n2 = end - mid\n        L = [0] * n1\n        R = [0] * n2\n        for i in range(n1):\n            L[i] = a[start + i]\n        for j in range(n2):\n            R[j] = a[mid + j + 1]\n        i = 0\n        j = 0\n        k = start\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                a[k] = L[i]\n                i += 1\n            else:\n                a[k] = R[j]\n                j += 1\n            k += 1\n        while i < n1:\n            a[k] = L[i]\n            i += 1\n            k += 1\n        while j < n2:\n            a[k] = R[j]\n            j += 1\n            k += 1\n    def merge_sort2(a, start, end):\n        if end <= start:\n            return\n        mid = start + ((end - start) // 2)\n        merge_sort2(a, start, mid)\n        merge_sort2(a, mid + 1, end)\n        merge(a, start, mid, end)\n    return merge_sort2(a, 0, len(a))\ndef quick_sort(a):\n    '''\n    Write a function to sort an array of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    def partition(a, p, r):\n        x = a[r]\n        i = p - 1\n        for j in range(p, r):\n            if a[j] <= x:\n                i = i + 1\n                a[i], a[j] = a[j], a[i]\n        a[i + 1], a[r] = a[r], a[i + 1]\n        return i + 1\n    def quick_sort(a, p, r):\n        if p < r:\n            q = partition(a, p, r)\n            quick_sort(a, p, q - 1)\n            quick_sort(a, q + 1, r)\n    return quick_sort(a, 0, len(a) - 1)\ndef heap_sort(a):\n    '''\n    Write a function to sort an array of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    def parent(i):\n        return (i - 1) // 2\n    def swap(a, i, j):\n        a[i], a[j] = a[j], a[i]\n    def max_heapify(a, heap_size, i):\n        l = 2 * i + 1\n        r = 2 * i + 2\n        largest = i\n        if l < heap_size and a[l] > a[largest]:\n            largest = l\n        if r < heap_size and a[r] > a[largest]:\n            largest = r\n        if largest!= i:\n            swap(a, i, largest)\n            max_heapify(a, heap_size, largest)\n    def build_heap(a):\n        heap_size = len(a)\n        for i in range(parent(len(a) - 1), -1, -1):\n            max_heapify(a, heap_size, i)\n    def heap_sort(a):\n        build_heap(a)\n        for i in range(len(a) - 1, -1, -1):\n            swap(a, 0, i)\n            heap_size = heap_size - 1\n            max_heapify(a, heap_size, 0)\n    return heap_sort(a)\ndef heap_sort_index(a):\n    '''\n    Write a function to sort an array of numbers in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    def parent(i):\n        return (i - 1) // 2\n    def swap(a, i, j):\n        a[i], a",
        "num_ids": 36
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    if x == a[i]:\n        return i\n    return i - 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return 0\n    if x == a[i]:\n        return i\n    return i + 1\ndef left_deletion(a, x):\n    '''\n    Write a function to locate the left deletion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    if x == a[i - 1]:\n        return i - 1\n    return i\ndef right_deletion(a, x):\n    '''\n    Write a function to locate the right deletion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a) - 1\n    if x == a[i - 1]:\n        return i - 1\n    return i\ndef test_left_insertion():\n    a = [0,1,2,3,4,5]\n    assert left_insertion(a, -1) == 4\n    assert left_insertion(a, 2) == 4\n    assert left_insertion(a, 5) == 6\n    assert left_insertion(a, 8) == 7\n    assert left_insertion(a, 9) == 8\n    assert left_insertion(a, 10) == 9\n    assert left_insertion(a, 11) == 10\n    assert left_insertion(a, 12) == 11\n    assert left_insertion(a, 13) == 12\n    assert left_insertion(a, 14) == 13\n    assert left_insertion(a, 15) == 14\n    assert left_insertion(a, 16) == 14\n    assert left_insertion(a, 17) == 14\n    assert left_insertion(a, -1) == 0\n    assert left_insertion(a, 0) == 0\n    assert left_insertion(a, 1) == 0\n    assert left_insertion(a, 2) == 0\n    assert left_insertion(a, 3) == 0\n    assert left_insertion(a, 4) == 0\n    assert left_insertion(a, 5) == 0\n    assert left_insertion(a, 6) == 0\n    assert left_insertion(a, 7) == 0\n    assert left_insertion(a, 8) == 0\n    assert left_insertion(a, 9) == 0\n    assert left_insertion(a, 10) == 0\n    assert left_insertion(a, 11) == 0\n    assert left_insertion(a, 12) == 0\n    assert left_insertion(a, 13) == 0\n    assert left_insertion(a, 14) == 0\n    assert left_insertion(a, 15) == 0\n    assert left_insertion(a, 16) == 0\n    assert left_insertion(a, 17) == 0\n    assert left_insertion(a, -2) == 4\n    assert left_insertion(a, -3) == 3\n    assert left_insertion(a, -4) == 2\n    assert left_insertion(a, -5) == 1\n    assert left_insertion(a, -6) == 0\n    assert left_insertion(a, -7) == 0\n    assert left_insertion(a, -8) == 0\n    assert left_insertion(a, -9) == 0\n    assert left_insertion(a, -10) == 0\n    assert left_insertion(a, -11) == 0\n    assert left_insertion(a, -12) == 0\n    assert left_insertion(a, -13) == 0\n    assert left_insertion(a, -14) == 0\n    assert left_insertion(a, -15) == 0\n    assert left_insertion(a, -16) == 0\n    assert left_insertion(a, -17) == 0\n    assert left_insertion(a, -18) == 0\n    assert left_insertion(a, -19) == 0\n    assert left_insertion(a, -20) == 0\n    assert left_insertion(a, -21) == 0\n    assert left_insertion(a, -22) == 0\n    assert left_insertion(a, -23) == 0\n    assert left_insertion(a, -24) == 0\n    assert left_insertion(a, -25) == 0\n    assert left_insertion(a, -26) == 0\n    assert left_insertion(a, -27) == 0\n    assert left_insertion(a, -28) == 0\n    assert left_insertion(a, -29) == 0\n    assert left_insertion(a, -30) == 0\n    assert left_insertion(a, -31) == 0\n    assert left_insertion(a, -32) == 0\n    assert left_insertion(a, -33) == 0\n    assert left_insertion(a, -34) == 0\n    assert left_insertion(a, -35) == 0\n    assert left_insertion(a, -36) == 0\n    assert left_insertion(a, -37) == 0\n    assert left_insertion(a, -38) == 0\n    assert left_insertion(a, -39) == 0\n    assert left_insertion(a, -40) == 0\n    assert left_insertion(a, -41) == 0\n    assert left_insertion(a, -42) == 0\n    assert left_insertion(a, -43) == 0\n    assert left_insertion(a, -44) == 0\n    assert left_insertion(a, -45) == 0\n    assert left_insertion(a, -46) == 0\n    assert left_insertion(a, -47) == 0\n    assert left_insertion(a, -48) == 0\n    assert left_insertion(a, -49) == 0\n    assert left_insertion(a, -50) == 0\n    assert left_insertion(a, -51) == 0\n    assert left_insertion(a, -52) == 0\n    assert left_insertion(a, -53) == 0\n    assert left_insertion(a, -54) == 0\n    assert left_insertion(a, -55) == 0\n    assert left_insertion(a, -56) == 0\n    assert left_insertion(a, -57) == 0\n    assert left_insertion(a, -58) == 0\n    assert left_insertion(a, -59) == 0\n    assert left_insertion(a, -60) == 0\n    assert left_insertion(a, -61) == 0\n    assert left_insertion(a, -62) == 0\n    assert left_insertion(a, -63) == 0\n    assert left_insertion(a, -64) == 0\n    assert left_insertion(a, -65) == 0\n    assert left_insertion(a, -66) == 0\n    assert left_insertion(a, -67) == 0\n    assert left_insertion(a, -68) == 0\n    assert left_insertion(a, -69) == 0\n    assert left_insertion(a, -70) == 0\n    assert left_insertion(a, -71) == 0\n    asser",
        "num_ids": 1585
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 0\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + ((hi - lo) // 2)\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n",
        "num_ids": 75
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    size = len(a)\n    left = bisect.bisect_left(a, x)\n    if left == size:\n        return size\n    else:\n        return left\n",
        "num_ids": 45
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        if x >= a[0]:\n            return 0\n        else:\n            return 1\n    if x >= a[0]:\n        return 0\n    i = 0\n    while i < len(a):\n        if a[i] >= x:\n            if a[i] > x:\n                return i\n            else:\n                break\n        i += 1\n    return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        if x <= a[0]:\n            return 0\n        else:\n            return 1\n    if x <= a[0]:\n        return 0\n    i = 0\n    while i < len(a):\n        if a[i] > x:\n            if a[i] < x:\n                return i\n            else:\n                break\n        i += 1\n    return i\ndef bisect_left(a, x, lo=None, hi=None):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if lo is None:\n        lo = 0\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x > a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\ndef bisect_right(a, x, lo=None, hi=None):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if lo is None:\n        lo = 0\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\ndef insort(a, x):\n    '''\n    Write a function to insert a value into a sorted list without breaking the sort.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    if len(a) == 1:\n        return\n    i = bisect_left(a, x)\n    while i:\n        a[i] = x\n        i -= 1\n",
        "num_ids": 54
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string) is not None:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print(\"String is starting with vowel\")\n    else:\n        print(\"String is not starting with vowel\")\n",
        "num_ids": 39
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # return True if string is starting with a vowel else return False \n    if re.match(regex,string) is None:\n        return False\n    else:\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 30
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'[aeiouAEIOU]',string):\n            print(f'It is starting with vowel.')\n        else:\n            print(f'It is not starting with vowel.')\n    else:\n        print(f'It is not a valid string')\ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'[aeiouAEIOU]$',string):\n            print(f'It is ending with vowel.')\n        else:\n            print(f'It is not ending with vowel.')\n    else:\n        print(f'It is not a valid string')\ndef check_str3(string): \n    '''\n    Write a function to check whether the given string is in title case or not using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[A-Z][A-Za-z0-9]*$',string):\n            print(f'It is in title case.')\n        else:\n            print(f'It is not in title case.')\n    else:\n        print(f'It is not a valid string')\ndef check_str4(string): \n    '''\n    Write a function to check whether the given string is in upper case or not using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[A-Z][A-Za-z0-9]*$',string):\n            print(f'It is in upper case.')\n        else:\n            print(f'It is not in upper case.')\n    else:\n        print(f'It is not a valid string')\ndef check_str5(string): \n    '''\n    Write a function to check whether the given string is in lower case or not using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[A-Za-z0-9]*$',string):\n            print(f'It is in lower case.')\n        else:\n            print(f'It is not in lower case.')\n    else:\n        print(f'It is not a valid string')\ndef check_str6(string): \n    '''\n    Write a function to check whether the given string contains any numbers using regex.\n    '''\n    if re.match(regex,string):\n        if re.search(r'[0-9]',string):\n            print(f'It contains number.')\n        else:\n            print(f'It does not contain number')\n    else:\n        print(f'It is not a valid string')\ndef check_str7(string): \n    '''\n    Write a function to check whether the given string contains any special symbols or not using regex.\n    '''\n    if re.match(regex,string):\n        if re.search(r'[!@#$%^&*()<>{}|:;?/.,]',string):\n            print(f'It contains symbol.')\n        else:\n            print(f'It does not contains symbol')\n    else:\n        print(f'It is not a valid string')\ndef check_str8(string): \n    '''\n    Write a function to check whether the given string contains only alphabets using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[a-zA-Z]*$',string):\n            print(f'It contains alphabets.')\n        else:\n            print(f'It does not contain alphabets')\n    else:\n        print(f'It is not a valid string')\ndef check_str9(string): \n    '''\n    Write a function to check whether the given string contains only numbers using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[0-9]*$',string):\n            print(f'It contains numbers.')\n        else:\n            print(f'It does not contain numbers')\n    else:\n        print(f'It is not a valid string')\ndef check_str10(string): \n    '''\n    Write a function to check whether the given string contains any whitespaces using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'[\\s]',string):\n            print(f'It contains whitespaces.')\n        else:\n            print(f'It does not contain whitespaces')\n    else:\n        print(f'It is not a valid string')\ndef check_str11(string): \n    '''\n    Write a function to check whether the given string contains any symbols using regex.\n    '''\n    if re.match(regex,string):\n        if re.search(r'[!@#$%^&*()<>{}|:;?/.,]',string):\n            print(f'It contains symbol.')\n        else:\n            print(f'It does not contain symbol')\n    else:\n        print(f'It is not a valid string')\ndef check_str12(string): \n    '''\n    Write a function to check whether the given string contains only uppercase letters using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[A-Z]*$',string):\n            print(f'It contains uppercase letters.')\n        else:\n            print(f'It does not contain uppercase letters')\n    else:\n        print(f'It is not a valid string')\ndef check_str13(string): \n    '''\n    Write a function to check whether the given string contains only lowercase letters using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[a-z]*$',string):\n            print(f'It contains lowercase letters.')\n        else:\n            print(f'It does not contain lowercase letters')\n    else:\n        print(f'It is not a valid string')\ndef check_str14(string): \n    '''\n    Write a function to check whether the given string contains only digits using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[0-9]*$',string):\n            print(f'It contains digits.')\n        else:\n            print(f'It does not contain digits')\n    else:\n        print(f'It is not a valid string')\ndef check_str15(string): \n    '''\n    Write a function to check whether the given string contains any white spaces using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'[ \\t\\n\\r\\f\\v]',string):\n            print(f'It contains whitespaces.')\n        else:\n            print(f'It does not contain whitespaces')\n    else:\n        print(f'It is not a valid string')\ndef check_str16(string): \n    '''\n    Write a function to check whether the given string contains only special symbols or not using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'[!@#$%^&*()<>{}|:;?/.,]',string):\n            print(f'It contains symbol.')\n        else:\n            print(f'It does not contain symbol')\n    else:\n        print(f'It is not a valid string')\ndef check_str17(string): \n    '''\n    Write a function to check whether the given string contains only alphabets using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[a-zA-Z]*$',string):\n            print(f'It contains alphabets.')\n        else:\n            print(f'It does not contain alphabets')",
        "num_ids": 69
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # Complete this function\n    match = re.match(regex, string)\n    if match:\n        return 'True'\n    else:\n        return 'False'\n",
        "num_ids": 42
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex,string)\n",
        "num_ids": 14
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        return True\n    else: \n        return False\n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][a-z0-9_]*')\n    if pattern.match(string): \n        print(\"YES\") \n    else: \n        print(\"NO\") ",
        "num_ids": 60
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def sum(n):\n        if n == 0:\n            return 1\n        else:\n            return n * sum(n - 1)\n    return sum(n)\n",
        "num_ids": 42
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return (n**2 + 2 * n) / 2\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n        \n'''\n------------------------------------------------------------------------------------------------------------------------\n",
        "num_ids": 5
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 1\n    return n * geometric_sum(n - 1)\n    \nprint(geometric_sum(4)",
        "num_ids": 37
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 1/n * geometric_sum(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    return n*(n-1)/2\n",
        "num_ids": 24
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 1\n    else:\n        return n+geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n > 0:\n        for i in range(1, n + 1):\n            number = i\n            for j in range(i):\n                number += 1\n                if number <= n:\n                    print(number, end=\" \")\n        print()\n    else:\n        print(\"Please enter positive number\")\n",
        "num_ids": 75
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True:\n        i = i + 1\n        n1 = (i*(i+1))//2\n        if n == n1:\n            break\n    return i-1\n",
        "num_ids": 51
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        n = i**2+i\n        if (n)//(i+1) == n//(i+1):\n            return i+1\n",
        "num_ids": 50
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # to find the index of the first digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_smallest_triangular_number(n): \n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the index of first digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_biggest_triangular_number(n): \n    '''\n    Write a python function to find the index of the biggest triangular number with n digits. https://www.geeksforgeeks.org/index-of-biggest-triangular-number-with-n-digits/\n    '''\n    # find the index of last digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_smallest_triangular_number_of_3_digits(n): \n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the index of first digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_biggest_triangular_number_of_3_digits(n): \n    '''\n    Write a python function to find the index of the biggest triangular number with n digits. https://www.geeksforgeeks.org/index-of-biggest-triangular-number-with-n-digits/\n    '''\n    # find the index of last digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_smallest_triangular_number_of_4_digits(n): \n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the index of first digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_biggest_triangular_number_of_4_digits(n): \n    '''\n    Write a python function to find the index of the biggest triangular number with n digits. https://www.geeksforgeeks.org/index-of-biggest-triangular-number-with-n-digits/\n    '''\n    # find the index of last digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_biggest_triangular_number_of_5_digits(n): \n    '''\n    Write a python function to find the index of the biggest triangular number with n digits. https://www.geeksforgeeks.org/index-of-biggest-triangular-number-with-n-digits/\n    '''\n    # find the index of last digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_smallest_triangular_number_of_5_digits(n): \n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the index of first digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_biggest_triangular_number_of_6_digits(n): \n    '''\n    Write a python function to find the index of the biggest triangular number with n digits. https://www.geeksforgeeks.org/index-of-biggest-triangular-number-with-n-digits/\n    '''\n    # find the index of last digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_smallest_triangular_number_of_6_digits(n): \n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the index of first digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_biggest_triangular_number_of_7_digits(n): \n    '''\n    Write a python function to find the index of the biggest triangular number with n digits. https://www.geeksforgeeks.org/index-of-biggest-triangular-number-with-n-digits/\n    '''\n    # find the index of last digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_smallest_triangular_number_of_7_digits(n): \n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the index of first digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_biggest_triangular_number_of_8_digits(n): \n    '''\n    Write a python function to find the index of the biggest triangular number with n digits. https://www.geeksforgeeks.org/index-of-biggest-triangular-number-with-n-digits/\n    '''\n    # find the index of last digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_smallest_triangular_number_of_8_digits(n): \n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the index of first digit \n    # and store its value in res \n    res = 0 \n    while n: \n        res += pow(9, n-1) \n        n -= 1\n    return res \ndef find_biggest_triangular_number_of_9_digits(n): \n    '''\n    Write a python function to find the index of the biggest triangular number with n digits. https://www.geeksforgeeks.org/index-of-bi",
        "num_ids": 36
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    size = int(math.log(n,2))\n    for i in range(size):\n        d = int(n-2**(i+1)-2**(i+2))\n        if d>0:\n            return i+1\n    return 0\n",
        "num_ids": 64
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def triangular(n):\n        return int((math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2))) )\n",
        "num_ids": 43
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i=1\n    n2 = n*n\n    while(i<n):\n        i+=1\n        print(i,n2)\n        n2 = int(n*(n+1)/2)\n",
        "num_ids": 53
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(math.log10(n))+1\n    print(n)\n    for i in range(n):\n        print(int(math.pow(10, i)))\n        ",
        "num_ids": 48
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math \n    x = int(math.sqrt(n))\n    i = 0\n    while i < x:\n        if (n - i * (i + 1) / 2) == 0:\n            return i\n        i = i + 1\n    return -1\n",
        "num_ids": 67
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    def triangular(n):\n        temp = n\n        index = 0\n        while temp > 0:\n            temp -= temp\n            index += 1\n        return index\n    return triangular(n) - 1\n",
        "num_ids": 57
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(test_tup)\nprint(tuple_to_dict(test_tup))\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}\n    # test_tup = (1, 2, 3, 4, 5, 6)\n    # print(tuple_to_dict(test_tup))\n",
        "num_ids": 70
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    if test_tup == () :\n        return {}\n    \n    keys = list(test_tup)\n    values = list(test_tup)\n    \n    dct = dict(zip(keys, values))\n    \n    return dct\n",
        "num_ids": 64
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {el: test_tup.index(el) for el in test_tup}\n",
        "num_ids": 25
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n    \n",
        "num_ids": 50
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val_dict = {}\n    for i in range(0, len(test_tup)-1):\n        key_val_dict[test_tup[i]] = test_tup[i+1]\n",
        "num_ids": 54
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for idx, val in enumerate(test_tup):\n        if idx == 0:\n            d[val] = test_tup[idx + 1]\n        elif idx == len(test_tup) - 1:\n            d[val] = test_tup[idx - 1]\n        else:\n            d[val] = test_tup[idx + 1] + test_tup[idx - 1]\n    return d\n    \ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given key-value dictionary to tuple using adjacent elements.\n    '''\n    tup = ()\n    for key, val in test_dict.items():\n        tup = tup + (val, key)\n    return tup\n    \ndef str_int_chk(str_input):\n    '''\n    Write a function to convert the given string to integer using adjacent elements.\n    '''\n    test_int = None\n    if str_input[0] == '-':\n        test_int = -1\n    else:\n        test_int = 0\n    for i in range(len(str_input)):\n        if str_input[i].isnumeric():\n            test_int = test_int + (int(str_input[i]) * 10 ** (len(str_input) - i - 1))\n    return test_int\n    \ndef is_symmetric(test_tree):\n    '''\n    Write a function to check whether the given tree is a symmetric tree or not.\n    '''\n    if test_tree.left and test_tree.right:\n        if test_tree.left.val == test_tree.right.val:\n            return is_symmetric(test_tree.left) and is_symmetric(test_tree.right)\n        else:\n            return False\n    return True\n    \ndef is_asymmetric(test_tree):\n    '''\n    Write a function to check whether the given tree is a asymmetric tree or not.\n    '''\n    if test_tree.left and test_tree.right:\n        if test_tree.left.val == test_tree.right.val:\n            return is_asymmetric(test_tree.left) and is_asymmetric(test_tree.right)\n        else:\n            return True\n    return False\n    \ndef is_symmetric_balanced(test_tree):\n    '''\n    Write a function to check whether the given tree is a symmetric tree or not.\n    '''\n    if test_tree.left and test_tree.right:\n        if test_tree.left.val == test_tree.right.val:\n            return is_symmetric_balanced(test_tree.left) and is_symmetric_balanced(test_tree.right)\n        else:\n            return False\n    return True\n    \ndef is_asymmetric_balanced(test_tree):\n    '''\n    Write a function to check whether the given tree is a asymmetric tree or not.\n    '''\n    if test_tree.left and test_tree.right:\n        if test_tree.left.val == test_tree.right.val:\n            return is_asymmetric_balanced(test_tree.left) and is_asymmetric_balanced(test_tree.right)\n        else:\n            return False\n    return True\n    \ndef is_balanced_tree(test_tree):\n    '''\n    Write a function to check whether the given tree is balanced or not.\n    '''\n    if test_tree.left and test_tree.right:\n        if is_balanced_tree(test_tree.left) and is_balanced_tree(test_tree.right):\n            return True\n        else:\n            return False\n    return True\n    \ndef is_path_exists(test_tree, path):\n    '''\n    Write a function to check whether the given path exists or not.\n    '''\n    if test_tree.val == path[0]:\n        if len(path) == 1:\n            return True\n        return is_path_exists(test_tree.left, path[1:]) or is_path_exists(test_tree.right, path[1:])\n    return False\n    \ndef is_path_exist(test_tree, path):\n    '''\n    Write a function to check whether the given path exists or not.\n    '''\n    if test_tree.val == path[0]:\n        if len(path) == 1:\n            return True\n        return is_path_exist(test_tree.left, path[1:]) or is_path_exist(test_tree.right, path[1:])\n    return False\n    \ndef is_path_exists_iterative(test_tree, path):\n    '''\n    Write a function to check whether the given path exists or not.\n    '''\n    curr_path = []\n    path_exists = False\n    curr_path.append(test_tree.val)\n    while len(curr_path) > 0:\n        curr_path = curr_path[1:]\n        path_exists = path_exists or is_path_exist(test_tree.left, curr_path)\n        path_exists = path_exists or is_path_exist(test_tree.right, curr_path)\n        if curr_path:\n            curr_path.append(test_tree.val)\n    return path_exists\n    \ndef is_path_exist_iterative(test_tree, path):\n    '''\n    Write a function to check whether the given path exists or not.\n    '''\n    curr_path = []\n    path_exists = False\n    curr_path.append(test_tree.val)\n    while len(curr_path) > 0:\n        curr_path = curr_path[1:]\n        path_exists = path_exists or is_path_exist(test_tree.left, curr_path)\n        path_exists = path_exists or is_path_exist(test_tree.right, curr_path)\n        if curr_path:\n            curr_path.append(test_tree.val)\n    return path_exists\n    \ndef list_to_tree(list_input):\n    '''\n    Write a function to convert the given list to a binary tree.\n    '''\n    root = BinaryTreeNode(list_input[0])\n    if len(list_input) > 1:\n        root.left = list_to_tree(list_input[1:len(list_input)])\n    if len(list_input) > 1:\n        root.right = list_to_tree(list_input[1:len(list_input)])\n    return root\n    \ndef tree_to_list(test_tree):\n    '''\n    Write a function to convert the given tree to a list.\n    '''\n    if test_tree:\n        if test_tree.left:\n            return tree_to_list(test_tree.left) + [test_tree.val] + tree_to_list(test_tree.right)\n        return [test_tree.val]\n    return []\n    \ndef bst_to_tree(bst_input):\n    '''\n    Write a function to convert the given BST to a tree.\n    '''\n    if bst_input:\n        root = BinaryTreeNode(bst_input.val)\n        root.left = bst_to_tree(bst_input.left)\n        root.right = bst_to_tree(bst_input.right)\n        return root\n    return None\n    \ndef tree_to_bst(test_tree):\n    '''\n    Write a function to convert the given tree to a binary search tree.\n    '''\n    if test_tree:\n        left = tree_to_bst(test_tree.left)\n        right = tree_to_bst(test_tree.right)\n        root = BinaryTreeNode(test_tree.val)\n        root.left = left\n        root.right = right\n        return root\n    return None\n    \ndef inorder_traversal(test_tree):\n    '",
        "num_ids": 96
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = dict()\n    for i in range(0, len(test_tup)-1, 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n",
        "num_ids": 59
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for x in range(len(test_tup)):\n        d[test_tup[x]] = test_tup[x + 1]\n    return d\n",
        "num_ids": 47
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==1:\n        return False\n    elif s[0]==s[1] and s[0]==s[2] and s[0]==s[3]:\n        return True\n    else:\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # declare a empty list\n    ret_val = []\n    # iterate through the list\n    for i in range(len(s)) :\n        if s[i] not in ret_val :\n            ret_val.append(s[i])\n        else :\n            return False\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    ch = \"a\"\n    for i in range(len(s) -1) :\n        if ch!= s[i] :\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s1 = s[0]\n    for i in range(1,len(s)) :\n        if s1!= s[i] :\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return True\n    if s[0]!= s[1] :\n        return False\n    return all_Characters_Same(s[1:])\n    \nprint(all_Characters_Same('aba'))\nprint(all_Characters_Same(''))\nprint(all_Characters_Same('a'))\nprint(all_Characters_Same('abcd'))\n",
        "num_ids": 105
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if(len(s)==0):\n        return True\n    else:\n        return False\n    \ndef all_Characters_Same_2(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s)==len(set(s))\n",
        "num_ids": 16
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s)==len(set(s))\n",
        "num_ids": 16
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    char = s[0]\n    for c in s :\n        if c!= char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    chars = {}\n    for c in s :\n        if c in chars :\n            return False\n        chars[c] = 1\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    chars = {}\n    for c in s :\n        if c not in chars :\n            chars[c] = 1\n        else :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_first(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    firstChar = s[0]\n    for c in s[1:] :\n        if c == firstChar :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_last(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    lastChar = s[-1]\n    for c in s[:-1] :\n        if c == lastChar :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_last2(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    last2Char = s[-2:]\n    for c in s[:-2] :\n        if c == last2Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_first2(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    first2Char = s[:2]\n    for c in s[2:] :\n        if c == first2Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_last3(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    last3Char = s[-3:]\n    for c in s[:-3] :\n        if c == last3Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_first3(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    first3Char = s[:3]\n    for c in s[3:] :\n        if c == first3Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_last4(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    last4Char = s[-4:]\n    for c in s[:-4] :\n        if c == last4Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_first4(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    first4Char = s[:4]\n    for c in s[4:] :\n        if c == first4Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_last5(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    last5Char = s[-5:]\n    for c in s[:-5] :\n        if c == last5Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_first5(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    first5Char = s[:5]\n    for c in s[5:] :\n        if c == first5Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_last6(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    last6Char = s[-6:]\n    for c in s[:-6] :\n        if c == last6Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_first6(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    first6Char = s[:6]\n    for c in s[6:] :\n        if c == first6Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_last7(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    last7Char = s[-7:]\n    for c in s[:-7] :\n        if c == last7Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_first7(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    first7Char = s[:7]\n    for c in s[7:] :\n        if c == first7Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_last8(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    last8Char = s[-8:]\n    for c in s[:-8] :\n        if c == last8Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_first8(s) :\n    '''\n    Write a python function to check whether all the characters are distinct or not.\n    '''\n    \n    if len(s) < 1 :\n        return False\n    \n    first8Char = s[:8]\n    for c in s[8:] :\n        if c == first8Char :\n            return False\n    return True\n    \n    \n    \ndef all_Chars_Distinct_Unordered_except_last9(s) :\n    '",
        "num_ids": 87
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return True if len(s) == 0 or s[0] == s[-1] else False\n",
        "num_ids": 26
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    s = (1.0/2.0) * (a * (a-1) * (a-2))\n    return s\n",
        "num_ids": 39
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_3 = side**3\n    return math.sqrt(side_3/2)\n",
        "num_ids": 25
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = ((6*side*side) * (1/4)) - (1/12)\n    return area\n",
        "num_ids": 29
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = (side**2) / 2\n    area = math.sqrt(a)\n    return area\ndef area_of_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi * radius**2\n    return area\ndef area_of_pyramid(base,height):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    area = (base**2)*height/3\n    return area\ndef area_of_triangle(base,height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    area = (base*height)/2\n    return area\ndef area_of_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    area = side**2\n    return area\ndef area_of_rectangle(base,height):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = base * height\n    return area\ndef area_of_rhombus(side_a,side_b):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    area = (side_a*side_b)/2\n    return area\ndef area_of_hexagon(radius):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    area = (3*radius*radius)/2\n    return area\ndef area_of_hexagon_pyramid(base,height):\n    '''\n    Write a function to caluclate the area of a hexagon pyramid.\n    '''\n    area = (6*(base**2))/(3*height)\n    return area\ndef volume_of_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    volume = ((1/3)*side**3)\n    return volume\ndef volume_of_circle(radius):\n    '''\n    Write a function to caluclate the volume of a circle.\n    '''\n    volume = math.pi * (radius**3)/3\n    return volume\ndef volume_of_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    volume = (base**2)*height/3\n    return volume\ndef volume_of_triangle(side,height):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    volume = (1/3)*side*height\n    return volume\ndef volume_of_square(side):\n    '''\n    Write a function to caluclate the volume of a square.\n    '''\n    volume = side**2\n    return volume\ndef volume_of_rectangle(side,height):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    volume = side*height\n    return volume\ndef volume_of_rhombus(side_a,side_b):\n    '''\n    Write a function to caluclate the volume of a rhombus.\n    '''\n    volume = (1/2)*(side_a*side_b)\n    return volume\ndef volume_of_hexagon(radius):\n    '''\n    Write a function to caluclate the volume of a hexagon.\n    '''\n    volume = (6*radius**2)/3\n    return volume\ndef volume_of_hexagon_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a hexagon pyramid.\n    '''\n    volume = (6*(base**2))/(3*height)\n    return volume\ndef volume_of_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    volume = (4/3)*math.pi*(radius**2)*height\n    return volume\ndef volume_of_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    volume = (4/3)*math.pi*(radius**2)*height\n    return volume\ndef volume_of_cone_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a cone pyramid.\n    '''\n    volume = (4/3)*math.pi*(base**2)*height\n    return volume\ndef volume_of_cylinder_pyramid(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder pyramid.\n    '''\n    volume = (4/3)*math.pi*(radius**2)*height\n    return volume\ndef area_of_cone(radius,height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    area = (4/3)*math.pi*radius*height\n    return area\ndef area_of_cone_pyramid(base,height):\n    '''\n    Write a function to caluclate the area of a cone pyramid.\n    '''\n    area = (4/3)*math.pi*(base**2)*height\n    return area\ndef volume_of_cylinder_pyramid_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder pyramid cone.\n    '''\n    volume = volume_of_cylinder_pyramid(radius,height) + area_of_cone_pyramid(radius,height)\n    return volume\ndef volume_of_cone_pyramid_cone(base,height):\n    '''\n    Write a function to caluclate the volume of a cone pyramid cone.\n    '''\n    volume = volume_of_cone_pyramid(base,height) + area_of_cone_pyramid(base,height)\n    return volume\ndef volume_of_cone_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone cone.\n    '''\n    volume = volume_of_cone(radius,height) + area_of_cone(radius,height)\n    return volume\ndef volume_of_cone_cone_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a cone cone pyramid.\n    '''\n    volume = volume_of_cone(base,height) + area_of_cone_pyramid(base,height)\n    return volume\ndef volume_of_cylinder_cone_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder cone cone.\n    '''\n    volume = volume_of_cylinder(radius,height) + volume_of_cone(radius,height)\n    return volume\ndef volume_of_cone_cone_pyramid_cone(base,height):\n    '''\n    Write a function to caluclate the volume of a cone cone pyramid cone.\n    '''\n    volume = volume_of_cone(base,height) + volume_of_cone_pyramid(base,height)\n    return volume\ndef volume_of_cylinder_cone_cone_pyramid(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder cone cone pyramid.\n    '''\n    volume = volume_of_cylinder(radius,height) + volume_of_cone(radius,height)\n    return volume\ndef volume_of_cone_cone_pyramid_cone_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a cone cone pyramid cone pyramid.\n    '''\n    volume = volume_of_cone(base,height) + volume_of_cone_pyramid(base,height)\n    return volume\ndef volume_of_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(radius**3)/3\n    return volume\ndef volume_of_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    volume = (1/3)*base*height\n    return volume\ndef volume_of_pyramid_pyramid(base,heigh",
        "num_ids": 33
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6 * (side ** 2) / 4\ndef area_rectangle(length, width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return length * width\ndef area_triangle(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base * height / 2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius ** 2\ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return (radius ** 2) * math.pi * height / 3\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4 * math.pi * radius ** 3 / 3\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi * radius ** 2 * height / 3\ndef volume_cone_cone(radius1, radius2, height):\n    '''\n    Write a function to calculate the volume of a cone-cone intersection.\n    '''\n    return math.pi * radius1 ** 2 * radius2 / 3 * height\ndef volume_sphere_sphere(radius1, radius2):\n    '''\n    Write a function to calculate the volume of a sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius1 ** 2 * radius2 ** 2\ndef volume_cylinder_cylinder(radius1, radius2, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cylinder intersection.\n    '''\n    return math.pi * radius1 ** 2 * radius2 * height\ndef volume_cone_sphere(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cone-sphere intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height\ndef volume_sphere_cone(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a sphere-cone intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height / 3\ndef volume_cylinder_cone(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cylinder-cone intersection.\n    '''\n    return math.pi * radius ** 2 * radius2 * height / 3\ndef volume_sphere_sphere(radius, radius2):\n    '''\n    Write a function to calculate the volume of a sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius ** 2 * radius2 ** 2\ndef volume_cylinder_cylinder(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cylinder-cylinder intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height\ndef volume_cone_sphere_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cone-sphere-cone intersection.\n    '''\n    return ((radius1 ** 2) + (radius2 ** 2)) * math.pi * radius3 * height\ndef volume_sphere_sphere_sphere(radius1, radius2, radius3):\n    '''\n    Write a function to calculate the volume of a sphere-sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius1 ** 2 * radius2 ** 2 * radius3 ** 2\ndef volume_cylinder_sphere_cylinder(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cylinder-sphere-cylinder intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height\ndef volume_cone_cylinder_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cone-cylinder-cone intersection.\n    '''\n    return ((radius1 ** 2) + (radius2 ** 2) + (radius3 ** 2)) * math.pi * height\ndef volume_sphere_cylinder_sphere(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a sphere-cylinder-sphere intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height\ndef volume_cylinder_cone_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cone-cone intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height / 3\ndef volume_sphere_cylinder_cylinder(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a sphere-cylinder-cylinder intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height\ndef volume_cylinder_cone_cylinder(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cone-cylinder intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height / 3\ndef volume_sphere_sphere_sphere(radius1, radius2, radius3):\n    '''\n    Write a function to calculate the volume of a sphere-sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius1 ** 2 * radius2 ** 2 * radius3 ** 2\ndef volume_sphere_cone_cone(radius1, radius2, radius3):\n    '''\n    Write a function to calculate the volume of a sphere-cone-cone intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * radius3\ndef volume_cylinder_sphere_cylinder(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cylinder-sphere-cylinder intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height\ndef volume_cone_sphere_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cone-sphere-cone intersection.\n    '''\n    return ((radius1 ** 2) + (radius2 ** 2) + (radius3 ** 2)) * math.pi * height\ndef volume_sphere_sphere_sphere(radius1, radius2, radius3):\n    '''\n    Write a function to calculate the volume of a sphere-sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius1 ** 2 * radius2 ** 2 * radius3 ** 2\ndef volume_cylinder_cone_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cone-cone intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * radius3 * height / 3\ndef volume_sphere_cylinder_sphere(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a sphere-cylinder-sphere intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height\ndef volume_cylinder_cone_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cone-cone intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height / 3\ndef volume_sphere_cylinder_cylinder(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a sphere-cylinder-cylinder intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height\ndef volume_cone_cone_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cone-cone-cone intersection.\n    '''\n    return ((radius1 ** 2) + (radius2 ** 2) + ",
        "num_ids": 19
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side/2\n    return (1/4)*a**2\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    return side**2\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side**2\ndef area_sphere(side):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return (4/3)*math.pi*side**2\ndef area_cylinder(side, height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return (math.pi*(height/2)*side**2)\ndef area_cone(height, radius):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi*(radius**2)*(height/3)\ndef area_parallelepiped(height, width, depth):\n    '''\n    Write a function to caluclate the area of a parallelepiped.\n    '''\n    return (height*width*depth)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    a = side/2\n    return (1/3)*(a**3)\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return (1/3)*side**3\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(radius**3)\ndef volume_cylinder(side, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return (math.pi*(height/2)*(radius**2)*3)\ndef volume_cone(height, radius):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (math.pi*(radius**2)*(height/3)*3)\ndef volume_parallelepiped(height, width, depth):\n    '''\n    Write a function to caluclate the volume of a parallelepiped.\n    '''\n    return (height*width*depth)\ndef volume_pyramid(side1, side2):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return (2*(side1*side2)+(side1+side2)**2)/3\ndef volume_trapezium(height1, height2, width):\n    '''\n    Write a function to caluclate the volume of a trapezium.\n    '''\n    return (height1*height2)/2 + width\ndef volume_rectangle(length, width):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return length*width\ndef volume_cone_2(height, radius):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (math.pi*(radius**2)*(height/3)*2)\ndef volume_octahedron_2(side):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return (2/3)*(side**3)\ndef volume_sphere_2(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(radius**3)\ndef volume_cylinder_2(side, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return (height*(math.pi*(side/2)))\ndef volume_cone_3(height, radius):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (math.pi*(radius**2)*(height/3)*3)\ndef volume_sphere_3(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(radius**3)\ndef volume_octahedron_3(side):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return (2/3)*(side**3)\ndef volume_rectangle_2(length, width):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return length*width\ndef volume_rectangle_3(length, width, height):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return length*width*height\ndef volume_rectangle_4(length, width, height, depth):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return length*width*height*depth\ndef volume_cube_2(length):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return length**3\ndef volume_cube_3(length, width, depth):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return length*width*depth\ndef volume_cube_4(length, width, depth, height):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return length*width*depth*height\ndef volume_cube_5(length, width, depth, height, side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return length*width*depth*height*side\ndef volume_sphere_4(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(radius**3)\ndef volume_sphere_5(radius, side):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(radius**3)*side\ndef volume_sphere_6(radius, side):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(radius**3)*side**2\ndef volume_sphere_7(radius, side):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(radius**3)*side**2*math.sqrt(2)\ndef volume_pyramid_2(height, width):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return (2*(height*width)+(width+height)*math.sqrt(2))\ndef volume_pyramid_3(height, width, depth):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return (2*(height*width)+(width+height)*math.sqrt(2))*depth\ndef volume_pyramid_4(height1, width1, depth1, height2, width2, depth2):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return (2*((height1*width1)+(width1+height1)*math.sqrt(2))+((height2*width2)+(width2+height2)*math.sqrt(2)))*depth2\ndef volume_pyramid_5(height1, width1, depth1, height2, width2, depth2, height3, width3, depth3):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return (2*(",
        "num_ids": 8
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = float(side)\n    area = (s * (s-1) * (s-2)) / 6.0\n    return area\n",
        "num_ids": 36
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side <= 0:\n        raise ValueError('Side cannot be less than or equal to 0')\n    return (side**2)*(3**0.5)/4\n",
        "num_ids": 41
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    S = side**2\n    A = (4/3)*math.sqrt(S)\n    return A\n",
        "num_ids": 29
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side**2\n",
        "num_ids": 13
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    size = len(list)\n    for i in range(size):\n        if i < size - m:\n            list[i], list[i + m] = list[i + m], list[i]\n",
        "num_ids": 51
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list or not isinstance(list, list):\n        return None\n    l = len(list)\n    if m > l or m < 0:\n        return None\n    if m == 0:\n        return list\n    while m:\n        list[0], list[m-1] = list[m-1], list[0]\n        m-=1\n    return list\n    \n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    if not list or not isinstance(list, list):\n        return None\n    l = len(list)\n    if m > l or m < 0:\n        return None\n    if m == 0:\n        return list\n    while m:\n        list.append(list.pop(0))\n        m-=1\n    return list\n    \ndef reverse_linked_list(node):\n    '''\n    Write a function to reverse a linked list\n    '''\n    if not node or not isinstance(node, ListNode):\n        return None\n    curr = node\n    prev = None\n    next = None\n    while curr:\n        next = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next\n    return prev\n",
        "num_ids": 75
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m <= 0:\n        return list\n    temp = list[0]\n    i = 0\n    while i < m-1:\n        list[i] = list[i+1]\n        i += 1\n    list[i+1] = temp\n    return list\n",
        "num_ids": 67
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    i = 0\n    for i in range(m):\n        temp = list[i]\n        j = i + 1\n        while j < n:\n            list[j - 1] = list[j]\n            j += 1\n        list[j - 1] = temp\n",
        "num_ids": 74
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n",
        "num_ids": 23
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # another way to rotate the list\n    # list = list[m:] + list[:m]\n",
        "num_ids": 26
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list[0])\n        list.pop(0)\n    return list\n",
        "num_ids": 41
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    i = n - 1\n    while i > m:\n        list[i] = list[i-1]\n        i -= 1\n    return list[:m]\n",
        "num_ids": 50
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # if m == 0:\n    #     return\n    # elif m < 0:\n    #     return rotate_left(list, -m)\n    # if m > len(list) or m < 0:\n    #     return\n    # if m == len(list):\n    #     return\n    # elif m == 1:\n    #     list = rotate_left(list, 1)\n    #     return list\n    # else:\n    #     return rotate_left(list, m)\n    m = m % len(list)\n    list.rotate(m)\n    return list\n    \n",
        "num_ids": 145
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m <= 0:\n        return list\n    m = m % len(list)\n    n = len(list)\n    a = list.pop(0)\n    print(list)\n    for i in range(n-1, m-1, -1):\n        list.insert(i, a)\n    return list\n",
        "num_ids": 79
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # Your Code here\n    result = all(elem is not None for elem in test_tup)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element == None:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup.count(None) == 0\n",
        "num_ids": 16
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None not in test_tup\n",
        "num_ids": 12
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup:\n        for ele in test_tup:\n            if ele == None:\n                print('None found in the tuple')\n                break\n    else:\n        print('None found in the tuple')\n",
        "num_ids": 54
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup)\n",
        "num_ids": 12
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_list = []\n    for i in test_tup:\n        if i is None:\n            test_list.append(i)\n    if len(test_list) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            print('yes')\n            return True\n        else:\n            return False\n",
        "num_ids": 37
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    start_num = int(startnum)\n    end_num = int(endnum)\n    lst = []\n    for i in range(start_num, end_num):\n        i = list(map(int, str(i)))\n        if (sum(i) % len(i) == 0):\n            lst.append(i)\n    return lst\n",
        "num_ids": 89
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum) if all(x % y == 0 for y in map(int, list(str(x))))]\n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def myfunc(num):\n        return num % startnum == 0 and num % endnum == 0 and (num // startnum == 1 or num // endnum == 1)\n    return list(filter(myfunc, range(startnum, endnum+1)))\n",
        "num_ids": 62
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum))\n    # for i in range(startnum, endnum):\n    #     if not any(i % int(num) for num in range(2, 10)):\n    #         print(i)\n",
        "num_ids": 61
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return range(startnum, endnum + 1)\n",
        "num_ids": 15
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum < endnum:\n        for i in range(startnum, endnum):\n            if i % 10 == 0:\n                print(i)\n            for x in str(i):\n                if int(x) % int(i) == 0:\n                    print(i)\n    else:\n        return False\n    \n    return True\n",
        "num_ids": 83
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(num % int(i) == 0 for i in str(num)), range(startnum, endnum + 1)))\n",
        "num_ids": 39
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    n = int(startnum)\n    while n <= int(endnum):\n        for i in range(len(str(n))):\n            if n % int(str(n)[i])!= 0:\n                break\n        else:\n            print(n)\n        n += 1\n",
        "num_ids": 70
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = range(startnum, endnum)\n    for x in result:\n        if x % 10 == x and x % 2 == 0:\n            yield x\n    # return (x for x in range(startnum, endnum) if x % 10 == x and x % 2 == 0)\n",
        "num_ids": 71
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return(range(startnum, endnum + 1))\n",
        "num_ids": 16
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 0:\n        r = math.sin(math.radians(a)) * r\n        return math.pi * r**2\n    else:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = math.pi*(r**2)*((a/360)*2)\n    return area\n",
        "num_ids": 26
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a<0 or a>360):\n        print(\"The angle should be between 0 and 360 degrees\")\n    else:\n        return math.pi*r*r*a/360\ndef triangle_area(h,a):\n    '''\n    Write a function to find area of a triangle. The function takes height and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a<0 or a>360):\n        print(\"The angle should be between 0 and 360 degrees\")\n    else:\n        return h*a/2\ndef rectangle_area(l,w,h):\n    '''\n    Write a function to find area of a rectangle. The function takes length, width and height as inputs. Function should return None if the length, width or height are less than 0.\n    '''\n    if(l<0 or w<0 or h<0):\n        print(\"The length, width and height should be greater than 0\")\n    else:\n        return w*h\ndef circle_area(r):\n    '''\n    Write a function to find area of a circle. The function takes radius as an input. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        print(\"The radius should be greater than 0\")\n    else:\n        return math.pi*r*r\ndef find_radius(l,w):\n    '''\n    Write a function to find radius of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(l==0 and w==0):\n        print(\"The length and width of the rectangle should not be 0\")\n    else:\n        return math.sqrt(l*l+w*w)\ndef find_volume(l,w,h):\n    '''\n    Write a function to find volume of a rectangular prism. Function should return None if the length, width and height of the rectangular prism are 0.\n    '''\n    if(l==0 or w==0 or h==0):\n        print(\"The length, width and height of the rectangular prism should not be 0\")\n    else:\n        return (l*w*h)\ndef find_circumference(r):\n    '''\n    Write a function to find circumference of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        print(\"The radius should not be negative\")\n    else:\n        return 2*math.pi*r\ndef find_area_triangle(a):\n    '''\n    Write a function to find area of a triangle. Function should return None if the angle is less than 90 degrees.\n    '''\n    if(a<90):\n        return a*(a-math.sin(math.radians(a)))\n    else:\n        return None\ndef find_area_rectangle(l,w):\n    '''\n    Write a function to find area of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(l==0 or w==0):\n        return None\n    else:\n        return l*w\ndef find_area_circle(r):\n    '''\n    Write a function to find area of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*r*r\ndef find_circle_area(r):\n    '''\n    Write a function to find area of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*r*r\ndef find_radius_triangle(a):\n    '''\n    Write a function to find radius of a triangle. Function should return None if the angle is less than 90 degrees.\n    '''\n    if(a<90):\n        return (a/math.sin(math.radians(a)))\n    else:\n        return None\ndef find_radius_rectangle(l,w):\n    '''\n    Write a function to find radius of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(l==0 or w==0):\n        return None\n    else:\n        return (l+w)/2\ndef find_radius_circle(r):\n    '''\n    Write a function to find radius of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        return None\n    else:\n        return r/2\ndef find_radius_circle_area(r):\n    '''\n    Write a function to find radius of a circle. Function should return None if the radius is 0.\n    '''\n    if(r<0):\n        return None\n    else:\n        return math.pi*r*r\ndef find_radius_square(a):\n    '''\n    Write a function to find radius of a square. Function should return None if the length and width of the square are 0.\n    '''\n    if(a==0):\n        return None\n    else:\n        return math.sqrt(2*a)\ndef find_radius_square_area(l):\n    '''\n    Write a function to find radius of a square. Function should return None if the length of the square is 0.\n    '''\n    if(l<0):\n        return None\n    else:\n        return math.sqrt(2*l)\ndef find_radius_square_area_multiple(l,w,h):\n    '''\n    Write a function to find radius of a square. Function should return None if the length, width and height of the square are 0.\n    '''\n    if(l==0 and w==0 and h==0):\n        return None\n    else:\n        return math.sqrt(2*(l*l+w*w+h*h))\ndef find_radius_square_area_multiple_small(a,b,c):\n    '''\n    Write a function to find radius of a square. Function should return None if the length, width and height of the square are 0.\n    '''\n    if(a==0 and b==0 and c==0):\n        return None\n    else:\n        return math.sqrt(2*(a*a+b*b+c*c))\ndef find_volume_square(a):\n    '''\n    Write a function to find volume of a square. Function should return None if the length and width of the square are 0.\n    '''\n    if(a==0):\n        return None\n    else:\n        return a*a\ndef find_volume_square_area(l,w):\n    '''\n    Write a function to find volume of a square. Function should return None if the length, width of the square are 0.\n    '''\n    if(l==0 or w==0):\n        return None\n    else:\n        return l*w\ndef find_volume_square_area_multiple(a,b,c):\n    '''\n    Write a function to find volume of a square. Function should return None if the length, width and height of the square are 0.\n    '''\n    if(a==0 and b==0 and c==0):\n        return None\n    else:\n        return a*b*c\ndef find_volume_rectangle(a,b):\n    '''\n    Write a function to find volume of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(a==0 or b==0):\n        return None\n    else:\n        return a*b\ndef find_volume_rectangle_area(l,w):\n    '''\n    Write a function to find volume of a rectangle. Function should return None if the length and width of the rectangle are 0.\n    '''\n    if(l==0 or w==0):\n        return None\n    else:\n        return l*w\ndef find_volume_rectangle_area_multiple(a,b,c,d):\n    '''\n    Write a function to find volume of a rectangle. Function should return None if the length, width and height of the rectangle are 0.\n    '''\n    if(a==0 and b==0 and c==0 and d==0):\n        return None\n    else:\n        return a*b*c*d\ndef find_volume_rectangle_area_multiple_small(",
        "num_ids": 54
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return (((a/360)*2*math.pi)*r**2)\n",
        "num_ids": 36
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        a = a * math.pi / 180\n        area = (1/2) * r**2 * math.sin(a)\n        return area\n",
        "num_ids": 52
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 0 or a >= 360:\n        return None\n    else:\n        return r*math.sin(a*math.pi/180)**2\n",
        "num_ids": 40
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a_rad=a*math.pi/180\n    r_rad=r*math.pi/180\n    return (r_rad**2)*(math.sin(a_rad))**2\n    \nprint(sector_area(1,360))\n",
        "num_ids": 62
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a<0 or a>360):\n        return None\n    else:\n        return math.pi*r**2*(a/360)\ndef circumference(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if the radius is 0 or less.\n    '''\n    if(r==0):\n        return None\n    else:\n        return 2*math.pi*r\ndef area_of_the_triangle(b,h):\n    '''\n    Write a function to find area of the triangle. The function takes the base and height as inputs. Function should return None if the base and height are equal or lesser than 0.\n    '''\n    if(b==0 or h==0):\n        return None\n    else:\n        return (b*h)/2\ndef perimeter_of_the_triangle(b,h):\n    '''\n    Write a function to find perimeter of the triangle. The function takes the base and height as inputs. Function should return None if the base and height are equal or lesser than 0.\n    '''\n    if(b==0 or h==0):\n        return None\n    else:\n        return (b+h+b)\ndef gcd(m,n):\n    '''\n    Write a function to find the Greatest Common Divisor of a and b.\n    '''\n    if(m==0 or n==0):\n        return None\n    else:\n        return gcd(n,m%n) if n<m else gcd(m,n%m)\ndef lcm(m,n):\n    '''\n    Write a function to find the least common multiple of a and b.\n    '''\n    if(m==0 or n==0):\n        return None\n    else:\n        return (m*n)//gcd(m,n)\ndef is_prime(n):\n    '''\n    Write a function to check if n is a prime number or not.\n    '''\n    if(n<2):\n        return False\n    else:\n        return True if all(n%i for i in range(2,n//2)) else False\ndef is_square(n):\n    '''\n    Write a function to check if the number is a perfect square or not.\n    '''\n    return True if n**0.5==int(n**0.5) else False\ndef is_palindrome(s):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    return s[::-1]==s\ndef is_divisible_by_p_q(n,p,q):\n    '''\n    Write a function to check if the number is divisible by p and q or not.\n    '''\n    return True if n%p==0 and n%q==0 else False\ndef is_prime_no_divisor(n):\n    '''\n    Write a function to check if the number is prime or not.\n    '''\n    return True if all(n%i for i in range(2,n//2)) else False\ndef divisor(n):\n    '''\n    Write a function to get divisor of a number.\n    '''\n    return set([i for i in range(1,n+1) if n%i==0])\ndef is_prime_no_divisor_no_loop(n):\n    '''\n    Write a function to check if the number is prime or not.\n    '''\n    if(n<2):\n        return False\n    else:\n        for i in range(2,n):\n            if(n%i==0):\n                return False\n        else:\n            return True\ndef factors(n):\n    '''\n    Write a function to get factors of a number.\n    '''\n    factors={}\n    for i in range(1,n+1):\n        if(n%i==0):\n            factors[i]=1\n    return factors\ndef factorial(n):\n    '''\n    Write a function to get factorial of a number.\n    '''\n    fact={}\n    fact[0]=1\n    for i in range(1,n+1):\n        fact[i]=i*fact[i-1]\n    return fact[n]\ndef is_prime_no_divisor_no_loop_set(n):\n    '''\n    Write a function to check if the number is prime or not.\n    '''\n    if(n<2):\n        return False\n    else:\n        fact={}\n        for i in range(1,n+1):\n            fact[i]=i\n        for i in range(2,n):\n            if(fact[i]==i):\n                del fact[i]\n        for i in range(1,n):\n            if(fact[i]==i):\n                return False\n        else:\n            return True\ndef is_palindrome_set(s):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    return s==s[::-1]\ndef divisor_set(n):\n    '''\n    Write a function to get divisor of a number.\n    '''\n    div={}\n    for i in range(1,n+1):\n        if(n%i==0):\n            div[i]=1\n    return div\ndef is_prime_no_divisor_no_loop_list(n):\n    '''\n    Write a function to check if the number is prime or not.\n    '''\n    if(n<2):\n        return False\n    else:\n        is_prime=True\n        for i in range(2,n):\n            if(n%i==0):\n                is_prime=False\n                break\n        return is_prime\ndef factors_set(n):\n    '''\n    Write a function to get factors of a number.\n    '''\n    fact={}\n    for i in range(1,n+1):\n        if(n%i==0):\n            fact[i]=1\n    return fact\ndef factorial_set(n):\n    '''\n    Write a function to get factorial of a number.\n    '''\n    fact={}\n    for i in range(1,n+1):\n        fact[i]=1\n    for i in range(2,n+1):\n        if(n%i==0):\n            fact[i]+=fact[i-1]\n    return fact[n]\ndef is_palindrome_set(s):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    return s==s[::-1]\ndef divisor_set(n):\n    '''\n    Write a function to get divisor of a number.\n    '''\n    div={}\n    for i in range(1,n+1):\n        if(n%i==0):\n            div[i]=1\n    return div\ndef is_prime_no_divisor_no_loop_dict(n):\n    '''\n    Write a function to check if the number is prime or not.\n    '''\n    if(n<2):\n        return False\n    else:\n        is_prime=True\n        for i in range(2,n):\n            if(n%i==0):\n                is_prime=False\n                break\n        return is_prime\ndef factors_dict(n):\n    '''\n    Write a function to get factors of a number.\n    '''\n    fact={}\n    for i in range(1,n+1):\n        if(n%i==0):\n            fact[i]=1\n    return fact\ndef factorial_dict(n):\n    '''\n    Write a function to get factorial of a number.\n    '''\n    fact={}\n    for i in range(1,n+1):\n        fact[i]=1\n    for i in range(2,n+1):\n        if(n%i==0):\n            fact[i]+=fact[i-1]\n    return fact[n]\ndef is_palindrome_dict(s):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    return s==s",
        "num_ids": 7
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a_new = 360 - a\n    a_new = math.radians(a_new)\n    r_new = r\n    if(a_new <= math.pi/2):\n        print(\"The area of the sector is: \"+str(round(math.pi * r_new**2 * a_new,2)))\n    else:\n        print(\"The area of the sector is: \"+str(None))\n",
        "num_ids": 99
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>=0 and a>=0:\n        if a>360:\n            return None\n        else:\n            return math.pi*r**2*a/360\n    else:\n        return None\ndef find_sphere_area(r,h):\n    '''\n    Write a function to find the area of a sphere. Function takes the radius and height as inputs. Function should return None if the height is 0.\n    '''\n    if r>=0 and h>=0:\n        return 4*math.pi*r**2*h/3\n    else:\n        return None\ndef find_cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder. Function takes the radius and height as inputs. Function should return None if the height is 0.\n    '''\n    if r>=0 and h>=0:\n        return 2*math.pi*r*h\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_circle_area(r):\n    '''\n    Write a function to find the area of a circle. Function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if r>=0:\n        return math.pi*r**2\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_circle_area(r):\n    '''\n    Write a function to find the area of a circle. Function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if r>=0:\n        return math.pi*r**2\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_circle_area(r):\n    '''\n    Write a function to find the area of a circle. Function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if r>=0:\n        return math.pi*r**2\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_circle_area(r):\n    '''\n    Write a function to find the area of a circle. Function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if r>=0:\n        return math.pi*r**2\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_circle_area(r):\n    '''\n    Write a function to find the area of a circle. Function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if r>=0:\n        return math.pi*r**2\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_circle_area(r):\n    '''\n    Write a function to find the area of a circle. Function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if r>=0:\n        return math.pi*r**2\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_circle_area(r):\n    '''\n    Write a function to find the area of a circle. Function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if r>=0:\n        return math.pi*r**2\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_circle_area(r):\n    '''\n    Write a function to find the area of a circle. Function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if r>=0:\n        return math.pi*r**2\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_triangle_area(h):\n    '''\n    Write a function to find the area of a triangle. Function takes the height as input. Function should return None if the height is 0.\n    '''\n    if h>=0:\n        return 0.5*h\n    else:\n        return None\ndef find_circle_area(r):\n    '''\n    Write a function to find the area of a circle. Function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    if r>=0:\n        return math.pi*r**2\n    else:\n        return None\ndef find_triangl",
        "num_ids": 34
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z):\n        return lcs_of_two(Y, Z)\n    if len(Y) < len(Z):\n        return lcs_of_two(X, Z)\n",
        "num_ids": 64
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(X,Y,Z):\n        n1=len(X)\n        n2=len(Y)\n        n3=len(Z)\n        #table\n        dp=[[0 for i in range(n1+1)] for j in range(n2+1)]\n        dp1=[[0 for i in range(n2+1)] for j in range(n3+1)]\n        for i in range(1,n2+1):\n            for j in range(1,n3+1):\n                if X[i-1]==Y[j-1]:\n                    dp[i][j]=1+dp[i-1][j-1]\n                    if X[i-1]==Z[j-1]:\n                        dp1[i][j]=1+dp1[i-1][j-1]\n                else:\n                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])\n                    if dp1[i][j-1]==1:\n                        dp1[i][j]=max(dp1[i][j-1],dp1[i-1][j])\n        return dp[n2][n3],dp1[n2][n3]\n",
        "num_ids": 296
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = X.lower()\n    Y = Y.lower()\n    Z = Z.lower()\n    m = len(X) + 1\n    n = len(Y) + 1\n    o = len(Z) + 1\n    dp = [[0] * n for i in range(m)]\n",
        "num_ids": 72
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    L = [[None]*(n+1) for i in range(m+1)] \n    \n    # Following steps to build L[][] in bottom up fashion. Note \n    # that L[][] indexes start from 0. \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                \n                # Current cell is empty \n                if i == 0 or j == 0 or k == 0 : \n                    L[i][j] = 0\n                \n                # If first string is empty, only option is to \n                # skip\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j] = L[i-1][j-1] + 1\n                    \n                # No option, i.e. mismatch \n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n    \n    \n    return L[m][n]\n    \n",
        "num_ids": 295
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_matrix = [[0 for i in range(len(X)+1)] for j in range(len(Y)+1)]\n    max_lcs = 0\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1\n                else:\n                    lcs_matrix[i][j] = max(lcs_matrix[i-1][j], lcs_matrix[i][j-1], lcs_matrix[i-1][j-1])\n            if lcs_matrix[i][j] > max_lcs:\n                max_lcs = lcs_matrix[i][j]\n    return max_lcs\n",
        "num_ids": 239
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    dp_table = [[0] * (n + 1) for i in range(m + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    continue \n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    dp_table[i][j] = dp_table[i-1][j-1] + 1\n                else: \n                    dp_table[i][j] = max(dp_table[i-1][j], dp_table[i][j-1], dp_table[i-1][j-1]) \n    return dp_table[m][n]",
        "num_ids": 227
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    C = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0 : \n                    C[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    C[i][j][k] = 1 + C[i - 1][j - 1][k - 1] \n                else: \n                    C[i][j][k] = max(C[i - 1][j][k], C[i][j - 1][k], C[i][j][k - 1]) \n    \n    \n    return C[m][n][o] \n",
        "num_ids": 257
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    dp_table = [[0 for x in range(o + 1)] for x in range(n + 1)] \n",
        "num_ids": 56
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    o = len(Z) \n    \n    # Create a table to store lengths of LCS for \n    # different values of i, j and k \n    \n    c = [[0 for i in range(o + 1)] for j in range(n + 1)] \n    \n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            for k in range(1, o + 1): \n                if (X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n                    c[i][k] = c[i - 1][k - 1] + 1\n                else: \n                    c[i][k] = max(c[i - 1][k], c[i][k - 1]) \n    return c[n][o] \n    \n    \nX = 'AACBDAB'\nY = 'BDCABA'\nZ = 'BDCABA'\nprint (lcs_of_three(X, Y, Z)) \n",
        "num_ids": 271
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X)\n    N = len(Y)\n    O = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    cap_words = re.findall(r\"\\b[A-Z]+(?:[\\s_]+[A-Z])*\\b\", str1)\n    res = \" \".join(cap_words)\n    return res\n",
        "num_ids": 57
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    #list of special character used in Regex\n    special_characters = [\".\", \"_\", \"^\", \"$\", \"*\", \"?\", \"&\", \"|\", \"+\", \",\", \"()\"]\n    #making space between every word\n    for i in special_characters:\n        str1 = str1.replace(i, \" \"+i+\" \")\n    #Getting words from given string\n    words = re.findall(r'[A-Z][a-z]+', str1)\n    #Making space in between every word\n    for word in words:\n        str1 = str1.replace(word, word+\" \")\n    #returning new string\n    return(str1)\nprint(capital_words_spaces(\"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii')\n",
        "num_ids": 1694
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'(?<=\\w)[a-z]', r' \\1', str1)\n    print(str2)\n",
        "num_ids": 40
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    list1 = list(str1)\n    s = \" \"\n    for i in range(len(list1)):\n        if list1[i].isupper():\n            continue\n        else:\n            list1[i] = s\n    str2 = \"\".join(list1)\n    return str2\n",
        "num_ids": 90
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = ''\n    for i in str1.split():\n        if i.isupper() and i!= \" \":\n            result = result + i.upper() +''\n        else:\n            result = result + i +''\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    \n    result = \" \".join([word.title() for word in words])\n",
        "num_ids": 30
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    new_str = \"\"\n    for i in range(0, len(str1)):\n        if str1[i].isupper():\n            if new_str!= \"\":\n                new_str = new_str + \" \"\n            new_str = new_str + str1[i]\n        else:\n            new_str = new_str + \" \" + str1[i]\n    return new_str\n",
        "num_ids": 110
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # first if condition\n    if re.match(r'\\b[A-Z\\s]+\\b',str1):\n        str1=str1.replace(\" \",\"\")\n    # second if condition\n    if re.search(r'\\b[A-Z]+\\b',str1):\n        str1=str1.replace(\" \",\"\")\n        str1=str1.capitalize()\n    return str1\n",
        "num_ids": 102
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('([a-zA-Z])[ ]([a-zA-Z])', r'\\1 \\2', str1)\n",
        "num_ids": 38
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    a = re.split(r'\\s+', str1)\n    for i in range(len(a)):\n        a[i] = a[i].capitalize()\n    return''.join(a)\n",
        "num_ids": 53
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = sorted(nums_str)\n    return sorted_nums\n",
        "num_ids": 24
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            num = float(num)\n            nums.append(num)\n        except ValueError:\n            pass\n    return sorted(nums)\n",
        "num_ids": 56
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=str)\n",
        "num_ids": 16
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_list = []\n    for nums_str in nums_str:\n        nums_str_list.append(float(nums_str))\n    nums_str_list.sort()\n    print(nums_str_list)\n",
        "num_ids": 65
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    return nums_int\n",
        "num_ids": 53
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums_int = []\n    for num in nums_str:\n        try:\n            nums_int.append(int(num))\n        except ValueError:\n            pass\n",
        "num_ids": 48
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert strings to integers\n    nums_int = []\n    for s in nums_str:\n        nums_int.append(int(s))\n",
        "num_ids": 40
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    result = []\n    for num in nums_str:\n        result.append(float(num))\n    result.sort()\n    for i in range(len(nums_str)):\n        nums_str[i] = str(result[i])\n    return nums_str\n",
        "num_ids": 71
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = nums_str.split()\n    num_list = []\n    for num in nums_list:\n        try:\n            num_list.append(int(num))\n        except:\n            num_list.append(float(num))\n    num_list.sort(key=lambda x: x)\n    return \" \".join(num_list)\n",
        "num_ids": 91
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] += test_tup\n    return test_list\n",
        "num_ids": 37
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for index in range(len(test_list)):\n        test_list[index] += test_tup\n        return test_list\n",
        "num_ids": 35
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(0, len(test_list)):\n        if isinstance(test_list[i], tuple):\n            test_list[i] = test_list[i] + test_tup\n        elif isinstance(test_list[i], list):\n            add_tuple(test_list[i], test_tup)\n    return test_list\n",
        "num_ids": 91
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if not arr:\n        return False\n    return arr[0] > arr[i] and check_min_heap_helper(arr[:i]+arr[i+1:], i)\n",
        "num_ids": 49
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child_idx = 2*i + 1\n    right_child_idx = 2*i + 2\n",
        "num_ids": 30
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # going from index 0 to end\n    # i is the minimum index\n    # j is the maximum index\n    # lets check all elements to see if they are smaller than min\n    # if there is a True that means we can break because there is a violation \n    # so, the min heap must be violated\n    for j in range(i, len(arr)):\n        if arr[j] < arr[i]:\n            return False\n    # if we get here, then we are good\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    min_elem = arr[0]\n    count = 1\n    for i in range(1,len(arr)):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n        else:\n            count += 1\n    if count == len(arr):\n        print(\"Array is min heap\")\n    else:\n        print(\"Array is not min heap\")\n",
        "num_ids": 97
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n",
        "num_ids": 50
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    '''\n    Above is a binary heap.\n    \n    Example:\n    Input: arr[] = {1, 2, 3, 4}\n    Output: True\n    Output: True\n    Output: True\n    Output: False\n    Output: False\n    Output: False\n    Output: False\n    '''\n    '''\n    we can use a helper function to check whether the elements are in order or not\n    '''\n    return i == 0 or check_min_heap_helper(arr, i-1) and arr[i] < arr[int((i-1)/2)]\n    '''\n    if the first node is 0 then all nodes are also 0\n    if the first node is not 0 then it is not min heap\n    '''\n    '''\n    we can use a helper function to check whether the elements are in order or not\n    '''\n    def min_heapify(arr, i):\n        '''\n        https://www.geeksforgeeks.org/heap-sort/\n        the heap sort algorithm is based on the following two heaps\n        1. a min heap, i.e., one where all the elements are stored in a single child node\n        2. a max heap, i.e., one where all the elements are stored in a single parent node\n        \n        We will use a min heap, which is a min heap.\n        \n        A min heap is a heap in which all the nodes are stored in a single child node.\n        \n        Here, we will do the same as above.\n        \n        Before this, we need to make sure that the first node is in a proper position.\n        Let us first look at the index of the first node in the array arr.\n        '''\n        if i < len(arr):\n            '''\n            if the index is less than the length of the array then we have to make sure that the first node is in the proper position\n            '''\n            if i!= 0:\n                '''\n                if the first node is not 0 then we will need to make sure that the first node is in the proper position\n                '''\n                #print(i, len(arr), check_min_heap_helper(arr, i))\n                if not check_min_heap_helper(arr, i):\n                    '''\n                    if the first node is not in the proper position then we will swap the nodes\n                    '''\n                    arr[i], arr[int((i-1)/2)] = arr[int((i-1)/2)], arr[i]\n                    #print(i, len(arr), check_min_heap_helper(arr, i), arr)\n                    min_heapify(arr, int((i-1)/2))\n            else:\n                '''\n                if the first node is 0 then we will swap the nodes\n                '''\n                arr[i], arr[int((i+1)/2)] = arr[int((i+1)/2)], arr[i]\n                #print(i, len(arr), check_min_heap_helper(arr, i), arr)\n                min_heapify(arr, int((i+1)/2))\n    '''\n    we will make use of a helper function to move the nodes of the max heap\n    '''\n    def max_heapify(arr, i):\n        '''\n        https://www.geeksforgeeks.org/heap-sort/\n        the heap sort algorithm is based on the following two heaps\n        1. a min heap, i.e., one where all the elements are stored in a single child node\n        2. a max heap, i.e., one where all the elements are stored in a single parent node\n        \n        We will use a max heap, which is a max heap.\n        \n        A max heap is a heap in which all the elements are stored in a single child node.\n        \n        Here, we will do the same as above.\n        \n        Before this, we need to make sure that the first node is in a proper position.\n        Let us first look at the index of the first node in the array arr.\n        '''\n        if i < len(arr):\n            '''\n            if the index is less than the length of the array then we have to make sure that the first node is in the proper position\n            '''\n            if i!= 0:\n                '''\n                if the first node is not 0 then we will need to make sure that the first node is in the proper position\n                '''\n                #print(i, len(arr), check_min_heap_helper(arr, i))\n                if not check_min_heap_helper(arr, i):\n                    '''\n                    if the first node is not in the proper position then we will swap the nodes\n                    '''\n                    arr[i], arr[int((i-1)/2)] = arr[int((i-1)/2)], arr[i]\n                    #print(i, len(arr), check_min_heap_helper(arr, i), arr)\n                    max_heapify(arr, int((i-1)/2))\n            else:\n                '''\n                if the first node is 0 then we will swap the nodes\n                '''\n                arr[i], arr[int((i+1)/2)] = arr[int((i+1)/2)], arr[i]\n                #print(i, len(arr), check_min_heap_helper(arr, i), arr)\n                max_heapify(arr, int((i+1)/2))\n    '''\n    we will first make sure that the array is not empty\n    '''\n    if len(arr) == 0:\n        '''\n        if the array is empty then we can return true\n        '''\n        return True\n    '''\n    we will make sure that the array is not empty\n    '''\n    '''\n    we will make use of a helper function to move the nodes of the min heap\n    '''\n    def min_heap_traversal(arr, i, traversal):\n        '''\n        https://www.geeksforgeeks.org/heap-sort/\n        the heap sort algorithm is based on the following two heaps\n        1. a min heap, i.e., one where all the elements are stored in a single child node\n        2. a max heap, i.e., one where all the elements are stored in a single parent node\n        \n        We will use a min heap, which is a min heap.\n        \n        A min heap is a heap in which all the elements are stored in a single child node.\n        \n        Here, we will do the same as above.\n        \n        Before this, we need to make sure that the first node is in a proper position.\n        Let us first look at the index of the first node in the array arr.\n        '''\n        if i < len(arr):\n            '''\n            if the index is less than the length of the array then we have to make sure that the first node is in the proper position\n            '''\n            if i!= 0:\n                '''\n                if the first node is not 0 then we will need to make sure that the first node is in the proper position\n                '''\n                #print(i, len(arr), check_min_heap_helper(arr, i))\n                if not check_min_heap_helper(arr, i):\n                    '''\n                    if the first node is not in the proper position then we will swap the nodes\n                    '''\n                    #print(\"i\", i, \"arr\", arr)\n                    arr[i], arr[int((i-1)/2)] = arr[int((i-1)/2)], arr[i]\n                    #print(i, len(arr), check_min_heap_helper(arr, i), arr)\n                    min_heap_traversal(arr, int((i-1)/2), traversal)\n            else:\n                '''\n                if the first node is 0 then we will swap the nodes\n                '''\n                #print(\"i\", i, \"arr\", arr)\n                arr[i], arr[int((i+1)/2)] = arr[int((i+1)/2)], arr[i]\n                #print(i, len(arr), check_min_heap_helper(arr, i), arr)\n                min_heap_traversal(arr, int((i+1)/2), traversal)\n    '''\n    we will first make sure tha",
        "num_ids": 9
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i==0:\n        return arr[i]<=arr[i+1]\n    else:\n        return arr[i]<=arr[i-1] and check_min_heap_helper(arr, i-1)\n",
        "num_ids": 60
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If len of arr is zero, then it is not valid\n    if len(arr) == 0:\n        return False\n    # If last element is greater than first element then it is not valid\n    if arr[len(arr) - 1] > arr[0]:\n        return False\n    # If arr[i] is greater than or equal to arr[2 * i + 1] and arr[2 * i + 2] where i >= 0\n    # then it is not a min heap.\n    for i in range(len(arr)):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if (left < len(arr) and arr[i] > arr[left]) or (right < len(arr) and arr[i] > arr[right]):\n            return False\n    return True\n",
        "num_ids": 191
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] <= arr[2 * i + 1] or arr[i] <= arr[2 * i + 2]:\n        return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n <= 0:\n        return None\n    \n    if n == 1:\n        return 1\n    \n    # compute jacobsthal num\n    return n * (n + 1) // 2\n",
        "num_ids": 52
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    return jacobsthal_num(n - 1) + (n * (n + 1) // 2)\n",
        "num_ids": 40
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    if n == 4:\n        return 3\n    elif n == 5:\n        return 5\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-5) + 5\n",
        "num_ids": 112
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 1\n    y = 1\n    for i in range(n-1):\n        x,y = x+2*y, x\n    return x\n",
        "num_ids": 40
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 52
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 0\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n == 6:\n        return 8\n    if n == 7:\n        return 13\n    if n == 8:\n        return 21\n    if n == 9:\n        return 34\n    if n == 10:\n        return 55\n    if n == 11:\n        return 89\n    if n == 12:\n        return 144\n    if n == 13:\n        return 233\n    if n == 14:\n        return 377\n    if n == 15:\n        return 610\n    if n == 16:\n        return 987\n    if n == 17:\n        return 1723\n    if n == 18:\n        return 2857\n    if n == 19:\n        return 4181\n    if n == 20:\n        return 6765\n    if n == 21:\n        return 10946\n    if n == 22:\n        return 24789\n    if n == 23:\n        return 46732\n    if n == 24:\n        return 83160\n    if n == 25:\n        return 134632\n    if n == 26:\n        return 270868\n    if n == 27:\n        return 515504\n    if n == 28:\n        return 107440\n    if n == 29:\n        return 217811\n    if n == 30:\n        return 435973\n    if n == 31:\n        return 863340\n    if n == 32:\n        return 161017\n    if n == 33:\n        return 348855\n    if n == 34:\n        return 746194\n    if n == 35:\n        return 1297398\n    if n == 36:\n        return 291962\n    if n == 37:\n        return 586079\n    if n == 38:\n        return 1164636\n    if n == 39:\n        return 248225\n    if n == 40:\n        return 526983\n    if n == 41:\n        return 1096298\n    if n == 42:\n        return 2255997\n    if n == 43:\n        return 4547095\n    if n == 44:\n        return 8756224\n    if n == 45:\n        return 1498425\n    if n == 46:\n        return 3458494\n    if n == 47:\n        return 7198656\n    if n == 48:\n        return 12446056\n    if n == 49:\n        return 2950885\n    if n == 50:\n        return 5595039\n    if n == 51:\n        return 11146652\n    if n == 52:\n        return 24459743\n    if n == 53:\n        return 49765768\n    if n == 54:\n        return 9986046\n    if n == 55:\n        return 22656418\n    if n == 56:\n        return 46879255\n    if n == 57:\n        return 87938159\n    if n == 58:\n        return 14852665\n    if n == 59:\n        return 34859926\n    if n == 60:\n        return 74969677\n    if n == 61:\n        return 12709524\n    if n == 62:\n        return 29216635\n    if n == 63:\n        return 5689825\n    if n == 64:\n        return 112096608\n    if n == 65:\n        return 24851593\n    if n == 66:\n        return 49764159\n    if n == 67:\n        return 9963369\n    if n == 68:\n        return 22529193\n    if n == 69:\n        return 45968225\n    if n == 70:\n        return 88677064\n    if n == 71:\n        return 15107727\n    if n == 72:\n        return 34852717\n    if n == 73:\n        return 74948761\n    if n == 74:\n        return 12901109\n    if n == 75:\n        return 29224643\n    if n == 76:\n        return 56797806\n    if n == 77:\n        return 111750245\n    if n == 78:\n        return 24790545\n    if n == 79:\n        return 49896282\n    if n == 80:\n        return 99626668\n    if n == 81:\n        return 22654101\n    if n == 82:\n        return 46878388\n    if n == 83:\n        return 87948077\n    if n == 84:\n        return 14843917\n    if n == 85:\n        return 34893461\n    if n == 86:\n        return 74987365\n    if n == 87:\n        return 12905102\n    if n == 88:\n        return 29220801\n    if n == 89:\n        return 56791013\n    if n == 90:\n        return 111732725\n    if n == 91:\n        return 24806413\n    if n == 92:\n        return 4989733\n    if n == 93:\n        return 99634724\n    if n == 94:\n        return 22563435\n    if n == 95:\n        return 46788752\n    if n == 96:\n        return 87943789\n    if n == 97:\n        return 14534215\n    if n == 98:\n        return 34881764\n    if n == 99:\n        return 74973245\n    if n == 100:\n        return 12908948\n    if n == 101:\n        return 29231826\n    if n == 102:\n        return 5689577\n    if n == 103:\n        return 111757894\n    if n == 104:\n        return 24807975\n    if n == 105:\n        return 49899677\n    if n == 106:\n        return 99636201\n    if n == 107:\n        return 22561132\n    if n == 108:\n        return 46880384\n    if n == 109:\n        return 8796488\n    if n == 110:\n        return 14845026\n    if n == 111:\n        return 34883896\n    if n == 112:\n        return 74965312\n    if n == 113:\n        return 12974094\n    if n == 114:\n        return 29290185\n    if n == 115:\n        return 56898108\n    if n == 116:\n        return 111757365\n    if n == 117:\n        return 24800073\n    if n == 118:\n        return 49899005\n    if n == 119:\n        return 99625263\n    if n == 120:\n        return 22567512\n    if n == 121:\n        return 46884451\n    if n == 122:\n        return 87971636\n    if n == 123:\n        return 14536519\n    if n == 124:\n        return 34881367\n    if n == 125:\n        return 74975928\n    if n == 126:\n        return 129749818\n    if n == 127:\n        return 29290721\n    if n == 128:\n        return 56893568\n    if n == 129:\n        return 111732045\n    if n == 130:\n        return 24796519\n    if n == 131:\n        return 49988258\n    if n == 132:\n        return 99624478\n    if n == 133:\n        return 22563986\n    if n == 134:\n        return 46785014\n    if n == 135:\n        return 87959789\n    if n == 136:\n        return 14846436\n    if n == 137:\n        return 34882707\n    if n == 138:\n        return 74948152\n    if n == 139:\n        return 12971294\n    if n == 140:\n        return 29301474\n    if n == 141:\n        return 56796209\n    if n == 142:\n        return 111731609\n    if n == 143:\n        return 24805448\n    if n == 144:\n        return 49897109",
        "num_ids": 1946
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    a = 1\n    b = 1\n    if n==0:\n        return a\n    if n==1:\n        return b\n    for i in range(2,n+1):\n        a,b = b,(a+b)\n    return b\n",
        "num_ids": 66
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    count = 0\n    n = int(n)\n    i = 0\n    while i < n:\n        count += 1\n        i = count*(count+1)//2\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return n+1\n    else:\n        return jacobsthal_num(n-1) + (n-1)//2\n",
        "num_ids": 42
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    def lucas(n):\n        a,b = 2,3\n        for i in range(n):\n            a,b = b, a + b\n        return a\n    \n    if n <= 0:\n        raise ValueError(\"n must be > 0\")\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return lucas(n-1) + lucas(n-2)\n",
        "num_ids": 112
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code here\n    # Write your code here\n    output = []\n    \n    k = K\n    \n    for x in test_list:\n        if len(output) < k:\n            output.append(x)\n        else:\n            index = 0\n            # find the index of the minimum value in output\n            while len(output) > 0:\n                if x[0] > output[index][0]:\n                    index = 0\n                elif x[0] == output[index][0]:\n                    index += 1\n                    if index == len(output):\n                        output.append(x)\n                        break\n                else:\n                    break\n            output.insert(index, x)\n            \n    return output\n",
        "num_ids": 168
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store all the distances\n    distances = {}\n    # iterate through the tuple list and compute the distance\n    # and add it to the dictionary.\n    for i in range(len(test_list)):\n        distances[i] = euclidean(test_list[i], test_list[i+K])\n    # find the minimum k distances from the dictionary\n    min_k_distances = min(distances.values())\n    # find the corresponding index in the tuple list\n    min_k_indexes = [k for k, v in distances.items() if v == min_k_distances]\n    # return the min_k_distances and its index\n    return min_k_distances, min_k_indexes\n",
        "num_ids": 181
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Code here\n    test_list.sort()\n    return test_list[:K]\n",
        "num_ids": 25
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_value = test_list[0]\n    for i in range(1, len(test_list)):\n        if min_value[0] > test_list[i][0]:\n            min_value = test_list[i]\n    return min_value\n    \ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_value = test_list[0]\n    for i in range(1, len(test_list)):\n        if min_value[0] > test_list[i][0]:\n            min_value = test_list[i]\n    return min_value\n    \ndef max_k(test_list, K):\n    '''\n    Write a function to find maximum k records from tuple list. https://www.geeksforgeeks.org/python-find-maximum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    max_value = test_list[0]\n    for i in range(1, len(test_list)):\n        if max_value[0] < test_list[i][0]:\n            max_value = test_list[i]\n    return max_value\n",
        "num_ids": 66
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    for i in range(K):\n        min_k.append(min(test_list))\n        test_list.remove(min(test_list))\n    return min_k\n",
        "num_ids": 52
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    res = []\n    s = set()\n    s.update(test_list)\n    for i in range(K):\n        n = min(s, key=lambda x: x[1])\n        s.remove(n)\n        res.append(n)\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    print(f\"min_k(test_list, K) = \", end='')\n    min_k_index = -1\n    min_k_val = float('inf')\n    min_k_list = []\n    for i in range(len(test_list)):\n        if test_list[i] < min_k_val:\n            min_k_index = i\n            min_k_val = test_list[i]\n    if len(test_list) == K:\n        return test_list\n    if len(test_list) < K:\n        min_k_list = test_list\n        min_k_val = min_k_val\n    else:\n        min_k_list = test_list[:K]\n        min_k_val = min_k_val\n    print(min_k_list)\n    print(f\"min_k_index = {min_k_index}\")\n    print(f\"min_k_val = {min_k_val}\")\n    return min_k_list\n",
        "num_ids": 252
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def find_min(test_list, K):\n        record = {}\n        for i in range(len(test_list)):\n            if (test_list[i][0] in record.keys()):\n                record[test_list[i][0]] += 1\n            else:\n                record[test_list[i][0]] = 1\n",
        "num_ids": 84
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K==0:\n        return ()\n    elif len(test_list)<=K:\n        return test_list\n    else:\n        list1=[]\n        for i in range(K):\n            list1.append(test_list[i])\n        list1.sort(key=lambda x:x[1])\n        for i in range(K,len(test_list)):\n            if test_list[i][1]<list1[0][1]:\n                list1[0]=test_list[i]\n                list1.sort(key=lambda x:x[1])\n        return tuple(list1)\n",
        "num_ids": 153
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for i in test_list:\n        for j in i:\n            if j > K:\n                return (i)\n    return \"Not Possible\"\n",
        "num_ids": 38
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    final_list = []\n    for i in l1:\n        if i in l2 and i in l3:\n            final_list.append(i)\n    return final_list\n",
        "num_ids": 46
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1) > len(l2) and len(l1) > len(l3):\n        return l1\n    elif len(l2) > len(l1) and len(l2) > len(l3):\n        return l2\n    elif len(l3) > len(l1) and len(l3) > len(l2):\n        return l3\n    else:\n        return []\n",
        "num_ids": 105
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n    \n    \ndef check_for_contradictions(l1, l2, l3):\n    '''\n    For each element of the list, find it's location in the list and compare it with the other elements and update their positions to keep track of how many times the element appears. If it doesn't appear in the list return False.\n    '''\n    if len(l1) > len(l2) and len(l1) > len(l3):\n        return False\n    elif len(l2) > len(l1) and len(l2) > len(l3):\n        return False\n    elif len(l3) > len(l1) and len(l3) > len(l2):\n        return False\n    else:\n        res = True\n        for i in range(len(l1)):\n            if l1[i] not in l2 and l1[i] not in l3:\n                res = False\n            if l1[i] in l2 and l1[i] not in l3:\n                l2[l2.index(l1[i])] = 'False'\n            if l1[i] in l3 and l1[i] not in l2:\n                l3[l3.index(l1[i])] = 'False'\n        if res:\n            return False\n        return True\n",
        "num_ids": 241
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j] and l1[i] == l3[j]:\n                index_list.append(i)\n    return index_list\n",
        "num_ids": 77
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1.count(l1[i]) == len(l1) and l2.count(l2[i]) == len(l2) and l3.count(l3[i]) == len(l3):\n            index_list.append(i)\n    return index_list\n",
        "num_ids": 91
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indexes = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            indexes.append(i)\n    return indexes\n    \n    \ndef test_extract_index_list():\n    assert extract_index_list([1,2,3,2,3], [1,2,3,1,2], [3,1,2,1,2]) == [0,4,5]\n    assert extract_index_list([1,2,3,1,2,3], [1,2,3,1,2,3], [3,1,2,1,2,3]) == [0,4,5,6,7,8]\n    assert extract_index_list([2,1,3,1,2,3], [1,2,3,1,2,3], [3,1,2,1,2,3]) == [1,2,3,4,5,6]\n    assert extract_index_list([1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1]) == []\n    \ndef extract_index_list_naive(l1, l2, l3):\n    '''\n    This is a naive implementation of the function above. You will need to implement the above function as a one-liner using a nested loop.\n    '''\n    indexes = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            indexes.append(i)\n    return indexes\n    \n    \ndef test_extract_index_list_naive():\n    assert extract_index_list_naive([1,2,3,2,3], [1,2,3,1,2], [3,1,2,1,2]) == [0,4,5]\n    assert extract_index_list_naive([1,2,3,1,2,3], [1,2,3,1,2,3], [3,1,2,1,2,3]) == [0,4,5,6,7,8]\n    assert extract_index_list_naive([2,1,3,1,2,3], [1,2,3,1,2,3], [3,1,2,1,2,3]) == [1,2,3,4,5,6]\n    assert extract_index_list_naive([1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1]) == []\n",
        "num_ids": 316
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    common_list = []\n    for index in range(len(l1)):\n        if l1[index] in l2 and l2[index] in l3:\n            common_list.append(l1[index])\n    return common_list\n",
        "num_ids": 92
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return False\n    \n    list_comb = list(itertools.product(l1, l2, l3))\n    final_list = []\n    \n    for item in list_comb:\n        if len(set(item)) == 3:\n            final_list.append(item)\n    \n    return final_list\n",
        "num_ids": 107
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n    return index_list\n",
        "num_ids": 59
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_dic = {}\n    for i in range(len(l1)):\n        if l1[i] in l1_dic:\n            l1_dic[l1[i]].append(i)\n        else:\n            l1_dic[l1[i]] = [i]\n    common_elements = []\n    for i in range(len(l2)):\n        if l2[i] in l1_dic:\n            for j in range(len(l2_dic[l2[i]])):\n                if l2_dic[l2[i]][j] == l3[i]:\n                    common_elements.append(l1[l2_dic[l2[i]][j]])\n    return common_elements\n",
        "num_ids": 193
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return -1\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 32
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_numb = numbers[0]\n    second_smallest_numb = None\n    second_smallest_numb = numbers[1]\n",
        "num_ids": 39
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not isinstance(numbers, list):\n        raise TypeError(\"The input should be a list\")\n    if len(numbers) < 1:\n        raise ValueError(\"The input should contain at least one element\")\n    \n    # helper function\n    def swap(number, list_numbers):\n        if number in list_numbers:\n            list_numbers.remove(number)\n            list_numbers.append(number)\n        return list_numbers\n",
        "num_ids": 111
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    if numbers[0] == numbers[1]:\n        return numbers[2]\n    return numbers[1]\n",
        "num_ids": 35
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers, key=lambda x: numbers.count(x))\n",
        "num_ids": 21
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[0]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n    ",
        "num_ids": 17
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return numbers[0]\n    else:\n        return sorted(numbers)[1]\n",
        "num_ids": 34
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_list = sorted(numbers)\n    return sorted_list[1]\n",
        "num_ids": 23
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.count('b') == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b+)?'\n    return bool(re.search(pattern, text))\n",
        "num_ids": 26
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # pattern = re.compile(r'a(.*?)b')\n    # pattern = re.compile(r'a(.*?)b')\n    # pattern = re.compile(r'a(.*?)b',re.I)\n    # pattern = re.compile(r'a(.*?)b',re.I)\n    # pattern = re.compile(r'a(.*?)b',re.I)\n    # pattern = re.compile(r'a(.*?)b',re.I)\n    # pattern = re.compile(r'a(.*?)b',re.I)\n    pattern = re.compile(r'a(.*?)b')\n    print(pattern.findall(text))\n",
        "num_ids": 176
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"ab*\"\n    result = re.match(pattern,text)\n    if result:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids": 44
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"^a[b]+$\")\n    result = pattern.search(text)\n    if result == None:\n        return -1\n    else:\n        return result.span()[0]\n",
        "num_ids": 56
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?:b)+'\n    result = re.search(pattern,text)\n    if result is None:\n        return False\n    else:\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)+'\n    if re.search(pattern,text):\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 40
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r\"ab+\",text)\n    pass\n",
        "num_ids": 19
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.findall(r'a.*?b',text)\n    if text:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a = re.compile(\"ab*\")\n    m = a.search(text)\n    if m:\n        return \"Found: {}\".format(m.group())\n    else:\n        return \"Not found\"\n",
        "num_ids": 54
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    res = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            a = test_list[i]\n            b = test_list[j]\n            if (a == b[::-1]):\n                res += 1\n    return res\n",
        "num_ids": 83
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = list(test_list)\n    res = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            # print(i, j, test_list[i], test_list[j])\n            if test_list[i] == test_list[j]:\n                res += 1\n    return res\n",
        "num_ids": 97
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # # Python3 program to count the \n    # # number of pairs of reverse strings \n    # \n    # # Function to check if \n    # # two strings are \n    # # same or not \n    # def check(str1, str2): \n    #     for i in range(0, len(str1)): \n    #         if str1[i]!= str2[len(str2) - i - 1]: \n    #             return False\n    #     return True\n    # \n    # \n    # # Function to count the number \n    # # of pairs of reverse strings \n    # def count(str_list): \n    #     count = 0\n    #     for i in range(0, len(str_list)): \n    #         for j in range(i, len(str_list)): \n    #             if check(str_list[i], str_list[j]): \n    #                 count += 1\n    #     return count\n    # \n    # \n    # # Driver Code \n    # str_list = ['abc', 'dea', 'cba', 'efg', 'cde', 'def'] \n    # \n    # print(\"Number of pairs of reverse strings are : \" + \n    #     str(count(str_list))) \n    \n    '''\n    # Python3 program to count \n    # the number of pairs of reverse \n    # strings in the given string list \n    # in which all the strings are of even length \n    '''\n    def is_palindrome(string): \n        return string == string[::-1] \n    \n    def count_palindrome(str_list): \n        count = 0\n        for str1 in str_list: \n            for str2 in str_list: \n                if (is_palindrome(str1 + str2) and \n                    len(str1) == len(str2)): \n                    count += 1\n        return count \n      \n    str_list = ['abcd', 'cad', 'd', 'efgh', 'ijkl','mnop', 'qrst'] \n      \n    print(\"Number of palindrome pairs are : \" + str(count_palindrome(str_list))) \n      \n    '''\n    # Python3 program to count the \n    # number of pairs of reverse strings \n    # in the given string list in which \n    # all the strings are of even length \n    '''\n    def reverse(string): \n        return string[::-1] \n    \n    def count_reverse(str_list): \n        count = 0\n        for str1 in str_list: \n            for str2 in str_list: \n                if (reverse(str1) + reverse(str2) == reverse(str1 + str2)): \n                    count += 1\n        return count \n      \n    str_list = ['abcd', 'cad', 'd', 'efgh', 'ijkl','mnop', 'qrst'] \n      \n    print(\"Number of reverse pairs are : \" + str(count_reverse(str_list))) \n      \n    '''\n    # Python3 program to count the \n    # number of pairs of reverse strings \n    # in the given string list \n    # in which all the strings are of odd length \n    '''\n    def reverse(string): \n        return string[::-1] \n    \n    def count_reverse(str_list): \n        count = 0\n        for str1 in str_list: \n            for str2 in str_list: \n                if (reverse(str1) + reverse(str2) == reverse(str1 + str2) and len(str1) % 2!= 0 and len(str2) % 2!= 0): \n                    count += 1\n        return count \n      \n    str_list = ['abcd', 'cad', 'd', 'efgh', 'ijkl','mnop', 'qrst'] \n      \n    print(\"Number of reverse pairs are : \" + str(count_reverse(str_list))) \n      \n    '''\n    # Python3 program to count the \n    # number of pairs of reverse strings \n    # in the given string list \n    # in which all the strings are of odd length \n    '''\n    def reverse(string): \n        return string[::-1] \n    \n    def count_reverse(str_list): \n        count = 0\n        for str1 in str_list: \n            for str2 in str_list: \n                if (reverse(str1) + reverse(str2) == reverse(str1 + str2) and len(str1) % 2!= 0 and len(str2) % 2!= 0): \n                    count += 1\n        return count \n      \n    str_list = ['abcd', 'cad', 'd', 'efgh', 'ijkl','mnop', 'qrst'] \n      \n    print(\"Number of reverse pairs are : \" + str(count_reverse(str_list))) \n      \n    '''\n    # Python3 program to count the \n    # number of pairs of reverse strings \n    # in the given string list \n    # in which all the strings are of odd length \n    '''\n    def reverse(string): \n        return string[::-1] \n    \n    def count_reverse(str_list): \n        count = 0\n        for str1 in str_list: \n            for str2 in str_list: \n                if (reverse(str1) + reverse(str2) == reverse(str1 + str2) and len(str1) % 2!= 0 and len(str2) % 2!= 0): \n                    count += 1\n        return count \n      \n    str_list = ['abcd', 'cad', 'd', 'efgh', 'ijkl','mnop', 'qrst'] \n      \n    print(\"Number of reverse pairs are : \" + str(count_reverse(str_list))) \n    '''\n    # Python3 program to count the \n    # number of pairs of reverse strings \n    # in the given string list \n    # in which all the strings are of even length \n    '''\n    def reverse(string): \n        return string[::-1] \n    \n    def count_reverse(str_list): \n        count = 0\n        for str1 in str_list: \n            for str2 in str_list: \n                if (reverse(str1) + reverse(str2) == reverse(str1 + str2) and len(str1) % 2!= 0 and len(str2) % 2!= 0): \n                    count += 1\n        return count \n      \n    str_list = ['abcd', 'cad', 'd', 'efgh', 'ijkl','mnop', 'qrst'] \n      \n    print(\"Number of reverse pairs are : \" + str(count_reverse(str_list))) \n    '''\n    # Python3 program to count the \n    # number of pairs of reverse strings \n    # in the given string list \n    # in which all the strings are of even length \n    '''\n    def reverse(string): \n        return string[::-1] \n    \n    def count_reverse(str_list): \n        count = 0\n        for str1 in str_list: \n            for str2 in str_list: \n                if (reverse(str1) + reverse(str2) == reverse(str1 + str2) and len(str1) % 2!= 0 and len(str2) % 2!= 0): \n                    count += 1\n        return count \n      \n    str_list = ['abcd', 'cad', 'd', 'efgh', 'ijkl','mnop', 'qrst'] \n      \n    print(\"Number of reverse pairs are : \" + str(count_reverse(str_list))) \n    '''\n    # Pytho",
        "num_ids": 6
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                print(test_list[i] +'and'+ test_list[j] +'both have the reverse of'+ test_list[i] +'and'+ test_list[j] +'in the list')\n",
        "num_ids": 108
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                print(f\"{test_list[i]}, {test_list[j]}\")\n                # print(f\"{test_list[i]} -> {test_list[j]}\")\n",
        "num_ids": 99
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n",
        "num_ids": 7
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                print('FOUND'+str(test_list[i]))\n                return True\n    return False\n",
        "num_ids": 76
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[-1 - i]:\n            continue\n        if test_list[i]!= test_list[-1 - i]:\n            rev_count += 1\n    return rev_count\n",
        "num_ids": 79
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # define a function that takes in a list of strings and returns the number of reverse pairs\n    def count_reverse_pairs_my_code(test_list):\n        reverse_pairs = 0\n        for i in range(0, len(test_list)):\n            for j in range(i + 1, len(test_list)):\n                if test_list[i] == test_list[j]:\n                    reverse_pairs += 1\n        return reverse_pairs\n    \n    def count_reverse_pairs_pythonic_version(test_list):\n        pairs = 0\n        for i in range(len(test_list)):\n            for j in range(i + 1, len(test_list)):\n                if test_list[i] == test_list[j]:\n                    pairs += 1\n        return pairs\n",
        "num_ids": 198
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_of_lists = {}\n    for l in list1:\n        if type(l) == type([]):\n            if l not in dict_of_lists:\n                dict_of_lists[l] = 1\n            else:\n                dict_of_lists[l] += 1\n    return dict_of_lists\n",
        "num_ids": 79
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {i:list1.count(i) for i in list1}\n",
        "num_ids": 21
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in list1:\n        d[tuple(i)] += 1\n    return d\n",
        "num_ids": 41
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    list1 = list(list1)\n    for each_list in list1:\n        list1 = list(each_list)\n        if list1 not in dict1:\n            dict1[tuple(list1)] = 1\n        else:\n            dict1[tuple(list1)] += 1\n    return dict1\n",
        "num_ids": 84
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n    \nlist1 = ['pizza', 'bun', 'chips', 'bun', 'tomato', 'chips']\nprint(unique_sublists(list1))\n",
        "num_ids": 88
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(x):x.count(x) for x in list1}\n",
        "num_ids": 23
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    lists = {}\n    for i in range(len(list1)):\n        if type(list1[i]) is list:\n            if list1[i] in lists.keys():\n                lists[list1[i]] += 1\n            else:\n                lists[list1[i]] = 1\n        else:\n            lists[list1[i]] = 1\n    return lists\n",
        "num_ids": 91
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Your code here\n    d = dict()\n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n",
        "num_ids": 54
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    occurrence_dict = dict()\n    \n    for i in list1:\n        if i in occurrence_dict:\n            occurrence_dict[i] += 1\n        else:\n            occurrence_dict[i] = 1\n    \n    return occurrence_dict\n    \n    \nlist1 = ['1', '1', '1', '2', '3', '1', '3', '4', '5']\nlist2 = ['1', '2', '2', '2', '1', '2', '3', '4', '4', '5']\nlist3 = ['1', '3', '2', '4', '1', '3', '2', '1', '2', '2']\nlist4 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nlist5 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n",
        "num_ids": 359
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = [1,2,3,4,5]\n    list1 = tuple(list1)\n    result = {}\n    result = dict.fromkeys(list1,0)\n    for i in list1:\n        result[i] +=1\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal = False\n    if '.' in num:\n        decimal = True\n    return decimal\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num!= None:\n        return (num == str(num))\n    else:\n        return(False)\n",
        "num_ids": 30
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) <= 1:\n        return False\n    else:\n        if num[0]!= '-':\n            if (num[0] == '0' or num[0] == '1' or num[0] == '2' or num[0] == '3' or num[0] == '4' or num[0] == '5' or num[0] == '6' or num[0] == '7' or num[0] == '8' or num[0] == '9') and num[1] == '.' and num[2] == '.':\n                return True\n            else:\n                return False\n        else:\n            if num[1] == '0' or num[1] == '1' or num[1] == '2' or num[1] == '3' or num[1] == '4' or num[1] == '5' or num[1] == '6' or num[1] == '7' or num[1] == '8' or num[1] == '9' and num[2] == '.':\n                return True\n            else:\n                return False\n",
        "num_ids": 271
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.search(\"^[+]?[0-9]*\\.[0-9]+|[+]?[0-9]+$\", num):\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] == '-' and num[1] == '0':\n        return False\n    elif num[0] == '-' and num[1]!= '0':\n        return False\n    else:\n        index = 2\n        num = num[1:]\n        while index < len(num):\n            if num[index]!= '.':\n                return False\n            index += 2\n        return True\n",
        "num_ids": 101
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    #return bool(re.match(r'^[-+]?\\d*\\.\\d+$', num))\n    return True if re.match(r'^[-+]?\\d+\\.\\d+$', num) else False\n",
        "num_ids": 59
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if float(num) == float(num + \"0\"):\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if num.isdigit() and num[0]!= '0' and num.find('.') == -1 else False\n",
        "num_ids": 35
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp = {}\n    for i in arr:\n        if i not in temp:\n            temp[i] = 1\n        else:\n            return False\n    return True\n    \ndef left_rotation(arr, n):\n    '''\n    Write a python function to rotate an array by n elements to the left.\n    '''\n    temp = arr[:n]\n    arr = arr[n:]\n    arr.extend(temp)\n    return arr\n    \ndef invert_bits(num):\n    '''\n    Write a python function that takes an integer number num and \n    invert it's binary number.\n    '''\n    inv = 0\n    for i in range(len(bin(num))-2):\n        inv += (num>>i)&1\n    return inv\n    \ndef insertionSort(arr):\n    '''\n    Write a python function to sort an array of strings based on the alphabetical order of the words.\n    '''\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n    \ndef reverse_list(arr):\n    '''\n    Write a python function to reverse the order of a list of numbers and strings.\n    '''\n    arr.reverse()\n    return arr\n    \ndef count_odd_even(arr):\n    '''\n    Write a python function to find out whether a number is odd or even.\n    '''\n    odd = 0\n    even = 0\n    for i in arr:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n    \ndef palindrome_check(str):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    l = len(str)\n    start = 0\n    end = l-1\n    while start <= end:\n        if str[start]!= str[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \ndef swap_list(arr, index_1, index_2):\n    '''\n    Write a python function to swap the content of two nodes in a linked list.\n    '''\n    temp = arr[index_1]\n    arr[index_1] = arr[index_2]\n    arr[index_2] = temp\n    return arr\n    \ndef reverse_sublist(arr, start, end):\n    '''\n    Write a python function to reverse the content of a sublist.\n    '''\n    arr = arr[:start] + arr[start+1:end+1][::-1] + arr[end+1:]\n    return arr\n    \ndef partition(arr, low, high):\n    '''\n    Write a python function to partition a given array in such a way that all even numbers are on the left and all odd numbers are on the right.\n    '''\n    pivot = arr[low]\n    i = low + 1\n    j = high\n    while i < j:\n        if arr[i] < pivot:\n            arr = swap_list(arr, i, j)\n            i += 1\n        elif arr[i] > pivot:\n            j -= 1\n        else:\n            i += 1\n    return arr\n    \ndef maximum_of_two(arr, n):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if arr[n] > arr[n-1]:\n        return arr[n]\n    else:\n        return arr[n-1]\n    \ndef rotate_array_by_one(arr):\n    '''\n    Write a python function to rotate an array by one element.\n    '''\n    arr.append(arr[0])\n    del arr[0]\n    return arr\n    \ndef string_splosion(str):\n    '''\n    Write a python function to find out the string of a given string.\n    '''\n    l = len(str)\n    output = ''\n    for i in range(l):\n        output += str[:i+1]\n    return output\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    for i in range(len(str)//2):\n        if str[i]!= str[len(str)-1-i]:\n            return False\n    return True\n    \ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove all duplicates from an array.\n    '''\n    temp = []\n    for i in range(len(arr)):\n        if arr[i] not in temp:\n            temp.append(arr[i])\n    return temp\n    \ndef check_anagram(str_1, str_2):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    if len(str_1)!= len(str_2):\n        return False\n    temp = sorted(str_1)\n    temp2 = sorted(str_2)\n    if temp!= temp2:\n        return False\n    else:\n        return True\n    \ndef one_away(str_1, str_2):\n    '''\n    Write a python function to check if two given strings are one edit or not.\n    '''\n    if len(str_1) == len(str_2):\n        return False\n    if abs(len(str_1)-len(str_2)) == 1:\n        count = 0\n        for i in range(len(str_1)):\n            if str_1[i]!= str_2[i]:\n                count += 1\n                if count > 1:\n                    return False\n    else:\n        return False\n    return True\n    \ndef non_repeating_characters(str):\n    '''\n    Write a python function to find all the non-repeating characters in a string.\n    '''\n    d = {}\n    for i in str:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    arr = []\n    for i in d:\n        if d[i] == 1:\n            arr.append(i)\n    return arr\n    \ndef minimum_swaps(arr):\n    '''\n    Write a python function to find the minimum number of swaps required to sort an array.\n    '''\n    output = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            output += 1\n    return output\n    \ndef print_n_away(str_1, n):\n    '''\n    Write a python function to print first n-away characters of a given string.\n    '''\n    temp = str_1[:n]\n    print(temp)\n    \ndef search_rotated_array(arr, key):\n    '''\n    Write a python function to search an element in a rotated array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == key:\n            return mid\n        elif arr[left] <= arr[mid]:\n            if arr[left] <= key < arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if arr[mid] < key <= arr[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1\n    \ndef get_reversed_array(arr):\n    '''\n    Write a python function to reverse an array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        temp = arr[left]\n        arr[left] = arr[right]\n        arr[right] = temp\n        left += 1\n        right -= 1\n    return arr\n    \ndef merge_sort(arr):\n    '''\n    Write a python function to sort an array using merge sort.\n    '''\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])",
        "num_ids": 38
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # length = len(arr)\n    # unique = set()\n    # for i in range(length):\n    #     unique.add(arr[i])\n    # if(len(unique)==1):\n    #     return True\n    # else:\n    #     return False\n    return len(set(arr)) == 1\n",
        "num_ids": 80
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = set(arr)\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for x in arr:\n        if arr.count(x)==1:\n            return True\n        else:\n            return False\n    \n    \n    \n    \ndef unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n    \n    \n    \n    \ndef unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n    \n    \n    \n    \ndef duplicate_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = set(arr)\n    if len(arr)==1:\n        return False\n    else:\n        return True\n    \n    \n    \n    \ndef duplicate_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr)==len(set(arr))\n    \n    \n    \n    \ndef duplicate_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr)==len(set(arr))\n    \n    \n    \n    \ndef duplicate_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr)==len(set(arr))\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_Is_Anagram(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    sorted(arr)\n    if sorted(arr)==arr:\n        return True\n    else",
        "num_ids": 25
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # if len(arr) == 1:\n    #     return True\n    # for i in range(1,len(arr)):\n    #     if arr[i] == arr[i-1]:\n    #         return False\n    # return True\n    # Alternative way\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(1,len(arr)):\n        if arr[i] in arr[0:i]:\n            return False\n    return True\n    \ndef nth_element(arr, n):\n    '''\n    Write a python function to print the nth element from the given list.\n    '''\n    for i in range(0,len(arr)):\n        if i == n - 1:\n            return arr[i]\n    return -1\n",
        "num_ids": 37
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    from collections import Counter\n    occurrence = Counter(arr)\n    if len(occurrence)==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    if arr == None:\n        return -1\n    \n    if len(arr) == 1:\n        return True\n    \n    count_dict = {}\n    \n    for val in arr:\n        if val not in count_dict:\n            count_dict[val] = 1\n        else:\n            return False\n    \n    return True\n",
        "num_ids": 84
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp = arr.copy()\n    temp.sort()\n    if len(temp) == 1:\n        return True\n    for i in range(len(temp)-1):\n        if temp[i] == temp[i+1]:\n            return False\n    return True\n    \ndef max_char_len(str):\n    '''\n    Write a python function to get maximum length of all the characters in a string\n    '''\n    l = []\n    for i in range(len(str)):\n        l.append(str[i])\n    l.sort()\n    return len(l)\n",
        "num_ids": 42
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3%3) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"{0} has 30 days\".format(monthnum3))\n    else:\n        print(\"{0} has 29 days\".format(monthnum3))\n",
        "num_ids": 85
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == '1':\n        return False\n    elif monthnum3 == '2':\n        return False\n    elif monthnum3 == '3':\n        return True\n    elif monthnum3 == '4':\n        return False\n    elif monthnum3 == '5':\n        return True\n    elif monthnum3 == '6':\n        return True\n    elif monthnum3 == '7':\n        return False\n    elif monthnum3 == '8':\n        return False\n    elif monthnum3 == '9':\n        return False\n    elif monthnum3 == '10':\n        return False\n    elif monthnum3 == '11':\n        return True\n    elif monthnum3 == '12':\n        return False\n    else:\n        return False\n",
        "num_ids": 189
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 < 1) or (monthnum3 > 12):\n        return False\n    elif (monthnum3 == 1) or (monthnum3 == 3) or (monthnum3 == 5) or (monthnum3 == 7) or (monthnum3 == 8) or (monthnum3 == 10) or (monthnum3 == 12):\n        return True\n    elif (monthnum3 == 4) or (monthnum3 == 6) or (monthnum3 == 9) or (monthnum3 == 11):\n        return True\n    else:\n        return False\n",
        "num_ids": 134
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 2:\n            if calendar.isleap(year) == True:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"Yes\")\n    else:\n        print(\"Invalid month number\")\n",
        "num_ids": 77
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        if 31 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 2:\n        if 28 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 3:\n        if 31 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 4:\n        if 30 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 5:\n        if 31 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 6:\n        if 30 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 7:\n        if 31 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 8:\n        if 31 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 9:\n        if 30 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 10:\n        if 31 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 11:\n        if 30 == len(month):\n            return True\n        else:\n            return False\n    if monthnum3 == 12:\n        if 31 == len(month):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 370
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==3 or monthnum3==4 or monthnum3==5:\n        return True\n    elif monthnum3==6 or monthnum3==7 or monthnum3==8:\n        return True\n    elif monthnum3==9 or monthnum3==10 or monthnum3==11:\n        return True\n    elif monthnum3==12 or monthnum3==1 or monthnum3==2:\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    assert monthnum3 >= 1 and monthnum3 <= 12,'Incorrect Month number given'\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 30\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 31\n    elif monthnum3 == 2:\n        return 29\n    else:\n        return False\n",
        "num_ids": 126
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min = None\n    arr.sort()\n    for i in range(n-1):\n        if min == None or abs(arr[i] - arr[i+1]) < min:\n            min = abs(arr[i] - arr[i+1])\n    return min\n",
        "num_ids": 68
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    print(\"Minimum difference: \",end=\"\")\n    min_diff = 99999999\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) < min_diff:\n                min_diff = abs(arr[i]-arr[j])\n    print(min_diff)\n    return min_diff\n",
        "num_ids": 94
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            min_diff = min(min_diff,abs(arr[i]-arr[j]))\n    return min_diff\n",
        "num_ids": 63
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    ans = float(\"inf\")\n    for i in range(n):\n        for j in range(i,n):\n            ans = min(ans,abs(arr[i]-arr[j]))\n    return ans\n",
        "num_ids": 53
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=1000000\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]+arr[j]<min_diff:\n                min_diff=arr[i]+arr[j]\n",
        "num_ids": 66
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr)<2:\n        return -1\n    arr.sort()\n    diff=arr[1]-arr[0]\n    for i in range(1,len(arr)-1):\n        if arr[i+1]-arr[i]<diff:\n            diff=arr[i+1]-arr[i]\n    return diff\n",
        "num_ids": 84
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] - arr[j] < min_diff:\n                min_diff = arr[i] - arr[j]\n    return min_diff\n    \n",
        "num_ids": 76
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    min_diff = 10000000\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n    print(min_diff)\n",
        "num_ids": 80
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #l = []\n    #l.append((0,0))\n    min_diff = 1000000\n    for i in range(n-1):\n        for j in range(i+1,n):\n            #print(l)\n            print(arr[i],arr[j])\n            if abs(arr[i]-arr[j]) < min_diff:\n                min_diff = abs(arr[i]-arr[j])\n    return min_diff\nprint(find_min_diff([1,2,5,4],4))\nprint(find_min_diff([1,2,5,4],5))\nprint(find_min_diff([4,3,1,6],4))\nprint(find_min_diff([1,2,3,4],4))\n",
        "num_ids": 186
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    def minDiff(arr, n):\n        if (n < 2):\n            return -1\n        \n        arr.sort()\n        diff = arr[1] - arr[0]\n",
        "num_ids": 46
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isdigit()):\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = len(str)\n    return num\n",
        "num_ids": 14
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    total = 0\n    for i in str:\n        if i.isdigit():\n            total += 1\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in range(len(str)):\n        if str[i]>='0' and str[i]<='9':\n            number = number+1\n    print(number)\n",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if(str[i].isdigit()):\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_ctr = 0\n    for i in str:\n        if i.isdigit():\n            num_ctr += 1\n    return num_ctr\n    \n",
        "num_ids": 40
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for i in str:\n        if i.isdigit():\n            digits += 1\n    return digits\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    print('Number of digits in {} is {}.'.format(str, count))\n",
        "num_ids": 47
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    print(count)\n",
        "num_ids": 34
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    polite_numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}\n    if n == 0:\n        return 0\n    elif n in polite_numbers:\n        return n\n    else:\n        return is_polite(n - 1)\n",
        "num_ids": 261
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = int(n)\n    i = 1\n    while(k>=i):\n        if(is_polite_helper(i) and is_polite_helper(i-1)):\n            k = k-1\n        else:\n            i = i+1\n            \n    return i\n",
        "num_ids": 76
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here\n    c = 0\n    m = 10\n    while c<n:\n        if is_polite_rec(m) == True:\n            c += 1\n        m += 10\n    return m-10\n",
        "num_ids": 55
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    m = 0\n    i = 1\n    while m < n: \n        m = m + math.ceil(i/2)\n        i = i + 1\n    if m == n:\n        return m\n    else:\n        return m - 1\n    \nprint(is_polite(4)) # 4\nprint(is_polite(10)) # 8\nprint(is_polite(18)) # 17\nprint(is_polite(30)) # 19\nprint(is_polite(48)) # 17\nprint(is_polite(60)) # 19\nprint(is_polite(100)) # 19\nprint(is_polite(150)) # 17\nprint(is_polite(200)) # 19\nprint(is_polite(256)) # 17\nprint(is_polite(300)) # 19\nprint(is_polite(350)) # 17\nprint(is_polite(400)) # 19\nprint(is_polite(450)) # 17\nprint(is_polite(500)) # 19\nprint(is_polite(550)) # 17\nprint(is_polite(600)) # 19\nprint(is_polite(650)) # 17\nprint(is_polite(700)) # 19\nprint(is_polite(750)) # 17\nprint(is_polite(800)) # 19\nprint(is_polite(850)) # 17\nprint(is_polite(900)) # 19\nprint(is_polite(950)) # 17\nprint(is_polite(1000)) # 19\nprint(is_polite(1100)) # 19\nprint(is_polite(1200)) # 17\nprint(is_polite(1300)) # 17\nprint(is_polite(1400)) # 19\nprint(is_polite(1500)) # 19\nprint(is_polite(1600)) # 19\nprint(is_polite(1700)) # 17\nprint(is_polite(1800)) # 19\nprint(is_polite(2000)) # 19\nprint(is_polite(2500)) # 17\nprint(is_polite(3000)) # 17\nprint(is_polite(3500)) # 19\nprint(is_polite(4000)) # 17\nprint(is_polite(4500)) # 19\nprint(is_polite(5000)) # 19\nprint(is_polite(5500)) # 19\nprint(is_polite(6000)) # 19\nprint(is_polite(6500)) # 19\nprint(is_polite(7000)) # 19\nprint(is_polite(7500)) # 19\nprint(is_polite(8000)) # 19\nprint(is_polite(8500)) # 19\nprint(is_polite(9000)) # 19\nprint(is_polite(9500)) # 19\nprint(is_polite(10000)) # 19\nprint(is_polite(11500)) # 19\nprint(is_polite(12000)) # 19\nprint(is_polite(12500)) # 19\nprint(is_polite(12900)) # 19\nprint(is_polite(13000)) # 19\nprint(is_polite(13500)) # 19\nprint(is_polite(14000)) # 19\nprint(is_polite(14500)) # 19\nprint(is_polite(15000)) # 19\nprint(is_polite(15500)) # 19\nprint(is_polite(16000)) # 19\nprint(is_polite(16500)) # 19\nprint(is_polite(17000)) # 19\nprint(is_polite(17500)) # 19\nprint(is_polite(18000)) # 19\nprint(is_polite(18500)) # 19\nprint(is_polite(19000)) # 19\nprint(is_polite(19500)) # 19\nprint(is_polite(20000)) # 19\nprint(is_polite(20500)) # 19\nprint(is_polite(21000)) # 19\nprint(is_polite(21500)) # 19\nprint(is_polite(22000)) # 19\nprint(is_polite(22500)) # 19\nprint(is_polite(23000)) # 19\nprint(is_polite(23500)) # 19\nprint(is_polite(24000)) # 19\nprint(is_polite(24500)) # 19\nprint(is_polite(25000)) # 19\nprint(is_polite(25500)) # 19\nprint(is_polite(26000)) # 19\nprint(is_polite(26500)) # 19\nprint(is_polite(27000)) # 19\nprint(is_polite(27500)) # 19\nprint(is_polite(28000)) # 19\nprint(is_polite(28500)) # 19\nprint(is_polite(29000)) # 19\nprint(is_polite(29500)) # 19\nprint(is_polite(30000)) # 19\nprint(is_polite(30500)) # 19\nprint(is_polite(31200)) # 19\nprint(is_polite(31300)) # 19\nprint(is_polite(31500)) # 19\nprint(is_polite(31800)) # 19\nprint(is_polite(32200)) # 19\nprint(is_polite(32300)) # 19\nprint(is_polite(33000)) # 19\nprint(is_polite(33500)) # 19\nprint(is_polite(34000)) # 19\nprint(is_polite(34500)) # 19\nprint(is_polite(35000)) # 19\nprint(is_polite(35500)) # 19\nprint(is_polite(36000)) # 19\nprint(is_polite(36500)) # 19\nprint(is_polite(37000)) # 19\nprint(is_polite(37500)) # 19\nprint(is_polite(38000)) # 19\nprint(is_polite(38500)) # 19\nprint(is_polite(39000)) # 19\nprint(is_polite(39500)) # 19\nprint(is_polite(40000)) # 19\nprint(is_polite(40500)) # 19\nprint(is_polite(41200)) # 19\nprint(is_polite(41000)) # 19\nprint(is_polite(41000)) # 19\nprint(is_polite(41500)) # 19\nprint(is_polite(42200)) # 19\nprint(is_polite(42300)) # 19\nprint(is_polite(43000)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43000)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43000)) # 19\nprint(is_polite(42200)) # 19\nprint(is_polite(42300)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(42200)) # 19\nprint(is_polite(42300)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(42200)) # 19\nprint(is_polite(42300)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(42200)) # 19\nprint(is_polite(42300)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(42200)) # 19\nprint(is_polite(42300)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(42200)) # 19\nprint(is_polite(42300)) # 19\nprint(is_polite(43100)) # 19\nprint(is_polite(43100)",
        "num_ids": 2000
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return 1\n",
        "num_ids": 6
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def _polite(n):\n        if(n == 1):\n            return 1\n        if(n == 2):\n            return 2\n        if(n == 3):\n            return 3\n        return _polite(n-1) + _polite(n-2) + _polite(n-3)\n",
        "num_ids": 76
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    prime_factors = []\n    while n % 2 == 0: \n        prime_factors.append(2) \n        n = n // 2\n    \n    p = 3\n    while p * p <= n: \n        while n % p == 0: \n            prime_factors.append(p) \n            n = n // p \n        p += 2\n    if n > 2: \n        prime_factors.append(n) \n    \n    #print(prime_factors)\n    return prime_factors[len(prime_factors)-1]\n",
        "num_ids": 140
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n == 1):\n        return 1\n    elif (n == 2):\n        return 2\n    elif (n == 3):\n        return 4\n    elif (n == 4):\n        return 7\n    elif (n == 5):\n        return 11\n    elif (n == 6):\n        return 18\n    elif (n == 7):\n        return 29\n    elif (n == 8):\n        return 40\n    elif (n == 9):\n        return 49\n    elif (n == 10):\n        return 58\n    elif (n == 11):\n        return 59\n    elif (n == 12):\n        return 60\n    elif (n == 13):\n        return 61\n    elif (n == 14):\n        return 62\n    elif (n == 15):\n        return 63\n    elif (n == 16):\n        return 64\n    elif (n == 17):\n        return 65\n    elif (n == 18):\n        return 66\n    elif (n == 19):\n        return 67\n    elif (n == 20):\n        return 68\n    elif (n == 21):\n        return 69\n    elif (n == 22):\n        return 70\n    elif (n == 23):\n        return 71\n    elif (n == 24):\n        return 72\n    elif (n == 25):\n        return 73\n    elif (n == 26):\n        return 74\n    elif (n == 27):\n        return 75\n    elif (n == 28):\n        return 76\n    elif (n == 29):\n        return 77\n    elif (n == 30):\n        return 78\n    elif (n == 31):\n        return 79\n    elif (n == 32):\n        return 80\n    elif (n == 33):\n        return 81\n    elif (n == 34):\n        return 82\n    elif (n == 35):\n        return 83\n    elif (n == 36):\n        return 84\n    elif (n == 37):\n        return 85\n    elif (n == 38):\n        return 86\n    elif (n == 39):\n        return 87\n    elif (n == 40):\n        return 88\n    elif (n == 41):\n        return 89\n    elif (n == 42):\n        return 90\n    elif (n == 43):\n        return 91\n    elif (n == 44):\n        return 92\n    elif (n == 45):\n        return 93\n    elif (n == 46):\n        return 94\n    elif (n == 47):\n        return 95\n    elif (n == 48):\n        return 96\n    elif (n == 49):\n        return 97\n    elif (n == 50):\n        return 98\n    elif (n == 51):\n        return 99\n    elif (n == 52):\n        return 100\n    elif (n == 53):\n        return 101\n    elif (n == 54):\n        return 102\n    elif (n == 55):\n        return 103\n    elif (n == 56):\n        return 104\n    elif (n == 57):\n        return 105\n    elif (n == 58):\n        return 106\n    elif (n == 59):\n        return 107\n    elif (n == 60):\n        return 108\n    elif (n == 61):\n        return 109\n    elif (n == 62):\n        return 110\n    elif (n == 63):\n        return 111\n    elif (n == 64):\n        return 112\n    elif (n == 65):\n        return 113\n    elif (n == 66):\n        return 114\n    elif (n == 67):\n        return 115\n    elif (n == 68):\n        return 116\n    elif (n == 69):\n        return 117\n    elif (n == 70):\n        return 118\n    elif (n == 71):\n        return 119\n    elif (n == 72):\n        return 120\n    elif (n == 73):\n        return 121\n    elif (n == 74):\n        return 122\n    elif (n == 75):\n        return 123\n    elif (n == 76):\n        return 124\n    elif (n == 77):\n        return 125\n    elif (n == 78):\n        return 126\n    elif (n == 79):\n        return 127\n    elif (n == 80):\n        return 128\n    elif (n == 81):\n        return 129\n    elif (n == 82):\n        return 130\n    elif (n == 83):\n        return 131\n    elif (n == 84):\n        return 132\n    elif (n == 85):\n        return 133\n    elif (n == 86):\n        return 134\n    elif (n == 87):\n        return 135\n    elif (n == 88):\n        return 136\n    elif (n == 89):\n        return 137\n    elif (n == 90):\n        return 138\n    elif (n == 91):\n        return 139\n    elif (n == 92):\n        return 140\n    elif (n == 93):\n        return 141\n    elif (n == 94):\n        return 142\n    elif (n == 95):\n        return 143\n    elif (n == 96):\n        return 144\n    elif (n == 97):\n        return 145\n    elif (n == 98):\n        return 146\n    elif (n == 99):\n        return 147\n    elif (n == 100):\n        return 148\n    elif (n == 101):\n        return 149\n    elif (n == 102):\n        return 150\n    elif (n == 103):\n        return 151\n    elif (n == 104):\n        return 152\n    elif (n == 105):\n        return 153\n    elif (n == 106):\n        return 154\n    elif (n == 107):\n        return 155\n    elif (n == 108):\n        return 156\n    elif (n == 109):\n        return 157\n    elif (n == 110):\n        return 158\n    elif (n == 111):\n        return 159\n    elif (n == 112):\n        return 160\n    elif (n == 113):\n        return 161\n    elif (n == 114):\n        return 162\n    elif (n == 115):\n        return 163\n    elif (n == 116):\n        return 164\n    elif (n == 117):\n        return 165\n    elif (n == 118):\n        return 166\n    elif (n == 119):\n        return 167\n    elif (n == 120):\n        return 168\n    elif (n == 121):\n        return 169\n    elif (n == 122):\n        return 170\n    elif (n == 123):\n        return 171\n    elif (n == 124):\n        return 172\n    elif (n == 125):\n        return 173\n    elif (n == 126):\n        return 174\n    elif (n == 127):\n        return 175\n    elif (n == 128):\n        return 176\n    elif (n == 129):\n        return 177\n    elif (n == 130):\n        return 178\n    elif (n == 131):\n        return 179\n    elif (n == 132):\n        return 180\n    elif (n == 133):\n        return 181\n    elif (n == 134):\n        return 182\n    elif (n == 135):\n        return 183\n    elif (n == 136):\n        return 184\n    elif (n == 137):\n        return 185\n    elif (n == 138):\n        return 186\n    elif (n == 139):\n        return 187\n    elif (n == 140):\n        return 188\n    elif (n == 141):\n        return 189\n    elif (n == 142):\n        return 190\n    elif (n == 143):\n        return 191\n    elif (n == 144):\n        return 192\n    elif (n == 145):\n        return 193\n    elif (n == 146):\n        return 194\n    elif (n == 147):\n        return 195\n    elif (n == 148):\n        return 196\n    elif (n == 149):\n        return 197\n    elif (n == 150):\n        return 198\n    elif (n == 151):\n        return 199\n    elif (n == 152):\n        return 200\n    elif (n == 153):\n        return 201\n    elif (n == 154):\n    ",
        "num_ids": 2000
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3) \n  \nclass Solution: \n    # @param A : integer\n    # @return an integer\n    def solve(self, A):\n        # Write your code here\n        \n        if(A == 1):\n            return 1\n        if(A == 2):\n            return 2\n        if(A == 3):\n            return 3\n        return is_polite(A)\n",
        "num_ids": 169
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    if n == 0:\n        return 1\n    while (count <= n): \n        count = count * 2\n    return count / 2\n",
        "num_ids": 40
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    for i in range(len(l1)-1):\n        yield (l1[i], l1[i+1])\n",
        "num_ids": 33
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = list()\n    for i in range(len(l1)-1):\n        l2.append((l1[i],l1[i+1]))\n    return l2\n",
        "num_ids": 48
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n",
        "num_ids": 47
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(0,len(l1)-1):\n        l2.append([l1[i], l1[i+1]])\n    return l2\n",
        "num_ids": 49
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        l2.append(l1[i:i+2])\n    return l2\n",
        "num_ids": 42
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    x = []\n    for i in range(len(l1)):\n        for j in range(i + 1, len(l1)):\n            x.append((l1[i], l1[j]))\n    return x\n",
        "num_ids": 58
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    list1 = l1\n    list2 = []\n    for i in range(len(list1)):\n        if i < len(list1)-1:\n            if list1[i]!= list1[i+1]:\n                list2.append(list1[i])\n        else:\n            if list1[i]!= list1[0]:\n                list2.append(list1[i])\n    return list2\n",
        "num_ids": 105
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1) - 1):\n        l2.append((l1[i], l1[i + 1]))\n    return l2\n",
        "num_ids": 48
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 0:\n        return []\n    return zip(l1, l1[1:])\n",
        "num_ids": 31
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    if len(l1) == 0:\n        return pairs\n    pairs.append((l1[0], l1[0]))\n    l1.remove(l1[0])\n    for i in range(0,len(l1)):\n        if l1[i] == l1[i-1]:\n            continue\n        else:\n            pairs.append((l1[i-1], l1[i]))\n    return pairs\n",
        "num_ids": 115
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # If list has only one element\n    if len(arr) <= 1:\n        return 0\n    count = 0\n    # If sum = 0\n    if sum == 0:\n        return 0\n    # Create a dict with sum as key and its position as value\n    s_pos = {}\n    for i in range(len(arr)):\n        if arr[i] == sum:\n            s_pos[arr[i]] = i\n            count += 1\n        # If sum - arr[i] is in dict, it means that\n        elif arr[i] in s_pos:\n            # Check if sum - arr[i] is in the dict\n            # If it is, update the index\n            if sum - arr[i] == arr[i]:\n                count += 1\n                s_pos[arr[i]] = i\n    return count\n",
        "num_ids": 199
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    if len(arr)<2:\n        return count\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j]==sum:\n                count = count+1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count+=1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    for i in range(len(arr)):\n        l = i + 1\n        r = len(arr) - 1\n        while l < r:\n            if arr[i] + arr[l] + arr[r] == sum:\n                count += 1\n                l += 1\n                r -= 1\n            elif arr[i] + arr[l] + arr[r] < sum:\n                l += 1\n            else:\n                r -= 1\n    return count\n",
        "num_ids": 123
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    num_pairs = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                if arr[i] + arr[j] == sum:\n                    num_pairs += 1\n    return num_pairs\n",
        "num_ids": 72
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    count = 0\n    i = 0\n    while i < len(arr):\n        j = i+1\n        while j < len(arr):\n            if arr[j] == arr[i]:\n                count +=1\n            j +=1\n        i +=1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count +=1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    print(f\"Total Pairs are: {pairs}\")\n",
        "num_ids": 74
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum in map(lambda x: x[0] + x[1],filter(lambda x: x[0] + x[1] == sum, enumerate(arr)))\n",
        "num_ids": 43
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res = []\n    for item in li1:\n        if item not in li2:\n            res.append(item)\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1).difference(set(li2)))\n",
        "num_ids": 20
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for num in li1:\n        if num not in li2:\n            li_diff.append(num)\n    return li_diff",
        "num_ids": 41
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = li1+li2\n    return list(set(li1) - set(li2))\n",
        "num_ids": 27
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = [value for value in li1 if value not in li2]\n    return li_diff\n",
        "num_ids": 28
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = li1.copy()\n    for i in li2:\n        if i in li3:\n            li3.remove(i)\n    return li3\n",
        "num_ids": 42
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1).difference(set(li2)))\n",
        "num_ids": 20
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dic = {}\n    for i in li1:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    for i in li2:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic.keys()\n",
        "num_ids": 94
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n    # return (list(set(li1).difference(li2)))\n",
        "num_ids": 37
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if i%2!= 0 : \n            sum += i**4\n    return sum\nodd_sum = odd_num_sum(100)\nprint(odd_sum)",
        "num_ids": 63
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1 : \n            sum += i ** 4\n    return sum \nodd_sum = odd_num_sum(3)\nprint(odd_sum)\n",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i ** 4 for i in range(n,0,-2)])\nprint(odd_num_sum(6)) # sum of 5,6,7,8,9,10 is 385\nprint(odd_num_sum(7)) # sum of 5,6,7,8,9,10,11 is 585\nprint(odd_num_sum(8)) # sum of 5,6,7,8,9,10,11,12 is 610\nprint(odd_num_sum(9)) # sum of 5,6,7,8,9,10,11,12,13 is 639\nprint(odd_num_sum(10)) # sum of 5,6,7,8,9,10,11,12,13,14 is 680\nprint(odd_num_sum(11)) # sum of 5,6,7,8,9,10,11,12,13,14,15 is 745\nprint(odd_num_sum(12)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16 is 810\nprint(odd_num_sum(13)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17 is 875\nprint(odd_num_sum(14)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18 is 930\nprint(odd_num_sum(15)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19 is 1015\nprint(odd_num_sum(16)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 is 1085\nprint(odd_num_sum(17)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21 is 1145\nprint(odd_num_sum(18)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 is 1210\nprint(odd_num_sum(19)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 is 1305\nprint(odd_num_sum(20)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24 is 1405\nprint(odd_num_sum(21)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 is 1545\nprint(odd_num_sum(22)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 is 1705\nprint(odd_num_sum(23)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27 is 1865\nprint(odd_num_sum(24)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 is 2035\nprint(odd_num_sum(25)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 is 2305\nprint(odd_num_sum(26)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 is 2465\nprint(odd_num_sum(27)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31 is 2635\nprint(odd_num_sum(28)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32 is 2805\nprint(odd_num_sum(29)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33 is 2965\nprint(odd_num_sum(30)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34 is 3035\nprint(odd_num_sum(31)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35 is 3105\nprint(odd_num_sum(32)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36 is 3165\nprint(odd_num_sum(33)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37 is 3235\nprint(odd_num_sum(34)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38 is 3215\nprint(odd_num_sum(35)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39 is 3285\nprint(odd_num_sum(36)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40 is 3345\nprint(odd_num_sum(37)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41 is 3405\nprint(odd_num_sum(38)) # sum of 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42 is 3465\nprint(odd_num_sum(39)) ",
        "num_ids": 2009
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    odd_num = []\n    for i in range(n) :\n        if i % 2!= 0:\n            odd_num.append(i)\n    odd_num_sum = 0\n    for i in range(len(odd_num)) :\n        odd_num_sum += odd_num[i] ** 2\n    return odd_num_sum\n",
        "num_ids": 88
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    if n==0:\n        return 0\n    for i in range(0,n):\n        if (i+1)%2!=0:\n            sum += pow(i+1,4)\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return \"n should be positive\"\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i**3\n    print(sum)\n",
        "num_ids": 55
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(1,n+1):\n        if i % 2!= 0 :\n            odd_numbers.append(i)\n    sum_odd = sum(odd_numbers)\n    print(sum_odd)\n",
        "num_ids": 65
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i%2==1 :\n            sum += i**4\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        if i%2 == 1 :\n            sum += i**4\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n+1) : \n        if i%2!=0:\n            s = s + i**4\n    return s\n    \nprint(odd_num_sum(10))",
        "num_ids": 55
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c=='(' or c=='{' or c=='[':\n            stack.append(c)\n        else:\n            if len(stack)==0:\n                return False\n            else:\n                x = stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 93
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    # looping till the end of the input expression\n    for i in exp:\n        # if left parenthesis, push it to the stack\n        if i == \"(\":\n            stack.append(i)\n        # if right parenthesis, check for the matching paranthesis\n        elif i == \")\":\n            # if the stack is empty, return false\n            if len(stack) == 0:\n                return False\n            # if the stack is not empty, pop and compare\n            else:\n                temp = stack.pop()\n                if temp!= \"(\":\n                    return False\n    # if loop completes without popping anything from stack\n    if len(stack)!= 0:\n        return False\n    return True\n",
        "num_ids": 169
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def is_balanced(s):\n        '''\n        Function to check if the given expression is balanced or not.\n        '''\n        # Create a stack and push all opening brackets to it.\n        s = list(s)\n        stack = deque()\n        for i in s:\n            if i == '(' or i == '[':\n                stack.append(i)\n            else:\n                if stack == deque():\n                    return False\n                else:\n                    stack.pop()\n        # If there is any opening brackets left in the stack, return False\n        if stack:\n            return False\n        else:\n            return True\n    if is_balanced(exp):\n        return True\n    else:\n        return False\n",
        "num_ids": 138
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    bracket_map = {\n        '(':')',\n        '{':'}',\n        '[':']',\n    }\n    is_balanced = True\n    for bracket in exp:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                is_balanced = False\n                break\n            elif bracket_map[stack[-1]] == bracket:\n                stack.pop()\n            else:\n                is_balanced = False\n                break\n    if len(stack) > 0:\n        is_balanced = False\n",
        "num_ids": 151
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in \"([{\":\n            stack.append(i)\n        elif i in \")]}\":\n            if len(stack) == 0:\n                return False\n            if i == \"]\" and stack[-1]!= \"[\":\n                return False\n            elif i == \"}\" and stack[-1]!= \"{\":\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 117
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i]=='(':\n            stack.append(exp[i])\n        elif exp[i]==')':\n            if len(stack)==0:\n                return False\n            else:\n                stack.pop()\n    return True if len(stack)==0 else False\n",
        "num_ids": 88
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # # Initializing the stack\n    # s = []\n    # opening = \"([{\"\n    # closing = \")]}\"\n    # for i in range(0, len(exp)):\n    #     if exp[i] in opening:\n    #         s.append(exp[i])\n    #     if exp[i] in closing:\n    #         if s:\n    #             if opening.index(exp[i])!= closing.index(s.pop()):\n    #                 return False\n    # return len(s) == 0\n",
        "num_ids": 130
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    left_p = {'(': 1, '{': 1, '[': 1}\n    right_p = {')': 1, '}': 1, ']': 1}\n    exp = list(exp)\n    stack.append('#')\n    for i in range(len(exp)):\n        if exp[i] in left_p:\n            stack.append(exp[i])\n        elif exp[i] in right_p:\n            if stack and stack[-1] == exp[i]:\n                stack.pop()\n            else:\n                return False\n        elif exp[i] =='':\n            continue\n        else:\n            return False\n    return True if not stack else False\n",
        "num_ids": 172
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def check_open(string):\n        '''\n        Check if the string has opening or closing brackets. \n        '''\n        for open_char in '([{':\n            if open_char in string:\n                return True\n        return False\n    def check_close(string):\n        '''\n        Check if the string has opening or closing brackets. \n        '''\n        for close_char in ')]}':\n            if close_char in string:\n                return True\n        return False\n    stack = deque()\n    for char in exp:\n        if check_open(char):\n            stack.append(char)\n        elif check_close(char):\n            if stack == deque():\n                return False\n            else:\n                stack.pop()\n    return not stack\n",
        "num_ids": 98
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == \"\":\n        return True\n    if exp[0] == \"(\" or exp[-1] == \")\":\n        return False\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == \"(\":\n            stack.append(i)\n        if exp[i] == \")\":\n            if not stack or stack[-1]!= i-1:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n",
        "num_ids": 134
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == None:\n        return None\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            return test_str[i:]\n    return test_str\n",
        "num_ids": 58
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)):\n        if len(test_str) == len(test_str.replace(test_str[i], '')):\n            test_str = test_str.replace(test_str[i], '')\n    return test_str\n",
        "num_ids": 69
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = test_str\n    for i in range(len(test_str)-1):\n        if len(test_str[i]) == K:\n            result = result.replace(test_str[i], \"\")\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # left_pos = 0\n    # right_pos = 0\n    # while right_pos < len(test_str):\n    #     if test_str[left_pos] == test_str[right_pos]:\n    #         right_pos += 1\n    #         while right_pos < len(test_str):\n    #             if test_str[right_pos]!= test_str[left_pos]:\n    #                 left_pos += 1\n    #                 break\n    #             right_pos += 1\n    #     left_pos += 1\n    #     right_pos = left_pos + 1\n    # return test_str[left_pos:right_pos]\n    return ''.join(filter(lambda x: len(x)!= K, test_str))\n",
        "num_ids": 185
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    list_words = []\n    for word in words:\n        if len(word) == K:\n            continue\n        else:\n            list_words.append(word)\n    return''.join(list_words)\n    \n",
        "num_ids": 65
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == \"\":\n        return \"\"\n",
        "num_ids": 15
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length = 0\n    ans = []\n    temp = \"\"\n    \n    for i in range(len(test_str)):\n        if test_str[i]!='':\n            length += 1\n        else:\n            if length == K:\n                ans.append(temp)\n            temp = \"\"\n            length = 0\n        \n        if length == K:\n            ans.append(temp)\n            temp = \"\"\n            length = 0\n        \n        if i == len(test_str) - 1:\n            if length == K:\n                ans.append(temp)\n    \n    return ans\n    \n    \n    \ntest_str = \"This is a test test test test test test this is a test test test test test\"\nK = 3\nprint(remove_length(test_str, K))\n        \n",
        "num_ids": 193
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str_list = test_str.split()\n    test_str_list = test_str_list[:-1]\n    for i in range(len(test_str_list)):\n        if len(test_str_list[i]) == K:\n            test_str_list.remove(test_str_list[i])\n    return \" \".join(test_str_list)\n",
        "num_ids": 96
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_length = []\n    for word in test_str.split():\n        word_length.append(len(word))\n    new_word_length = []\n    for i in range(len(word_length)):\n        if word_length[i] == K:\n            new_word_length.append(word_length[i])\n    return new_word_length\n",
        "num_ids": 91
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([word for word in test_str.split() if len(word)!= K])\n    \n",
        "num_ids": 28
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    import re\n    pattern=pattern\n    text=text\n    result=re.finditer(pattern,text)\n    for i in result:\n        # print(i.start(),i.end(),i.span())\n        print(i.start(),i.end(),i.span())\n",
        "num_ids": 69
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for x in range(0,len(text)):\n        if text[x:x+len(pattern)] == pattern:\n            return x,x+len(pattern)\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = []\n    pos1 = []\n    pos2 = []\n    l=[]\n    l1=[]\n    l2=[]\n    m=[]\n    m1=[]\n    m2=[]\n    j=0\n    k=0\n    for i in range(len(text)-len(pattern)+1):\n        l=[]\n        m=[]\n        k=0\n        for j in range(len(pattern)):\n            if text[i+j]==pattern[j]:\n                k=k+1\n            else:\n                break\n        if k==len(pattern):\n            l.append(i)\n            m.append(i+j)\n            l.append(j)\n            m.append(j)\n            pos.append(l)\n            pos1.append(m)\n    if pos==[]:\n        return None\n    for i in range(len(pos)):\n        if pos[i][0]>pos[i][1]:\n            pos[i].reverse()\n            pos1[i].reverse()\n            pos2.append(pos[i])\n            pos2.append(pos1[i])\n        else:\n            pos2.append(pos[i])\n            pos2.append(pos1[i])\n    for i in range(len(pos2)):\n        for j in range(len(pos2[i])):\n            l1.append(pos2[i][j])\n            l2.append(pos2[i][j+1])\n        m1.append(l1)\n        m2.append(l2)\n        l1=[]\n        l2=[]\n    for i in range(len(m1)):\n        for j in range(len(m1[i])):\n            m.append(m1[i][j])\n            m.append(m2[i][j])\n        l.append(m)\n        m=[]\n    for i in range(len(l)):\n        if l[i][0]<l[i][1]:\n            l1=l[i]\n    for i in range(len(l1)):\n        if l1[i]==l1[-1]:\n            pos.append(l1[i])\n    if len(pos)>1:\n        for i in range(len(pos)):\n            for j in range(len(pos)):\n                if pos[i]==pos[j]:\n                    pos.remove(pos[j])\n    if len(pos)==1:\n        for i in range(len(pos)):\n            l.append(pos[i])\n    if len(l)==1:\n        for i in range(len(l)):\n            if l[i][0]<l[i][1]:\n                pos.append(l[i])\n        if len(pos)>1:\n            for i in range(len(pos)):\n                for j in range(len(pos)):\n                    if pos[i]==pos[j]:\n                        pos.remove(pos[j])\n    return pos\n",
        "num_ids": 730
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pat=re.compile(pattern)\n    m=pat.search(text)\n    if m:\n        return (m.span(),m.start(),m.end())\n    else:\n        return None\n",
        "num_ids": 52
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        pattern_length = len(pattern)\n        #print(pattern_length)\n        pattern_split = pattern.split( )\n        #print(pattern_split)\n        for i in range(0,len(text)):\n            if text[i:i+pattern_length] == pattern:\n                return text[i:i+pattern_length]\n            else:\n                return None\n    except:\n        return None\n    \n",
        "num_ids": 106
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_list = list(pattern)\n    count = 0\n    for i in range(0,len(text)):\n        if text[i:i+len(pattern)] == pattern:\n            count = count + 1\n            if count == len(pattern_list):\n                return (i, i+len(pattern))\n    return None\n",
        "num_ids": 81
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        a = re.finditer(pattern,text)\n        print(a.__next__())\n    else:\n        print(\"Not found\")\n",
        "num_ids": 43
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res = re.findall(pattern,text)\n    return res\n",
        "num_ids": 19
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    def occurrence(text,pattern,i,k):\n        if len(pattern)==0:\n            return None\n        if i==len(text):\n            return None\n        if pattern[0]!=text[i]:\n            return occurrence(text,pattern[1:],i,k)\n        if k==0:\n            if i==len(text)-1:\n                return None\n            if text[i+1]==pattern[0]:\n                return occurrence(text,pattern,i+1,k-1)\n        else:\n            return occurrence(text,pattern,i+1,k)\n    return occurrence(text,pattern,0,len(pattern))\n",
        "num_ids": 158
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    a=re.findall(pattern,text)\n    if len(a)==0:\n        print('none')\n    else:\n        for i in range(len(a)):\n            print(a[i],i+1)\n    return None\n",
        "num_ids": 63
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = [i for i in range(0, len(nums)) if i%2 == 0 ]\n    return all(x in odd_index for x in nums)\n",
        "num_ids": 45
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(1, len(nums)):\n        if nums[i] % 2!= 1:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([True if i%2 == 1 else False for i in nums])\nodd_position([1,2,3,4,5,6,7,8,9,10])\n",
        "num_ids": 47
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            print(nums[i])\n            \n    \nodd_position([1, 2, 3, 4, 5])\n",
        "num_ids": 52
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(item%2 for item in nums)\n",
        "num_ids": 16
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i%2==0) and (nums[i]%2!=0):\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # n = len(nums)\n    # \n    # for i in range(n):\n    #     if i%2==1:\n    #         if nums[i]%2==0:\n    #             print('No')\n    #             break\n    #     else:\n    #         print('Yes')\n",
        "num_ids": 79
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 1:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ('a', 'e', 'i', 'o', 'u'):\n            if test_str[i] == test_str[i+1]:\n                count += 1\n            elif test_str[i] == test_str[i-1]:\n                count += 1\n    return count\n",
        "num_ids": 98
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    res = 0\n    if not test_str or len(test_str) == 0:\n        return 0\n    for c in range(len(test_str)):\n        if test_str[c] in vowels:\n            if (c-1) >= 0:\n                if test_str[c-1] not in vowels:\n                    res += 1\n            if (c+1) < len(test_str):\n                if test_str[c+1] not in vowels:\n                    res += 1\n    return res\n",
        "num_ids": 144
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n",
        "num_ids": 52
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(test_str)):\n        if (test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u'):\n            count += 1\n        \n    return count\n    \nif __name__ == '__main__':\n    test_str = 'haventgotanothee'\n    print(count_vowels(test_str)",
        "num_ids": 136
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i+1] in vowels:\n                if test_str[i+2] in vowels:\n                    count += 1\n    return count\n",
        "num_ids": 97
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    counter = 0\n    for letter in test_str:\n        if letter in vowels:\n            counter += 1\n    return counter\n",
        "num_ids": 56
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str == None:\n        return 0\n    vowel = ['a','e','i','o','u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowel:\n            if i == 0:\n                if test_str[i+1] in vowel:\n                    count += 1\n            elif i == len(test_str)-1:\n                if test_str[i-1] in vowel:\n                    count += 1\n            else:\n                if test_str[i-1] in vowel and test_str[i+1] in vowel:\n                    count += 1\n    return count\n",
        "num_ids": 160
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = 'aeiou'\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n",
        "num_ids": 62
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    d = {}\n    for s in test_str:\n        if s in d:\n            d[s] += 1\n        else:\n            d[s] = 1\n    return d\n",
        "num_ids": 47
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    char_count = 0\n",
        "num_ids": 21
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = len(arr)\n    sum_n = 0\n    for i in range(x):\n        for j in range(i+1,x):\n            if arr[i] == arr[j]:\n                break\n        else:\n            sum_n += arr[i]\n    return sum_n\n        ",
        "num_ids": 75
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    d = {}\n    \n    for i in arr:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    \n    for k, v in d.items():\n        if v == 1:\n            sum = sum + k\n    \n    return sum\n        \nif __name__ == \"__main__\":\n    arr = [12, 11, 5, 10, 20, 16, 1, 9, 12]\n    print(find_sum(arr))\n    \n    arr2 = [10, 10, 10, 10, 10, 10, 10]\n    print(find_sum(arr2))",
        "num_ids": 164
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    hash_table = {}\n    result = 0\n    \n    for num in arr:\n        if num in hash_table:\n            hash_table[num] += 1\n        else:\n            hash_table[num] = 1\n",
        "num_ids": 56
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "num_ids": 11
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    l=[]\n    sum=0\n    for i in arr:\n        if i not in l:\n            l.append(i)\n    for i in l:\n        sum+=i\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # initialize sum variable\n    sum = 0\n    \n    # loop over each element in the given list\n    for num in arr:\n        \n        # if the element is not in the dictionary, add it to the dictionary\n        if num not in sum_dict:\n            sum_dict[num] = 1\n        else:\n            sum_dict[num] += 1\n    \n    # return the sum of the dictionary values\n    return sum_dict\n",
        "num_ids": 106
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if not arr:\n        return 0\n    else:\n        return sum(set(arr))\n    \nif __name__ == '__main__':\n    print(find_sum([1,3,4,5,6,6,6,7,7]))\n",
        "num_ids": 65
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    res = 0\n    temp = 0\n    for i in arr:\n        temp += i\n        if (temp!= i):\n            res += i\n    return res\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    res = 0\n    for i in range(len(arr)):\n        if(i>0 and arr[i]!=arr[i-1]):\n            res += arr[i]\n    return res\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if(i>0 and arr[i]!=arr[i-1]):\n            res += arr[i]\n    return res\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s=0\n    for i in arr:\n        if i not in arr[:i]:\n            s+=i\n    return s\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if(i>0 and arr[i]!=arr[i-1]):\n            res += arr[i]\n    return res\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    d = {}\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = i\n        else:\n            res += arr[i]\n    return res\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    d = {}\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = i\n        else:\n            res += arr[i]\n    return res\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    res = 0\n    for i in range(len(arr)):\n        if(i>0 and arr[i]!=arr[i-1]):\n            res += arr[i]\n    return res\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if(i>0 and arr[i]!=arr[i-1]):\n            res += arr[i]\n    return res\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if(i>0 and arr[i]!=arr[i-1]):\n            res += arr[i]\n    return res\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    d = {}\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = i\n        else:\n            res += arr[i]\n    return res\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    d = {}\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = i\n        else:\n            res += arr[i]\n    return res\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            s+=arr[i]\n    return s\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            s+=arr[i]\n    return s\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            s+=arr[i]\n    return s\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    res = 0\n    temp = 0\n    for i in range(len(arr)):\n        temp += arr[i]\n        if (temp!= arr[i]):\n            res += arr[i]\n    return res\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    res = 0\n    temp = 0\n    for i in range(len(arr)):\n        temp += arr[i]\n        if (temp!= arr[i]):\n            res += arr[i]\n    return res\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    res = 0\n    for i in range(len(arr)):\n        if(i>0 and arr[i]!=arr[i-1]):\n            res += arr[i]\n    return res\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            s+=arr[i]\n    return s\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            s+=arr[i]\n    return s\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            s+=arr[i]\n    return s\n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            res += arr[i]\n    return res\n    \n    \ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '",
        "num_ids": 25
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # sort the input\n    list1.sort()\n    # create a dictionary that has sublists as keys and values as number of times they appear\n    count_dict = {key: list1.count(key) for key, _ in groupby(list1)}\n    # return the value that has maximum keys\n    return max(count_dict.keys(), key=lambda k: count_dict[k])\n",
        "num_ids": 94
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    n = len(list1)\n    result = []\n    for elem in groupby(list1):\n        result.append(list(elem)[0])\n    result.sort()\n    return result\nif __name__ == '__main__':\n    assert pack_consecutive_duplicates([1, 2, 2, 2, 3, 4, 5, 5]) == [[1, 2, 2], [2, 3, 4, 5]]\n    assert pack_consecutive_duplicates([1, 2, 2, 2, 3, 4, 5, 5]) == [[1, 2, 2], [2, 3, 4, 5]]\n    assert pack_consecutive_duplicates([2, 3, 4, 5]) == [[2, 3, 4], [5]]\n    assert pack_consecutive_duplicates([1, 1, 1, 1, 1, 1]) == [[1, 1, 1], [1, 1, 1]]\n    assert pack_consecutive_duplicates([1, 2, 2, 2]) == [[1, 2], [2, 2, 2]]\n    assert pack_consecutive_duplicates([1]) == [[1]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack_consecutive_duplicates([]) == [[]]\n    assert pack",
        "num_ids": 1999
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for key, group in groupby(list1):\n        list2.append(list(group))\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(zip(*[iter(list1)]*len(list1)))\n",
        "num_ids": 21
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    consecutive = []\n    prev = 0\n    for k, g in groupby(list1):\n        consecutive.append(list(g))\n        if k:\n            consecutive[-1].sort()\n        if k:\n            if consecutive[-1][-1]!= prev:\n                consecutive[-1].append(prev)\n                prev = consecutive[-1][-1]\n    return consecutive\nprint(pack_consecutive_duplicates([1,2,2,3,3,4]))",
        "num_ids": 140
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    my_list = []\n    for key, group in groupby(list1):\n        my_list.append(list(group))\n    my_list.sort()\n    return my_list\n",
        "num_ids": 48
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # list1 = [1,1,2,2,3,3,4,4,4,5]\n    # list1 = [1,2,1,3,1,4,1,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,5,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5]\n    # list1 = [1,1,1,2,2,2,3,3,3,4,4,4,",
        "num_ids": 1999
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key,group in groupby(sorted(list1)):\n        result.append([elem for elem in group])\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return None\n    if len(list1) == 1:\n        return list1\n    elif len(list1) == 2:\n        if list1[0] == list1[1]:\n            return list1\n        else:\n            return list1\n    else:\n        list1.sort()\n        return list1\n",
        "num_ids": 85
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for item in list1:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] += 1\n    return d\n",
        "num_ids": 47
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(list1):len(list1)}\n",
        "num_ids": 17
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        dict1[tuple(list1[i])] = list1.count(list1[i])\n    return dict1\n",
        "num_ids": 51
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    n = []\n    for i in list1:\n        n.append(tuple(i))\n    d = {}\n    for i in n:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    return d\n",
        "num_ids": 74
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # creating empty dictonary\n    unique_dictonary = {}\n    for sublist in list1:\n        # converting list into tuple\n        sublist = tuple(sublist)\n        # checking if sublist key is present in dictonary or not\n        if sublist in unique_dictonary:\n            # if the key is already present in dictonary then increment the value by 1\n            unique_dictonary[sublist] += 1\n        else:\n            # if the key is not present in dictonary then add it in the dictionary and set the value as 1\n            unique_dictonary[sublist] = 1\n    return unique_dictonary\n",
        "num_ids": 155
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for item in list1:\n        if item not in counts.keys():\n            counts[item] = 1\n        else:\n            counts[item] += 1\n    return counts\n",
        "num_ids": 52
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    num_of_occ = {}\n    for l in list1:\n        if l not in unique_list:\n            unique_list.append(l)\n            num_of_occ[tuple(l)] = 1\n        else:\n            num_of_occ[tuple(l)] += 1\n    return num_of_occ\n",
        "num_ids": 88
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique = {}\n    for x in list1:\n        if x not in unique:\n            unique[x] = 1\n        else:\n            unique[x] += 1\n    return unique\n",
        "num_ids": 47
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        if sublist in result.keys():\n            result[sublist] = result[sublist] + 1\n        else:\n            result[sublist] = 1\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_count = {}\n    for sublist in list1:\n        unique_count[tuple(sublist)] = list1.count(sublist)\n    return unique_count\n",
        "num_ids": 45
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in combinations(test_list,3):\n        print(i)\n",
        "num_ids": 21
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # all the possible combination\n    # of sum with tuples\n    combinations = []\n    for i in range(1, len(test_list) + 1):\n        #print(i)\n        combinations += list(combinations_with_replacement(test_list, i))\n",
        "num_ids": 69
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for i in combinations(test_list, 3):\n        ans.append(i)\n    print(ans)\n",
        "num_ids": 34
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # code here\n    res = []\n    for i in range(len(test_list)):\n        temp_list = []\n        for j in range(len(test_list)):\n            if i!= j:\n                temp_list.append(test_list[j])\n        res.append(tuple(temp_list))\n    return res\n",
        "num_ids": 88
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [(x,y) for x in test_list for y in test_list]\n",
        "num_ids": 23
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the second smallest number in a list.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the second largest number in a list.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the mean of the values in a list.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the second largest number in a list.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to check whether a list is a subset of another list.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to create a new list by picking consecutive numbers in a given list until the sum becomes zero.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to remove duplicates from a list.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find a pair in a list whose sum is equal to a given number.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to remove duplicates from a list.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to get the first non-repeating character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    \n    \n    \n    '''\n    Write a Python program to find the first repeated character in a string.\n    '''\n    \n    # code here\n    \n    \n    \n    ",
        "num_ids": 16
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            sum1 = test_list[i]\n            sum2 = test_list[j]\n            result.append((sum1, sum2))\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # code here\n    \n    all_combinations = []\n    for i in range(1,len(test_list)):\n        for comb in combinations(test_list, i):\n            all_combinations.append(comb)\n    return all_combinations\n",
        "num_ids": 64
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in combinations(test_list, 3):\n        # print(i)\n        yield i\n",
        "num_ids": 27
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initializing result\n    result = []\n",
        "num_ids": 13
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 2\n    while(i * i <= n) :\n        if n % i == 0 :\n            count += 2\n        i += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is a prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n < 2: \n        return False\n    else: \n        for i in range(2, int(math.sqrt(n)) + 1): \n            if n % i == 0: \n                return False\n        else: \n            return True\n    \ndef is_a_palindrome(s) : \n    '''\n    Write a python function to check whether a given string is a palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    s = s.lower()\n    s = s.replace(' ','')\n    l = len(s)\n    if l == 0 or l == 1:\n        return True\n    else:\n        if s[0]!= s[-1]:\n            return False\n        else:\n            return is_a_palindrome(s[1:-1])\n        \ndef is_square(n) : \n    '''\n    Write a python function to check whether the number is a perfect square or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    r = math.sqrt(n)\n    if r*r == n:\n        return True\n    return False\n    \ndef sum_of_squares(n) : \n    '''\n    Write a python function to find the sum of the squares of all the numbers from 1 to n.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div_count = 0\n    for div in range(1, n) :\n        if n % div == 0 :\n            div_count += 1\n    return div_count\n",
        "num_ids": 43
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div_count = 0\n    for i in range(1, n + 1):\n        if (n % i) == 0 : \n            div_count += 1\n    return div_count\n    \ndef even_odd_sum(n) :\n    '''\n    Write a python function to find the sum of even numbers in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    even_sum = 0\n    for i in range(0, n + 1) :\n        if i % 2 == 0 :\n            even_sum += i\n    return even_sum\n",
        "num_ids": 45
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n):\n        if(n%i == 0):\n            count +=1\n    if(count%2==0):\n        return True\n    else :\n        return False\n    \n",
        "num_ids": 57
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count +=1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count = count + 1\n    if count % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n",
        "num_ids": 62
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, math.floor(n / 2) + 1) :\n        if (n % i == 0) :\n            divisors = divisors + 1\n    if (divisors % 2!= 0) :\n        return False\n    else :\n        return True\n",
        "num_ids": 78
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 0) : \n        return True\n    else : \n        return ((n == 1) or (n == 2 or n == 3)) or (count_divisors(n-1))\n",
        "num_ids": 51
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if (n % i == 0) :\n            if (n / i == i) :\n                c = c + 2\n            else :\n                c = c + 1\n    return c\n",
        "num_ids": 73
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            odd_sum += arr[i:j]\n    return odd_sum\n",
        "num_ids": 55
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    odd_length = 0\n    for i in range(len(arr)):\n        odd_length += 1\n        if i + odd_length - 1 < len(arr) and i - odd_length + 1 >= 0:\n            result += sum(arr[i - odd_length + 1: i + 1])\n    return result\n    \n",
        "num_ids": 85
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            total += arr[i]\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if (len(arr[i:j+1]) % 2!= 0):\n                s = s + sum(arr[i:j+1])\n    return s\n",
        "num_ids": 75
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[j]%2==1:\n                s+=arr[i:j+1]\n    return s\n",
        "num_ids": 63
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    result = 0\n    odd_sum = 0\n    length = len(arr)\n    for i in range(length):\n        if i%2!=0:\n            odd_sum+=arr[i]\n    for i in range(length):\n        result+=odd_sum+arr[i]\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    odd_length = 0\n    for i in range(0,len(arr)):\n        if arr[i]%2==1:\n            odd_sum += arr[i]\n            odd_length += 1\n    for i in range(0,len(arr)-odd_length):\n        odd_sum += arr[i]\n    return odd_sum\n",
        "num_ids": 92
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # code here\n    sum=0\n    for i in range(0, len(arr)-1):\n        if i%2==1:\n            sum=sum+arr[i]\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n",
        "num_ids": 11
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # code here\n    #s = 0\n    n = len(arr)\n    i = 0\n    j = 1\n    while j < n:\n        # print(i,j,arr[i:j+1])\n        s = sum(arr[i:j+1])\n        i += 2\n        j += 2\n        #print(i,j,s)\n    return s\n    \narr = [-3,4,2,-3,8,-2]\nprint(odd_length_sum(arr))",
        "num_ids": 122
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    rgb_max = max(r, g, b)\n    rgb_min = min(r, g, b)\n    diff = rgb_max - rgb_min\n    if diff == 0:\n        diff = 0.0001\n",
        "num_ids": 57
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = 60 * (((g - b)/df) % 6)\n    elif mx == g:\n        h = 60 * (((b - r)/df) + 2)\n    else:\n        h = 60 * (((r - g)/df) + 4)\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n",
        "num_ids": 184
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if delta == 0:\n        h = 0\n    elif min_value == max_value:\n        h = 0.5\n    elif max_value == r:\n        h = 60 * ((g-b)/delta % 6)\n    elif max_value == g:\n        h = 60 * ((b-r)/delta + 2)\n    elif max_value == b:\n        h = 60 * ((r-g)/delta + 4)\n    return round(h, 3), round((1/3)*(max_value-min_value), 3), round((2/3)*(max_value-min_value), 3)\n",
        "num_ids": 194
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # rgb_to_hsv takes 3 arguments\n    # First argument is a scalar (i.e., hsv value)\n    # Second argument is a scalar (i.e., saturation)\n    # Third argument is a scalar (i.e., value)\n    # The first parameter must be in the range 0-255\n    # The second parameter must be in the range 0-255\n    # The third parameter must be in the range 0-255\n    # Return an hsv_to_rgb color\n    # rgb_to_hsv takes 3 arguments\n    # First argument is a scalar (i.e., hsv value)\n    # Second argument is a scalar (i.e., saturation)\n    # Third argument is a scalar (i.e., value)\n    # The first parameter must be in the range 0-255\n    # The second parameter must be in the range 0-255\n    # The third parameter must be in the range 0-255\n    # Return an hsv_to_rgb color\n    \n    # Check if the argument is a scalar (i.e., hsv value)\n    # If not, raise an error\n    if not isinstance(r, int) or not isinstance(g, int) or not isinstance(b, int):\n        raise TypeError\n    \n    # Check if the hsv value is in the range 0-255\n    if r >= 256 or g >= 256 or b >= 256 or r < 0 or g < 0 or b < 0:\n        raise ValueError\n    \n    # Check if the saturation and value are in the range 0-255\n    if r + g + b >= 256 or r <= 0 or g <= 0 or b <= 0:\n        raise ValueError\n    \n    # Convert the RGB value to hsv value\n    h = 0\n    s = 0\n    v = 0\n    \n    # If the hsv value is in the range 0-255\n    if r <= 127:\n        h = (r * 6) + (g * 2) + (b / 2)\n        s = 255 - v\n    \n    # If the hsv value is in the range 256-255\n    if r >= 128:\n        h = (r * 6) + (g * 2) + ((255 - b) / 2)\n        s = 255 - v\n    \n    # If the hsv value is in the range 0-128\n    if g <= 127:\n        h = (r * 2) + (g * 6) + (b / 2)\n        s = 255 - v\n    \n    # If the hsv value is in the range 128-255\n    if g >= 128:\n        h = (r * 2) + ((255 - g) * 6) + b\n        s = 255 - v\n    \n    # If the hsv value is in the range 256-255\n    if b <= 127:\n        h = (r * 6) + (g * 2) + (b)\n        s = 255 - v\n    \n    # If the hsv value is in the range 0-128\n    if b >= 128:\n        h = (r * 6) + ((255 - b) * 2) + g\n        s = 255 - v\n    \n    # Calculate the hue\n    if h < 0:\n        h = h + 360\n    \n    return h, s, v\n",
        "num_ids": 769
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_val = float(r / 255)\n    g_val = float(g / 255)\n    b_val = float(b / 255)\n",
        "num_ids": 38
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax-cmin\n",
        "num_ids": 38
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    d = max_val - min_val\n    \n    if d == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / d) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / d) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / d) + 240) % 360\n    \n    if d == 0:\n        s = 0\n    else:\n        s = d / max_val\n    \n    v = max_val\n    \n    return (h, s, v)\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color.\n    '''\n    h = float(h)\n    s = float(s)\n    v = float(v)\n    \n    while h >= 360.0:\n        h -= 360.0\n    while h < 0.0:\n        h += 360.0\n    \n    if s == 0.0:\n        r, g, b = v, v, v\n    else:\n        i = int(h/60)\n        f = h - i\n        p = v * (1.0 - s)\n        q = v * (1.0 - s * f)\n        t = v * (1.0 - s * (1.0 - f))\n        \n        if i == 0:\n            r, g, b = v, t, p\n        elif i == 1:\n            r, g, b = q, v, p\n        elif i == 2:\n            r, g, b = p, v, t\n        elif i == 3:\n            r, g, b = p, q, v\n        \n    return (r, g, b)\n    \ndef color_distance(color1, color2):\n    '''\n    Write a function that returns the Euclidean distance between two colors.\n    '''\n    #return math.sqrt(sum([(i - j) ** 2 for i, j in zip(color1, color2)]))\n    \n    delta_r = color1[0] - color2[0]\n    delta_g = color1[1] - color2[1]\n    delta_b = color1[2] - color2[2]\n    \n    return math.sqrt(delta_r ** 2 + delta_g ** 2 + delta_b ** 2)\n    \ndef get_color_from_name(color_name):\n    '''\n    Write a function that takes in a color name and returns the RGB value of the color.\n    '''\n    #return (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))\n    \n    if color_name in colors_dict.keys():\n        return colors_dict[color_name]\n    else:\n        return None\n    \ndef random_color():\n    '''\n    Write a function that returns a random color in RGB.\n    '''\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    \n    return (r, g, b)\n    \ndef get_color_list_from_name(color_name_list):\n    '''\n    Write a function that takes in a list of color names and returns a list of RGB values.\n    '''\n    colors = []\n    \n    for color_name in color_name_list:\n        colors.append(get_color_from_name(color_name))\n    \n    return colors\n    \ndef get_colors_from_image(image_path):\n    '''\n    Write a function that takes in an image path and returns a list of all the RGB colors in that image.\n    '''\n    img = cv2.imread(image_path)\n    \n    colors_list = []\n    for i in range(img.shape[0]):\n        for j in range(img.shape[1]):\n            colors_list.append(img[i][j])\n    \n    return colors_list\n    \ndef get_color_by_index(index):\n    '''\n    Write a function that takes in an index and returns the RGB value of the color.\n    '''\n    if index < 0:\n        index = 0\n    if index > len(colors_list) - 1:\n        index = len(colors_list) - 1\n    \n    return colors_list[index]\n    \ndef get_color_list_by_index(index_list):\n    '''\n    Write a function that takes in a list of indices and returns a list of RGB values.\n    '''\n    colors = []\n    \n    for i in index_list:\n        colors.append(get_color_by_index(i))\n    \n    return colors\n    \ndef get_color_list_from_file(file_path):\n    '''\n    Write a function that reads from a file and returns a list of RGB values.\n    '''\n    colors = []\n    \n    with open(file_path, 'r') as f:\n        lines = f.read().splitlines()\n    \n    for line in lines:\n        colors.append(line.split())\n    \n    return colors\n    \ndef image_contain_color(img_path, color_name):\n    '''\n    Write a function that takes in an image path and a color name and returns True if the image contains that color, and False otherwise.\n    '''\n    img = cv2.imread(img_path)\n    \n    for i in range(img.shape[0]):\n        for j in range(img.shape[1]):\n            if color_name == get_color_from_name(img[i][j]):\n                return True\n    \n    return False\n    \ndef image_contain_color_index(img_path, color_index):\n    '''\n    Write a function that takes in an image path and a color index and returns True if the image contains that color, and False otherwise.\n    '''\n    img = cv2.imread(img_path)\n    \n    for i in range(img.shape[0]):\n        for j in range(img.shape[1]):\n            if color_index == get_color_by_index(img[i][j]):\n                return True\n    \n    return False\n    \ndef image_contain_color_list(img_path, color_list):\n    '''\n    Write a function that takes in an image path and a list of RGB values and returns True if the image contains the list of RGB values, and False otherwise.\n    '''\n    img = cv2.imread(img_path)\n    \n    for i in range(img.shape[0]):\n        for j in range(img.shape[1]):\n            for color in color_list:\n                if color == get_color_by_index(img[i][j]):\n                    return True\n    \n    return False\n    \ndef get_color_list_from_dir(dir_path, color_name_list):\n    '''\n    Write a function that takes in a directory path and a list of color names and returns a list of RGB values.\n    '''\n    colors = []\n    \n    for color_name in color_name_list:\n        if os.path.exists(os.path.join(dir_path, color_name)):\n            colors.append(get_color_from_name(color_name))\n    \n    return colors\n    \ndef get_colors_from_dir(dir_path, color_index_list):\n    '''\n    Write a function that takes in a directory path and a list of color indexes and returns a list of RGB values.\n    '''\n    colors = []\n    \n    for color_index in color_index_list:\n        if os.path.exists(os.path.join(dir_path, str(color_index))):\n            colors.append(get_colo",
        "num_ids": 59
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    diff = max_value - min_value\n    if (max_value == r):\n        h = 0\n        s = (g - b) / diff\n    elif (max_value == g):\n        h = (b - r) / diff + 2\n        s = 0\n    else:\n        h = (r - g) / diff + 4\n        s = (g - b) / diff\n    if (max_value == 0):\n        return 0, 0, 0\n    return h, s, (s * 100) / max_value\n",
        "num_ids": 158
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    hi = mx - mn\n    hi = max(hi, 1e-9)\n    if mx == mn:\n        h = 0\n    else:\n        h = hi/mn * 60\n    if hi == 0:\n        s = 0\n    else:\n        s = 1 - (mn / mx)\n    return (h, s, v)\n",
        "num_ids": 132
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(max(r,g),b)\n    min_rgb = min(min(r,g),b)\n    # find delta\n    delta = max_rgb - min_rgb\n    if delta == 0:\n        h = 0\n    else:\n        h = ((max_rgb + min_rgb) / 2) / delta\n    # find s\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = delta / max_rgb\n    # find v\n    if max_rgb == 0:\n        v = 0\n    else:\n        v = 1\n    return h,s,v\n",
        "num_ids": 162
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 0\n    product_odd = 0\n    for i in range(len(list1)):\n        if i%2 == 0:\n            product_even += list1[i]\n        else:\n            product_odd += list1[i]\n    return product_even * product_odd\n",
        "num_ids": 74
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    total = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            total = total * list1[i]\n        else:\n            total = total * list1[i]\n    return total\n",
        "num_ids": 59
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = list1[::2]\n    odd = list1[1::2]\n    prod_even = 1\n    prod_odd = 1\n    for i in even:\n        prod_even = prod_even * i\n    for j in odd:\n        prod_odd = prod_odd * j\n    return prod_even, prod_odd\n",
        "num_ids": 87
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    list1 = mergeSort(list1)\n    low = 0\n    high = len(list1)-1\n    while low <= high:\n        if list1[low] % 2 == 0:\n            if list1[high] % 2 == 1:\n                return list1[low] * list1[high]\n            else:\n                low += 1\n        else:\n            high -= 1\n    return 0\n",
        "num_ids": 131
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    result = []\n    for i in range(len(list1)):\n        if i%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    for i in range(len(even)):\n        result.append(even[i]*odd[i])\n    return result\n",
        "num_ids": 96
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd=0\n    even=0\n    prod_even_odd=0\n    for i in list1:\n        if i%2==0:\n            even=even+i\n        else:\n            odd=odd+i\n    prod_even_odd=even*odd\n    return prod_even_odd\n",
        "num_ids": 77
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_numbers.append(list1[i])\n        else:\n            odd_numbers.append(list1[i])\n    print(\"The product of the even numbers of the list is\",reduce(lambda x,y:x*y,even_numbers))\n    print(\"The product of the odd numbers of the list is\",reduce(lambda x,y:x*y,odd_numbers))\n    \n",
        "num_ids": 142
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    odd_list = []\n    even_list = []\n",
        "num_ids": 30
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    print(f\"The product of even numbers in the list is: {product(even)}\")\n    print(f\"The product of odd numbers in the list is: {product(odd)}\")\n    return even,odd\n    \ndef product(lst):\n    '''\n    Write a function to multiply all the numbers in a list.\n    '''\n    res = 1\n    for i in lst:\n        res *= i\n    return res\n    \ndef filter_list(lst):\n    '''\n    Write a function to filter even numbers in a list.\n    '''\n    filtered_list = []\n    for i in lst:\n        if i%2==0:\n            filtered_list.append(i)\n    return filtered_list\n    \ndef len_list(lst):\n    '''\n    Write a function to find the length of a list.\n    '''\n    length = 0\n    for i in lst:\n        length += 1\n    return length\n    \ndef greater_than_10(lst):\n    '''\n    Write a function to find the greater than 10 numbers in a list.\n    '''\n    greater_than_10 = []\n    for i in lst:\n        if i>10:\n            greater_than_10.append(i)\n    return greater_than_10\n    \ndef greater_than_15(lst):\n    '''\n    Write a function to find the greater than 15 numbers in a list.\n    '''\n    greater_than_15 = []\n    for i in lst:\n        if i>15:\n            greater_than_15.append(i)\n    return greater_than_15\n    \ndef even_odd(lst):\n    '''\n    Write a function to find the sum of the even numbers and the sum of the odd numbers in a list.\n    '''\n    even = 0\n    odd = 0\n    for i in lst:\n        if i%2==0:\n            even += i\n        else:\n            odd += i\n    return even, odd\n    \ndef sort_list(lst):\n    '''\n    Write a function to sort the list in ascending order.\n    '''\n    for i in range(len(lst)-1):\n        min = i\n        for j in range(i+1, len(lst)):\n            if lst[min] > lst[j]:\n                min = j\n        lst[i], lst[min] = lst[min], lst[i]\n    return lst\n    \ndef get_min_max(lst):\n    '''\n    Write a function to find the minimum and maximum number in a list.\n    '''\n    max = lst[0]\n    min = lst[0]\n    for i in lst:\n        if i>max:\n            max = i\n        if i<min:\n            min = i\n    return min, max\n    \ndef count_char(lst, char):\n    '''\n    Write a function to find the count of the character 'a' in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i==char:\n            count += 1\n    return count\n    \ndef common_characters(str1, str2):\n    '''\n    Write a function to find the characters that are common between the two strings.\n    '''\n    res = []\n    for i in str1:\n        if i in str2:\n            res.append(i)\n    return res\n    \ndef index_of_x(list1, x):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    res = -1\n    for i in range(len(list1)):\n        if list1[i]==x:\n            res = i\n            return res\n    return res\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    for i in range(0,int(len(str1)/2)):\n        if str1[i]!=str1[len(str1)-1-i]:\n            return False\n    return True\n    \ndef is_rotated(lst1, lst2):\n    '''\n    Write a function to check if two lists are rotated or not.\n    '''\n    lst1.sort()\n    lst2.sort()\n    if lst1==lst2:\n        return True\n    return False\n    \ndef rot_list(lst):\n    '''\n    Write a function to rotate the given list by k.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i]==0:\n            lst[i] = 1\n            count += 1\n        else:\n            lst[i] = 0\n    while count<len(lst):\n        lst[0] = lst[len(lst)-1]\n        lst[len(lst)-1] = 0\n        count += 1\n    return lst\n    \ndef reverse_list(lst):\n    '''\n    Write a function to reverse the given list.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[len(lst)-i-1])\n    return res\n    \ndef rotate_list(lst, k):\n    '''\n    Write a function to rotate the list by k.\n    '''\n    lst = lst[k:] + lst[:k]\n    return lst\n    \ndef is_possible_to_form_palindrome(str1, str2):\n    '''\n    Write a function to check if we can form a palindrome by removing characters from the string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            count += 1\n    if count%2==1:\n        return False\n    return True\n    \ndef num_of_teams(lst):\n    '''\n    Write a function to find the number of teams needed to form a team.\n    '''\n    count = 1\n    while len(lst)!=count:\n        count += 1\n    return count\n    \ndef circular_array(lst):\n    '''\n    Write a function to find if the given array is a circular array or not.\n    '''\n    if len(lst)==1:\n        return True\n    lst = lst[::-1]\n    for i in range(len(lst)):\n        if lst[i]!=lst[i+1]:\n            return False\n    return True\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1==str2:\n        return True\n    return False\n    \ndef is_palindrome(lst):\n    '''\n    Write a function to check if the given list is a palindrome or not.\n    '''\n    lst.sort()\n    for i in range(0,len(lst)):\n        if lst[i]!=lst[len(lst)-1-i]:\n            return False\n    return True\n    \ndef remove_duplicates(lst):\n    '''\n    Write a function to remove the duplicate elements in a list.\n    '''\n    res = []\n    for i in lst:\n        if i not in res:\n            res.append(i)\n    return res\n    \ndef get_common_elements(lst1, lst2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    res = []\n    for i in lst1:\n        if i in lst2:\n            res.append(",
        "num_ids": 30
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even,odd\n",
        "num_ids": 49
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.split(',')\n    test_str = tuple(int(n) for n in test_str)\n    return test_str\n",
        "num_ids": 73
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.split(',')\n    return tuple([int(num) for num in test_str])\n",
        "num_ids": 32
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_str = test_str.replace(',', '')\n        test_str = test_str.replace(' ', '')\n        test_str = test_str.replace('(', '')\n        test_str = test_str.replace(')', '')\n        test_str = test_str.replace('-', '')\n        test_str = test_str.replace('\\'', '')\n        if test_str == '':\n            return ()\n        return tuple(map(int, test_str.split(',')))\n    except Exception:\n        return ()\n",
        "num_ids": 140
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    if test_str == '':\n        return 'No string'\n    \n    return int(test_str)\n    \nif __name__ == '__main__':\n    \n    tuple_str_int('a')\n    tuple_str_int('1')\n    tuple_str_int('(1, )')\n    tuple_str_int('1, ')\n    tuple_str_int('1, )')\n    tuple_str_int('1, )')\n    tuple_str_int('(1, )')\n    \n    print(tuple_str_int('a'))\n    print(tuple_str_int('1'))\n    print(tuple_str_int('(1, )'))\n    print(tuple_str_int('1, )'))\n    print(tuple_str_int('(1, )'))\n    \n    print(tuple_str_int('('))\n    print(tuple_str_int('('))\n    print(tuple_str_int('()'))\n    print(tuple_str_int('()'))\n    print(tuple_str_int('()'))\n    \n    print(tuple_str_int(''))\n    print(tuple_str_int('  '))\n    print(tuple_str_int('()'))\n    print(tuple_str_int('()'))\n    print(tuple_str_int('()'))\n    \n    \n    \n    ",
        "num_ids": 363
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n",
        "num_ids": 11
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup_str = '1,2,3,4,5,6,7,8,9,10'\n    new_tup = (1,2,3,4,5,6,7,8,9,10)\n    tup_str = tup_str.replace(',','')\n    return(int(tup_str))\n",
        "num_ids": 87
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(char) for char in test_str)\n",
        "num_ids": 18
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_list = list(test_str)\n    test_list = []\n    for i in test_str_list:\n        test_list.append(i)\n    return tuple(test_list)\n",
        "num_ids": 53
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # type: (str) -> (int,int,int)\n    '''\n    First, we have to understand the structure of a tuple. We can write a tuple, which only contains one type of value.\n    \n    (type, val, val, val, val)\n    '''\n    \n    # divide and conquer algorithm, recursion\n    def tuple_str_int_recursive(test_str):\n        '''\n        This is a recursive function, to solve the problem of converting tuple string to integer tuple.\n        '''\n        # termination case\n        if len(test_str) == 0:\n            # return an empty tuple\n            return ()\n        # decompose a tuple string into two pieces\n        head, tail = test_str[0], test_str[1:]\n        # if head is a number\n        if head.isdigit():\n            # return the integer tuple (int(head),) + tuple_str_int_recursive(tail)\n            return int(head), *tuple_str_int_recursive(tail)\n        # if head is not a number\n        else:\n            # return tuple_str_int_recursive(tail)\n            return tuple_str_int_recursive(tail)\n    \n    return tuple_str_int_recursive(test_str)\n    \ndef tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # type: (str) -> (int,int,int)\n    '''\n    First, we have to understand the structure of a tuple. We can write a tuple, which only contains one type of value.\n    \n    (type, val, val, val, val)\n    '''\n    \n    # divide and conquer algorithm, recursion\n    def tuple_str_int_recursive(test_str):\n        '''\n        This is a recursive function, to solve the problem of converting tuple string to integer tuple.\n        '''\n        # termination case\n        if len(test_str) == 0:\n            # return an empty tuple\n            return ()\n        # decompose a tuple string into two pieces\n        head, tail = test_str[0], test_str[1:]\n        # if head is a number\n        if head.isdigit():\n            # return the integer tuple (int(head),) + tuple_str_int_recursive(tail)\n            return int(head), *tuple_str_int_recursive(tail)\n        # if head is not a number\n        else:\n            # return tuple_str_int_recursive(tail)\n            return tuple_str_int_recursive(tail)\n    \n    return tuple_str_int_recursive(test_str)\n",
        "num_ids": 181
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n",
        "num_ids": 19
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i+1\n",
        "num_ids": 56
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return len(a) - 1\n    else:\n        if a[index - 1] < x:\n            return index\n        else:\n            return index - 1\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a) - 1\n    elif index == 0:\n        return 0\n    else:\n        if a[index + 1] < x:\n            return index\n        else:\n            return index + 1\ndef count_occurences(a, x):\n    '''\n    Write a function to count the number of occurrences of a specified value in a sorted array.\n    '''\n    count = 0\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return 0\n    elif index == 0:\n        return 1\n    else:\n        if x == a[index - 1]:\n            return 1 + count_occurences(a, x)\n        else:\n            return count_occurences(a, x)\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return len(a) - 1\n    else:\n        if a[index - 1] < x:\n            return index\n        else:\n            return index - 1\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a) - 1\n    elif index == 0:\n        return 0\n    else:\n        if a[index + 1] < x:\n            return index\n        else:\n            return index + 1\ndef count_occurences(a, x):\n    '''\n    Write a function to count the number of occurrences of a specified value in a sorted array.\n    '''\n    count = 0\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return 0\n    elif index == 0:\n        return 1\n    else:\n        if x == a[index - 1]:\n            return 1 + count_occurences(a, x)\n        else:\n            return count_occurences(a, x)\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a) - 1\n    elif index == 0:\n        return 0\n    else:\n        if a[index + 1] < x:\n            return index\n        else:\n            return index + 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return 0\n    elif index == 0:\n        return len(a) - 1\n    else:\n        if a[index - 1] < x:\n            return index\n        else:\n            return index - 1\ndef count_occurences(a, x):\n    '''\n    Write a function to count the number of occurrences of a specified value in a sorted array.\n    '''\n    count = 0\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return 0\n    elif index == 0:\n        return 1\n    else:\n        if x == a[index - 1]:\n            return 1 + count_occurences(a, x)\n        else:\n            return count_occurences(a, x)\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a) - 1\n    elif index == 0:\n        return 0\n    else:\n        if a[index + 1] < x:\n            return index\n        else:\n            return index + 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return 0\n    elif index == 0:\n        return len(a) - 1\n    else:\n        if a[index - 1] < x:\n            return index\n        else:\n            return index - 1\ndef count_occurences(a, x):\n    '''\n    Write a function to count the number of occurrences of a specified value in a sorted array.\n    '''\n    count = 0\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return 0\n    elif index == 0:\n        return 1\n    else:\n        if x == a[index - 1]:\n            return 1 + count_occurences(a, x)\n        else:\n            return count_occurences(a, x)\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a) - 1\n    elif index == 0:\n        return 0\n    else:\n        if a[index + 1] < x:\n            return index\n        else:\n            return index + 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return 0\n    elif index == 0:\n        return len(a) - 1\n    else:\n        if a[index - 1] < x:\n            return index\n        else:\n            return index - 1\ndef count_occurences(a, x):\n    '''\n    Write a function to count the number of occurrences of a specified value in a sorted array.\n    '''\n    count = 0\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return 0\n    elif index == 0:\n        return 1\n    else:\n        if x == a[index - 1]:\n            return 1 + count_occurences(a, x)\n        else:\n            return count_occurences(a, x)\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a) - 1\n    elif index == 0:\n        return 0\n    else:\n        if a[index + 1",
        "num_ids": 72
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return None\n    if x <= a:\n        return None\n    if x >= a[-1]:\n        return len(a)\n    i = 0\n    while i < len(a) and x >= a[i]:\n        i += 1\n    return i\n",
        "num_ids": 71
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # if len(a) == 0 or x < a[0]:\n    #     return 0\n    #     # return a.index(x)\n    # else:\n    #     l = bisect.bisect_left(a, x)\n    #     if x == a[l]:\n    #         return l\n    #     else:\n    #         return l+1\n    if len(a) == 0:\n        return 0\n    else:\n        l = bisect.bisect_left(a, x)\n        if x == a[l]:\n            return l\n        else:\n            for i in range(l,len(a)):\n                if x > a[i]:\n                    return i\n                else:\n                    continue\n            return len(a)\n",
        "num_ids": 183
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # if x is smaller than first element, just return 1\n    if len(a) == 0:\n        return 0\n    # otherwise, start from index 1\n    else:\n        return bisect.bisect_right(a,x,1)\n",
        "num_ids": 60
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    #N = len(a)\n    #if N == 0:\n    #    return -1\n    #return bisect.bisect_right(a,x)\n    a = sorted(a)\n    #print(a)\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n        elif a[i] > x:\n            return i\n    return len(a)\n        \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    #N = len(a)\n    #if N == 0:\n    #    return -1\n    #return bisect.bisect_left(a,x)\n    a = sorted(a)\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n        elif a[i] < x:\n            return i\n    return 0\n    \ndef bisect(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a = sorted(a)\n    #print(a)\n    i = bisect.bisect_left(a,x)\n    if i >= len(a):\n        return len(a)\n    if a[i] == x:\n        return i\n    else:\n        return i+1\n",
        "num_ids": 73
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    size = len(a)\n    if size == 0:\n        return 0\n    if size == 1:\n        if x == a[0]:\n            return 0\n        elif x < a[0]:\n            return 1\n        else:\n            return 2\n    left = 0\n    right = size - 1\n    while left < right:\n        mid = left + (right - left)//2\n        if x < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    return left\ndef insertion_sort(a):\n    '''\n    Write a function to sort an array using insertion sort.\n    '''\n    size = len(a)\n    if size == 0:\n        return []\n    if size == 1:\n        return a\n    if size == 2:\n        if a[0] > a[1]:\n            a.reverse()\n            return a\n        return a\n    for i in range(1, size):\n        j = i\n        while j > 0 and a[j] < a[j-1]:\n            a[j], a[j-1] = a[j-1], a[j]\n            j -= 1\n    return a\ndef insertion_sort_optimized(a):\n    '''\n    Write a function to sort an array using insertion sort.\n    '''\n    size = len(a)\n    if size == 0:\n        return []\n    if size == 1:\n        return a\n    if size == 2:\n        if a[0] > a[1]:\n            a.reverse()\n            return a\n        return a\n    min_idx = 0\n    min_val = a[0]\n    for i in range(1, size):\n        if a[i] < min_val:\n            min_val = a[i]\n            min_idx = i\n    a[min_idx], a[0] = a[0], a[min_idx]\n    j = 1\n    while j < size:\n        if a[j] < a[j-1]:\n            a[j], a[j-1] = a[j-1], a[j]\n        else:\n            j += 1\n    return a\ndef right_rotation(a, k):\n    '''\n    Write a function to rotate an array by k positions to the right.\n    '''\n    size = len(a)\n    if size == 0:\n        return []\n    if size == 1:\n        return a\n    if size == 2:\n        if a[0] > a[1]:\n            a.reverse()\n            return a\n        return a\n    if k == 0:\n        return a\n    a[0], a[-k] = a[-k], a[0]\n    for i in range(1, size-k):\n        a[i], a[i-1] = a[i-1], a[i]\n    return a\ndef reverse_array(a, start, end):\n    '''\n    Write a function to reverse a range of array elements given the start and end indices.\n    '''\n    size = len(a)\n    if size == 0:\n        return\n    if size == 1:\n        return a\n    if size == 2:\n        if a[0] > a[1]:\n            a.reverse()\n            return a\n        return a\n    if start >= end:\n        return\n    mid = (start + end)//2\n    reverse_array(a, start, mid)\n    reverse_array(a, mid+1, end)\n    reverse_range(a, start, end)\n    return a\ndef reverse_range(a, start, end):\n    '''\n    Write a function to reverse a range of array elements.\n    '''\n    size = len(a)\n    if size == 0:\n        return\n    if size == 1:\n        return a\n    if size == 2:\n        if a[0] > a[1]:\n            a.reverse()\n            return a\n        return a\n    if start >= end:\n        return\n    mid = (start + end)//2\n    a[start], a[mid] = a[mid], a[start]\n    reverse_range(a, start, mid-1)\n    reverse_range(a, mid+1, end)\n    return a\ndef binary_search(a, x):\n    '''\n    Write a function to search an element in sorted array. The array may contain duplicates.\n    '''\n    size = len(a)\n    if size == 0:\n        return -1\n    if size == 1:\n        return 0 if a[0] == x else -1\n    left = 0\n    right = size - 1\n    while left <= right:\n        mid = (left + right)//2\n        if a[mid] == x:\n            return mid\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\ndef search_insert_location(a, x):\n    '''\n    Write a function to search the first occurrence of a value in a sorted array.\n    '''\n    size = len(a)\n    if size == 0:\n        return -1\n    if size == 1:\n        return 0 if a[0] == x else -1\n    left = 0\n    right = size - 1\n    while left <= right:\n        mid = (left + right)//2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef search_insert_location_optimized(a, x):\n    '''\n    Write a function to search the first occurrence of a value in a sorted array.\n    '''\n    size = len(a)\n    if size == 0:\n        return -1\n    if size == 1:\n        return 0 if a[0] == x else -1\n    left = 0\n    right = size - 1\n    while left <= right:\n        mid = (left + right)//2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right\ndef search_range(a, x):\n    '''\n    Write a function to search a range of values in a sorted array.\n    '''\n    size = len(a)\n    if size == 0:\n        return -1, -1\n    if size == 1:\n        if a[0] == x:\n            return 0, 0\n        return -1, -1\n    left = 0\n    right = size - 1\n    while left <= right:\n        mid = (left + right)//2\n        if x == a[mid]:\n            left = mid + 1\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if x == a[left-1]:\n        return left-1, right\n    return -1, -1\ndef search_range_optimized(a, x):\n    '''\n    Write a function to search a range of values in a sorted array.\n    '''\n    size = len(a)\n    if size == 0:\n        return -1, -1\n    if size == 1:\n        if a[0] == x:\n            return 0, 0\n        return -1, -1\n    left = 0\n    right = size - 1\n    while left <= right:\n        mid = (left + right)//2\n        if x == a[mid]:\n            left = mid + 1\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if x == a[left-1]:\n        return left-1, right\n    return -1, -1\ndef search_range_binary(a, l, r, x):\n    '''\n    Write a function to search a range of values in a sorted array.\n    '''\n    size = len(a)\n    if size == 0:\n        return -1, -1\n    if size == 1:\n        if a[0] == x:\n            return 0, 0\n        return -1, -1\n    left = 0\n    right = size - 1\n    while left <= right:\n        mid = (left + right)//2\n        if x == a[mid]:\n            left ",
        "num_ids": 98
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i==0:\n        return i\n    else:\n        return i-1\ndef array_intersection(a1, a2):\n    '''\n    Write a function to find the intersection of two sorted arrays.\n    '''\n    if len(a1) == 0 or len(a2) == 0:\n        return []\n    if a1[-1] < a2[0]:\n        return []\n    res = []\n    i = 0\n    j = 0\n    while i<len(a1) and j<len(a2):\n        if a1[i]<a2[j]:\n            res.append(a1[i])\n            i+=1\n        else:\n            j+=1\n    return res\ndef binary_search(a, x):\n    '''\n    Write a function to find the index of a target value in sorted array.\n    '''\n    if a == None or len(a) == 0:\n        return -1\n    low = 0\n    high = len(a)-1\n    while low <= high:\n        mid = low + (high-low)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid]<x:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\ndef binary_search_recursive(a, x, low, high):\n    '''\n    Write a function to find the index of a target value in sorted array.\n    '''\n    if a == None or len(a) == 0:\n        return -1\n    if low>=high:\n        return -1\n    mid = low + (high-low)//2\n    if a[mid] == x:\n        return mid\n    elif a[mid]<x:\n        return binary_search_recursive(a, x, mid+1, high)\n    else:\n        return binary_search_recursive(a, x, low, mid-1)\ndef binary_search_iterative(a, x):\n    '''\n    Write a function to find the index of a target value in sorted array.\n    '''\n    if a == None or len(a) == 0:\n        return -1\n    low = 0\n    high = len(a)-1\n    while low<=high:\n        mid = low + (high-low)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid]<x:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\ndef remove_elements(a, x):\n    '''\n    Write a function to remove all elements from an array that are less than a given value.\n    '''\n    if len(a)==0:\n        return 0\n    if x == None:\n        return len(a)\n    if x>a[0]:\n        return 0\n    res = []\n    for i in range(len(a)):\n        if a[i]>x:\n            res.append(a[i])\n    return len(res)\ndef remove_elements_1(a, x):\n    '''\n    Write a function to remove all elements from an array that are less than a given value.\n    '''\n    if len(a)==0:\n        return 0\n    if x == None:\n        return len(a)\n    if x>a[0]:\n        return 0\n    i = 0\n    while i<len(a):\n        if a[i] == x:\n            a.pop(i)\n        else:\n            i+=1\n    return len(a)\ndef array_partition_equal_sub_parts(a, x):\n    '''\n    Write a function to partition an array so that all numbers less than x are on the left side and all numbers greater than x are on the right side.\n    '''\n    if len(a)==0:\n        return []\n    if x == None:\n        return a\n    if x>a[-1]:\n        return a\n    res = []\n    left_cnt = 0\n    for i in range(len(a)):\n        if a[i]<=x:\n            left_cnt+=1\n        else:\n            res.append(a[i])\n            res.append(x)\n            break\n    left_cnt-=1\n    for i in range(len(a)-1,0,-1):\n        if a[i]>=x:\n            left_cnt+=1\n        else:\n            res.append(a[i])\n            res.append(x)\n            break\n    if len(res)==0:\n        return []\n    res.append(x)\n    return res\ndef array_partition_equal_sub_parts_2(a, x):\n    '''\n    Write a function to partition an array so that all numbers less than x are on the left side and all numbers greater than x are on the right side.\n    '''\n    if len(a)==0:\n        return []\n    if x == None:\n        return a\n    if x>a[-1]:\n        return a\n    left_cnt = 0\n    left_idx = 0\n    right_cnt = 0\n    right_idx = len(a)-1\n    for i in range(len(a)):\n        if a[i]<=x:\n            left_cnt+=1\n            left_idx = i\n        else:\n            right_cnt+=1\n            right_idx = i\n    if left_cnt == len(a):\n        return a\n    if right_cnt==len(a):\n        return a\n    left_part = a[:left_idx]\n    right_part = a[right_idx+1:]\n    res = left_part + right_part\n    res.append(x)\n    return res\ndef array_partition_equal_sub_parts_3(a, x):\n    '''\n    Write a function to partition an array so that all numbers less than x are on the left side and all numbers greater than x are on the right side.\n    '''\n    if len(a)==0:\n        return []\n    if x == None:\n        return a\n    if x>a[-1]:\n        return a\n    left_cnt = 0\n    left_idx = 0\n    right_cnt = 0\n    right_idx = len(a)-1\n    for i in range(len(a)):\n        if a[i]<=x:\n            left_cnt+=1\n            left_idx = i\n        else:\n            right_cnt+=1\n            right_idx = i\n    if left_cnt == len(a):\n        return a\n    if right_cnt==len(a):\n        return a\n    left_part = a[:left_idx]\n    right_part = a[right_idx+1:]\n    res = right_part + left_part\n    res.append(x)\n    return res\ndef sorted_merge(a, b):\n    '''\n    Write a function that takes in two sorted arrays and merges them in order.\n    '''\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    res = []\n    i = 0\n    j = 0\n    while i < len(a) and j < len(b):\n        if a[i]<b[j]:\n            res.append(a[i])\n            i+=1\n        else:\n            res.append(b[j])\n            j+=1\n    if i<len(a):\n        while i<len(a):\n            res.append(a[i])\n            i+=1\n    if j<len(b):\n        while j<len(b):\n            res.append(b[j])\n            j+=1\n    return res\ndef sorted_merge_recursive(a, b):\n    '''\n    Write a function that takes in two sorted arrays and merges them in order.\n    '''\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    res = []\n    i = 0\n    j = 0\n    while i < len(a) and j < len(b):\n    ",
        "num_ids": 62
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    if a[0] == x:\n        return 0\n    elif a[0] > x:\n        return 0\n    else:\n        a.insert(0, x)\n        i = 1\n        while i < len(a):\n            if a[i-1] == x:\n                a.insert(i, x)\n                break\n            elif a[i-1] > x:\n                a.insert(i, x)\n                break\n            i += 1\n        return i\ndef binary_search_r(a, x, lo=0, hi=None):\n    if hi is None:\n        hi = len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return -1\n",
        "num_ids": 236
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    if l == len(a):\n        return len(a)\n    elif x < a[l]:\n        return l\n    elif x > a[len(a)-1]:\n        return len(a)\n    else:\n        return l+1\n",
        "num_ids": 79
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text_list = list(text)\n    if text_list.count('b') == 0:\n        return False\n    for i in range(len(text_list)-1):\n        if text_list[i] == 'a' and text_list[i+1] == 'b' and text_list[i+2] == 'b':\n            return True\n    return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by two 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0 or text_list.count('b') == 0:\n        return False\n    for i in range(len(text_list)-1):\n        if text_list[i] == 'a' and text_list[i+1] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a':\n            return True\n    return False\n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0:\n        return False\n    for i in range(len(text_list)-1):\n        if text_list[i] == 'a' and text_list[i+1] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a':\n            return True\n    return False\n    \ndef text_match_one_character(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0 or text_list.count('b') == 0:\n        return False\n    for i in range(len(text_list)-1):\n        if text_list[i] == 'a' and text_list[i+1] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a':\n            return True\n    return False\n    \ndef text_match_two_character(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0 or text_list.count('b') == 0:\n        return False\n    for i in range(len(text_list)-1):\n        if text_list[i] == 'a' and text_list[i+1] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a':\n            return True\n    return False\n    \ndef text_match_three_character(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0 or text_list.count('b') == 0:\n        return False\n    for i in range(len(text_list)-2):\n        if text_list[i] == 'a' and text_list[i+1] == 'b' and text_list[i+2] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a' and text_list[i+2] == 'b':\n            return True\n    return False\n    \ndef text_match_three_character_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0 or text_list.count('b') == 0:\n        return False\n    for i in range(len(text_list)-2):\n        if text_list[i] == 'a' and text_list[i+1] == 'b' and text_list[i+2] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a' and text_list[i+2] == 'b':\n            return True\n    return False\n    \ndef text_match_four_character(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by four 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0 or text_list.count('b') == 0:\n        return False\n    for i in range(len(text_list)-3):\n        if text_list[i] == 'a' and text_list[i+1] == 'b' and text_list[i+2] == 'b' and text_list[i+3] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a' and text_list[i+2] == 'b' and text_list[i+3] == 'b':\n            return True\n    return False\n    \ndef text_match_four_character_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by four 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0 or text_list.count('b') == 0:\n        return False\n    for i in range(len(text_list)-3):\n        if text_list[i] == 'a' and text_list[i+1] == 'b' and text_list[i+2] == 'b' and text_list[i+3] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a' and text_list[i+2] == 'b' and text_list[i+3] == 'b':\n            return True\n    return False\n    \ndef text_match_two_letters(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0:\n        return False\n    for i in range(len(text_list)-1):\n        if text_list[i] == 'a' and text_list[i+1] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a':\n            return True\n    return False\n    \ndef text_match_two_letters_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0:\n        return False\n    for i in range(len(text_list)-2):\n        if text_list[i] == 'a' and text_list[i+1] == 'b' and text_list[i+2] == 'b':\n            return True\n        elif text_list[i] == 'b' and text_list[i+1] == 'a' and text_list[i+2] == 'b':\n            return True\n    return False\n    \ndef text_match_three_letters(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three 'b' or vice versa.\n    '''\n    text_list = list(text)\n    if text_list.count('a') == 0:\n        return False\n    for i in range(len(text_list)-2):\n        if text_list[i] == 'a' and text_list",
        "num_ids": 61
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(ab)*b\")\n    result = pattern.match(text)\n    if result:\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    m=re.search(r'abab',text)\n    if m:\n        print(\"YES, the pattern matched\")\n    else:\n        print(\"No, the pattern didn't match\")\n",
        "num_ids": 48
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.findall(r'ab{3}', text)\n",
        "num_ids": 19
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.findall(r'ab{3}', text)\n",
        "num_ids": 19
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #return re.search(\"ab\", text)\n    #return re.search(r\"ab\\s+\", text)\n    return re.search(r\"ab+b\", text)\n",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.+b'\n    if re.match(pattern, text):\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 40
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    ans = re.search(r'ab', text)\n    return ans\n",
        "num_ids": 20
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab+b+b')\n    match = pattern.search(text)\n    return match\n",
        "num_ids": 33
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    x = re.findall(r'ab+', text)\n    return x\n",
        "num_ids": 22
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n",
        "num_ids": 17
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + test_str)\n    return new_tuple\n",
        "num_ids": 26
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item)\n    result.append(test_str)\n    return tuple(result)\n",
        "num_ids": 41
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = tuple(test_list)\n    test_str = tuple(test_str)\n    return (test_list, test_str)\n",
        "num_ids": 38
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str.split(\",\") + test_list)\n",
        "num_ids": 20
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list) == 0:\n        return tuple()\n    if len(test_str) == 0:\n        return tuple(test_list)\n    if len(test_str) == 1:\n        return tuple(test_list) + (test_str, )\n    return tuple(test_list) + (test_str, )\n",
        "num_ids": 84
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # new_tuple = (test_list, test_str)\n    return tuple(test_list), tuple(test_str)\n    # for i in range(len(test_list)):\n    #     new_tuple.append(test_list[i])\n    # for i in range(len(test_str)):\n    #     new_tuple.append(test_str[i])\n    # return new_tuple\n",
        "num_ids": 106
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list.append(test_str)\n    test_tuple = tuple(test_list)\n    return test_tuple\n    ",
        "num_ids": 35
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_position = []\n    if type(nums) is not list:\n        print(\"Given list is not a list\")\n    else:\n        for i in range(len(nums)):\n            if i % 2 == 0:\n                even_position.append(nums[i])\n    return even_position\n",
        "num_ids": 77
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(n % 2 == 0 for i, n in enumerate(nums) if i % 2 == 0)\n",
        "num_ids": 30
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            continue\n        else:\n            return False\n    return True\nprint(even_position([1,2,3,4,5,6]))\n",
        "num_ids": 63
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = []\n    for i in range(0,len(nums)):\n        if i%2==0:\n            even_index.append(nums[i])\n    if len(even_index) == len(nums):\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    lst = nums\n    for i in range(len(lst)):\n        if(i%2!= 0):\n            return False\n        else:\n            return True\n",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            continue\n        if nums[i] % 2 == 1:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(n%2==0 for i,n in enumerate(nums) if i%2==0)\n",
        "num_ids": 30
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return\n    else:\n        return remove_nested(test_tup[1:])\n",
        "num_ids": 38
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 2:\n        return test_tup[0]\n    else:\n        return (remove_nested(test_tup[0]), remove_nested(test_tup[1]))\n",
        "num_ids": 58
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tuple_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            tuple_tup = tuple_tup + i\n        else:\n            tuple_tup = tuple_tup + (i,)\n    return tuple_tup\n",
        "num_ids": 72
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return ()\n    else:\n        return remove_nested(test_tup[1:]) + (test_tup[0],)\n",
        "num_ids": 49
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #Hint: What is a tuple?\n    #https://www.w3schools.com/python/python_tuples.asp\n",
        "num_ids": 35
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while (isinstance(test_tup, tuple)):\n        test_tup = test_tup[1]\n    return test_tup\n",
        "num_ids": 38
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(i for i in test_tup if i is not None)\n    return None\n",
        "num_ids": 38
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return remove_nested(test_tup[1:])\n    else:\n        return test_tup\n",
        "num_ids": 42
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if type(i)==tuple:\n            test_tup=test_tup.replace(i,())\n    return tuple(test_tup)\n",
        "num_ids": 50
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tuple = []\n    for i in test_tup:\n        if type(i) is not tuple:\n            new_tuple.append(i)\n    return tuple(new_tuple)\n",
        "num_ids": 52
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count = count + 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for i in input_list:\n        if isinstance(i, list):\n            result += 1\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item,list):\n            count+=1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter=0\n    for i in input_list:\n        if type(i)==list:\n            counter+=1\n    return counter\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list:\n        if type(i)==list:\n            count = count + 1\n        else:\n            continue\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0,len(input_list)):\n        if(type(input_list[i]) == list):\n            count = count + 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count+=1\n    print(count)\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = low + (high-low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 84
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if len(arr)==1:\n        if arr[0]==x:\n            return 0\n        else:\n            return -1\n    if arr[len(arr)-1]==x:\n        return len(arr)-1\n    for i in range(len(arr)-1,0,-1):\n        if arr[i]==x:\n            return i\n    return -1\n",
        "num_ids": 108
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = n-1\n    while i>=0:\n        if arr[i]<x:\n            i = i-1\n        else:\n            break\n    return i\n",
        "num_ids": 53
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        m = (i + j) // 2\n        if arr[m] == x:\n            return m\n        elif arr[m] > x:\n            j = m - 1\n        else:\n            i = m + 1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    j=len(arr)-1\n    while i<j:\n        mid=int((i+j)/2)\n        if arr[mid]<x:\n            i=mid+1\n        elif arr[mid]>x:\n            j=mid-1\n        else:\n            if mid==0 or arr[mid-1]!=x:\n                return mid\n            j=mid-1\n    if arr[i]==x:\n        return i\n    elif arr[j]==x:\n        return j\n    else:\n        return -1\n",
        "num_ids": 140
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pos = 0\n    while pos < len(arr):\n        if arr[pos] == x:\n            break\n        pos = pos + 1\n    return pos\n",
        "num_ids": 40
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == []:\n        print(\"Array is empty\")\n        return -1\n    elif arr[-1] == x:\n        return len(arr) - 1\n    elif arr[0] == x:\n        return 0\n    else:\n        mid = (len(arr)//2)\n        if x == arr[mid]:\n            return mid\n        elif x > arr[mid]:\n            return last(arr[mid+1:],x)\n        else:\n            return last(arr[:mid],x)\n",
        "num_ids": 127
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i<j:\n        mid = (i+j)/2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            j = mid\n        else:\n            i = mid+1\n    return -1\n",
        "num_ids": 79
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr) - 1\n    \n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] == x:\n            return m\n        if arr[m] > x:\n            r = m - 1\n        else:\n            l = m + 1\n",
        "num_ids": 79
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lo = 0\n    hi = len(arr)-1\n    while lo<hi:\n        mid = (lo+hi)//2\n        if arr[mid]>x:\n            hi = mid-1\n        else:\n            lo = mid+1\n    if lo == 0:\n        return -1\n    else:\n        return lo-1\n",
        "num_ids": 84
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = 'a'\n    b = 'b'\n    pattern = re.compile(a+b)\n    matches = pattern.findall(text)\n    return matches\n",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"ab\"\n    result = re.search(pattern, text)\n    if result:\n        print(text, 'is of length:', len(text))\n        print(result.group())\n    else:\n        print(text, 'is not of length:', len(text))\n    return\n",
        "num_ids": 75
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*?)b'\n    regex = re.compile(pattern)\n    results = regex.findall(text)\n    return results\n",
        "num_ids": 41
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(\"a.*?b\",text)\n",
        "num_ids": 17
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    return match!= None\n",
        "num_ids": 32
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r\"^a+b$\")\n    if regex.search(text)!= None:\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    print(match)\n",
        "num_ids": 30
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    # First we make a regex that matches 'ab' (a followed by b)\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matches 'a' followed by 'b'\n    # Example: 'ab' matche",
        "num_ids": 2004
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = re.compile(r'\\b(a)+\\b')\n    result = pattern.search(text)\n    print(result)\n    \ntext = \"This is a string!\"\ntext_starta_endb(text)\n",
        "num_ids": 61
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    res = 0\n    for key in dict:\n        res += dict[key]\n    return res\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Iterate over dictionary and add it to a variable sum.\n    # Iterate over dictionary and add it to the sum variable\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n",
        "num_ids": 55
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.items():\n        sum = sum + i[1]\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict.values():\n        sum += x\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum = 0\n    for i in range(l,r+1):\n        if i%2!= 0:\n            sum += i\n    print(\"Sum of all odd natural numbers within the range {0} and {1} is {2}\".format(l,r,sum))\n",
        "num_ids": 98
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1))\n",
        "num_ids": 13
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    count = 0\n    l = int(input(\"Enter lower range: \"))\n    r = int(input(\"Enter upper range: \"))\n    for i in range(l, r):\n        if i % 2!= 0:\n            count = count + i\n    print(\"Sum of Odd numbers is\", count)\n",
        "num_ids": 75
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(n+1) if x%2!= 0])\n",
        "num_ids": 25
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l=int(input(\"Enter the lower range: \"))\n    r=int(input(\"Enter the higher range: \"))\n    sum=0\n    for i in range(l,r+1):\n        if i%2!=0:\n            sum+=i\n    print(sum)\n",
        "num_ids": 71
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n>0 and n<=100:\n        for i in range(n):\n            if i%2!=0:\n                sum+=i\n        return sum\n    else:\n        return -1\n",
        "num_ids": 56
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        return None\n    return sum(i for i in range(n+1) if i%2!= 0)\n",
        "num_ids": 36
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input('Enter lower range :'))\n    r = int(input('Enter upper range :'))\n    odd_sum = 0\n    for i in range(l, r + 1):\n        if i % 2!= 0:\n            odd_sum += i\n    print(odd_sum)\n    \nsum_odd(1, 15)",
        "num_ids": 85
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = int(n[0]), int(n[1])\n    ans = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            ans = ans + i\n    print(ans)\n",
        "num_ids": 61
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum = sum + x\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    return arr[0] + _sum(arr[1:])\n",
        "num_ids": 32
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    return arr[0] + _sum(arr[1:])\n",
        "num_ids": 32
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for x in arr:\n        s = s+x\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \n",
        "num_ids": 11
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr=int(arr)\n    return sum(arr)\n",
        "num_ids": 17
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    size = len(arr)\n    arr = [0] + arr\n    res = 0\n    for i in range(1, size+1):\n        res += arr[i]\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in arr:\n        total += i\n    return total\n    \n    \ndef _calculate(array, sum):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in array:\n        total += _sum([i])\n    if total == sum:\n        return 1\n    else:\n        return 0\n        \n    \ndef _array(array, size):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal size.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in array:\n        if i % size == 0:\n            total += int((i/size))\n    return total\n    \n    \ndef _min_subset(arr):  \n    '''\n    Write a python function to find the minimum number of elements to be added to\n    make sum of an array equal to zero.\n    '''\n    # Your code here\n    \n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if _sum([arr[i], arr[j]]) == 0:\n                return 0\n    \n    for i in range(n-1):\n        if _sum([arr[i], arr[i+1]]) == 0:\n            return 0\n    \n    return 1\n    \n    \ndef _common_difference(array):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(array)):\n        total += _min_subset(array[:i])\n    return total\n        \n    \ndef _common_difference_optimized(array):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(array)):\n        if _sum(array[:i]) == _sum(array[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_2(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_3(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_4(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_5(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_6(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_7(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_8(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_9(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_10(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_11(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_12(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_13(arr):  \n    '''\n    Write a python function to find the number of ways to split an array into\n    two parts of equal sum.\n    '''\n    # Your code here\n    \n    total = 0\n    for i in range(1, len(arr)):\n        if _sum(arr[:i]) == _sum(arr[i:]):\n            total += 1\n    return total\n    \n    \ndef _min_subset_optimized_14(arr):  \n    '''\n    Write a python function t",
        "num_ids": 8
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # print (n)\n    n = n << d\n    return n & 0xffffffff\n    \n    \ndef left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return n\n    n = n << d\n    if n >= 0:\n        return n & 0xffffffff\n    else:\n        return -1 * (-1 * (n & 0xffffffff)) & 0xffffffff\n    \n    \ndef left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) & 0xffffffff | (n >> (32 - d)) & 0xffffffff\n    \n",
        "num_ids": 31
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d | n >> 32 - d) & 0xFFFFFFFF\n",
        "num_ids": 21
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32 - d)))\n",
        "num_ids": 18
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    binary = f\"{n:032b}\"\n    final_binary = binary[d:] + binary[:d]\n    return int(final_binary,2)\n",
        "num_ids": 41
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bin_no = bin(n)[2:]\n    if len(bin_no)<d:\n        while len(bin_no)<d:\n            bin_no = \"0\"+bin_no\n    print(bin_no)\n    return int(bin_no,2)\nprint(left_rotate(1,4))\n",
        "num_ids": 82
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> 32 - d\n",
        "num_ids": 14
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if(d==0):\n        return n\n    if(d==32):\n        return 0\n    #print(d)\n    return ((n << d) | (n>>32-d))&(2**32-1)\n",
        "num_ids": 57
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert isinstance(n,int)\n    assert isinstance(d,int)\n    assert n > 0\n    assert d > 0\n    #shift a 32 bit number to the left by d bits and return a 32 bit number\n    return (n << d) | (n >> (32-d))\n",
        "num_ids": 71
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n    \n    \ndef test_remove_all_spaces():\n    '''\n    We want to create a function that removes all spaces from a string.\n    If the string is empty, return the empty string. If the string only contains whitespace characters, return the string.\n    '''\n    print(\"\\nTesting remove_all_spaces:\")\n    print(remove_all_spaces(\"\"))\n    print(remove_all_spaces(\" \"))\n    print(remove_all_spaces(\" hello\"))\n    print(remove_all_spaces(\"\\t\\t hello\"))\n    print(remove_all_spaces(\"hello \\n\"))\n    print(remove_all_spaces(\"hello \\n \\n\"))\n    print(remove_all_spaces(\"hello \\t\\t world\"))\n    print(remove_all_spaces(\"hello \\t\\t\\t world\"))\n",
        "num_ids": 142
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\nprint(remove_all_spaces(\"halo  hai   hai   hai   hai\"))\n",
        "num_ids": 38
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n    \ndef remove_all_parenthesis(text):\n    '''\n    Write a function to remove all parenthesis from a string.\n    '''\n    return text.replace(\"(\",\"\")\n    \ndef remove_all_bracket(text):\n    '''\n    Write a function to remove all brackets from a string.\n    '''\n    return text.replace(\"[\",\"\")\n    \ndef remove_all_square_brackets(text):\n    '''\n    Write a function to remove all square brackets from a string.\n    '''\n    return text.replace(\"]\",\"\")\n    \ndef remove_all_curly_brackets(text):\n    '''\n    Write a function to remove all curly brackets from a string.\n    '''\n    return text.replace(\"}\",\"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n",
        "num_ids": 14
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+', '', text)\n    return text\n",
        "num_ids": 22
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y+1):\n        if i == z:\n            count = count + 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"testing if number of equal numbers are equal in the given list\")\n    if x == y == z:\n        print(\"test case passed\")\n        return True\n    else:\n        print(\"test case failed\")\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    elif y == z and y == x:\n        count += 1\n    elif z == x and z == y:\n        count += 1\n    else:\n        pass\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y):\n        if x==y and x==z:\n            count +=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # write your code here\n    if x == y and x == z:\n        return 3\n    elif y == x and y == z:\n        return 3\n    elif z == x and z == y:\n        return 3\n    else:\n        return 0\n",
        "num_ids": 64
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum(x == y == z)\n",
        "num_ids": 13
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c = 0\n    if x == y and y == z and x == z:\n        c += 1\n    return c\n",
        "num_ids": 31
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    cnt=0\n    if(x==y and x==z):\n        cnt+=1\n    elif(y==x and y==z):\n        cnt+=1\n    elif(z==x and z==y):\n        cnt+=1\n    return cnt\n",
        "num_ids": 69
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and x==z:\n        return 3\n    elif x==y or x==z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 41
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #if arr[0] > arr[-1]:\n    #    return -1\n",
        "num_ids": 23
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def swap(arr,i,j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n",
        "num_ids": 40
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] < arr[i-1]:\n            break\n    if i == 0:\n        print(i, \"No rotation required\")\n    else:\n        print(i, \"Rotations needed = \", i-1)\n",
        "num_ids": 74
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    '''\n    code_to_write\n    '''\n    '''\n    code_to_write\n    '''\n    '''\n    code_to_write\n    '''\n    \n    num_of_rotations = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                num_of_rotations += 1\n    return num_of_rotations\n",
        "num_ids": 73
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    if length == 0:\n        return 0\n    \n    if length == 1:\n        return 0\n    \n    arr.sort()\n    \n    for i in range(length):\n        if arr[i]!= i:\n            return i\n    \n    return length\n",
        "num_ids": 74
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return -1\n    # code here\n",
        "num_ids": 12
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr.sort()\n    i = 0\n    while arr[i] <= arr[i+1]:\n        i+=1\n    return i\n",
        "num_ids": 36
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #rotations = 0\n",
        "num_ids": 9
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count = 0\n    # count_arr = 0\n    # while(True):\n    #     if arr == sorted(arr):\n    #         count+=1\n    #         count_arr+=1\n    #         break\n    #     else:\n    #         # print(arr)\n    #         arr = sorted(arr)\n    #         # print(arr)\n    #         count_arr+=1\n    # return count_arr\n",
        "num_ids": 105
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    \n    # Check for the corner cases\n    if (n <= 1):\n        return True\n    \n    if (n < 4):\n        return False\n    \n    # Since the range of the number is [2, N - 1], we need to check only [2, int(sqrt(N))].\n    # The first loop check the first int, second loop check the second int.\n    # So we don't need to check the int n, since its already there\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 157
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    start = 1\n    end = n\n    while(start <= end) :\n        mid = start + (end - start)//2\n        if mid*mid == n :\n            return True\n        elif mid*mid < n :\n            start = mid + 1\n        else :\n            end = mid - 1\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # To check if x is perfect square\n    def sqrt(x):\n        if x < 0:\n            print(\"x is negative\")\n            return -1\n        if x < 2:\n            return x\n        i = x / 2\n        while i >= 2:\n            if x == i ** 2:\n                return i\n            i = i / 2\n        return -1\n    # Driver code\n    if isinstance(n, int) == False:\n        print(\"Given input is not an integer\")\n        return -1\n    if sqrt(n) * sqrt(n)!= n:\n        print(\"%d is not a perfect square\" %n)\n        return -1\n    print(\"%d is a perfect square\" %n)\n    return 0\n",
        "num_ids": 179
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0):\n        print(0)\n        return 0\n    if (n <= 1):\n        return 1\n    i = 1\n    while (i*i <= n) :\n        if (i*i == n) :\n            return 1\n        i += 1\n    return 0\n",
        "num_ids": 72
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #  Step 1: Take  1st  squared root of n\n    #  Step 2: Take its square root\n    #  Check if n is equal to its square\n    #  Recursive call\n    import math\n    if n < 0 :\n        return False\n    if n < 3 :\n        return True\n    if n % 2 == 0 :\n        return False\n",
        "num_ids": 88
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(math.sqrt(n))\n    return x*x == n\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    is_perfect_square = False\n",
        "num_ids": 15
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = int(math.sqrt(n))\n    return i*i == n\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n==0): return True\n    sq = int(math.sqrt(n))\n    # print(sq)\n    return sq*sq == n\n",
        "num_ids": 40
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<=0:\n        return False\n    \n    for i in range(n+1):\n        if i*i==n:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i == 0:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        return product_of_numbers(arr) % 2 == 0\n",
        "num_ids": 36
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (sum(arr) % 2 == 0)\n",
        "num_ids": 15
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    \n    i = 0\n    while i < len(arr)-1:\n        if arr[i]*arr[i+1] % 2 == 0:\n            return True\n        i += 1\n",
        "num_ids": 76
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return not any(x%2 for x in arr)\n",
        "num_ids": 16
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return False if len(arr) == 0 else product_of_even_odd(arr, 0, len(arr) - 1)\n",
        "num_ids": 33
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    if prod % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return True if arr[0] * arr[1] * arr[2] % 2 == 0 else False\n",
        "num_ids": 27
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    if not isinstance(arr,list) or len(arr) == 0:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(lists)\n    max_sum = -(2**31)\n    max_list = []\n    for i in range(l):\n        list_sum = 0\n        for j in range(len(lists[i])):\n            list_sum += lists[i][j]\n        if list_sum > max_sum:\n            max_sum = list_sum\n            max_list = lists[i]\n    return max_list\n",
        "num_ids": 107
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    if len(lists) == 1:\n        return lists\n    if len(lists) == 2:\n        return [[lists[0][0],lists[1][0]],lists]\n",
        "num_ids": 59
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n",
        "num_ids": 16
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # print(lists)\n    maxSum = float('-inf')\n    # Iterate through each sublist\n    for sublist in lists:\n        # Iterate through each element in the sublist\n        for x in sublist:\n            maxSum = max(maxSum,x)\n    return maxSum\n",
        "num_ids": 73
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #list = []\n    lists.sort()\n    lists.reverse()\n    max_sum = -1\n    for lst in lists:\n        max_sum = max(max_sum, sum(lst))\n    return max_sum\n",
        "num_ids": 59
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = -sys.maxsize - 1\n",
        "num_ids": 15
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            sum = 0\n            for k in range(len(lists)):\n                sum += lists[i][k] + lists[j][k]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n",
        "num_ids": 89
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    \n    if len(lists) == 1:\n        return lists\n",
        "num_ids": 32
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the variables\n    max_so_far = lists[0][0]\n    max_ending_here = lists[0][0]\n    total = lists[0][0]\n    start_of_loop = 0\n    end_of_loop = 1\n    \n    # Start the loop\n    while end_of_loop < len(lists):\n        total = max_ending_here + lists[end_of_loop][end_of_loop]\n        max_ending_here = max(max_ending_here, total)\n        max_so_far = max(max_so_far, total)\n        if (end_of_loop == len(lists) - 1):\n            end_of_loop += 1\n        else:\n            end_of_loop += 1\n            start_of_loop += 1\n            end_of_loop = start_of_loop\n            max_ending_here = max_so_far\n    return max_so_far\n    ",
        "num_ids": 229
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # if len(lists) == 0:\n    #     return None\n    # else:\n    #     n = len(lists[0])\n    #     max_element = lists[0][0]\n    #     for i in range(1, n):\n    #         if lists[0][i] > max_element:\n    #             max_element = lists[0][i]\n    #     max_list = lists[:]\n    #     max_list.remove(lists[0])\n    #     return max_sum_list(max_list)\n    \n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # print(max_sum_list(lists))\n    return list(max(list(zip(*lists)), key=lambda k: sum(k))) if len(lists) > 1 else lists[0]\n",
        "num_ids": 49
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    dic = dict()\n    for i in range(len(test_str)):\n        if test_str[i] not in dic:\n            dic[test_str[i]] = 1\n        else:\n            dic[test_str[i]] += 1\n    max_count = 0\n    max_char = \"\"\n    for key, value in dic.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    return max_char\n",
        "num_ids": 140
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Time Complexity : O(n)\n    # Space Complexity : O(1)\n    max_len = 0\n    curr_len = 0\n    for c in test_str:\n        if c.isupper():\n            curr_len = 1\n        else:\n            curr_len = 0\n",
        "num_ids": 76
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    prev = None\n    count = 0\n    for char in test_str:\n        if prev == None or char >= prev:\n            count = 1\n        elif char <= prev:\n            count = 1\n        else:\n            count = 2\n        prev = char\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Your code here\n    count = 0\n    max_count = 0\n    start = 0\n    end = 0\n    for i in range(0,len(test_str)):\n        if(test_str[i].isupper()):\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n            start = i\n    for i in range(len(test_str)-1, start, -1):\n        if(test_str[i].isupper()):\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n            end = i\n    print('Max run of uppercase characters : ',max_count)\n    print('Max run start : ', start)\n    print('Max run end : ', end)\n",
        "num_ids": 203
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    #Create an array and initialize with -1.\n    #Time Complexity: O(n)\n    #Space Complexity: O(1)\n    arr = [-1 for _ in range(256)]\n",
        "num_ids": 51
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(0,len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n",
        "num_ids": 90
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(set(test_str.lower()), key = test_str.lower().count)\n",
        "num_ids": 26
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #my attempt\n    #create a dict with keys=char values=count\n    #return the value with the highest count\n    counts = {}\n    for char in test_str:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    max_count = max(counts.values())\n    max_count_list = []\n    for char, count in counts.items():\n        if count == max_count:\n            max_count_list.append(char)\n    return max(max_count_list)\n",
        "num_ids": 139
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2==1:\n            return i\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_num = None\n    for num in nums:\n        if odd_num is None:\n            odd_num = num\n        else:\n            if num % 2!= 0:\n                odd_num = num\n                break\n    return odd_num\n",
        "num_ids": 63
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = None\n    for i in nums:\n        if i % 2 == 1:\n            odd = i\n            break\n    return odd\n",
        "num_ids": 36
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2!= 0:\n            return nums[i]\n        i += 1\n",
        "num_ids": 44
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return -1\n",
        "num_ids": 29
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if (num % 2) == 1:\n            return num\n    return \"There is no odd number in the list\"\n",
        "num_ids": 38
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums = sorted(nums)\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return nums[i]\n    return -1\n",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums:\n        return next(i for i in nums if i % 2!= 0)\n    else:\n        return -1\n",
        "num_ids": 36
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_number = None\n    for num in nums:\n        if num%2 == 1:\n            odd_number = num\n            break\n    return odd_number\n    \n    \nif __name__ == '__main__':\n    \n    # Test case 1\n    print(first_odd([2, 6, 4, 1, 8])) # 3\n    print(first_odd([2, 1, 3, 4, 6, 1, 8])) # 8\n    print(first_odd([2, 3, 4, 5, 1, 8])) # 0\n    print(first_odd([2, 4, 6, 8, 2, 4, 6, 8])) # 8\n    print(first_odd([2, 4, 6, 8, 9, 1])) # 9\n    print(first_odd([2, 3, 4, 5, 6, 7, 8])) # 6\n    print(first_odd([])) # None\n    print(first_odd([2, 6, 4, 1, 8, 4, 6, 1, 5])) # 4\n    print(first_odd(['a', 1, 3, 4, 5, 1, 8])) # 'a'\n    print(first_odd([1, 2, 3, 4, 5, 6, 7, 8])) # 1\n    print(first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9])) # 9\n    print(first_odd([2, 1, 3, 4, 5, 1, 8, 9])) # 8\n",
        "num_ids": 361
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = []\n    for i in nums:\n        if i % 2 == 1:\n            odd.append(i)\n",
        "num_ids": 32
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_set = set()\n    for i in test_tup:\n        test_set.add(i[1])\n    if K in test_set:\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = test_tup[2]\n    # If k is in the first element\n    if k in test_tup[0]:\n        return True\n    # If k is in the second element\n    elif k in test_tup[1]:\n        return True\n    # If k is neither in the first nor second element\n    else:\n        return False\n",
        "num_ids": 87
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup = test_tup\n    s = set(tup)\n    if K in s:\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_set = set(test_tup)\n    if (len(test_set) == K):\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = tuple(test_tup)\n    return test_tup.count(K) > 0\n",
        "num_ids": 30
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # TODO: Write your solution here\n    return tuple(map(lambda x, y: x < y, test_tup1, test_tup2))\n",
        "num_ids": 40
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if len(test_tup1) == len(test_tup2):\n        \n        for i in range(0, len(test_tup1)):\n            \n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        if len(test_tup1) > 0:\n            for x in range(len(test_tup1)):\n                if test_tup1[x] > test_tup2[x]:\n                    return False\n                else:\n                    return True\n    else:\n        if len(test_tup2) > 0:\n            for x in range(len(test_tup2)):\n                if test_tup2[x] > test_tup1[x]:\n                    return False\n                else:\n                    return True\n",
        "num_ids": 150
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        i = 0\n        while i < len(test_tup1):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n            i = i + 1\n        return True\n    else:\n        print(\"check_smaller: input must be 2 tuples\")\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]) or (test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1])\n",
        "num_ids": 78
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n    \n    \n    \nprint(check_smaller((1,2,3),(2,3,4))) # True\nprint(check_smaller((1,2,3),(2,3,6))) # False",
        "num_ids": 97
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller_list = []\n    for i in range(len(test_tup2)):\n        if test_tup1[i] < test_tup2[i]:\n            smaller_list.append(True)\n        else:\n            smaller_list.append(False)\n    return smaller_list\n",
        "num_ids": 78
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    # index of elements\n    i = 0\n    \n    # loop through the elements of first tuple\n    while (i < len(test_tup1)):\n        # if any element is smaller than corresponding element in the first tuple, then return False\n        if test_tup1[i] < test_tup2[i]:\n            return False\n        # else increment index\n        i += 1\n    \n    # if all elements in the first tuple are smaller than the corresponding elements in the second tuple, then return True\n    return True\n",
        "num_ids": 126
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller_tuple = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            smaller_tuple.append(True)\n        else:\n            smaller_tuple.append(False)\n    print(smaller_tuple)\n    \ndef check_greater(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is greater than its corresponding element in the first tuple.\n    '''\n    greater_tuple = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            greater_tuple.append(True)\n        else:\n            greater_tuple.append(False)\n    print(greater_tuple)\n",
        "num_ids": 85
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]:\n        return True\n    elif test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1] and test_tup1[2] > test_tup2[2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 131
    }
]