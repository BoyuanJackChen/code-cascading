[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n    \ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the share",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    from collections import Counter\n    def diff_elements(test_tup1, test_tup2):\n        # return the difference between the two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        return test_elem1.difference(test_elem2)\n        \n        \n    def first_common_elements(test_tup1, test_tup2):\n        # return the first common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        return list(test_elem1.intersection(test_elem2))\n        \n        \n    def second_common_elements(test_tup1, test_tup2):\n        # return the second common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        return list(test_elem1.intersection(test_elem2))\n        \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        return list(test_elem1.intersection(test_elem2))\n        \n        \n    def get_key(val, dict):\n        for key, value in dict.items():\n            if val == value:\n                return key\n                \n        return \"key doesn't exist\"\n        \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_tup2):\n        # return the third common elements from the given two tuples\n        # given the input\n        test_elem1 = set(test_tup1)\n        test_elem2 = set(test_tup2)\n        \n        common_elements = list(test_elem1.intersection(test_elem2))\n        \n        if len(common_elements) >= 3:\n            return common_elements\n        else:\n            return 'There are no common elements'\n            \n        \n    def third_common_elements(test_tup1, test_",
        "num_ids": 2006
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    x=[]\n    if len(test_tup1)!=len(test_tup2):\n        return None\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            x.append(test_tup1[i])\n    return x\n",
        "num_ids": 85
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                shared_elements.append(test_tup1[i])\n    return shared_elements\n    \nprint(similar_elements(['m','n', 'o', 'p', 'q'], ['m','p', 'q']))\n",
        "num_ids": 120
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    if len(test_tup1) >= len(test_tup2):\n        for i in range(len(test_tup2)):\n            for j in range(len(test_tup1)):\n                if test_tup1[j] == test_tup2[i]:\n                    shared_elements.append(test_tup1[j])\n                    break\n    else:\n        for i in range(len(test_tup1)):\n            for j in range(len(test_tup2)):\n                if test_tup2[j] == test_tup1[i]:\n                    shared_elements.append(test_tup2[j])\n                    break\n    return shared_elements\n",
        "num_ids": 185
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    n1, n2 = set(test_tup1), set(test_tup2)\n    print('Shared Elements: ', n1.intersection(n2))\n",
        "num_ids": 44
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            result.append(test_tup1[i])\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    '''\n    code here\n    '''\n    #test_list = []\n    shared_elems = []\n    #test_tup1 = (1, 2, 3, 4)\n    #test_tup2 = (3, 2, 4, 1)\n",
        "num_ids": 54
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == test_tup2[i]:\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    prime_flag = False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            prime_flag = True\n            break\n    return prime_flag\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n % 2!= 0):\n        return False\n    for i in range(3, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if (n <= 1):\n        return False\n    if (n == 2):\n        return True\n    if (n % 2 == 0):\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a python function to identify palindrome numbers.\n    '''\n    s = str(n)\n    for i in range(0, len(s) // 2):\n        if (s[i]!= s[len(s) - i - 1]):\n            return False\n    return True\ndef is_n_digit(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    return (k < len(s) and is_n_digit(s, k + 1))\ndef is_n_digit_palindrome(n,k):\n    '''\n    Write a python function to identify palindrome numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_palindrome(s, k + 1) and is_palindrome(int(s[0:k])) and is_palindrome(int(s[len(s) - k:])))\ndef is_n_digit_not_palindrome(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_not_palindrome(s, k + 1) and is_not_palindrome(int(s[0:k])) and is_not_palindrome(int(s[len(s) - k:])))\ndef is_n_digit_prime(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_prime(s, k + 1) and is_prime(int(s[0:k])) and is_prime(int(s[len(s) - k:])))\ndef is_n_digit_not_prime(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_not_prime(s, k + 1) and is_not_prime(int(s[0:k])) and is_not_prime(int(s[len(s) - k:])))\ndef is_n_digit_palindrome_prime(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_palindrome_prime(s, k + 1) and is_prime(int(s[0:k])) and is_prime(int(s[len(s) - k:])))\ndef is_n_digit_not_prime_palindrome(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_not_prime_palindrome(s, k + 1) and is_not_prime(int(s[0:k])) and is_not_prime(int(s[len(s) - k:])))\ndef is_n_digit_prime_palindrome(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_prime_palindrome(s, k + 1) and is_prime(int(s[0:k])) and is_prime(int(s[len(s) - k:])))\ndef is_n_digit_not_prime_prime_palindrome(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_not_prime_prime_palindrome(s, k + 1) and is_not_prime(int(s[0:k])) and is_not_prime(int(s[len(s) - k:])))\ndef is_n_digit_not_prime_prime_palindrome_prime(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_not_prime_prime_palindrome_prime(s, k + 1) and is_not_prime(int(s[0:k])) and is_prime(int(s[len(s) - k:])))\ndef is_n_digit_prime_prime_palindrome_prime(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_prime_prime_palindrome_prime(s, k + 1) and is_prime(int(s[0:k])) and is_prime(int(s[len(s) - k:])))\ndef is_n_digit_prime_prime_not_palindrome_prime(n,k):\n    '''\n    Write a python function to identify numbers with n digits in them.\n    '''\n    s = str(n)\n    if (k == len(s)):\n        return True\n    if (s[k] == 0):\n        return False\n    if (k < len(s)):\n        return (is_n_digit_prime_prime_not_palindrome_prime(s, k + 1) and is_prime(int(s[0:k])) and is_not_prime(int(s[len(s) - k:])))\ndef is_n_digit_prime_prime_not_palindrome_prime_palindrome(n,k):\n    '''\n    Write a python function to identify numbers with ",
        "num_ids": 12
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    if n == 1:\n        return False\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\ndef next_prime(n):\n    '''\n    Write a python function to return the next prime number after n.\n    '''\n    while True:\n        if n == 1:\n            break\n        if not is_not_prime(n):\n            break\n        n += 1\n    return n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 1:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n <= 2 or n == 3:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        if n == 2:\n            return False\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n==2) or (n==3) or (n==5):\n        return False\n    elif n<=1:\n        return False\n    elif n%2==0:\n        return True\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if (n%i==0):\n                return True\n        return False\n",
        "num_ids": 98
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return True\n    return False\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n == 1:\n        return {}\n    prime_factors_of_number = {}\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            # Find the factors of i\n            prime_factors_of_number[i] = 0\n            while n % i == 0:\n                prime_factors_of_number[i] += 1\n                n = n / i\n            # Now n is the largest prime factor\n    if n > 2:\n        prime_factors_of_number[n] = 1\n    return prime_factors_of_number\n",
        "num_ids": 153
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return False\n",
        "num_ids": 6
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_numbers = []\n    for i in range(n):\n        nums.sort()\n        largest_numbers.append(nums[len(nums)-i-1])\n    return largest_numbers\n",
        "num_ids": 54
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return list(map(lambda x:x[0],hq.nlargest(n,nums)))\n",
        "num_ids": 39
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        result = hq.heappop(nums)\n        hq.heapify(nums)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    print(\"The heap before adding to the heap: \",heap)\n    for i in range(n,len(nums)):\n        if nums[i] > heap[0]:\n            heap[0] = nums[i]\n            hq.heapify(heap)\n    print(\"The heap after adding to the heap: \",heap)\n    return heap\n",
        "num_ids": 102
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    maxheap = []\n    for i in range(n):\n        hq.heappush(maxheap,-nums[i])\n    for i in range(n-1):\n        hq.heappop(maxheap)\n    return maxheap\n",
        "num_ids": 68
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heapq.heapify(nums)\n    res = []\n    for i in range(n):\n        res.append(heapq.heappop(nums))\n    return res[::-1]\n",
        "num_ids": 55
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        nums.pop()\n    return nums\ndef heap_queue_largest_sorted(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    Note: Try sorting nums in place and using the -nums[i] to swap it to the right place.\n    '''\n    #print(\"Original\",nums)\n    #heapq.heapify(nums)\n    for i in range(n):\n        min_index = i\n        for j in range(i,n):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        temp = nums[i]\n        nums[i] = nums[min_index]\n        nums[min_index] = temp\n    #print(\"Updated\",nums)\n    return nums\ndef heap_queue_largest_sorted_b(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    Note: Try sorting nums in place and using the -nums[i] to swap it to the right place.\n    '''\n    #heapq.heapify(nums)\n    #print(\"Original\",nums)\n    for i in range(n):\n        min_index = i\n        for j in range(i,n):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        temp = nums[i]\n        nums[i] = nums[min_index]\n        nums[min_index] = temp\n    #print(\"Updated\",nums)\n    return nums",
        "num_ids": 125
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==1:\n        return nums\n    heap = []\n    for i in range(n):\n        if len(heap) == 0:\n            hq.heappush(heap,nums[i])\n        else:\n            if nums[i] > heap[0]:\n                hq.heapreplace(heap,nums[i])\n    heap = []\n    return heap\n",
        "num_ids": 101
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(0,n):\n        hq.heappush(h,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>h[0]:\n            hq.heappush(h,nums[i])\n            hq.heappop(h)\n    return h\nprint(heap_queue_largest([1,8,2,7,9,3,4,5,6],5))\nprint(heap_queue_largest([1,3,2,4,5,6,7,8,9],5))\nprint(heap_queue_largest([0,0,0,1,2,3,3,3,4,4],4))\nprint(heap_queue_largest([9,8,7,6,5,4,3,2,1],5))\n",
        "num_ids": 215
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    else:\n        while x > 0:\n            if x % 2!= 0:\n                return False\n            x = x >> 1\n        return True\n",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1)==0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return False\n    if x==1:\n        return True\n    \n    if x%2==0:\n        return False\n    \n    else:\n        x = x+1\n        while x%2==0:\n            x = x/2\n        if x==1:\n            return True\n        else:\n            return False\n    ",
        "num_ids": 88
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & 1)!= (y & 1):\n        return False\n    x >>= 1\n    y >>= 1\n    while x:\n        if x & 1:\n            return False\n        x >>= 1\n    while y:\n        if y & 1:\n            return False\n        y >>= 1\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x&(x-1)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return 0\n    return (x & (x-1)) == 0\n",
        "num_ids": 26
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r\"\\b[a-zA-Z]{4,}\\b\"\n    return re.findall(pattern, text)\n",
        "num_ids": 36
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in re.findall(r'\\b[a-zA-Z0-9]+\\b', text):\n        if len(word) >= 4:\n            result.append(word)\n    return result\n    \ndef find_char_long_various_char_chars(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in re.findall(r'\\b[a-zA-Z0-9-]+\\b', text):\n        if len(word) >= 4:\n            result.append(word)\n    return result\n    \ndef find_char_long_mixed_char_chars(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in re.findall(r'\\b[a-zA-Z0-9-_]+\\b', text):\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w+', text)\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    text = re.findall(r'\\w{4,}',text)\n    for word in text:\n        result.append(word)\n    return result\n    #pass\n",
        "num_ids": 50
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = []\n    for word in re.findall(r\"[\\w]+\", text):\n        if len(word) >= 4:\n            words.append(word)\n    return words\ndef find_non_word_char(text):\n    '''\n    Write a function to find all non-words characters in a string.\n    '''\n    for char in text:\n        if not char.isalpha():\n            return char\n        else:\n            return None\ndef find_non_word_char_long(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            return char\n        else:\n            return None\ndef find_all_non_word_char_long(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            yield char\ndef find_all_non_word_char_short(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            yield char\n        else:\n            return None\ndef find_all_non_word_char_long_count(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n    return count\ndef find_all_non_word_char_long_count_duplicate(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n    return count\ndef find_all_non_word_char_long_count_duplicate_non_empty_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_non_empty_list_short_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_short_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n    return count\ndef find_all_non_word_char_long_count_duplicate_short_list_non_empty_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_short_list_non_empty_list_short_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_short_list_non_empty_list_non_empty_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_short_list_non_empty_list_non_empty_list_non_empty_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_short_list_non_empty_list_non_empty_list_short_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_short_list_non_empty_list_non_empty_list_short_list_non_empty_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_short_list_non_empty_list_non_empty_list_short_list_non_empty_list_non_empty_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_short_list_non_empty_list_non_empty_list_short_list_non_empty_list_non_empty_list_non_empty_list(text):\n    '''\n    Write a function to find all non-words characters which are at least 4 characters long in a string.\n    '''\n    count = 0\n    result = []\n    for char in re.findall(r\"[^\\w\\s]+\", text):\n        if len(char) >= 4:\n            count += 1\n            result.append(char)\n    return result\ndef find_all_non_word_char_long_count_duplicate_short_list_non_empty_list_non_empty_list_short_lis",
        "num_ids": 98
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    words = re.findall(r'\\b\\w+\\b',text)\n    result = []\n    for i in words:\n        if len(i) >= 4:\n            result.append(i)\n    print(result)\n",
        "num_ids": 67
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile('[A-Za-z]+')\n    words = pattern.findall(text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    match_pattern = re.finditer(r'\\w+', text)\n    long_words = []\n    for match in match_pattern:\n        if len(match.group()) >= 4:\n            long_words.append(match.group())\n    return long_words\n",
        "num_ids": 67
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for x in nums:\n        print(x * x)\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        yield num*num\n",
        "num_ids": 17
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x ** 2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n    return nums\n    \nsquare_nums([4, 3, 2])\n",
        "num_ids": 53
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    output = []\n    for item in nums:\n        output.append(item**2)\n",
        "num_ids": 25
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\nprint(square_nums([-2,2,0,1]))\n",
        "num_ids": 33
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num * num)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2:\n        return 0\n    d = {}\n    for i in range(0, len(str)):\n        d[str[i]] = str[i+1:] + str[:i]\n    # print(d)\n    if len(d) == 1:\n        return 0\n    for k,v in d.items():\n        if k not in d:\n            d[k] = k + v\n    # print(d)\n    minRotations = len(str)\n    for k,v in d.items():\n        minRotations = min(minRotations, len(v))\n    return minRotations\n",
        "num_ids": 156
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 1:\n        return 0\n    ans = 0\n    if str == str[::-1]:\n        return ans\n    for i in range(n):\n        temp = str[i:] + str[:i]\n        if temp == temp[::-1]:\n            ans += 1\n    return ans\n",
        "num_ids": 84
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    m = len(str)\n    if m < 2:\n        return 0\n    # str = \"abc\"\n    \n    def rec(m):\n        if m <= 2:\n            return 0\n        if str == str[::-1]:\n            return m\n        else:\n            return rec(m - 1) + 1\n    return rec(m)\n",
        "num_ids": 86
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 1:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str=str.lower()\n    if len(str)==1:\n        return 0\n    arr=[0]*26\n    for i in str:\n        arr[ord(i)-ord('a')]+=1\n    res=0\n    for i in range(len(arr)):\n        if arr[i]!=0:\n            res+=arr[i]*(arr[i]-1)//2\n    return res\n",
        "num_ids": 104
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Input: \"waterbottle\"\n    # Output: 3\n    \n    # Time Complexity : O(n)\n    # Space Complexity: O(n)\n    \n    # Initializing the result \n    result = 0\n    \n    # Storing the current string as the key and checking \n    # if the key is already present in the dictionary \n    seen = {str: 0}\n    \n    # The loop will end once the seen dictionary is empty \n    # i.e. no more characters left to visit. \n    while seen: \n        \n        # Incrementing the count by 1 \n        result += 1\n        \n        # Creating a new dictionary as seen \n        # will get updated only if a new key is not present. \n        seen = {k: seen[k] + 1 for k in seen if k in seen} \n        \n        # Removing the keys whose count exceeds 1. \n        seen = {k: seen[k] for k in seen if seen[k] <= 1} \n        \n    return result\n",
        "num_ids": 246
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str + str[0]\n    rotations = 0\n    for i in range(len(str)):\n        if(str[i]!= str[(i+1)%len(str)]):\n            rotations += 1\n",
        "num_ids": 59
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    x = len(str)\n    min_rotations = x\n    for i in range(0,x):\n        for j in range(0,x):\n            if str[i]==str[j]:\n                if j<i:\n                    min_rotations = min(min_rotations,x-j)\n                else:\n                    min_rotations = min(min_rotations,x-i)\n    return min_rotations\n",
        "num_ids": 106
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # time complexity O(n)\n    # space complexity O(1)\n    from collections import deque\n    # create a deque \n    dq = deque(str) \n    rotation = 0\n    while len(dq) > 1:\n        # get the left and right \n        left = dq.popleft() \n        right = dq.pop()\n        # if the left and right are equal then add 1 to rotation\n        if left == right:\n            rotation += 1\n    return rotation\n",
        "num_ids": 123
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if 'ch' is already present in the string:\n    if ch in s:\n        s = s.replace(ch,'')\n    # if 'ch' is not present in the string:\n    else:\n        return 'The word does not contain the character'\n    return s\n",
        "num_ids": 68
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ind = s.find(ch)\n    s = s[0:ind] + s[ind+1:]\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = s.count(ch)\n    if count > 1:\n        s = s.replace(ch,'')\n        s = s.replace(ch+ch,'')\n    return s\n",
        "num_ids": 47
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    print(\"Original String: \",s)\n    if len(s)==0 or s==None:\n        print(\"Empty string: \",s)\n        return None\n    else:\n        return s[1:-1].replace(ch,\"\")\n    \n",
        "num_ids": 60
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s is None: \n        return None\n    if len(s) < 1: \n        return s\n    if ch is None or ch == '': \n        return None\n    if len(ch) < 1: \n        return s\n    if len(s) < 1: \n        return s\n    if ch == s[0] or ch == s[-1]: \n        return remove_Occ(s[1:-1], ch)\n    else: \n        return s\n",
        "num_ids": 117
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == ch:\n            count += 1\n    for j in range(count-1):\n        s = s[:-1]\n    for k in range(count):\n        s = s + ch\n    return s\n",
        "num_ids": 74
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n",
        "num_ids": 12
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s==None or s==\"\":\n        return \"\"\n    if ch==\"\":\n        return s\n    x=s.split(ch)\n    if len(x)==1:\n        return ch+s\n    return ch+s[1:-1]\n    \nprint(remove_Occ(\"guru\",\"a\")) #output: guru\nprint(remove_Occ(\"guru\",\"k\")) #output: guru\nprint(remove_Occ(\"guru\",\"g\")) #output: g\nprint(remove_Occ(\"guru\",\"r\")) #output: g\n",
        "num_ids": 131
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s == None:\n        return ''\n    if len(s) == 1:\n        return ''\n    if s == ch:\n        return s[1:-1]\n    if s == ch:\n        return s[1:len(s)-1]\n    if s[0] == ch:\n        return s[1:len(s)]\n    if s[-1] == ch:\n        return s[0:len(s)-1]\n    if s[0] == ch:\n        return s[1:len(s)-1]\n    if s[-1] == ch:\n        return s[0:len(s)-1]\n    else:\n        return s\n",
        "num_ids": 163
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    str=s\n    count=str.count(ch)\n    s=s.replace(s[0:count+1],s[count+1:len(s)])\n    s=s.replace(s[0],s[1])\n    return s\n",
        "num_ids": 64
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key = lambda x: sum(x))\n    return M\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if M == [] or M == [[]]:\n        return\n    rows_sum = []\n    for row in M:\n        row_sum = 0\n        for num in row:\n            row_sum += num\n        rows_sum.append(row_sum)\n    rows_sum = sorted(rows_sum)\n",
        "num_ids": 76
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    sums = [[0]*m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            sums[i][j] = M[i][j] + sums[i][j-1] if j else M[i][j]\n    for i in range(n):\n        for j in range(m):\n            M[i][j] = sums[i][j]\n    return M\n",
        "num_ids": 126
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M.sort(key=sum_row)\n    return M\n",
        "num_ids": 26
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) < 2:\n        return M\n",
        "num_ids": 16
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # new_matrix = []\n    # for i in range(len(M)):\n    #     temp = 0\n    #     for j in range(len(M)):\n    #         if j <= i:\n    #             temp += M[j][i]\n    #         else:\n    #             temp += M[i][j]\n    #     new_matrix.append([temp, i])\n",
        "num_ids": 99
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    s = 0\n    for i in range(n):\n        s = 0\n        for j in range(m):\n            s += M[i][j]\n        heapq.heappush(M[i], s)\n    for i in range(n):\n        s = 0\n        for j in range(m):\n            s += M[i][j]\n        heapq.heappush(M[i], s)\n    for i in range(1, n):\n        s = heapq.heappop(M[i])\n        heapq.heappush(M[i], s)\n    for i in range(n):\n        s = 0\n        for j in range(m):\n            s += M[i][j]\n        heapq.heappush(M[i], s)\n    return M\n",
        "num_ids": 218
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    N = len(M)\n    if N == 1:\n        return M\n    \n    \n    for col_index in range(0,N):\n        total_sum = sum(M[row][col_index] for row in range(N))\n        \n        total_row_sum = sum(M[row][col_index] for row in range(N))\n        for row in range(N):\n            M[row][col_index] = total_sum - M[row][col_index]\n        \n    for col_index in range(N):\n        total_sum = sum(M[row][col_index] for row in range(N))\n        \n        total_row_sum = sum(M[row][col_index] for row in range(N))\n        for row in range(N):\n            M[row][col_index] = total_sum - M[row][col_index]\n    \n    return M\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2011
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    if n == 0:\n        return\n    \n    # key = M[0][0]\n    M.sort(key=lambda x:x[0])\n",
        "num_ids": 48
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = 1/3 * (l*b*h)\n    print('volume of the prism is:',vol)\n    \ndef find_Area(l,b) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    area = 0.5*l*b\n    print('area of the triangle is:',area)\n    \ndef find_surface_area(l,b,h) : \n    '''\n    Write a python function to find the surface area of a triangle.\n    '''\n    area = 1/2 * l*b*h\n    print('surface area of the triangle is:',area)\n    \ndef find_perimeter(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangle.\n    '''\n    perimeter = l + b + h\n    print('perimeter of the triangle is:',perimeter)\n    \ndef find_diagonal(l,b,h) : \n    '''\n    Write a python function to find the diagonal of a triangle.\n    '''\n    diagonal = (l*h)/2\n    print('diagonal of the triangle is:',diagonal)\n    \ndef find_cube(x) : \n    '''\n    Write a python function to find the volume of a cube.\n    '''\n    vol = x**3\n    print('volume of the cube is:',vol)\n    \ndef find_cuboid(w,h,l) : \n    '''\n    Write a python function to find the surface area of a cuboid.\n    '''\n    area = w*l + h*l + 2*h*w\n    print('surface area of the cuboid is:',area)\n    \ndef find_pyramid(h,w) : \n    '''\n    Write a python function to find the surface area of a pyramid.\n    '''\n    area = (h*w)/3\n    print('surface area of the pyramid is:',area)\n    \ndef find_trapezium(h,w,h1) : \n    '''\n    Write a python function to find the surface area of a trapezium.\n    '''\n    area = 0.5*(h+h1)*w\n    print('surface area of the trapezium is:',area)\n    \ndef find_parallelogram(h,w) : \n    '''\n    Write a python function to find the surface area of a parallelogram.\n    '''\n    area = h*w\n    print('surface area of the parallelogram is:',area)\n    \ndef find_circle(r) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    area = 3.14*r**2\n    print('area of the circle is:',area)\n    \ndef find_sphere(r) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    volume = (4/3)*3.14*r**3\n    print('volume of the sphere is:',volume)\n    \ndef find_cylinder(h,r) : \n    '''\n    Write a python function to find the surface area of a cylinder.\n    '''\n    area = 2*pi*r*h\n    print('surface area of the cylinder is:',area)\n    \ndef find_pyramid_triangle(h,w) : \n    '''\n    Write a python function to find the surface area of a triangle.\n    '''\n    area = (h*w)/2\n    print('surface area of the triangle is:',area)\n    \ndef find_triangle_pyramid(h,w) : \n    '''\n    Write a python function to find the surface area of a triangle.\n    '''\n    area = (0.5*h*w)\n    print('surface area of the triangle is:',area)\n    \ndef find_circle_triangle(r,h) : \n    '''\n    Write a python function to find the surface area of a triangle.\n    '''\n    area = pi*(r**2)\n    print('surface area of the triangle is:',area)\n    \ndef find_triangle_circle(r,h) : \n    '''\n    Write a python function to find the surface area of a triangle.\n    '''\n    area = pi*(r**2)\n    print('surface area of the triangle is:',area)\n    \ndef find_circle_sphere(r) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    vol = 4/3*pi*r**3\n    print('volume of the sphere is:',vol)\n    \ndef find_sphere_pyramid(r) : \n    '''\n    Write a python function to find the volume of a pyramid.\n    '''\n    vol = 4/3*pi*r**3\n    print('volume of the pyramid is:',vol)\n    \ndef find_triangle_sphere(h,r) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    vol = (4/3)*pi*r**3\n    print('volume of the sphere is:',vol)\n    \ndef find_sphere_cube(r) : \n    '''\n    Write a python function to find the volume of a cube.\n    '''\n    vol = r**3\n    print('volume of the cube is:',vol)\n    \ndef find_cube_sphere(l,r) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    vol = (4/3)*pi*r**3\n    print('volume of the sphere is:',vol)\n    \ndef find_sphere_circle(r) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    vol = (4/3)*pi*r**3\n    print('volume of the sphere is:',vol)\n    \ndef find_triangle_sphere(h,r) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    vol = (4/3)*pi*r**3\n    print('volume of the sphere is:',vol)\n    \ndef find_triangle_cube(l,h) : \n    '''\n    Write a python function to find the volume of a cube.\n    '''\n    vol = (l*h)\n    print('volume of the cube is:',vol)\n    \ndef find_cube_triangle(w,h) : \n    '''\n    Write a python function to find the volume of a triangle.\n    '''\n    vol = (w*h)\n    print('volume of the triangle is:',vol)\n    \ndef find_sphere_cuboid(r) : \n    '''\n    Write a python function to find the volume of a cuboid.\n    '''\n    vol = (4/3)*pi*r**3\n    print('volume of the cuboid is:',vol)\n    \ndef find_triangle_cuboid(h,w) : \n    '''\n    Write a python function to find the volume of a cuboid.\n    '''\n    vol = (h*w)\n    print('volume of the cuboid is:',vol)\n    \ndef find_triangle_sphere(r,h) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    vol = (4/3)*pi*r**3\n    print('volume of the sphere is:',vol)\n    \ndef find_triangle_pyramid(h,w) : \n    '''\n    Write a python function to find the volume of a pyramid.\n    '''\n    vol = (2/3)*pi*h*w\n    print('volume of the pyramid is:',vol)\n    \ndef find_cube_pyramid(w,h) : \n    '''\n    Write a python function to find the volume of a pyramid.\n    '''\n    vol = (w*h)\n    print('volume of the pyramid is:',vol)\n    \ndef find_triangle_sphere(h,r) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    vol = (4/3)*pi*",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l==0 or b==0 or h==0 :\n        return 0\n    else :\n        return (1/3)*l*b*h\n    \nif __name__ == '__main__':\n    l=int(input())\n    b=int(input())\n    h=int(input())\n    print(find_Volume(l,b,h))\n",
        "num_ids": 89
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a=l+b+h\n    volume=1/3*a*(l+b)*h\n    print(\"The volume of the prism is\", volume)\n",
        "num_ids": 40
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return ((l*b)*h)\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2012
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    A=l*b\n    return A*h\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    from math import sqrt\n    volume = (l*b*h)/3\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (b*h)/3\n    return volume\n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Area of the prism\n    A = (l * h)/2\n    # Volume of the prism\n    V = A * b\n    # Print the result\n    print(\"Area =\", A)\n    print(\"Volume =\", V)\n    \n    \ndef find_Volume_two(a,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Area of the prism\n    A = a * h / 2\n    # Volume of the prism\n    V = A * b\n    # Print the result\n    print(\"Area =\", A)\n    print(\"Volume =\", V)\n    \n    \n    \n",
        "num_ids": 62
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*h*b\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search(r'[a-z]+_[a-z]*',text) else False\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^([a-z]+)(_[a-z]+)*$', text)\n",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('^([a-z]*_)+[a-z]+$',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s1 = re.findall('[a-z]+_[a-z]+', text)\n    if s1:\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[a-z]+_[a-z]',text)\n",
        "num_ids": 26
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #return True if re.search(r'[a-z]+_[a-z]+',text) else False\n    return re.match(r'[a-z]+_[a-z]+',text)\n",
        "num_ids": 53
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub(r'\\W+', '', text)\n    return re.findall(r'[a-z]+_[a-z]*', text)\n",
        "num_ids": 45
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+[_][a-z]+', text)!= None\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    def contains_underscore(text):\n        for i in text:\n            if i == \"_\":\n                return True\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_1 = re.compile(r'[a-z]+[_]*[a-z]+')\n    if text_1.match(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\ndef cube_area(b):\n    '''\n    Write a function that returns the area of a cube given its side length as input.\n    '''\n    return b ** 3\ndef rectangle_area(a, b):\n    '''\n    Write a function that returns the area of a rectangle given its height and length as input.\n    '''\n    return a * b\ndef circle_area(r):\n    '''\n    Write a function that returns the area of a circle given its radius as input.\n    '''\n    return 3.14 * (r ** 2)\ndef paralell_perpendicular_parallel(p, q):\n    '''\n    Write a function that returns the value of the angle between the perpendicular and parallel lines (defined by two points) for which these lines are perpendicular to each other.\n    '''\n    return atan2((p[1] - q[1]), (p[0] - q[0]))\ndef four_sum(a, b, c, d):\n    '''\n    Write a function that returns the sum of the four numbers given as input.\n    '''\n    return a + b + c + d\ndef compass_point(deg):\n    '''\n    Write a function that returns the compass point for a given angle.\n    '''\n    return (deg + 11.25) % 360 / 45\ndef ternary_search(a, n, t):\n    '''\n    Write a function that returns the position of the first occurrence of t in the sequence a using the ternary search algorithm.\n    '''\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = low + ((high - low) // 3)\n        if a[mid] > t:\n            high = mid\n        elif a[mid] < t:\n            low = mid + 1\n        else:\n            return mid\n    return -1\ndef interleaved_sum(a, b):\n    '''\n    Write a function that returns the sum of the numbers in a sequence, a and b, when the sum is even, and the sum of the numbers in a sequence, a and b, when the sum is odd.\n    '''\n    return (a + b) * (a + b + 1) // 2\ndef long_diff(n):\n    '''\n    Write a function that returns the longest consecutive difference between a and its successor.\n    '''\n    result = 0\n    while n - 1 >= 0:\n        diff = n - 1 - n\n        if diff > result:\n            result = diff\n        n = n - 1\n    return result\ndef monotonic(a):\n    '''\n    Write a function that returns True if the sequence a is monotonically increasing and False otherwise.\n    '''\n    for i in range(len(a) - 1):\n        if a[i] > a[i + 1]:\n            return False\n    return True\ndef second_largest_number(a):\n    '''\n    Write a function that returns the second largest element in a sequence.\n    '''\n    largest = -1\n    for i in range(len(a)):\n        if a[i] > largest:\n            largest = a[i]\n    return largest\ndef fizz_buzz(n):\n    '''\n    Write a function that returns a sequence of numbers in the range of 1 to n, but for multiples of 3 prints \"fizz\" instead of the number, for multiples of 5 prints \"buzz\", and for multiples of both 3 and 5 prints \"fizzbuzz\".\n    '''\n    return [x for x in range(1, n + 1) if x % 3 == 0 or x % 5 == 0]\ndef fizz_buzz_range(a, b):\n    '''\n    Write a function that returns a sequence of numbers in the range of 1 to n, but for multiples of 3 prints \"fizz\" instead of the number, for multiples of 5 prints \"buzz\", and for multiples of both 3 and 5 prints \"fizzbuzz\".\n    '''\n    return [x for x in range(a, b + 1) if x % 3 == 0 or x % 5 == 0]\ndef fibonacci(n):\n    '''\n    Write a function that returns the nth number in the fibonacci sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef fibonacci_sequence(n):\n    '''\n    Write a function that returns the nth number in the fibonacci sequence.\n    '''\n    sequence = [0, 1]\n    while n > 2:\n        sequence.append(sequence[n - 1] + sequence[n - 2])\n        n = n - 1\n    return sequence[n]\ndef string_match(s1, s2):\n    '''\n    Write a function that returns the length of the longest common substring of s1 and s2.\n    '''\n    if s1 == '' or s2 == '':\n        return 0\n    if s1 == s2:\n        return len(s1)\n    else:\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                if s1[i] == s2[j]:\n                    if i == 0 or j == 0:\n                        if s1[i] == s2[j]:\n                            return len(s1)\n                    else:\n                        if s1[i] == s2[j]:\n                            return i + 1\ndef super_palindrome(s):\n    '''\n    Write a function that returns True if the given string s is a superpalindrome, False otherwise.\n    '''\n    for i in range(len(s)):\n        if s[i]!= s[len(s) - i - 1]:\n            return False\n    return True\ndef super_palindrome_range(a, b):\n    '''\n    Write a function that returns a boolean array of length 2 that is True if the given range of integers is a superpalindrome, and False otherwise.\n    '''\n    return [[True, False][super_palindrome(str(a))], [True, False][super_palindrome(str(b))]]\ndef super_palindrome_list(a):\n    '''\n    Write a function that returns a boolean array of length 2 that is True if the given list is a superpalindrome, and False otherwise.\n    '''\n    return [[True, False][super_palindrome(str(a))]]\ndef binary_search(s, n):\n    '''\n    Write a function that returns the position of the given character in a sorted string.\n    '''\n    low = 0\n    high = len(s) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if s[mid] == n:\n            return mid\n        elif s[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\ndef binary_search_range(s, n):\n    '''\n    Write a function that returns the position of the first character after the given character in a sorted string.\n    '''\n    low = 0\n    high = len(s) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if s[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\ndef reverse_sentence(s):\n    '''\n    Write a function that returns the string with the characters of the given string in reverse order.\n    '''\n    result = []\n    for i in range(len(s)):\n        if i == 0:\n            result.append(s[i])\n        else:\n            if s[i - 1]!= s[i]:\n                result.append(s[i])\n    return ''.join(result)\ndef reverse_sentence_range(s):\n    '''\n    Write a function that returns the string with the characters of the given string in reverse order.\n    '''\n    return ''.join(s[::-1])\ndef sum_of_factors(n):\n    '''\n    Write a function that returns the sum of the factors of a given integer.\n    '''\n    result = 0\n    for i in range(1, n):\n        if n % i == 0:\n            result += i\n    return result",
        "num_ids": 35
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    return math.pi * a * a\n",
        "num_ids": 16
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    d = {}\n    s1 = string[0]\n    s2 = string[1]\n    for i in range(len(s2)):\n        d[s2[i]] = s1[i]\n    return d\ndef list_to_str(dict1):\n    '''\n    Write a function to convert a dictionary to a string.\n    '''\n    s = ''\n    for i in range(len(dict1)):\n        s += dict1[i]\n    return s\ndef remove_char_from_str(string1, string2):\n    '''\n    Write a function to remove characters from a string if they are present in another string.\n    '''\n    count = 0\n    d = {}\n    s1 = string1\n    s2 = string2\n    for i in range(len(s2)):\n        d[s2[i]] = s1[i]\n    for i in range(len(s1)):\n        if s1[i] not in s2:\n            d[s1[i]] = s1[i]\n    return d\ndef convert_list_to_dict(list1):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = i\n    return d\ndef find_common_chars(string1, string2):\n    '''\n    Write a function to find the common characters in two strings.\n    '''\n    d1 = remove_char_from_str(string1, string2)\n    d2 = convert_list_to_dict(d1.keys())\n    d3 = {}\n    for i in d2:\n        d3[i] = d2[i]\n    return d3\ndef count_number_of_substrings(string1, string2):\n    '''\n    Write a function to count the number of common substrings in two strings.\n    '''\n    count = 0\n    d1 = str_to_list(string1)\n    d2 = str_to_list(string2)\n    for i in range(len(string1)-1):\n        for j in range(len(string2)-1):\n            if d1[i] == d2[j]:\n                count += 1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # if not string or len(string) == 0:\n    #     return []\n",
        "num_ids": 22
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    index_list = []\n    for char in string:\n        if char not in string1:\n            index_list.append(string.index(char))\n            \n    print(index_list)\n    \n    for i in index_list:\n        string = string[:i] + string[i+1:]\n        \n    return string\n    \n",
        "num_ids": 86
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set_a = set(string)\n    char_set_b = set(string.upper())\n",
        "num_ids": 28
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    st = string\n    lst = []\n    for i in range(len(st)):\n        if st.find(st[i]) > -1:\n            lst.append(st[i])\n    print(lst)\n    lst = list(filter(lambda a: a!= '', lst))\n    print(lst)\n    return lst\n",
        "num_ids": 90
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = list(string)\n    str2 = list(string)\n    s2 = list(string)\n    count = 0\n    for i in str2:\n        if i in str1:\n            str1.remove(i)\n            count += 1\n    s2.clear()\n    for i in str1:\n        s2.append(i)\n    print(s2)\n    if count == 0:\n        return 'No Common Characters'\n    else:\n        return 'Common Characters'\n",
        "num_ids": 121
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # code here\n    return lst\n",
        "num_ids": 12
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = list(string)\n    string2 = list(string)\n    for i in string2:\n        if i in string1:\n            string1.remove(i)\n    return string1\ndef str_to_list1(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = list(string)\n    string2 = list(string)\n    for i in string2:\n        if i in string1:\n            string1.remove(i)\n    return \"\".join(string1)\nif __name__ == '__main__':\n    print(str_to_list(\"sunday\")",
        "num_ids": 79
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_in_second_string = dict.fromkeys(string)\n    result = []\n    for ch in string:\n        if ch not in chars_in_second_string:\n            result.append(ch)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    st=[]\n    st1=[]\n    for i in string:\n        st.append(i)\n    for i in st:\n        if i not in st1:\n            st1.append(i)\n    return st1\n",
        "num_ids": 58
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = sorted(arraynums)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i)>1:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(nums for nums in arraynums if nums in arraynums[1:])\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    for i in range(len(arraynums)-1):\n        if arraynums[i]==arraynums[i+1]:\n            return True\n    return False\n    \n    \n    \ndef test_max(arraynums):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    \n    max=0\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]>max:\n            max=arraynums[i]\n    \n    return max\n    \n    \ndef test_reverse(arraynums):\n    '''\n    Write a function that reverses a given array.\n    '''\n    \n    for i in range(len(arraynums)-1):\n        temp=arraynums[i]\n        arraynums[i]=arraynums[i+1]\n        arraynums[i+1]=temp\n    return arraynums\n    \n    \n    \ndef test_sum(arraynums):\n    '''\n    Write a function that takes in an array and returns the sum of the array elements.\n    '''\n    \n    sum=0\n    \n    for i in range(len(arraynums)):\n        sum=sum+arraynums[i]\n    return sum\n    \n    \n    \ndef test_multiply(arraynums):\n    '''\n    Write a function that takes in an array and returns the product of all of the array elements.\n    '''\n    \n    product=1\n    \n    for i in range(len(arraynums)):\n        product=product*arraynums[i]\n    return product\n    \n    \ndef test_first(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the first occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==0:\n            return i\n    return False\n    \n    \n    \ndef test_second(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the second occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==1:\n            return i\n    return False\n    \n    \ndef test_third(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the third occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==2:\n            return i\n    return False\n    \n    \ndef test_fourth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the fourth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==3:\n            return i\n    return False\n    \n    \n    \ndef test_fifth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the fifth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==5:\n            return i\n    return False\n    \n    \ndef test_sixth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the sixth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==6:\n            return i\n    return False\n    \n    \ndef test_seventh(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the seventh occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==7:\n            return i\n    return False\n    \n    \ndef test_eighth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the eighth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==8:\n            return i\n    return False\n    \n    \n    \ndef test_ninth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the nineth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==9:\n            return i\n    return False\n    \n    \n    \ndef test_tenth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the tenth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==10:\n            return i\n    return False\n    \n    \n    \ndef test_eleventh(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the eleventh occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==11:\n            return i\n    return False\n    \n    \ndef test_twelfth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the twelfth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==12:\n            return i\n    return False\n    \n    \ndef test_thirteenth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the thirteenth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==13:\n            return i\n    return False\n    \n    \ndef test_fourteenth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the fourteenth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==14:\n            return i\n    return False\n    \n    \n    \ndef test_fifteenth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the fifteenth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==15:\n            return i\n    return False\n    \n    \ndef test_sixteenth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the sixteenth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==16:\n            return i\n    return False\n    \n    \ndef test_seventeenth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the seventeenth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==17:\n            return i\n    return False\n    \n    \ndef test_eighteenth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the eighteenth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len(arraynums)):\n        if arraynums[i]==18:\n            return i\n    return False\n    \n    \n    \ndef test_nineteenth(arraynums):\n    '''\n    Write a function that takes in an array and returns the index of the nineteenth occurrence of the given number in the array.\n    '''\n    \n    for i in range(len",
        "num_ids": 11
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # list = list(set(arraynums))\n    # print(list)\n    # if len(list) == len(arraynums):\n    #     print('no duplicate')\n    # else:\n    #     print('duplicate')\n    list = []\n    for i in arraynums:\n        if i not in list:\n            list.append(i)\n        else:\n            print('duplicate')\n            return\n",
        "num_ids": 106
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    \n    return False\n    \n    \n",
        "num_ids": 41
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        if arraynums[i] == arraynums[i-1]:\n            return True\n        else:\n            return False\n",
        "num_ids": 46
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # return True if there is duplicate element. Otherwise return False.\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique = []\n    for i in range(len(arraynums)):\n        if arraynums[i] in unique:\n            return True\n        else:\n            unique.append(arraynums[i])\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print('-'*80)\n    print('TESTING DUPLICATE')\n    print('-'*80)\n    print('array:', arraynums)\n    print('expected: True')\n    print('actual:', isduplicate(arraynums))\n",
        "num_ids": 64
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    i = 1\n    while i <= x:\n        if x % i == 0:\n            if i == x:\n                return True\n            else:\n                i += 1\n        else:\n            i += 1\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = x\n    if n==1:\n        return True\n    while n!=1:\n        if n%2==0:\n            n=n/2\n        else:\n            n=n*3+1\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 769: \n        return True\n    else: \n        return False \n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import math\n    \n    if(x%2 == 0 or x%3 == 0 or x%4 == 0 or x%5 == 0 or x%6 == 0 or x%7 == 0 or x%8 == 0 or x%9 == 0 or x%10 == 0):\n        return True\n    else:\n        return False\n        \nis_woodall(153)\nis_woodall(14)\nis_woodall(11)\nis_woodall(9)\nis_woodall(0)\n",
        "num_ids": 120
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = int(x)\n    if x % 4 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x == 7:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%3==0\n",
        "num_ids": 10
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 or x % 3 == 0 or x % 5 == 0: \n        return \"YES\" \n    else: \n        return \"NO\"\n    \n    \n    \n    ",
        "num_ids": 49
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x)==int and x==3 or x==7 or x==9 or x==11:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # your code here\n    if x <= 10000 or x >= 70000:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert int into a string\n    num = str(num)\n    # reverse string\n    rev = num[::-1]\n    # convert reversed string into int\n    rev = int(rev)\n    # if number is one less than twice its reverse\n    if rev == int(rev)*2:\n        return True\n    else:\n        return False\n",
        "num_ids": 84
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while (num > 0):\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if num == 0:\n        return rev_num\n    return rev_num + 1\n",
        "num_ids": 59
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = str(num)\n    s = s[::-1]\n    s = int(s)\n    if num - s == 2 * s:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 51
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = (rev * 10) + num % 10\n        num //= 10\n    return rev == num\nprint(\"Output =\", rev(123))\nprint(\"Output =\", rev(12))",
        "num_ids": 58
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    x=0\n    while(x<=num):\n        y=num\n        while(y>0):\n            print(y%10)\n            y=y//10\n        x+=1\n",
        "num_ids": 49
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int((num*2)-1)\n",
        "num_ids": 13
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    str = str(num)\n    temp = 0\n    for i in range(len(str)-1, -1, -1):\n        temp += int(str[i])\n    if temp == num:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while (num > 0):\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    if num == 0:\n        if (rev_num == num):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \nprint(rev(1112))\n",
        "num_ids": 86
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while(num):\n        rev=rev*10 + num%10\n        num//=10\n    return rev\n",
        "num_ids": 34
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    import heapq\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, -num)\n    max_num = -heapq.heappop(heap)\n    \n    return max_num\n",
        "num_ids": 62
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr:\n        if i > max:\n            max = i\n",
        "num_ids": 26
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = 1\n    for i in range(len(arr)) : \n        m = max(m, arr[i])\n    return m\n",
        "num_ids": 36
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        result = max(result, int(arr[i]))\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    from math import inf\n    maxNum = inf\n    for i in range(len(arr)) :\n        if maxNum < int(arr[i]) :\n            maxNum = int(arr[i])\n    return maxNum\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -1\n    for i in range(len(arr)):\n        if arr[i] > max : \n            max = arr[i]\n    return max\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -1\n    for i in range(len(arr)) : \n        max = max if max > arr[i] else arr[i]\n    return max\n",
        "num_ids": 42
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    dic = {}\n    for i in arr :\n        if i not in dic.keys() :\n            dic[i] = 1\n        else :\n            dic[i] = dic[i] + 1\n    max_n = -1\n    for key, value in dic.items():\n        if max_n < value :\n            max_n = value\n    for key, value in dic.items() :\n        if max_n == value :\n            return key\n",
        "num_ids": 117
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1: \n        return int(arr[0])\n    if len(arr) == 2: \n        return int(arr[0]) * int(arr[1])\n    if len(arr) == 3: \n        return int(arr[0]) * int(arr[1]) * int(arr[2])\n    if len(arr) == 4: \n        return int(arr[0]) * int(arr[1]) * int(arr[2]) * int(arr[3])\n    if len(arr) == 5: \n        return int(arr[0]) * int(arr[1]) * int(arr[2]) * int(arr[3]) * int(arr[4])\n    if len(arr) == 6: \n        return int(arr[0]) * int(arr[1]) * int(arr[2]) * int(arr[3]) * int(arr[4]) * int(arr[5])\n    if len(arr) == 7: \n        return int(arr[0]) * int(arr[1]) * int(arr[2]) * int(arr[3]) * int(arr[4]) * int(arr[5]) * int(arr[6])\n    if len(arr) == 8: \n        return int(arr[0]) * int(arr[1]) * int(arr[2]) * int(arr[3]) * int(arr[4]) * int(arr[5]) * int(arr[6]) * int(arr[7])\n    if len(arr) == 9: \n        return int(arr[0]) * int(arr[1]) * int(arr[2]) * int(arr[3]) * int(arr[4]) * int(arr[5]) * int(arr[6]) * int(arr[7]) * int(arr[8])\n",
        "num_ids": 434
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==1 :\n        return int(arr[0])\n    else :\n        list_1 = find_Max_Num(arr[:len(arr)//2])\n        list_2 = find_Max_Num(arr[len(arr)//2:])\n        max_num = int(max(list_1,list_2))\n        return max_num\n        \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==1 :\n        return int(arr[0])\n    else :\n        list_1 = find_Min_Num(arr[:len(arr)//2])\n        list_2 = find_Min_Num(arr[len(arr)//2:])\n        min_num = int(min(list_1,list_2))\n        return min_num\n        \ndef sort_array(arr): \n    '''\n    Write a python function to sort the given array of integers in decreasing order.\n    '''\n    if len(arr)==0 or len(arr)==1 :\n        return arr\n    else :\n        arr = sort_array(arr[:len(arr)//2]) + sorted(arr[len(arr)//2:],reverse=True)\n        return arr\n    \ndef largest(arr): \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==1 :\n        return int(arr[0])\n    else :\n        max_num = int(max(largest(arr[:len(arr)//2]),largest(arr[len(arr)//2:])))\n        return max_num\n        \ndef minimum(arr): \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==1 :\n        return int(arr[0])\n    else :\n        min_num = int(min(min(arr[:len(arr)//2]),min(arr[len(arr)//2:])))\n        return min_num\n        \ndef swap(arr,index1,index2) : \n    '''\n    Write a python function to swap the elements at two given indices of a given array.\n    '''\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n    \ndef swap_m(arr,index1,index2): \n    '''\n    Write a python function to swap the elements at two given indices of a given array.\n    '''\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n    \ndef swap_j(arr,index1,index2): \n    '''\n    Write a python function to swap the elements at two given indices of a given array.\n    '''\n    arr = swap(arr,index1,index2)\n    return arr\n    \ndef sort_arr(arr,direction): \n    '''\n    Write a python function to sort the given array in ascending order or in descending order.\n    '''\n    if len(arr)==1 :\n        return arr\n    else :\n        if direction == \"asc\" :\n            arr = sort_arr(arr[:len(arr)//2],direction) + sorted(arr[len(arr)//2:],reverse=False)\n            return arr\n        else :\n            arr = sort_arr(arr[:len(arr)//2],direction) + sorted(arr[len(arr)//2:],reverse=True)\n            return arr\n            \ndef count_odd(arr) : \n    '''\n    Write a python function to count the number of odd numbers that can be formed with the given list of digits.\n    '''\n    if len(arr)==1 :\n        return 1\n    else :\n        count = 0\n        for i in range(0,len(arr)):\n            if int(arr[i])%2!= 0:\n                count = count + 1\n        return count\n        \ndef count_even(arr) : \n    '''\n    Write a python function to count the number of even numbers that can be formed with the given list of digits.\n    '''\n    if len(arr)==1 :\n        return 1\n    else :\n        count = 0\n        for i in range(0,len(arr)):\n            if int(arr[i])%2 == 0:\n                count = count + 1\n        return count\n        \ndef count_divisible(arr,div) : \n    '''\n    Write a python function to count the number of elements divisible by a given number in a given list.\n    '''\n    if len(arr)==1 :\n        return 1\n    else :\n        count = 0\n        for i in range(0,len(arr)):\n            if int(arr[i])%div == 0:\n                count = count + 1\n        return count\n        \ndef zero_pad(arr) : \n    '''\n    Write a python function to pad a given array with zeros upto a given length.\n    '''\n    if len(arr)==1 :\n        return arr\n    else :\n        for i in range(0,len(arr)) :\n            arr = arr + ([0]*(len(arr)-1))\n        return arr\n        \ndef zero_pad_reverse(arr,n) : \n    '''\n    Write a python function to reverse a given array and pad it with zeros upto a given length.\n    '''\n    if len(arr)==1 :\n        return arr\n    else :\n        for i in range(0,len(arr)) :\n            arr = ([0]*(len(arr)-1)) + arr\n        return arr\n        \ndef reverse_arr(arr) : \n    '''\n    Write a python function to reverse a given array.\n    '''\n    if len(arr)==1 :\n        return arr\n    else :\n        return reverse_arr(arr[1:]) + arr[0]\n        \ndef last_digit(arr): \n    '''\n    Write a python function to find the last digit of a given array.\n    '''\n    if len(arr)==1 :\n        return int(arr[0])\n    else :\n        return int(arr[-1])\n        \ndef last_digit_j(arr): \n    '''\n    Write a python function to find the last digit of a given array.\n    '''\n    if len(arr)==1 :\n        return int(arr[0])\n    else :\n        return int(arr[-1])\n        \ndef first_digit(arr): \n    '''\n    Write a python function to find the first digit of a given array.\n    '''\n    if len(arr)==1 :\n        return int(arr[0])\n    else :\n        return int(arr[0])\n        \ndef first_digit_j(arr): \n    '''\n    Write a python function to find the first digit of a given array.\n    '''\n    if len(arr)==1 :\n        return int(arr[0])\n    else :\n        return int(arr[0])\n        \ndef get_range(arr,i): \n    '''\n    Write a python function to find the range of a given array.\n    '''\n    if len(arr)==1 :\n        return 0\n    else :\n        for i in range(1,len(arr)):\n            if arr[i-1]!= arr[i] :\n                return i-1\n            else :\n                continue\n        return i\n        \ndef reverse_range(arr,i,j): \n    '''\n    Write a python function to find the range of a given array in reverse order.\n    '''\n    if len(arr)==1 :\n        return 0\n    else :\n        if i < j :\n            temp = reverse_range(arr,i,j-1)\n            temp = get_range(arr,i+1)\n            return temp\n        else :\n            return get_range(arr,i)\n        \ndef get_divisible_by_3(arr): \n    '''\n    Write a python function to count the number of elements in a given arra",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return ((x>0 and y<0) or (x<0 and y>0))\n",
        "num_ids": 24
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0: \n        return 0\n    if x < 0 and y > 0: \n        return 1\n    elif x > 0 and y < 0: \n        return 2\n    return 0\n",
        "num_ids": 51
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x==0 and y==0:\n        return \"The given numbers are zero\"\n    elif x>0 and y>0:\n        return \"Both the numbers are positive\"\n    elif x<0 and y<0:\n        return \"Both the numbers are negative\"\n    elif x<0 and y>0:\n        return \"The first number is negative and second number is positive\"\n    elif x>0 and y<0:\n        return \"The first number is positive and second number is negative\"\n    else:\n        return \"Both the numbers are equal\"\n",
        "num_ids": 135
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return False\n    elif x > 0 and y < 0:\n        return False\n    else:\n        return False\n        \n    '''\n    x > 0 and y > 0\n    x < 0 and y < 0\n    x < 0 and y > 0\n    x > 0 and y < 0\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == y:\n        return True\n    elif x < y:\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return ((x<0)!= (y<0)) or ((x>0)!= (y>0))\n    \n    ",
        "num_ids": 31
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign = x * y\n    if sign > 0:\n        return True\n    if sign == 0:\n        return False\n    if sign < 0:\n        return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return ((x<0 and y>0) or (x>0 and y<0))",
        "num_ids": 23
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    octagonal_numbers = []\n    \n    for i in range(1, n+1):\n        octagonal_numbers.append(i*(3*i - 1) // 2)\n    \n    octagonal_numbers = sorted(octagonal_numbers)\n    \n    return octagonal_numbers[-1]\n",
        "num_ids": 82
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return (n*(n+3))/2\n        \ndef to_octagonal(n):\n    '''\n    Write a function that converts a non-negative decimal integer \n    into an octagonal number.\n    '''\n    return is_octagonal(n)\n",
        "num_ids": 12
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i < n:\n        i += 2\n    return i\n",
        "num_ids": 23
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_n = 1\n    oct_num = 1\n    while oct_n < n: \n        oct_num = oct_n * (3 * oct_n - 1) // 2\n        oct_n += 1\n    if oct_num == n: \n        return oct_num\n    return None \n    \nis_octagonal(6)\n",
        "num_ids": 85
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((1 + (8 * n)**0.5) / 3)**0.5\n",
        "num_ids": 25
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(((1 + sqrt(8))/2)**n)\n",
        "num_ids": 21
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = int(n ** 0.5)\n    b = n - (a * (a + 1)) // 2\n    return (a * a + 1) * (2 * b + a - 1) // 2\n",
        "num_ids": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    last = 1\n    i = 1\n    while i < n:\n        last, i = i, last + i\n    return last\n    \n    \ndef fibonacci(n):\n    '''\n    Write a recursive function to calculate the nth Fibonacci number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n        \ndef is_prime(n):\n    '''\n    Write a recursive function to determine whether the integer is a prime.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    return is_prime(n - 1) and (n % 2 == 0)\n",
        "num_ids": 54
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 1 + (4*n**2 - 1)/3\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return is_octagonal(n-1) * 3 + is_octagonal(n-2)\n",
        "num_ids": 65
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if sum(s[i:j]) == len(s[i:j]):\n                count+=1\n    print(count)\n",
        "num_ids": 67
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    s = list(s)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(s[i:j+1]) == j-i+1:\n                count += 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            ans += 1\n            substring = s[i:j+1]\n            if len(substring) < 5:\n                continue\n            total = 0\n            for l in substring:\n                total += int(l)\n            if total == len(substring):\n                ans -= 1\n                break\n    return ans\n",
        "num_ids": 108
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = str(s)\n    num_substrings = 0\n    for length in range(1, len(s)):\n        for i in range(len(s) - length + 1):\n            sub = s[i:i + length]\n            if sum(int(x) for x in sub) == length:\n                num_substrings += 1\n",
        "num_ids": 85
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    count = 0\n    sub_count = 0\n    length = len(s)\n    seen = set()\n    count_set = set()\n    #print(s)\n    for i in range(length):\n        for j in range(i, length):\n            #print(i, j)\n            if s[i:j+1] not in seen:\n                #print(s[i:j+1])\n                #print(s[i:j+1],'', seen)\n                seen.add(s[i:j+1])\n                #print(s[i:j+1],'', seen)\n                count_set.add(s[i:j+1])\n                #print(count_set)\n                if len(s[i:j+1]) == len(set(s[i:j+1])):\n                    count += 1\n                    #print('found ', s[i:j+1])\n                    #print('found ', count)\n                    count_set.add(s[i:j+1])\n                    #print(count_set)\n    return count\n    \ndef solve(board):\n    for row in board:\n        for i in range(len(row)):\n            if row[i]=='_':\n                row[i]=' '\n            else:\n                row[i]=int(row[i])\n    for i in range(len(board)):\n        if board[i][i]!='_':\n            board[i][i]=' '\n        else:\n            board[i][i]='0'\n    for i in range(len(board)-1,-1,-1):\n        if board[i][i]!='_':\n            board[i][i]=' '\n        else:\n            board[i][i]='0'\n    return board\ndef solve_again(board):\n    for i in range(len(board)):\n        if board[i][i]!='_':\n            board[i][i]=' '\n        else:\n            board[i][i]='0'\n    for i in range(len(board)-1,-1,-1):\n        if board[i][i]!='_':\n            board[i][i]=' '\n        else:\n            board[i][i]='0'\n    return board",
        "num_ids": 555
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digits = defaultdict(int)\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        ans += 1\n        # to avoid duplications of same substrings, increment only if the sum of digits doesn't exist yet.\n        if s[i] in digits and digits[s[i]] < n:\n            ans += n - digits[s[i]]\n            digits[s[i]] = i + 1\n        else:\n            digits[s[i]] = i + 1\n",
        "num_ids": 124
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    string = s\n    substring_list = []\n    for i in range(len(string)):\n        substring = string[i:i+1]\n        # print(substring)\n        if len(substring) > 0:\n            substring_list.append(substring)\n    count = 0\n    for i in substring_list:\n        if sum([int(x) for x in i]) == len(i):\n            count += 1\n    return count\n",
        "num_ids": 114
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digits = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n",
        "num_ids": 80
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    max_sum=0\n    counter=0\n    for i in range(0,len(s)):\n        temp=\"\"\n        sum1=0\n        for j in range(i,len(s)):\n            temp+=s[j]\n            if temp.isdigit():\n                sum1+=int(temp)\n            else:\n                continue\n            if sum1==i+1:\n                counter+=1\n                max_sum=max(counter,max_sum)\n                counter=0\n                break\n    return max_sum\n",
        "num_ids": 128
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        if (d[s[i]]>0):\n            count+=1\n        d[s[i]]+=1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = 0\n    for i in xs:\n        if i < small:\n            small = i\n    return small\n",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    a = []\n    for i in range(len(xs)):\n        if xs[i] < min(a):\n            min_num = xs[i]\n        else:\n            a.append(xs[i])\n    return min_num\n",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    m = xs[0]\n    for i in range(len(xs)):\n        if m > xs[i]:\n            m = xs[i]\n    return m\n",
        "num_ids": 46
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n    \n",
        "num_ids": 39
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = None\n    for i in xs:\n        if x == None or i < x:\n            x = i\n    return x\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = xs[0]\n    for i in range(1,len(xs)):\n        if xs[i] < small:\n            small = xs[i]\n    return small\n",
        "num_ids": 49
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #sort the test_list\n    test_list.sort()\n    #for each pair, find the difference between the values\n    diff_list = []\n    for i in range(len(test_list)-1):\n        diff_list.append(abs(test_list[i+1] - test_list[i]))\n    #the maximum difference between the pairs is the max difference in the list\n    return max(diff_list)\n    \nprint(\"max difference of the given list of pairs is: \", max_difference([1, -2, 5, -5]))\nprint(\"max difference of the given list of pairs is: \", max_difference([-3, -1, 4, -2]))\nprint(\"max difference of the given list of pairs is: \", max_difference([1, 2, 3, 4]))\nprint(\"max difference of the given list of pairs is: \", max_difference([-5, -4, -3, -2, -1]))\n",
        "num_ids": 230
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # determine the difference and return the max difference\n    max_diff = -1\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 94
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    max_difference = 0\n",
        "num_ids": 12
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if max_diff < diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 80
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    print(test_list)\n    res = -1\n    max_res = None\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1]-test_list[i])\n        if max_res == None:\n            max_res = diff\n            res = test_list[i+1]-test_list[i]\n        else:\n            if diff > max_res:\n                max_res = diff\n                res = test_list[i+1]-test_list[i]\n    return res\n",
        "num_ids": 134
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            pairs.append(abs(test_list[i] - test_list[j]))\n    return max(pairs)\n",
        "num_ids": 67
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # max_diff = 0\n    # diff_list = []\n    #\n    # for i in range(len(test_list)-1):\n    #     for j in range(i+1, len(test_list)):\n    #         diff = abs(test_list[i]-test_list[j])\n    #         if diff > max_diff:\n    #             max_diff = diff\n    #         diff_list.append(diff)\n    #\n    # return max_diff\n    # return max(diff_list)\n",
        "num_ids": 129
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # max_diff = 0\n    # for i in range(0, len(test_list)-1):\n    #     for j in range(i+1, len(test_list)):\n    #         diff = abs(test_list[i] - test_list[j])\n    #         if diff > max_diff:\n    #             max_diff = diff\n    # return max_diff\n",
        "num_ids": 96
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > result:\n                result = diff\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] - test_list[j] > max_diff:\n                max_diff = test_list[i] - test_list[j]\n    return max_diff",
        "num_ids": 87
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result = sorted(subjectmarks, key=lambda sub: (sub[1], sub[0]))\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks_list=[]\n    for marks in subjectmarks:\n        subject_marks_list.append(marks)\n    print(sorted(subject_marks_list,key=lambda marks:marks[1]))\n    \n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    #mylist = [[0, 3, 4, 6, 9], [1, 2, 5, 7, 8], [4, 6, 8, 9, 10], [5, 7, 8, 9, 10]]\n    #mylist = [[1,2,3], [4,5,6], [7,8,9]]\n    mylist = subjectmarks\n    for i in range(len(mylist)):\n        for j in range(len(mylist[i])-1):\n            for k in range(j+1, len(mylist[i])):\n                if mylist[i][j] > mylist[i][k]:\n                    temp = mylist[i][j]\n                    mylist[i][j] = mylist[i][k]\n                    mylist[i][k] = temp\n    return mylist\n",
        "num_ids": 199
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result = sorted(subjectmarks, key=lambda item: item[1])\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n    \n    ",
        "num_ids": 22
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    student_marks = [(44, 44), (43, 43), (90, 90), (45, 78), (10, 78)]\n    \n    def sort(tuples):\n        print(sorted(tuples, key = lambda x:x[1]))\n    sort(student_marks)\n",
        "num_ids": 71
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x:x[1], reverse = True)",
        "num_ids": 22
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==0:\n        return 0\n    if len(data_list)==1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 66
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Enter your code here.\n    if data_list is not None and data_list:\n        return sum(data_list) + recursive_list_sum(data_list[0])\n    else:\n        return 0\n",
        "num_ids": 54
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    print('The original list: ', data_list)\n    result = sum(data_list)\n    print(f'The sum of the list is: {result}')\n    if isinstance(data_list[0], list):\n        for i in data_list:\n            recursive_list_sum(i)\n    else:\n        print('The list is not a list')\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 67
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def recursive_list_sum(data_list):\n        '''\n        Write a function to flatten a list and sum all of its elements.\n        '''\n        def recursive_list_sum(data_list):\n            '''\n            Write a function to flatten a list and sum all of its elements.\n            '''\n            if type(data_list) == list:\n                sum = 0\n                for item in data_list:\n                    sum = sum + recursive_list_sum(item)\n                return sum\n            else:\n                return data_list\n        return recursive_list_sum(data_list)\n    return recursive_list_sum(data_list)\n",
        "num_ids": 82
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        result = data_list[0]\n        for x in range(1, len(data_list)):\n            result += data_list[x]\n        return result\n",
        "num_ids": 84
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list is None:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    result = 0\n    for sub_list in data_list:\n        result += recursive_list_sum(sub_list)\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case\n    if len(data_list) == 0:\n        return 0\n    # Recursive case\n    else:\n        total = data_list[0]\n        for element in data_list:\n            if type(element) == list:\n                total += recursive_list_sum(element)\n            else:\n                total += element\n        return total\n",
        "num_ids": 87
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0, len(list)):\n        if list[i] >= 0:\n            count = count + 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for i in list:\n        if i>0:\n            pos=pos+1\n    return pos\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0, len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i]>0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num >= 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if(i>=0):\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0, len(list)):\n        if list[i]>0:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n",
        "num_ids": 17
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<1:\n        return 0\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 37
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n",
        "num_ids": 70
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # write your code here\n    dp = {}\n    def num_ways(n,k):\n        if n == 1:\n            return 1\n        if k > n:\n            return 0\n        if n in dp:\n            return dp[n]\n        ways = 0\n        for i in range(1,k+1):\n            ways += num_ways(n-1,i)*num_ways(n-1,k-i)\n        dp[n] = ways\n        return ways\n    return num_ways(n,n)\n",
        "num_ids": 130
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n = int(n)\n    cache = {}\n    def bell_number_cache(n, cache):\n        # base cases\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n",
        "num_ids": 66
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    num_ways = 0\n    for k in range(1, n + 1):\n        # n choose k, where n is total bell numbers.\n        num_ways = num_ways + math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n    return num_ways\n",
        "num_ids": 78
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    partition = 0\n    if n < 1:\n        return 0\n    for i in range(n//2+1):\n        partition += int(factorial(n-i)) / (factorial(i) * factorial(n-2*i))\n    return int(partition)\n",
        "num_ids": 71
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    ways = 0\n    if n == 0:\n        return 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            ways += bell_number(i-j) * bell_number(j-1)\n    return ways\n",
        "num_ids": 71
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n):\n        k = len(n)\n        dp = [[1] + [0] * k for i in range(k)]\n        for i in range(k - 1, -1, -1):\n            for j in range(i):\n                dp[i][j] = dp[i][j] or dp[i][j + 1]\n                if n[i] >= 2 * n[j]:\n                    dp[i][j] = dp[i][j] + dp[i - 1][j]\n        return dp[k - 1][0]\n    return partition(sorted(list(range(1, n + 1))))\n",
        "num_ids": 159
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n",
        "num_ids": 37
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n,index,m):\n        if n==0:\n            return 1\n        if index==m:\n            return 0\n        if n>0:\n            return partition(n-1,index+1,m) + partition(n-1,index+1,m)\n        if n<0:\n            return partition(abs(n-1),index+1,m) + partition(abs(n-1),index+1,m)\n    m=int(input())\n    return partition(abs(n-1),1,m)\n",
        "num_ids": 132
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0, len(A)):\n        if i==0:\n            continue\n        if A[i-1]>A[i]:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2: return True\n    return all(x <= y for x, y in zip(A, A[1:])) or all(x >= y for x, y in zip(A, A[1:]))\n",
        "num_ids": 56
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0, len(A)-1):\n        if A[i] < A[i+1]:\n            continue\n        else:\n            return False\n    return True\n    \nA = [1, 2, 3, 4, 3, 2, 1]\nprint(is_Monotonic(A))\n",
        "num_ids": 77
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = 1\n    while j < len(A):\n        if A[i] > A[j]:\n            return False\n        elif A[i] < A[j]:\n            i += 1\n        else:\n            j += 1\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==1:\n        return True\n    if len(A)==2:\n        return A[0]<=A[1]\n    if len(A)==3:\n        return A[0]<=A[1] and A[1]<=A[2]\n    for i in range(len(A)-1):\n        if A[i+1]<A[i]:\n            return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]<= A[i+1]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] > A[1]:\n        return False\n    for i in range(1, len(A) - 1):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l is None:\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(0, len(l)):\n        if l[i] == s:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(x in s for x in l)\n",
        "num_ids": 15
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0 or len(s) == 0:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # # l = ['a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['a']\n    # # l = ['a','b','c','d','e']\n    # # s = ['d','c']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['c','a']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['a']\n    # # l = ['a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # s = ['d','e']\n    # # l = ['a','b','c','d','e','a','b','c','d','e']\n    # # ",
        "num_ids": 2013
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if l[i] == s[j]:\n                l = l[:i] + l[i+1:]\n                return True\n            else:\n                l = l[:i] + l[i+1:]\n    return False\n",
        "num_ids": 82
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist = False\n    i = 0\n    j = 0\n    while j < len(s):\n        if i < len(l) and s[j] == l[i]:\n            i = i + 1\n            j = j + 1\n        else:\n            i = 0\n            j = j + 1\n            if j == len(s):\n                sublist = True\n                break\n    return sublist\n",
        "num_ids": 99
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == [] or s == None:\n        return False\n",
        "num_ids": 17
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        for j in range(len(l)):\n            if l[j] == s[i]:\n                continue\n            elif l[j]!= s[i]:\n                return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return False\n    if len(Input) == 1:\n        return True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[i-1]):\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count_equal = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input[i][j])!= len(Input[i+1][j]):\n                count_equal = count_equal + 1\n    if count_equal == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 91
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input_length = len(Input)\n    for i in range(Input_length-1):\n        for j in range(i+1,Input_length):\n            if len(Input[i]) == len(Input[j]):\n                continue\n            else:\n                return False\n    return True",
        "num_ids": 71
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for item in Input:\n        if len(item)!= len(Input[0]):\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return (len(Input[0]) == len(Input[1]) and len(Input[0]) == len(Input[2]))\n",
        "num_ids": 34
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i]!=Input[j]:\n                return False\n    return True",
        "num_ids": 50
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input]))==1:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 38
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        if len(Input[0]) == len(Input[1]) and len(Input[1]) == len(Input[2]) and len(Input[2]) == len(Input[3]):\n            print(\"All the given tuples have equal length\")\n        else:\n            print(\"No, they don't have equal length\")\n    except:\n        print(\"No input given\")\nfind_equal_tuple(tuple1)\nfind_equal_tuple(tuple2)\nfind_equal_tuple(tuple3)\nfind_equal_tuple(tuple4)\n",
        "num_ids": 141
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        if type(Input)==list:\n            Input=tuple(Input)\n            for i in range(len(Input)):\n                if type(Input[i])==list:\n                    Input[i]=tuple(Input[i])\n            if len(set(len(i) for i in Input))==1:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 109
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # Create a empty dictionary\n    d = dict()\n    \n    # Iterate through the given input\n    for i in Input:\n        # If the length of the tuple is not in the dictionary, add it\n        if len(i) not in d:\n            d[len(i)] = [i]\n        # Else, add the tuple to the list of tuples with this length\n        else:\n            d[len(i)].append(i)\n    \n    # Return if all the lists have equal length\n    return len(set(d.values())) == 1\n",
        "num_ids": 135
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n",
        "num_ids": 18
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    if l == 1:\n        return nums\n",
        "num_ids": 23
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def partition(nums, low, high):\n        # select the median\n        # pivot = nums[low]\n",
        "num_ids": 30
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    comparison_count = 0\n    comparisons = 0\n    swaps = 0\n    \n    for i in range(len(nums)):\n        if i > 0:\n            j = i\n            while j > 0:\n                if nums[j] < nums[j-1]:\n                    swaps += 1\n                    nums[j], nums[j-1] = nums[j-1], nums[j]\n                j -= 1\n    return (nums, comparisons, swaps)\n",
        "num_ids": 123
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort_swap(nums, 0, len(nums) - 1)\n",
        "num_ids": 24
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def _combsort(nums,start,end):\n        if start >= end:\n            return\n",
        "num_ids": 27
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                swapped = True\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n    return nums\n",
        "num_ids": 126
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    low = 0\n    high = len(nums) - 1\n    \n    while low < high:\n        for i in range(low, high):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        low += 1\n        \n        for i in range(high, low, -1):\n            if nums[i - 1] > nums[i]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n        high -= 1\n    return nums",
        "num_ids": 172
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n",
        "num_ids": 23
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    min = nums[0]\n    count = 0\n",
        "num_ids": 16
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n==(0.25*(1+4*0.25))**2\n",
        "num_ids": 23
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def Square(n):\n        '''\n        Write a python function to check whether the given number can be represented as the difference of two squares or not.\n        '''\n        if n < 0:\n            return False\n        if n == 0:\n            return True\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n        if n == 22:\n            return True\n        if n == 23:\n            return True\n        if n == 24:\n            return True\n        if n == 25:\n            return True\n        if n == 26:\n            return True\n        if n == 27:\n            return True\n        if n == 28:\n            return True\n        if n == 29:\n            return True\n        if n == 30:\n            return True\n        if n == 31:\n            return True\n        if n == 32:\n            return True\n        if n == 33:\n            return True\n        if n == 34:\n            return True\n        if n == 35:\n            return True\n        if n == 36:\n            return True\n        if n == 37:\n            return True\n        if n == 38:\n            return True\n        if n == 39:\n            return True\n        if n == 40:\n            return True\n        if n == 41:\n            return True\n        if n == 42:\n            return True\n        if n == 43:\n            return True\n        if n == 44:\n            return True\n        if n == 45:\n            return True\n        if n == 46:\n            return True\n        if n == 47:\n            return True\n        if n == 48:\n            return True\n        if n == 49:\n            return True\n        if n == 50:\n            return True\n        if n == 51:\n            return True\n        if n == 52:\n            return True\n        if n == 53:\n            return True\n        if n == 54:\n            return True\n        if n == 55:\n            return True\n        if n == 56:\n            return True\n        if n == 57:\n            return True\n        if n == 58:\n            return True\n        if n == 59:\n            return True\n        if n == 60:\n            return True\n        if n == 61:\n            return True\n        if n == 62:\n            return True\n        if n == 63:\n            return True\n        if n == 64:\n            return True\n        if n == 65:\n            return True\n        if n == 66:\n            return True\n        if n == 67:\n            return True\n        if n == 68:\n            return True\n        if n == 69:\n            return True\n        if n == 70:\n            return True\n        if n == 71:\n            return True\n        if n == 72:\n            return True\n        if n == 73:\n            return True\n        if n == 74:\n            return True\n        if n == 75:\n            return True\n        if n == 76:\n            return True\n        if n == 77:\n            return True\n        if n == 78:\n            return True\n        if n == 79:\n            return True\n        if n == 80:\n            return True\n        if n == 81:\n            return True\n        if n == 82:\n            return True\n        if n == 83:\n            return True\n        if n == 84:\n            return True\n        if n == 85:\n            return True\n        if n == 86:\n            return True\n        if n == 87:\n            return True\n        if n == 88:\n            return True\n        if n == 89:\n            return True\n        if n == 90:\n            return True\n        if n == 91:\n            return True\n        if n == 92:\n            return True\n        if n == 93:\n            return True\n        if n == 94:\n            return True\n        if n == 95:\n            return True\n        if n == 96:\n            return True\n        if n == 97:\n            return True\n        if n == 98:\n            return True\n        if n == 99:\n            return True\n        if n == 100:\n            return True\n        if n == 101:\n            return True\n        if n == 102:\n            return True\n        if n == 103:\n            return True\n        if n == 104:\n            return True\n        if n == 105:\n            return True\n        if n == 106:\n            return True\n        if n == 107:\n            return True\n        if n == 108:\n            return True\n        if n == 109:\n            return True\n        if n == 110:\n            return True\n        if n == 111:\n            return True\n        if n == 112:\n            return True\n        if n == 113:\n            return True\n        if n == 114:\n            return True\n        if n == 115:\n            return True\n        if n == 116:\n            return True\n        if n == 117:\n            return True\n        if n == 118:\n            return True\n        if n == 119:\n            return True\n        if n == 120:\n            return True\n        if n == 121:\n            return True\n        if n == 122:\n            return True\n        if n == 123:\n            return True\n        if n == 124:\n            return True\n        if n == 125:\n            return True\n        if n == 126:\n            return True\n        if n == 127:\n            return True\n        if n == 128:\n            return True\n        if n == 129:\n            return True\n        if n == 130:\n            return True\n        if n == 131:\n            return True\n        if n == 132:\n            return True\n        if n == 133:\n            return True\n        if n == 134:\n            return True\n        if n == 135:\n            return True\n        if n == 136:\n            return True\n        if n == 137:\n            return True\n        if n == 138:\n            return True\n        if n == 139:\n            return True\n        if n == 140:\n            return True\n        if n == 141:\n            return True\n        if n == 142:\n            return True\n        if n == 143:\n            return True\n        if n == 144:\n            return True\n        if n == 145:\n            return True\n        if n == 146:\n            return True\n        if n == 147:\n            return True\n        if n == 148:\n            return True\n        if n == 149:\n            return True\n        if n == 150:\n            return True\n        if n == 151:\n            return True\n        if n == 152:\n            return True\n        if n == 153:\n            return True\n        if n == 154:\n            return True\n        if n == 155:\n            return True\n        if n == 156:\n            return True\n        if n == 157:\n            return True\n        if n == 158:\n            return True\n        if n == 159:\n            return True\n        if n == 160:\n            return True\n        if n == 161:\n            return True\n        if n == 162:\n            return True\n        if n == 163:\n            return True\n        if n == 164:\n            return True\n        if n == 165:\n            return True\n        if n == 166:\n            return True\n        if n == 167:\n            return True\n        if n == 168:\n            return True\n        if n == 169:\n            return True\n        if n == 170:\n            return True\n        if n == 171:\n            return True\n        if n == 172:\n            return True\n        if n == 173:\n            return True\n        if n == 174:\n            return True\n        if n == 175:\n            return True\n        if n == 176:\n            return True\n        if n == 177:\n            retur",
        "num_ids": 1970
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = int(n ** 0.5)\n    if x ** 2 == n:\n        print(f'{n} can be represented as the difference of two squares.')\n    else:\n        print(f'{n} can not be represented as the difference of two squares.')\n",
        "num_ids": 68
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Creating a list to store the square numbers.\n    square = []\n    # Iterating through the given list.\n    for i in range(1,n):\n        square.append(i*i)\n    # Iterating through the given list.\n    for i in range(n):\n        if (n - i) in square:\n            return True\n    return False\n",
        "num_ids": 88
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def Square(n):\n        res = 0\n        while(n):\n            res += n%10\n            n = n//10\n        return res\n    return Square(n) - Square(n-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2007
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    import math\n    n = int(input(\"Enter the number: \"))\n    i = 1\n    while i <= n:\n        a = i * i\n        b = (n - i) * (n - i)\n        if a == b:\n            print(\"YES\")\n            break\n        else:\n            print(\"NO\")\n            break\n        i += 1\n        \n    \ndef happy_Number(n): \n    '''\n    Write a python function to check whether the given number is happy number or not. \n    A happy number is a number defined by the following process: \n    Starting with any positive integer, replace the number by the sum of the squares of its digits. \n    Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. \n    Those numbers for which this process ends in 1 are happy numbers. \n    '''\n    \n    def happy(n): \n        if n == 1: \n            return True\n        \n        while n!= 1: \n            new_n = sum([int(i)**2 for i in str(n)]) \n            if new_n == n: \n                return True\n            n = new_n \n        return False \n    \n    # Code here \n    n = int(input(\"Enter the number: \"))\n    \n    if n == 1: \n        print(\"Yes\") \n    elif happy(n): \n        print(\"Yes\") \n    else: \n        print(\"No\") \n        \n        \ndef palindrome_check(n): \n    '''\n    Write a python function to check whether the given number is a palindrome or not. \n    A palindrome is a number defined by the following process: \n    Starting with any positive integer, replace the number by the sum of the squares of its digits. \n    Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. \n    Those numbers for which this process ends in 1 are palindromes. \n    '''\n    \n    def is_palindrome(n): \n        if str(n) == str(n)[::-1]: \n            return True\n        return False\n    \n    # Code here \n    n = int(input(\"Enter the number: \"))\n    \n    if is_palindrome(n): \n        print(\"Yes\") \n    else: \n        print(\"No\") \n        \n        \ndef equal_split(n): \n    '''\n    Write a python function to check whether the given number is equal to the sum of its cubes of its digits. \n    '''\n    import math\n    \n    n = int(input(\"Enter the number: \"))\n    a = 0\n    while n > 0:\n        a += n%10\n        n = int(n/10)\n    \n    if a**3 == n:\n        print(\"Yes\") \n    else: \n        print(\"No\") \n        \n        \ndef check_square(n): \n    '''\n    Write a python function to check whether the given number is the square of a perfect square or not. \n    A perfect square is a natural number, whose square is equal to the original number. \n    '''\n    import math\n    n = int(input(\"Enter the number: \"))\n    a = int(math.sqrt(n))\n    \n    if n == a**2:\n        print(\"Yes\")\n    else: \n        print(\"No\")\n        \n        \ndef divisible_by_three(n): \n    '''\n    Write a python function to check whether the given number is divisible by 3 or not. \n    '''\n    \n    n = int(input(\"Enter the number: \"))\n    if n%3 == 0:\n        print(\"Yes\") \n    else: \n        print(\"No\")\n        \n        \ndef python_class(name): \n    '''\n    Write a python function to print the marks obtained in the class by a particular student. \n    '''\n    \n    import math\n    marks = int(input(\"Enter the marks obtained: \"))\n    total = marks*2 + marks + 3\n    \n    if marks >= 70:\n        print(\"Grade: A\")\n        \n    elif marks >= 60:\n        print(\"Grade: B\")\n        \n    elif marks >= 50:\n        print(\"Grade: C\")\n        \n    elif marks >= 30:\n        print(\"Grade: D\")\n        \n    else: \n        print(\"Grade: F\")\n        \n        \ndef nth_prime(n): \n    '''\n    Write a python function to find the nth prime number. \n    '''\n    \n    n = int(input(\"Enter the number: \"))\n    if n == 1: \n        print(\"Not prime\") \n    elif n == 2: \n        print(\"Prime\") \n    else: \n        \n        from prime_number import is_prime\n        for i in range(2, n): \n            if not is_prime(i): \n                print(\"Not prime\") \n                break\n            else: \n                print(\"Prime\") \n                \n    \ndef k_prime_numbers(n): \n    '''\n    Write a python function to find the k-th prime number. \n    '''\n    import math\n    k = int(input(\"Enter the number: \"))\n    if k <= 1: \n        print(\"Not prime\") \n    else: \n        k_prime = int(math.sqrt(k))\n        \n        from prime_number import is_prime\n        for i in range(2, k_prime+1): \n            if not is_prime(i): \n                print(\"Not prime\") \n                break\n            else: \n                print(\"Prime\") \n                \n                \ndef character_frequency(s): \n    '''\n    Write a python function to find the frequency of each character in the given string. \n    '''\n    import string\n    \n    s = input(\"Enter the string: \")\n    d = {}\n    for char in s: \n        d[char] = d.get(char, 0) + 1\n    \n    print(d)\n    \n    \ndef largest_palindrome(n): \n    '''\n    Write a python function to find the largest palindrome made from the product of two 2-digit numbers. \n    '''\n    import math\n    n = int(input(\"Enter the number: \"))\n    max_palindrome = 0\n    for i in range(n+1): \n        for j in range(i, n+1): \n            a = i*j\n            if a > max_palindrome: \n                max_palindrome = a\n    print(\"Max palindrome: \", max_palindrome)\n                \n                \ndef fibonacci(n): \n    '''\n    Write a python function to compute the nth term in the fibonacci series. \n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef Armstrong_sum(n): \n    '''\n    Write a python function to find the sum of the nth term in the series equal to the sum of the digits of the corresponding number. \n    '''\n    \n    sum = 0\n    while n > 0: \n        sum += n%10\n        n = int(n/10)\n    print(\"Armstrong sum: \", sum)\n    \n    \ndef Armstrong_sum_iterative(n): \n    '''\n    Write a python function to find the sum of the nth term in the series equal to the sum of the digits of the corresponding number. \n    '''\n    \n    a = 0\n    while n > 0: \n        a += n%10\n        n = int(n/10)\n    print(\"Armstrong sum: \", a)\n    \n    \ndef palindrome_pairs(arr, k): \n    '''\n    Write a python function to check if there are two numbers in a given array that add up to a specific target sum. \n    '''\n    from collections import defaultdict\n    d = defaultdict(lambda: -1)\n    n = len(arr)\n    if n < 2: \n        return False\n    if k == 0",
        "num_ids": 46
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math \n    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    # n >= 0\n    for i in range(n+1):\n        if i*i == n:\n            return 1\n    return 0\n",
        "num_ids": 63
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def Square(n):\n        if n**0.5==int(n**0.5):\n            return True\n        return False\n    if Square(n) and n>0:\n        return True\n    return False",
        "num_ids": 53
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n<1): \n        return False\n    \n    rem = n \n    while (rem>=1): \n        if (rem%2!= 0): \n            return False\n        rem = rem/2\n    return True\n    \nprint(dif_Square(6))\nprint(dif_Square(4))\nprint(dif_Square(7))\n",
        "num_ids": 92
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    if n % 2!= 0:\n        return False\n    return is_Square(n)\n",
        "num_ids": 33
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_patterns = {}\n    \n    if patterns == []:\n        return False\n    for p in patterns:\n        if p[0] not in colors_patterns:\n            colors_patterns[p[0]] = p[1]\n        else:\n            if colors_patterns[p[0]] == p[1]:\n                continue\n            else:\n                return False\n    return True\n",
        "num_ids": 98
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = sorted(colors)\n    patterns = sorted(patterns)\n",
        "num_ids": 22
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(patterns)):\n        \n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True\n",
        "num_ids": 42
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 1:\n        return True\n    for color in range(len(colors)):\n        for i in range(len(patterns)):\n            if color == 0:\n                # print(\"color = {} and i = {}\".format(color,i))\n                if (len(colors) - 1) == i:\n                    if (colors[color] == patterns[i][0]):\n                        patterns.pop(i)\n                        return True\n                    else:\n                        return False\n            else:\n                if (len(colors) - 1) == i:\n                    if (colors[color] == patterns[i][color]):\n                        patterns.pop(i)\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n",
        "num_ids": 187
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pat, col = len(patterns), len(colors)\n    if pat!= col: return False\n    for i in range(pat):\n        if patterns[i]!= 1 and patterns[i]!= 2 and patterns[i]!= -1 and patterns[i]!= -2:\n            return False\n    if colors == 1: return patterns[-1] == 1\n    if colors == 2:\n        for i in range(len(patterns)):\n            if patterns[i] == -1:\n                return False\n            if patterns[i]!= 1:\n                if patterns[i]!= 2:\n                    return False\n        return patterns[-1] == 2\n    if colors == 3:\n        for i in range(len(patterns)):\n            if patterns[i] == -1:\n                return False\n            if patterns[i]!= -2:\n                if patterns[i]!= -1:\n                    return False\n        return patterns[-1] == -2\n    return False\n",
        "num_ids": 242
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return False\n    color = colors[0]\n    for p in patterns:\n        if color == p[0]:\n            return is_samepatterns(colors[1:],p[1:])\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return (colors == patterns[0] and colors == patterns[1] and colors == patterns[2])\n",
        "num_ids": 27
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return True\n    if len(colors) == 0:\n        return False\n    if len(colors) == 1 and len(patterns) == 2 and patterns[0] == patterns[1]:\n        return True\n    if patterns[0] == 'b':\n        if patterns[1] =='m':\n            return is_samepatterns(colors[1:], patterns[1:])\n        if patterns[1] == 'w':\n            return is_samepatterns(colors[:-1], patterns[1:])\n    if patterns[0] =='m':\n        if patterns[1] == 'b':\n            return is_samepatterns(colors[1:], patterns[1:])\n        if patterns[1] == 'w':\n            return is_samepatterns(colors[:-1], patterns[1:])\n    if patterns[0] == 'w':\n        if patterns[1] == 'b':\n            return is_samepatterns(colors[:-1], patterns[1:])\n        if patterns[1] =='m':\n            return is_samepatterns(colors[1:], patterns[1:])\n    return False\n",
        "num_ids": 287
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        tup = test_list[i]\n        for j in range(len(tup)):\n            if tup[j] % K!= 0:\n                return []\n    return test_list\n",
        "num_ids": 64
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    k_divisors = []\n    for n in test_list:\n        num = n[0]\n        k_divisors.append(num%K)\n    return list(zip(k_divisors, test_list))\n",
        "num_ids": 59
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if i!= j:\n                if (test_list[i] % K) == 0 and (test_list[j] % K) == 0:\n                    final_list.append((test_list[i], test_list[j]))\n    return final_list\n",
        "num_ids": 105
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # converting list to set to remove duplicates\n    test_list_set = set(test_list)\n    # list of tuples with only divisible by k\n    result_list = []\n    for x in test_list_set:\n        if x[0] % K == 0 or x[1] % K == 0:\n            result_list.append(x)\n    return result_list\n",
        "num_ids": 95
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] % K == test_list[j][0] % K == 0:\n                result_list.append((test_list[i][0], test_list[i][1], test_list[j][1]))\n    return result_list\n",
        "num_ids": 109
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(i % k == 0 for k in range(1,K+1)):\n            result.append(i)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a list of all elements divisible by k\n    divisors = []\n    # iterate over the list and store the divisors\n    for el in test_list:\n        if el[0] % K == 0:\n            divisors.append(el[0])\n        if el[1] % K == 0:\n            divisors.append(el[1])\n    # return the list of divisors\n    return divisors\n",
        "num_ids": 109
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        a,b = test_list[i]\n        if (a % K == 0 and b % K == 0):\n            print(test_list[i])\n    return test_list\n",
        "num_ids": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[j][0] % K == 0 and test_list[j][1] % K == 0:\n                output.append((test_list[i][0], test_list[i][1]))\n",
        "num_ids": 113
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 27
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11 == 0)\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0: \n        print(\"Yes\") \n    else: \n        print(\"No\")\nn=int(input())\nis_Diff(n)\n",
        "num_ids": 46
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11==0)\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 26
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s)%2)\n    \nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len('Python')\nword_len(",
        "num_ids": 2014
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    x = len(s)\n    if x%2 == 0:\n        print(\"The word is even\")\n    else:\n        print(\"The word is odd\")\n",
        "num_ids": 41
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s1 = s.split()\n    for i in s1:\n        if len(i)%2 == 0:\n            print(\"The word is even\")\n        else:\n            print(\"The word is odd\")\n            \ndef double(s):\n    '''\n    Write a python function to check whether a number is even or odd.\n    '''\n    num = int(input(\"Enter the number: \"))\n    if num%2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")\n",
        "num_ids": 47
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l%2 == 0:\n        print(\"The length of the word is even\")\n    else:\n        print(\"The length of the word is odd\")\n",
        "num_ids": 47
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l=len(s)\n    if(l%2==0):\n        print(s,' is even')\n    else:\n        print(s,' is odd')\n    \ndef palindrome_check(s):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    s1=s[::-1]\n    if(s1==s):\n        print(s,' is palindrome')\n    else:\n        print(s,' is not palindrome')\n    \ndef palindrome_check_v2(s):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    s1=s[::-1]\n    if(s==s1):\n        print(s,' is palindrome')\n    else:\n        print(s,' is not palindrome')\n    \ndef palindrome_check_v3(s):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    s1=s[::-1]\n    if(s1==s):\n        print(s,' is palindrome')\n    else:\n        print(s,' is not palindrome')\n    \ndef palindrome_check_v4(s):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    s1=s[::-1]\n    if(s==s1):\n        print(s,' is palindrome')\n    else:\n        print(s,' is not palindrome')\n    \ndef palindrome_check_v5(s):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    s1=s[::-1]\n    if(s==s1):\n        print(s,' is palindrome')\n    else:\n        print(s,' is not palindrome')\n",
        "num_ids": 49
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #Solution\n    l=len(s)\n    if l%2==0:\n        return True\n    else:\n        return False\n    ",
        "num_ids": 36
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = n ** 2\n    num_sqrt = int(n**0.5)\n    num_sqrt_plus_one = num_sqrt + 1\n    num_sqrt_plus_two = num_sqrt + 2\n    return n + num_sqrt_plus_two - num_sqrt - 1\n",
        "num_ids": 78
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 1\n",
        "num_ids": 6
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    total = 0\n    i = 1\n    while i <= n:\n        total = total + i\n        i = i + 1\n    return total\n",
        "num_ids": 37
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        raise ValueError('Tetrahedral number must be at least 1')\n    \n    if n == 1:\n        return 4\n    if n == 2:\n        return 7\n    if n == 3:\n        return 6\n    \n    # there are n-1 tetrahedral numbers\n    return 4*n + 1\n",
        "num_ids": 83
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # the first tetrahedral number is 1\n    tetrahedral = 1\n",
        "num_ids": 21
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**3+4*n**2+3*n\n",
        "num_ids": 18
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return tetrahedral_number(n - 1) + (n * (n + 1) / 2)\n",
        "num_ids": 44
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # n = 2 ** (n - 1)\n    # return int(n * (n - 1) * (n - 2) / 6)\n    return int(n * (n - 1) * (n - 2))\n",
        "num_ids": 54
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    #n = 0\n    #tetrahedral_number = 1\n    #while n >= 0:\n    #    n -= 1\n    #    tetrahedral_number += 1\n    #return tetrahedral_number\n",
        "num_ids": 55
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r**3)\n    return v\ndef cylinder(r1, r2, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (2/3) * math.pi * (r1**2 + r2**2) * h\n    return v\ndef cone(r1, r2):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * (r1**2 + r2**2)\n    return v\ndef sphere_in_cylinder(r1, r2):\n    '''\n    Write a function to find the volume of a sphere inside a cylinder.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2)\n    return v\ndef sphere_in_cone(r1, r2):\n    '''\n    Write a function to find the volume of a sphere inside a cone.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2)\n    return v\ndef cone_in_sphere(r1, r2):\n    '''\n    Write a function to find the volume of a cone inside a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2)\n    return v\ndef cone_in_sphere_in_cylinder(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a sphere in a cylinder.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r1**2)\n    return v\ndef cone_in_cone_in_sphere(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a cone in a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r2**2)\n    return v\ndef cone_in_cylinder_in_sphere(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a cylinder in a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r1**2)\n    return v\ndef cyl_in_sphere(r1, r2):\n    '''\n    Write a function to find the volume of a cylinder inside a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2)\n    return v\ndef cylinder_in_sphere(r1, r2):\n    '''\n    Write a function to find the volume of a cylinder inside a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2)\n    return v\ndef cone_in_sphere(r1, r2):\n    '''\n    Write a function to find the volume of a cone inside a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2)\n    return v\ndef cyl_in_cone(r1, r2):\n    '''\n    Write a function to find the volume of a cylinder inside a cone.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2)\n    return v\ndef cylinder_in_cone(r1, r2):\n    '''\n    Write a function to find the volume of a cylinder inside a cone.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2)\n    return v\ndef cone_in_cyl_in_sphere(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a cylinder inside a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r1**2)\n    return v\ndef cone_in_sphere_in_cylinder(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a sphere in a cylinder.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r1**2)\n    return v\ndef cone_in_sphere_in_cyl_in_sphere(r1, r2, r3, r4):\n    '''\n    Write a function to find the volume of a cone inside a sphere in a cylinder in a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r4**2)\n    return v\ndef cone_in_cone_in_sphere(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a cone in a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r2**2)\n    return v\ndef cone_in_cyl_in_sphere(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a cylinder in a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r2**2)\n    return v\ndef cone_in_cone_in_sphere(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a cone in a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r2**2)\n    return v\ndef cone_in_cyl_in_cylinder(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a cylinder in a cylinder.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r2**2)\n    return v\ndef cone_in_cone_in_cylinder(r1, r2, r3):\n    '''\n    Write a function to find the volume of a cone inside a cone in a cylinder.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r2**2)\n    return v\ndef cone_in_cyl_in_cyl_in_sphere(r1, r2, r3, r4):\n    '''\n    Write a function to find the volume of a cone inside a cylinder in a cylinder in a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r4**2)\n    return v\ndef cone_in_cone_in_cyl_in_sphere(r1, r2, r3, r4):\n    '''\n    Write a function to find the volume of a cone inside a cone in a cylinder in a sphere.\n    '''\n    v = (4/3) * math.pi * (r1**2 + r2**2) * (r3**2 + r4**2)\n    return v\ndef sphere_in_sphere(r1, r2):\n    '''\n    Write a function to find the volume of a sphere inside a sphere.\n    '''\n    v = 4*math.pi * (r1**2 + r2**2)\n    return v\ndef sphere_in_cone(r1, r2):\n    '''\n    Write a function to find the volume of a sphere inside a cone.\n    '''\n    v = 4*math.pi * (r1**2 + r2**2)",
        "num_ids": 22
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r**2 * h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * (h/2)\ndef volume_cone_diameter(r,h):\n    '''\n    Write a function to find the volume of a cone with diameter.\n    '''\n    return math.pi * r**2 * h\ndef volume_cone_radius(r,h):\n    '''\n    Write a function to find the volume of a cone with radius.\n    '''\n    return math.pi * r**2 * (h/2)\ndef volume_cylinder_diameter(r,h):\n    '''\n    Write a function to find the volume of a cylinder with diameter.\n    '''\n    return math.pi * r**2 * h\ndef volume_cylinder_radius(r,h):\n    '''\n    Write a function to find the volume of a cylinder with radius.\n    '''\n    return math.pi * r**2 * (h/2)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    v = (4/3)*math.pi*r**3\n    return v\nprint(volume_sphere(5))",
        "num_ids": 35
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    radius = r\n    volume = (4/3) * math.pi * radius**3\n    print(volume)\n",
        "num_ids": 30
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4/3 * math.pi * r**3\n    return vol\ndef volume_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = math.pi * r**2 * h\n    return vol\ndef volume_cone(h, r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = 1/3 * math.pi * r**2 * h\n    return vol\ndef volume_pyramid(h, r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    vol = 1/3 * math.pi * r**2 * h\n    return vol\ndef volume_pyramid_torus(h, r):\n    '''\n    Write a function to find the volume of a pyramid torus.\n    '''\n    vol = math.pi * r**2 * (h-2*r)\n    return vol\ndef surface_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2\n    return a\ndef surface_cylinder(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2 * math.pi * r**2 * h\n    return a\ndef surface_cone(h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = math.pi * r**2\n    return a\ndef surface_pyramid(h, r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    a = math.pi * r**2\n    return a\ndef surface_pyramid_torus(h, r):\n    '''\n    Write a function to find the surface area of a pyramid torus.\n    '''\n    a = 2 * math.pi * r**2 * (h-2*r)\n    return a\ndef radius_sphere(r):\n    '''\n    Write a function to find the radius of a sphere.\n    '''\n    r = math.pi * r**2\n    return r\ndef radius_cylinder(h, r):\n    '''\n    Write a function to find the radius of a cylinder.\n    '''\n    r = r*h\n    return r\ndef radius_cone(h, r):\n    '''\n    Write a function to find the radius of a cone.\n    '''\n    r = r*h\n    return r\ndef radius_pyramid(h, r):\n    '''\n    Write a function to find the radius of a pyramid.\n    '''\n    r = r*(h-2*r)\n    return r\ndef radius_pyramid_torus(h, r):\n    '''\n    Write a function to find the radius of a pyramid torus.\n    '''\n    r = r*((h-2*r)/(h-2*r))\n    return r\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2\n    return a\ndef surface_area_cylinder(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2 * math.pi * r**2 * h\n    return a\ndef surface_area_cone(h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = math.pi * r**2\n    return a\ndef surface_area_pyramid(h, r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    a = math.pi * r**2\n    return a\ndef surface_area_pyramid_torus(h, r):\n    '''\n    Write a function to find the surface area of a pyramid torus.\n    '''\n    a = 2 * math.pi * r**2 * (h-2*r)\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol\ndef volume_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = 1/3 * math.pi * r**2 * h\n    return vol\ndef volume_cone(h, r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = 1/3 * math.pi * r**2 * h\n    return vol\ndef volume_pyramid(h, r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    vol = 1/3 * math.pi * r**2 * h\n    return vol\ndef volume_pyramid_torus(h, r):\n    '''\n    Write a function to find the volume of a pyramid torus.\n    '''\n    vol = math.pi * r**2 * (h-2*r)\n    return vol\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = (4*math.pi*r**2)/3\n    return a\ndef surface_area_cylinder(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = math.pi * r**2 * (h-2*r)\n    return a\ndef surface_area_cone(h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = (math.pi * r**2) / 3\n    return a\ndef surface_area_pyramid(h, r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    a = math.pi * r**2\n    return a\ndef surface_area_pyramid_torus(h, r):\n    '''\n    Write a function to find the surface area of a pyramid torus.\n    '''\n    a = math.pi * r**2 * (h-2*r)\n    return a\ndef surface_area_sphere_surface(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = (4/3)*math.pi*r**2\n    return a\ndef surface_area_cylinder_surface(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*math.pi*r**2*(h-2*r)\n    return a\ndef surface_area_cone_surface(h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = (math.pi*r**2)/3\n    return a\ndef surface_area_pyramid_surface(h, r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    a = math.pi*r**2\n    return a\ndef surface_area_pyramid_torus_surface(h, r):\n    '''\n    Write a function to find the surface area of a pyramid torus.\n    '''\n    a = math.pi*r**2*(h-2*r)\n    return a\ndef surface_area_sphere_volume(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = (4/3)*math.pi*r**3\n    return a\ndef surface_area_cylinder_volume(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*math.pi*r**2*(h-2*r)\n    return a\ndef surface_area_cone_volume(h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = math.pi*r**2\n    return a\ndef surface_area_pyramid_volume(h, r)",
        "num_ids": 31
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*(math.pi*r**3)\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    def V(r):\n        return math.pi * (r ** 3)\n    if type(r)!= float:\n        r = float(r)\n    return V(r)\n",
        "num_ids": 46
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    ans = 0\n    for i in range(len(strr)):\n        if strr[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            ans = ans + ord(strr[i])\n    return ans % 26\n        \nif __name__ == '__main__': \n    strr = 'abcd'\n    print(get_Char(strr))\n    print('\\n')\n    strr = 'Abcd'\n    print(get_Char(strr))\n    print('\\n')\n    strr = 'ABCD'\n    print(get_Char(strr)",
        "num_ids": 161
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_NUM = 97\n    asc_str = ''\n    for ch in strr:\n        asc_str = asc_str+chr(ASCII_NUM+ord(ch)-ASCII_NUM)\n    return asc_str\n",
        "num_ids": 58
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = strr.lower()\n    n = 26\n    sum = 0\n    for ch in strr:\n        sum = sum + ord(ch)\n    return sum % n\n",
        "num_ids": 47
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # an array to hold all the ascii value of all the characters in the string.\n    arr = []\n    \n    # converting the string into an array of characters.\n    for i in range(len(strr)):\n        arr.append(ord(strr[i]))\n    \n    # converting the array into a integer array.\n    arr = [i for i in arr]\n    \n    # converting the integer array into a string array.\n    arr = map(str,arr)\n    \n    # converting the string array into a string.\n    arr = ''.join(arr)\n    \n    # converting the string into an integer array.\n    arr = int(arr)\n    \n    # converting the integer array into a string array.\n    arr = map(str,arr)\n    \n    # converting the string array into a string.\n    arr = ''.join(arr)\n    \n    # converting the string into an integer array.\n    arr = int(arr)\n    \n    # converting the integer array into an ASCII value.\n    arr = chr(arr)\n    \n    # adding the ASCII value of all the characters of the string.\n    result = ord(arr)\n    result = result + ord(arr)\n    result = result + ord(arr)\n    result = result + ord(arr)\n    result = result + ord(arr)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a ASCII value.\n    result = chr(result)\n    \n    # adding the ASCII value of all the characters of the string.\n    result = ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a ASCII value.\n    result = chr(result)\n    \n    # adding the ASCII value of all the characters of the string.\n    result = ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a ASCII value.\n    result = chr(result)\n    \n    # adding the ASCII value of all the characters of the string.\n    result = ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a ASCII value.\n    result = chr(result)\n    \n    # adding the ASCII value of all the characters of the string.\n    result = ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a ASCII value.\n    result = chr(result)\n    \n    # adding the ASCII value of all the characters of the string.\n    result = ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a ASCII value.\n    result = chr(result)\n    \n    # adding the ASCII value of all the characters of the string.\n    result = ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a ASCII value.\n    result = chr(result)\n    \n    # adding the ASCII value of all the characters of the string.\n    result = ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    result = result + ord(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    \n    # converting the string into an integer array.\n    result = int(result)\n    \n    # converting the integer array into a string array.\n    result = map(str,result)\n    \n    # converting the string array into a string.\n    result = ''.join(result)\n    ",
        "num_ids": 2003
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    for i in strr:\n        count += ord(i)\n    return count % 26\n",
        "num_ids": 29
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(ord(strr)%26)\n",
        "num_ids": 14
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in strr:\n        ans = ans + ord(i)\n    return ans % 26\n        \nif __name__ == \"__main__\":\n    strr = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print get_Char(strr)\n",
        "num_ids": 90
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr=strr.replace(' ','')\n    sum_char=0\n    for i in range(len(strr)):\n        ascii_of_char=ord(strr[i])\n        sum_char = sum_char + ascii_of_char\n    return sum_char % 26\n",
        "num_ids": 77
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a_str = []\n    for i in range(len(strr)):\n        a_str.append(ord(strr[i]))\n    sum1 = sum(a_str)\n    res = (sum1)%26\n    ch = chr(res+65)\n    return ch\n",
        "num_ids": 74
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ((ord(strr))+26)%26\n",
        "num_ids": 16
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (sequence(n-1) + sequence(n-2))\n",
        "num_ids": 46
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return newman(sequence(n - 1) + newman(sequence(n - 2)))\n",
        "num_ids": 39
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return n\n    else:\n        return n + sequence(n - 1)\n",
        "num_ids": 28
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 7\n    a,b,c=1,2,4\n    i=0\n    while i<n-1:\n        a,b,c=b,c,a+b+c\n        i+=1\n    return c",
        "num_ids": 98
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    elif n > 3:\n        return (sequence(n - 1) * sequence(n - 2) + sequence(n - 3)) % 10\n",
        "num_ids": 80
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    nth = 0\n    while i < n:\n        nth = nth + nth**0.5\n        i = i + 1\n    return nth\n",
        "num_ids": 46
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n % 4 + sequence(n // 4)\n",
        "num_ids": 43
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n",
        "num_ids": 49
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    # newman conway sequence\n    # initialize a list with values 1, 2, 3\n    sequence = [1,2,3]\n    # initialize a counter to the right of the list\n    counter = 0\n    # loop while the counter is less than n\n    while counter < n:\n        # take the element in the list\n        element = sequence[counter]\n        # if element is equal to 0\n        if element == 0:\n            # take the element in the list 2 spaces right\n            sequence.append(sequence.pop(counter))\n            # increment the counter\n            counter += 1\n        # if element is equal to 1\n        elif element == 1:\n            # take the element in the list 2 spaces right\n            sequence.append(sequence.pop(counter))\n            # increment the counter\n            counter += 2\n        # if element is equal to 2\n        elif element == 2:\n            # take the element in the list 2 spaces right\n            sequence.append(sequence.pop(counter))\n            # increment the counter\n            counter += 1\n        # if element is equal to 3\n        elif element == 3:\n            # take the element in the list 2 spaces right\n            sequence.append(sequence.pop(counter))\n            # increment the counter\n            counter += 1\n        # if element is equal to 4\n        elif element == 4:\n            # take the element in the list 2 spaces right\n            sequence.append(sequence.pop(counter))\n            # increment the counter\n            counter += 2\n        else:\n            # throw an error\n            return 'Error'\n    return element\nprint(sequence(6))\nprint(sequence(7))\nprint(sequence(8))\nprint(sequence(9))\nprint(sequence(10))\n",
        "num_ids": 433
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r ** 2\n    return s\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n    \n",
        "num_ids": 7
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s=4*math.pi*math.pow(r,2)\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Function returns the surface area of a sphere\n    pi = 3.14159265358979323846\n    s = 4 * pi * r**2\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n    \n    \n    \n    \ndef sum_all(lst):\n    '''\n    Write a function that sums up all the elements in a list.\n",
        "num_ids": 17
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    S = 4 * pi * r**2\n    return S\n",
        "num_ids": 24
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159265358979323846\n    surface = 4 * pi * r ** 2\n    return surface\n",
        "num_ids": 31
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    def surfacearea_sphere_helper(r):\n        if r <= 0:\n            return 0\n        return 4 * math.pi * (r ** 2)\n    return surfacearea_sphere_helper(r)\n",
        "num_ids": 55
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4*math.pi*(r**2)\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return ((2 * n - 1) * (2 * n - 1)) / 6\n",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x = 1\n    y = 1\n    z = 1\n    for i in range(n):\n        print(x, y, z)\n        x, y, z = y, z, x + y + z\n    return x, y, z\n",
        "num_ids": 61
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int( (3 * n * n - 1) ** 0.5 )\n    \n    \ndef centered_hexagonal_number_test():\n    '''\n    Tests for centered_hexagonal_number function.\n    '''\n    print('Testing centered_hexagonal_number()...')\n    for n in range(10):\n        print('%d' % centered_hexagonal_number(n))\n",
        "num_ids": 42
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum([a ** 2 - b ** 2 for a, b in zip(range(n+1), range(1, n+1))]) / 3\n",
        "num_ids": 38
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n <= 1:\n        return 1\n    else:\n        return 1 + (n-1) * (3 * n - 3) / 2\n",
        "num_ids": 39
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (1 - (1/3)) * (1 + n ** 2)\n",
        "num_ids": 21
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 * ((3*n)-1)) // 2\n    ",
        "num_ids": 20
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(1 - sqrt(5))/(2*sqrt(3))\n",
        "num_ids": 23
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #x = {**dict1, **dict2, **dict3}\n    #return x\n    return {**dict1, **dict2, **dict3}\n",
        "num_ids": 41
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    res_dictionary = {}\n",
        "num_ids": 12
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict((key,dict1.get(key, 0) + dict2.get(key, 0) + dict3.get(key, 0)) for key in set(dict1) | set(dict2) | set(dict3))\n",
        "num_ids": 58
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1, **dict2, **dict3)\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n",
        "num_ids": 41
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \n    \ndef merge_dictionaries_three_2(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_3(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_4(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_5(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \n    \ndef merge_dictionaries_three_6(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_7(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_8(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_9(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_10(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_11(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_12(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_13(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_14(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_15(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_16(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_17(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_18(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_19(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_20(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_21(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_22(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_23(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_24(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_25(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_26(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_27(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_28(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_29(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.copy()\n    return dict2.copy()\n    return dict3.copy()\n    \ndef merge_dictionaries_three_3",
        "num_ids": 38
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    output = {}\n    for key in dict1:\n        if key in dict2:\n            if key in dict3:\n                output[key] = dict1[key] + dict2[key] + dict3[key]\n            else:\n                output[key] = dict1[key] + dict2[key]\n        elif key in dict3:\n            output[key] = dict3[key]\n    return output\n",
        "num_ids": 102
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for ele in list1:\n        if ele not in dict1:\n            dict1[ele] = 0\n        dict1[ele] += 1\n    return dict1\n",
        "num_ids": 48
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    a = collections.Counter(list1)\n    return a\n    \nprint(freq_count([1,2,3,4,5,1,1,2,4,5,6,6,7,8,9,9,10,10,10,10,11,11,11,11,11,12,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,1",
        "num_ids": 2007
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create a empty dictionary\n    dict1 = {}\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = {}\n    for num in list1:\n        if num not in dict:\n            dict[num] = 1\n        else:\n            dict[num] += 1\n    return dict\n",
        "num_ids": 47
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    return d\n    \n",
        "num_ids": 49
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n",
        "num_ids": 46
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = collections.Counter(list1)\n    return dic\nprint(freq_count([0,1,2,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,",
        "num_ids": 2006
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_d = {}\n    for i in list1:\n        if i in freq_d:\n            freq_d[i] += 1\n        else:\n            freq_d[i] = 1\n    return freq_d\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N >= 1:\n        for i in range(N, 1, -1):\n            if i - 1!= i and i - 1 < N and abs(N - i) < abs(N - i - 1):\n                return i - 1\n            else:\n                continue\n    else:\n        return N\n",
        "num_ids": 75
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1: return 1\n    i = 2\n    while i <= N:\n        if N - i == 0:\n            return i\n        if N - i < 0:\n            return i\n        if abs(N - i) < abs(N - closest_num(i - 1)):\n            closest_num(i - 1) = i\n        i += 1\n",
        "num_ids": 91
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = 1\n    while num < N:\n        num += 1\n    return num\n",
        "num_ids": 23
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return max(range(1, N), key=lambda x: abs(N-x))\n    \ndef closest_num2(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n < 1: return None\n    elif n == 1: return 1\n    elif n == 2: return 2\n    else:\n        x, y = n, 1\n        while x!= y:\n            x = y\n            y = min(x, closest_num(x-1))\n    return y\n",
        "num_ids": 77
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # O(log n) Time | O(1) Space\n    # note that n is an integer\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        # get the int in the range of N\n        range_start = 1\n        range_end = N\n        mid = (range_start + range_end)//2\n        while range_start < range_end:\n            mid = (range_start + range_end)//2\n            if mid**2 == N:\n                return mid\n            elif mid**2 > N:\n                range_end = mid\n            else:\n                range_start = mid\n        return mid\n    # O(1) Time | O(1) Space\n    # if N == 0:\n    #     return 0\n    # if N == 1:\n    #     return 1\n    # # get the int in the range of N\n    # range_start = 1\n    # range_end = N\n    # mid = (range_start + range_end)//2\n    # while range_start < range_end:\n    #     mid = (range_start + range_end)//2\n    #     if mid**2 == N:\n    #         return mid\n    #     elif mid**2 > N:\n    #         range_end = mid\n    #     else:\n    #         range_start = mid\n    # return mid\n",
        "num_ids": 337
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(N // 2)\n",
        "num_ids": 11
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N > 0:\n        return N\n    else:\n        return 0\n        \n    \ndef closest_num2(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num3(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num4(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num5(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num6(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num7(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num8(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num9(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num10(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num11(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num12(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num13(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num14(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num15(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num16(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num17(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num18(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num19(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num20(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num21(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num22(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num23(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num24(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num25(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num26(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num27(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num28(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num29(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num30(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num31(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N > 0:\n        return N\n    else:\n        return N\n        \n        \ndef closest_num3",
        "num_ids": 42
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N >= 10:\n        return N % 10\n    if N == 1:\n        return 1\n    else:\n        return N - 1\n    \nprint(closest_num(12)) # Should be 11\n",
        "num_ids": 64
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return n-1\n",
        "num_ids": 8
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if max_len < len(word):\n            max_len = len(word)\n    return max_len\n",
        "num_ids": 44
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = sorted(list1,key=len)\n    length = len(list1[-1])\n    return length\n",
        "num_ids": 32
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l=[]\n    list1.sort()\n    for i in range(len(list1)-1):\n        if list1[i+1]>list1[i]:\n            l.append(list1[i+1]-list1[i])\n    return max(l)\n",
        "num_ids": 69
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a = list1\n    a = ''.join(a)\n    l1 = len(a)\n    return l1\n    \nl1 = ['geeksforgeeks', 'for', 'geeks']\nprint(len_log(l1))\n    ",
        "num_ids": 62
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # your code here\n    \n    return len(max(list1, key=len))\n",
        "num_ids": 24
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(list1, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(len(x) for x in list1)\n    \n    # return max(len(x) for x in list1)\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # 1st solution\n    return len(max(list1, key=len))\n    # 2nd solution\n    return max(map(len, list1))\n    # 3rd solution\n    return max(map(len, list1), key=len)\n",
        "num_ids": 62
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l=len(list1)\n    i=0\n    while i<l:\n        word1=list1[i]\n        m=len(word1)\n        i=i+1\n    return(m)\n",
        "num_ids": 55
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for sub in sub_str:\n        if str1.find(sub) == -1:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # return any(sub_str in x for x in str1)\n    for x in str1:\n        if sub_str in x:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError('Input should be a string')\n    if not isinstance(sub_str, str):\n        raise TypeError('Input should be a string')\n    if len(str1)!= len(sub_str):\n        raise TypeError('Input strings should be of the same length')\n    index = 0\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == sub_str[index]:\n            if index == len(sub_str) - 1:\n                count += 1\n            index += 1\n        else:\n            index = 0\n    return count == len(sub_str)\n",
        "num_ids": 163
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # str1 = \"ABCD\"\n    # sub_str = \"CD\"\n    # print(str1.find(sub_str))\n    # print(sub_str in str1)\n",
        "num_ids": 48
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i:].find(sub_str)!= -1:\n            return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i] == sub_str:\n            return True\n",
        "num_ids": 34
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n",
        "num_ids": 18
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n",
        "num_ids": 51
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    print(\"{0} {1} {2}\".format(\"Substring \", sub_str, \" is present in this list if substring exists else false\"))\n",
        "num_ids": 38
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    odd = 1\n    even = 1\n    while True:\n        if even!= n%2:\n            odd += 1\n        if odd > 10:\n            return False\n        if even == 0:\n            return True\n        even = 0\n",
        "num_ids": 59
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # If the number is even, then it is undulating \n    if n % 2 == 0: \n        return True\n    # If the number is odd, then divide the number by 2 \n    # If the number is a prime then the divider is not a factor of the number \n    # but a factor of its even power \n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    else: \n        for i in range(2, n): \n            if n % i == 0: \n                return False\n            return True\n        \n",
        "num_ids": 140
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = False\n    if (n!= 0) and (n%2 == 0): \n        if (n == 2) or (n%3 == 0): \n            flag = True\n    return flag\n",
        "num_ids": 51
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    if count % 2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    x = n % 10\n    y = n // 10\n    return x == y or x!= y and (x + y) % 2 == 0\n",
        "num_ids": 37
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 2) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 8:\n        return True\n    elif n == 9:\n        return True\n    elif n == 11:\n        return True\n    elif n == 13:\n        return True\n    elif n == 14:\n        return True\n    elif n == 15:\n        return True\n    elif n == 16:\n        return True\n    elif n == 17:\n        return True\n    elif n == 18:\n        return True\n    elif n == 19:\n        return True\n    elif n == 20:\n        return True\n    elif n == 21:\n        return True\n    elif n == 22:\n        return True\n    elif n == 23:\n        return True\n    elif n == 24:\n        return True\n    elif n == 25:\n        return True\n    elif n == 26:\n        return True\n    elif n == 27:\n        return True\n    elif n == 28:\n        return True\n    elif n == 29:\n        return True\n    elif n == 30:\n        return True\n    elif n == 31:\n        return True\n    elif n == 32:\n        return True\n    elif n == 33:\n        return True\n    elif n == 34:\n        return True\n    elif n == 35:\n        return True\n    elif n == 36:\n        return True\n    elif n == 37:\n        return True\n    elif n == 38:\n        return True\n    elif n == 39:\n        return True\n    elif n == 40:\n        return True\n    elif n == 41:\n        return True\n    elif n == 42:\n        return True\n    elif n == 43:\n        return True\n    elif n == 44:\n        return True\n    elif n == 45:\n        return True\n    elif n == 46:\n        return True\n    elif n == 47:\n        return True\n    elif n == 48:\n        return True\n    elif n == 49:\n        return True\n    elif n == 50:\n        return True\n    elif n == 51:\n        return True\n    elif n == 52:\n        return True\n    elif n == 53:\n        return True\n    elif n == 54:\n        return True\n    elif n == 55:\n        return True\n    elif n == 56:\n        return True\n    elif n == 57:\n        return True\n    elif n == 58:\n        return True\n    elif n == 59:\n        return True\n    elif n == 60:\n        return True\n    elif n == 61:\n        return True\n    elif n == 62:\n        return True\n    elif n == 63:\n        return True\n    elif n == 64:\n        return True\n    elif n == 65:\n        return True\n    elif n == 66:\n        return True\n    elif n == 67:\n        return True\n    elif n == 68:\n        return True\n    elif n == 69:\n        return True\n    elif n == 70:\n        return True\n    elif n == 71:\n        return True\n    elif n == 72:\n        return True\n    elif n == 73:\n        return True\n    elif n == 74:\n        return True\n    elif n == 75:\n        return True\n    elif n == 76:\n        return True\n    elif n == 77:\n        return True\n    elif n == 78:\n        return True\n    elif n == 79:\n        return True\n    elif n == 80:\n        return True\n    elif n == 81:\n        return True\n    elif n == 82:\n        return True\n    elif n == 83:\n        return True\n    elif n == 84:\n        return True\n    elif n == 85:\n        return True\n    elif n == 86:\n        return True\n    elif n == 87:\n        return True\n    elif n == 88:\n        return True\n    elif n == 89:\n        return True\n    elif n == 90:\n        return True\n    elif n == 91:\n        return True\n    elif n == 92:\n        return True\n    elif n == 93:\n        return True\n    elif n == 94:\n        return True\n    elif n == 95:\n        return True\n    elif n == 96:\n        return True\n    elif n == 97:\n        return True\n    elif n == 98:\n        return True\n    elif n == 99:\n        return True\n    elif n == 100:\n        return True\n    elif n == 101:\n        return True\n    elif n == 102:\n        return True\n    elif n == 103:\n        return True\n    elif n == 104:\n        return True\n    elif n == 105:\n        return True\n    elif n == 106:\n        return True\n    elif n == 107:\n        return True\n    elif n == 108:\n        return True\n    elif n == 109:\n        return True\n    elif n == 110:\n        return True\n    elif n == 111:\n        return True\n    elif n == 112:\n        return True\n    elif n == 113:\n        return True\n    elif n == 114:\n        return True\n    elif n == 115:\n        return True\n    elif n == 116:\n        return True\n    elif n == 117:\n        return True\n    elif n == 118:\n        return True\n    elif n == 119:\n        return True\n    elif n == 120:\n        return True\n    elif n == 121:\n        return True\n    elif n == 122:\n        return True\n    elif n == 123:\n        return True\n    elif n == 124:\n        return True\n    elif n == 125:\n        return True\n    elif n == 126:\n        return True\n    elif n == 127:\n        return True\n    elif n == 128:\n        return True\n    elif n == 129:\n        return True\n    elif n == 130:\n        return True\n    elif n == 131:\n        return True\n    elif n == 132:\n        return True\n    elif n == 133:\n        return True\n    elif n == 134:\n        return True\n    elif n == 135:\n        return True\n    elif n == 136:\n        return True\n    elif n == 137:\n        return True\n    elif n == 138:\n        return True\n    elif n == 139:\n        return True\n    elif n == 140:\n        return True\n    elif n == 141:\n        return True\n    elif n == 142:\n        return True\n    elif n == 143:\n        return True\n    elif n == 144:\n        return True\n    elif n == 145:\n        return True\n    elif n == 146:\n        return True\n    elif n == 147:\n        return True\n    elif n == 148:\n        return True\n    elif n == 149:\n        return True\n    elif n == 150:\n        return True\n    elif n == 151:\n        return True\n    elif n == 152:\n        return True\n    elif n == 153:\n        return True\n    elif n == 154:\n        return True\n    elif n == 155:\n        return True\n    elif n == 156:\n        return True\n    elif n == 157:\n        return True\n    elif n == 158:\n        return True\n    elif n == 159:\n        return True\n    elif n == 160:\n        return True\n    elif n == 161:\n        return True\n    elif n == 162:\n        return True\n    elif n == 163:\n        return True\n    elif n == 164:\n        return True\n    elif n == 165:\n        return True\n    elif n == 166:\n        return True\n    elif n == 167:\n        return True\n    elif n == 168:\n        return True\n    elif n == 169:\n        return True\n    elif n == 170:\n        return True\n    elif n == 171:\n        return True\n    elif n == 172:\n        retur",
        "num_ids": 2016
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0:\n        return False\n    if n==1 or n==2:\n        return True\n    max = 2\n    while max<=n:\n        if n%max == 0:\n            return False\n        max+=1\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n == 0) or (n == 1): \n        return False\n    else: \n        if n % 2 == 0: \n            return False\n        else: \n            sq = int(math.sqrt(n)) \n            for i in range(3, sq + 1, 2): \n                if n % i == 0: \n                    return False\n            return True\n",
        "num_ids": 93
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #Initialize the value of the result variable.\n    result = 0\n    #While we're still able to multiply the current value of 'a' by 'b', multiply it by the previous value of 'a'\n    while (b > 0):\n        #Update the result variable.\n        result = result + a\n        #Multiply the previous value of 'a' by itself.\n        a = a * a\n        #Divide the current value of 'a' by itself.\n        b = b - 1\n    #Return the final result of the multiplication.\n    return result\n",
        "num_ids": 133
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    assert b>=0 and b%2!=0\n    if b==0:\n        return 1\n    return a*power(a,b-1)\n",
        "num_ids": 40
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 31
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    res = 0\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        res = power(a,b//2)\n        return res * res\n    else:\n        res = power(a, b//2)\n        res *= res\n        return res * a\n        \n        \n        \n    ",
        "num_ids": 93
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    if(b==1):\n        return a\n    if(b>1):\n        if(b%2==0):\n            return power(a,b//2)*power(a,b//2)\n        else:\n            return power(a,(b-1)//2)*power(a,(b-1)//2)*a\n",
        "num_ids": 95
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \ndef number_multiplication(a,b):\n    '''\n    Write a function to multiply two numbers without using '*' or '**'.\n    '''\n    return a*b\n    \ndef factorial(n):\n    '''\n    Write a function that takes in a number and returns the factorial of that number.\n    '''\n    factorial = 1\n    while n>1:\n        factorial = factorial*n\n        n = n-1\n    return factorial\n    \ndef factor_power(n,p):\n    '''\n    Write a function that takes in a number and a power and returns the value of the number raised to the power of the power.\n    '''\n    return pow(n,p)\n    \ndef is_palindrome(phrase):\n    '''\n    Write a function that takes in a phrase and returns True if the phrase is a palindrome and False if it isn't.\n    '''\n    return True if phrase == phrase[::-1] else False\n    \ndef reverse_order(phrase):\n    '''\n    Write a function that takes in a phrase and returns the phrase in reversed order.\n    '''\n    return ''.join(list(reversed(phrase)))\n    \ndef summation(a,b):\n    '''\n    Write a function that takes in two numbers and returns their sum.\n    '''\n    return a+b\n    \ndef square(a):\n    '''\n    Write a function that takes in a number and returns that number squared.\n    '''\n    return a*a\n    \ndef identity(n):\n    '''\n    Write a function that takes in a number and returns that number.\n    '''\n    return n\n    \ndef reversed_string(string):\n    '''\n    Write a function that takes in a string and returns it reversed.\n    '''\n    return ''.join(list(reversed(string)))\n    \ndef rotate_string(string,n):\n    '''\n    Write a function that takes in a string and returns it rotated by a number of places.\n    '''\n    return string[n:]+string[:n]\n    \ndef palindrome_part(phrase):\n    '''\n    Write a function that takes in a phrase and returns True if the phrase is a palindrome and False if it isn't.\n    '''\n    return True if phrase == phrase[::-1] else False\n    \ndef reverse_words(string):\n    '''\n    Write a function that takes in a string and returns it in reverse order.\n    '''\n    return''.join(list(reversed(string.split())))\n    \ndef string_length(string):\n    '''\n    Write a function that takes in a string and returns its length.\n    '''\n    return len(string)\n    \ndef sum_string(string):\n    '''\n    Write a function that takes in a string and returns the sum of all the characters in the string.\n    '''\n    return sum(list(map(int,string)))\n    \ndef multiply_strings(string_a,string_b):\n    '''\n    Write a function that takes in two strings and returns their product.\n    '''\n    return string_a*string_b\n    \ndef sum_and_multiply_strings(string_a,string_b):\n    '''\n    Write a function that takes in two strings and returns their sum and product.\n    '''\n    return (sum_string(string_a),multiply_strings(string_a,string_b))\n    \ndef minimum_number(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the minimum number in the list.\n    '''\n    return min(numbers)\n    \ndef maximum_number(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the maximum number in the list.\n    '''\n    return max(numbers)\n    \ndef is_sorted(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns True if the numbers are sorted in ascending order and False if they aren't.\n    '''\n    return True if numbers == sorted(numbers) else False\n    \ndef remove_elements(string,n):\n    '''\n    Write a function that takes in a string and a number and returns the string with the elements at the first number removed.\n    '''\n    return string.replace(string[:n],'')\n    \ndef greater_number(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the number that is greater than the second number in the list.\n    '''\n    return max(numbers)\n    \ndef is_palindrome(phrase):\n    '''\n    Write a function that takes in a phrase and returns True if the phrase is a palindrome and False if it isn't.\n    '''\n    return True if phrase == reversed_string(phrase) else False\n    \ndef get_first_second_last_number(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the first two numbers and the sum of the last two numbers.\n    '''\n    return sum(numbers[:2])+sum(numbers[-2:])\n    \ndef remove_list_elements(numbers,to_be_removed):\n    '''\n    Write a function that takes in a list of numbers and a list of numbers to be removed and returns the list with the numbers that are not in the to_be_removed list removed.\n    '''\n    return list(filter(lambda n:n not in to_be_removed,numbers))\n    \ndef second_largest(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the second largest number in the list.\n    '''\n    return max(numbers)\n    \ndef remove_duplicates(string):\n    '''\n    Write a function that takes in a string and returns a string with all of the characters that appear only once in the string.\n    '''\n    return ''.join(set(string))\n    \ndef multiplication_table(n):\n    '''\n    Write a function that takes in a number n and returns the multiplication table for that number.\n    '''\n    table = []\n    for i in range(1,n+1):\n        table.append(i*i)\n    return table\n    \ndef is_anagram(string_1,string_2):\n    '''\n    Write a function that takes in two strings and returns True if the letters in one string appear the same in the other string and False if they don't.\n    '''\n    return True if sorted(string_1)==sorted(string_2) else False\n    \ndef sort_by_even_odd(strings):\n    '''\n    Write a function that takes in a list of strings and returns a new list with the same elements in the original list sorted by even numbers (from low to high) and odd numbers (from high to low).\n    '''\n    evens = sorted(filter(lambda s:int(s[0])%2==0,strings))\n    odds = sorted(filter(lambda s:int(s[0])%2!=0,strings),reverse=True)\n    return evens+odds\n    \ndef sum_cubes(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the cubes of all the positive integers up to and including the input number.\n    '''\n    return sum(list(map(lambda i:i**3,list(range(1,n+1)))))\n    \ndef letters_and_numbers(string):\n    '''\n    Write a function that takes in a string and returns a list containing each character and number in the string, separated by a space.\n    '''\n    return''.join(list(map(lambda x:x if x.isalnum() else '',list(string))))\n    \ndef add_strings(string_a,string_b):\n    '''\n    Write a function that takes in two strings and returns a new string with each letter in the first string added to the end of the second string.\n    '''\n    return string_a+string_b\n    \ndef is_palindrome(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome and False if it isn't.\n    '''\n    return True if string == reversed_string(string) else False\n    ",
        "num_ids": 18
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_by_second = sorted(test_list, key=lambda x: x[1])\n    return sorted_by_second[0][0]\n",
        "num_ids": 39
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = test_list[0]\n    for i in range(len(test_list)):\n        if min_val[1] > test_list[i][1]:\n            min_val = test_list[i]\n    return min_val\n",
        "num_ids": 64
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda item: item[1])\n",
        "num_ids": 20
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(1)(sorted(test_list, key=itemgetter(1))[0])\n",
        "num_ids": 29
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1))\n    return sorted_test_list[0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1), reverse=True)\n    return sorted_test_list[0]\n    \ndef index_second(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second largest second value.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1), reverse=True)\n    return sorted_test_list[1]\n    \ndef count_items(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the number of tuples with a second value of the specified number.\n    '''\n    count = 0\n    for item in test_list:\n        if item[1] == number:\n            count += 1\n    return count\n    \ndef sum_items(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the sum of all items with a second value of the specified number.\n    '''\n    sum_value = 0\n    for item in test_list:\n        if item[1] == number:\n            sum_value += item[0]\n    return sum_value\n    \ndef average_items(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the average of all items with a second value of the specified number.\n    '''\n    sum_value = 0\n    count = 0\n    for item in test_list:\n        if item[1] == number:\n            count += 1\n            sum_value += item[0]\n    if count == 0:\n        return 0\n    return sum_value / count\n    \ndef index_min_sum_items(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest sum of second values.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1), reverse=True)\n    for index in range(len(sorted_test_list)):\n        if sorted_test_list[index][1] == number:\n            return sorted_test_list[index]\n    return None\n    \ndef index_max_sum_items(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest sum of second values.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1))\n    for index in range(len(sorted_test_list)):\n        if sorted_test_list[index][1] == number:\n            return sorted_test_list[index]\n    return None\n    \ndef index_sum_min_items(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest sum of second values.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1), reverse=True)\n    for index in range(len(sorted_test_list)):\n        if sorted_test_list[index][1] == number:\n            return sorted_test_list[index]\n    return None\n    \ndef index_sum_max_items(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest sum of second values.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1))\n    for index in range(len(sorted_test_list)):\n        if sorted_test_list[index][1] == number:\n            return sorted_test_list[index]\n    return None\n    \ndef max_number(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1), reverse=True)\n    for item in sorted_test_list:\n        if item[1] == number:\n            return item\n    return None\n    \ndef min_number(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1))\n    for item in sorted_test_list:\n        if item[1] == number:\n            return item\n    return None\n    \ndef second_largest_number(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second largest second value.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1), reverse=True)\n    for item in sorted_test_list:\n        if item[1] == number:\n            return item\n    return None\n    \ndef average_number(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the average of all items with a second value of the specified number.\n    '''\n    sum_value = 0\n    count = 0\n    for item in test_list:\n        if item[1] == number:\n            count += 1\n            sum_value += item[0]\n    if count == 0:\n        return 0\n    return sum_value / count\n    \ndef average_sum_number(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the average of all items with a sum of the second value of the specified number.\n    '''\n    sum_value = 0\n    count = 0\n    for item in test_list:\n        if item[1] == number:\n            count += 1\n            sum_value += item[0]\n    if count == 0:\n        return 0\n    return sum_value / count\n    \ndef second_smallest_number(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second smallest second value.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1))\n    for item in sorted_test_list:\n        if item[1] == number:\n            return item\n    return None\n    \ndef index_max_average_sum_number(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest sum of second values.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1), reverse=True)\n    for index in range(len(sorted_test_list)):\n        if sorted_test_list[index][1] == number:\n            return sorted_test_list[index]\n    return None\n    \ndef max_average_number(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1))\n    for item in sorted_test_list:\n        if item[1] == number:\n            return item\n    return None\n    \ndef min_average_number(test_list, number):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_test_list = sorted(test_list, key=itemgetter(0,1))\n    for item in sorted_test_list:",
        "num_ids": 37
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #a = (2, 6)\n    #b = (4, 7)\n    #c = (1, 3)\n    #d = (1, 2)\n    #e = (4, 6)\n    #f = (1, 2)\n    #g = (3, 5)\n    #h = (2, 2)\n    #i = (1, 1)\n    #lista = [a,b,c,d,e,f,g,h,i]\n    #print(lista)\n    #print(index_minimum(lista))\n    #print(index_minimum([(2, 6), (4, 7), (1, 3), (1, 2), (4, 6), (1, 2), (3, 5), (2, 2), (1, 1)]))\n    #print(index_minimum([(2, 6), (4, 7), (1, 3), (1, 2), (4, 6), (1, 2), (3, 5), (2, 2), (1, 1)]))\n    #print(index_minimum([]))\n    #print(index_minimum((1, 2, 3, 4, 5, 6)))\n    #print(index_minimum((1, 2, 3, 4, 5, 6)))\n    if not test_list:\n        return None\n    #print(test_list)\n    test_list.sort(key = itemgetter(1))\n    return test_list[0]\n",
        "num_ids": 346
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n",
        "num_ids": 27
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return\n    else:\n        return sorted(test_list,key=itemgetter(1))[0]\n",
        "num_ids": 41
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n",
        "num_ids": 27
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0]\n    for i in lst:\n        if len(i) < len(min_length):\n            min_length = i\n    return len(min_length)\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #code here\n    res=0\n    for i in lst:\n        res=max(res,len(i))\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst)\n    for i in range(0, len(lst)):\n        if min_length > len(lst[i]):\n            min_length = len(lst[i])\n    return min_length\n",
        "num_ids": 62
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    m = 100000000\n    for i in lst:\n        if len(i)<m:\n            m = len(i)\n    return m\n",
        "num_ids": 38
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        min_len = len(lst[0])\n        for i in range(1, len(lst)):\n            if min_len > len(lst[i]):\n                min_len = len(lst[i])\n        return min_len\n",
        "num_ids": 83
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        return min([len(item) for item in lst])\n",
        "num_ids": 36
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in range(1, len(lst)):\n        if min > len(lst[i]):\n            min = len(lst[i])\n    return min\n    \nlst = [[4,5,6,9],[8,6,2,5,3],[1,9,7,2]]\n",
        "num_ids": 89
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini = len(lst[0])\n    for item in lst:\n        if mini > len(item):\n            mini = len(item)\n    return mini\n",
        "num_ids": 42
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1\n    \n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n",
        "num_ids": 47
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_lst_len = 0\n    for i in lst:\n        if len(i) < smallest_lst_len:\n            smallest_lst_len = len(i)\n",
        "num_ids": 50
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c = 1\n    for i in range(1,n+1):\n        if n%i==0:\n            c += 1\n    return c\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return int(n)\n",
        "num_ids": 9
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + divisor(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2,n+1):\n        if n % i == 0:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count = count + 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c=1\n    for i in range(1,n+1):\n        if n%i==0:\n            c=c+1\n    return c\n",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(",
        "num_ids": 13
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    return int(n / 2) + n % 2\n    \n    ",
        "num_ids": 29
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for l in list1:\n        for i in l:\n            if i in counts:\n                counts[i] += 1\n            else:\n                counts[i] = 1\n    return counts\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if len(list1) == 0:\n        return {}\n    if len(list1) == 1:\n        return {list1[0]:1}\n    if len(list1) == 2:\n        return {list1[0]:1, list1[1]:1}\n    if len(list1) > 2:\n        freq = {list1[0]:1}\n        for i in range(1, len(list1)):\n            if list1[i] in freq:\n                freq[list1[i]] += 1\n            else:\n                freq[list1[i]] = 1\n        return freq\n",
        "num_ids": 152
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq\n",
        "num_ids": 58
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for i in item:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n    return freq\n",
        "num_ids": 58
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    frequency = {}\n    for i in list1:\n        for j in i:\n            if j in frequency:\n                frequency[j] += 1\n            else:\n                frequency[j] = 1\n    return frequency\n",
        "num_ids": 55
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        if i not in result.keys():\n            result[i] = 1\n        else:\n            result[i] = result[i] + 1\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq\n",
        "num_ids": 58
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for i in item:\n            if i in freq:\n                freq[i] = freq[i] + 1\n            else:\n                freq[i] = 1\n    return freq\n    \ndef filter_out_empty_strings(list1):\n    '''\n    Write a function to filter out empty strings in a given list of strings.\n    '''\n    new_list = []\n    for item in list1:\n        if len(item) > 0:\n            new_list.append(item)\n    return new_list\n    \ndef count_occurrences(list1, item):\n    '''\n    Write a function to count the number of occurrences of an item in a list of strings.\n    '''\n    count = 0\n    for item in list1:\n        if item == item:\n            count = count + 1\n    return count\n    \ndef find_and_print_element_in_a_list_reversed(list1):\n    '''\n    Write a function that finds and prints the first element of a list that appears in the given list.\n    '''\n    for item in list1:\n        if item in list1[::-1]:\n            print(item)\n            break\n        \ndef reverse_list_of_strings(list1):\n    '''\n    Write a function to reverse a given list of strings.\n    '''\n    reversed_list = []\n    for item in list1:\n        reversed_list.insert(0, item)\n    return reversed_list\n    \ndef reverse_list_of_list_of_strings(list1):\n    '''\n    Write a function to reverse a list of lists of strings.\n    '''\n    for item in list1:\n        for i in range(0, len(item)):\n            item[i] = item[i][::-1]\n    return list1\n    \ndef count_elements_in_a_list_reversed(list1):\n    '''\n    Write a function to count the number of elements in a list of strings.\n    '''\n    counter = 0\n    for item in list1:\n        counter = counter + 1\n    return counter\n    \ndef count_elements_in_a_list_reversed_using_count(list1):\n    '''\n    Write a function to count the number of elements in a list of strings.\n    '''\n    counter = 0\n    for item in list1:\n        counter = counter + 1\n    return counter\n    \ndef count_elements_in_a_list_reversed_using_list_comprehension(list1):\n    '''\n    Write a function to count the number of elements in a list of strings.\n    '''\n    return len(list1)\n    \ndef find_all_elements_in_list_of_strings(list1, item):\n    '''\n    Write a function to find all the occurrences of a particular element in a list of strings.\n    '''\n    new_list = []\n    for item in list1:\n        if item == item:\n            new_list.append(item)\n    return new_list\n    \ndef find_all_elements_in_list_of_strings_using_list_comprehension(list1, item):\n    '''\n    Write a function to find all the occurrences of a particular element in a list of strings.\n    '''\n    return [item for item in list1 if item == item]\n    \ndef find_all_elements_in_list_of_strings_using_lambda(list1, item):\n    '''\n    Write a function to find all the occurrences of a particular element in a list of strings.\n    '''\n    return list1.find(item)\n    \ndef count_even_numbers_in_list(list1):\n    '''\n    Write a function to count the number of even numbers in a list of integers.\n    '''\n    counter = 0\n    for i in list1:\n        if i % 2 == 0:\n            counter = counter + 1\n    return counter\n    \ndef count_even_numbers_in_list_using_filter(list1):\n    '''\n    Write a function to count the number of even numbers in a list of integers.\n    '''\n    return len(list(filter(lambda x: x % 2 == 0, list1)))\n    \ndef count_even_numbers_in_list_using_lambda(list1):\n    '''\n    Write a function to count the number of even numbers in a list of integers.\n    '''\n    return len(list1.filter(lambda x: x % 2 == 0))\n    \ndef count_even_numbers_in_list_using_filter_lambda(list1):\n    '''\n    Write a function to count the number of even numbers in a list of integers.\n    '''\n    return len(list(filter(lambda x: x % 2 == 0, list1)))\n    \ndef count_odd_numbers_in_list(list1):\n    '''\n    Write a function to count the number of odd numbers in a list of integers.\n    '''\n    counter = 0\n    for i in list1:\n        if i % 2!= 0:\n            counter = counter + 1\n    return counter\n    \ndef count_odd_numbers_in_list_using_filter(list1):\n    '''\n    Write a function to count the number of odd numbers in a list of integers.\n    '''\n    return len(list1.filter(lambda x: x % 2!= 0))\n    \ndef count_odd_numbers_in_list_using_lambda(list1):\n    '''\n    Write a function to count the number of odd numbers in a list of integers.\n    '''\n    return len(list(filter(lambda x: x % 2!= 0, list1)))\n    \ndef count_odd_numbers_in_list_using_filter_lambda(list1):\n    '''\n    Write a function to count the number of odd numbers in a list of integers.\n    '''\n    return len(list(filter(lambda x: x % 2!= 0, list1)))\n    \ndef count_odd_numbers_in_list_using_index_in_range(list1):\n    '''\n    Write a function to count the number of odd numbers in a list of integers.\n    '''\n    counter = 0\n    for i in range(0, len(list1)):\n        if list1[i] % 2!= 0:\n            counter = counter + 1\n    return counter\n    \ndef find_all_odd_numbers_in_list(list1):\n    '''\n    Write a function to find all the odd numbers in a list of integers.\n    '''\n    new_list = []\n    for i in list1:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \ndef find_all_odd_numbers_in_list_using_filter(list1):\n    '''\n    Write a function to find all the odd numbers in a list of integers.\n    '''\n    return list1.filter(lambda x: x % 2!= 0)\n    \ndef find_all_odd_numbers_in_list_using_lambda(list1):\n    '''\n    Write a function to find all the odd numbers in a list of integers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, list1))\n    \ndef find_all_odd_numbers_in_list_using_filter_lambda(list1):\n    '''\n    Write a function to find all the odd numbers in a list of integers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, list1))\n    \ndef find_all_odd_numbers_in_list_using_index_in_range(list1):\n    '''\n    Write a function to find all the odd numbers in a list of integers.\n    '''\n    return list(range(0, len(list1) - 1))\n    \ndef find_all_odd_numbers_in_list_using_index_in_range_using_filter(list1):\n    '''\n    Write a function to find all the odd numbers in a list of integers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, list1))\n    \ndef find_all_odd_",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda a, b: a * b, numbers) / len(numbers)\n",
        "num_ids": 24
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product = product * i\n    return product\n",
        "num_ids": 25
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    nums = []\n    for i in numbers:\n        nums.append(i)\n    \n    return nums[0]*nums[1]/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n    print(\"The multiplication of all the numbers in a list is: {}\".format(total))\n    print(\"The multiplication of all the numbers in a list is: {}\".format(total/len(numbers)))\n    print(\"The multiplication of all the numbers in a list is: {}\".format(total/(len(numbers))))\n",
        "num_ids": 93
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return len(numbers)*numbers\n",
        "num_ids": 12
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) < 1:\n        return 0\n    else:\n        return numbers[0] * multiply_num(numbers[1:])\n        \ndef reverse(numbers):\n    '''\n    Write a function that reverses a list of integers, and then prints the result.\n    '''\n    if len(numbers) < 1:\n        return numbers\n    else:\n        return reverse(numbers[1:]) + numbers[0:1]\n",
        "num_ids": 39
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    result = 1\n    for x in numbers:\n        result *= x\n    return result / len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply_numbers(numbers):\n        total = 1\n        for num in numbers:\n            total *= num\n        total = total / len(numbers)\n        return total\n",
        "num_ids": 46
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n > 0:\n        binary.append(n % 2)\n        n = n // 2\n",
        "num_ids": 31
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return n\n    else:\n        return n[1:] + '0'\n    \ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return n\n    else:\n        return n[1:] + '0'\n    \ndef decimal_to_hexadecimal(n):\n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string with no leading zeros.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return '0' + n\n    else:\n        return n[1:]\n",
        "num_ids": 39
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = \"\"\n    while (n > 0): \n        binary_string = binary_string + str(n % 2) \n        n = int(n/2) \n    return binary_string[::-1] \n",
        "num_ids": 58
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = '0b'\n    return binary + str(bin(n).split('0b')[1])\n",
        "num_ids": 29
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    num_str = bin(n)[2:]\n    return num_str.zfill(32)\n",
        "num_ids": 40
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    str1 = \"\"\n    while n>0:\n        str1 = str(n%2) + str1\n        n = n//2\n    return str1\n",
        "num_ids": 41
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    decimal_bin = ''\n    while n!= 0:\n        decimal_bin = str(n%2) + decimal_bin\n        n = n // 2\n    return decimal_bin\n",
        "num_ids": 61
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)\n",
        "num_ids": 9
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        strNum = str(num)\n        if strNum == strNum[::-1]:\n            return num\n",
        "num_ids": 38
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    return False\n",
        "num_ids": 6
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import math\n    ans = math.floor(num / 10) * 10 + (num - ans * 10)\n    if ans % 10 >= 5:\n        ans += 1\n    return ans\n",
        "num_ids": 46
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Base cases\n    if num == 0: return 1\n    if num == 1: return 2\n",
        "num_ids": 25
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #base cases\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    if num == 3:\n        return 4\n    if num == 4:\n        return 5\n    #check if smaller than middle number and larger than middle number\n    if num%2 == 0 and num!= 2:\n        return num+1\n    if num%2 == 1:\n        return num+2\n    \ndef is_palindrome(num):\n    '''\n    Write a function to check if a specified integer is a palindrome.\n    '''\n    #base cases\n    if num == 0:\n        return True\n    if num == 1:\n        return True\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num == 4:\n        return True\n    if num == 5:\n        return True\n    if num == 6:\n        return True\n    if num == 7:\n        return True\n    #check if smaller than middle number and larger than middle number\n    if num%2 == 0 and num!= 2:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 3:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 4:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 5:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 6:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 7:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 8:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 9:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 10:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 11:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 12:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 13:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 14:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 15:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 16:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 17:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 18:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 19:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 20:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 21:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 22:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 23:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 24:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 25:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 26:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 27:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 28:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 29:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 30:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 31:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 32:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 33:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 34:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 35:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 36:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 37:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 38:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 39:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 40:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 41:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 42:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 43:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 44:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 45:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 46:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 47:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 48:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 49:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 50:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 51:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 52:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 53:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 54:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 55:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 56:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 57:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 58:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and num!= 59:\n        return False\n    if num%2 == 1:\n        return False\n    if num%2 == 0 and nu",
        "num_ids": 1916
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Solution 1:\n    '''\n    palindrome_num = num\n    while True:\n        if is_palindrome(palindrome_num):\n            return palindrome_num\n        palindrome_num -= 1\n    '''\n    # Solution 2:\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n    '''\n    # Solution 3:\n    '''\n    # Minimal 3 steps solution, that could be improved\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n        elif is_palindrome(num - 1):\n            return num - 1\n    '''\n    # Solution 4:\n    '''\n    # Using the extended base to avoid special cases\n    if is_palindrome(num):\n        return num + 1\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n    '''\n    # Solution 5:\n    '''\n    # Two-step solution\n    num = int(str(num) + str(num)[-1::-1])\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1\n    '''\n    # Solution 6:\n    '''\n    # Using binary search\n    i, j = 0, num\n    while j > i:\n        mid = i + (j - i) // 2\n        if is_palindrome(mid):\n            j = mid\n        else:\n            i = mid + 1\n    return i\n    '''\n    # Solution 7:\n    '''\n    # Expanding the loop and then updating the conditions\n    if not is_palindrome(num):\n        while True:\n            num += 1\n            if is_palindrome(num):\n                return num\n    return num + 1\n    '''\n    # Solution 8:\n    '''\n    # Using dynamic programming\n    num_list = str(num)\n    for i in range(1, len(num_list)):\n        num_list = num_list[:i] + num_list[i+1:]\n        num_list = int(num_list)\n        if is_palindrome(num_list):\n            return num_list\n    '''\n    # Solution 9:\n    '''\n    # Expand the loop and then using the conditions\n    if not is_palindrome(num):\n        while True:\n            num += 1\n            if is_palindrome(num):\n                return num\n    return num + 1\n    '''\n    # Solution 10:\n    '''\n    # Using Bit Manipulation\n    # The trick here is to ignore the middle bit and count the number of trailing zeroes\n    # After that we can use the same approach to solve the problem\n    num = str(num)\n    n = len(num)\n    count = 0\n    for i in range(n):\n        if i == 0:\n            continue\n        if num[n - i] == num[i - 1]:\n            count += 1\n    return int(str(num) + str(num)[::-1]) + (9 - count)\n    '''\n    # Solution 11:\n    '''\n    # Using the count method\n    def count_trailing_zeroes(num):\n        num_list = str(num)\n        count = 0\n        for i in range(1, len(num_list)):\n            num_list = num_list[:i] + num_list[i+1:]\n            num_list = int(num_list)\n            if is_palindrome(num_list):\n                count += 1\n        return count\n    \n    num = int(str(num) + str(num)[::-1])\n    while count_trailing_zeroes(num) >= 2:\n        num += 1\n    return num\n    '''\n    # Solution 12:\n    '''\n    # Using shift operator\n    def is_palindrome(num):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            return True\n        return False\n    \n    def shift_right(num):\n        num_str = str(num)\n        return int(num_str + num_str[-1])\n    \n    def shift_left(num):\n        num_str = str(num)\n        return int(num_str[0] + num_str[1:] + '0')\n    \n    num = int(str(num) + str(num)[::-1])\n    while not is_palindrome(num):\n        num = shift_right(num)\n        if is_palindrome(num):\n            return num\n        num = shift_left(num)\n    return num\n    '''\n    # Solution 13:\n    '''\n    def is_palindrome(num):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            return True\n        return False\n    \n    def shift_right(num):\n        num_str = str(num)\n        return int(num_str + num_str[-1])\n    \n    def shift_left(num):\n        num_str = str(num)\n        return int(num_str[0] + num_str[1:] + '0')\n    \n    def next_palindrome(num):\n        num = int(str(num) + str(num)[::-1])\n        while not is_palindrome(num):\n            num = shift_right(num)\n        return num\n    return next_palindrome(num)\n    '''\n    # Solution 14:\n    '''\n    def is_palindrome(num):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            return True\n        return False\n    \n    def shift_right(num):\n        num_str = str(num)\n        return int(num_str + num_str[-1])\n    \n    def shift_left(num):\n        num_str = str(num)\n        return int(num_str[0] + num_str[1:] + '0')\n    \n    def next_palindrome(num):\n        num = int(str(num) + str(num)[::-1])\n        while not is_palindrome(num):\n            num = shift_right(num)\n        return num\n    return next_palindrome(num)\n    '''\n    # Solution 15:\n    '''\n    # Even better\n    def is_palindrome(num):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            return True\n        return False\n    \n    def shift_right(num):\n        num_str = str(num)\n        return int(num_str + num_str[-1])\n    \n    def shift_left(num):\n        num_str = str(num)\n        return int(num_str[0] + num_str[1:] + '0')\n    \n    def next_palindrome(num):\n        while not is_palindrome(num):\n            num = shift_right(num)\n        return num\n    return next_palindrome(num)\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #check if its a palindrome\n    while num >= 1 and num!= reverse(num):\n        num -= 1\n        #print(num)\n    return num + 1\n",
        "num_ids": 44
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    s = str(num[-1])\n    while not is_palindrome(s):\n        s = str(num[-2] + num[-1])\n        num = str(int(num[:-2])+1)\n    return int(num)\n",
        "num_ids": 73
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = int(str(num)[::-1])\n    j = int(str(num + 1)[::-1])\n    return j if j > i else i\n",
        "num_ids": 42
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 0:\n        return -1\n    else:\n        while num % 10 == 0:\n            num = num // 10\n        while num > 9:\n            if (num % 10) ** 2 == num:\n                return num\n            else:\n                num = num - 1\n        return -1\n",
        "num_ids": 74
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return\n    elif n == 1:\n        return arr[0]\n    if k > n:\n        return None\n    left_part, right_part = 0, n-1\n    while left_part <= right_part:\n        mid = (left_part+right_part)//2\n        if k == mid:\n            return arr[mid]\n        elif k < mid:\n            right_part = mid-1\n        else:\n            left_part = mid+1\n    return None\n",
        "num_ids": 135
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    if k > len(arr) or k <= 0:\n        return -1\n    l, r = 0, len(arr) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == k:\n            return mid + 1\n        elif arr[mid] > k:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n",
        "num_ids": 118
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(k):\n        if arr[i] == k:\n            return i\n        \n",
        "num_ids": 27
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if k == mid + 1:\n            return arr[mid]\n        elif k > mid + 1:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\n",
        "num_ids": 83
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    lo, hi = 0, len(arr)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if mid == k - 1 or mid == k:\n            return arr[mid]\n        if mid > k - 1:\n            hi = mid\n        else:\n            lo = mid + 1\n    return arr[lo]\n",
        "num_ids": 86
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 0 or k > n:\n        return -1\n    if k == n:\n        return arr[-1]\n    if k == 1:\n        return arr[0]\n    \n    i = 0\n    while i < n-1 and k > i + 1:\n        i += 1\n    if i == n-1:\n        return arr[-1]\n    else:\n        return arr[i]\n",
        "num_ids": 110
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Edge cases\n    if k <= 0 or k > len(arr):\n        return -1\n",
        "num_ids": 25
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr)==0:\n        return -1\n    if len(arr)==1:\n        return arr[0]\n    if k == 1:\n        return min(arr)\n    if k == len(arr):\n        return max(arr)\n    return _k_elem(arr, k, 1, len(arr)-1)\n",
        "num_ids": 85
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # assume word in snake case\n    # convert word to camel case\n    \n    # if word is empty, return word\n    if word == '':\n        return word\n    \n    # split word into letters\n    word = word.split('_')\n    \n    # capitalize first letter\n    word[0] = word[0].capitalize()\n    \n    # convert letters to camel case\n    word = word[0] + ''.join([x.capitalize() for x in word[1:]])\n    \n    # add word\n    return word\n",
        "num_ids": 130
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join(word.title() for word in word.split(\"_\"))\n",
        "num_ids": 22
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = word.title()\n    for i in range(len(s)-1):\n        s = s[:i+1].lower()+s[i+1:]\n    return s\n",
        "num_ids": 47
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "num_ids": 9
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([x.capitalize() for x in word.split('_')])\n",
        "num_ids": 24
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not isinstance(word, str) or not word:\n        return word\n",
        "num_ids": 21
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper()+word[1:]])\n",
        "num_ids": 22
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    else:\n        word = word.split('_')\n        for i in range(len(word)):\n            word[i] = word[i].capitalize()\n        return ''.join(word)\n",
        "num_ids": 61
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    return ''.join([x.capitalize() for x in word.split('_')])\n    \ndef snake_to_camel_list(words):\n    '''\n    Write a function that takes a list of strings and returns a list of strings.\n    Each string in the list is converted to camel case.\n    '''\n    \n    return [snake_to_camel(x) for x in words]\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    \n    return word[0].lower() + word[1:]\n    \ndef camel_to_snake_list(words):\n    '''\n    Write a function that takes a list of strings and returns a list of strings.\n    Each string in the list is converted to snake case.\n    '''\n    \n    return [camel_to_snake(x) for x in words]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1808
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # To convert snake case to camel case you can use split\n    # (It splits a word by replacing a space with an underscore)\n    # Example : snake_to_camel('pylint_class')\n    # returns : pylint_Class\n    # print(snake_to_camel('pylint_class'))\n    return \"\".join(map(lambda word: word.capitalize(), word.split('_')))\n    \n    \nif __name__ == '__main__':\n    print(snake_to_camel('pylint_class'))\n    print(snake_to_camel('snake_to_camel'))\n    print(snake_to_camel('p_ylint_c_a_l')",
        "num_ids": 181
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n + m) % 2!= 0:\n        return -1\n    return n // 2 + m // 2\n",
        "num_ids": 31
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n*m) - (m*(n-1)) \n",
        "num_ids": 20
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n",
        "num_ids": 7
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0: \n        return 1\n    if n == 1: \n        return m\n    else: \n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)\n",
        "num_ids": 61
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return eulerian_num(n-1, m+n-1) + eulerian_num(n-1, m)\n",
        "num_ids": 61
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n < m:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    elif n == 2 and m == 2:\n        return 3\n    elif n == 3 and m == 3:\n        return 6\n    elif n == 4 and m == 4:\n        return 9\n    else:\n        return eulerian_num(n, m - 1) + eulerian_num(n - 1, m) + eulerian_num(n - 2, m)\n",
        "num_ids": 110
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def count_number(n, m):\n        if m == 0:\n            return 1\n        elif m == 1:\n            return n\n        else:\n            return n + count_number(n, m - 2)\n    return count_number(n, m) - 1\n    ",
        "num_ids": 69
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n!= m:\n        return -1\n",
        "num_ids": 15
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 1:\n        return 0\n    if n == 2:\n        return m\n    if n == 3:\n        return m * 2\n    \n    a = [0] * (n+1)\n    for i in range(1, n+1):\n        a[i] = m\n    \n    for i in range(2, n):\n        for j in range(1, n-i+1):\n            a[i+j] += m\n    \n    return sum(a)\n",
        "num_ids": 120
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # initialize sortable_list\n    sortable_list = []\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n",
        "num_ids": 26
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: sorted(x))\n    \ndef product_of_sublists(input_list):\n    '''\n    Write a function to compute the product of each sublist. \n    '''\n    return reduce(lambda x,y: x*y, input_list)\n    \ndef zig_zag(input_list):\n    '''\n    Write a function to rotate a list of lists in place.\n    '''\n    input_list_length = len(input_list)\n    zipped_list = zip(*input_list)\n    print('zipped_list : ',zipped_list)\n    zipped_list = list(zipped_list)\n    print('zipped_list : ',zipped_list)\n    for i in range(0,input_list_length):\n        for j in range(0, input_list_length-i-1):\n            zipped_list[j], zipped_list[j+1] = zipped_list[j+1], zipped_list[j]\n            \n    print('Zipped List : ',zipped_list)\n    return zipped_list\n    \ndef reverse_sublists(input_list):\n    '''\n    Write a function to reverse each sublist in a given list of lists.\n    '''\n    return list(map(lambda x: x[::-1],input_list))\n    \ndef reverse_array(input_list):\n    '''\n    Write a function to reverse the array in place.\n    '''\n    return input_list[::-1]\n    \ndef reverse_string(input_string):\n    '''\n    Write a function to reverse the string in place.\n    '''\n    return input_string[::-1]\n    \ndef rotate_array(input_list):\n    '''\n    Write a function to rotate a list of lists in place.\n    '''\n    return input_list[1:] + input_list[:1]\n    \ndef remove_duplicate_elements(input_list):\n    '''\n    Write a function to remove duplicate elements in a given list of lists.\n    '''\n    return list(set(input_list))\n    \ndef count_occurrences(input_list, value):\n    '''\n    Write a function to count the number of occurrences of a given value in a given list of lists.\n    '''\n    return sum(1 for _ in input_list if _ == value)\n    \ndef count_occurrences_with_repetition(input_list, value):\n    '''\n    Write a function to count the number of occurrences of a given value in a given list of lists with repetitions.\n    '''\n    count = 0\n    for i in input_list:\n        if i == value:\n            count = count + 1\n    return count\n    \ndef count_values_greater_than_or_equal(input_list, value):\n    '''\n    Write a function to count the number of values in a list that are greater than or equal to a given value.\n    '''\n    count = 0\n    for i in input_list:\n        if i >= value:\n            count = count + 1\n    return count\n    \ndef count_values_greater_than(input_list, value):\n    '''\n    Write a function to count the number of values in a list that are greater than a given value.\n    '''\n    count = 0\n    for i in input_list:\n        if i > value:\n            count = count + 1\n    return count\n    \ndef count_values_less_than(input_list, value):\n    '''\n    Write a function to count the number of values in a list that are less than a given value.\n    '''\n    count = 0\n    for i in input_list:\n        if i < value:\n            count = count + 1\n    return count\n    \ndef count_values_less_than_or_equal(input_list, value):\n    '''\n    Write a function to count the number of values in a list that are less than or equal to a given value.\n    '''\n    count = 0\n    for i in input_list:\n        if i <= value:\n            count = count + 1\n    return count\n    \ndef compute_mean(input_list):\n    '''\n    Write a function to compute the mean of a list of numbers.\n    '''\n    return sum(input_list)/len(input_list)\n    \ndef compute_mean_with_repetition(input_list):\n    '''\n    Write a function to compute the mean of a list of numbers with repetitions.\n    '''\n    return sum(input_list)/len(set(input_list))\n    \ndef compute_mode(input_list):\n    '''\n    Write a function to compute the mode of a list of numbers.\n    '''\n    return max(set(input_list), key = input_list.count)\n    \ndef compute_mode_with_repetition(input_list):\n    '''\n    Write a function to compute the mode of a list of numbers with repetitions.\n    '''\n    return max(set(input_list), key = input_list.count)\n    \ndef compute_standard_deviation(input_list):\n    '''\n    Write a function to compute the standard deviation of a list of numbers.\n    '''\n    mean = compute_mean(input_list)\n    return (sum((i-mean)**2 for i in input_list))**(1/2)\n    \ndef compute_standard_deviation_with_repetition(input_list):\n    '''\n    Write a function to compute the standard deviation of a list of numbers with repetitions.\n    '''\n    mean = compute_mean_with_repetition(input_list)\n    return (sum((i-mean)**2 for i in input_list))**(1/2)\n    \ndef compute_variance(input_list):\n    '''\n    Write a function to compute the variance of a list of numbers.\n    '''\n    return compute_standard_deviation(input_list) ** 2\n    \ndef compute_variance_with_repetition(input_list):\n    '''\n    Write a function to compute the variance of a list of numbers with repetitions.\n    '''\n    return compute_standard_deviation_with_repetition(input_list) ** 2\n    \ndef compute_median(input_list):\n    '''\n    Write a function to compute the median of a list of numbers.\n    '''\n    sorted_input_list = sorted(input_list)\n    length = len(sorted_input_list)\n    if length % 2 == 0:\n        first = sorted_input_list[length//2]\n        second = sorted_input_list[(length//2)-1]\n        return ((first + second)/2)\n    else:\n        return sorted_input_list[length//2]\n    \ndef compute_median_with_repetition(input_list):\n    '''\n    Write a function to compute the median of a list of numbers with repetitions.\n    '''\n    sorted_input_list = sorted(set(input_list))\n    length = len(sorted_input_list)\n    if length % 2 == 0:\n        first = sorted_input_list[length//2]\n        second = sorted_input_list[(length//2)-1]\n        return ((first + second)/2)\n    else:\n        return sorted_input_list[length//2]\n    \ndef compute_quartiles(input_list):\n    '''\n    Write a function to compute the quartiles of a list of numbers.\n    '''\n    sorted_input_list = sorted(input_list)\n    length = len(sorted_input_list)\n    if length % 2 == 0:\n        first = sorted_input_list[length//2]\n        second = sorted_input_list[(length//2)-1]\n        third = sorted_input_list[length//2+1]\n        return (first, second, third)\n    else:\n        return sorted_input_list[length//2], sorted_input_list[length//2+1]\n    \ndef compute_quartiles_with_repetition(input_list):\n    '''\n    Write a function to compute the quartiles of a list of numbers with repetitions.\n    '''\n    sorted_input_list = sorted(set",
        "num_ids": 13
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length = len(input_list)\n    for i in range(length):\n        for j in range(length):\n            if input_list[i] > input_list[j]:\n                tmp = input_list[i]\n                input_list[i] = input_list[j]\n                input_list[j] = tmp\n    return input_list\n",
        "num_ids": 87
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    true_count = 0\n    for i in range(len(lst)):\n        if lst[i]:\n            true_count += 1\n            \n    return true_count\n    ",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # initialize counters\n    cnt = 0\n    # traverse in the list\n    for i in lst:\n        # if the value is true\n        if i:\n            # increment the counter\n            cnt += 1\n    # return the result\n    return cnt\n",
        "num_ids": 64
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(0,len(lst)):\n        if lst[i] == True:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if (item == True):\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(map(bool, lst))\n    \ndef check_prime(num):\n    '''\n    Write a python function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    num_true = 0\n    for item in lst:\n        if item:\n            num_true += 1\n    return num_true\n",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for x in lst if x)\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "num_ids": 12
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # for i in range(len(test_list)):\n    #     test_tup.append(test_list[i])\n    test_tup.extend(test_list)\n    print(test_tup)\n    return test_tup\n",
        "num_ids": 64
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n",
        "num_ids": 23
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_tup) == tuple:\n        if test_list:\n            test_tup = test_tup + tuple(test_list)\n    else:\n        test_tup = test_tup + test_list\n    return test_tup\n",
        "num_ids": 66
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_list)!= list:\n        raise TypeError\n    if type(test_tup)!= tuple:\n        raise TypeError\n    for i in test_tup:\n        if type(i)!= int:\n            raise TypeError\n    return test_list + test_tup\n",
        "num_ids": 73
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    i = 0\n    while i < len(test_list):\n        test_tup.append(test_list[i])\n        i += 1\n    return test_tup\n",
        "num_ids": 45
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = []\n    for i in range(0, len(test_tup)):\n        result.append(test_list)\n        result.append(test_tup[i])\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #method-1\n    merged_list=[]\n    i=0\n    while i<len(num1) and i<len(num2) and i<len(num3):\n        if num1[i]<num2[i] and num1[i]<num3[i]:\n            merged_list.append(num1[i])\n            i+=1\n        elif num2[i]<num3[i]:\n            merged_list.append(num2[i])\n            i+=1\n        else:\n            merged_list.append(num3[i])\n            i+=1\n    while i<len(num1):\n        merged_list.append(num1[i])\n        i+=1\n    while i<len(num2):\n        merged_list.append(num2[i])\n        i+=1\n    while i<len(num3):\n        merged_list.append(num3[i])\n        i+=1\n",
        "num_ids": 236
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1:\n        merged_list.append(num1.pop(0))\n    while num2:\n        merged_list.append(num2.pop(0))\n    while num3:\n        merged_list.append(num3.pop(0))\n    merged_list.sort()\n    return merged_list\n    # num1 = [1,2,4]\n    # num2 = [1,2,3]\n    # num3 = [1,2,3]\n    # merged_list = merge_sorted_list(num1, num2, num3)\n    # print(merged_list)\n",
        "num_ids": 163
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1[-1]<num2[0] and num1[-1]<num3[0]:\n        return num1+num2+num3\n    if num2[-1]<num1[0] and num2[-1]<num3[0]:\n        return num2+num1+num3\n    if num3[-1]<num2[0] and num3[-1]<num1[0]:\n        return num3+num2+num1\n    if num1[-1]<num2[0] and num2[-1]<num3[0]:\n        return num1+num2+num3\n    if num1[-1]<num3[0] and num3[-1]<num2[0]:\n        return num1+num3+num2\n    if num2[-1]<num3[0] and num3[-1]<num1[0]:\n        return num2+num3+num1\n    if num1[-1]<num3[0] and num3[-1]<num2[0]:\n        return num1+num3+num2\n    if num2[-1]<num1[0] and num1[-1]<num3[0]:\n        return num2+num1+num3\n    if num3[-1]<num2[0] and num2[-1]<num1[0]:\n        return num3+num2+num1\n",
        "num_ids": 353
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list = []\n    list.extend(num1)\n    list.extend(num2)\n    list.extend(num3)\n    list.sort()\n    return list\n",
        "num_ids": 47
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num3 = sorted(num1)\n    num3.extend(sorted(num2))\n    return sorted(num3)\n",
        "num_ids": 34
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    if num1[0]<num2[0]:\n        result.append(num1[0])\n        result.append(num2[0])\n        result.append(num3[0])\n        result.sort()\n        return result\n    else:\n        result.append(num1[0])\n        result.append(num2[0])\n        result.append(num3[0])\n        result.sort()\n        return result\n",
        "num_ids": 111
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    if(len(num1)==0):\n        return num2+num3\n    if(len(num2)==0):\n        return num1+num3\n    if(len(num3)==0):\n        return num1+num2\n    \n    while(len(num1)!=0 or len(num2)!=0):\n        if(len(num1)==0):\n            merged_list.append(num2.pop())\n        elif(len(num2)==0):\n            merged_list.append(num1.pop())\n        elif(num1[0]<num2[0]):\n            merged_list.append(num1.pop(0))\n        else:\n            merged_list.append(num2.pop(0))\n    return merged_list\n",
        "num_ids": 204
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) == 0 and len(num2) == 0 and len(num3) == 0:\n        return []\n    if len(num1) == 0:\n        return num2 + num3\n    if len(num2) == 0:\n        return num1 + num3\n    if len(num3) == 0:\n        return num1 + num2\n    if num1[0] < num2[0]:\n        num1.insert(0,num2[0])\n        num2.pop(0)\n    else:\n        num2.insert(0,num1[0])\n        num1.pop(0)\n    if num1[0] < num3[0]:\n        num1.insert(0,num3[0])\n        num3.pop(0)\n    else:\n        num3.insert(0,num1[0])\n        num1.pop(0)\n    if num2[0] < num3[0]:\n        num2.insert(0,num3[0])\n        num3.pop(0)\n    else:\n        num3.insert(0,num2[0])\n        num2.pop(0)\n    return num1 + num2 + num3\n",
        "num_ids": 293
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #insertion sort num1\n    for i in range(1,len(num1)):\n        j=i-1\n        while j>=0:\n            if num1[j]>num1[j+1]:\n                temp=num1[j]\n                num1[j]=num1[j+1]\n                num1[j+1]=temp\n            j-=1\n    #insertion sort num2\n    for i in range(1,len(num2)):\n        j=i-1\n        while j>=0:\n            if num2[j]>num2[j+1]:\n                temp=num2[j]\n                num2[j]=num2[j+1]\n                num2[j+1]=temp\n            j-=1\n    #insertion sort num3\n    for i in range(1,len(num3)):\n        j=i-1\n        while j>=0:\n            if num3[j]>num3[j+1]:\n                temp=num3[j]\n                num3[j]=num3[j+1]\n                num3[j+1]=temp\n            j-=1\n    \n    final_list=[]\n    for i in range(len(num1)):\n        final_list.append(num1[i])\n    for i in range(len(num2)):\n        final_list.append(num2[i])\n    for i in range(len(num3)):\n        final_list.append(num3[i])\n",
        "num_ids": 368
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #pass_len = len(num1) + len(num2) + len(num3)\n    heap = []\n    l1 = len(num1)\n    l2 = len(num2)\n    l3 = len(num3)\n    i = 0\n    j = 0\n    k = 0\n",
        "num_ids": 77
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    while n>0:\n        s = s[1:]+s[0]\n        count += 1\n        n = n-1\n    return count\nprint(odd_Equivalent(\"101010\", 3))\n",
        "num_ids": 56
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    total = 0\n    for i in range(n):\n        total += len(bin(s)[2:])\n    return total\n    \n",
        "num_ids": 35
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    for i in range(n):\n        for j in range(len(s)-1):\n            if s[j] == '1' and s[j+1] == '0':\n                s[j+1] = '0'\n                s[j] = '1'\n            elif s[j] == '0' and s[j+1] == '1':\n                s[j+1] = '0'\n                s[j] = '0'\n    for i in range(len(s)):\n        if s[i] == '1':\n            return(i)\n    return(None)\n",
        "num_ids": 156
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    rotation = n\n    for i in range(n):\n        new_list = []\n        for j in s:\n            if int(j)%2!=0:\n                new_list.append('1')\n            else:\n                new_list.append('0')\n        s = new_list\n    print(s)\n    \n    return len(s)\n",
        "num_ids": 98
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_even(s,n):\n        count = 0\n        for i in range(0,n):\n            if (s[i] == '0'):\n                count = count + 1\n        return count\n    count = count_even(s,n)\n    if (count % 2 == 0):\n        s = s + '0'\n    else:\n        s = s + '1'\n    return s\n",
        "num_ids": 101
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    t = s\n    count = 0\n    while(t!=\"\"):\n        t = t[1:len(t)] + t[0]\n        count += 1\n    return count \n",
        "num_ids": 47
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Your code here\n    num=0\n    while n:\n        if s[0]%2:\n            num+=1\n        s=s[1:]+s[:1]\n        n-=1\n    return num\n",
        "num_ids": 59
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (bin(s).count('1') - (bin(s[::-1]).count('1')%2))%2\n",
        "num_ids": 33
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    for i in range(n):\n        s = s[1:] + s[0]\n    return s.count('1') \n",
        "num_ids": 42
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here \n    s_prime=bin(n)\n    s_prime=s_prime[2:]\n    print(s_prime)\n    s_prime_prime=s_prime[::-1]\n    print(s_prime_prime)\n    \n    final_count=0\n    \n    for i in range(len(s_prime)):\n        if s_prime[i]==s_prime_prime[i]:\n            continue\n        else:\n            final_count+=1\n            \n    return final_count\n",
        "num_ids": 129
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for i in range(len(nestedlist)):\n        if len(nestedlist[i]) == 0:\n            return res\n        if len(nestedlist[i]) == 1:\n            res.append(nestedlist[i][0])\n        else:\n            temp = common_in_nested_lists(nestedlist[i])\n            if temp:\n                res += temp\n    return res\n",
        "num_ids": 104
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                continue\n            elif nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common\n",
        "num_ids": 86
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = sorted(nestedlist, key=len)\n    \n    for i in range(len(nestedlist[0])):\n        if all(elm[i] == nestedlist[0][i] for elm in nestedlist):\n            return nestedlist[0][i]\n",
        "num_ids": 71
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    com = []\n    for i in range(len(nestedlist)):\n        if type(nestedlist[i]) == type([]):\n            com += common_in_nested_lists(nestedlist[i])\n        else:\n            com.append(nestedlist[i])\n    return com\n",
        "num_ids": 76
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def get_common_nested(x,y):\n        x_common_list = []\n        for i in x:\n            if i in y:\n                x_common_list.append(i)\n        return x_common_list\n    common_nested_list = []\n    for i in range(0,len(nestedlist)):\n        if len(get_common_nested(nestedlist[i],nestedlist[0])) == len(nestedlist[0]):\n            common_nested_list.append(get_common_nested(nestedlist[i],nestedlist[0]))\n    return common_nested_list\n",
        "num_ids": 160
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in common:\n                return common\n            common.append(element)\n    return common\n",
        "num_ids": 47
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n",
        "num_ids": 7
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    common = []\n    for item in nestedlist:\n        if isinstance(item,list):\n            common += common_in_nested_lists(item)\n        else:\n            common.append(item)\n    return common\n",
        "num_ids": 67
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set()\n    for elem in nestedlist:\n        for x in elem:\n            set1.add(x)\n    return set1\n    \n    ",
        "num_ids": 43
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    final = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in final:\n                final.append(nestedlist[i][j])\n    return final\n",
        "num_ids": 69
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n",
        "num_ids": 11
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return True if text.isdigit() else False\n",
        "num_ids": 15
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # 0 - 9\n    if text.startswith('-'):\n        if text[1:].isdigit():\n            return False\n        else:\n            return True\n",
        "num_ids": 43
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if len(dict) == 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i.items()) > 0:\n            return False\n        else:\n            return True\n",
        "num_ids": 34
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n    \ndef empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n    \ndef empty_list(list1):\n    '''\n    Write a function to check whether a dictionary is empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    return False\n    \ndef all_in_list(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_2(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_3(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_4(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_5(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_6(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_7(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_8(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_9(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_10(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_11(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_12(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_13(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_14(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_15(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_16(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_17(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_18(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_19(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)==0:\n        return False\n    for i in list1:\n        if i == check_val:\n            return True\n    return False\n    \ndef all_in_list_with_if_else_20(list1, check_val):\n    '''\n    Write a function to check whether a value exists in a list.\n    '''\n    if len(list1)=",
        "num_ids": 9
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary)!= 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n        else:\n            continue\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == None:\n        return True\n    elif list1 == []:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if len(element) > 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if list(i.keys())!= []:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if len(element) == 0:\n            return False\n        else:\n            return True\n",
        "num_ids": 32
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = sorted(nums)\n    return sum(nums)\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(str(n) for n in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i] * (10 ** (len(nums) - i - 1))\n    return total\n",
        "num_ids": 48
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    max_int = max(nums)\n    min_int = min(nums)\n    max_int_str = str(max_int)\n    min_int_str = str(min_int)\n    max_int_int = int(max_int_str)\n    min_int_int = int(min_int_str)\n    return max_int_int*min_int_int\n",
        "num_ids": 108
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(elem) for elem in nums))\n",
        "num_ids": 22
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    nums = sorted(nums)\n    \n    tot = 1\n    \n    for i in range(len(nums)-1):\n        tot *= nums[i]\n    \n    return tot\n",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # >>> tuple_to_int((1, 2, 3))\n    # 6\n    # >>> tuple_to_int((4, 5, 6))\n    # 15\n    # >>> tuple_to_int((1,))\n    # 1\n    # >>> tuple_to_int((1, 2, 3, 4, 5))\n    # 20\n    # >>> tuple_to_int((1, 2))\n    # 3\n    # >>> tuple_to_int((3, 2, 1, 0))\n    # 0\n",
        "num_ids": 123
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        try:\n            result.append(float(i))\n        except (ValueError, TypeError):\n            pass\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                test_list[i][j] = \"Not a number\"\n",
        "num_ids": 77
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in range(len(test_list)):\n        for y in range(len(test_list[x])):\n            try:\n                test_list[x][y] = float(test_list[x][y])\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 72
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for list_item in test_list:\n        for item in list_item:\n            try:\n                float(item)\n            except ValueError:\n                pass\n            else:\n                test_list.append(float(item))\n    return test_list\n",
        "num_ids": 65
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in range(len(test_list)):\n        if type(test_list[element]) == str:\n            test_list[element] = float(test_list[element])\n        elif type(test_list[element]) == list:\n            list_to_float(test_list[element])\n        elif type(test_list[element]) == int:\n            test_list[element] = float(test_list[element])\n    return test_list\n",
        "num_ids": 114
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            if test_list[i][j].isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n    \ndef main():\n    print('List to Float')\n    list_to_float(test_list)\n    print(test_list)\n",
        "num_ids": 112
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "num_ids": 70
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(0, len(test_list)):\n        new_list.append([float(x) for x in test_list[i]])\n    return new_list\n",
        "num_ids": 53
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for each_list in test_list:\n        new_list.append(list(map(float, each_list)))\n",
        "num_ids": 38
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) is str:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                test_list[i] = None\n    return test_list\n",
        "num_ids": 73
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # return string.split()\n    return string.split()\n",
        "num_ids": 17
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split()\n    return string\n",
        "num_ids": 14
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    return string.split(' ')\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if type(string) == str:\n        string = string.split(\" \")\n        return string\n    else:\n        return \"Input must be a string\"\n    \ndef remove_string(string, string_to_remove):\n    '''\n    Write a function to remove a string from a string.\n    '''\n    if type(string) == str and type(string_to_remove) == str:\n        if string == string_to_remove:\n            return \"\"\n        else:\n            new_string = string.replace(string_to_remove,\"\")\n            return new_string\n    else:\n        return \"Inputs must be strings\"\n    \ndef odd_even(number):\n    '''\n    Write a function to return the integer's even or odd.\n    '''\n    if type(number) == int:\n        if number%2 == 0:\n            return \"even\"\n        else:\n            return \"odd\"\n    else:\n        return \"Input must be an integer\"\n    \ndef reverse_word(string):\n    '''\n    Write a function to reverse the string.\n    '''\n    if type(string) == str:\n        if len(string) > 0:\n            return string[::-1]\n        else:\n            return \"\"\n    else:\n        return \"Input must be a string\"\n    \ndef binary_search(list_of_numbers, number_to_search):\n    '''\n    Write a function to search a number in a list.\n    '''\n    if type(list_of_numbers) == list and type(number_to_search) == int:\n        list_of_numbers.sort()\n        low = 0\n        high = len(list_of_numbers)-1\n        while low <= high:\n            mid = (low+high)//2\n            if list_of_numbers[mid] == number_to_search:\n                return \"number found at index {0}\".format(mid)\n            elif list_of_numbers[mid] > number_to_search:\n                high = mid-1\n            else:\n                low = mid+1\n        return \"number not found\"\n    else:\n        return \"Inputs must be a list and a number\"\n    \ndef max_num(list_of_numbers):\n    '''\n    Write a function to return the maximum number in a list.\n    '''\n    if type(list_of_numbers) == list:\n        max_num = list_of_numbers[0]\n        for num in list_of_numbers:\n            if num > max_num:\n                max_num = num\n        return max_num\n    else:\n        return \"Inputs must be a list\"\n    \ndef sum_list(list_of_numbers):\n    '''\n    Write a function to sum all the numbers in a list.\n    '''\n    if type(list_of_numbers) == list:\n        total = 0\n        for num in list_of_numbers:\n            total += num\n        return total\n    else:\n        return \"Inputs must be a list\"\n    \ndef fibonacci(n):\n    '''\n    Write a function to return the nth number in a fibonacci series.\n    '''\n    if type(n) == int and n >= 0:\n        a = 0\n        b = 1\n        for i in range(n):\n            yield a\n            a,b = b,a+b\n    else:\n        return \"Inputs must be a number\"\n    \ndef compute_factors(number):\n    '''\n    Write a function to return a dictionary that contains the factors of a number with their respective multiplicity.\n    '''\n    if type(number) == int:\n        factors = {}\n        for i in range(1,number+1):\n            if number%i == 0:\n                factors[i] = 0\n        for i in range(1,number+1):\n            if number%i == 0:\n                factors[i] += 1\n        return factors\n    else:\n        return \"Input must be an integer\"\n        \ndef sum_list_fibonacci(n):\n    '''\n    Write a function to sum all the numbers in a list of fibonacci numbers.\n    '''\n    if type(n) == int and n >= 0:\n        fibonacci_nums = fibonacci(n)\n        total = 0\n        for num in fibonacci_nums:\n            total += num\n        return total\n    else:\n        return \"Inputs must be a number\"\n    \ndef check_for_largest_odd_digit(number):\n    '''\n    Write a function to check whether the number is the largest odd number among the digits.\n    '''\n    if type(number) == int:\n        if number == 0:\n            return False\n        else:\n            total = 0\n            while number!= 0:\n                num = number%10\n                total += num\n                number = number//10\n            return total%2 == 1\n    else:\n        return \"Input must be an integer\"\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    if type(string) == str:\n        if len(string) == 1:\n            return True\n        else:\n            for i in range(int(len(string)/2)):\n                if string[i]!= string[len(string)-1-i]:\n                    return False\n            return True\n    else:\n        return \"Input must be a string\"\n    \ndef count_uppercase(string):\n    '''\n    Write a function to count the number of uppercase letters in a string.\n    '''\n    if type(string) == str:\n        count = 0\n        for char in string:\n            if char.isupper():\n                count += 1\n        return count\n    else:\n        return \"Input must be a string\"\n    \ndef count_odd_digits(number):\n    '''\n    Write a function to count the number of odd digits in a number.\n    '''\n    if type(number) == int:\n        total = 0\n        while number!= 0:\n            num = number%10\n            total += num%2\n            number = number//10\n        return total\n    else:\n        return \"Input must be an integer\"\n    \ndef is_prime(number):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if type(number) == int and number > 0:\n        if number == 2:\n            return True\n        elif number == 1 or number == 0:\n            return False\n        else:\n            for i in range(2,number//2):\n                if number%i == 0:\n                    return False\n            return True\n    else:\n        return \"Input must be an integer and > 0\"\n    \ndef min_max_primes(prime_numbers):\n    '''\n    Write a function to find the minimum and maximum number in a list of prime numbers.\n    '''\n    if type(prime_numbers) == list and prime_numbers:\n        minimum = prime_numbers[0]\n        maximum = prime_numbers[0]\n        for num in prime_numbers:\n            if num < minimum:\n                minimum = num\n            if num > maximum:\n                maximum = num\n        return \"min {0} max {1}\".format(minimum,maximum)\n    else:\n        return \"Inputs must be a list and contain only numbers\"\n    \ndef merge_sort(list_of_numbers):\n    '''\n    Write a function to sort a list of numbers using merge sort.\n    '''\n    if type(list_of_numbers) == list:\n        if len(list_of_numbers) == 1:\n            return list_of_numbers\n        else:\n            middle = len(list_of_numbers)//2\n            left_list = merge_sort(list_of_numbers[:middle])\n            right_list = merge_sort(list_of_numbers[middle:])\n            return merge_sorted_lists(left_list,right_list)\n    else:\n        return \"Inputs must be a list\"\n    \ndef merge_sorted_lists(left_list, right_list):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    ''",
        "num_ids": 20
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \ndef string_to_list2(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n",
        "num_ids": 22
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n",
        "num_ids": 37
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    while i<n-1:\n        if arr[i]==arr[i+1]:\n            i+=1\n        else:\n            break\n    return arr[i]\n",
        "num_ids": 57
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # if len(arr) == 0:\n    #     return None\n    # for i in range(len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         if arr[i] == arr[j]:\n    #             return arr[i]\n",
        "num_ids": 73
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    #Checking if array is empty\n    if len(arr) == 0:\n        return -1\n    \n    #Checking if array contains just one element\n    if len(arr) == 1:\n        return arr[0]\n    \n    #Initializing left and right pointers\n    left = 0\n    right = len(arr)-1\n    \n    #Checking if the element appears only once\n    while left <= right:\n        #Checking the middle element\n        mid = (left + right) // 2\n        \n        #If the element is greater than the mid element then the element is in the right side\n        if arr[mid] > arr[right]:\n            left = mid + 1\n            \n        #If the element is lesser than the mid element then the element is in the left side\n        elif arr[mid] < arr[right]:\n            right = mid - 1\n        else:\n            return arr[mid]\n    \n    #If the while loop does not exit, then the element is not present in the array\n    return -1\n",
        "num_ids": 243
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return arr[0]\n    i = 0\n    j = n - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if mid > 0 and mid < n-1 and arr[mid] == arr[mid+1]:\n            mid = mid + 1\n        if arr[mid] < arr[j]:\n            j = mid\n        elif arr[mid] > arr[j]:\n            i = mid + 1\n        else:\n            return arr[mid]\n    return arr[i]\n",
        "num_ids": 152
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    first = arr[0]\n    last = arr[-1]\n    count = 1\n    \n    while count < len(arr):\n        if arr[count] == first or arr[count] == last:\n            count += 1\n        else:\n            return first\n    return None\n",
        "num_ids": 69
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    if arr[0]!= arr[-1]:\n        return arr[0]\n    for i in range(1, len(arr)-1):\n        if arr[i-1]!= arr[i] and arr[i]!= arr[i+1]:\n            return arr[i]\n",
        "num_ids": 90
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    result = 0\n    for i in range(len(arr)):\n        if count == 0:\n            result = arr[i]\n            count += 1\n        else:\n            if result == arr[i]:\n                count += 1\n            else:\n                count -= 1\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i][0] * list1[i][1] > max_product:\n                max_product = list1[i][0] * list1[i][1]\n            if list1[j][0] * list1[j][1] > max_product:\n                max_product = list1[j][0] * list1[j][1]\n    return max_product\n",
        "num_ids": 131
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    res = []\n    for i,j in enumerate(list1):\n        if i == 0:\n            a = j\n        else:\n            a = max(a,j)\n            if a * j > 0:\n                res.append([i,i+1])\n    return res\nprint(max_product_tuple([(2,4),(-2,1),(3,4),(0,-1)])",
        "num_ids": 101
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    prod = 0\n    max_pair = (0,0)\n    for index, i in enumerate(list1):\n        for j in list1:\n            if index!= j and i[0]*i[1]*j[0]*j[1] > prod:\n                prod = i[0]*i[1]*j[0]*j[1]\n                max_pair = (i,j)\n    return max_pair\n",
        "num_ids": 111
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a = []\n    for i in range(len(list1)):\n        a.append(list1[i][0])\n        a.append(list1[i][1])\n    a = tuple(a)\n    return max(a)\n",
        "num_ids": 61
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Approach 1\n    # compute the product of each pair and return the max\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                if list1[i][0] * list1[j][0] > max_product:\n                    max_product = list1[i][0] * list1[j][0]\n    return max_product\n",
        "num_ids": 111
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #sorting the list to get max abs value\n    list1.sort()\n    #variable to store max product\n    max_product = 0\n    #for loop to traverse list\n    for i in range(0,len(list1)):\n        #variable to store max product for current product\n        current_product = 0\n        #variable to store previous product\n        prev_product = 0\n        # for loop to iterate over each tuple\n        for j in range(i,len(list1)):\n            #product of current tuple\n            current_product = list1[j][0]*list1[j][1]\n            #product of previous tuple\n            prev_product = list1[j-1][0]*list1[j-1][1]\n            #if product of current and previous tuple is greater than current product\n            if current_product > current_product:\n                #set current product as max product\n                current_product = prev_product\n            #update max product\n            max_product = max(max_product,current_product)\n    return max_product\n",
        "num_ids": 250
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(list1[i][0]*list1[j][0] > max_product):\n                max_product = list1[i][0]*list1[j][0]\n    return max_product\n    \ndef max_product_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = list1[0][0]*list1[1][0]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(list1[i][0]*list1[j][0] > max_product):\n                max_product = list1[i][0]*list1[j][0]\n    return max_product\n    \ndef max_product_set(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][0]*set1[j][0] > max_product):\n                max_product = set1[i][0]*set1[j][0]\n    return max_product\n    \ndef max_product_set_2(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][1]*set1[j][1] > max_product):\n                max_product = set1[i][1]*set1[j][1]\n    return max_product\n    \ndef max_product_set_3(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][0]*set1[j][0] > max_product):\n                max_product = set1[i][0]*set1[j][0]\n    return max_product\n    \ndef max_product_set_4(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][1]*set1[j][1] > max_product):\n                max_product = set1[i][1]*set1[j][1]\n    return max_product\n    \ndef max_product_set_5(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][0]*set1[j][0] > max_product):\n                max_product = set1[i][0]*set1[j][0]\n    return max_product\n    \ndef max_product_set_6(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][1]*set1[j][1] > max_product):\n                max_product = set1[i][1]*set1[j][1]\n    return max_product\n    \ndef max_product_set_7(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][0]*set1[j][0] > max_product):\n                max_product = set1[i][0]*set1[j][0]\n    return max_product\n    \ndef max_product_set_8(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][1]*set1[j][1] > max_product):\n                max_product = set1[i][1]*set1[j][1]\n    return max_product\n    \ndef max_product_set_9(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][0]*set1[j][0] > max_product):\n                max_product = set1[i][0]*set1[j][0]\n    return max_product\n    \ndef max_product_set_10(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][1]*set1[j][1] > max_product):\n                max_product = set1[i][1]*set1[j][1]\n    return max_product\n    \ndef max_product_set_11(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][0]*set1[j][0] > max_product):\n                max_product = set1[i][0]*set1[j][0]\n    return max_product\n    \ndef max_product_set_12(set1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given set.\n    '''\n    max_product = set1[0][0]*set1[1][0]\n    for i in range(len(set1)):\n        for j in range(i+1,len(set1)):\n            if(set1[i][1]*set1[j][1] > max_product):\n                max_product = set1[i][1]*set1[j][1]\n    return ma",
        "num_ids": 101
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Convert a list to a tuple\n    list1 = tuple(list1)\n    # sort the list in the descending order\n    list1 = sorted(list1, key=lambda x: x[0], reverse=True)\n    # create a new list\n    max_product = list()\n    # create a variable to store the product\n    product = 1\n    # check the list until the length is equal to 2\n    while len(list1) == 2:\n        # if the product is bigger than 1, save the product\n        if product > 1:\n            max_product.append(product)\n        # else, update the product\n        product = list1[0][0] * list1[1][0]\n        # delete the 2 largest tuples from the list\n        del list1[:2]\n    # add the last tuple to the max_product\n    max_product.append(product)\n    # convert the list to tuple again\n    max_product = tuple(max_product)\n    return max_product\n",
        "num_ids": 236
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 0\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            product = max(product,abs(list1[i][0]*list1[j][0]),abs(list1[i][1]*list1[j][1]))\n    return product\n",
        "num_ids": 86
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    max_prod_tuple = ()\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][0] > max_prod:\n                max_prod = list1[i][0]*list1[j][0]\n                max_prod_tuple = (list1[i][0], list1[j][0])\n    return max_prod, max_prod_tuple\n",
        "num_ids": 138
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = 0\n    for number in range(2, limit):\n        # print(number)\n        amicable_sum = 0\n        for divisor in range(1, number):\n            if number % divisor == 0:\n                # print(divisor, number/divisor)\n                if number == divisor + divisor:\n                    break\n                else:\n                    amicable_sum = amicable_sum + divisor + divisor\n        if amicable_sum == number:\n            # print(number)\n            amicable_numbers = amicable_numbers + number\n    return amicable_numbers\n",
        "num_ids": 155
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    amicables = []\n    for x in range(1, limit):\n        if is_amicable(x):\n            sum_x = sum_of_divisors(x)\n            if is_amicable(sum_x):\n                amicables.append(x)\n                amicables.append(sum_x)\n                result += sum_x\n    print(result)\n",
        "num_ids": 95
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        sum_2 = sum(amicable_numbers)\n        amicable_numbers.add(sum_2)\n        if sum_2 == i:\n            sum_amicable += i\n    return sum_amicable\n",
        "num_ids": 85
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables_sum = 0\n    for i in range(1,limit):\n        if amicable_numbers_are_amicable(i) and amicable_numbers_are_amicable(sum_of_divisors(i)):\n            amicables_sum += i\n    return amicables_sum\n",
        "num_ids": 76
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    amicable_numbers = set()\n",
        "num_ids": 23
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # List to store already-computed pairs\n    pairs = []\n",
        "num_ids": 19
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    for i in range(1, limit):\n        # print(i)\n        sum_1 = 0\n        sum_2 = 0\n        for j in range(i+1, limit):\n            if j!= i and sum_1 == j and sum_2 == i:\n                # print(i, j, sum_1, sum_2)\n                if j not in amicable_nums:\n                    amicable_nums.append(j)\n                # else:\n                #     print('two already found', i, j)\n            sum_1 = 0\n            sum_2 = 0\n    # print(sum_1, sum_2)\n    return sum_1 + sum_2\n",
        "num_ids": 173
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    # Set the counter of all primes\n    prime_counter = 0\n",
        "num_ids": 24
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        \n        # If this number is already in the list, skip\n        if i in amicable_numbers:\n            continue\n",
        "num_ids": 51
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for i in range(1, limit):\n        amicable_sum = 0\n        for j in range(1, i):\n            if i!= j and i + j == i * j:\n                amicable_sum += i + j\n        if amicable_sum!= 0:\n            amicable_numbers.append(amicable_sum)\n",
        "num_ids": 95
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = (a.real**2 + a.imag**2)\n    return(cmath.acos(c))\n",
        "num_ids": 31
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    print(angle)\n",
        "num_ids": 24
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle\ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    angle = cmath.phase(complex(a))\n    return angle\n",
        "num_ids": 19
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    c = complex(a,b)\n    return cmath.phase(c)\n",
        "num_ids": 24
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ab=a*b\n    return round(cmath.phase(ab),2)\n",
        "num_ids": 23
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n    \nprint(angle_complex(1,-1))\n",
        "num_ids": 30
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+bj)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a) - cmath.phase(b)\n",
        "num_ids": 20
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = abs(a)\n    b = abs(b)\n    if a*b > 0:\n        return cmath.acos(a/b)\n    else:\n        return cmath.acos(a/b)\n",
        "num_ids": 57
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b == 0:\n        return cmath.pi/2 if a < 0 else -cmath.pi/2\n    elif a == 0 and b > 0:\n        return -cmath.pi/2\n    elif a == 0 and b < 0:\n        return cmath.pi/2\n    else:\n        return cmath.atan(b/a)\n    \nprint(angle_complex(0,1))\nprint(angle_complex(1,0))\nprint(angle_complex(1,1))\nprint(angle_complex(-1,1))\nprint(angle_complex(-1,-1))\nprint(angle_complex(1,-1))\n",
        "num_ids": 157
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count = [0]*2\n    count[0] = 0\n    count[1] = 0\n    max = 0\n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n        max = max if max > abs(count[0]-count[1]) else abs(count[0]-count[1])\n    return max\n",
        "num_ids": 113
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    cnt_0 = 0\n    cnt_1 = 0\n    for s in string:\n        if s == '0':\n            cnt_0 += 1\n        else:\n            cnt_1 += 1\n    return abs(cnt_0 - cnt_1)\n",
        "num_ids": 68
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    if len(string) > 1:\n        for i in range(1, len(string)):\n            sub = string[i-1:i+1]\n            one_count = 0\n            zero_count = 0\n            for j in range(0, len(sub)):\n                if sub[j] == '1':\n                    one_count += 1\n                else:\n                    zero_count += 1\n",
        "num_ids": 104
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #There are 8 sub-strings of the binary string\n    #Each substring has a length of 8\n",
        "num_ids": 26
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #Your code here\n    max_diff = 0\n    for i in range(len(string)):\n        sub_string = string[i:i+1]\n        if(sub_string.count('0') > sub_string.count('1')):\n            diff = sub_string.count('0') - sub_string.count('1')\n        else:\n            diff = sub_string.count('1') - sub_string.count('0')\n        if(diff > max_diff):\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 132
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    str_length = len(string)\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    for i in range(str_length):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        diff = zero_count - one_count\n        max_diff = max(max_diff, diff)\n    return max_diff\n",
        "num_ids": 104
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    bit_string = convert_to_bit_string(string)\n    max_diff = 0\n    current_diff = 0\n    for i in range(len(bit_string)-1):\n        current_diff = abs(int(bit_string[i]) - int(bit_string[i+1]))\n        max_diff = max(max_diff, current_diff)\n    return max_diff\n",
        "num_ids": 97
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # P = (0, 0) (i.e. for empty string)\n    P = (0, 0)\n    for i in range(len(string)): \n        # first figure out the length of 0s and 1s for this sub-string\n        left_0s = string[i].count('0')\n        left_1s = string[i].count('1')\n        \n        # find the difference between these two lengths\n        # use < to find the max diff\n        diff = left_0s - left_1s\n        if diff > P[1] - P[0]: \n            P = (i, diff)\n    return P[1] - P[0]\n",
        "num_ids": 163
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == \"\":\n        return 0\n    string = \"0\" + string\n    sub_string = \"\"\n    max_diff = 0\n    current_diff = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n            sub_string = string[i-max_diff:i]\n    return max_diff + len(sub_string)\n",
        "num_ids": 133
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(0, len(string)):\n        substring = string[i:i+1]\n        print(substring)\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if substring[j] == \"0\":\n                count_0 += 1\n            else:\n                count_1 += 1\n            if count_0 > length or count_1 > length:\n                length = max(count_0, count_1)\n    return length\n",
        "num_ids": 132
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n    \nprint(\"sum(4,8)=\",sum(4,8))\n",
        "num_ids": 26
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = max(a,b)\n    for i in range(1,c):\n        if a%i == 0 and b%i == 0:\n            sum1 = a/i + b/i\n            break\n    return sum1\n",
        "num_ids": 58
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b,a%b)\n    d = gcd(a,b)\n    return (a*b)//d\nprint(sum(4,16))\n",
        "num_ids": 69
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum=0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            sum+=i\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        count=0\n        for i in range(1,a):\n            if (a%i==0) and (b%i==0):\n                count=count+i\n        return count\n    else:\n        count=0\n        for i in range(1,b):\n            if (a%i==0) and (b%i==0):\n                count=count+i\n        return count\n",
        "num_ids": 103
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    n = 0\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            n += i\n    print(n)\n",
        "num_ids": 50
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        return a+sum(b,a-b)\n    else:\n        return b+sum(a,b-a)\n    \n",
        "num_ids": 41
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            c.append(i)\n    return sum(c)\n            \n    \n",
        "num_ids": 54
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, min(a,b)+1):\n        if a%i==0 and b%i==0:\n            sum+=i\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \n    ",
        "num_ids": 11
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n    \ndef m(str):\n    '''\n    Write a function that takes in a string and returns a tuple with the first and last index of the word.\n    '''\n    return str.split()[0], str.split()[-1]\n    \ndef count_sevens(n):\n    '''\n    Write a function that takes in a number and returns true if that number is within the 20th percentile\n    (that is, it is in the top 20% of all numbers, not including the number itself) of the distribution\n    of that number.\n    '''\n    return n in (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)\n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a number and returns true if it is prime.\n    '''\n    return n > 1 and all(n % i for i in range(2, n))\n    \ndef check_prime(n):\n    '''\n    Write a function that takes in a number and returns true if it is prime.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef get_prime_factors(n):\n    '''\n    Write a function that takes in a positive integer n and returns a sorted list of its prime factors.\n    '''\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return sorted(factors)\n    \ndef print_before_after(s):\n    '''\n    Write a function that takes in a string and returns a string of the same length and with each character \n    reversed.\n    '''\n    return ''.join(reversed(s))\n    \ndef double_char(s):\n    '''\n    Write a function that takes in a string and returns that string with every second character double-\n    -cased.\n    '''\n    return s.replace(s[0], s[0].upper()).replace(s[1], s[1].upper())\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns true if the string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef count_odds(n):\n    '''\n    Write a function that takes in a number n and returns the number of odds that are less than n.\n    '''\n    return len([i for i in range(1, n) if i % 2!= 0])\n    \ndef has_dash(str):\n    '''\n    Write a function that takes in a string and returns true if there are any characters that are not\n    alphabetic.\n    '''\n    return any([i.isalpha()!= True for i in str])\n    \ndef is_in(lst, value):\n    '''\n    Write a function that takes in a list and a value and returns true if that value is in the list.\n    '''\n    return value in lst\n    \ndef animal_crackers(text):\n    '''\n    Write a function that takes in a string and returns true if it is an animal and false if it is not.\n    '''\n    return 'cat' in text.lower() or 'dog' in text.lower()\n    \ndef master_yoda(text):\n    '''\n    Write a function that takes in a string and returns a transformed string where every vowel (a, e, i, o, or u) is \n    changed to 'ay'\n    '''\n    return ''.join([i if i in 'aeiou' else 'y' for i in text])\n    \ndef almost_there(n):\n    '''\n    Write a function that takes in a number and returns True if it is within 10% of the nearest number.\n    '''\n    return abs(n - round(n, 10) * 10) < 10\n    \ndef has_33(nums):\n    '''\n    Write a function that takes in a list of ints and returns True if the list contains a 3 next to a 3 somewhere.\n    '''\n    for i in range(len(nums) - 1):\n        if nums[i] == 3 and nums[i + 1] == 3:\n            return True\n    return False\n    \ndef not_string(str):\n    '''\n    Write a function that takes in a non-empty string and returns a new string with no instances of the \n    characters's' in the original string.\n    '''\n    new_str = ''\n    for i in str:\n        if i!='s':\n            new_str += i\n    return new_str\n    \ndef front_times(str, n):\n    '''\n    Write a function that takes in a non-empty string and returns a new string that is n copies of the \n    front of the string.\n    '''\n    return str * n\n    \ndef front_times2(str, n):\n    '''\n    Write a function that takes in a string and a non-negative integer and returns a new string that is the\n    front n times in the front of the original string.\n    '''\n    return str * n\n    \ndef first_two(str):\n    '''\n    Write a function that takes in a non-empty string and returns a new string that is the first 2 characters\n    in the original string.\n    '''\n    return str[:2]\n    \ndef first_half(str):\n    '''\n    Write a function that takes in a string and returns a new string that is the first half of the original string.\n    '''\n    return str[:len(str)//2]\n    \ndef without_end(str):\n    '''\n    Write a function that takes in a string and returns a new string that is the original string except it \n    includes only the first and last chars of the string.\n    '''\n    return str[:2] + str[-2:]\n    \ndef non_start(str):\n    '''\n    Write a function that takes in a string and returns a new string that is the original string except it \n    starts with the char that is in the given position. \n    '''\n    return str[1:] + str[0]\n    \ndef front_times_n_times(str, n):\n    '''\n    Write a function that takes in a non-empty string and returns a new string that is the n copies of the first \n    letter of the original string.\n    '''\n    return str * n\n    \ndef front_times_n_times2(str, n):\n    '''\n    Write a function that takes in a string and an integer and returns a new string that is the front n times in\n    the original string.\n    '''\n    return str * n\n    \ndef first_four(str):\n    '''\n    Write a function that takes in a string and returns a new string that is the first four characters of the \n    original string.\n    '''\n    return str[:4]\n    \ndef last_four(str):\n    '''\n    Write a function that takes in a string and returns a new string that is the last four characters of the \n    original string.\n    '''\n    return str[-4:]\n    \ndef space_before(str):\n    '''\n    Write a function that takes in a string and returns a new string with the string preceded by a single space.\n    '''\n    return'' + str\n    \ndef space_after(str):\n    '''\n    Write a function that takes in a string and returns a new string with the string suffixed with a single space.\n    '''\n    return str +''\n    \ndef to_upper(str):\n    '''\n    Write a function that takes in a string and returns a new string where each character is capitalize",
        "num_ids": 21
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return filter(lambda x: len(x) > n, str)\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str.split(' ') if len(w) >= n]\n    \nprint(long_words(3, \"I speak Goat Latin\")) # [\"Ima\", \"Smooth\", \"Ox\", \"Tong\", \"Goat\"]\nprint(long_words(4, \"The quick brown fox jumped over the lazy dog\")) # [\"Fox\", \"dog\"]\n",
        "num_ids": 88
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # words = str.split(' ')\n    # print(words)\n    # for word in words:\n    #     if len(word) >= n:\n    #         print(word)\n    \n    # for word in str.split(' '):\n    #     if len(word) >= n:\n    #         print(word)\n    return [word for word in str.split(' ') if len(word) >= n]\n",
        "num_ids": 104
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    res = []\n    for i in str:\n        if len(i) >= n:\n            res.append(i)\n    return res",
        "num_ids": 35
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(' ') if len(word) > n]\n",
        "num_ids": 24
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return_list = []\n    for word in str:\n        if len(word) > n:\n            return_list.append(word)\n    return return_list\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for i in str:\n        if len(i) > n:\n            long_words.append(i)\n    return(long_words)\n",
        "num_ids": 44
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    n = int(n)\n    temp = []\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            temp.append(str[i])\n    return temp\n",
        "num_ids": 53
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix,list) or len(my_matrix)!= 9:\n        return False\n    for row in range(len(my_matrix)):\n        if not isinstance(my_matrix[row],list):\n            return False\n        if len(my_matrix[row])!= 9:\n            return False\n    # check whether all numbers of each row are arranged in order\n    for row in my_matrix:\n        if sorted(row)!= sorted(row[::-1]):\n            return False\n    # check whether all numbers of each column are arranged in order\n    for col in range(len(my_matrix)):\n        col_values = []\n        for row in my_matrix:\n            col_values.append(row[col])\n        if sorted(col_values)!= sorted(col_values[::-1]):\n            return False\n    # check whether each row and column have the same sum\n    # this is equivalent to sum(row) == sum(col)\n    sum_matrix = []\n    for i in range(len(my_matrix)):\n        sum_row = 0\n        for j in range(len(my_matrix)):\n            sum_row += my_matrix[i][j]\n        sum_matrix.append(sum_row)\n    for i in range(len(sum_matrix)):\n        if sum_matrix[i]!= sum(my_matrix[i]):\n            return False\n    return True\n",
        "num_ids": 361
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # row = len(my_matrix)\n    # column = len(my_matrix[0])\n",
        "num_ids": 28
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    for i in range(rows):\n        if len(my_matrix[i])!= cols:\n            return False\n    \n    my_matrix = [[my_matrix[i][j] for j in range(cols)] for i in range(rows)]\n",
        "num_ids": 93
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    checker = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= checker:\n                return False\n            checker += 1\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    assert (isinstance(my_matrix, list) and len(my_matrix) == int(math.pow(len(my_matrix), 0.5)) and len(my_matrix[0]) == len(my_matrix))\n",
        "num_ids": 61
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    if not is_magic_square(my_matrix):\n        return False\n    elif size!= len(my_matrix) and size!= len(my_matrix[0]):\n        return False\n    else:\n        for i in range(size):\n            if not is_magic_number(my_matrix, i):\n                return False\n        return True\n    \n",
        "num_ids": 104
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for row in range(len(my_matrix)):\n        if len(my_matrix[row])!= len(my_matrix[0]):\n            return False\n    for row in range(0, len(my_matrix)):\n        for col in range(0, len(my_matrix[row])):\n            if my_matrix[row][col]!= magic_square_value(row, col, len(my_matrix)):\n                return False\n    return True\n",
        "num_ids": 146
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix_sum = sum(my_matrix)\n    if(matrix_sum == 45):\n        print(\"This is a magic square\")\n        return\n    else:\n        print(\"Not magic\")\n        return\n",
        "num_ids": 54
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if type(my_matrix) == list and len(my_matrix) == len(my_matrix[0]):\n        if my_matrix == magic_square(my_matrix):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    if not isinstance(my_matrix, list) or len(my_matrix) < 1:\n        return False\n        \n    if not all([isinstance(n, int) for row in my_matrix for n in row]):\n        return False\n        \n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n        \n    if len(my_matrix)!= len(set([sum(my_matrix[i]) for i in range(len(my_matrix))])):\n        return False\n        \n    return True\n",
        "num_ids": 142
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max = 0\n    num = 0\n    for i in nums:\n        if nums.count(i) > max:\n            max = nums.count(i)\n            num = i\n    return num\n",
        "num_ids": 53
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    # print(d)\n    l = list(d.items())\n    l.sort(key=lambda x: x[1])\n    # print(l)\n    return l[-1][0]\n",
        "num_ids": 76
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    for key in counts:\n        if counts[key] == max_count:\n            return key\n",
        "num_ids": 65
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #1 Using hashmap\n    h = defaultdict(int)\n    for i in nums:\n        h[i] += 1\n    print h\n    return max(h.keys(), key=(lambda k: h[k]))\n",
        "num_ids": 57
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in d.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item\n",
        "num_ids": 87
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_ = {}\n    for i in nums:\n        if i in dict_:\n            dict_[i] += 1\n        else:\n            dict_[i] = 1\n    occurrences = defaultdict(int)\n    for k,v in dict_.items():\n        occurrences[k] = v\n    \n    max_value = max(occurrences.values())\n    max_key = max(occurrences, key=occurrences.get)\n    print(f\"Given List: {nums}\")\n    print(f\"Max Value: {max_value}\")\n    print(f\"Max Key: {max_key}\")\n",
        "num_ids": 158
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) < 2:\n        return nums[0]\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    m = 0\n    for i in d:\n        if d[i] > m:\n            m = d[i]\n            key = i\n    return key\n",
        "num_ids": 85
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n",
        "num_ids": 12
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # time: O(n)\n    # space: O(n)\n    cnt = defaultdict(int)\n    for num in nums:\n        cnt[num] += 1\n    print(cnt)\n    max_value = 0\n    for val, cnt in cnt.items():\n        if cnt > max_value:\n            max_value = cnt\n            max_key = val\n    print(max_key)\n",
        "num_ids": 107
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Dict to keep a count of frequency for each item\n    count_dict = defaultdict(int)\n",
        "num_ids": 27
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str = list(str1)\n    for i in range(len(str)):\n        if str[i] == \"a\" or str[i] == \"e\" or str[i] == \"i\" or str[i] == \"o\" or str[i] == \"u\":\n            str[i] = \"z\"\n        else:\n            str[i] = str[i].lower()\n    return \"\".join(str)\nprint(reverse_vowels('Hello world!'))\n",
        "num_ids": 119
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for i in str1:\n        if i in vowels:\n            result.append(i)\n    result = ''.join(result)\n    print(result)\n",
        "num_ids": 85
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    s = str1\n    for i in vowels:\n        s = s.replace(i,'')\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    vowels_list = []\n    for i in str1:\n        if i in vowels:\n            vowels_list.append(i)\n    rev_vowels = \"\".join(vowels_list[::-1])\n    return rev_vowels\n",
        "num_ids": 80
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    n = len(str1)\n    vowel_pos = [i for i in range(n) if str1[i] in vowels]\n    # print(vowel_pos)\n    # print(n)\n    rev_vowel_pos = vowel_pos[::-1]\n    # print(rev_vowel_pos)\n    # print(n)\n    # print(len(rev_vowel_pos))\n    vowel_pos_final = []\n    for i in range(len(rev_vowel_pos)):\n        vowel_pos_final.append(n-1-rev_vowel_pos[i])\n    # print(vowel_pos_final)\n    str_final = \"\"\n    for i in range(n):\n        if i in vowel_pos_final:\n            str_final += str1[i]\n        else:\n            str_final += str1[rev_vowel_pos[i]]\n    return str_final\n",
        "num_ids": 255
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    new = \"\"\n    for char in str1:\n        if char not in vowels:\n            new += char\n        else:\n            new += char * 2\n    return new\n",
        "num_ids": 55
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowels_reverse = {'A': 'a', 'e': 'E', 'i': 'I', 'o': 'O', 'u': 'U'}\n    vowels_map = {}\n    for vowel in vowels:\n        vowels_map[vowel] = vowels_reverse[vowel]\n    vowel_map_reverse = {}\n    for vowel in vowels:\n        vowel_map_reverse[vowels_reverse[vowel]] = vowel\n    reversed_str = str1[::-1]\n    str_map = {char: None for char in reversed_str}\n    for char in reversed_str:\n        if char in vowels:\n            char_map = str_map[char_map[char]]\n            str_map[char] = char_map\n            str_map[char_map] = char\n    reversed_str = ''.join([str_map[char] if char!= None else char for char in reversed_str])\n    reversed_str = reversed_str.replace('A', 'a')\n    reversed_str = reversed_str.replace('E', 'e')\n    reversed_str = reversed_str.replace('I', 'i')\n    reversed_str = reversed_str.replace('O', 'o')\n    reversed_str = reversed_str.replace('U', 'u')\n    return reversed_str\n",
        "num_ids": 383
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = list(str1)\n    for i in range(len(l)):\n        if l[i] in \"aeiouAEIOU\":\n            l[i] = \"*\"\n    print(\"\".join(l))\n    \n",
        "num_ids": 60
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = str1[-i-1]\n    return ''.join(str1)\n    # Your code here\n",
        "num_ids": 81
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    reversed_vowels = ''\n",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #the below line is used to convert the tuple into a string\n    return (str(tup1))\n",
        "num_ids": 27
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \",\".join(tup1)\n",
        "num_ids": 14
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for item in tup1:\n        str1 += str(item)\n    return str1\n",
        "num_ids": 31
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(x) for x in tup1)\n    \n",
        "num_ids": 22
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = \"\"\n    for item in tup1:\n        tup_string += item\n    return tup_string\n    \ntup_string('Linda')\n",
        "num_ids": 45
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = \" \".join(str(e) for e in tup1)\n    return tup_str\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    total = 0\n    for num in nums:\n        if num < 0:\n            total = total + num\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0] * -1\n    else:\n        return nums[0] + sum_negativenum(nums[1:])\n",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # return sum([x for x in nums if x < 0])\n    sum = 0\n    for x in nums:\n        if x < 0:\n            sum += x\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Approach 1\n    sum = 0\n    for num in nums:\n        sum += num * (-1)\n    print(\"Sum of all negative numbers in a given list of numbers: \", sum)\n",
        "num_ids": 48
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_num = 0\n    for num in nums:\n        if num<0:\n            negative_num += num\n    return negative_num\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums_sum = 0\n    for num in nums:\n        if num < 0:\n            nums_sum += num\n    return nums_sum\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            sum = sum + nums[i]\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for n in nums:\n        if n < 0:\n            s += n\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            total += nums[i]\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(list(filter(lambda x: x < 0, nums)))\n",
        "num_ids": 21
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(3*n-1)/2\n",
        "num_ids": 15
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n*(3*n-1))/2\n",
        "num_ids": 19
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        i = 1\n        j = 1\n        num = 1\n        while i <= n:\n            i = i + 2\n            num = num + 6 * j\n            j = j + 1\n        return num\n",
        "num_ids": 98
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 0\n    while n > 0:\n        num += n\n        n -= 1\n    return num\n",
        "num_ids": 28
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return sum((i*(3*i-1))//2 for i in range(n))\n",
        "num_ids": 25
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(3*n - 1)//2)\n",
        "num_ids": 18
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n**2 - (n-1)**2) * (3*n - 1) / 2\n",
        "num_ids": 28
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return pow(n, (1. / 3))\n",
        "num_ids": 15
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    k = 1\n    while k <= n:\n        k += 1\n    return k * (2 * n - 1)\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(3*n-1) // 2\n",
        "num_ids": 16
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len(nums) - sum(nums)\n",
        "num_ids": 16
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    zeroes = 0\n    non_zeroes = 0\n    for x in nums:\n        if x == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes/non_zeroes\n",
        "num_ids": 75
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    n = 0\n    count = 0\n    for i in nums:\n        if i == 0:\n            n += 1\n    for i in nums:\n        if i!= 0:\n            count += 1\n    return count/n\n",
        "num_ids": 61
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    return len([x for x in nums if x==0]) / float(len(nums) - len([x for x in nums if x!=0]))\n",
        "num_ids": 44
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n",
        "num_ids": 53
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i==0:\n            count+=1\n    return count/len(nums)\nprint(zero_count([0,1,0,1,0,1,1]))",
        "num_ids": 58
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(nums.count(0)) / float(len(nums))\n",
        "num_ids": 22
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # # if nums is empty\n    if len(nums) == 0:\n        return 0\n    # # if there are no zeroes\n    elif all(nums == 0):\n        return 1\n    # else\n    else:\n        # zeroes = 0\n        # non-zeroes = 0\n        zeroes = 0\n        non_zeroes = 0\n        # loop through nums\n        for num in nums:\n            # if a number is zero\n            if num == 0:\n                zeroes += 1\n            # if not\n            else:\n                non_zeroes += 1\n        # return the ratio\n        return zeroes/non_zeroes\n",
        "num_ids": 161
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #zero_count(nums)\n    return float(sum(nums)) / len(nums)\n    #sum is sum of all elements in list\n    #len is length of list\n",
        "num_ids": 47
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s=0\n    while n!=0:\n        if n%2==0:\n            s=s+1\n        n=n//2\n    if s>=1:\n        return True\n    else:\n        return False\n    \ndef is_Sum_Of_Powers_Of_Two_Recursive(n):\n    if n==0:\n        return True\n    if n%2==0:\n        return is_Sum_Of_Powers_Of_Two_Recursive(n//2)\n    return False\n",
        "num_ids": 127
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i=1\n    while(i<=n):\n        if(n%i==0):\n            if((n//i)==i):\n                return True\n            else:\n                return False\n        i=i+1\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count=0\n    while n!=0:\n        count+=1\n        n=n//2\n    return count==1\n",
        "num_ids": 33
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        if n % 2 == 0:\n            n = n / 2\n            print(n)\n        else:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n < 0):\n        return False\n    if (n == 0):\n        return True\n    total = 0\n    while(n!= 0):\n        total += (n%2)\n        n = n//2\n    if(total == 0):\n        return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # code here\n    def get_all_powers(n):\n        result = []\n        for i in range(n+1):\n            for j in range(i,n+1):\n                result.append(j)\n        return result\n    \n    powers = get_all_powers(n)\n    print(powers)\n    for i in powers:\n        if i == 1 or i == 2:\n            continue\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 119
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n==0):\n        return False\n    \n    i = 1\n    while(i<=n):\n        if(n%i==0):\n            if(i!=n):\n                return False\n            else:\n                return True\n        i=i+1\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n <= 0): \n        return False\n    \n    if (n & (n - 1)!= 0): \n        return False\n    \n    if (n == 1): \n        return True\n    \n    if (n == 2): \n        return True\n    \n    n_1 = n - 1\n    while (n_1 & 1) == 0: \n        n_1 = n_1 >> 1\n        \n    if (n_1 > n): \n        return False\n    else: \n        return True\n        \n",
        "num_ids": 130
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while(n):\n        if(n&1==0):\n            return False\n        n>>=1\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n==0): return False\n    if (n==1): return True\n    if (n==2): return True\n    if (n==3): return False\n    sum_of_powers = 1\n    while (sum_of_powers+1 < n):\n        sum_of_powers = sum_of_powers + 1\n    if (sum_of_powers + 1 == n): \n        return True\n    else: \n        return False\n",
        "num_ids": 108
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*math.pi*r\n    return circumference\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * math.pi * 2\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # pi = 3.14159\n    # circumference = 2 * pi * r\n    # return circumference\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    PI = 3.14\n    return PI * 2 * r\n",
        "num_ids": 17
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return math.pi * 2 * r\n",
        "num_ids": 16
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #test_list = [[1,2,3], [4,5], [6,7], [8,9,10]]\n    test_list = sorted(test_list, key=len)\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j]\n    \n    return test_list\n",
        "num_ids": 108
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n",
        "num_ids": 9
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for i in test_list:\n        for j in i:\n            res.append(j)\n    return res\n    \n    \ndef extract_alternate(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for i in test_list:\n        for j in i:\n            res.append(j)\n    return res\n    \ndef test(test_case):\n    if (extract_alternate(test_case) == test_case):\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    \n",
        "num_ids": 84
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) is list:\n            extract_singly(test_list[i])\n        else:\n            test_list[i] = test_list[i]\n",
        "num_ids": 63
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    nums = set()\n    for i in test_list:\n        for j in i:\n            nums.add(j)\n    return nums\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return set()\n    elif type(test_list[0]) == type([]):\n        return extract_singly(test_list[0]) | extract_singly(test_list[1:])\n    else:\n        return {test_list}\n    \nprint(extract_singly([]))\nprint(extract_singly([[]]))\nprint(extract_singly([[], [[]]]))\nprint(extract_singly([[[[[[]]]]]]))\nprint(extract_singly([[1, 2, 3], 4]))\n",
        "num_ids": 150
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = set()\n    for x in test_list:\n        res = res | set(x)\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        if type(i) == list:\n            flat_list.extend(extract_singly(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n",
        "num_ids": 65
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    out = set()\n    for x in test_list:\n        out = out.union(set(x))\n    return out\n",
        "num_ids": 33
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(sum(test_list,[]))\n    \n    ",
        "num_ids": 18
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(n-1, -1, -1):\n        max = i\n        for j in range(i, -1, -1):\n            if nums[j] > nums[max]:\n                max = j\n        tmp = nums[i]\n        nums[i] = nums[max]\n        nums[max] = tmp\n",
        "num_ids": 89
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    res = []\n    if nums is None or len(nums) == 0:\n        return res\n    n = len(nums)\n    for i in range(n, 0, -1):\n        max_idx = -1\n        for j in range(i, -1, -1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        res.append(max_idx + 1)\n        nums[max_idx], nums[i-1] = nums[i-1], nums[max_idx]\n    return res\n",
        "num_ids": 149
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    if len(nums) == 0:\n        return []\n",
        "num_ids": 19
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "num_ids": 75
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        j = 0\n        for j in range(0, i + 1):\n            if nums[j] > nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 82
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    n = len(nums)\n    # largest = largest_idx = nums.index(max(nums))\n    for i in range(n):\n        # print(i, 'i')\n        # print(nums)\n        # print(largest)\n        # print(nums[largest])\n        # print(largest_idx)\n        # swap largest with largest_idx\n        # nums[i], nums[largest_idx] = nums[largest_idx], nums[i]\n        largest_idx = i\n        for j in range(n-1, i, -1):\n            if nums[j] < nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n                largest_idx = j\n    return nums\n",
        "num_ids": 211
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = n - 1\n    \n    for i in range(n-1, 0, -1):\n        \n        for j in range(i, -1, -1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                \n        # last element is sorted\n        if nums[0] < nums[k]:\n            nums[k], nums[0] = nums[0], nums[k]\n            \n            # reverse elements between 1 and k\n            for i in range(1, k+1):\n                nums[k-i], nums[k] = nums[k], nums[k-i]\n                \n            # reverse elements between k+1 and end\n            for i in range(k+1, n):\n                nums[i], nums[n] = nums[n], nums[i]\n                \n        # move elements smaller than last element to the end\n        else:\n            k -= 1\n",
        "num_ids": 265
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # For each index, we flip the element to the left or right,\n    # until the whole array is sorted.\n    for i in range(len(nums)-1, 0, -1):\n        pancake(nums, i)\n    return nums\n",
        "num_ids": 64
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_nums = []\n",
        "num_ids": 11
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n",
        "num_ids": 79
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    temp_list1 = sorted(list1)\n    temp_list2 = sorted(list2)\n    temp_list3 = sorted(list3)\n    count_number = 0\n    for i in range(0,len(temp_list1)):\n        if(temp_list1[i] == temp_list2[i] == temp_list3[i]):\n            count_number = count_number + 1\n    print(\"Number of items that are same: \",count_number)\n",
        "num_ids": 117
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    def duplicate(list1,list2,list3):\n        count = 0\n        for x in range(len(list1)):\n            if list1[x] == list2[x] and list2[x] == list3[x]:\n                count +=1\n        return count\n    return duplicate(list1,list2,list3)\n",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n        else:\n            count = 0\n    print(\"Number of same pairs: \" + str(count))\n",
        "num_ids": 70
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c+=1\n    return c\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if list1 == list2 and list1 == list3:\n        count = len(list1)\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i] and list3[i]==list1[i]:\n            print(\"{} {} {} are identical\".format(list1[i],list2[i],list3[i]))\n",
        "num_ids": 82
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count +=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return -1\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a = []\n    for i in range(len(list1)):\n        a.append([list1[i],list2[i],list3[i]])\n    x = set()\n    a = sorted(a)\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if a[i] == a[j]:\n                x.add(a[i])\n    return len(x)\n",
        "num_ids": 111
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    x = []\n    y = []\n    count = 0\n    for i in range(len(Input)):\n        if Input[i] == 'a':\n            x.append(Input[i])\n        elif Input[i] == 'b':\n            y.append(Input[i])\n    if len(x) > 0:\n        count += 1\n    if len(y) > 0:\n        count += 1\n    return count\n    \nInput = ('a','a','b','b','b','b','a','a')\nfind_lists(Input)",
        "num_ids": 134
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your Code Here\n    count = 0\n    for i in Input:\n        if type(i)==list:\n            count +=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        count+=1\n    return count \nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,",
        "num_ids": 2016
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            L = L + 1\n    return L\n",
        "num_ids": 42
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List = []\n    List = tuple(list(Input))\n    print(List)\n    return len(List)\n    \n    ",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\ndef find_longest_list(Input): \n    '''\n    Write a function to find longest list.\n    '''\n    pass\ndef find_maximum_value(Input): \n    '''\n    Write a function to find maximum number.\n    '''\n    pass\ndef find_maximum_value_in_a_list(Input): \n    '''\n    Write a function to find maximum number in a list.\n    '''\n    pass\ndef find_longest_word(Input): \n    '''\n    Write a function to find longest word.\n    '''\n    pass\ndef is_palindrome(Input): \n    '''\n    Write a function to check if string is a palindrome.\n    '''\n    pass\ndef find_longest_word_in_a_list(Input): \n    '''\n    Write a function to find longest word in a list.\n    '''\n    pass\ndef merge_ranges(Input): \n    '''\n    Write a function to merge overlapping ranges.\n    '''\n    pass\ndef find_duplicate_number(Input): \n    '''\n    Write a function to find duplicate number in the given list.\n    '''\n    pass\ndef find_duplicate_number_in_a_list(Input): \n    '''\n    Write a function to find duplicate number in a list.\n    '''\n    pass\ndef find_first_index_of_element_from_a_list(Input): \n    '''\n    Write a function to find first index of element in a list.\n    '''\n    pass\ndef find_count_of_even_number_from_a_list(Input): \n    '''\n    Write a function to find count of even number in a list.\n    '''\n    pass\ndef find_the_element_not_in_a_list(Input): \n    '''\n    Write a function to find element not present in a list.\n    '''\n    pass\ndef find_all_elements_not_in_a_list(Input): \n    '''\n    Write a function to find all elements not present in a list.\n    '''\n    pass\ndef print_elements_not_in_a_list(Input): \n    '''\n    Write a function to print elements not present in a list.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string(Input): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_2(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_3(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_4(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_5(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_6(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_7(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_8(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_9(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_10(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_11(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_12(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_13(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_14(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_15(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_16(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_17(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_18(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_19(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_20(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_21(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with_another_string_22(Input,Input2): \n    '''\n    Write a function to find count of vowels in a string.\n    '''\n    pass\ndef find_count_of_vowels_in_a_string_by_comparing_with",
        "num_ids": 28
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code goes here\n    List_Present=[]\n    for i in range(len(Input)):\n        List_Present.append(len(Input))\n    return List_Present\n",
        "num_ids": 46
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(Input)\n    count = 0\n    for i in range(len(Input)):\n        if(type(Input[i]) == list):\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    NumberOfLists=0\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            NumberOfLists+=1\n    return NumberOfLists\n",
        "num_ids": 49
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            count += 1\n    return count\n    \n    \n    \n    \ndef intersection_of_two_lists(list1, list2):\n    '''\n    Write a function to get the intersection of two given lists.\n    '''\n    intersect = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            intersect.append(list1[i])\n    return intersect\n    \n    \n    \n    \ndef find_odd_occuring_numbers(numbers):\n    '''\n    Write a function to find all odd numbers in a given list.\n    '''\n    odd_nums = []\n    for num in range(1, len(numbers)):\n        if numbers[num] % 2!= 0:\n            odd_nums.append(numbers[num])\n    return odd_nums\n    \n    \n    \n    \ndef count_of_odd_in_range(start, end):\n    '''\n    Write a function to count the number of odd numbers in a given range.\n    '''\n    count = 0\n    for i in range(start, end + 1):\n        if i % 2!= 0:\n            count += 1\n    return count\n    \n    \n    \n    \ndef find_maximum_number(numbers):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    maximum = numbers[0]\n    for num in range(1, len(numbers)):\n        if numbers[num] > maximum:\n            maximum = numbers[num]\n    return maximum\n    \n    \n    \n    \ndef find_sum_of_all_even_numbers(numbers):\n    '''\n    Write a function to find the sum of all even numbers in a list.\n    '''\n    sum = 0\n    for num in range(len(numbers)):\n        if numbers[num] % 2 == 0:\n            sum += numbers[num]\n    return sum\n    \n    \n    \n    \ndef find_minimum_number(numbers):\n    '''\n    Write a function to find the minimum number in a list.\n    '''\n    minimum = numbers[0]\n    for num in range(1, len(numbers)):\n        if numbers[num] < minimum:\n            minimum = numbers[num]\n    return minimum\n    \n    \n    \n    \ndef find_number_appearing_once(list1):\n    '''\n    Write a function to find the number appearing once in a list.\n    '''\n    num = list1[0]\n    for i in range(len(list1)):\n        if list1[i]!= num:\n            num = list1[i]\n            break\n    return num\n    \n    \n    \n    \ndef list_intersection(list1, list2):\n    '''\n    Write a function to get the list of common elements in two lists.\n    '''\n    common = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common.append(list1[i])\n    return common\n    \n    \n    \n    \ndef find_length_of_list(list1):\n    '''\n    Write a function to find the length of a list.\n    '''\n    length = len(list1)\n    return length\n    \n    \n    \n    \ndef find_number_occurrence_in_list(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if num == list1[i]:\n            count += 1\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_using_key(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i == num:\n            count += 1\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_in_order(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_in_order_using_key(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_in_reverse(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in range(len(list1) - 1, -1, -1):\n        if list1[i] == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_in_reverse_using_key(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in range(len(list1) - 1, -1, -1):\n        if list1[i] == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_in_reverse_using_key_using_iterator(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_using_key(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_using_key_using_iterator(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_using_iterator(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_using_iterator_using_key(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_using_iterator_using_key_using_iterator(list1, num):\n    '''\n    Write a function to count the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i == num:\n            count += 1\n            break\n    return count\n    \n    \n    \n    \ndef find_number_occurrence_in_list_using_key_in_range(list",
        "num_ids": 63
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if not arr: \n        return\n    diff = arr[0] - arr[1]\n    max_diff = diff\n    for i in range(1, len(arr)):\n        if abs(diff) < abs(arr[i] - arr[i-1]):\n            diff = arr[i] - arr[i-1]\n            max_diff = diff\n        else:\n            continue\n    return max_diff\n",
        "num_ids": 103
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    i = 0\n    max_diff = 0\n    while(i < len(arr)-1):\n        if(abs(arr[i] - arr[i+1]) > max_diff):\n            max_diff = abs(arr[i] - arr[i+1])\n        i += 1\n",
        "num_ids": 72
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n=len(arr)\n    max_diff=0\n    for i in range(n):\n        for j in range(i+1,n):\n            max_diff=max(abs(arr[i]-arr[j]),max_diff)\n    return max_diff\n    \nprint(max_Abs_Diff([1,5,3]))\n",
        "num_ids": 85
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n",
        "num_ids": 65
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    maxdiff = 0\n    for i in range(n):\n        if maxdiff < abs(arr[i]-arr[i-1]):\n            maxdiff = abs(arr[i]-arr[i-1])\n    return maxdiff\n",
        "num_ids": 77
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    for i in range(0,len(arr)-1):\n        if abs(arr[i]-arr[i+1])>max_diff:\n            max_diff=abs(arr[i]-arr[i+1])\n    return max_diff\n",
        "num_ids": 61
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    ans = 0\n    for i in range(0, len(arr)-1):\n        ans = max(ans, abs(arr[i+1] - arr[i]))\n    return ans\n        \n    \ndef Max_Diff_Of_Two(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    ans = 0\n    for i in range(0, len(arr)-1):\n        ans = max(ans, abs(arr[i+1] - arr[i]))\n    return ans\n    \n        \ndef l_n_dec(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    ans = 0\n    for i in range(0, len(arr)-1):\n        ans = max(ans, arr[i+1] - arr[i])\n    return ans\n        \n        \ndef Find_Missing_Number(arr): \n    '''\n    Write a python function to find the missing number in a given array.\n    '''\n    arr.sort()\n    s = 0\n    for i in range(0, len(arr)):\n        if arr[i]!= s:\n            return s\n        s = arr[i] + 1\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_max_diff = 0\n",
        "num_ids": 11
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr, reverse=True)\n    return max(arr[0] - arr[1], arr[-1] - arr[-2])\n    # Another way -\n    # maxDiff = arr[0] - arr[1]\n    # for i in range(1, len(arr) - 1):\n    #     if arr[i] - arr[i+1] > maxDiff:\n    #         maxDiff = arr[i] - arr[i+1]\n    # return maxDiff\n",
        "num_ids": 121
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    largest_diff=0\n    for i in range(len(arr)-1):\n        if (arr[i+1]-arr[i])>largest_diff:\n            largest_diff=arr[i+1]-arr[i]\n    return largest_diff\n",
        "num_ids": 63
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    # print(a, b, n)\n    for i in range(1, n+1):\n        if (n - i*a) % b == 0:\n            # print(a, b, i)\n            x = i\n            y = (n - x*a) // b\n            return (x, y)\n    return None\n",
        "num_ids": 92
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #get perfect square roots of a, b\n    a_root = int(math.sqrt(a))\n    b_root = int(math.sqrt(b))\n",
        "num_ids": 43
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n    for i in range(1, 100):\n        for j in range(1, 100):\n            if (i * a + j * b == n):\n                x, y = i, j\n    return x, y\n",
        "num_ids": 62
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # a >= 0, b >= 0, n > 0\n    if a == 0:\n        if b >= 0:\n            return (0, b)\n        else:\n            return (b, 0)\n    else:\n        if b == 0:\n            return (a, 0)\n        else:\n            x = -(a / b)\n            y = x * a + b\n            if y < n:\n                return (x, y)\n            else:\n                return find_solution(a, b - 1, n)\n",
        "num_ids": 127
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x * a + y * b == n:\n                return x, y\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # a.sort()\n    # b.sort()\n    # print(a,b)\n    # print(a[0],b[0])\n    if a[0] <= b[0]:\n        return None\n    res = 0\n    for i in range(1, len(a)):\n        x = (n - a[i - 1] * b[i]) // a[i]\n        # print(x)\n        if x > 0:\n            res = x\n        else:\n            return None\n    return (res, res)\n",
        "num_ids": 131
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(1, (n - 1)//2 + 1):\n        if a*x + b*y == n:\n            return x, y\n        if (a*x + b*y) < n:\n            x = i\n            continue\n        if (a*x + b*y) > n:\n            y = i\n            continue\n    return x, y\n",
        "num_ids": 102
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 1\n    y = 1\n    while True:\n        if a * x + b * y == n:\n            return (x, y)\n        if a * x + b * y < n:\n            x += 1\n        if a * x + b * y > n:\n            y += 1\n",
        "num_ids": 74
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        elif n == 0:\n            return (1, 0)\n        else:\n            return (0, 1)\n    else:\n        if n % a == 0:\n            return (n // a, 0)\n        elif n % b == 0:\n            return (0, n // b)\n        else:\n            if b < 0:\n                return find_solution(a, -b, n)\n            else:\n                return find_solution(a, b, n)\n",
        "num_ids": 135
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1).difference(set(list2)))\n",
        "num_ids": 20
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            list1.remove(ele)\n            \n    # return the list\n    return list1\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element\n            lst.append(ele)\n            \n    # return the list\n    return lst\n    \n    \n    \n    \n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # initialize an empty list\n    lst = []\n    \n    # traverse given list\n    for ele in list1:\n        \n        # if element is present in list2\n        if ele in list2:\n            \n            # remove the element",
        "num_ids": 60
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\nprint(remove_elements([1,2,3,4,5,6,7,8,9,10],[1,2,5,8]))\n",
        "num_ids": 79
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #print(list1)\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n            #print(i)\n    return list1\n",
        "num_ids": 47
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l = []\n    for i in list1:\n        if i not in list2:\n            l.append(i)\n    return l\n",
        "num_ids": 36
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    common = list(set(list1) & set(list2))\n    list1 = [x for x in list1 if x not in common]\n    list2 = [x for x in list2 if x not in common]\n",
        "num_ids": 55
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1\n",
        "num_ids": 25
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (n - 2 * i)\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n + 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n):\n        total += i\n        total -= (i * 2)\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n // 2 + 1):\n        sum += (n - 2 * i)\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = abs(n)\n    sum_series = 0\n    for i in range(n):\n        sum_series += i\n    return sum_series\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + (sum_series(n-2))\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initializing the variable\n    sum_of_series = 0\n",
        "num_ids": 18
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n))\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return sum_series(n - 2) + n\n",
        "num_ids": 37
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l * 0.5) * tan(pi/s)\nprint(area_polygon(4,6))\n",
        "num_ids": 33
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l <= 0:\n        return 0\n    if l == 1:\n        return pi\n    area = (s * l**2)/2\n    return area\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) * 0.5\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(\"in area\")\n    if(l<0):\n        return \"Invalid length\"\n    elif(s<2):\n        return 0\n    else:\n        return (l*l)/(4*tan(pi/s))\n",
        "num_ids": 58
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) * 0.5\n",
        "num_ids": 14
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def math():\n        '''\n        The area of a polygon can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the polygon\")\n        a = s\n        n = l\n        area = (a * n) / 2\n        print(\"Area of polygon is {}\".format(area))\n    def trig():\n        '''\n        The area of a polygon can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the polygon\")\n        a = s\n        n = l\n        area = (a * n) / 2\n        print(\"Area of polygon is {}\".format(area))\n    def arc():\n        '''\n        The area of a polygon can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the polygon\")\n        a = s\n        n = l\n        area = (a * n) / 2\n        print(\"Area of polygon is {}\".format(area))\n    math()\n    trig()\n    arc()\n    \ndef area_triangle(b,h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    def math():\n        '''\n        The area of a triangle can be calculated using the third of its sides.\n        '''\n        print(\"\\nCalculating area of the triangle\")\n        b = b\n        h = h\n        area = (b * h) / 2\n        print(\"Area of triangle is {}\".format(area))\n    def trig():\n        '''\n        The area of a triangle can be calculated using the third of its sides.\n        '''\n        print(\"\\nCalculating area of the triangle\")\n        b = b\n        h = h\n        area = (b * h) / 2\n        print(\"Area of triangle is {}\".format(area))\n    def arc():\n        '''\n        The area of a triangle can be calculated using the third of its sides.\n        '''\n        print(\"\\nCalculating area of the triangle\")\n        b = b\n        h = h\n        area = (b * h) / 2\n        print(\"Area of triangle is {}\".format(area))\n    math()\n    trig()\n    arc()\n    \ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    def math():\n        '''\n        The area of a circle can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the circle\")\n        r = r\n        area = pi * (r * r)\n        print(\"Area of circle is {}\".format(area))\n    def trig():\n        '''\n        The area of a circle can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the circle\")\n        r = r\n        area = pi * (r * r)\n        print(\"Area of circle is {}\".format(area))\n    def arc():\n        '''\n        The area of a circle can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the circle\")\n        r = r\n        area = pi * (r * r)\n        print(\"Area of circle is {}\".format(area))\n    math()\n    trig()\n    arc()\n    \ndef area_rectangle(w,l):\n    '''\n    Write a function to calculate the area of a rectangle given the width and length.\n    '''\n    def math():\n        '''\n        The area of a rectangle can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the rectangle\")\n        w = w\n        l = l\n        area = w * l\n        print(\"Area of rectangle is {}\".format(area))\n    def trig():\n        '''\n        The area of a rectangle can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the rectangle\")\n        w = w\n        l = l\n        area = w * l\n        print(\"Area of rectangle is {}\".format(area))\n    def arc():\n        '''\n        The area of a rectangle can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the rectangle\")\n        w = w\n        l = l\n        area = w * l\n        print(\"Area of rectangle is {}\".format(area))\n    math()\n    trig()\n    arc()\n    \ndef area_parallelogram(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram given the length and width.\n    '''\n    def math():\n        '''\n        The area of a parallelogram can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the parallelogram\")\n        a = a\n        b = b\n        area = (a * b) / 2\n        print(\"Area of parallelogram is {}\".format(area))\n    def trig():\n        '''\n        The area of a parallelogram can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the parallelogram\")\n        a = a\n        b = b\n        area = (a * b) / 2\n        print(\"Area of parallelogram is {}\".format(area))\n    def arc():\n        '''\n        The area of a parallelogram can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the parallelogram\")\n        a = a\n        b = b\n        area = (a * b) / 2\n        print(\"Area of parallelogram is {}\".format(area))\n    math()\n    trig()\n    arc()\n    \ndef area_trapezium(h,a,b):\n    '''\n    Write a function to calculate the area of a trapezium given the height, sides and width.\n    '''\n    def math():\n        '''\n        The area of a trapezium can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the trapezium\")\n        h = h\n        a = a\n        b = b\n        area = 0.5 * (a + b) * h\n        print(\"Area of trapezium is {}\".format(area))\n    def trig():\n        '''\n        The area of a trapezium can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the trapezium\")\n        h = h\n        a = a\n        b = b\n        area = 0.5 * (a + b) * h\n        print(\"Area of trapezium is {}\".format(area))\n    def arc():\n        '''\n        The area of a trapezium can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the trapezium\")\n        h = h\n        a = a\n        b = b\n        area = 0.5 * (a + b) * h\n        print(\"Area of trapezium is {}\".format(area))\n    math()\n    trig()\n    arc()\n    \ndef area_cylinder(r,h):\n    '''\n    Write a function to calculate the area of a cylinder given the radius and height.\n    '''\n    def math():\n        '''\n        The area of a cylinder can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the cylinder\")\n        r = r\n        h = h\n        area = pi * (r ** 2) * h\n        print(\"Area of cylinder is {}\".format(area))\n    def trig():\n        '''\n        The area of a cylinder can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the cylinder\")\n        r = r\n        h = h\n        area = pi * (r ** 2) * h\n        print(\"Area of cylinder is {}\".format(area))\n    def arc():\n        '''\n        The area of a cylinder can be calculated using the first of its sides.\n        '''\n        print(\"\\nCalculating area of the cylinder\")\n        r = r\n        h = ",
        "num_ids": 25
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (l ** 2)) / (4 * tan(pi/l))\n    return round(area, 3)\n",
        "num_ids": 33
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (l * l) / (4 * tan(pi / l))\n    return a * s\ndef circumradius(a, b, c):\n    '''\n    Write a function to calculate the circumradius of a triangle given the length of its three sides.\n    '''\n    x = (a + b + c) / 2\n    return (x * (x - a) * (x - b) * (x - c)) ** (1 / 2)\ndef quadrilateral_area(l1, l2, l3, l4):\n    '''\n    Write a function to calculate the area of a quadrilater given the lengths of its four sides.\n    '''\n    return (l1 * l2 * l3 + l1 * l3 * l4 + l1 * l4 * l2 + l2 * l3 * l4) / 2\ndef isosceles_triangle_area(a, b, c):\n    '''\n    Write a function to calculate the area of an isosceles triangle given the lengths of its sides.\n    '''\n    return ((a + b) * c) / 2\ndef rectangle_area(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return a * b\ndef triangle_area(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given its length and height.\n    '''\n    return (a * b) / 2\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * r ** 2\ndef circle_perimeter(r):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius.\n    '''\n    return pi * 2 * r\ndef rectangle_perimeter(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return l * 2 + w * 2\ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a triangle given its length and height.\n    '''\n    return a + b + c\ndef hyperbolic_area(a, b):\n    '''\n    Write a function to calculate the area of an hyperbolic curve given its radius and length.\n    '''\n    return (a * b) * (pi * a * b) ** (1 / 2)\ndef parabola_area(a, b):\n    '''\n    Write a function to calculate the area of a parabola given its length and height.\n    '''\n    return a * b * pi\ndef trapezoid_area(a, b, c):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, width, and height.\n    '''\n    return (a + b) / 2 * c\ndef parabolic_area(a, b):\n    '''\n    Write a function to calculate the area of a parabolic curve given its radius and length.\n    '''\n    return 2 * a * b * pi * (b / (2 * a)) ** (1 / 2)\ndef square_perimeter(l):\n    '''\n    Write a function to calculate the perimeter of a square given its length.\n    '''\n    return 4 * l\ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a triangle given its length and height.\n    '''\n    return a + b + c\ndef circle_perimeter(r):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius.\n    '''\n    return 2 * pi * r\ndef cylinder_volume(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height.\n    '''\n    return pi * r ** 2 * h\ndef cylinder_surface_area(r, h):\n    '''\n    Write a function to calculate the surface area of a cylinder given its radius and height.\n    '''\n    return 2 * pi * r * h\ndef cone_surface_area(r, h):\n    '''\n    Write a function to calculate the surface area of a cone given its radius and height.\n    '''\n    return pi * (h ** 2) * r\ndef cone_volume(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height.\n    '''\n    return pi * r ** 2 * h\ndef sphere_surface_area(r):\n    '''\n    Write a function to calculate the surface area of a sphere given its radius.\n    '''\n    return 4 * pi * r ** 2\ndef sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return (4 / 3) * pi * r ** 3\ndef pyramid_volume(r, h):\n    '''\n    Write a function to calculate the volume of a pyramid given its radius and height.\n    '''\n    return 2 * h * (r ** 2)\ndef pyramid_surface_area(r, h):\n    '''\n    Write a function to calculate the surface area of a pyramid given its radius and height.\n    '''\n    return 2 * h * (r ** 2) + 2 * h * (r ** 2)\ndef cone_volume(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height.\n    '''\n    return pi * (h ** 2) * r\ndef cylinder_volume(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height.\n    '''\n    return pi * r ** 2 * h\ndef cone_surface_area(r, h):\n    '''\n    Write a function to calculate the surface area of a cone given its radius and height.\n    '''\n    return pi * r ** 2 * h + pi * r * h + pi * (2 * r ** 2) * h / 2\ndef pyramid_surface_area(r, h):\n    '''\n    Write a function to calculate the surface area of a pyramid given its radius and height.\n    '''\n    return 2 * h * (r ** 2) + 2 * h * (r ** 2) + pi * r ** 2\ndef pyramid_volume(r, h):\n    '''\n    Write a function to calculate the volume of a pyramid given its radius and height.\n    '''\n    return pi * r ** 2 * h\ndef pyramid_volume(r, h):\n    '''\n    Write a function to calculate the volume of a pyramid given its radius and height.\n    '''\n    return pi * r ** 2 * h\ndef rectangle_perimeter(l, w):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return 2 * (l + w)\ndef rectangle_surface_area(l, w):\n    '''\n    Write a function to calculate the surface area of a rectangle given its length and width.\n    '''\n    return 2 * l * w\ndef equilateral_triangle_surface_area(s):\n    '''\n    Write a function to calculate the surface area of an equilateral triangle given its side length.\n    '''\n    return s * (s - 2) / 2\ndef equilateral_triangle_surface_area(a):\n    '''\n    Write a function to calculate the surface area of an equilateral triangle given its length.\n    '''\n    return 3 * a ** 2 / 4\ndef equilateral_triangle_volume(a):\n    '''\n    Write a function to calculate the volume of an equilateral triangle given its length.\n    '''\n    return a ** 3 / (2 * 3 ** (1 / 2))\ndef rectangle_surface_area(l, w):\n    '''\n    Write a function to calculate the surface area of a rectangle given its length and width.\n    '''\n    return 2 * (l + w)\ndef rectangle_volume(l, w):\n    '''\n    Write a function to calculate the volume of a rectangle given its length and width.\n    '''\n    return l * w\ndef trapezoid_area(a, b, c):\n    '''\n    Write a function to calculate the area of a trapezoid given its length, width, and height.\n    '''\n    return (a + b) / 2 ",
        "num_ids": 12
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = ((s**2)/(4*tan(pi/s))) * (1 + tan(pi/s))**(s)\n    return area\n",
        "num_ids": 38
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((s * s)/(tan(pi/s))) * s\n",
        "num_ids": 19
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = abs(n)\n    s = 0\n    if n == 0:\n        return False\n    for i in range(1,n+1):\n        if n % i == 0:\n            s += i\n    if s == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    count = 1\n    while count < n:\n        if n % count == 0:\n            if count!= n:\n                return False\n            else:\n                return True\n        count += 1\n    else:\n        return False\n    \n    \ndef sum_divisors(n):\n    '''\n    Write a function that returns the sum of the divisors of a given number. \n    '''\n    total = 1\n    while n > 1:\n        total += n\n        n = n - 1\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_list = []\n    num_list = range(1,n)\n    for i in num_list:\n        for j in num_list:\n            if i!=j and (i+j)%i ==0:\n                div_sum_list.append(i)\n    return div_sum_list\n    \ndef div_sum_sum(n): \n    '''\n    Write a function to find the sum of the sum of the divisors of two integers.\n    '''\n    div_sum_list = []\n    num_list = range(1,n)\n    for i in num_list:\n        for j in num_list:\n            if i!=j and (i+j)%i ==0:\n                div_sum_list.append(i)\n    sum_sum_list = sum(div_sum_list)\n    return sum_sum_list\n",
        "num_ids": 95
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_list = []\n    # Create divisor list\n    for i in range(1,n):\n        if (n % i == 0):\n            divisor_list.append(i)\n    return sum(divisor_list) == n \n    #divisor_list = []\n    #return any(n % i == 0 for i in range(1, int(math.sqrt(n)) + 1))\n    #print(divisor_list)\ndef solve():\n    '''\n    print(div_sum(12)) # True\n    print(div_sum(15)) # False\n    print(div_sum(12)) # True\n    print(div_sum(25)) # True\n    '''\n    for i in range(1,11):\n        print(div_sum(i))",
        "num_ids": 22
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,n):\n        if(n%i ==0):\n            if(n/i == i):\n                return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    l = []\n    divisors = []\n    for i in range(1, n+1):\n        if(n%i == 0):\n            l.append(i)\n    divisors = set(l)\n    divisors.remove(n)\n    s = sum(divisors)\n    return(s == n)\ndef max_sum(arr, n):\n    '''\n    Write a function to determine the maximum sum of consecutive elements in the array.\n    '''\n    maxSum = 0\n    for i in range(n):\n        for j in range(i, n):\n            maxSum = max(maxSum, sum(arr[i:j+1]))\n    return maxSum\ndef max_sum_increasing(arr):\n    '''\n    Write a function that finds the max sum of a subarray with consecutive elements.\n    '''\n    max_sum = arr[0]\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            temp = sum(arr[i:j+1])\n            if(temp > max_sum):\n                max_sum = temp\n    return max_sum\ndef max_sum_from_3_end(arr):\n    '''\n    Write a function that finds the maximum sum from 3 consecutive numbers in an array.\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                temp = arr[i]+arr[j]+arr[k]\n                if(temp > max_sum):\n                    max_sum = temp\n    return max_sum\ndef max_3sum(arr):\n    '''\n    Write a function that finds the maximum sum of three consecutive numbers in an array.\n    '''\n    arr.sort()\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if(arr[i]+arr[j]+arr[k] > max_sum):\n                    max_sum = arr[i]+arr[j]+arr[k]\n    return max_sum\ndef subarray_max(arr):\n    '''\n    Write a function to find the maximum sum subarray of size 3 in a given array.\n    '''\n    max_sum = -math.inf\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n        if(sum > max_sum):\n            max_sum = sum\n            l = i+1\n            r = len(arr) - 1\n            while(l <= r):\n                mid = l + ((r-l)//2)\n                if(arr[mid] < arr[mid+1] and arr[mid] < arr[mid-1]):\n                    return (mid, mid+1)\n                elif(arr[mid] < arr[mid+1]):\n                    l = mid + 1\n                else:\n                    r = mid - 1\n    return (l, r)\ndef subarray_min(arr):\n    '''\n    Write a function to find the minimum sum subarray of size 3 in a given array.\n    '''\n    max_sum = -math.inf\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n        if(sum < max_sum):\n            max_sum = sum\n            l = i+1\n            r = len(arr) - 1\n            while(l <= r):\n                mid = l + ((r-l)//2)\n                if(arr[mid] > arr[mid+1] and arr[mid] > arr[mid-1]):\n                    return (mid, mid+1)\n                elif(arr[mid] > arr[mid+1]):\n                    l = mid + 1\n                else:\n                    r = mid - 1\n    return (l, r)\ndef subarray_product(arr):\n    '''\n    Write a function to find the product of the minimum and maximum product subarrays of size 3 in a given array.\n    '''\n    max_sum = -math.inf\n    min_sum = math.inf\n    prod_min = 1\n    prod_max = 1\n    for i in range(len(arr)):\n        temp_min = min_sum\n        temp_max = max_sum\n        temp_prod_min = prod_min\n        temp_prod_max = prod_max\n        if(i < 3):\n            continue\n        for j in range(i, len(arr)):\n            if(j < i + 3):\n                continue\n            min_sum = min(arr[j], min_sum)\n            max_sum = max(arr[j], max_sum)\n            prod_min = min(prod_min, temp_min * arr[j])\n            prod_max = max(prod_max, temp_max * arr[j])\n            temp_min = min_sum\n            temp_max = max_sum\n            temp_prod_min = prod_min\n            temp_prod_max = prod_max\n    return (prod_min, prod_max)\ndef binary_search(arr, low, high, x):\n    '''\n    Write a binary search function. It should return the index of x in arr if present, otherwise should return -1.\n    '''\n    mid = low + ((high-low)//2)\n    if(x == arr[mid]):\n        return mid\n    elif(x < arr[mid]):\n        return binary_search(arr, low, mid-1, x)\n    elif(x > arr[mid]):\n        return binary_search(arr, mid+1, high, x)\n    return -1\ndef frequency_sort(arr):\n    '''\n    Write a function to sort an array of numbers in ascending order using the frequency of occurrence of each element.\n    '''\n    arr.sort(key=lambda x: x[1])\n    for i in range(1, len(arr)):\n        arr[i][1] = arr[i-1][1] + arr[i][1]\n    return arr\ndef insertion_sort(arr):\n    '''\n    Write a function to sort an array of numbers in ascending order using the insertion sort algorithm.\n    '''\n    for i in range(1, len(arr)):\n        temp = arr[i]\n        j = i-1\n        while(j >= 0 and arr[j] > temp):\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = temp\n    return arr\ndef selection_sort(arr):\n    '''\n    Write a function to sort an array of numbers in ascending order using the selection sort algorithm.\n    '''\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if(arr[min_idx] > arr[j]):\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\ndef merge_sort(arr):\n    '''\n    Write a function that takes in an array and sorts it using the merge sort algorithm.\n    '''\n    if(len(arr) == 1):\n        return arr\n    mid = len(arr)//2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    '''\n    Write a function to merge two sorted arrays of size n each into a single sorted array of size n.\n    '''\n    i = j = k = 0\n    while(i < len(left) and j < len(right)):\n        if(left[i] < right[j]):\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n        k += 1\n    while(i < len(left)):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n    while(j < len(right)):\n        arr[k] = right[",
        "num_ids": 135
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #using a simple method to check if the sum of divisors is the same\n    for i in range(1,n):\n        if (n%i) == 0:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            sum_div = n / i + i \n            if sum_div == n: \n                return True \n    return False\nprint(div_sum(15))\nprint(div_sum(22))\nprint(div_sum(27))\nprint(div_sum(70))\nprint(div_sum(72))\nprint(div_sum(135))\n",
        "num_ids": 119
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_set = set()\n    for i in range(1, math.ceil(n / 2)):\n        if n % i == 0:\n            div_set.add(i)\n    if n % 2 == 0:\n        div_set.add(2)\n    if sum(div_set) == n:\n        return True\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_num = []\n    for i in range(1,n):\n        if n%i == 0:\n            div_num.append(i)\n    if sum(div_num) == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = str1.lower()\n    count = 0\n    for i in str2:\n        if i in \"abcdefghijklmnopqrstuvwxyz\":\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for char in str1: \n        char_count[char] = char_count.get(char, 0) + 1\n        \n    return char_count\n",
        "num_ids": 47
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for x in range(len(str1)):\n        if (str1[x]).lower() == (chr(x+65)):\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    num_chars = 0\n    num_chars_english = 0\n",
        "num_ids": 20
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    string = str1.upper()\n    alphabet_dict = {'A':0, 'B':0, 'C':0, 'D':0, 'E':0, 'F':0, 'G':0, 'H':0, 'I':0, 'J':0, 'K':0, 'L':0, 'M':0, 'N':0, 'O':0, 'P':0, 'Q':0, 'R':0, 'S':0, 'T':0, 'U':0, 'V':0, 'W':0, 'X':0, 'Y':0, 'Z':0}\n    \n    for i in range(0,len(string)):\n        alphabet_dict[string[i]] += 1\n        \n    return alphabet_dict\n    \ncount_char_position(\"a\")\ncount_char_position(\"A\")\ncount_char_position(\"b\")\ncount_char_position(\"B\")\ncount_char_position(\"1\")\ncount_char_position(\"aA\")\ncount_char_position(\"9Z\")\ncount_char_position(\"9z\")\ncount_char_position(\"9_\")\ncount_char_position(\"9Za\")\ncount_char_position(\"01_\")\ncount_char_position(\"aA-\")\ncount_char_position(\"zZ-\")\ncount_char_position(\"a1b\")\ncount_char_position(\"a1B\")\ncount_char_position(\"a1_\")\ncount_char_position(\"a_a\")\ncount_char_position(\"a_A\")\ncount_char_position(\"a1_1\")\ncount_char_position(\"a1_1_\")\ncount_char_position(\"a1_1_a\")\ncount_char_position(\"a1_1_A\")\ncount_char_position(\"a1_1_a_\")\ncount_char_position(\"a1_1_A_\")\ncount_char_position(\"a1_1_a_1\")\ncount_char_position(\"a1_1_A_1\")\ncount_char_position(\"a1_1_a_1_\")\ncount_char_position(\"a1_1_A_1_\")\ncount_char_position(\"a1_1_a_1_a\")\ncount_char_position(\"a1_1_A_1_a\")\ncount_char_position(\"a1_1_a_1_A\")\ncount_char_position(\"a1_1_A_1_a\")\ncount_char_position(\"a1_1_A_1_a_\")\ncount_char_position(\"a1_1_A_1_A_\")\ncount_char_position(\"a1_1_A_1_a_1\")\ncount_char_position(\"a1_1_A_1_A_1\")\ncount_char_position(\"a1_1_A_1_a_1_\")\ncount_char_position(\"a1_1_A_1_A_1_\")\ncount_char_position(\"a1_1_A_1_a_1_a\")\ncount_char_position(\"a1_1_A_1_A_1_a\")\ncount_char_position(\"a1_1_A_1_a_1_A\")\ncount_char_position(\"a1_1_A_1_A_a_\")\ncount_char_position(\"a1_1_A_1_A_a_1\")\ncount_char_position(\"a1_1_A_1_A_a_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_A_a_1_1_a_1_1_a_1_1_1_1_1_1_1_1_1_1_\")\ncount_char_position(\"a1_1_A_1_",
        "num_ids": 1997
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] not in d:\n            d[str1[i]] = 1\n        else:\n            d[str1[i]] += 1\n    \n    return d\n    \n    \nif __name__ == \"__main__\":\n    print(count_char_position(\"PYTHON\"))\n    print(count_char_position(\"JAVA\"))\n    print(count_char_position(\"AAAAAAAAAAABBBBBBBAACCCCCCCCDDDDDD\"))\n    print(count_char_position(\"ABBABA\"))\n    print(count_char_position(\"ABBABAA\"))\n    print(count_char_position(\"ABBAABAAB\")",
        "num_ids": 179
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower().count(str1.lower()[i]) == 1:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    d = {}\n    for i, j in enumerate(str1):\n        if j in d:\n            d[j] += 1\n        else:\n            d[j] = 1\n    return d\n",
        "num_ids": 61
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {}\n    for i in str1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # str1 = input('Enter a string: ')\n",
        "num_ids": 16
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # A = A.copy()\n    count = 0\n    A.sort()\n",
        "num_ids": 22
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    hash_table = {}\n    for number in A:\n        hash_table[number] = hash_table.get(number, 0) + 1\n    for key in hash_table.keys():\n        if hash_table.get(key, 0) % 2 == 0:\n            print(key, hash_table[key])\n",
        "num_ids": 78
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    even = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0:\n                even += 1\n    return even\n",
        "num_ids": 63
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    '''\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    '''\n    count = 0\n    for i in range(0, len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n",
        "num_ids": 60
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        if A[i] & 1 == 0:\n            for j in range(i+1,len(A)):\n                if A[i] ^ A[j] == 0:\n                    count +=1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    \n    for i in range(0,len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor = 0\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                xor = xor + 1\n    if xor % 2 == 0:\n        count = count + 1\n    print(count)\n",
        "num_ids": 88
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    s = {}\n    for i in A:\n        if i in s:\n            s[i] += 1\n        else:\n            s[i] = 1\n",
        "num_ids": 41
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in range(0,len(A)):\n        x = A[i]\n        for j in range(0,len(A)):\n            y = A[j]\n            if x^y == 0:\n                return 1\n    return 0\n",
        "num_ids": 63
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res=1\n    while res<=n:\n        res*=2\n    return res-1\n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # the number of bits in n\n    n_bits = 0\n    # get the number of bits in n\n    while n >= 1: \n        n >>= 1\n        n_bits += 1\n",
        "num_ids": 49
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    a = 0\n    while n % 2 == 0:\n        a = a + 1\n        n = n / 2\n    return 2 ** a\n",
        "num_ids": 36
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 1\n    while n >= 1:\n        n = n >> 1\n    return n + 1\ndef find_smallest_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 1\n    while n >= 1:\n        if n == 1:\n            return n\n        else:\n            n = n >> 1\n    return n + 1\n",
        "num_ids": 48
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x <= n:\n        x = x << 1\n",
        "num_ids": 21
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = n | (n - 1)\n    while (x > 0):\n        if (x & (x - 1)) == 0:\n            break\n        x = x >> 1\n    return x\n",
        "num_ids": 49
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    print(n)\n    for i in range(32,0,-1):\n        if((2**i)>n):\n            print(\"Smallest power of 2 greater than or equal to n is\",i)\n            return\n",
        "num_ids": 54
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = 1 << (n.bit_length() - 1)\n    print(n)\n    return n\n",
        "num_ids": 28
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while (power<=n):\n        power = power << 1\n    return power-1\n",
        "num_ids": 29
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    \n    n = n - 1\n    return 2**(n)\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n    \nprint(frequency([1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2],1))\n",
        "num_ids": 60
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if (a[i]==x):\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #print(f\"The count of {x} in {a} is {a.count(x)}\")\n    print(f\"The count of {x} in {a} is {a.count(x)}\")\n    print(f\"The count of {x} in {a} is {a.count(x)}\" )\n    return a.count(x)\n",
        "num_ids": 88
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \ndef print_text(s): \n    '''\n    Write a function that prints text with text formatting.\n    '''\n    print(s)\n    print(\"*\"*len(s))\n",
        "num_ids": 19
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    cnt=0\n    for i in a:\n        if i==x:\n            cnt+=1\n    return cnt\n",
        "num_ids": 33
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.count(x)\n    return a.count(x)\n",
        "num_ids": 19
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m < 0 or n > len(list1)-1 or n < m:\n        raise ValueError(\"Invalid indices\")\n    for i in range(m, n+1):\n        sum = sum + list1[i]\n    return sum\n",
        "num_ids": 64
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    if m == n:\n        return total\n    else:\n        for i in range(m, n + 1):\n            total += list1[i]\n        return total\n",
        "num_ids": 48
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    l = len(list1)\n",
        "num_ids": 11
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m,n+1):\n        sum_range += list1[i]\n    return sum_range\n",
        "num_ids": 39
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    print(sum)\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    count = 0\n    for i in range(m, n+1):\n        count = count + list1[i]\n    return count\n    \n",
        "num_ids": 37
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum = sum + list1[i]\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in range(m, n+1):\n        sum += list1[x]\n    return sum\nsum_range_list([10,20,30,40,50],2,5)\n",
        "num_ids": 54
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * math.sqrt(5)) * 2\n",
        "num_ids": 17
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = a * 0.5\n    a = math.sqrt(1.0 - math.pow(1.0 / 3.0, 2.0))\n    c = math.pow(s, 2.0)\n    return 2.0 * a * math.sqrt(5.0) - c\n",
        "num_ids": 76
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (1/2)*a*5\n",
        "num_ids": 13
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2/2)*math.sqrt(5)\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * (math.sqrt(5) - 1)) / 2\n",
        "num_ids": 21
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 1.5 * a * math.sqrt(3)\n    return perimeter\n    \nprint(perimeter_pentagon(5))\n",
        "num_ids": 37
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)\n",
        "num_ids": 10
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if type(a) == int and a >= 0:\n        return (5*a)*math.sqrt(3)\n    else:\n        return 'Enter a postive integer'\n",
        "num_ids": 45
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**2 * (5/2)) + ((a**2 - (5/2)) * (math.sqrt(5) - 1))\n",
        "num_ids": 38
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        return None\n    else:\n        return (a * 5) * 2\n",
        "num_ids": 27
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # result = 0\n    # for i in range(0,len(s)):\n    #     if s[i] == 't':\n    #         result += 1\n    #     else:\n    #         result += 0\n    # return result\n    return s.count('t')\n",
        "num_ids": 70
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(0,len(s)-2):\n        if s[i]=='t' and s[i+1]=='d' and s[i+2]=='d':\n            count+=1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            if s[i+1] == 't':\n                if s[i+2] == 'd':\n                    if s[i+3] == 'e':\n                        if s[i+4] == '.':\n                            if s[i+5] == 't':\n                                if s[i+6] == 'd':\n                                    if s[i+7] == '.':\n                                        if s[i+8] == 'i':\n                                            count += 1\n    print(count)\n",
        "num_ids": 156
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if s[i] == 'e' and s[i+1] == 'd' and s[i+2] == 't' and s[i+3] == 'd':\n            count = count + 1\n    return count\nprint(count_occurance(\"std\"))\n",
        "num_ids": 86
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    res = 0\n    for i in s:\n        if i == 't':\n            res += 1\n    print(res)\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse the string.\n    '''\n    s_rev = s[::-1]\n    print(s_rev)\n    \ndef sum_pairs(a,k):\n    '''\n    Write a function that takes in a list of integers and returns the number of pairs that sum to a specific value.\n    '''\n    from collections import Counter\n    count = 0\n    for i in a:\n        if k - i in a:\n            count += 1\n    print(count)\n    \ndef get_fuel(mass):\n    '''\n    Write a function that takes in a value for mass (in kg) and returns the fuel required to launch that mass of fuel (in kg).\n    '''\n    from math import sqrt\n    fuel_used = 0\n    while True:\n        fuel_needed = sqrt(mass)-2\n        fuel_used += fuel_needed\n        if fuel_needed <= 0:\n            break\n    print(fuel_used)\n    \ndef n_gram(s, n):\n    '''\n    Write a function that takes in a string and a positive integer n, and returns the n-gram of the string.\n    '''\n    gram = ''\n    for i in range(0, len(s)-n):\n        gram += s[i]\n    print(gram)\n    \ndef lucky_numbers(arr):\n    '''\n    Write a function that takes in an array of positive integers and returns a sorted array of only the lucky numbers in the array. A lucky number is an integer that is the sum of its own index and the index of its left or right neighbor (depending on the given language). In Python, the left neighbor would be the element to its left, and the right neighbor would be the element to its right.\n    '''\n    result = []\n    for i in arr:\n        if (i+i+i == len(arr)):\n            result.append(i)\n    result = sorted(result)\n    print(result)\n    \ndef palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome and False otherwise. A palindrome is a string that reads the same backward as forward.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\n    \ndef zipper(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list of tuples containing the elements of list1 and list2 in order. The new list should be sorted by the first element of each tuple.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append((list1[i], list2[i]))\n    result = sorted(result)\n    print(result)\n    \ndef data_wrangling(data):\n    '''\n    Write a function that takes in a list of dictionaries and returns a new list where each key in each dictionary is a separate element in the new list. The new list should be sorted by the first element in each tuple.\n    '''\n    result = []\n    for i in data:\n        result.append(sorted(i.items()))\n    print(result)\n    \ndef to_camel_case(s):\n    '''\n    Write a function that takes in a string and returns the same string with all lower case letters replaced by the equivalent uppercase letters.\n    '''\n    return s.title()\n    \ndef map_reduce(arr, f, g):\n    '''\n    Write a function that takes in a list of numbers, arr, and two functions, f and g. The function should apply f and g to each element in arr and return the result. Your code should not use recursion, loops, or inheritance.\n    '''\n    result = []\n    for i in arr:\n        result.append(f(g(i)))\n    return result\n    \ndef reverse_dict(d):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the keys and values swapped.\n    '''\n    result = {}\n    for key, val in d.items():\n        result[val] = key\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c =='s':\n            count += 1\n",
        "num_ids": 27
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    # for loop and string length \n    # time complexity = O(n)\n    # space complexity = O(1)\n",
        "num_ids": 33
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c == 't':\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count = 0\n    for i in test_tuple:\n        if type(i) == type(test_tuple[0]):\n            count += 1\n        else:\n            break\n    if count == len(test_tuple):\n        return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for item in test_tuple:\n        if not isinstance(item,int):\n            print('Invalid input - ', item,'is not an integer')\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_dict = {}\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) in test_dict:\n            test_dict[type(test_tuple[i])].append(i)\n        else:\n            test_dict[type(test_tuple[i])] = [i]\n    return test_dict\n",
        "num_ids": 91
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if (type(test_tuple)!= tuple or len(test_tuple) < 2):\n        print('Invalid tuple')\n        return False\n    if (type(test_tuple[0])!= type(test_tuple[1])):\n        print('Not same type of elements')\n        return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # your code here\n    \n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for each_tuple in test_tuple:\n        if type(each_tuple)!= tuple:\n            print(\"Data type mismatched between elements of the tuple\")\n            return False\n",
        "num_ids": 46
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        print(\"\\n\\t\\tTEST CASE 1: All elements are of different data type\\n\")\n        return\n    else:\n        for i in range(len(test_tuple)):\n            if type(test_tuple[i]) is not type(test_tuple[0]):\n                print(\"\\n\\t\\tTEST CASE 1: All elements are of different data type\\n\")\n                return\n        print(\"\\n\\t\\tTEST CASE 1: All elements are of same data type\\n\")\n        return\n",
        "num_ids": 142
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"\\n\\nInside Check_type() function\\n\\n\")\n    if type(test_tuple) is tuple:\n        if test_tuple == (1,2,3,4,5):\n            print(\"\\nSuccess: For {} is of type tuple\".format(test_tuple))\n        else:\n            print(\"\\nFailed: For {} is not of type tuple\".format(test_tuple))\n    else:\n        print(\"\\nFailed: For {} is not of type tuple\".format(test_tuple))\n    print()\n",
        "num_ids": 135
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_tuple = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is tuple:\n            check_tuple.append(True)\n        elif type(test_tuple[i]) is not tuple:\n            check_tuple.append(False)\n    return check_tuple\n",
        "num_ids": 86
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Invalid type for test_tuple.\")\n",
        "num_ids": 30
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    m = 0\n    cnt = 0\n    for i in range(n):\n        if arr[i] == x:\n            cnt += 1\n        if arr[i]!= x:\n            if cnt > m:\n                m = cnt\n            cnt = 0\n",
        "num_ids": 69
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Fill this in.\n",
        "num_ids": 9
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n-1] == x:\n        return True\n    else:\n        if arr[n-1]!= x:\n            return False\n    if arr[0] == x:\n        return True\n    else:\n        if arr[0]!= x:\n            return False\n",
        "num_ids": 72
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n",
        "num_ids": 42
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > (n/2):\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr.count(x) > n/2:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > (n/2):\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    start, end = 0, n-1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == x:\n            count += 1\n            if count > n//2:\n                return True\n            else:\n                count -= 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n",
        "num_ids": 106
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    c = 0\n    for i in range(0,n):\n        if(arr[i] == x):\n            c = c + 1\n    if(c > (n/2)):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n = n & (n-1)\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n = n >> 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\n    \nprint(\"The number of set bits in the number 123 is: \",count_Set_Bits(123))\n",
        "num_ids": 58
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n    \n    \nif __name__ == \"__main__\": \n    # print(count_Set_Bits(12))\n    print(count_Set_Bits(14)) \n    \n    # print(count_Set_Bits(70))\n    # print(count_Set_Bits(10))\n    # print(count_Set_Bits(100))\n    # print(count_Set_Bits(121))\n    # print(count_Set_Bits(0))\n    # print(count_Set_Bits(13))\n    # print(count_Set_Bits(9))\n    # print(count_Set_Bits(1111111111))\n    \n    # print(count_Set_Bits(142357))\n    \n    # print(count_Set_Bits(123456789101112))",
        "num_ids": 229
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    i=0\n    count=0\n    while n:\n        n&=n-1\n        i+=1\n        if n:\n            count+=1\n    print(i,count)",
        "num_ids": 47
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # number = int(input(\"Enter a number:\"))\n    number = n\n    set_bit_count = 0\n    while number:\n        set_bit_count += number & 1\n        number = number >> 1\n    print(\"The number of set bits in the given number is:\",set_bit_count)\n",
        "num_ids": 75
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0\n    while n:\n        n = n & (n-1)\n        cnt += 1\n    return cnt",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n!=0):\n        n = n & (n-1)\n        count = count + 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = bin(n)[2:]\n    count = 0\n    for i in range(len(n)):\n        if n[i] == \"1\":\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(list(filter(lambda x:x[0]!=x[1],zip(str,str[1:]))))\n    \n    \n    \n    \n    \ndef last_occ(arr,n):\n    '''\n    Write a python function that returns the last occuring of the given character in the given string.\n    '''\n    for i in range(n-1,-1,-1):\n        if arr[i]==arr[i-1]:\n            return i\n            \n            \n    \n    \n    \n    \n    \ndef smallest(arr):\n    '''\n    Write a python function to find the smallest element of the given array.\n    '''\n    arr.sort()\n    return arr[0]\n    \n    \n    \n    \n    \ndef sum_of_odd_numbers(arr):\n    '''\n    Write a python function to sum all the even numbers in the given array.\n    '''\n    sum = 0\n    for i in arr:\n        if i%2==0:\n            sum+=i\n    return sum\n    \n    \n    \n    \n    \n    \ndef inverse_permutation(arr):\n    '''\n    Write a python function to reverse the order of the elements in the given array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            arr[i],arr[i+1] = arr[i+1],arr[i]\n    return arr\n    \n    \n    \n    \n    \n    \ndef sum_of_squares(arr):\n    '''\n    Write a python function to find the sum of the squares of all the elements in the given array.\n    '''\n    sum = 0\n    for i in arr:\n        sum+=i**2\n    return sum\n    \n    \n    \n    \n    \n    \ndef reverse(arr):\n    '''\n    Write a python function to reverse the elements in the given array.\n    '''\n    return arr[::-1]\n    \n    \n    \n    \n    \n    \ndef palindrome(arr):\n    '''\n    Write a python function to check whether the given string is a palindrome.\n    '''\n    rev = reverse(arr)\n    if arr==rev:\n        return True\n    else:\n        return False\n        \n    \n    \n    \n    \n    \ndef coins(m,arr):\n    '''\n    Write a python function to find the total number of ways to make change for a given amount.\n    '''\n    result = 0\n    for i in range(m+1):\n        result+=arr[i]\n    return result\n    \n    \n    \n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth term of Fibonacci series.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \n    \n    \n    \n    \ndef is_monotonic(arr):\n    '''\n    Write a python function to check whether a given array is monotonic.\n    '''\n    if arr[0]<arr[1] and arr[1]<arr[2]:\n        return True\n    if arr[0]>arr[1] and arr[1]>arr[2]:\n        return True\n    if arr[0]>arr[1] and arr[1]<arr[2]:\n        return True\n    if arr[0]<arr[1] and arr[1]>arr[2]:\n        return True\n    else:\n        return False\n        \n    \n    \n    \n    \n    \ndef median(arr):\n    '''\n    Write a python function to find the median of the given array.\n    '''\n    n = len(arr)\n    if n%2==1:\n        return arr[n//2]\n    else:\n        return sum(arr[:n//2])//n\n    \n    \n    \n    \n    \ndef string_compression(str):\n    '''\n    Write a python function to find the length of the compressed string of the given string.\n    '''\n    n = len(str)\n    if n==0:\n        return 0\n    else:\n        count = 0\n        count_prev = 0\n        count_curr = 1\n        curr = str[0]\n        while count_curr<n:\n            curr = str[count_curr]\n            count = count + 1\n            if curr==count_prev:\n                count_curr += 1\n                count_prev = count_curr\n            else:\n                count_curr = count\n                count_prev = count_curr\n        return count\n    \n    \n    \n    \n    \n    \ndef rotate(arr):\n    '''\n    Write a python function to rotate an array of n elements by d elements.\n    '''\n    n = len(arr)\n    d = n-1\n    if n==0 or d==0:\n        return arr\n    else:\n        if d<0:\n            d = d%n\n        if d==0:\n            return arr\n        else:\n            return arr[d:]+arr[:d]\n    \n    \n    \n    \n    \ndef array_pair_sum(arr):\n    '''\n    Write a python function that returns an array of tuples. Each tuple should contain two elements.\n    The first element of each tuple should be the index of the first element that is equal to the product of\n    the first and second element of the corresponding array element tuple.\n    '''\n    result = []\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j]==arr[i]+arr[j]:\n                result.append((i,j))\n    return result\n    \n    \n    \n    \n    \n    \ndef digit_sum(arr):\n    '''\n    Write a python function to sum all the digits of the given string.\n    '''\n    sum = 0\n    for i in arr:\n        if i.isdigit():\n            sum+=int(i)\n    return sum\n    \n    \n    \n    \n    \n    \ndef sum_even_odd_numbers(arr):\n    '''\n    Write a python function to sum all the even numbers in the given array.\n    '''\n    sum = 0\n    for i in arr:\n        if i%2==0:\n            sum+=i\n    return sum\n    \n    \n    \n    \n    \n    \ndef print_max(arr):\n    '''\n    Write a python function to find the maximum number in the given array.\n    '''\n    max = arr[0]\n    for i in range(len(arr)):\n        if arr[i]>max:\n            max = arr[i]\n    return max\n    \n    \n    \n    \n    \n    \ndef find_odd_numbers(arr):\n    '''\n    Write a python function to find the number of odd numbers in the given array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]%2!=0:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \ndef print_max_in_two(arr):\n    '''\n    Write a python function to find the maximum number in the given array.\n    '''\n    n1 = arr[0]\n    n2 = arr[1]\n    if n1>n2:\n        return n1\n    else:\n        return n2\n    \n    \n    \n    \n    \n    \ndef is_palindrome(arr):\n    '''\n    Write a python function to check whether the given string is a palindrome.\n    '''\n    arr = ''.join(arr).lower()\n    if arr==arr[::-1]:\n        return True\n    else:\n        return False\n        \n    \n    \n    \n    \n    \ndef find_missing_number(arr):\n    '''\n    Write a python function to find the missing number in the given array.\n    '''\n    n = len(arr)\n    sum = (n*(n+1))//2\n    for i in range(n):\n        sum -= arr[i]\n    return sum\n    \n    \n    \n    \n    \n    \nde",
        "num_ids": 58
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s=str.strip()\n    ans=\"\"\n    for i in range(len(s)):\n        if i%2==0:\n            ans+=s[i]\n    return ans\n",
        "num_ids": 47
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.replace(\" \", \"\")\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str = new_str + str[i]\n    return new_str\n",
        "num_ids": 61
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    output_string = \"\"\n    for i in range(0, len(str), 2):\n        output_string = output_string + str[i]\n    return output_string\n",
        "num_ids": 44
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # print(str[::2])\n    return str[::2]\n",
        "num_ids": 20
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # new_str = ''\n    # for i in range(len(str)):\n    #     if i % 2 == 0:\n    #         new_str += str[i]\n    # return new_str\n",
        "num_ids": 53
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.strip()[::2]\n",
        "num_ids": 13
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([ch for i,ch in enumerate(str) if i%2==0])\n    \nprint(odd_values_string('hgvhgdvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgvhgv",
        "num_ids": 2011
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1 = str\n    while True:\n        index = str1.find(\"a\")\n        if index == -1:\n            break\n        else:\n            str1 = str1.replace(str1[index], \"\")\n            \n    return str1\n",
        "num_ids": 63
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([c for i, c in enumerate(str) if i % 2 == 0])\n",
        "num_ids": 27
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        print(a)\n    elif b < a and b < c: \n        print(b)\n    elif c < a and c < b: \n        print(c)\n    else: \n        print('invalid input')\n",
        "num_ids": 71
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c: \n        return a \n    elif b<a and b<c: \n        return b\n    elif c<a and c<b: \n        return c\n    \nprint(\"\\n\\nMin of 3 numbers : \")\nprint(min_of_three(10,20,30))\nprint(min_of_three(20,30,30))\nprint(min_of_three(30,30,30))\nprint(min_of_three(30,20,30))\nprint(min_of_three(10,30,30))\nprint(min_of_three(30,20,10))\nprint(min_of_three(10,30,10))\nprint(min_of_three(20,20,20))\nprint(min_of_three(20,20,20))\n",
        "num_ids": 204
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n        \nmin_of_three(1,2,3)\n",
        "num_ids": 66
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        print(a)\n    elif b < a and b < c:\n        print(b)\n    else:\n        print(c)\n",
        "num_ids": 47
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\nmin_of_three(1,3,4)\n",
        "num_ids": 26
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\nprint(min_of_three(1,2,3))\n",
        "num_ids": 52
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    elif b<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 48
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=0;\n    while i<l:\n        i=i+1;\n    while i<=r:\n        if (n>>i)&1:\n            print(\"True\");\n            return;\n        i=i+1;\n    print(\"False\");\n    return;\n",
        "num_ids": 70
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return int(bin(l)[2:].zfill(n+1)[:n],2) - int(bin(r)[2:].zfill(n+1)[:n],2) == 1<<n\n",
        "num_ids": 52
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = bin(n)\n    temp = x[2:]\n    print(temp)\n    temp1 = '0b'+ temp\n    temp2 = int(temp1,2)\n    print(temp2)\n    temp3 = temp2 ^ r\n    temp4 = temp3\n    print(temp4)\n    print(type(temp4))\n    if temp4 == 0:\n        print('This is the range')\n        return True\n    else:\n        print('this is not the range')\n        return False\n    \n",
        "num_ids": 127
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n=int(input(\"Enter the number\"))\n    l=int(input(\"Enter the lower bound\"))\n    r=int(input(\"Enter the upper bound\"))\n    print(all_Bits_Set_In_The_Range(n,l,r))\n    ",
        "num_ids": 64
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    b = 0\n    for i in range(l,r+1):\n        b = b + i\n    if (b == (n*l)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n    \n    \n",
        "num_ids": 59
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r or r < 0 or n < 0:\n        return False\n    else:\n        return (bin(n).count(\"0\") == l) and (bin(n).count(\"0\") == r)\n",
        "num_ids": 53
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if (r >= l) and (n >= l) and (n <= r):\n        n_binary = int_to_binary(n,size = l)\n        print(\" The Binary representation of the number is: \",n_binary)\n        \n        for i in range(len(n_binary)):\n            if n_binary[i] == '1':\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 104
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>r or l<0 or r>n or r<0:\n        return False\n    if l==r:\n        return (l==0)\n    if l==n-1:\n        return(n==(l+1))\n    if (n & (n-1))==0:\n        return True\n    else:\n        return False\n        \nprint(all_Bits_Set_In_The_Given_Range(10,0,1)) #== False, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(10,0,9)) #== True\nprint(all_Bits_Set_In_The_Given_Range(9,0,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,0,10)) #== True\nprint(all_Bits_Set_In_The_Given_Range(9,1,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,1,10)) #== True\nprint(all_Bits_Set_In_The_Given_Range(8,1,9)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(8,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(7,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(7,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(0,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(0,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(1,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(1,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(2,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(2,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(3,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(3,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(4,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(4,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(5,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(5,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(6,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(6,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(7,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(7,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(8,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(8,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,2,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,2,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,2,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(10,2,10)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,3,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,3,10)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(10,3,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(10,3,10)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,4,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,4,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,4,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,4,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,5,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,5,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,5,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,5,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,6,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,6,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,6,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,6,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,7,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,7,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,7,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,7,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,8,8)) #== False, as all bits are not set",
        "num_ids": 1995
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<0 or r>1023:\n        print(\"Give the range 0 to 1023\")\n    elif l==r:\n        print(f\"Bit 0 and Bit {r} are set in the range\")\n    else:\n        for i in range(l,r+1):\n            if i&(1<<i):\n                print(f\"Bit {i} is set in the range\")\n            else:\n                print(f\"Bit {i} is unset in the range\")\n",
        "num_ids": 117
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # number_of_positives = 0\n    # number_of_negatives = 0\n    # for i in arr:\n    #     if i < 0:\n    #         number_of_negatives += 1\n    #     elif i > 0:\n    #         number_of_positives += 1\n    # return number_of_negatives, number_of_positives\n    \n    # O(n) time\n    # O(1) space\n    # (we can keep track of a negative counter and a positive counter)\n    negatives = 0\n    for i in range(n):\n        if arr[i] < 0:\n            negatives += 1\n            arr[i], arr[negatives] = arr[negatives], arr[i]\n    for i in range(n):\n        if arr[i] > 0:\n            arr[i], arr[negatives + 1] = arr[negatives + 1], arr[i]\n    return arr\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1973
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #For every number in the array, we check if it is less than 0\n    #If it is, we move it to the end of the array\n    #If it is not, we put it at the beginning of the array\n    for i in range(n):\n        for j in range(n-1):\n            if arr[j] < 0:\n                arr[i], arr[j] = arr[j], arr[i]\n    print(arr)\n    return arr\n",
        "num_ids": 112
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low_pos = 0\n    for i in range(n):\n        if arr[i] < 0:\n            temp = arr[low_pos]\n            arr[low_pos] = arr[i]\n            arr[i] = temp\n            low_pos += 1\n    return arr\n",
        "num_ids": 70
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    pos = pos + neg\n    return pos\n",
        "num_ids": 66
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    res = []\n    pos = []\n    neg = []\n    for i in arr:\n        if i >= 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n    pos = pos[n:] + pos[:n]\n    neg = neg[n:] + neg[:n]\n    res.extend(neg)\n    res.extend(pos)\n    return res\n",
        "num_ids": 101
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n",
        "num_ids": 38
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = 0\n    pos = 0\n    # array length\n    N = len(arr)\n    # looping over each element\n    for i in range(0, N):\n        # checking if the element is negative or positive\n        if (arr[i] < 0):\n            neg = neg + 1\n        elif (arr[i] > 0):\n            pos = pos + 1\n        else:\n            print(arr[i])\n    # checking if there are no negative elements\n    if (neg == 0):\n        # if there are no negative elements, then change the first element to zero\n        arr[0] = 0\n        # looping over the remaining array\n        for i in range(1, N):\n            # checking if the element is positive\n            if (arr[i] > 0):\n                # if it is positive, then change the element to negative\n                arr[i] = -arr[i]\n    # checking if there are no positive elements\n    if (pos == 0):\n        # if there are no positive elements, then change the first element to zero\n        arr[0] = 0\n        # looping over the remaining array\n        for i in range(1, N):\n            # checking if the element is negative\n            if (arr[i] < 0):\n                # if it is negative, then change the element to positive\n                arr[i] = -arr[i]\n    # looping over the array\n    for i in range(0, N):\n        # checking if the element is negative\n        if (arr[i] < 0):\n            # if it is negative, then change the element to positive\n            arr[i] = -arr[i]\n    # looping over the array\n    for i in range(0, N):\n        # checking if the element is positive\n        if (arr[i] > 0):\n            # if it is positive, then change the element to negative\n            arr[i] = -arr[i]\n    # printing the array\n    print(\"The modified array is:\")\n    for i in range(0, N):\n        print(arr[i])\n",
        "num_ids": 487
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] >= 0:\n            break\n        i += 1\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            break\n    new_arr = arr[i:] + arr[:i]\n    return new_arr\n",
        "num_ids": 81
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    if n > len(arr):\n        return\n    for i in range(n):\n        if arr[i] < 0:\n            arr.insert(0, arr[i])\n            del arr[i]\n    return arr\n",
        "num_ids": 62
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    assert n >= 0, \"n should be greater than 0\"\n    \n    j = 0\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            if j == 0:\n                j = i\n                continue\n            arr[j], arr[i] = arr[i], arr[j]\n            j += 1\n    \n    # print(arr)\n    return arr\n",
        "num_ids": 100
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\"+char+\"\")\n",
        "num_ids": 18
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = list(str1)\n    str1.count(' ')\n    for i in range(str1.count(' ')):\n        str1.remove(' ')\n    for i in range(str1.count(' ')):\n        str1.append(char)\n    str1 = ''.join(str1)\n    return str1\n",
        "num_ids": 86
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    s=str1\n    s=s.replace(\" \",\"\")\n    s=s.replace(\"  \",\"\")\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    return(str1.replace(' ','{}'.format(char)))\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str_list=str1.split(' ')\n    for i in range(0,len(str_list)):\n        str_list[i]=char if str_list[i]=='' else str_list[i]\n    return''.join(str_list)\nprint(replace_blank('','?'))",
        "num_ids": 75
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    s = str1.replace(\" \",\"\")\n    return s\n",
        "num_ids": 18
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(' ','')\n    return new_str\n    \n    \n    \n    \n",
        "num_ids": 30
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n    \n",
        "num_ids": 15
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1, reverse=True)\n    return list1[0:n]\n",
        "num_ids": 27
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #sorted_list = sorted(list1)\n    #print(sorted_list)\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n    #print(list1)\n",
        "num_ids": 60
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result = []\n    for i in range(n):\n        heapq.heappush(result,list1[i])\n    return result\n    \ndef occurences(s,x):\n    '''\n    Write a function that takes in a string and an integer n and returns a list containing the n most frequent characters from the string.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) == 0:\n        return\n    if n == len(list1):\n        return list1\n    list1 = heapq.nlargest(n,list1)\n    return list1\nprint(larg_nnum([1,2,3,4,5,6,7,8,9],6))\ndef find_num_largest(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the number of the largest item in the list that is at least n times as big as the largest item in the list.\n    '''\n    if len(list1) == 0:\n        return\n    if n == 0:\n        return\n    list1 = heapq.nlargest(n,list1)\n    return len(list1)\nprint(find_num_largest([1,2,3,4,5],3))\ndef find_first_three(list1):\n    '''\n    Write a function that takes in a list and returns a list with the first 3 items in the list.\n    '''\n    if len(list1) == 0:\n        return []\n    return list1[:3]\nprint(find_first_three([1,2,3,4,5,6,7,8,9,10]))\ndef find_num_of_even_digits(list1):\n    '''\n    Write a function that takes in a list and returns the number of items in the list that have an even number of digits.\n    '''\n    if len(list1) == 0:\n        return 0\n    return sum(map(lambda x: int(len(str(x))%2==0),list1))\nprint(find_num_of_even_digits([12,345,2,3,5,6,7,8,9,1,0,345,2,3,5,6,7,8,9,1,2]))\ndef sort_list_ascending(list1):\n    '''\n    Write a function that takes in a list and sorts it in ascending order by converting each item to a float and then sorting by ascending order.\n    '''\n    if len(list1) == 0:\n        return []\n    list1 = map(lambda x: float(x),list1)\n    return sorted(list1)\nprint(sort_list_ascending([5,3,6,2,10,5]))\ndef find_longest_word(list1):\n    '''\n    Write a function that takes in a list of words and returns the longest word in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    return max(list1,key=len)\nprint(find_longest_word(['Hello','there','peep','peep','you']))\ndef remove_middle(list1):\n    '''\n    Write a function that takes in a list and returns a new list with the items at either end of the list.\n    '''\n    if len(list1) == 0:\n        return []\n    list1 = list1[:1] + list1[-1:]\n    return list1\nprint(remove_middle([1,2,3,4,5,6,7,8,9,10]))\ndef find_longest_run(list1):\n    '''\n    Write a function that takes in a list and returns the length of the longest run of repeated items in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    list1 = map(lambda x: (x,list1.count(x)),list1)\n    if len(list1) == 0:\n        return\n    counts = list(list1)\n    counts.sort(key=lambda x: x[0])\n    return counts[0][1]\nprint(find_longest_run(['Hello','peep','peep','hello','peep','peep']))\ndef find_longest_run_2(list1):\n    '''\n    Write a function that takes in a list and returns the length of the longest run of repeated items in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    list1 = map(lambda x: (x,list1.count(x)),list1)\n    if len(list1) == 0:\n        return\n    counts = list(list1)\n    counts.sort(key=lambda x: x[0])\n    return counts[0][1]\nprint(find_longest_run_2(['Hello','peep','peep','hello','peep','peep']))\ndef find_max(list1):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    return max(list1)\nprint(find_max(['hello','peep','peep','hello','peep','peep']))\ndef find_max_2(list1):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    return max(list1,key=lambda x: len(x))\nprint(find_max_2(['hello','peep','peep','hello','peep','peep']))\ndef find_max_3(list1):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    return max(list1,key=lambda x: len(x))\nprint(find_max_3(['hello','peep','peep','hello','peep','peep']))\ndef find_max_4(list1):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    list1 = list(list1)\n    list1.sort()\n    return list1[-1]\nprint(find_max_4(['hello','peep','peep','hello','peep','peep']))\ndef find_max_5(list1):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    list1 = list(list1)\n    list1.sort(key=len)\n    return list1[-1]\nprint(find_max_5(['hello','peep','peep','hello','peep','peep']))\ndef find_max_6(list1):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    list1 = list(list1)\n    list1.sort(key=len,reverse=True)\n    return list1[-1]\nprint(find_max_6(['hello','peep','peep','hello','peep','peep']))\ndef find_max_7(list1):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    if len(list1) == 0:\n        return\n    list1 = map(lambda x: x.lower(),list1)\n    list1 = list(list1)\n    list1.sort(key=len,reverse=True)\n    return list1[0]\nprint(find_max_7(['hello','peep','peep','hello','peep','peep']))\ndef find_max_8(list1):\n    '''\n    Write a function that takes in a list an",
        "num_ids": 12
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_sorted = sorted(list1, reverse=True)\n    return list_sorted[:n]\ndef sort_dict(dict1):\n    '''\n    Write a function that takes in a dictionary and returns a new dictionary with the keys from the dictionary sorted alphabetically.\n    '''\n    d = sorted(dict1.keys())\n    return dict(zip(d,dict1.values()))\n",
        "num_ids": 28
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    min_heap=[]\n    \n    for i in range(n):\n        heapq.heappush(min_heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap,list1[i])\n    return min_heap\n",
        "num_ids": 114
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1, reverse = True)[:n]\n",
        "num_ids": 17
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # TODO: You need to find the surface area of a cylinder.\n    # Refer to the page in the lecture notes.\n    # As a reminder, this is:\n    # S = 2 * pi * radius * height + 2 * pi * radius * 2 * height + 2 * pi * 2 * radius * height\n    # Please use your previous functions to understand the simplifications and follow the instructions.\n    # Input arguments:\n    # r = radius of the cylinder\n    # h = height of the cylinder\n    # Output:\n    # Return the surface area of the cylinder.\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r * 2 * h + 2 * math.pi * 2 * r * h\n    return surface_area\n",
        "num_ids": 176
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    h2 = h/2\n    q = r**2*np.pi\n    volume = np.pi*r**2*h2\n    area = q*volume\n    return area\n",
        "num_ids": 46
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #area\n    area = np.pi * (r**2)\n    #height\n    height = h * np.pi\n    #lateral surface area\n    return area + height\n",
        "num_ids": 45
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    pi = math.pi\n    # r : radius of a cylinder\n    # h : height of a cylinder\n    if h <= 0:\n        raise Exception('Height can not be zero!')\n    # Output\n    # return value\n    return 2*pi*r*(h - 1)\n",
        "num_ids": 73
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    lateral_surface_area = 2 * pi * r * h\n    \n    return lateral_surface_area\n",
        "num_ids": 30
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    r = r/2\n    h = h/2\n    \n    V = np.pi*r**2*h\n    L = 2*np.pi*r*h\n    A = V*np.pi*2\n    \n    return A, V, L\n",
        "num_ids": 72
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi,sqrt,sin\n    r,h=r,h\n    surface_area=2*pi*r*h\n    return surface_area\n",
        "num_ids": 41
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    \n    R = r\n    H = h\n    PI = PI\n    \n    S = PI*R*R\n    \n    result = S*2 + 4*PI*R*h\n    \n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2012
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n",
        "num_ids": 12
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    radius = r\n    height = h\n    pi = math.pi\n    \n    surf = pi*radius*radius*height\n    \n    return surf\n",
        "num_ids": 39
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 6*l**3\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 6 * l * l * l",
        "num_ids": 11
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Make sure you check for edge cases\n    if type(l) == float or type(l) == int:\n        raise Exception('Side length must be a positive number!')\n    else:\n        return l**3\n",
        "num_ids": 53
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    binary = bin(n)[2:]\n    res = 0\n    for bit in binary:\n        res += int(bit)\n    return res\n    \n    \ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert an integer (n) to binary format.\n    '''\n    res = ''\n    while n:\n        res += str(n%2)\n        n = n // 2\n    return res\n    \n    \ndef binary_to_decimal(b):\n    '''\n    Write a python function to convert a binary (b) number to integer.\n    '''\n    res = 0\n    for i in range(len(b)-1,-1,-1):\n        res += int(b[i]) * (2**i)\n    return res\n    \n    \ndef binary_addition(b1,b2):\n    '''\n    Write a python function to add two binary numbers.\n    '''\n    res = []\n    for i in range(max(len(b1),len(b2))):\n        if i < len(b1) and i < len(b2):\n            res.append(int(b1[i]) + int(b2[i]))\n        else:\n            res.append(int(b1[i-len(b2)]))\n    return res\n    \n    \ndef binary_multiplication(b1,b2):\n    '''\n    Write a python function to multiply two binary numbers.\n    '''\n    res = []\n    for i in range(max(len(b1),len(b2))):\n        if i < len(b1) and i < len(b2):\n            res.append(int(b1[i]) * int(b2[i]))\n        else:\n            res.append(int(b1[i-len(b2)]))\n    return res\n    \n    \ndef binary_division(b1,b2):\n    '''\n    Write a python function to divide two binary numbers.\n    '''\n    if len(b1) > len(b2):\n        res = []\n        for i in range(len(b2)):\n            res.append(int(b1[i]) * int(b2[i]))\n        for i in range(len(b1)-len(b2)):\n            res.append(int(b1[i]))\n        return res\n    else:\n        res = []\n        for i in range(len(b1)):\n            res.append(int(b1[i]) * int(b2[i]))\n        for i in range(len(b1)-len(b2)):\n            res.append(int(b1[i+len(b2)]))\n        return res\n    \n    \ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert an integer (n) to binary format.\n    '''\n    binary = bin(n)[2:]\n    res = ''\n    for bit in binary:\n        res += str(bit)\n    return res\n    \n    \ndef binary_to_decimal(b):\n    '''\n    Write a python function to convert a binary (b) number to integer.\n    '''\n    res = 0\n    for i in range(len(b)-1,-1,-1):\n        res += int(b[i]) * (2**i)\n    return res\n    \n    \ndef binary_addition(b1,b2):\n    '''\n    Write a python function to add two binary numbers.\n    '''\n    res = []\n    for i in range(max(len(b1),len(b2))):\n        if i < len(b1) and i < len(b2):\n            res.append(int(b1[i]) + int(b2[i]))\n        else:\n            res.append(int(b1[i-len(b2)]))\n    return res\n    \n    \ndef binary_multiplication(b1,b2):\n    '''\n    Write a python function to multiply two binary numbers.\n    '''\n    res = []\n    for i in range(max(len(b1),len(b2))):\n        if i < len(b1) and i < len(b2):\n            res.append(int(b1[i]) * int(b2[i]))\n        else:\n            res.append(int(b1[i-len(b2)]))\n    return res\n    \n    \ndef binary_division(b1,b2):\n    '''\n    Write a python function to divide two binary numbers.\n    '''\n    if len(b1) > len(b2):\n        res = []\n        for i in range(len(b2)):\n            res.append(int(b1[i]) * int(b2[i]))\n        for i in range(len(b1)-len(b2)):\n            res.append(int(b1[i]))\n        return res\n    else:\n        res = []\n        for i in range(len(b1)):\n            res.append(int(b1[i]) * int(b2[i]))\n        for i in range(len(b1)-len(b2)):\n            res.append(int(b1[i+len(b2)]))\n        return res\n    \n    \ndef main():\n    # TEST 1\n    # print(even_bit_set_number(8))\n    \n    # TEST 2\n    # print(decimal_to_binary(9))\n    \n    # TEST 3\n    # print(binary_to_decimal([0,0,1]))\n    \n    # TEST 4\n    # print(binary_to_decimal([0,0,0,1]))\n    \n    # TEST 5\n    # print(binary_to_decimal([0,1]))\n    \n    # TEST 6\n    # print(binary_to_decimal([0,1,0,0]))\n    \n    # TEST 7\n    # print(binary_to_decimal([0,0,1,1]))\n    \n    # TEST 8\n    # print(binary_to_decimal([0,0,1,1,1]))\n    \n    # TEST 9\n    # print(binary_to_decimal([1,1,0,0,1,0,0,0,0,0]))\n    \n    # TEST 10\n    # print(binary_to_decimal([1,0,0,1,1]))\n    \n    # TEST 11\n    # print(binary_to_decimal([0,1,1]))\n    \n    # TEST 12\n    # print(binary_to_decimal([1,1,0,0,1]))\n    \n    # TEST 13\n    # print(binary_to_decimal([1,1,1,1]))\n    \n    # TEST 14\n    # print(binary_to_decimal([1,1,0,0,1,0]))\n    \n    # TEST 15\n    # print(binary_to_decimal([0,1,1,1,1,1,1]))\n    \n    # TEST 16\n    # print(binary_to_decimal([1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    \n    # TEST 17\n    # print(binary_to_decimal([1,0,0,0,0,1,0,1]))\n    \n    # TEST 18\n    # print(binary_to_decimal([1,0,0,0,0,1,0,1,0,1,1]))\n    \n    # TEST 19\n    # print(binary_to_decimal([1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    \n    # TEST 20\n    # print(binary_to_decimal([1,1,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,0,1]))\n    \n    # TEST 21\n    # print(binary_to_decimal([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    \n",
        "num_ids": 908
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef all_even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef all_odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set odd bits of a given number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef all_bit_set_number(n): \n    '''\n    Write a python function to set all bits of a given number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef get_bit_and_number(n): \n    '''\n    Write a python function to get bit and of a given number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef get_bit_or_number(n): \n    '''\n    Write a python function to get bit and of a given number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef get_bit_xor_number(n): \n    '''\n    Write a python function to get bit xor of a given number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef reverse_binary_number(n): \n    '''\n    Write a python function to reverse the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_2(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_3(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_4(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_5(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_6(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_7(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_8(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_9(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_10(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_11(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_12(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_13(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_14(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_15(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_16(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_17(n): \n    '''\n    Write a python function to flip the binary number.\n    '''\n    ans = 0\n    while (n!= 0): \n        ans = (ans << 1) | (n & 1) \n        n >>= 1\n    return ans\n    \n    \ndef flip_binary_number_18(n): \n    '''",
        "num_ids": 1
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (n.bit_length()-1))\n",
        "num_ids": 20
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    binary = bin(n)\n    even_bit_mask = '{0:08b}'.format(n)\n    return binary.replace(\"0b\", even_bit_mask)\n",
        "num_ids": 46
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    return n | n-1\n    \n",
        "num_ids": 23
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Binary Representation of n\n    bin_n = bin(n)[2:]\n    # Dividing n by 2\n    # Finding the length of the Binary Representation\n    # for every loop\n    length = len(bin_n)\n    # Creating a new binary string\n    # with same length as n\n    new_bin = '0'*length\n    # For every bit\n    for i in range(0, length):\n        # If the bit is a 1\n        if bin_n[i] == '1':\n            # Adding 1 to the new_bin string\n            new_bin = new_bin + '1'\n        else:\n            # Adding 0 to the new_bin string\n            new_bin = new_bin + '0'\n    # Getting the value of new_bin\n    # by comparing the actual value with the new_bin\n    final = int(new_bin, 2)\n    return final\n",
        "num_ids": 215
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result=n&((1<<n.bit_length())-1)\n    print(\"Original Number is \",n)\n    print(\"Set Even Bits is \",result)\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    s = bin(n)\n    s = s.replace(\"0b\", \"\")\n    s = str(s)\n    return int(s[:len(s)//2])\n",
        "num_ids": 46
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (n.bit_length() - 1)) \n",
        "num_ids": 21
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    # return n | (1<<(n.bit_length()-1))\n    return (n | (n>>1))& ~(n>>1)\n",
        "num_ids": 50
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # test_list = [(1, 3), (2, 3), (3, 1), (2, 1), (1, 2), (1, 1), (2, 2), (1, 3), (3, 3)]\n    # return {(1, 3): 3, (2, 3): 2, (3, 1): 1, (2, 1): 1, (1, 2): 1, (1, 1): 1, (2, 2): 1, (1, 3): 1, (3, 3): 1}\n    \n    # find length of list\n    length = len(test_list)\n    # initialize dictionary\n    dict = {}\n    # iterate through list\n    for i in range(length):\n        # check if tuple in dict\n        if test_list[i] not in dict:\n            # increment count by 1\n            dict[test_list[i]] = 1\n        # else increment count by 1\n        else:\n            dict[test_list[i]] += 1\n    # return dictionary\n    return dict\n    \ntest_list = [(1, 3), (2, 3), (3, 1), (2, 1), (1, 2), (1, 1), (2, 2), (1, 3), (3, 3)]\nprint(check_occurences(test_list))\n",
        "num_ids": 305
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    cnt = Counter(test_list)\n    return(cnt)\n",
        "num_ids": 20
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    check_dict = {}\n    for key, value in test_list:\n        if key in check_dict:\n            check_dict[key] += 1\n        else:\n            check_dict[key] = 1\n    return check_dict\n",
        "num_ids": 59
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        if i in occurence_dict:\n            occurence_dict[i] = occurence_dict[i] + 1\n        else:\n            occurence_dict[i] = 1\n",
        "num_ids": 68
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = dict()\n    for x in test_list:\n        if x in result:\n            result[x] += 1\n        else:\n            result[x] = 1\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    #initialize empty dictionary\n    d = {}\n",
        "num_ids": 16
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for tup in test_list:\n        if tup in test_dict:\n            test_dict[tup] += 1\n        else:\n            test_dict[tup] = 1\n    return test_dict\n",
        "num_ids": 61
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the tuples and their frequency\n    occurences = {}\n    # Create a new empty dictionary to store the original list with frequency counts as keys\n    original_occurences = {}\n    # Store the tuples in a list\n    tuples = test_list\n    # Iterate through the list\n    for x in tuples:\n        # Check if the tuple is already in the dictionary\n        if x in occurences.keys():\n            # If the tuple is already in the dictionary increase the frequency by 1\n            occurences[x] += 1\n        # If the tuple is not already in the dictionary\n        else:\n            # Add the tuple and it's frequency to the dictionary\n            occurences[x] = 1\n            # Add the tuple to the original dictionary\n            original_occurences[x] = 1\n    # return the dictionary\n    return occurences, original_occurences\n",
        "num_ids": 212
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # import collections\n    # return collections.Counter(test_list)\n    # key = lambda t : t[1] # key=lambda t: t[1]\n    # return dict(sorted(test_list.items(), key=key))\n    # key = lambda t: t[1]\n    # return dict(sorted(test_list.items(), key=key))\n    # key = lambda t: t[1]\n    return {i:test_list.count(i) for i in set(test_list)}\n    # key = lambda t: t[1]\n    # return dict(sorted(test_list.items(), key=key))\n",
        "num_ids": 157
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n",
        "num_ids": 50
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str) - len(str.lstrip())\n",
        "num_ids": 17
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)):\n            count +=1\n            if str[i:j+1]!= \"\":\n                count -= 1\n    return count\n    \n    '''\n    Write a python function to count the number of substrings of a given string where the substring contains only lowercase characters.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)):\n            if str[i:j+1].isalpha():\n                count +=1\n            else:\n                continue\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring = \"\"\n    count = 0\n    for i in range(len(str)):\n        substring = substring + str[i]\n        if(substring == str):\n            count = count + 1\n            substring = \"\"\n    return count\n        \n",
        "num_ids": 65
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #print(len(str))\n    #return str.count(\"\")\n    return str.count(\"\")\nprint(number_of_substrings(\"abcd\"))\nprint(number_of_substrings(\"aaaa\"))\nprint(number_of_substrings(\"\"))\nprint(number_of_substrings(\"z\"))\nprint(number_of_substrings(\"za\"))\nprint(number_of_substrings(\"zaz\"))\nprint(number_of_substrings(\"zazb\"))\nprint(number_of_substrings(\"zazbz\"))\nprint(number_of_substrings(\"zzzzzzzzz\"))\nprint(number_of_substrings(\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "num_ids": 2009
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    start = 0\n    end = 0\n    counter = 0\n    count = 0\n    while start < len(str):\n        while end < len(str):\n            if str[start:end] == str[start:end+1]:\n                count += 1\n            end += 1\n        start += 1\n        end = 0\n    return count\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check whether two given strings are anagram or not.\n    '''\n    \n    str1_dict = {}\n    str2_dict = {}\n    \n    for i in range(len(str1)):\n        if str1[i] in str1_dict:\n            str1_dict[str1[i]] += 1\n        else:\n            str1_dict[str1[i]] = 1\n            \n    for i in range(len(str2)):\n        if str2[i] in str2_dict:\n            str2_dict[str2[i]] += 1\n        else:\n            str2_dict[str2[i]] = 1\n            \n    if str1_dict == str2_dict:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(str1):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    \n    str1 = str1.lower()\n    \n    start = 0\n    end = len(str1) - 1\n    \n    while start < end:\n        if str1[start] == str1[end]:\n            start += 1\n            end -= 1\n        else:\n            return False\n    \n    return True\n    \ndef find_index_of_smallest(nums):\n    '''\n    Write a python function to find the index of smallest value in a given list.\n    '''\n    \n    smallest_num = nums[0]\n    smallest_num_index = 0\n    \n    for i in range(len(nums)):\n        if nums[i] < smallest_num:\n            smallest_num = nums[i]\n            smallest_num_index = i\n            \n    return smallest_num_index\n    \ndef find_index_of_second_smallest(nums):\n    '''\n    Write a python function to find the index of second smallest value in a given list.\n    '''\n    \n    second_smallest_num = nums[0]\n    second_smallest_num_index = 0\n    \n    for i in range(len(nums)):\n        if nums[i] < second_smallest_num and nums[i]!= nums[0]:\n            second_smallest_num = nums[i]\n            second_smallest_num_index = i\n            \n    return second_smallest_num_index\n    \ndef is_palindrome_using_stack(str1):\n    '''\n    Write a python function to check whether the given string is palindrome or not using stack.\n    '''\n    \n    stack = []\n    \n    for i in range(len(str1)):\n        stack.append(str1[i])\n        \n        if len(stack) >= 2:\n            if stack[len(stack)-2] == stack[len(stack)-1]:\n                stack.pop()\n                stack.pop()\n                if len(stack) == 0:\n                    return True\n            else:\n                return False\n    \n    return True\n    \ndef is_palindrome_using_queue(str1):\n    '''\n    Write a python function to check whether the given string is palindrome or not using queue.\n    '''\n    \n    queue = []\n    \n    for i in range(len(str1)):\n        queue.append(str1[i])\n        \n        if len(queue) >= 2:\n            if queue[0] == queue[1]:\n                queue.popleft()\n                queue.popleft()\n                if len(queue) == 0:\n                    return True\n            else:\n                return False\n    \n    return True\n    \ndef convert_decimal_binary(decimal):\n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    \n    binary_str = ''\n    \n    while decimal > 0:\n        binary_str += str(decimal%2)\n        decimal //= 2\n    \n    return binary_str\n    \ndef get_longest_common_substring(str1, str2):\n    '''\n    Write a python function to find the longest common substring in a given two strings.\n    '''\n    \n    if len(str1) < len(str2):\n        str1, str2 = str2, str1\n    \n    # Creating a dp matrix of size (len(str1) + 1) * (len(str2) + 1)\n    dp = [[0 for i in range(len(str2) + 1)] for j in range(len(str1) + 1)]\n    \n    # Populating the dp matrix.\n    for i in range(1, len(dp)):\n        for j in range(1, len(dp[0])):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # Printing the longest common substring.\n    i = len(dp) - 1\n    j = len(dp[0]) - 1\n    \n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            print(str1[i-1], end = '')\n            i -= 1\n            j -= 1\n        else:\n            if dp[i-1][j] > dp[i][j-1]:\n                i -= 1\n            else:\n                j -= 1\n    print('')\n    \ndef is_palindrome_using_stack_with_cache(str1):\n    '''\n    Write a python function to check whether the given string is palindrome or not using stack with cache.\n    '''\n    \n    stack = []\n    \n    cache = {}\n    \n    for i in range(len(str1)):\n        stack.append(str1[i])\n        \n        if len(stack) >= 2:\n            if stack[len(stack)-2] == stack[len(stack)-1]:\n                cache[str1[i]] = 1\n                stack.pop()\n                stack.pop()\n                if len(stack) == 0:\n                    return True\n            else:\n                cache[str1[i]] = 0\n                return False\n    \n    return True\n    \ndef is_palindrome_using_queue_with_cache(str1):\n    '''\n    Write a python function to check whether the given string is palindrome or not using queue with cache.\n    '''\n    \n    queue = []\n    \n    cache = {}\n    \n    for i in range(len(str1)):\n        queue.append(str1[i])\n        \n        if len(queue) >= 2:\n            if queue[0] == queue[1]:\n                cache[str1[i]] = 1\n                queue.popleft()\n                queue.popleft()\n                if len(queue) == 0:\n                    return True\n            else:\n                cache[str1[i]] = 0\n                return False\n    \n    return True\n    \ndef is_palindrome_using_stack_with_memoization(str1, cache):\n    '''\n    Write a python function to check whether the given string is palindrome or not using stack with cache.\n    '''\n    \n    stack = []\n    \n    for i in range(len(str1)):\n        stack.append(str1[i])\n        \n        if len(stack) >= 2:\n            if stack[len(stack)-2] == stack[len(stack)-1]:\n                cache[str1[i]] = 1\n                stack.pop()\n                stack.pop()\n                if len(stack) == 0:\n                    return True\n            else:\n                cache[str1[i]] = 0\n                return False\n    \n    return True\n    ",
        "num_ids": 130
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)+1):\n            substr = str[i:j]\n            if substr!= \"\" and substr!= \" \":\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(len(str)-i):\n            count=count+1\n    print(count)\ndef number_of_substrings2(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)-1):\n            count=count+1\n    print(count)\ndef number_of_substrings3(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            count=count+1\n    print(count)\ndef number_of_substrings4(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings5(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings6(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings7(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings8(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings9(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings10(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings11(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings12(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings13(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings14(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings15(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings16(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings17(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings18(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings19(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings20(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings21(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                count=count+1\n    print(count)\ndef number_of_substrings22(str):\n    '''\n    Write a python function to count the number of substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str",
        "num_ids": 16
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = [] \n    for i in range(len(str)):\n        substring = str[i:]\n        j = 0\n        while j < len(substring):\n            if substring[j]!= \" \":\n                break\n            j+=1\n        result.append(substring[j:])\n    return len(result)\n",
        "num_ids": 84
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (0)\n",
        "num_ids": 8
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    def get_first_element(m,n):\n        '''\n        This function takes in a positive integer m and a positive integer n, and returns the first element greater than or equal to twice the previous element, and less than or equal to m.\n        '''\n        \n        def get_sequence_of_elements(m,n):\n            '''\n            This function takes in a positive integer m and a positive integer n, and returns the sequence of positive integers between m and n, such that each element is greater than or equal to twice the previous element, and less than or equal to m.\n            '''\n            \n            sequence = []\n            \n            for i in range(1,n+1):\n                \n                if i < m:\n                    sequence.append(i)\n                    sequence.append(m)\n                \n                elif i > m:\n                    sequence.append(i)\n                    \n            return sequence\n        \n        return get_sequence_of_elements(m,n)\n",
        "num_ids": 91
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    n = n-1\n    seqs = 0\n    if n == 0:\n        return seqs\n    for i in range(0,m):\n        if i <= n:\n            seqs += fact(n)/(fact(n-i)*fact(i))\n    return seqs\n",
        "num_ids": 72
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n == 0:\n        return 1\n",
        "num_ids": 15
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    possibles = []\n    for i in range(m):\n        possibles.append(i)\n    \n    for i in range(m, n):\n        new_possibles = []\n        for j in range(len(possibles)):\n            new_possibles.append(possibles[j] + 1)\n            if new_possibles[j] >= i*2 and new_possibles[j] <= m:\n                new_possibles.append(new_possibles[j] - 1)\n        possibles = new_possibles\n",
        "num_ids": 142
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #a series that has not been covered\n    a_series = range(m,n+1)\n    if n == 0:\n        return 1\n    else:\n        return sum(get_total_number_of_sequences(m,n-1) for x in a_series if x >= 2*a_series[-1] and x <= m)\n",
        "num_ids": 86
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    def bin_search(k,low,high,bins):\n        \n        while(low<=high):\n            mid = (low+high)//2\n            if mid>k and (mid-1)%2==1:\n                bins+=1\n            if mid>k and (mid-1)%2==0:\n                bins+=2\n            if mid<k and (mid+1)%2==0:\n                bins+=1\n            if mid<k and (mid+1)%2==1:\n                bins+=2\n            if mid==k:\n                bins+=1\n            if mid<k and (mid+1)%2==1:\n                bins+=2\n            if mid==k and (mid-1)%2==0:\n                bins+=1\n            if mid==k and (mid-1)%2==1:\n                bins+=2\n            if mid<k and (mid+1)%2==0:\n                bins+=1\n            if mid<k and (mid+1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mid-1)%2==0:\n                bins+=1\n            if mid>k and (mid-1)%2==1:\n                bins+=2\n            if mid>k and (mi",
        "num_ids": 1972
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    i = 0\n    while i < m:\n        if m/2 <= i <= m:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n < 0 or m < 0:\n        return 0\n    if n == 0:\n        return 1\n    return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m, n - 1)\n",
        "num_ids": 66
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for x in range(1,m+1):\n        for y in range(x+1,m+1):\n            if x*2 <= y and x*2 <= m and x+y <= m:\n                count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n",
        "num_ids": 13
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[0])\n    del list1[-1]\n    return list1\n    \n",
        "num_ids": 30
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n",
        "num_ids": 13
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1[:-1]+list2)\n",
        "num_ids": 15
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # make a copy of list1 and list2\n    list3 = list1.copy()\n    list4 = list2.copy()\n",
        "num_ids": 34
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n",
        "num_ids": 51
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
        "num_ids": 25
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n",
        "num_ids": 12
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # print('count_charac',str1)\n    return len(str1)\n",
        "num_ids": 23
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char = str1.count('a')\n    char1 = str1.count('b')\n    char2 = str1.count('c')\n    char3 = str1.count('d')\n    char4 = str1.count('e')\n    char5 = str1.count('f')\n    char6 = str1.count('g')\n    char7 = str1.count('h')\n    char8 = str1.count('i')\n    char9 = str1.count('j')\n    char10 = str1.count('k')\n    char11 = str1.count('l')\n    char12 = str1.count('m')\n    char13 = str1.count('n')\n    char14 = str1.count('o')\n    char15 = str1.count('p')\n    char16 = str1.count('q')\n    char17 = str1.count('r')\n    char18 = str1.count('s')\n    char19 = str1.count('t')\n    char20 = str1.count('u')\n    char21 = str1.count('v')\n    char22 = str1.count('w')\n    char23 = str1.count('x')\n    char24 = str1.count('y')\n    char25 = str1.count('z')\n    total = (char + char1 + char2 + char3 + char4 + char5 + char6 + char7 + char8 + char9 + char10 +\n           char11 + char12 + char13 + char14 + char15 + char16 + char17 + char18 + char19 + char20 +\n           char21 + char22 + char23 + char24 + char25)\n    return total\n    \ndef main():\n    str1 = input(\"Enter a string: \")\n    count = count_charac(str1)\n    print(f\"Total number of characters: {count}\")\n",
        "num_ids": 449
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N >= 1:\n        # Do some math to see if we are in the range of the next perfect square.\n        x = N*N\n        if x - math.floor(x) == 0:\n            return math.floor(x)\n        # if the number is not the next perfect square, try again.\n        else:\n            return next_Perfect_Square(x)\n    else:\n        return N\n    \nprint(next_Perfect_Square(10))  # Should print 11\nprint(next_Perfect_Square(121)) # Should print 144\nprint(next_Perfect_Square(0))  # Should print 0\nprint(next_Perfect_Square(-10)) # Should print -1\n",
        "num_ids": 163
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=N\n    while True:\n        if x*x>N:\n            return x*x\n        x+=1\nN = 6\nprint(\"Next perfect square greater than given number is:\", next_Perfect_Square(N))\n",
        "num_ids": 57
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    flag = True\n    while(flag):\n        temp = math.sqrt(N)\n        if(temp*temp == N):\n            return N\n        else:\n            N = N + 1\n",
        "num_ids": 51
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # x = int(math.sqrt(N))+1\n    # y = int(math.pow(x, 2))\n    # if y > N:\n    #     return -1\n    # return y\n",
        "num_ids": 54
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        x = math.floor(math.sqrt(N))\n        if x*x == N:\n            return x\n        N = N+1\n",
        "num_ids": 42
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    assert type(N) == int and N >= 0, 'N should be an integer greater than zero'\n    \n    if N == 0:\n        return N\n    if N % 2 == 0:\n        N = N + 1\n        return N\n    sq = int(math.sqrt(N)) + 1\n    return sq**2\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(24))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(25))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(26))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(27))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(28))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(29))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(30))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(31))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(32))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(33))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(34))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(35))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(36))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(37))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(38))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(39))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(40))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(41))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(42))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(43))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(44))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(45))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(46))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(47))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(48))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(49))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(50))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(51))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(52))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(53))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(54))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(55))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(56))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(57))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(58))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(59))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(60))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(61))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(62))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(63))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(64))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(65))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(66))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(67))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(68))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(69))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(70))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(71))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(72))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(73))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(74))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(75))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(76))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(77))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(78))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(79))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(80))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(81))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(82))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(83))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(84))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(85))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(86))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(87))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(88))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(89))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(90))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(91))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(92))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(93))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(94))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(95))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(96))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(97))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(98))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(99))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(100))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(101))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(102))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(103))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(104))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(105))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square(106))\nprint('The next perfect square greater than a given number is:', next_Perfect_Square",
        "num_ids": 2008
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    max_Square = int(math.sqrt(N))\n    min_Square = int(math.pow(max_Square,2))\n    while(min_Square<N):\n        min_Square+=1\n    return min_Square\n",
        "num_ids": 59
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Initialize the starting number\n    start_num = 1\n    \n    # Check for if start_num is a perfect square\n    start_num = math.ceil(start_num)\n    while start_num * start_num > N:\n        start_num = start_num - 1\n    \n    # Check for the next perfect square\n    if start_num * start_num == N:\n        return start_num\n    \n    start_num = start_num + 1\n    while start_num * start_num <= N:\n        start_num = start_num + 1\n    \n    # Return the next perfect square greater than N\n    return start_num - 1\n",
        "num_ids": 161
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N > 0):\n        sqrtN = math.ceil(math.sqrt(N))\n        while (True):\n            if (N == sqrtN*sqrtN):\n                break\n            sqrtN += 1\n        return sqrtN\n    else:\n        print(\"Invalid Input\")\n",
        "num_ids": 75
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = int(math.sqrt(N))\n    for i in range(sq, 0, -1): \n        if N % i == 0: \n            return (i)\n",
        "num_ids": 46
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0: \n        return 0\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n): \n        dp[i][i] = arr[i] \n    for i in range(n-1): \n        for j in range(i+1, n): \n            if arr[i] < arr[j]: \n                dp[i][j] = max(arr[i] + dp[i+1][j], dp[i][j-1]) \n            else: \n                dp[i][j] = max(arr[j] + dp[i][j-1], dp[i+1][j]) \n    max_so_far = 0\n    for i in range(n): \n        max_so_far = max(max_so_far, dp[0][i]) \n    return max_so_far \n",
        "num_ids": 232
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    #max_sum will be the value we are looking for.\n    max_sum = -float('inf')\n    #i is the current index of our binary array, which will have the subarray.\n    i = 1\n    #j is the current index of the binary array we are looking at.\n    j = 0\n    #L is the end index of the bitonic array we are looking at.\n    L = 0\n    while i <= n:\n        #If we are at an element that makes the current subarray sum less than zero,\n        #we know we cannot make a better sum. We want to break out of the loop and go to the next bitonic subsequence.\n        if arr[i-1] > arr[j]:\n            break\n        #Otherwise, the current element makes our current subarray sum greater than zero, so we want to check to see if we can make a better sum.\n        else:\n            while L < i and arr[L] < arr[i-1]:\n                L += 1\n            #If L is not incremented beyond the end of the array, we can make a bigger sum by including the current element.\n            if L < i:\n                current_sum = arr[i-1] + arr[L] + arr[i]\n                #If this current_sum is greater than the max_sum, we want to update max_sum.\n                if current_sum > max_sum:\n                    max_sum = current_sum\n            #If L has not been incremented beyond the end of the array, we can make a bigger sum by excluding the current element.\n            else:\n                current_sum = arr[i-1] + arr[i]\n                #If this current_sum is greater than the max_sum, we want to update max_sum.\n                if current_sum > max_sum:\n                    max_sum = current_sum\n            #Increment our iterator by one to get to the next array element.\n            i += 1\n        #Increment our iterator by one to get to the next bitonic array element.\n        j = i\n    return max_sum\n",
        "num_ids": 487
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    \n    max_sum = 0\n    l = 0\n    r = len(arr) - 1\n    while (l < r):\n        if arr[l] < arr[r]:\n            if arr[l] + arr[r] > max_sum:\n                max_sum = arr[l] + arr[r]\n            l += 1\n        else:\n            if arr[l] + arr[r] > max_sum:\n                max_sum = arr[l] + arr[r]\n            r -= 1\n    return max_sum\n",
        "num_ids": 148
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    #Find maximum element\n    curr_max=arr[0]\n    for i in range(1,len(arr)):\n        curr_max=max(arr[i],curr_max+arr[i])\n        max_sum=max(max_sum,curr_max)\n    return max_sum\n",
        "num_ids": 95
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    start = 0\n    end = 0\n",
        "num_ids": 19
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        curr_max = arr[0]\n        curr_min = arr[0]\n        max_sum = curr_max\n        for num in arr[1:]:\n            curr_max = max(num, curr_max + num)\n            curr_min = min(num, curr_min + num)\n            max_sum = max(max_sum, curr_max)\n        return max_sum\n",
        "num_ids": 124
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    bitonic_sub = []\n    max_so_far = -1 * sys.maxsize\n    \n    for i in range(len(arr)):\n        max_so_far = max(max_so_far, arr[i])\n        bitonic_sub.append(max_so_far)\n        \n    bitonic_sub.sort(reverse=True)\n    max_so_far = -1 * sys.maxsize\n    \n    for i in range(len(arr)):\n        max_so_far = max(max_so_far, arr[i] + bitonic_sub[i])\n        \n    return max_so_far",
        "num_ids": 157
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    l = 0\n    r = 1\n    ans = 0\n    while(r<len(arr)):\n        temp = max(arr[l:r])\n        if temp > 0:\n            ans = max(ans,temp)\n        l = l+1\n        r = r+1\n    return ans\n",
        "num_ids": 106
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    guess = number / 2.0\n    while abs(guess**2 - number) > 0.1:\n        guess = (guess + number / guess) / 2.0\n    return guess\n",
        "num_ids": 54
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    if number <= 0:\n        return number\n    else:\n        root = math.ceil(math.sqrt(number))\n        return root\n",
        "num_ids": 41
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # Initialize variables\n    guess = number/2\n    while (guess*guess)!= number:\n        guess = guess - (guess/2)\n        print(guess)\n    print(\"The square root of {} is {}\".format(number,guess))\n",
        "num_ids": 70
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = 1.0\n    while True:\n        z = (x + y) / 2.0\n        if abs(z - y) < 1e-10:\n            break\n        y = z\n    return y\n",
        "num_ids": 59
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return number\n    last_guess = int(number/2)\n    print(last_guess)\n    guesses = 2\n    while abs(number-last_guess**2) > 1e-6:\n        last_guess = (last_guess+number/last_guess)/2\n        guesses += 1\n    return last_guess, guesses\n",
        "num_ids": 97
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    epsilon = 1e-5\n    guess = number / 2\n    \n    while abs(guess*guess - number) >= epsilon:\n        guess = (guess + number/guess) / 2\n    \n    return guess\n",
        "num_ids": 64
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    prev_guess = guess\n    while abs(guess**2 - number) >= 0.1:\n        guess = (guess + number/guess)/2.0\n        prev_guess = guess\n    return guess\n",
        "num_ids": 66
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialization\n    lower_limit = 1\n    upper_limit = number\n    previous_guess = 0\n    epsilon = 0.000001\n    while abs(previous_guess**2 - number) >= epsilon:\n        previous_guess = (upper_limit+lower_limit)/2\n        if previous_guess**2 > number:\n            upper_limit = previous_guess\n        else:\n            lower_limit = previous_guess\n    return previous_guess\n",
        "num_ids": 120
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 1\n    prev = 0\n    while number!= 1:\n        prev = number\n        number = (number + number // 2) // 2\n    return prev\n",
        "num_ids": 48
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return number\n    else:\n        return number + 1.0 / 2.0\n",
        "num_ids": 29
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    dp = [[0]*n for _ in range(n)]\n",
        "num_ids": 26
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n): \n        dp[i][i] = 1\n    \n    max_len = 1\n    start = 0\n    \n    for i in range(n-1, -1, -1): \n        for j in range(i+1, n): \n            if str[i] == str[j]: \n                if j - i <= 2: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = dp[i+1][j-1] + 2\n            \n            if dp[i][j] > max_len: \n                max_len = dp[i][j] \n                start = i \n                \n    print(str[start : start + max_len])\n    \n    \n",
        "num_ids": 220
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n= len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    maxLen = 1\n    i = 0\n    while (i < n):\n        dp[i][i] = 1\n        maxLen = 1\n        i += 1\n    while (i < n):\n        j = i - 1\n        while (j >= 0):\n            if str[j] == str[i]:\n                dp[j][i] = 1 + dp[j+1][i-1]\n                if (dp[j][i] > maxLen):\n                    maxLen = dp[j][i]\n            else:\n                dp[j][i] = 0\n            j -= 1\n        i += 1\n    return maxLen\n",
        "num_ids": 182
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #use 2d array dp[][]\n    #initialize dp array\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    #initiate dp array to 1\n    for i in range(len(str)):\n        dp[i][i] = 1\n    #starting from second character, check both the left and right\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    #go from second to last\n    for i in range(len(str)-2):\n        if str[i] == str[i+2]:\n            dp[i][i+2] = 3\n        else:\n            dp[i][i+2] = 2\n        #compute the max\n        for j in range(i+3,len(str)):\n            if str[i] == str[j] and dp[i+1][j-1] == 3:\n                dp[i][j] = 3\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j],dp[i][j-1])\n    #print max of last element\n    return dp[0][len(str)-1]\n",
        "num_ids": 361
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def is_palindrome(string):\n        return string == string[::-1]\n    if not str:\n        return 0\n    longest_palindrome_length = 1\n    max_palindrome_length = 1\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)):\n            s = str[i:j+1]\n            if is_palindrome(s):\n                if j-i+1 > max_palindrome_length:\n                    max_palindrome_length = j-i+1\n                    longest_palindrome_length = 1\n                else:\n                    longest_palindrome_length = 2\n            else:\n                longest_palindrome_length = 1\n    return longest_palindrome_length\n",
        "num_ids": 195
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    l = len(str)\n    dp = [[0 for i in range(l)] for j in range(l)]\n    \n    for i in range(1, l):\n        for j in range(1, l):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    print(dp)\n    return dp[-1][-1]\n",
        "num_ids": 138
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    l = len(str)\n    mat = [[0 for i in range(l)] for j in range(l)]\n    max_sub = 1\n    for i in range(1, l):\n        for j in range(0, l):\n            if i == 0 or j == i:\n                mat[i][j] = 1\n            elif str[i] == str[j]:\n                mat[i][j] = 2 + mat[i-1][j-1]\n            else:\n                mat[i][j] = max(mat[i-1][j], mat[i][j-1])\n            if max_sub < mat[i][j]:\n                max_sub = mat[i][j]\n    print(max_sub)\n",
        "num_ids": 178
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)==1:\n        return 1\n    if str==' ':\n        return 0\n    n=len(str)\n    dp=[[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i]=1\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j]=dp[i+1][j-1]+2\n            else:\n                dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n    return dp[0][n-1]\n",
        "num_ids": 175
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_recursive(str):\n        n = len(str)\n        dp_table = [[0]*n for _ in range(n)]\n        \n        max_length = 1\n        start = 0\n        \n        for i in range(n):\n            dp_table[i][i] = 1\n            max_length = 1\n            start = i\n            \n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if str[i] == str[j]:\n                    dp_table[i][j] = dp_table[i+1][j-1] + 2\n                    max_length = max(max_length, dp_table[i][j])\n                    \n        return max_length\n    \n    max_length = lps_recursive(str)\n    return max_length\n",
        "num_ids": 209
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0: \n        return 0\n    dp = [[False for _ in range(len(str))] for _ in range(len(str))] \n    maxLen = 1\n    for i in range(len(str)): \n        dp[i][i] = True\n        maxLen = 1\n    for length in range(2, len(str) + 1):\n        for i in range(0, len(str) - length + 1): \n            j = i + length - 1\n            if str[i] == str[j] and dp[i+1][j-1]: \n                dp[i][j] = True\n                if length > maxLen: \n                    maxLen = length \n    return maxLen \n",
        "num_ids": 180
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    '''\n    >>> harmonic_sum(3)\n    12\n    '''\n    '''\n    >>> harmonic_sum(4)\n    24\n    '''\n    '''\n    >>> harmonic_sum(5)\n    48\n    '''\n    return int(n * (n + 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += 1/i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    count = 1\n    while count <= n:\n        count = count + 1\n        print(count)\n    print(\"Harmonic sum of \",n,\" = \",count-1)\n    return count-1\n",
        "num_ids": 51
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n/n + harmonic_sum(n-1)",
        "num_ids": 31
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (n - 1)\n",
        "num_ids": 12
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int((n*(n+1))/2)\n",
        "num_ids": 17
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/((n**2)-1)\n",
        "num_ids": 14
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n/(n-1)\n",
        "num_ids": 11
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n - 1)\n    ",
        "num_ids": 33
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n + 1) * (2 * n + 1) / 6)\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersect.append(num)\n    return intersect\n",
        "num_ids": 43
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n",
        "num_ids": 44
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num1 in array_nums1:\n        if num1 in array_nums2 and num1 not in result:\n            result.append(num1)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n",
        "num_ids": 8
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #if both arrays are of the same size, create a new list of common items\n    if len(array_nums1) == len(array_nums2):\n        return_list = []\n        for num1 in array_nums1:\n            if num1 in array_nums2 and num1 not in return_list:\n                return_list.append(num1)\n        return return_list\n    #if one array is of a larger size, truncate the smaller array\n    elif len(array_nums1) > len(array_nums2):\n        return_list = []\n        for num1 in array_nums1:\n            if num1 in array_nums2 and num1 not in return_list:\n                return_list.append(num1)\n        return return_list\n    #if one array is of a larger size, truncate the smaller array\n    elif len(array_nums2) > len(array_nums1):\n        return_list = []\n        for num2 in array_nums2:\n            if num2 in array_nums1 and num2 not in return_list:\n                return_list.append(num2)\n        return return_list\n",
        "num_ids": 285
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection_list.append(array_nums1[i])\n    return intersection_list\n",
        "num_ids": 67
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n",
        "num_ids": 39
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums = []\n    for n in array_nums1:\n        if n in array_nums2:\n            array_nums.append(n)\n    return array_nums\n",
        "num_ids": 50
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    output = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in output:\n            output.append(num)\n    return output\n",
        "num_ids": 46
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # iterate over the tuple\n    count = 0\n    for x in tup:\n        if x == x:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    i = 0\n    while i < len(tup):\n        if tup[i] == x:\n            return i\n        i += 1\n    return -1\n",
        "num_ids": 42
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count \n",
        "num_ids": 34
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c\n    \ndef sort_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and sorts the tuple in place based on the occurences of that element.\n    '''\n    sort = []\n    for i in range(len(tup)):\n        if tup[i] == x:\n            sort.append(tup[i])\n    sort.sort()\n    \ndef reverse_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and reverses the order of the tuple in place.\n    '''\n    temp = []\n    for i in range(len(tup)):\n        if tup[i] == x:\n            temp.append(tup[i])\n    for i in range(len(temp)):\n        tup.append(temp[i])\n    tup.sort()\n    \ndef even_odd(tup):\n    '''\n    Write a python function that takes in a tuple and returns the tuple of even numbers and the tuple of odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in range(len(tup)):\n        if tup[i] % 2 == 0:\n            even.append(tup[i])\n        else:\n            odd.append(tup[i])\n    return even, odd\n",
        "num_ids": 70
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list + element + list[:len(list)]\n    \n    \ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes the first occurrence of the element from the list.\n    '''\n    return list.replace(list[0],)\n    \n    \ndef search_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the first index of the element in the list.\n    '''\n    return list.index(element)\n    \n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list and returns a sorted version of the list.\n    '''\n    return sorted(list)\n    \n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and returns a reversed version of the list.\n    '''\n    return list[::-1]\n    \n    \ndef get_middle(list):\n    '''\n    Write a function that takes in a list and returns the middle item of the list\n    '''\n    \n    return len(list) // 2\n    \n    \ndef get_middle_two(list):\n    '''\n    Write a function that takes in a list and returns the middle two items of the list\n    '''\n    \n    return list[int(len(list)/2):int(len(list)/2)]\n    \n    \ndef get_middle_three(list):\n    '''\n    Write a function that takes in a list and returns the middle three items of the list\n    '''\n    \n    return list[int(len(list)/3):int(len(list)/3)]\n    \n    \ndef get_middle_four(list):\n    '''\n    Write a function that takes in a list and returns the middle four items of the list\n    '''\n    \n    return list[int(len(list)/4):int(len(list)/4)]\n    \n    \ndef get_middle_five(list):\n    '''\n    Write a function that takes in a list and returns the middle five items of the list\n    '''\n    \n    return list[int(len(list)/5):int(len(list)/5)]\n    \n    \ndef get_middle_six(list):\n    '''\n    Write a function that takes in a list and returns the middle six items of the list\n    '''\n    \n    return list[int(len(list)/6):int(len(list)/6)]\n    \n    \ndef get_middle_seven(list):\n    '''\n    Write a function that takes in a list and returns the middle seven items of the list\n    '''\n    \n    return list[int(len(list)/7):int(len(list)/7)]\n    \n    \ndef get_middle_eight(list):\n    '''\n    Write a function that takes in a list and returns the middle eight items of the list\n    '''\n    \n    return list[int(len(list)/8):int(len(list)/8)]\n    \n    \ndef get_middle_nine(list):\n    '''\n    Write a function that takes in a list and returns the middle nine items of the list\n    '''\n    \n    return list[int(len(list)/9):int(len(list)/9)]\n    \n    \ndef get_middle_ten(list):\n    '''\n    Write a function that takes in a list and returns the middle ten items of the list\n    '''\n    \n    return list[int(len(list)/10):int(len(list)/10)]\n    \n    \ndef get_middle_eleven(list):\n    '''\n    Write a function that takes in a list and returns the middle eleven items of the list\n    '''\n    \n    return list[int(len(list)/11):int(len(list)/11)]\n    \n    \ndef get_middle_twelve(list):\n    '''\n    Write a function that takes in a list and returns the middle twelve items of the list\n    '''\n    \n    return list[int(len(list)/12):int(len(list)/12)]\n    \n    \ndef get_middle_thirteen(list):\n    '''\n    Write a function that takes in a list and returns the middle thirteen items of the list\n    '''\n    \n    return list[int(len(list)/13):int(len(list)/13)]\n    \n    \ndef get_middle_fourteen(list):\n    '''\n    Write a function that takes in a list and returns the middle fourteen items of the list\n    '''\n    \n    return list[int(len(list)/14):int(len(list)/14)]\n    \n    \ndef get_middle_fifteen(list):\n    '''\n    Write a function that takes in a list and returns the middle fifteen items of the list\n    '''\n    \n    return list[int(len(list)/15):int(len(list)/15)]\n    \n    \ndef get_middle_sixteen(list):\n    '''\n    Write a function that takes in a list and returns the middle sixteen items of the list\n    '''\n    \n    return list[int(len(list)/16):int(len(list)/16)]\n    \n    \ndef get_middle_seventeen(list):\n    '''\n    Write a function that takes in a list and returns the middle seventeen items of the list\n    '''\n    \n    return list[int(len(list)/17):int(len(list)/17)]\n    \n    \ndef get_middle_eighteen(list):\n    '''\n    Write a function that takes in a list and returns the middle eighteen items of the list\n    '''\n    \n    return list[int(len(list)/18):int(len(list)/18)]\n    \n    \ndef get_middle_nineteen(list):\n    '''\n    Write a function that takes in a list and returns the middle nineteen items of the list\n    '''\n    \n    return list[int(len(list)/19):int(len(list)/19)]\n    \n    \ndef get_middle_twenty(list):\n    '''\n    Write a function that takes in a list and returns the middle twenty items of the list\n    '''\n    \n    return list[int(len(list)/20):int(len(list)/20)]\n    \n    \ndef get_middle_twentyone(list):\n    '''\n    Write a function that takes in a list and returns the middle twenty one items of the list\n    '''\n    \n    return list[int(len(list)/21):int(len(list)/21)]\n    \n    \ndef get_middle_twentytwo(list):\n    '''\n    Write a function that takes in a list and returns the middle twenty two items of the list\n    '''\n    \n    return list[int(len(list)/22):int(len(list)/22)]\n    \n    \ndef get_middle_twentythree(list):\n    '''\n    Write a function that takes in a list and returns the middle twenty three items of the list\n    '''\n    \n    return list[int(len(list)/23):int(len(list)/23)]\n    \n    \ndef get_middle_twentyfour(list):\n    '''\n    Write a function that takes in a list and returns the middle twenty four items of the list\n    '''\n    \n    return list[int(len(list)/24):int(len(list)/24)]\n    \n    \ndef get_middle_twentyfive(list):\n    '''\n    Write a function that takes in a list and returns the middle twenty five items of the list\n    '''\n    \n    return list[int(len(list)/25):int(len(list)/25)]\n    \n    \ndef get_middle_twentysix(list):\n    '''\n    Write a function that takes in a list and returns the middle twenty six items of the list\n    '''\n    \n    return list[int(len(list)/26):int(len(list)/26)]\n    \n    \ndef get_middle_twentyseven(list):\n    '''\n    Write a function that takes in a list and returns the middle twenty seven items of the list\n    '''\n    \n    return list[int(len(list)/27):int(len(list)/27)]\n    \n    \ndef get_middle_twentyeight(list):\n    '''\n    Write a function that takes in a list an",
        "num_ids": 12
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return list\n    else:\n        return insert_element(list[:-1],element) + [list[-1]]\n",
        "num_ids": 41
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Initialize a list variable\n    l = []\n    # Iterate through the list\n    for i in range(len(list)):\n        # Append the element\n        l.append(list[i])\n        # Append the element\n        l.append(element)\n    # Return the list\n    return l\n",
        "num_ids": 77
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n            return list\n    return list\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list + [element]\n",
        "num_ids": 10
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            list.insert(i,element)\n            return list\n        i += 1\n    \n    return list\n",
        "num_ids": 51
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return list\n    else:\n        list.insert(0,element)\n        return list\n",
        "num_ids": 34
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list\n    for i in range(0,len(list)):\n        new_list.insert(i,element)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list + [element]\n",
        "num_ids": 10
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n            break\n    return list\n",
        "num_ids": 41
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # Your Code Here\n    ans = []\n    for num in numbers:\n        # print(\"sender\", num)\n        n, m = num.real, num.imag\n        ans.append(complex(n, m))\n    \n    \n    return ans\n",
        "num_ids": 65
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = []\n    for x in numbers:\n        real_part = x.real\n        imaginary_part = x.imag\n        \n        theta = cmath.phase(x)\n        \n        if(real_part >= 0):\n            theta = cmath.phase(x)\n        else:\n            theta = cmath.phase(x)+2*cmath.pi\n            \n        r.append((theta,r))\n    return r\n",
        "num_ids": 110
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(type(numbers) is not complex):\n        return 'Please enter a valid complex number'\n    else:\n        return 'Radius:'+ str(abs(numbers)), 'Phase:'+ str(cmath.phase(numbers))\n",
        "num_ids": 59
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # define the complex number\n    z = complex(numbers[0],numbers[1])\n    # define the magnitude of complex number\n    mag = abs(z)\n    # define the phase of complex number\n    phase = cmath.phase(z)\n    # print the polar coordinates\n    print(mag, '+ ', phase, 'j')\n    return mag, phase, abs(z)\n    \n    \n    \n    # return z, mag, phase, abs(z)\n        \n        ",
        "num_ids": 117
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(cmath.polar(num))\n",
        "num_ids": 21
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in numbers:\n        print(f\"complex({i.real}, {i.imag})\")\n",
        "num_ids": 27
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #your code here\n    for i in range(len(numbers)):\n        a = abs(numbers[i])\n        b = (numbers[i].real,numbers[i].imag)\n        a = abs(a)\n        print('Converted number is :',a,'+',b)\n        print('\\n')\n    return (a,b)\n    \n    \ndef convert_2(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    #your code here\n    for i in range(len(numbers)):\n        a = numbers[i][0]\n        b = numbers[i][1]\n        c = complex(a,b)\n        print('Converted number is :',c)\n        print('\\n')\n    return c\n",
        "num_ids": 74
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return complex(*numbers), cmath.polar(complex(*numbers))[1]\n",
        "num_ids": 24
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def p(n): \n        return complex(math.cos(n), math.sin(n)) \n    def c(n): \n        return (n.real ** 2 + n.imag ** 2) ** 0.5\n    list_n = list(numbers)\n    polar = []\n    for i in list_n:\n        polar.append((c(p(i)), i))\n    return polar\n        \nnumbers = input(\"Enter complex numbers: \")\npolar = convert(numbers)\nprint(\"Polar coordinates are: \")\nfor i in polar:\n    print(i, end=\" \")\n",
        "num_ids": 150
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list1 =[]\n    for x in numbers:\n        (r,theta) = cmath.polar(x)\n        if(r >= 0):\n            list1.append((theta,r))\n    print(list1)\n",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n        \ndef count_float(list1):\n    '''\n    Write a python function that returns the number of float elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == float:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], int):\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list_len = len(list1)\n    int_count = 0\n    for i in list1:\n        if type(i) == int:\n            int_count = int_count + 1\n    return int_count\n",
        "num_ids": 55
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_integer = 0\n    for i in list1:\n        if isinstance(i, int):\n            num_integer += 1\n    return num_integer\n",
        "num_ids": 40
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for elem in list1:\n        if type(elem) == int:\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if type(i) == int:\n            counter += 1\n    return counter\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    return_list = []\n    for i in range(len(l)):\n        return_list.append(tuple(l[i]))\n        return_list = combinations_colors(l[i+1:], n-1)\n        \n    return return_list\n",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n    \ndef get_color(data, color):\n    '''\n    Write a function that takes a data list and a color string and returns the first index in the data list that matches the given color\n    '''\n    for i in range(0,len(data)):\n        if data[i] == color:\n            return i\n    return -1\n",
        "num_ids": 35
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return list(map(lambda x: tuple(x), combinations_with_replacement(l, n)))\n",
        "num_ids": 29
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Define a counter variable to count the number of combinations\n    c = 0\n",
        "num_ids": 21
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    def helper(l, n, i, ans, color):\n        if i == n:\n            ans.append(tuple(color))\n            return\n        for j in range(0, len(l)):\n            color.append(l[j])\n            helper(l, n, i + 1, ans, color)\n            color.pop()\n        return\n",
        "num_ids": 88
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [tuple(l)]\n    \n    if len(l) < n:\n        return []\n",
        "num_ids": 45
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(0, len(l)-n+1)]\n    \ndef substrings(s):\n    '''\n    Write a function that takes in a string and returns a list of all the substrings of the string. The substrings should be returned in the order of their appearance in the string. Substring here means characters between any two letters. The first and last letters of the substrings should not be part of another substring.\n    '''\n    result = []\n    for i in range(0, len(s)):\n        result.append(s[i:i+1])\n        result.append(s[i:i+2])\n        result.append(s[i:i+3])\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            result.append( (l[i], l[j]) )\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list = []\n    for i in range(len(l)):\n        list.append((l[i],)*n)\n    return list\n",
        "num_ids": 36
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    final = []\n    for i in range(len(l)):\n        combination = combinations_with_replacement(l, n)\n        combination_list = list(combination)\n        for i in combination_list:\n            final.append(tuple(i))\n    return final\n        ",
        "num_ids": 74
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    isPrime = True\n    for i in range(2,n):\n        if n % i == 0:\n            isPrime = False\n    if n == 1:\n        return 0\n    if isPrime == True:\n        count = count + 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [False, False] + [True] * (n - 2)\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n    \n    \ndef count_Primes_nums_2(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n    \n    \ndef count_Primes_nums_3(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_4(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_5(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_6(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_7(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_8(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_9(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_10(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_11(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prim",
        "num_ids": 34
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n=int(input())\n    x=0\n    for i in range(2,n):\n        if(n%i==0):\n            x+=1\n    if(x==0):\n        print(x)\n    else:\n        print(x+1)\n    \n",
        "num_ids": 69
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n    def prime_num(num):\n        if num <=1:\n            return False\n        else:\n            for i in range(2,num):\n                if num%i == 0:\n                    return False\n            return True\n    count = 0\n    while(n > 0):\n        if prime_num(n):\n            count+=1\n        n = n-1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # list_of_primes = []\n    prime_count = 0\n    for num in range(2,n):\n        # print(num)\n        # for i in range(2,num):\n        #     if (num % i) == 0:\n        #         break\n        # else:\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_count += 1\n    return prime_count\n",
        "num_ids": 122
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    def isPrime(n):\n        for i in range(2, n // 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    return len([i for i in range(n) if isPrime(i)])\n",
        "num_ids": 64
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n <= 1:\n        return 0\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return 0\n            else:\n                count = count + 1\n        return count\n",
        "num_ids": 61
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    result = 0\n    for num in range(n):\n        if isPrime(num):\n            result += 1\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    if n <= 0:\n        print(\"Enter a valid number\")\n        return\n",
        "num_ids": 28
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\nprint(swap_numbers(1,2))\n",
        "num_ids": 23
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    print(b, a)\n    return (a, b)\n",
        "num_ids": 18
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = a\n    a = b\n    b = x\n    return (a, b)\n",
        "num_ids": 25
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup=()\n    tup=b,a\n    return tup\n",
        "num_ids": 21
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup= (b,a)\n    return tup\n",
        "num_ids": 17
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup_1, tup_2 = test_tup1, test_tup2\n    max_val = max(tup_1)\n    tup_1 = tup_1 + (max_val, )\n    max_val = max(tup_2)\n    tup_2 = tup_2 + (max_val, )\n    return tup_1, tup_2\n",
        "num_ids": 99
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1), max(test_tup2)\n",
        "num_ids": 21
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1, tup2 = sorted(test_tup1), sorted(test_tup2)\n    max1 = tup1[-1]\n    max2 = tup2[-1]\n    if tup1[0] > tup2[0]:\n        max_el = max1\n    else:\n        max_el = max2\n",
        "num_ids": 88
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1[0], test_tup2[0])\n    max_ind = test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0]\n    min_val = min(test_tup1[1], test_tup2[1])\n    min_ind = test_tup1[1] if test_tup1[1] < test_tup2[1] else test_tup2[1]\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_val, max_ind, min_val, min_ind = test_tup1[i], test_tup1[i], test_tup2[i], test_tup2[i]\n    return (max_val, max_ind, min_val, min_ind)\n",
        "num_ids": 238
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1[0],test_tup1[1], test_tup2[0], test_tup2[1])\n    return max_val\n",
        "num_ids": 48
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1[0] if test_tup1[1] > test_tup2[1] else test_tup2[0]\n",
        "num_ids": 40
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(test_tup1, test_tup2)\n    print(\"#\"*30)\n    max_val = max(test_tup1[0], test_tup1[1])\n    if max_val < max(test_tup2[0], test_tup2[1]):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 97
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]:\n        return test_tup1\n    elif test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        return test_tup2\n    elif test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 154
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if(test_tup1[0] > test_tup2[0]):\n        max_ele_tup = test_tup1\n        min_ele_tup = test_tup2\n    else:\n        max_ele_tup = test_tup2\n        min_ele_tup = test_tup1\n    for i in range(0, len(min_ele_tup)):\n        if max_ele_tup[i] < min_ele_tup[i]:\n            max_ele_tup[i] = min_ele_tup[i]\n    return max_ele_tup\n",
        "num_ids": 155
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = test_tup1[0] if test_tup1[0] > test_tup2[0] else test_tup2[0]\n    b = test_tup1[1] if test_tup1[1] > test_tup2[1] else test_tup2[1]\n    return a,b\n",
        "num_ids": 86
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if not is_prime(i):\n            return False\n    p = 2\n    while True:\n        if is_prime(p):\n            while True:\n                p += 1\n                if is_prime(p):\n                    break\n            if p == n:\n                return p",
        "num_ids": 89
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Sieve of Eratosthenes\n    a = [True] * n\n    a[0] = False\n    a[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if a[i] == True:\n            for j in range(i*i,n,i):\n                a[j] = False\n    # Generate the list of primes\n    primes = []\n    for i in range(n):\n        if a[i] == True:\n            primes.append(i)\n    if n == 1:\n        return 1\n    # A prime number is nth newman\u2013shanks\u2013williams prime if and only if nth newman\u2013shanks\u2013williams prime divides n.\n    # A number is a factor of n if n % a(b) == 0\n    # The first few primes are 2, 3, 5, 7, 11, and 13.\n    # Nth newman\u2013shanks\u2013williams prime can be written as a * 2 + 1 or a * 3 + 1 or a * 5 + 1 or a * 7 + 1 or a * 11 + 1 or a * 13 + 1.\n    # The (n-1)th newman\u2013shanks\u2013williams prime is written as a * 2 + 1 or a * 3 + 1 or a * 5 + 1 or a * 7 + 1 or a * 11 + 1 or a * 13 + 1.\n    # We can write a number as a sum of two primes\n    def sum_of_two_primes(n):\n        if n % 2 == 0:\n            return 2 * primes[int(n/2)-1] + 1\n        else:\n            return 3 * primes[int(n/3)-1] + 1\n    for i in range(0,n-1):\n        primes.append(sum_of_two_primes(primes[i]))\n    return primes[n-1]\n    \nprint(newman_prime(10))\n",
        "num_ids": 473
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: return 2\n    if n == 2: return 3\n    if n % 2 == 0: return 2\n    if n == 3: return 5\n    \n    if n >= 6:\n        if n == 7: return 19\n        if n == 8: return 23\n        if n == 9: return 29\n        if n == 10: return 31\n        if n == 11: return 37\n        if n == 12: return 41\n        if n == 13: return 43\n        if n == 14: return 47\n        if n == 15: return 49\n        if n == 16: return 53\n        if n == 17: return 59\n        if n == 18: return 61\n        if n == 19: return 67\n        if n == 20: return 71\n        if n == 21: return 73\n        if n == 22: return 79\n        if n == 23: return 83\n        if n == 24: return 89\n        if n == 25: return 97\n        if n == 26: return 101\n        if n == 27: return 103\n        if n == 28: return 107\n        if n == 29: return 109\n        if n == 30: return 113\n        if n == 31: return 127\n        if n == 32: return 131\n        if n == 33: return 137\n        if n == 34: return 139\n        if n == 35: return 149\n        if n == 36: return 151\n        if n == 37: return 157\n        if n == 38: return 163\n        if n == 39: return 167\n        if n == 40: return 173\n        if n == 41: return 179\n        if n == 42: return 181\n        if n == 43: return 191\n        if n == 44: return 193\n        if n == 45: return 197\n        if n == 46: return 199\n        if n == 47: return 211\n        if n == 48: return 223\n        if n == 49: return 227\n        if n == 50: return 229\n        if n == 51: return 233\n        if n == 52: return 239\n        if n == 53: return 241\n        if n == 54: return 251\n        if n == 55: return 257\n        if n == 56: return 263\n        if n == 57: return 269\n        if n == 58: return 271\n        if n == 59: return 277\n        if n == 60: return 281\n        if n == 61: return 283\n        if n == 62: return 293\n        if n == 63: return 307\n        if n == 64: return 311\n        if n == 65: return 313\n        if n == 66: return 317\n        if n == 67: return 331\n        if n == 68: return 337\n        if n == 69: return 347\n        if n == 70: return 349\n        if n == 71: return 353\n        if n == 72: return 359\n        if n == 73: return 361\n        if n == 74: return 367\n        if n == 75: return 373\n        if n == 76: return 379\n        if n == 77: return 383\n        if n == 78: return 389\n        if n == 79: return 397\n        if n == 80: return 401\n        if n == 81: return 409\n        if n == 82: return 419\n        if n == 83: return 421\n        if n == 84: return 431\n        if n == 85: return 433\n        if n == 86: return 439\n        if n == 87: return 441\n        if n == 88: return 443\n        if n == 89: return 449\n        if n == 90: return 457\n        if n == 91: return 461\n        if n == 92: return 463\n        if n == 93: return 467\n        if n == 94: return 469\n        if n == 95: return 471\n        if n == 96: return 473\n        if n == 97: return 479\n        if n == 98: return 481\n        if n == 99: return 483\n        if n == 100: return 489\n        if n == 101: return 503\n        if n == 102: return 511\n        if n == 103: return 513\n        if n == 104: return 531\n        if n == 105: return 533\n        if n == 106: return 539\n        if n == 107: return 541\n        if n == 108: return 543\n        if n == 109: return 547\n        if n == 110: return 551\n        if n == 111: return 553\n        if n == 112: return 559\n        if n == 113: return 563\n        if n == 114: return 569\n        if n == 115: return 571\n        if n == 116: return 573\n        if n == 117: return 579\n        if n == 118: return 581\n        if n == 119: return 583\n        if n == 120: return 591\n        if n == 121: return 593\n        if n == 122: return 597\n        if n == 123: return 607\n        if n == 124: return 611\n        if n == 125: return 613\n        if n == 126: return 631\n        if n == 127: return 637\n        if n == 128: return 641\n        if n == 129: return 643\n        if n == 130: return 647\n        if n == 131: return 653\n        if n == 132: return 659\n        if n == 133: return 661\n        if n == 134: return 663\n        if n == 135: return 667\n        if n == 136: return 673\n        if n == 137: return 677\n        if n == 138: return 679\n        if n == 139: return 683\n        if n == 140: return 691\n        if n == 141: return 697\n        if n == 142: return 709\n        if n == 143: return 711\n        if n == 144: return 713\n        if n == 145: return 719\n        if n == 146: return 723\n        if n == 147: return 729\n        if n == 148: return 743\n        if n == 149: return 751\n        if n == 150: return 757\n        if n == 151: return 761\n        if n == 152: return 773\n        if n == 153: return 787\n        if n == 154: return 791\n        if n == 155: return 793\n        if n == 156: return 797\n        if n == 157: return 809\n        if n == 158: return 811\n        if n == 159: return 813\n        if n == 160: return 821\n        if n == 161: return 827\n        if n == 162: return 829\n        if n == 163: return 839\n        if n == 164: return 841\n        if n == 165: return 853\n        if n == 166: return 857\n        if n == 167: return 861\n        if n == 168: return 863\n        if n == 169: return 867\n        if n == 170: return 869\n        if n == 171: return 871\n        if n == 172: return 873\n        if n == 173: return 877\n        if n == 174: return 881\n        if n == 175: return 883\n        if n == 176: return 887\n        if n == 177: return 889\n        if n == 178: return 907\n        if n == 179: return 911\n        if n == 180: return 913\n        if n == 181: return 937\n        if n == 182: return 941\n        if n == 183: return 943\n        if n == 184: return 953\n        if n == 185: return 967\n        if n == 186: return 971\n        if n == 187: return 973\n        if n == 188: return 977\n        if n == 189: return 983\n        if n == 190: return 991\n        if n == 191: return 997\n        if n == 192: return 1009\n        if n == 193: return 1011\n        if n == 194: return 1013\n        if n == 195: return 1019\n        if n == 196: return 1021\n        if n == 197: return 1031\n        if n == 198: return 1033\n        if n == 199: return 1039\n        if n == 200: return 1041\n        if n == 201: return 1043\n        if n == 202: return 1047\n        if n == 203: return 1053\n        if n == 204: return 1059\n        if n == 205: return 1061\n        if n == 206: return 1063\n        if n == 207: return 1069\n        if n == 208: return 1071\n        if n == 209: return 1073\n        if n == 210: return 1077\n        i",
        "num_ids": 2010
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    # we use the formula to get the first element in the sequence \n    # (which is the 2nd prime)\n    else:\n        n_2 = newman_prime(n-1)\n        prime_n_2 = is_prime(n_2)\n        if prime_n_2 == 1: \n            return n_2\n        # if the nth prime is not prime, we should calculate it\n        else:\n            # we calculate the nth prime\n            n_th = (n_2**2 - (n - 1)*n_2 + 1) // (2*n_2)\n            # we check if it is prime and if it is, we return it\n            if is_prime(n_th) == 1:\n                return n_th\n            # if it isn't prime, we need to calculate it from the 2nd prime\n            else:\n                return newman_prime(n-1)\n",
        "num_ids": 226
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    d=1\n    c=3\n    if (n%2==0):\n        return 2\n    while (n>=3):\n        if (n%3==0):\n            return 3\n        if (n%d==0):\n            return d\n        d+=2\n        if (n%c==0):\n            return c\n        c+=2\n        n-=1\n    return c\n",
        "num_ids": 119
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return __newman_prime(n)\n",
        "num_ids": 13
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    \n    # If n < 4, then n must be a prime number.\n    if n < 4:\n        return n\n",
        "num_ids": 39
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return -1\n    if n == 2:\n        return -2\n    if n == 3:\n        return -3\n    if n == 4:\n        return -4\n    if n == 5:\n        return -5\n    if n == 6:\n        return -6\n    if n == 7:\n        return -7\n    if n == 8:\n        return -8\n    if n == 9:\n        return -9\n    if n == 10:\n        return -10\n    if n == 11:\n        return -11\n    if n == 12:\n        return -12\n    if n == 13:\n        return -13\n    if n == 14:\n        return -14\n    if n == 15:\n        return -15\n    if n == 16:\n        return -16\n    if n == 17:\n        return -17\n    if n == 18:\n        return -18\n    if n == 19:\n        return -19\n    if n == 20:\n        return -20\n    if n == 21:\n        return -21\n    if n == 22:\n        return -22\n    if n == 23:\n        return -23\n    if n == 24:\n        return -24\n    if n == 25:\n        return -25\n    if n == 26:\n        return -26\n    if n == 27:\n        return -27\n    if n == 28:\n        return -28\n    if n == 29:\n        return -29\n    if n == 30:\n        return -30\n    if n == 31:\n        return -31\n    if n == 32:\n        return -32\n    if n == 33:\n        return -33\n    if n == 34:\n        return -34\n    if n == 35:\n        return -35\n    if n == 36:\n        return -36\n    if n == 37:\n        return -37\n    if n == 38:\n        return -38\n    if n == 39:\n        return -39\n    if n == 40:\n        return -40\n    if n == 41:\n        return -41\n    if n == 42:\n        return -42\n    if n == 43:\n        return -43\n    if n == 44:\n        return -44\n    if n == 45:\n        return -45\n    if n == 46:\n        return -46\n    if n == 47:\n        return -47\n    if n == 48:\n        return -48\n    if n == 49:\n        return -49\n    if n == 50:\n        return -50\n    if n == 51:\n        return -51\n    if n == 52:\n        return -52\n    if n == 53:\n        return -53\n    if n == 54:\n        return -54\n    if n == 55:\n        return -55\n    if n == 56:\n        return -56\n    if n == 57:\n        return -57\n    if n == 58:\n        return -58\n    if n == 59:\n        return -59\n    if n == 60:\n        return -60\n    if n == 61:\n        return -61\n    if n == 62:\n        return -62\n    if n == 63:\n        return -63\n    if n == 64:\n        return -64\n    if n == 65:\n        return -65\n    if n == 66:\n        return -66\n    if n == 67:\n        return -67\n    if n == 68:\n        return -68\n    if n == 69:\n        return -69\n    if n == 70:\n        return -70\n    if n == 71:\n        return -71\n    if n == 72:\n        return -72\n    if n == 73:\n        return -73\n    if n == 74:\n        return -74\n    if n == 75:\n        return -75\n    if n == 76:\n        return -76\n    if n == 77:\n        return -77\n    if n == 78:\n        return -78\n    if n == 79:\n        return -79\n    if n == 80:\n        return -80\n    if n == 81:\n        return -81\n    if n == 82:\n        return -82\n    if n == 83:\n        return -83\n    if n == 84:\n        return -84\n    if n == 85:\n        return -85\n    if n == 86:\n        return -86\n    if n == 87:\n        return -87\n    if n == 88:\n        return -88\n    if n == 89:\n        return -89\n    if n == 90:\n        return -90\n    if n == 91:\n        return -91\n    if n == 92:\n        return -92\n    if n == 93:\n        return -93\n    if n == 94:\n        return -94\n    if n == 95:\n        return -95\n    if n == 96:\n        return -96\n    if n == 97:\n        return -97\n    if n == 98:\n        return -98\n    if n == 99:\n        return -99\n    if n == 100:\n        return -100\n    if n == 101:\n        return -101\n    if n == 102:\n        return -102\n    if n == 103:\n        return -103\n    if n == 104:\n        return -104\n    if n == 105:\n        return -105\n    if n == 106:\n        return -106\n    if n == 107:\n        return -107\n    if n == 108:\n        return -108\n    if n == 109:\n        return -109\n    if n == 110:\n        return -110\n    if n == 111:\n        return -111\n    if n == 112:\n        return -112\n    if n == 113:\n        return -113\n    if n == 114:\n        return -114\n    if n == 115:\n        return -115\n    if n == 116:\n        return -116\n    if n == 117:\n        return -117\n    if n == 118:\n        return -118\n    if n == 119:\n        return -119\n    if n == 120:\n        return -120\n    if n == 121:\n        return -121\n    if n == 122:\n        return -122\n    if n == 123:\n        return -123\n    if n == 124:\n        return -124\n    if n == 125:\n        return -125\n    if n == 126:\n        return -126\n    if n == 127:\n        return -127\n    if n == 128:\n        return -128\n    if n == 129:\n        return -129\n    if n == 130:\n        return -130\n    if n == 131:\n        return -131\n    if n == 132:\n        return -132\n    if n == 133:\n        return -133\n    if n == 134:\n        return -134\n    if n == 135:\n        return -135\n    if n == 136:\n        return -136\n    if n == 137:\n        return -137\n    if n == 138:\n        return -138\n    if n == 139:\n        return -139\n    if n == 140:\n        return -140\n    if n == 141:\n        return -141\n    if n == 142:\n        return -142\n    if n == 143:\n        return -143\n    if n == 144:\n        return -144\n    if n == 145:\n        return -145\n    if n == 146:\n        return -146\n    if n == 147:\n        return -147\n    if n == 148:\n        return -148\n    if n == 149:\n        return -149\n    if n == 150:\n        return -150\n    if n == 151:\n        return -151\n    if n == 152:\n        return -152\n    if n == 153:\n        return -153\n    if n == 154:\n        return -154\n    if n == 155:\n        return -155\n    if n == 156:\n        return -156\n    if n == 157:\n        return -157\n    if n == 158:\n        return -158\n    if n == 159:\n        return -159\n    if n == 160:\n        return -160\n    if n == 161:\n        return -161\n    if n == 162:\n        return -162\n    if n == 163:\n        return -163\n    if n == 164:\n        return -164\n    if n == 165:\n        return -165\n    if n == 166:\n        return -166\n    if n == 167:\n        return -167\n    if n =",
        "num_ids": 2010
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n % 2 == 0:\n        return 1\n    else:\n        a = 5\n        while True:\n            if all(p % a!= 0 for p in primes(a)):\n                return a\n            else:\n                a += 2\n",
        "num_ids": 86
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # set the initial number to 1\n    n = 1\n    # the total number of primes\n    total_primes = 0\n    # calculate the total primes between 2 and n\n    while total_primes < n:\n        # create a list to record the primes\n        primes = []\n        # while loop to find the primes\n        while total_primes < n:\n            # if the number is prime, add it to the list\n            if n % 2 == 0:\n                primes.append(n)\n                total_primes += 1\n                n = n + 1\n                break\n            else:\n                # start from 3, because 2 is not a prime number\n                n = 3\n                while n < n ** 2:\n                    # if the number is prime, add it to the list\n                    if n % 2 == 0:\n                        primes.append(n)\n                        total_primes += 1\n                        n = n + 1\n                        break\n                    else:\n                        # otherwise, add the next number\n                        n = n + 2\n                break\n    # return the list\n    return primes[n-1]\n",
        "num_ids": 263
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n",
        "num_ids": 39
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Slicing operator for the tuples\n    first_tup = test_tup1[0:2]\n    second_tup = test_tup2[0:2]\n    # Multiplying the 2 tuples using * operator\n    res = first_tup * second_tup\n    # returning the result\n    return res\n",
        "num_ids": 83
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n",
        "num_ids": 28
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for (x,y) in zip(test_tup1, test_tup2):\n        result += ((x/y),)\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    first_tup = test_tup1\n    second_tup = test_tup2\n    for i in range(len(first_tup)):\n        first_tup[i] /= second_tup[i]\n    return first_tup\n",
        "num_ids": 66
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    for i in range(len(test_tup1)):\n        x = x + (test_tup1[i] * test_tup2[i])\n    for j in range(len(test_tup2)):\n        y = y + (test_tup1[j] * test_tup2[j])\n    for k in range(len(test_tup1)):\n        z = z + (test_tup1[k] * test_tup2[k])\n    return x / y / z\n",
        "num_ids": 145
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    result = []\n    for (num1, num2) in zip(test_tup1, test_tup2):\n        result.append(num1/num2)\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2\n",
        "num_ids": 40
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = len(list1)\n    b = int(a/2)\n    c = list1[:b]\n    d = list1[b:]\n    return(c,d)\n",
        "num_ids": 48
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #initialize the first list and the second list\n    #split the first list into a first list of length L and the second list of remaining list\n    #return the first list and the second list in a tuple\n    first_list = []\n    second_list = []\n",
        "num_ids": 63
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[0:L]\n    part2 = list1[L:]\n    return part1, part2\n",
        "num_ids": 32
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first = list1[:L]\n    second = list1[L:]\n    return (first, second)\n",
        "num_ids": 29
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l1 = list1[:L]\n    l2 = list1[L:]\n    return(l1,l2)\n",
        "num_ids": 33
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1)<=L:\n        return (list1,list1)\n    return (list1[:L],list1[L:])\n",
        "num_ids": 40
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return ([list1[:L], list1[L:]])\n",
        "num_ids": 19
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    middle = int(len(list1) / 2)\n    return (list1[:middle], list1[middle:])\n",
        "num_ids": 32
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    print('Splitting the given list into two parts where the length of the first part of the list is',L)\n    list1_1 = list1[:L]\n    list1_2 = list1[L:]\n    print('The first part of the list is:',list1_1)\n    print('The second part of the list is:',list1_2)\n    print('The list after splitting are:',list1_1,list1_2)\n    return(list1_1, list1_2)\n",
        "num_ids": 124
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Define the dog's age in dog's years\n    dog_age = 25 * 7\n    # Return the dog's age in dog's years\n    return dog_age\n",
        "num_ids": 42
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_years = h_age/7\n    return age_in_years\n",
        "num_ids": 23
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(\"Enter the dog's age in human years: \")\n    dog_age_human = int(input())\n    dog_age_dog = (dog_age_human/7.0)\n    print(f\"The dog's age in dog's years is: {dog_age_dog}\")\n    \ndog_age(1.5)\ndog_age(2.5)\ndog_age(4.5)\ndog_age(6.5)\ndog_age(10.5)\ndog_age(17.5)\ndog_age(24.5)\ndog_age(36.5)\ndog_age(48.5)\ndog_age(60.5)\ndog_age(72.5)\ndog_age(84.5)\ndog_age(96.5)\ndog_age(108.5)\ndog_age(120.5)\ndog_age(132.5)\ndog_age(144.5)\ndog_age(156.5)\ndog_age(168.5)\ndog_age(180.5)\ndog_age(210.5)\ndog_age(232.5)\ndog_age(240.5)\ndog_age(252.5)\ndog_age(260.5)\ndog_age(272.5)\ndog_age(284.5)\ndog_age(296.5)\ndog_age(308.5)\ndog_age(320.5)\ndog_age(332.5)\ndog_age(348.5)\ndog_age(360.5)\ndog_age(374.5)\ndog_age(386.5)\ndog_age(398.5)\ndog_age(420.5)\ndog_age(440.5)\ndog_age(452.5)\ndog_age(470.5)\ndog_age(485.5)\ndog_age(496.5)\ndog_age(514.5)\ndog_age(548.5)\ndog_age(572.5)\ndog_age(588.5)\ndog_age(602.5)\ndog_age(618.5)\ndog_age(652.5)\ndog_age(668.5)\ndog_age(682.5)\ndog_age(698.5)\ndog_age(712.5)\ndog_age(738.5)\ndog_age(762.5)\ndog_age(776.5)\ndog_age(798.5)\ndog_age(812.5)\ndog_age(838.5)\ndog_age(872.5)\ndog_age(886.5)\ndog_age(906.5)\ndog_age(936.5)\ndog_age(972.5)\ndog_age(996.5)\ndog_age(1026.5)\ndog_age(1061.5)\ndog_age(1080.5)\ndog_age(1104.5)\ndog_age(1122.5)\ndog_age(1154.5)\ndog_age(1182.5)\ndog_age(1214.5)\ndog_age(1246.5)\ndog_age(1286.5)\ndog_age(1316.5)\ndog_age(1348.5)\ndog_age(1390.5)\ndog_age(1426.5)\ndog_age(1467.5)\ndog_age(1498.5)\ndog_age(1528.5)\ndog_age(1569.5)\ndog_age(1597.5)\ndog_age(1628.5)\ndog_age(1669.5)\ndog_age(1697.5)\ndog_age(1727.5)\ndog_age(1768.5)\ndog_age(1798.5)\ndog_age(1828.5)\ndog_age(1869.5)\ndog_age(1897.5)\ndog_age(1928.5)\ndog_age(1969.5)\ndog_age(1994.5)\ndog_age(2032.5)\ndog_age(2072.5)\ndog_age(2101.5)\ndog_age(2129.5)\ndog_age(2163.5)\ndog_age(2201.5)\ndog_age(2231.5)\ndog_age(2272.5)\ndog_age(2301.5)\ndog_age(2339.5)\ndog_age(2381.5)\ndog_age(2414.5)\ndog_age(2454.5)\ndog_age(2498.5)\ndog_age(2537.5)\ndog_age(2578.5)\ndog_age(2616.5)\ndog_age(2658.5)\ndog_age(2695.5)\ndog_age(2735.5)\ndog_age(2783.5)\ndog_age(2824.5)\ndog_age(2873.5)\ndog_age(2921.5)\ndog_age(2972.5)\ndog_age(3012.5)\ndog_age(3051.5)\ndog_age(3092.5)\ndog_age(3136.5)\ndog_age(3178.5)\ndog_age(3226.5)\ndog_age(3267.5)\ndog_age(3306.5)\ndog_age(3345.5)\ndog_age(3385.5)\ndog_age(3415.5)\ndog_age(3465.5)\ndog_age(3495.5)\ndog_age(3534.5)\ndog_age(3584.5)\ndog_age(3624.5)\ndog_age(3675.5)\ndog_age(3712.5)\ndog_age(3761.5)\ndog_age(3802.5)\ndog_age(3851.5)\ndog_age(3890.5)\ndog_age(3939.5)\ndog_age(3989.5)\ndog_age(4028.5)\ndog_age(4078.5)\ndog_age(4128.5)\ndog_age(4168.5)\ndog_age(4207.5)\ndog_age(4247.5)\ndog_age(4276.5)\ndog_age(4305.5)\ndog_age(4346.5)\ndog_age(4379.5)\ndog_age(4416.5)\ndog_age(4465.5)\ndog_age(4497.5)\ndog_age(4537.5)\ndog_age(4585.5)\ndog_age(4625.5)\ndog_age(4667.5)\ndog_age(4705.5)\ndog_age(4747.5)\ndog_age(4786.5)\ndog_age(4824.5)\ndog_age(4866.5)\ndog_age(4898.5)\ndog_age(4941.5)\ndog_age(4994.5)\ndog_age(5037.5)\ndog_age(5085.5)\ndog_age(5126.5)\ndog_age(5172.5)\ndog_age(5208.5)\ndog_age(5246.5)\ndog_age(5282.5)\ndog_age(5317.5)\ndog_age(5351.5)\ndog_age(5380.5)\ndog_age(5418.5)\ndog_age(5467.5)\ndog_age(5517.5)\ndog_age(5566.5)\ndog_age(5596.5)\ndog_age(5636.5)\ndog_age(5676.5)\ndog_age(5716.5)\ndog_age(5765.5)\ndog_age(5815.5)\ndog_age(5865.5)\ndog_age(5904.5)\ndog_age(5945.5)\ndog_age(5994.5)\ndog_age(6043.5)\ndog_age(6083.5)\ndog_age(6129.5)\ndog_age(6168.5)\ndog_age(6196.5)\ndog_age(6247.5)\ndog_ag",
        "num_ids": 2016
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age/7)\n",
        "num_ids": 12
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age < 0:\n        print(\"Age must be >= 0!\")\n    elif h_age >= 2:\n        dog_age = h_age * 7\n    else:\n        dog_age = h_age * 0.5\n    \n    return dog_age\n",
        "num_ids": 70
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        print(\"Error\")\n    else:\n        return h_age * 7\n",
        "num_ids": 29
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if S == []:\n        return []\n    elif S[0] == step:\n        return [S]\n    else:\n        if step == 2:\n            S2 = S[1:]\n        else:\n            S2 = S\n        return list_split(S2, step) + list_split(S, step)\n",
        "num_ids": 81
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0,len(S),step):\n        split_list.append(S[i:i+step])\n    return split_list\n",
        "num_ids": 46
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list\n    \n",
        "num_ids": 48
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    i = 0\n    while i < len(S):\n        return_list.append(S[i:i + step])\n        i += step\n    return return_list\n",
        "num_ids": 50
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    for index in range(len(S)):\n        if index % step == 0:\n            return_list.append(S[index::step])\n    return return_list\n",
        "num_ids": 50
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return []\n    if len(S) <= step:\n        return [S]\n    else:\n        # split\n        return [S[i:i + step] for i in range(0, len(S), step)]\n",
        "num_ids": 65
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # print(S)\n    if len(S) == 0:\n        return []\n    elif len(S) == 1:\n        return [[S[0]]]\n    else:\n        if len(S) % step == 0:\n            return [[S[i]] + list_split(S[i + 1:], step) for i in range(0, len(S), step)]\n        else:\n            return [[S[i]] + list_split(S[i + 1:], step) for i in range(0, len(S), step)] + list_split(S[len(S) - 1:], step)\n",
        "num_ids": 150
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Your code here\n    return 0\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 2 * l * (l+l)\n    ",
        "num_ids": 15
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*(l*l)\n    return area\n",
        "num_ids": 17
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return(l**2)\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l<0:\n        print(\"Error: side length cannot be negative\")\n        return\n    surf = l*6\n    return surf\n",
        "num_ids": 36
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    print(area)\n",
        "num_ids": 17
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert l > 0, \"Side length must be > 0\"\n    return l * 6\n",
        "num_ids": 23
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2!= 0:\n            result += i**2\n    return result\n    \n    ",
        "num_ids": 40
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum += i*i\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n         if i%2!=0:\n             sum = sum + i**2\n    print(sum)\nsquare_Sum(4)\n",
        "num_ids": 52
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2!=0:\n            sum = sum + i**2\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for x in range(1,n):\n        if x%2!= 0:\n            result += x**2\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**2\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n=n+1\n    sum=0\n    for i in range(n):\n        sum+=i*i\n    print(sum)\n",
        "num_ids": 36
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum((i ** 2) for i in range(1, n, 2))\n",
        "num_ids": 22
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2!= 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 2\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n - 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return star_num[n-1]\n",
        "num_ids": 13
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n >= 3:\n        return n * (n - 1) / 2 + n - 2\n    elif n == 0:\n        return 0\n",
        "num_ids": 51
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return 3*find_star_num(n-1) + 1\n",
        "num_ids": 49
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x = 0\n    while x!= n:\n        x = x + 1\n        if x % 3 == 0:\n            n = n - 1\n    return x\n",
        "num_ids": 42
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n > 1000000:\n        raise ValueError('Limit exceeded.')\n    if n == 1:\n        return 1\n    else:\n        return 1 + find_star_num(n-1)\n",
        "num_ids": 50
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = ['*', '* *', '* * *', '* * * *', '* * * * *']\n",
        "num_ids": 31
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # num = n\n    # while num >= 2:\n    #     num -= 2\n    # return num\n    \n    '''\n    # Faster solution\n    i = 0\n    while i < n:\n        i += 2\n    return i - 1\n    '''\n    return n + (n // 2)\n",
        "num_ids": 12
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    # 1 star = 1, 2 star = 2, 3 star = 3, 4 star = 4\n    #  5 star = 5, 6 star = 6, 7 star = 7, 8 star = 8\n    #  9 star = 9, 10 star = 10, 11 star = 11, 12 star = 12\n    #  13 star = 13, 14 star = 14, 15 star = 15, 16 star = 16\n    #  17 star = 17, 18 star = 18, 19 star = 19, 20 star = 20\n    #  21 star = 21, 22 star = 22, 23 star = 23, 24 star = 24\n    #  25 star = 25, 26 star = 26, 27 star = 27, 28 star = 28\n    #  29 star = 29, 30 star = 30, 31 star = 31, 32 star = 32\n    #  33 star = 33, 34 star = 34, 35 star = 35, 36 star = 36\n    #  37 star = 37, 38 star = 38, 39 star = 39, 40 star = 40\n    #  41 star = 41, 42 star = 42, 43 star = 43, 44 star = 44\n    #  45 star = 45, 46 star = 46, 47 star = 47, 48 star = 48\n    #  49 star = 49, 50 star = 50, 51 star = 51, 52 star = 52\n    #  53 star = 53, 54 star = 54, 55 star = 55, 56 star = 56\n    #  57 star = 57, 58 star = 58, 59 star = 59, 60 star = 60\n    #  61 star = 61, 62 star = 62, 63 star = 63, 64 star = 64\n    #  65 star = 65, 66 star = 66, 67 star = 67, 68 star = 68\n    #  69 star = 69, 70 star = 70, 71 star = 71, 72 star = 72\n    #  73 star = 73, 74 star = 74, 75 star = 75, 76 star = 76\n    #  77 star = 77, 78 star = 78, 79 star = 79, 80 star = 80\n    #  81 star = 81, 82 star = 82, 83 star = 83, 84 star = 84\n    #  85 star = 85, 86 star = 86, 87 star = 87, 88 star = 88\n    #  89 star = 89, 90 star = 90, 91 star = 91, 92 star = 92\n    #  93 star = 93, 94 star = 94, 95 star = 95, 96 star = 96\n    #  97 star = 97, 98 star = 98, 99 star = 99, 100 star = 100\n    \n    \n    # n = 1, n = 2: 1. 5 1, 2. 2. 3 5, 3. 4. 4, 4. 5. 5, 5. 6. 6, 6. 7. 7, 7. 8. 8, 8. 9. 9, 9. 10. 10, 10. 11. 11, 11. 12. 12, 12. 13. 13, 13. 14. 14, 14. 15. 15, 15. 16. 16, 16. 17. 17, 17. 18. 18, 18. 19. 19, 19. 20. 20, 20. 21. 21, 21. 22. 22, 22. 23. 23, 23. 24. 24, 24. 25. 25, 25. 26. 26, 26. 27. 27, 27. 28. 28, 28. 29. 29, 29. 30. 30, 30. 31. 31, 31. 32. 32, 32. 33. 33, 33. 34. 34, 34. 35. 35, 35. 36. 36, 36. 37. 37, 37. 38. 38, 38. 39. 39, 39. 40. 40, 40. 41. 41, 41. 42. 42, 42. 43. 43, 43. 44. 44, 44. 45. 45, 45. 46. 46, 46. 47. 47, 47. 48. 48, 48. 49. 49, 49. 50. 50, 50. 51. 51, 51. 52. 52, 52. 53. 53, 53. 54. 54, 54. 55. 55, 55. 56. 56, 56. 57. 57, 57. 58. 58, 58. 59. 59, 59. 60. 60, 60. 61. 61, 61. 62. 62, 62. 63. 63, 63. 64. 64, 64. 65. 65, 65. 66. 66, 66. 67. 67, 67. 68. 68, 68. 69. 69, 69. 70. 70, 70. 71. 71, 71. 72. 72, 72. 73. 73, 73. 74. 74, 74. 75. 75, 75. 76. 76, 76. 77. 77, 77. 78. 78, 78. 79. 79, 79. 80. 80, 80. 81. 81, 81. 82. 82, 82. 83. 83, 83. 84. 84, 84. 85. 85, 85. 86. 86, 86. 87. 87, 87. 88. 88, 88. 89. 89, 89. 90. 90, 90. 91. 91, 91. 92. 92, 92. 93. 93, 93. 94. 94, 94. 95. 95, 95. 96. 96, 96. 97. 97, 97. 98. 98, 98. 99. 99, 99. 100\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 25\n    elif n == 5:\n        return 45\n    elif n == 6:\n        return 65\n    elif n == 7:\n        return 95\n    elif n == 8:\n        return 120\n    elif n == 9:\n        return 160\n    elif n == 10:\n        return 195\n    elif n == 11:\n        return 225\n    elif n == 12:\n        return 280\n    elif n == 13:\n        return 330\n    elif n == 14:\n        return 400\n    elif n == 15:\n        return 450\n    elif n == 16:\n        return 500\n    elif n == 17:\n        return 560\n    elif n == 18:\n        return 600\n    elif n == 19:\n        return 650\n    elif n == 20:\n        return 700\n    elif n == 21:\n        return 750\n    elif n == 22:\n        return 800\n    elif n == 23:\n        return 840\n    elif n == 24:\n        return 880\n    elif n == 25:\n        return 900\n    elif n == 26:\n        return 960\n    elif n == 27:\n        return 1000\n    elif n == 28:\n        return 1020\n    elif n == 29:\n        return 1040\n    elif n == 30:\n        return 1060\n    elif n == 31:\n        return 1080\n    elif n == 32:\n        return 1100\n    elif n == 33:\n        return 1130\n    elif n == 34:\n        return 1150\n    elif n == 35:\n        return 1180\n    elif n == 36:\n        return 1200\n    elif n == 37:\n        return 1220\n    elif n == 38:\n        return 1240\n    elif n == 39:\n        return 1260\n    elif n == 40:\n        return 1290\n    elif n == 41:\n        return 1300\n    elif n == 42:\n        return 1320\n    elif n == 43:\n        return 1340\n    elif n == 44:\n        return 1380\n    elif n == 45:\n        return 1400\n    elif n == 46:\n        return 1430\n    elif n == 47:\n        return 1440\n    elif n == 48:\n        return 1480\n    elif n == 49:\n        return 1500\n    elif n == 50:\n        return 1520\n    elif n == 51:\n        return 1540\n    elif n == 52:\n        return 1560\n    elif n == 53:\n        return 1590\n    elif n == 54:\n        return 1600\n    elif n == 55:\n        return 1620\n    elif n == 56:\n        return 1640\n    elif n == 57:\n        return 1660\n    elif n == 58:\n        return 1680\n    elif n == 59:\n        return 1700\n    elif n == 60:\n        return 1720\n    elif n == 61:\n        return 1740\n    elif n == 62:\n        return 1760\n    elif n == 63:\n        return 1790\n    elif n == 64:\n        return 1800\n    elif n == 65:\n        return 1820\n    elif n == 66:\n        return 1840\n    elif n == 67:\n        return 1860\n",
        "num_ids": 2016
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = int(n)\n    m = 0\n    for i in range(1,n+1):\n        if i**3 >= n:\n            m = i**3\n            break\n    print(\"The \",n,\"th star number is \",m)\n    return m\n",
        "num_ids": 66
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # return ord(k)\n    return ord(k) - 32\n",
        "num_ids": 19
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    #return ord(k)\n    return chr(ord(k))\ndef decimal_value(k):\n    '''\n    Write a function to find the decimal value of a character.\n    '''\n    return ord(k)\ndef base_10(n,b):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%b)+s\n        n = n//b\n    return s\ndef base_2(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%2)+s\n        n = n//2\n    return s\ndef base_8(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%8)+s\n        n = n//8\n    return s\ndef base_16(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%16)+s\n        n = n//16\n    return s\ndef base_36(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%36)+s\n        n = n//36\n    return s\ndef base_63(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%63)+s\n        n = n//63\n    return s\ndef base_80(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%80)+s\n        n = n//80\n    return s\ndef base_100(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%100)+s\n        n = n//100\n    return s\ndef base_1000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%1000)+s\n        n = n//1000\n    return s\ndef base_10000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%10000)+s\n        n = n//10000\n    return s\ndef base_1000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%1000000)+s\n        n = n//1000000\n    return s\ndef base_10000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%10000000)+s\n        n = n//10000000\n    return s\ndef base_100000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%100000000)+s\n        n = n//100000000\n    return s\ndef base_1000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%1000000000)+s\n        n = n//1000000000\n    return s\ndef base_10000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%10000000000)+s\n        n = n//10000000000\n    return s\ndef base_100000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%100000000000)+s\n        n = n//100000000000\n    return s\ndef base_1000000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%1000000000000)+s\n        n = n//1000000000000\n    return s\ndef base_10000000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%10000000000000)+s\n        n = n//10000000000000\n    return s\ndef base_100000000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%100000000000000)+s\n        n = n//100000000000000\n    return s\ndef base_1000000000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%1000000000000000)+s\n        n = n//1000000000000000\n    return s\ndef base_100000000000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%100000000000000000)+s\n        n = n//100000000000000000\n    return s\ndef base_100000000000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%100000000000000000)+s\n        n = n//100000000000000000\n    return s\ndef base_1000000000000000000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%1000000000000000000)+s\n        n = n//1000000000000000000\n    return s\ndef base_10000000000000004000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%10000000000000004000)+s\n        n = n//10000000000000004000\n    return s\ndef base_10000000000000004000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%10000000000000004000)+s\n        n = n//10000000000000004000\n    return s\ndef base_10000000000000008000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%10000000000000008000)+s\n        n = n//10000000000000008000\n    return s\ndef base_10000000000000008000(n):\n    '''\n    Write a function to convert a decimal number to any base.\n    '''\n    s = ''\n    while n > 0:\n        s = ascii_value(n%10000000000000008000)+s\n        n = n//10000000000000008000\n    return s\ndef base_1000000000000000",
        "num_ids": 52
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # ASCII values\n    # Space\n    if ord(k) == 32:\n        return 32\n    # Enter\n    if ord(k) == 13:\n        return 13\n    # Tab\n    if ord(k) == 9:\n        return 9\n    # Backspace\n    if ord(k) == 8:\n        return 8\n    # Return\n    if ord(k) == 13:\n        return 13\n    # Shift\n    if ord(k) == 16:\n        return 16\n    # Ctrl\n    if ord(k) == 17:\n        return 17\n    # Alt\n    if ord(k) == 18:\n        return 18\n    # Alt Gr\n    if ord(k) == 19:\n        return 19\n    # Caps Lock\n    if ord(k) == 20:\n        return 20\n    # Caps\n    if ord(k) == 21:\n        return 21\n    # F1\n    if ord(k) == 70:\n        return 70\n    # F2\n    if ord(k) == 71:\n        return 71\n    # F3\n    if ord(k) == 72:\n        return 72\n    # F4\n    if ord(k) == 73:\n        return 73\n    # F5\n    if ord(k) == 74:\n        return 74\n    # F6\n    if ord(k) == 75:\n        return 75\n    # F7\n    if ord(k) == 76:\n        return 76\n    # F8\n    if ord(k) == 77:\n        return 77\n    # F9\n    if ord(k) == 78:\n        return 78\n    # F10\n    if ord(k) == 79:\n        return 79\n    # Left Shift\n    if ord(k) == 60:\n        return 60\n    # Space\n    if ord(k) == 32:\n        return 32\n    # Enter\n    if ord(k) == 13:\n        return 13\n    # Tab\n    if ord(k) == 9:\n        return 9\n    # Backspace\n    if ord(k) == 8:\n        return 8\n    # Return\n    if ord(k) == 13:\n        return 13\n    # Shift\n    if ord(k) == 16:\n        return 16\n    # Ctrl\n    if ord(k) == 17:\n        return 17\n    # Alt\n    if ord(k) == 18:\n        return 18\n    # Alt Gr\n    if ord(k) == 19:\n        return 19\n    # Caps Lock\n    if ord(k) == 20:\n        return 20\n    # Caps\n    if ord(k) == 21:\n        return 21\n    # F1\n    if ord(k) == 70:\n        return 70\n    # F2\n    if ord(k) == 71:\n        return 71\n    # F3\n    if ord(k) == 72:\n        return 72\n    # F4\n    if ord(k) == 73:\n        return 73\n    # F5\n    if ord(k) == 74:\n        return 74\n    # F6\n    if ord(k) == 75:\n        return 75\n    # F7\n    if ord(k) == 76:\n        return 76\n    # F8\n    if ord(k) == 77:\n        return 77\n    # F9\n    if ord(k) == 78:\n        return 78\n    # F10\n    if ord(k) == 79:\n        return 79\n    # Left Shift\n    if ord(k) == 60:\n        return 60\n    # Space\n    if ord(k) == 32:\n        return 32\n    # Enter\n    if ord(k) == 13:\n        return 13\n    # Tab\n    if ord(k) == 9:\n        return 9\n    # Backspace\n    if ord(k) == 8:\n        return 8\n    # Return\n    if ord(k) == 13:\n        return 13\n    # Shift\n    if ord(k) == 16:\n        return 16\n    # Ctrl\n    if ord(k) == 17:\n        return 17\n    # Alt\n    if ord(k) == 18:\n        return 18\n    # Alt Gr\n    if ord(k) == 19:\n        return 19\n    # Caps Lock\n    if ord(k) == 20:\n        return 20\n    # Caps\n    if ord(k) == 21:\n        return 21\n    # F1\n    if ord(k) == 70:\n        return 70\n    # F2\n    if ord(k) == 71:\n        return 71\n    # F3\n    if ord(k) == 72:\n        return 72\n    # F4\n    if ord(k) == 73:\n        return 73\n    # F5\n    if ord(k) == 74:\n        return 74\n    # F6\n    if ord(k) == 75:\n        return 75\n    # F7\n    if ord(k) == 76:\n        return 76\n    # F8\n    if ord(k) == 77:\n        return 77\n    # F9\n    if ord(k) == 78:\n        return 78\n    # F10\n    if ord(k) == 79:\n        return 79\n    # Left Shift\n    if ord(k) == 60:\n        return 60\n    # Space\n    if ord(k) == 32:\n        return 32\n    # Enter\n    if ord(k) == 13:\n        return 13\n    # Tab\n    if ord(k) == 9:\n        return 9\n    # Backspace\n    if ord(k) == 8:\n        return 8\n    # Return\n    if ord(k) == 13:\n        return 13\n    # Shift\n    if ord(k) == 16:\n        return 16\n    # Ctrl\n    if ord(k) == 17:\n        return 17\n    # Alt\n    if ord(k) == 18:\n        return 18\n    # Alt Gr\n    if ord(k) == 19:\n        return 19\n    # Caps Lock\n    if ord(k) == 20:\n        return 20\n    # Caps\n    if ord(k) == 21:\n        return 21\n    # F1\n    if ord(k) == 70:\n        return 70\n    # F2\n    if ord(k) == 71:\n        return 71\n    # F3\n    if ord(k) == 72:\n        return 72\n    # F4\n    if ord(k) == 73:\n        return 73\n    # F5\n    if ord(k) == 74:\n        return 74\n    # F6\n    if ord(k) == 75:\n        return 75\n    # F7\n    if ord(k) == 76:\n        return 76\n    # F8\n    if ord(k) == 77:\n        return 77\n    # F9\n    if ord(k) == 78:\n        return 78\n    # F10\n    if ord(k) == 79:\n        return 79\n    # Left Shift\n    if ord(k) == 60:\n        return 60\n    # Space\n    if ord(k) == 32:\n        return 32\n    # Enter\n    if ord(k) == 13:\n        return 13\n    # Tab\n    if ord(k) == 9:\n        return 9\n    # Backspace\n    if ord(k) == 8:\n        return 8\n    # Return\n    if ord(k) == 13:\n        return 13\n    # Shift\n    if ord(k) == 16:\n        return 16\n    # Ctrl\n    if ord(k) == 17:\n        return 17\n    # Alt\n    if ord(k) == 18:\n        return 18\n    # Alt Gr\n    if ord(k) == 19:\n        return 19\n    # Caps Lock\n    if ord(k) == 20:\n        return 20\n    # Caps\n    if ord(k) == 21:\n        return 21\n    # F1\n    if ord(k) == 70:\n        return 70\n    # F2\n    if ord(k) == 71:\n        return 71\n    # F3\n    if ord(k) == 72:\n        return 72\n    # F4\n    if ord(k) == 73:\n        return 73\n    # F5\n    if ord(k) == 74:\n        return 74\n    # F6\n    if ord(k) == 75:\n        return 75\n    # F7\n    if ord(k) == 76:\n        return 76\n    # F8\n    if ord(k) == 77:\n        return 77\n    # F9\n    if ord(k) == 78:\n    ",
        "num_ids": 2016
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(0, len(arr), 2):\n        s += arr[i]\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 0:\n        return 0\n    even_sum = 0\n    even_index = 0\n    for i in range(0,len(arr)):\n        if arr[i]%2==0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index\n",
        "num_ids": 83
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    index_sum = 0\n    even_index = 0\n",
        "num_ids": 23
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers = [num for num in arr if num % 2 == 0]\n    even_index = [num for num in range(0, len(even_numbers))]\n    print(sum(even_numbers), sum(even_index))\n",
        "num_ids": 62
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr)):\n        if(arr[i]%2==0):\n            total += arr[i]\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n        i += 2\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_odd = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_even += arr[i]\n        else:\n            sum_odd += arr[i]\n    return sum_even, sum_odd\n",
        "num_ids": 71
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if(i % 2 == 0):\n            even_sum += arr[i]\n    print(even_sum)\nsum_even_and_even_index(arr)",
        "num_ids": 63
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n",
        "num_ids": 12
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if i%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 48
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum = 0\n    for i in range(n): \n        if i % 2 == 0: \n            sum += i**5\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_even = sum_even + i**5\n    return sum_even\n",
        "num_ids": 46
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum = sum + (i**5)\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power = 0\n    for i in range(n):\n        if(i%2 == 0):\n            sum_even_power = sum_even_power + pow(i,5)\n    return sum_even_power\n",
        "num_ids": 58
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i**5 for i in range(0,n+1))\nprint(even_Power_Sum(5)) \nprint(even_Power_Sum(50)) \n",
        "num_ids": 45
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 5\n    x = 0\n    while x < n:\n        x = x + 1\n        y = int(pow(x, power))\n        if y % 2 == 0:\n            print(y, end = \" \")\n    print()\n    print(\"Sum = \", sum(i for i in range(1, n+1) if i % 2 == 0))\n",
        "num_ids": 91
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power_n = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum_even_power_n = sum_even_power_n + (i**5)\n    return sum_even_power_n\n",
        "num_ids": 68
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #If even powers sum is odd\n    if n%2==1:\n        return 1\n    #If even powers sum is even\n    if n%2==0:\n        return 4\n",
        "num_ids": 46
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_even = sum_even + (i**5)\n    return sum_even\n",
        "num_ids": 48
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2==0])\n",
        "num_ids": 24
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    ret_list = []\n    for i in range(len(test_list)):\n        ret_list.append(test_list[i][1])\n    return ret_list\n",
        "num_ids": 45
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    res_list = []\n    for item in test_list:\n        res_list.append(item[1])\n    return res_list\n",
        "num_ids": 36
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][1]\n    return test_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    ret_list = []\n    for item in test_list:\n        ret_list.append(item[-1])\n    return ret_list\n",
        "num_ids": 37
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n",
        "num_ids": 13
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[-1] for tuple in test_list]\n",
        "num_ids": 19
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Retrieve the item and add it to the list\n    list_test = test_list\n    return list_test[len(list_test)-1]\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: x[-1], test_list))\n",
        "num_ids": 21
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: x[-1], test_list))\n",
        "num_ids": 21
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (tuple(x-y for x, y in zip(test_tup1, test_tup2)))\n",
        "num_ids": 31
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = test_tup1\n    test_tup2 = test_tup2\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "num_ids": 90
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output = ()\n    for i in range(len(test_tup1)):\n        output = test_tup1[i] - test_tup2[i]\n        yield output\n",
        "num_ids": 49
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        test_tup3.append(test_tup1[i] - test_tup2[i])\n    return test_tup3\n",
        "num_ids": 62
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n    \ndef convert_to_set(test_tup):\n    '''\n    Write a function that takes in a tuple and converts it to a set.\n    '''\n    return set(test_tup)\n",
        "num_ids": 12
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    i = 0\n    sub = ()\n    while i < len(test_tup1):\n        sub += (test_tup1[i] - test_tup2[i],)\n        i += 1\n    return sub\n",
        "num_ids": 57
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub = tuple(i - j for i, j in zip(test_tup1, test_tup2))\n    return sub\n",
        "num_ids": 34
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtract_tup = ()\n    for i in range(len(test_tup1)):\n        subtract_tup += (test_tup1[i] - test_tup2[i],)\n    return subtract_tup\n",
        "num_ids": 63
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return ((2*n)-1)*even_binomial_Coeff_Sum(n-1) \nprint(even_binomial_Coeff_Sum(0))\nprint(even_binomial_Coeff_Sum(1))\nprint(even_binomial_Coeff_Sum(2))\nprint(even_binomial_Coeff_Sum(3))\nprint(even_binomial_Coeff_Sum(4))\nprint(even_binomial_Coeff_Sum(5))\n",
        "num_ids": 139
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # my code \n    s = 0 \n    for i in range(n+1):\n        s += binomial_coeff(n,i)\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum=0\n    n = int(n)\n    while n>=0:\n        sum+=binomialsum(n)\n        n-=1\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Less_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients less than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a >= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_Less_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a >= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_More_than_Less_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_More_than_Less_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_More_than_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_More_than_More_than_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_Less_than_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_Less_than_More_than_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_Less_than_More_than_More_than_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_Less_than_More_than_More_than_More_than_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_Less_than_More_than_More_than_More_than_More_than_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_Less_than_More_than_More_than_More_than_More_than_More_than_More_than_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(0,n+1):\n        if a <= n:\n            result += a\n        a = 2*a\n    return result\ndef even_binomial_Coeff_Sum_Up_to_Less_than_More_than_More_than_More_than_More_than_More_than_More_than_More_than_More_than_More_than( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients, but returns \n    only the coefficients greater than or equal to that value.\n    '''\n    a = 1\n    b = 1\n    result = 0\n    for i in range(",
        "num_ids": 23
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n",
        "num_ids": 65
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    ans = sum(range(n, -1, -2))\n    return ans \nprint(even_binomial_Coeff_Sum(10))\n",
        "num_ids": 44
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if (i%2==0):\n            s=s+get_binomial_Coeff(n,i)\n    return s\n    \ndef get_binomial_Coeff(n, k): \n    '''\n    Write a python function that takes in a positive integer n and an integer k and finds the binomial coefficient.\n    '''\n    if (n <= 0 or k <= 0 or k > n): \n        return 0\n    res = 1\n    for i in range(0, k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res\n    \ndef get_count_of_pairs(N, k):\n    '''\n    Write a python function that takes in a positive integer n and integer k and finds the number of pairs (i, j) such that i<j and i<k<j.\n    '''\n    if (k>N or k>N+1):\n        return 0\n    c=0\n    for i in range(N-k+1):\n        for j in range(N-k+1,N):\n            if i<j and i<k<j:\n                c=c+1\n    return c\n    \ndef get_binomial_coeff(n,k):\n    '''\n    Write a python function that takes in two integers and returns the binomial coefficient.\n    '''\n    if (n<k):\n        return 0\n    if (n==0):\n        return 1\n    elif (k==0):\n        return 0\n    return (n * get_binomial_coeff(n-1, k) + get_binomial_coeff(n-1, k-1))\n    \ndef get_combinations(N, K):\n    '''\n    Write a python function that takes in two positive integers N and K and returns the number of combinations of N items taken K at a time.\n    '''\n    s=0\n    for i in range(0,K+1):\n        s=s+get_comb(N,i)\n    return s\n    \ndef get_comb(n,k):\n    '''\n    Write a python function that takes in two integers n and k and returns the number of combinations of n items taken k at a time.\n    '''\n    if (n<=0 or k<=0):\n        return 0\n    return get_comb(n-1,k)+get_comb(n-1,k-1)\n    \ndef get_max_val(a,b):\n    '''\n    Write a python function that takes in two arrays of size m and n and returns the maximum value of n*m.\n    '''\n    s=0\n    for i in range(0,len(a)):\n        s=s+a[i]*b[i]\n    return s\n    \ndef get_max_val_arr(a):\n    '''\n    Write a python function that takes in an array of integers and returns the maximum value in the array.\n    '''\n    s=a[0]\n    for i in range(1,len(a)):\n        if a[i]>s:\n            s=a[i]\n    return s\n    \ndef get_min_val_arr(a):\n    '''\n    Write a python function that takes in an array of integers and returns the minimum value in the array.\n    '''\n    s=a[0]\n    for i in range(1,len(a)):\n        if a[i]<s:\n            s=a[i]\n    return s\n    \ndef get_min_max_val_arr(a):\n    '''\n    Write a python function that takes in an array of integers and returns a tuple of the minimum and maximum values in the array.\n    '''\n    s=a[0]\n    for i in range(1,len(a)):\n        if a[i]<s:\n            s=a[i]\n        if a[i]>s:\n            s=a[i]\n    return (s,s)\n    \ndef get_mean(a):\n    '''\n    Write a python function that takes in an array of integers and returns the mean of the array.\n    '''\n    s=0\n    for i in range(0,len(a)):\n        s=s+a[i]\n    return s/(len(a))\n    \ndef get_median(a):\n    '''\n    Write a python function that takes in an array of integers and returns the median of the array.\n    '''\n    if(len(a)%2==0):\n        m1=get_min_val_arr(a)\n        m2=get_max_val_arr(a)\n        return (m1+m2)/2\n    else:\n        return get_min_val_arr(a)\n        \ndef get_mode(a):\n    '''\n    Write a python function that takes in an array of integers and returns the mode of the array.\n    '''\n    s=0\n    d={}\n    for i in range(0,len(a)):\n        if a[i] not in d:\n            d[a[i]]=1\n        else:\n            d[a[i]]=d[a[i]]+1\n    max_count=0\n    for i in range(0,len(d)):\n        if d[i]>max_count:\n            max_count=d[i]\n    count_max_in_set=0\n    for i in range(0,len(d)):\n        if d[i]==max_count:\n            count_max_in_set=count_max_in_set+1\n    if count_max_in_set>1:\n        return -1\n    else:\n        return max_count\n    \ndef get_range(a):\n    '''\n    Write a python function that takes in an array of integers and returns the range of the array.\n    '''\n    s=get_max_val_arr(a)-get_min_val_arr(a)\n    return s\n    \ndef get_variance(a):\n    '''\n    Write a python function that takes in an array of integers and returns the variance of the array.\n    '''\n    s=0\n    for i in range(0,len(a)):\n        s=s+((a[i]-get_mean(a))**2)\n    return s/(len(a)-1)\n    \ndef get_stddev(a):\n    '''\n    Write a python function that takes in an array of integers and returns the standard deviation of the array.\n    '''\n    s=0\n    for i in range(0,len(a)):\n        s=s+(a[i]-get_mean(a))**2\n    return math.sqrt(s/(len(a)-1))\n    \ndef get_skew(a):\n    '''\n    Write a python function that takes in an array of integers and returns the skew of the array.\n    '''\n    s=0\n    for i in range(0,len(a)):\n        s=s+((a[i]-get_mean(a))*((a[i]-get_mean(a))/math.sqrt(len(a)-1)))\n    return s\n    \ndef get_kurtosis(a):\n    '''\n    Write a python function that takes in an array of integers and returns the kurtosis of the array.\n    '''\n    s=0\n    for i in range(0,len(a)):\n        s=s+((a[i]-get_mean(a))**4)\n    return s/(len(a)-1)\n    \ndef get_skew_and_kurtosis(a):\n    '''\n    Write a python function that takes in an array of integers and returns both the skew and the kurtosis.\n    '''\n    s=0\n    for i in range(0,len(a)):\n        s=s+((a[i]-get_mean(a))*((a[i]-get_mean(a))/math.sqrt(len(a)-1)))\n    return (s,s/math.sqrt(len(a)-1))\n    \ndef get_standardized_data(a):\n    '''",
        "num_ids": 1
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        sum += (binomial_coefficient(i,n) / math.factorial(2))\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    if n == 0:\n        return 1\n    for i in range(n):\n        binomial_coeff_sum += math.factorial(n-i)*math.factorial(i)/math.factorial(n)\n    return binomial_coeff_sum\n",
        "num_ids": 76
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    elements = list(range(0,n+1))\n    sums = list()\n    sums.append(0)\n    for i in range(n):\n        sums.append(0)\n        sums[i+1] = sums[i] + elements[i]\n        for j in range(i+1):\n            sums[i+1] -= elements[j]*sums[i-j]/2\n            #print(sums[i+1])\n    return sums[n]\n",
        "num_ids": 124
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = math.pi*r**2*h\n    return v\n    \ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    v = math.pi*r**2*h/3\n    return v\n    \ndef volume_pyramid(l,w):\n    '''\n    Write a function that takes in the length and width of a pyramid and returns the volume.\n    '''\n    v = l*w*3/4\n    return v\n    \ndef volume_box(w,h):\n    '''\n    Write a function that takes in the width and height of a box and returns the volume.\n    '''\n    v = w*h\n    return v\n    \ndef volume_cuboid(x,y,z):\n    '''\n    Write a function that takes in the length, width, and height of a cuboid and returns the volume.\n    '''\n    v = x*y*z\n    return v\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n",
        "num_ids": 12
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14159 * r * r * h)\n    return vol\n",
        "num_ids": 22
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r**2*h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.1416\n    volume = pi*(r**2)*h\n    print(volume)\n",
        "num_ids": 28
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h\n",
        "num_ids": 16
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return(math.pi*r**2*h)\n",
        "num_ids": 16
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=pi*r**2*h\n    return v\n",
        "num_ids": 17
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    area_cylinder = math.pi*r*r\n    volume_cylinder = area_cylinder*h\n    print(\"The volume of the cylinder is\", volume_cylinder)\n",
        "num_ids": 49
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    v = math.pi*r*r*h\n    return v\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dic = dict\n    res = {}\n    for key, value in dic.items():\n        if value >= n:\n            res[key] = value\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_new = {}\n    for key in dict:\n        if dict[key] >= n:\n            dict_new[key] = dict[key]\n    return dict_new\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    return {key:val for key,val in dict.items() if val >= n}\n",
        "num_ids": 25
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    n1=[]\n    for key in dict:\n        if dict[key]>=n:\n            n1.append(key)\n    return n1\n",
        "num_ids": 40
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n    \ndef dict_map(dict,fn):\n    '''\n    Write a function that takes in a dictionary and two functions, fn and fn1.\n    \n    Use the functions to update the dictionary.\n",
        "num_ids": 33
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            result += 1\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for ele in test_tup:\n        if ele < test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    \n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    first_elem = None\n    #putting the first element in the tuple in a variable\n    #so that we can iterate over the first element in the tuple\n    first_elem = test_tup[0]\n    #iterating over the tuple to find the first element and incrementing the counter\n    for elem in test_tup:\n        if elem <= first_elem:\n            counter += 1\n    return counter\n",
        "num_ids": 108
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] <= test_tup[0]:\n            count = count + 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup) - test_tup.index(test_tup[0])\n",
        "num_ids": 27
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Solution 1\n    s = 1\n    for i in range(n):\n        s += 6 * (i + 1)\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    n = n + 1\n    a = 1\n    \n    while n > 0:\n        a = a * (n**2 + 1) / n\n        n = n - 1\n    return a\n",
        "num_ids": 51
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    deco_num = 1\n    for i in range(n):\n        deco_num = deco_num * (n - i) // (i + 1)\n    return deco_num\n",
        "num_ids": 49
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    a = 1\n    n += 1\n    while n > 0: \n        a += 6\n        n -= 1\n    \n    return a \n",
        "num_ids": 39
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(n-1):\n        result *= 6\n        result += 1\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonals = {1: 1, 2: 1, 3: 2, 4: 3, 5: 5, 6: 8, 7: 13, 8: 21, 9: 34, 10: 55, 11: 89, 12: 144, 13: 233, 14: 377, 15: 610, 16: 987, 17: 1597, 18: 2584, 19: 4181, 20: 6765, 21: 10946, 22: 17711, 23: 28657, 24: 46368, 25: 75025, 26: 121393, 27: 196418, 28: 317811, 29: 514229, 30: 832040, 31: 1346269, 32: 268435, 33: 528605, 34: 9227465, 35: 1505150, 36: 3524578, 37: 5702887, 38: 9227828, 39: 1655801, 40: 3728773, 41: 6042051, 42: 1098245, 43: 1836361, 44: 3628809, 45: 5925967, 46: 10605088, 47: 2525824, 48: 43980465, 49: 7083495, 50: 1134902, 51: 2624523, 52: 4334944, 53: 7014087, 54: 11872872, 55: 2971284, 56: 48329833, 57: 8377282, 58: 13829153, 59: 26793895, 60: 4334944, 61: 7014087, 62: 11872872, 63: 2971284, 64: 48329833, 65: 13829153, 66: 26793895, 67: 4334944, 68: 7014087, 69: 11872872, 70: 2971284, 71: 48329833, 72: 13829153, 73: 26793895, 74: 4334944, 75: 7014087, 76: 11872872, 77: 2971284, 78: 48329833, 79: 13829153, 80: 26793895, 81: 4334944, 82: 7014087, 83: 11872872, 84: 2971284, 85: 48329833, 86: 13829153, 87: 26793895, 88: 4334944, 89: 7014087, 90: 11872872, 91: 2971284, 92: 48329833, 93: 13829153, 94: 26793895, 95: 4334944, 96: 7014087, 97: 11872872, 98: 2971284, 99: 48329833, 100: 13829153, 101: 26793895, 102: 4334944, 103: 7014087, 104: 11872872, 105: 2971284, 106: 48329833, 107: 13829153, 108: 26793895, 109: 4334944, 110: 7014087, 111: 11872872, 112: 2971284, 113: 48329833, 114: 13829153, 115: 26793895, 116: 4334944, 117: 7014087, 118: 11872872, 119: 2971284, 120: 48329833, 121: 13829153, 122: 26793895, 123: 4334944, 124: 7014087, 125: 11872872, 126: 2971284, 127: 48329833, 128: 13829153, 129: 26793895, 130: 4334944, 131: 7014087, 132: 11872872, 133: 2971284, 134: 48329833, 135: 13829153, 136: 26793895, 137: 4334944, 138: 7014087, 139: 11872872, 140: 2971284, 141: 48329833, 142: 13829153, 143: 26793895, 144: 4334944, 145: 7014087, 146: 11872872, 147: 2971284, 148: 48329833, 149: 13829153, 150: 26793895, 151: 4334944, 152: 7014087, 153: 11872872, 154: 2971284, 155: 48329833, 156: 13829153, 157: 26793895, 158: 4334944, 159: 7014087, 160: 11872872, 161: 2971284, 162: 48329833, 163: 13829153, 164: 26793895, 165: 4334944, 166: 7014087, 167: 11872872, 168: 2971284, 169: 48329833, 170: 13829153, 171: 26793895, 172: 4334944, 173: 7014087, 174: 11872872, 175: 2971284, 176: 48329833, 177: 13829153, 178: 26793895, 179: 4334944, 180: 7014087, 181: 11872872, 182: 2971284, 183: 48329833, 184: 13829153, 185: 26793895, 186: 4334944, 187: 7014087, 188: 11872872, 189: 2971284, 190: 48329833, 191: 13829153, 192: 26793895, 193: 4334944, 194: 7014087, 195: 11872872, 196: 2971284, 197: 48329833, 198: 13829153, 199: 26793895, 200: 4334944, 201: 7014087, 202: 11872872, 203: 2971284, 204: 48329833, 205: 13829153, 206: 26793895, 207: 4334944, 208: 7014087, 209: 11872872, 210: 2971284, 211: 48329833, 212: 13829153, 213: 26793895, 214: 4334944, 215: 7014087, 216: 11872872, 217: 2971284, 218: 48329833, 219: 13829153, 220: 26793895, 221: 4334944, 222: 7014087, 223: 11872872, 224: 2971284, 225: 48329833, 226: 13829153, 227: 26793895, 228: 4334944, 229: 7014087, 230: 11872872, 231: 2971284, 232: 48329833, 233: 13829153, 234: 26793895, 235: 4334944, 236: 7014087, 237: 11872872, 238: 2971284, 239: 48329833, 240: 13829153, 241: 26793895, 242: 4334944, 243: 7014087, 244: 11872872, 245: 2971284, 246: 48329833, 247: 13829153, 248: 26793895, 249: 4334944, 250: 7014087, 251: 11872872, 252: 2971284, 253: 48329833, 254: 13829153, 255: 26793895, 256: 4334944, 257: 7014087, 258: 11872872, 259: 2971284, 260: 48329833, 261: 13829153, 262: 26793895, 263: 4334944, 264: 7014087, 265: 11872872, 266: 2971284, 267: 48329833, 268: 13829153, 269: 26793895, 270: 4334944, 271: 7014087, 272: 11872872, 273: 2971284, 274: 48329833, 275: 13829153, 276: 26793895, 277: 4334944, 278: 7014087, 279: 11872872, 280: 2971284, 281: 48329833, 282: 13829153, 283: 26793895, 284: 4334944, 285: 7014087, 286: 11872872, 287: 2971284, 288: 48329833, 289: 13829153, 290: 26793895, 291: 4334944, 292: 7014087, 293: 11872872, 294: 2971284, 295: 48329833, 296: 13829153, 297: 26793895, 298: 4334944, 299: 7014087, 300: 11872872, 301: 2971284, 302: 48329833, 303: 13829153, 304: 26793895, 305: 4334944, 306: 7014087, 307: 11872872, 308: 2971284, 309: 48329833, 310: 13829153, 311: 26793895, 312: 4334944, 313: 7014087, 314: 11872872, 315: 2971284, 316: 48329833, 317: 13829153, 318: 26793895, 319: 4334944, 320: 7014087, 321: 11872872, 322",
        "num_ids": 2015
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    deco_num = 0\n    if n <= 1:\n        deco_num = 1\n        return deco_num\n    for i in range(1, n + 1):\n        deco_num = deco_num*(i + 1)\n    return deco_num\n",
        "num_ids": 69
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    import math\n    a = 0\n    i = 0\n    while i < n:\n        a += math.floor(n ** (1 / 2)) ** 2\n        i += 1\n    return a\n",
        "num_ids": 49
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*(3*n - 1)//2\n",
        "num_ids": 43
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (1 + 2 * n) * (3 * n + 1) // 2\n",
        "num_ids": 22
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = 0\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found == True:\n        return True, pos\n    else:\n        return False, -1\n",
        "num_ids": 75
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while (index < len(dlist)) and (not found):\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return found, index\n",
        "num_ids": 59
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n",
        "num_ids": 12
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n",
        "num_ids": 36
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for x in range(len(dlist)):\n        if dlist[x] == item:\n            return True, x\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n",
        "num_ids": 38
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    found = False\n    n = 0\n    while found is False:\n        if dlist[n] == item:\n            found = True\n        else:\n            n += 1\n            \n    return (found, n)\n",
        "num_ids": 56
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i, True\n    return -1, False\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n",
        "num_ids": 40
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = 0\n",
        "num_ids": 12
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    if len(test_list) == 0:\n        return True\n    else:\n        test_list.sort()\n        for i in range(1, len(test_list)):\n            if test_list[i] == test_list[i-1]:\n                return False\n        return True\n",
        "num_ids": 74
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    a = {}\n    for i in test_list:\n        if i in a:\n            return False\n        a[i] = True\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #check if list is empty\n    if len(test_list) == 0:\n        print(\"List is empty\")\n        return False\n    else:\n        test_set = set()\n        #check if the element is present in the set\n        for x in test_list:\n            if x in test_set:\n                return False\n            else:\n                test_set.add(x)\n                print(\"True\")\n                return True\n",
        "num_ids": 104
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        print(\"All values are unique\")\n    else:\n        print(\"Not unique\")\n",
        "num_ids": 41
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list)\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    return len(test_list)==len(set(test_list))\n",
        "num_ids": 22
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = test_list\n    test_list = list(set(test_list))\n    if(len(test_list) == len(test_list)):\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 59
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                print(\"Test List: {}\\nUniqueness of the elements : {}\".format(test_list,False))\n                return False\n    print(\"Test List: {}\\nUniqueness of the elements : {}\".format(test_list,True))\n    return True\n",
        "num_ids": 110
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(f\"{''.join(set(test_list))}\")\n",
        "num_ids": 20
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert nums1 and nums2\n    assert len(nums1) == len(nums2)\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 57
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l = []\n    for i in range(len(nums1)):\n        l.append(nums1[i] - nums2[i])\n    return l\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n    \ndef is_palindrome(text):\n    \"\"\"\n    Return True/False if text is a palindrome.\n    \"\"\"\n    # TODO: Implement this function.\n    \n    n = len(text)\n    \n    for i in range(n // 2):\n        if text[i]!= text[n - i - 1]:\n            return False\n    return True\n",
        "num_ids": 134
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    lst_1 = nums1[:]\n    lst_2 = nums2[:]\n    n = len(lst_1)\n    for i in range(n):\n        lst_1[i] = lst_1[i]-lst_2[i]\n    return lst_1\n",
        "num_ids": 77
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x, y in zip(nums1, nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    i,j = 0,0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            sub_list.append(nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            sub_list.append(nums1[i])\n            i += 1\n        else:\n            sub_list.append(nums2[j])\n            j += 1\n    if i == len(nums1):\n        for k in range(j,len(nums2)):\n            sub_list.append(nums2[k])\n    if j == len(nums2):\n        for k in range(i,len(nums1)):\n            sub_list.append(nums1[k])\n    return sub_list\n",
        "num_ids": 225
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x for x in nums1 if x not in nums2]\n",
        "num_ids": 21
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1)-set(nums2))\n",
        "num_ids": 19
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result=[]\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    answer = []\n    for i in range(min(len(nums1), len(nums2))):\n        answer.append(nums1[i] - nums2[i])\n    return answer\n",
        "num_ids": 52
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    if n == 0:\n        return False\n    if n < 10:\n        return True\n    \n    counts = {}\n    while n > 0:\n        counts[n%10] = counts.get(n%10, 0) + 1\n        n = n//10\n        \n    for i in range(0, 10):\n        if counts[i] >= i:\n            return False\n    \n    return True\n",
        "num_ids": 103
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for num in n:\n        if num in freq:\n            freq[num] = freq[num] + 1\n        else:\n            freq[num] = 1\n    for digit in n:\n        if freq[digit] > freq[digit]:\n            return False\n    return True\nprint(validate(314)",
        "num_ids": 87
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=0\n    while(n>0):\n        r=n%10\n        s=s+1\n        if s>=r:\n            return False\n        n=n//10\n    return True\n    \n    \ndef countDigits(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=0\n    while(n>0):\n        r=n%10\n        s=s+1\n        if s>=r:\n            return False\n        n=n//10\n    return True\n    \ndef largestNumber(n): \n    '''\n    Write a python function takes in an integer and print the largest number that fits in the integer.\n    '''\n    s=\"\"\n    while(n>0):\n        r=n%10\n        s=s+str(r)\n        n=n//10\n    return s\n        \n        \ndef countSubstring(s, ss): \n    '''\n    Write a python function takes in two string s and ss and print the number of times the substring ss is found in s.\n    '''\n    i=0\n    while(i<len(s)):\n        if s[i:i+len(ss)]==ss:\n            return 1\n        i+=1\n    return 0\n    \ndef countSubstring(s, ss): \n    '''\n    Write a python function takes in two string s and ss and print the number of times the substring ss is found in s.\n    '''\n    i=0\n    while(i<len(s)):\n        if s[i:i+len(ss)]==ss:\n            return 1\n        i+=1\n    return 0\n    \ndef check_palindrome(s):\n    if s==s[::-1]:\n        return True\n    return False\n    \ndef check_palindrome(s):\n    i=0\n    j=len(s)-1\n    while(i<j):\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \ndef longestPalindrome(s):\n    '''\n    Write a python function takes in a string s and returns the longest palindrome.\n    '''\n    i=0\n    j=len(s)-1\n    while(i<j):\n        if s[i]==s[j]:\n            i+=1\n            j-=1\n            continue\n        else:\n            break\n    \n    l1=s[i+1:j+1]\n    i=0\n    j=len(l1)-1\n    while(i<j):\n        if l1[i]==l1[j]:\n            i+=1\n            j-=1\n            continue\n        else:\n            break\n    l2=l1[i+1:j+1]\n    return l2\n    \ndef lps(s): \n    '''\n    Write a python function that returns the length of the longest palindromic substring in s.\n    '''\n    n=len(s)\n    dp=[[0]*n for i in range(n)]\n    \n    for i in range(n-1,-1,-1):\n        for j in range(i,n):\n            if s[i]==s[j]:\n                dp[i][j]=1+dp[i+1][j-1]\n            else:\n                dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n    print(dp)\n    return dp[0][n-1]\n    \ndef lps(s): \n    '''\n    Write a python function that returns the length of the longest palindromic substring in s.\n    '''\n    n=len(s)\n    dp=[[0]*n for i in range(n)]\n    \n    for i in range(n-1,-1,-1):\n        for j in range(i,n):\n            if s[i]==s[j]:\n                dp[i][j]=1+dp[i+1][j-1]\n            else:\n                dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n    print(dp)\n    return dp[0][n-1]\n    \ndef findKthLargest(nums, k): \n    '''\n    Write a python function that takes in a list of integers nums and returns the kth largest integer in the list.\n    '''\n    def partition(nums, low, high):\n        if low > high:\n            return -1\n        i = low - 1\n        pivot = nums[high]\n        for j in range(low, high):\n            if nums[j] <= pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1], nums[high] = nums[high], nums[i + 1]\n        return i + 1\n    \n    def quickSort(nums, low, high):\n        if low >= high:\n            return\n        pIndex = partition(nums, low, high)\n        if pIndex - 1 > low:\n            quickSort(nums, low, pIndex - 1)\n        if pIndex + 1 < high:\n            quickSort(nums, pIndex + 1, high)\n    quickSort(nums, 0, len(nums) - 1)\n    return nums[len(nums) - k]\n    \ndef findKthLargest(nums, k): \n    '''\n    Write a python function that takes in a list of integers nums and returns the kth largest integer in the list.\n    '''\n    def partition(nums, low, high):\n        pivot = nums[low]\n        i = low + 1\n        j = high\n        while i <= j:\n            while i <= j and nums[i] <= pivot:\n                i += 1\n            while i <= j and nums[j] >= pivot:\n                j -= 1\n            if i <= j:\n                nums[i], nums[j] = nums[j], nums[i]\n        nums[low], nums[j] = nums[j], nums[low]\n        return j\n    \n    def quickSort(nums, low, high):\n        if low >= high:\n            return\n        pIndex = partition(nums, low, high)\n        if pIndex - 1 > low:\n            quickSort(nums, low, pIndex - 1)\n        if pIndex + 1 < high:\n            quickSort(nums, pIndex + 1, high)\n    quickSort(nums, 0, len(nums) - 1)\n    return nums[len(nums) - k]\n    \ndef factorial(n): \n    '''\n    Write a python function that takes in an integer and return the factorial of the number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef factorial(n): \n    '''\n    Write a python function that takes in an integer and return the factorial of the number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef reverse(s): \n    '''\n    Write a python function that takes in a string s and returns the reverse of the string.\n    '''\n    s=s[::-1]\n    return s\n    \ndef reverse(s): \n    '''\n    Write a python function that takes in a string s and returns the reverse of the string.\n    '''\n    s=s[::-1]\n    return s\n    \ndef find_frequent(nums): \n    '''\n    Write a python function that takes in a list of integers nums and returns a list of the frequencies of each element in the list.\n    '''\n    count = {}\n    for i in nums:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count.values()\n    \ndef find_frequent(nums): \n    '",
        "num_ids": 65
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    if isinstance(n,int) and (0<=n<=9):\n        count = 0\n        for i in str(n):\n            if int(i)<n:\n                count+=1\n        if count==len(str(n)):\n            return True\n        else:\n            return False\n    else:\n        return False\nprint(validate(13))\nprint(validate(1))\nprint(validate(11))\nprint(validate(123))\nprint(validate(111))\nprint(validate(1111111111))\nprint(validate(9))\nprint(validate(21))\nprint(validate(-1))\nprint(validate('a'))\nprint(validate(10))\nprint(validate(-11))\nprint(validate(1000))\nprint(validate(10.1))\nprint(validate(1.1))",
        "num_ids": 211
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    valid = True\n    while True:\n        if n == 0:\n            print(\"Invalid input\")\n            valid = False\n            break\n        n = n//10\n        if n%10 > n:\n            print(\"Invalid input\")\n            valid = False\n            break\n    return valid\n",
        "num_ids": 69
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(10):\n        if i<n:\n            print(i,end=\",\")\n    \n",
        "num_ids": 30
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0}\n    for x in str(n):\n        d[int(x)] += 1\n    for i in d:\n        if d[i]>=i:\n            return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {} \n    while n: \n        d[n % 10] = d.get(n % 10, 0) + 1\n        n //= 10\n    for i in d: \n        if d[i] > i: \n            return False\n    return True\n    ",
        "num_ids": 69
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # String for converting the number into list and to check if the frequency of each digit is less than the digit itself\n    n_list = list(str(n))\n    n_list = sorted(n_list)\n    # String for checking the frequency of each digit is less than or equal to the digit itself\n    n_list = sorted(n_list)\n    n_list = ''.join(n_list)\n    n_list = int(n_list)\n    return n_list\n",
        "num_ids": 115
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    while n!= 0: \n        digits.append(n % 10) \n        n //= 10\n    for i in digits: \n        if i > i + 1: \n            return False\n    return True\n    \ndef solve(n, k): \n    '''\n    Write a python function returns the list of numbers greater than or equal to n, whose digits are less than k. \n    '''\n    result = []\n    for i in range(10): \n        if validate(n+i*k): \n            result.append(n+i*k)\n    return result\n    \ndef main(): \n    n = 30\n    k = 3\n    print(solve(n, k))\nif __name__ == '__main__': \n    main() ",
        "num_ids": 89
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    for i in list:\n        if i!= element:\n            return False\n",
        "num_ids": 23
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return True if list.count(element) == len(list) else False\n",
        "num_ids": 20
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # return True if all items in the list are equal to the given element\n    return list.count(element) == len(list)\n",
        "num_ids": 33
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return element in list\n",
        "num_ids": 8
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    else:\n        return True\n",
        "num_ids": 22
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list[0] == element:\n        return True\n    elif list[-1] == element:\n        return True\n    elif list[int(len(list)/2)] == element:\n        return True\n    else:\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item==element for item in list)\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    found = False\n    for i in range(len(list)):\n        if list[i] == element:\n            found = True\n            break\n    return found\n",
        "num_ids": 41
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    # not great, but I was tired of using regular expressions\n    \n    # better solution is to use a dictionary\n    \n    text_two = re.compile('a{2,3}')\n    \n    # text_three = re.compile('a{3,}')\n    \n    match_two = re.search(text_two, text)\n    \n    if match_two:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    # better solution is to use a dictionary\n    \n    text_two = re.compile('a{2,3}')\n    \n    # text_three = re.compile('a{3,}')\n    \n    match_two = re.search(text_two, text)\n    \n    if match_two:\n        return True\n    else:\n        return False\n    \n    \n    \n",
        "num_ids": 99
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # return re.search('ab*b', text) # matches ab\n    # return re.search('ab+b', text) # matches ab and aab\n    # return re.search('ab?b', text) # matches ab and abb, but not aba\n    # return re.search('ab{2}b', text) # matches ab and abab\n    # return re.search('ab{3}b', text) # matches ab and ababab\n    return re.search('ab{2,3}b', text) # matches ab and ababab, but not abababab\n    # return re.search('ab{2,3}b', text) # matches ab and ababab, but not ababababab\n    # return re.search('ab{,3}b', text) # matches ab and ababab, but not ababababab\n    # return re.search('ab{,3}b', text) # matches ab and ababab, but not ababababab\n    # return re.search('ab{,3}b', text) # matches ab and ababab, but not ababababab\n    # return re.search('ab{,3}b', text) # matches ab and ababab, but not ababababab\n    # return re.search('ab{,3}b', text) # matches ab and ababab, but not ababababab\n",
        "num_ids": 333
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # if re.search('b\\ba\\bb', text):\n    #     print(\"Yes\")\n    # else:\n    #     print(\"No\")\n    regex_pattern = re.compile(r'b\\ba\\bb')\n    if regex_pattern.search(text):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 86
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r'^[ab]b[ab]b$', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #re.search returns None if no match found\n    return re.search(r'a{2,3}b', text)\n",
        "num_ids": 33
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(\"ab*b\", text)\n",
        "num_ids": 15
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ab|ab.*b|ab.*b.*b|ab.*b.*b.*b',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #pattern=re.compile(r\"(b)*a\")\n    pattern=r\"(a){2,3}b\"\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(ba[ab]*)+')\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(\"ab+\",text)\n",
        "num_ids": 14
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the result and max sum. \n    result = -9e20\n    max_sum = -9e20\n    \n    # Traverse through all the indexes in the array. \n    for i in range(n): \n        sum = 0\n        # If the current element is less than k, add it to sum. \n        if (a[i] < k): \n            sum += a[i]\n        \n        # If the current element is greater than k, add k and k elements to sum. \n        else: \n            # Add k first. \n            sum += a[i] - k\n            # Add k second. \n            sum += k\n        \n        # Update max sum if needed. \n        if sum > max_sum: \n            max_sum = sum\n            result = max_sum \n    \n    # Return the result. \n    return result \n",
        "num_ids": 212
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = float('-inf')\n    # Initialize current_sum to zero\n    current_sum = 0\n    # Set starting index to 0\n    start = 0\n    # Initialize index to n + 1\n    end = n + 1\n    # Initialize the sum of the subarray from start till end\n    max_sum = a[start]\n    \n    while end - start > 1:\n        \n        # Calculate the sum of the subarray starting from start\n        # till end\n        current_sum = sum(a[start:end])\n        \n        # If the sum of the subarray is greater than the current\n        # maximum, update the max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n        # If the sum of the subarray is less than the current\n        # maximum, we don't need to consider this subarray\n        if current_sum < max_sum:\n            end -= 1\n        \n        # Update start and end for the next subarray\n        start += 1\n        end += k\n    \n    return max_sum\n    \n    \n    \ndef max_sub_array_sum(a, n): \n    '''\n    Write a function to find the maximum sum of a contiguous array in the array\n    '''\n    \n    max_sum = float('-inf')\n    # Initialize starting index and ending index to 0\n    start = 0\n    end = 0\n    \n    # Initialize the sum of the subarray from start till end\n    current_sum = 0\n    \n    # Traverse the array a.t.r. \n    # Calculate the sum of the subarray from start till end\n    while end < n:\n        current_sum = sum(a[start:end+1])\n        \n        # If the current_sum is greater than the max_sum\n        # then update max_sum and start\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end\n        \n        # If the current_sum is less than the max_sum\n        # then update end and start\n        if current_sum < max_sum:\n            end += 1\n    \n    return max_sum\n    \ndef max_sub_array_sum_without_duplicates(a, n): \n    '''\n    Write a function to find the maximum sum of a contiguous array in the array\n    '''\n    \n    max_sum = float('-inf')\n    # Initialize starting index and ending index to 0\n    start = 0\n    end = 0\n    \n    # Initialize the sum of the subarray from start till end\n    current_sum = 0\n    \n    # Traverse the array a.t.r. \n    # Calculate the sum of the subarray from start till end\n    while end < n:\n        current_sum = sum(a[start:end+1])\n        \n        # If the current_sum is greater than the max_sum\n        # then update max_sum and start\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end\n        \n        # If the current_sum is less than the max_sum\n        # then update end and start\n        if current_sum < max_sum:\n            end += 1\n    \n    return max_sum\n    \ndef max_sub_array_sum_range(a, n, left, right): \n    '''\n    Write a function to find the maximum sum of a contiguous array in the array\n    '''\n    \n    max_sum = float('-inf')\n    # Initialize starting index and ending index to 0\n    start = left\n    end = right\n    \n    # Initialize the sum of the subarray from start till end\n    current_sum = 0\n    \n    # Traverse the array a.t.r. \n    # Calculate the sum of the subarray from start till end\n    while end < n:\n        current_sum = sum(a[start:end+1])\n        \n        # If the current_sum is greater than the max_sum\n        # then update max_sum and start\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end\n        \n        # If the current_sum is less than the max_sum\n        # then update end and start\n        if current_sum < max_sum:\n            end += 1\n    \n    return max_sum\n    \ndef max_sub_array_sum_range_non_repetitive(a, n, left, right): \n    '''\n    Write a function to find the maximum sum of a contiguous array in the array\n    '''\n    \n    max_sum = float('-inf')\n    # Initialize starting index and ending index to 0\n    start = left\n    end = right\n    \n    # Initialize the sum of the subarray from start till end\n    current_sum = 0\n    \n    # Traverse the array a.t.r. \n    # Calculate the sum of the subarray from start till end\n    while end < n:\n        current_sum = sum(a[start:end+1])\n        \n        # If the current_sum is greater than the max_sum\n        # then update max_sum and start\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end\n        \n        # If the current_sum is less than the max_sum\n        # then update end and start\n        if current_sum < max_sum:\n            end += 1\n    \n    return max_sum\n    \n    \ndef max_sub_array_sum_repetitive(a, n): \n    '''\n    Write a function to find the maximum sum of a contiguous array in the array\n    '''\n    \n    max_sum = float('-inf')\n    # Initialize starting index and ending index to 0\n    start = 0\n    end = 0\n    \n    # Initialize the sum of the subarray from start till end\n    current_sum = 0\n    \n    # Traverse the array a.t.r. \n    # Calculate the sum of the subarray from start till end\n    while end < n:\n        current_sum = sum(a[start:end+1])\n        \n        # If the current_sum is greater than the max_sum\n        # then update max_sum and start\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end\n        \n        # If the current_sum is less than the max_sum\n        # then update end and start\n        if current_sum < max_sum:\n            end += 1\n    \n    return max_sum\n    \ndef max_sub_array_sum_repetitive_2(a, n): \n    '''\n    Write a function to find the maximum sum of a contiguous array in the array\n    '''\n    \n    max_sum = float('-inf')\n    # Initialize starting index and ending index to 0\n    start = 0\n    end = 0\n    \n    # Initialize the sum of the subarray from start till end\n    current_sum = 0\n    \n    # Traverse the array a.t.r. \n    # Calculate the sum of the subarray from start till end\n    while end < n:\n        current_sum = sum(a[start:end+1])\n        \n        # If the current_sum is greater than the max_sum\n        # then update max_sum and start\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end\n        \n        # If the current_sum is less than the max_sum\n        # then update end and start\n        if current_sum < max_sum:\n            end += 1\n    \n    return max_sum\n    \ndef max_sub_array_sum_non_repetitive(a, n): \n    '''\n    Write a function to find the maximum sum of a contiguous array in the array\n    '''\n    \n    max_sum = float('-inf')\n    # Initialize starting index and ending index to 0\n    start = 0\n    end = 0\n    \n    # Initialize the sum of the subarray from start till end\n    current_sum = 0\n    \n    # Traverse the array a.t.r. \n    # Calculate the sum of the subarray from start till end\n    while end < n:\n        current_sum = sum(a[start:end",
        "num_ids": 111
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = sum(a)\n    if (s < k):\n        return -1\n    max_sum = -99999999999\n    for i in range(n):\n        tmp_sum = sum(a[:i+1]) * k\n        tmp_sum += sum(a[i+1:]) * k\n        max_sum = max(tmp_sum, max_sum)\n    return max_sum\n",
        "num_ids": 98
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    min_sub_array_sum = float('-inf')\n    \n    for i in range(n-k+1):\n        max_sum = 0\n        for j in range(i,i+k):\n            max_sum += a[j]\n        if max_sum > min_sub_array_sum:\n            min_sub_array_sum = max_sum\n",
        "num_ids": 90
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (n == 1):\n        return a[0]\n    \n    # we can split the array into two half and apply Kadane's Algorithm \n    mid = (n//2)\n    l, r = a[:mid], a[mid:]\n    lmax, rmax = max_sub_array_sum_repeated(l, mid, k), max_sub_array_sum_repeated(r, mid, k)\n    \n    # final problem, max sum of a subarray formed by repeating\n    res = max(lmax+r[0]+r[1], lmax+r[0], lmax+r[1], lmax, rmax)\n    return res\n    \n    \n    # for arr in permutations(a, n):\n    #     a = [num for num in arr]\n    #     i, j = 0, 0\n    #     for k in range(1,n):\n    #         i, j = max(i+a[k], a[k]), j\n    #         if i > j:\n    #             break\n    #     res = max(res, j)\n    # return res\n    \n    # for each subarray, we can keep reducing the maximum of the sum \n    # if it is not too large, we can add it into a new subarray and do max sum again \n    # if it is not too small, we can continue doing max sum again, to avoid the unnecessary subarray \n    # return the max of all the subarray sum \n    \n    # if the sum of the array is <= K then add the item, and increase the count \n    # if the sum of the array is > K then only add the item, and increase the count \n    ",
        "num_ids": 399
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    Input:\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\n    n = len(a)\n    k = 3\n    Output:\n    19\n    Explanation:\n    The new array formed is -2 -3 4 -1 -2 1 -5 -3.\n    The sum of the new array is 9 which is maximum.\n    '''\n    temp_sum = 0\n    # (1)\n    max_sum = -9999\n    for i in range(n):\n        temp_sum = 0\n        for j in range(k):\n            temp_sum += a[i]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n        temp_sum = 0\n    # (2)\n    for i in range(n - k + 1):\n        temp_sum = 0\n        for j in range(k):\n            temp_sum += a[i + j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n        temp_sum = 0\n    # (3)\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += a[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n",
        "num_ids": 217
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #Determine the length of original array\n    l = len(a)\n    #Keep a temp array for the count of each number\n    temp = [0 for i in range(l)]\n    #Intialise the max sum\n    max_sum = -999999\n    #Initialise the counter\n    count = 0\n    for i in range(l):\n        #Add value of temp array to count\n        count += temp[i]\n        #Add the current value\n        count += a[i]\n        #If the current value is greater than the max sum, update\n        if count > max_sum:\n            max_sum = count\n        #Store the current value in the array\n        temp[i] = a[i]\n    #Store the value at max_sum position\n    max_sum_at_index = max_sum\n    #Store the value at max_sum position\n    max_sum_at_index_idx = n - 1\n    #Loop through the array and update the max sum and max sum at the index position\n    for i in range(l - k + 1):\n        count = 0\n        for j in range(k):\n            count += a[i + j]\n        #If count is larger than max_sum_at_index\n        if count > max_sum_at_index:\n            #Update max_sum_at_index\n            max_sum_at_index = count\n            #Update the max_sum_at_index_idx\n            max_sum_at_index_idx = i\n    #Return the max_sum_at_index\n    return max_sum_at_index\n",
        "num_ids": 379
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = -1\n    for i in range(n-k+1):\n        tmp = 0\n        for j in range(k):\n            tmp += a[i+j]\n        if res < tmp:\n            res = tmp\n    return res\n",
        "num_ids": 61
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initializing array of size n*k\n    arr = [[0 for i in range(n)] for j in range(n*k)] \n",
        "num_ids": 36
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = -float('inf')\n    res_arr = []\n    max_sum = -float('inf')\n    for i in range(n-k+1):\n        temp_sum = 0\n        for j in range(k):\n            temp_sum += a[i+j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        res_arr.append(temp_sum)\n    res = max(res_arr)\n    if res > res:\n        return res\n    else:\n        return res_arr.index(max(res_arr)) + 1\n",
        "num_ids": 144
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        i += 1\n        sum = sum + (i * i)\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            ans += i**2\n    return ans\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # your code here\n    sum = 0\n    i = 0\n    while i < n:\n        sum += (i * i)\n        i += 1\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return 2*square_Sum(n-1) + n\n        \ndef SieveOfEratosthenes(n): \n    \n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    \n    # Print all prime numbers\n    prime_count = 0\n    for p in range(2, n): \n        if prime[p]: \n            print(p, end=\" \") \n            prime_count = prime_count + 1\n    return prime_count\n    \n    \ndef nCr(n,r):\n    if (n < r):\n        return 0\n    if (r == 0 or r == n):\n        return 1\n    r = min(r,n-r)\n    return factorial(n)//(factorial(r) * factorial(n-r))\n    \n    \ndef matrix_Multiply(a, b, c): \n    for i in range(n):\n        for j in range(m):\n            c[i][j] = 0\n            for k in range(n):\n                c[i][j] = c[i][j] + a[i][k] * b[k][j]\n    \n    \ndef Matrix_Transpose(A): \n    n = len(A)\n    m = len(A[0])\n    result = [[0 for x in range(n)] for y in range(m)] \n    for i in range(n): \n        for j in range(m): \n            result[j][i] = A[i][j] \n    return result \n    \n    \ndef Matrix_Convolution(A, B): \n    # Number of rows in A \n    r1 = len(A) \n    # Number of columns in A \n    c1 = len(A[0]) \n    # Number of rows in B \n    r2 = len(B) \n    # Number of columns in B \n    c2 = len(B[0]) \n    \n    # Total number of elements in result \n    # In below for loop, 'c' represents columns, \n    # 'r' represents rows in result matrix \n    c = r1 + r2 - 1\n    r = c1 + c2 - 1\n    \n    # Result matrix \n    res = [[0 for x in range(r)] for y in range(c)] \n    \n    # Convolution of A and B \n    for i in range(r): \n        for j in range(c): \n            if (i >= r1 and j >= c1): \n                res[i][j] = 0\n            else: \n                # Sum of elements of A and same row in B \n                res[i][j] = A[i - r1][j - c1] + B[i][j] \n    \n    return res \n    \n    \ndef check_subarray_sum_equals(arr, n, sum): \n    \n    # Create a table to store results of subarray sum \n    # equals sum using prefix array \n    table = {}\n    \n    # Traverse table starting from i = 1 to length of arr \n    for i in range(n): \n        # Traverse till j = i+1 to get sum of subarray \n        for j in range(i + 1, n + 1): \n            curr_sum = arr[i : j] \n            curr_sum = sum(curr_sum)\n            if curr_sum == sum: \n                print(\"Sum found at indexes\", i, \"and\", j - 1)\n                return\n            else:\n                print(\"sum not found\")\n                break\n",
        "num_ids": 994
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**2\n    return sum\n    \nprint(square_Sum(5))\n",
        "num_ids": 53
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            square_sum = square_sum + i**2\n    print(\"The sum of squares of first {} natural numbers is :\".format(n),square_sum)\n",
        "num_ids": 64
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n+1):\n        if i%2==0:\n            sum+=i*i\n    return sum",
        "num_ids": 39
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if i%2==0:\n            sum = sum + i**2\n    print(sum)\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i%2 == 0:\n            result += i**2\n    print(result)\n",
        "num_ids": 38
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_of_squares += i**2\n    return sum_of_squares\nprint(square_Sum(10))",
        "num_ids": 59
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #My Solution\n    list_length = []\n    for i in range(len(list1)):\n        list_length.append(len(list1[i]))\n    max_length = max(list_length)\n    max_index = list_length.index(max_length)\n    max_list = list1[max_index]\n    print('\\nMy Solution:')\n    print('Maximum Length: ', max_length)\n    print('Max List: ', max_list)\n",
        "num_ids": 118
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1 = [1,2,3]\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n            list1[i] = max_length\n    return list1\n",
        "num_ids": 78
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    max_length_list=[]\n    for i in range(len(list1)):\n        length=len(list1[i])\n        if length>max_length:\n            max_length=length\n            max_length_list=list1[i]\n    return max_length_list\n",
        "num_ids": 79
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if list1 == None:\n        return 0\n    max_length = 0\n    for sub_list in list1:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n",
        "num_ids": 63
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for sub_list in list1:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n",
        "num_ids": 51
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for elem in list1:\n        if len(elem) > maxlen:\n            maxlen = len(elem)\n    return maxlen\n",
        "num_ids": 44
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if max_length < len(list1[i]):\n            max_length = len(list1[i])\n    return max_length\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = len(list1[0])\n    for i in range(1, len(list1)):\n        if len(list1[i]) > length:\n            length = len(list1[i])\n    return length\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2 = []\n    for item in list1:\n        if type(item) == list:\n            if len(item) > len(list2):\n                list2 = item\n    return list2\n",
        "num_ids": 50
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    size=len(list1)\n    if size==0:\n        return -1\n    for i in range(size):\n        if len(list1[i])>=max_length(list1[:i]+list1[i+1:]):\n            max_length=len(list1[i])\n    return max_length\n",
        "num_ids": 81
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Question - There are two ways to solve this problem.\n    # Method 1: Using a hash map\n    # Method 2: Dynamic programming\n    # Initializing the hash map\n    dic = {}\n    dic[0] = 1\n    dic[1] = 1\n    \n    # Defining the recursion function\n    def no_of_ways(n, k): \n        \n        # Base Case\n        if n == 0 or k == 0: \n            return 0\n        \n        # Initializing the variables \n        key = n - k \n        if key in dic: \n            return dic[key]\n        \n        # Computing the answer for the next two \n        # possible positions\n        first = no_of_ways(n - 1, k) \n        second = no_of_ways(n - 1, k - 1) \n      \n        # The above computation may be \n        # optimized by caching the answer \n        # for each key value pair. \n        # Below line computes the answer for the next position. \n        total = first + second\n        dic[n - k] = total \n        return total \n    \n    # Driver program to test above function \n    print (no_of_ways(n, k)) \n    \n",
        "num_ids": 301
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    global g1, g2\n",
        "num_ids": 10
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    if k == n:\n        return 2\n    \n    ways = 0\n    ways += count_no_of_ways(n-1, k)\n    ways += count_no_of_ways(n-1, k-1)\n    \n    return ways\n",
        "num_ids": 86
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    colors = {}\n",
        "num_ids": 8
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    ways = 0\n    if n <= 2:\n        return 1\n    if k == n:\n        return n\n    for i in range(1, n+1):\n        ways += count_no_of_ways(n-i, k-1)\n    return ways\n",
        "num_ids": 77
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    c = [[0 for x in range(k+1)] for y in range(n+1)] \n    \n    for i in range(1, k+1): \n        c[1][i] = 1\n        \n    for i in range(2, n+1): \n        for j in range(1, k+1): \n            c[i][j] = c[i-1][j] + c[i-1][j-1] \n            \n    return c[n][k] \n",
        "num_ids": 124
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # this is a O(N) solution.\n    # in our case, we have n number of posts.\n    # so we can do a dp array of size n+1.\n    # in each iteration, if the color of the post is same as the last post,\n    # we add the previous element and increment the count.\n    # if the color is not the same as the last post, then we do the same thing but now increment the count with the new post\n    # you can think this as a dp array of size n+2.\n    # the array is filled in the top-down manner.\n    # so our dp array will look like this:\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    # count = 1\n    for i in range(2, n+1):\n        dp[i] = 1\n        for j in range(1, k+1):\n            # if the post is of the same color as the last post, we add the previous one and increment the count\n            if j == k:\n                dp[i] += dp[i-1]\n            # if the post is not of the same color as the last post, then we do the same thing but now increment the count with the new post\n            else:\n                dp[i] += dp[i-1]\n    return dp[n]\n",
        "num_ids": 326
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = [[0 for i in range(k)] for j in range(n)]\n    for i in range(n):\n        for j in range(k):\n            if j == 0 or j == 1:\n                memo[i][j] = 1\n            else:\n                memo[i][j] = memo[i-1][j-1] + memo[i-1][j]\n    return memo[-1][-1]\n",
        "num_ids": 107
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count(i, j): \n        if i > j: \n            return 0\n        if i == j: \n            return 1\n        return count(i+1, j) + count(i+1, j-1)\n    return count(0, k)\n",
        "num_ids": 67
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 1 or k <= 1:\n        return 0\n    if n == 2 and k == 1:\n        return 1\n    if n == 2 and k == 2:\n        return 2\n    if n >= 3:\n        ways = count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n        return ways\n",
        "num_ids": 93
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = m//n\n    return quotient\n    \n    \n    \n    '''\n    Write a python function to count the number of words in a sentence.\n    '''\n    \n    \n    \n    '''\n    Write a python function to find the given number is the prime number or not.\n    '''\n    \n    \n    \n    '''\n    Write a python function to find the factorial of the given number.\n    '''\n    \n    \n    \n    '''\n    Write a python function to reverse a given string.\n    '''\n    \n    \n    \n    '''\n    Write a python function to check if the given number is an Armstrong number or not.\n    '''\n    \n    \n    \n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print the prime numbers in a given range.\n    '''\n    \n    \n    \n    '''\n    Write a python function to swap two numbers.\n    '''\n    \n    \n    \n    '''\n    Write a python function to add two numbers.\n    '''\n    \n    \n    \n    '''\n    Write a python function to subtract two numbers.\n    '''\n    \n    \n    \n    '''\n    Write a python function to multiply two numbers.\n    '''\n    \n    \n    \n    '''\n    Write a python function to divide two numbers.\n    '''\n    \n    \n    \n    '''\n    Write a python function to find the largest number in the list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to find the smallest number in the list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to remove duplicate characters in a given string.\n    '''\n    \n    \n    \n    '''\n    Write a python function to get the sum of numbers in a given list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to get the first element in a given list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to get the last element in a given list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to get the maximum element from the list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to get the minimum element from the list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to find the length of a given string.\n    '''\n    \n    \n    \n    '''\n    Write a python function to replace first occurrence of 'a' with 'b' in a given string.\n    '''\n    \n    \n    \n    '''\n    Write a python function to replace all occurrences of 'a' with 'b' in a given string.\n    '''\n    \n    \n    \n    '''\n    Write a python function to count the number of 'a' in a given string.\n    '''\n    \n    \n    \n    '''\n    Write a python function to count the number of 'a' in a given string.\n    '''\n    \n    \n    \n    '''\n    Write a python function to convert a given string to all uppercase.\n    '''\n    \n    \n    \n    '''\n    Write a python function to convert a given string to all lowercase.\n    '''\n    \n    \n    \n    '''\n    Write a python function to replace all spaces in a given string with '%20'.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all even numbers in a given list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers in a given list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd and even numbers in a given list.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all the numbers between 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all even numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all the numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all the numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all even and odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all the numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all even numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all the numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all even numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all the numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all even numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all the numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all even numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all the numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all even numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all the numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all even numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''\n    Write a python function to print all odd numbers from 1 to 20 using condition in python.\n    '''\n    \n    \n    \n    '''",
        "num_ids": 1
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #print(n,m)\n    if n == m:\n        return n\n    else:\n        if (n*m)%2 == 0:\n            return (n*m)//2\n        else:\n            return (n*m +1)//2\n",
        "num_ids": 65
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int(n/m)\n    elif n<0 and m>0:\n        return int(n/m-1)\n    elif n<0 and m<0:\n        return int(n/m+1)\n    else:\n        return int(n/m)\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return None\n    if n>0 and m>0:\n        return int",
        "num_ids": 31
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a=int(n/m)\n    b=n%m\n    while b>0:\n        a=int(a/m)\n        b-=1\n    return a\nprint(find(10,10))\n",
        "num_ids": 55
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n    \n    \n    \ndef find(n,m):  \n    '''\n    Write a python function to fin",
        "num_ids": 9
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    elif n<m:\n        return -1\n    elif n>m:\n        return 1\n",
        "num_ids": 38
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # return int(n/m)\n    return n//m\n",
        "num_ids": 18
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \n    \ndef solve(n,m):  \n    '''\n    Write a python function to find remainder of two numbers (rounded down to the nearest integer).\n    '''\n    return n%m\n",
        "num_ids": 8
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w**2\n    b = h**2\n    c = (a+b)**0.5\n    return c\n",
        "num_ids": 33
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\n",
        "num_ids": 10
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2)+(h**2)**0.5\n",
        "num_ids": 19
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x = (w**2)-(h**2)\n    y = (w**2)+(h**2)\n    if x < 0 or y < 0:\n        return 'Invalid'\n    elif x > 0 and y > 0:\n        return 'Invalid'\n    elif x == 0 and y > 0:\n        return math.sqrt(y)\n    else:\n        return math.sqrt(x)\n",
        "num_ids": 101
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2 - 2*h*w*math.cos(math.radians(60)))\n",
        "num_ids": 35
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = math.sqrt(h**2 + w**2)\n    side2 = math.sqrt(side1**2 - w**2)\n    side3 = w\n    return side1, side2, side3\n",
        "num_ids": 56
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w,h = abs(w), abs(h)\n    w1,h1 = w,h\n    if w > h:\n        w,h = h,w\n    if w == h:\n        return w**2\n    while(h!= 0):\n        w = w1 - h1*(w1//h1)\n        h = h1 - w1*(h1//w1)\n        w1,h1 = w,h\n    return w**2\n",
        "num_ids": 116
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # w = height\n    # h = width\n    b = h/2\n    return math.sqrt(b**2 + w**2)\n",
        "num_ids": 37
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s1 = math.sqrt(w**2 + h**2)\n    s2 = s1\n    return s1, s2\n",
        "num_ids": 35
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = w * h /2\n    return s\n",
        "num_ids": 15
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 57
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = 0\n    for num in listval:\n        if max_num < num:\n            max_num = num\n    return max_num\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 58
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for item in listval:\n        if isinstance(item,int):\n            if max_value == None or item > max_value:\n                max_value = item\n        elif isinstance(item,float):\n            if max_value == None or item > max_value:\n                max_value = item\n    return max_value\n",
        "num_ids": 88
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in listval:\n        if i > maxval:\n            maxval = i\n    return maxval\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # My solution\n    maximum = listval[0]\n    for i in listval:\n        if i > maximum:\n            maximum = i\n    return maximum\n    # Recursive solution\n    # return max(listval)\n",
        "num_ids": 55
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for i in range(len(listval)):\n        for j in range(len(listval[i])):\n            if listval[i][j] > maxval:\n                maxval = listval[i][j]\n    return maxval\nprint(max_val([[1,2,3],[4,5,6],[7,8,9]]))\n",
        "num_ids": 94
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 0:\n        return 0\n    div = 2\n    while div * div <= number:\n        if number % div == 0:\n            number //= div\n            sum += div\n        else:\n            div += 1\n    return sum\n",
        "num_ids": 60
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 59
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum = sum + i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for x in range(1, number):\n        if number % x == 0:\n            total += x\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sums = 0\n    \n    for i in range(1, number):\n        if number % i == 0:\n            sums += i\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)<=1:\n        return 0\n    else:\n        mid = len(arr)//2\n        l = arr[:mid]\n        r = arr[mid:]\n        \n        # count inversions in left half\n        count = get_Inv_Count(l)\n        \n        # count inversions in right half\n        count += get_Inv_Count(r)\n        \n        # now count inversions in middle\n        i = 0 \n        j = 0\n        k = 0\n        inversions = 0\n        while i < len(l) and j < len(r):\n            if l[i] < r[j]:\n                arr[k] = l[i]\n                i += 1\n                k += 1\n            else:\n                inversions += len(l) - i\n                arr[k] = r[j]\n                j += 1\n                k += 1\n        while i < len(l):\n            arr[k] = l[i]\n            i += 1\n            k += 1\n        while j < len(r):\n            arr[k] = r[j]\n            j += 1\n            k += 1\n        return count + inversions\narr = [10,8,5,3,2,3,7,4,1,1]\nprint(get_Inv_Count(arr)",
        "num_ids": 313
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1: return 0\n    mid = len(arr) // 2\n    L = arr[:mid]\n    R = arr[mid:]\n    i = j = 0\n    count = 0\n    while (i < len(L) and j < len(R)):\n        if L[i] > R[j]:\n            count += len(L) - i\n            arr[i+j] = R[j]\n            j += 1\n        else:\n            arr[i+j] = L[i]\n            i += 1\n    if i == len(L):\n        arr[i+j:] = R[j:]\n    else:\n        arr[i+j:] = L[i:]\n    return count\n",
        "num_ids": 176
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n    \n    elif len(arr) == 2:\n        return 0 if arr[0] <= arr[1] else 1\n",
        "num_ids": 45
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Brute Force Method\n    n = len(arr) \n    if n <= 1:\n        return 0\n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j] : \n                count += 1\n    return count \n    \n    #Optimal and faster way using mergesort\n    #count = 0\n    #for i in range(len(arr)): \n    #    for j in range(i + 1, len(arr)): \n    #        if arr[i] > arr[j]: \n    #            count += 1\n    #return count \n",
        "num_ids": 163
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    low = 0\n    mid = 0\n    high = n - 1\n    count = 0\n    while(mid <= high): \n        if arr[mid] > arr[high]: \n            count += (high - mid) \n            arr[low], arr[mid] = arr[mid], arr[low]\n            low = low + 1\n            mid = low + 1\n        else: \n            mid = mid + 1\n    print(count)\n",
        "num_ids": 115
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    ans = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                ans = ans + 1\n    return ans \n",
        "num_ids": 67
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]>arr[j]):\n                inv_count+=1\n    return inv_count\n",
        "num_ids": 66
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    inv_count = 0\n    \n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    print('Inversion count of the given array is:',inv_count)\n    return inv_count\n        \n    \n",
        "num_ids": 101
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                res += 1\n    print(res)\n",
        "num_ids": 56
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    print(count)\n",
        "num_ids": 58
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    temp = []\n    for i in list1:\n        if isinstance(i,list):\n            for j in i:\n                temp.append(j)\n        else:\n            temp.append(i)\n    return temp\n    ",
        "num_ids": 57
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # # code here\n    if not list1: return []\n    if not any(isinstance(item, list) for item in list1):\n        return list1\n    return sum((flatten_list(sublist) for sublist in list1), [])\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return None\n    elif isinstance(list1, int):\n        return list1\n    else:\n        result = []\n        for i in list1:\n            if isinstance(i, list):\n                result += flatten_list(i)\n            else:\n                result.append(i)\n        return result\n",
        "num_ids": 88
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # iterate through the list\n    for i in range(len(list1)):\n        # if element is a list, then iterate through it\n        if isinstance(list1[i],list):\n            for j in flatten_list(list1[i]):\n                yield j\n        else:\n            yield list1[i]\n    \n    \n",
        "num_ids": 88
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n",
        "num_ids": 9
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n",
        "num_ids": 18
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 is None:\n        return None\n    if isinstance(list1, list):\n        # recurse\n        return sum([flatten_list(x) for x in list1], [])\n    else:\n        # base case\n        return [list1]\n",
        "num_ids": 66
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n",
        "num_ids": 9
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n    elif isinstance(list1[0], list):\n        list2 = list1[0]\n        list1.pop(0)\n        return flatten_list(list1) + list2\n    else:\n        return list1 + [list1[0]]\n",
        "num_ids": 81
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # We can use a list comprehension here. We will need to go through each list in our list\n    # and add it to our final result.\n    #\n    # We can use a list comprehension here. We will need to go through each list in our list\n    # and add it to our final result.\n    #\n    # We can use a list comprehension here. We will need to go through each list in our list\n    # and add it to our final result.\n    #\n    # We can use a list comprehension here. We will need to go through each list in our list\n    # and add it to our final result.\n    #\n    # Now our final result will be a list of lists.\n",
        "num_ids": 160
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = defaultdict(list)\n    for i in range(len(stdata)):\n        if stdata[i][0] not in max_aggregate:\n            max_aggregate[stdata[i][0]] = stdata[i][1]\n        else:\n            max_aggregate[stdata[i][0]].append(stdata[i][1])\n    max_aggregate = dict(sorted(max_aggregate.items(), key=lambda item: sum(item[1]), reverse=True))\n    for item in max_aggregate.items():\n        print(item)\n",
        "num_ids": 146
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = defaultdict(int)\n    for x,y in stdata:\n        agg[x] += y\n    ans = 0\n    for x in agg:\n        ans = max(ans,agg[x])\n    return ans\n",
        "num_ids": 57
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for st,val in stdata:\n        total += val\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    index = 0\n    while index < len(stdata):\n        sub_list = []\n        \n        for i in stdata[index:]:\n            if i[1] == stdata[index][1]:\n                sub_list.append(i)\n        \n        #calculate the total hours of the day\n        tot_hour = 0\n        for i in sub_list:\n            tot_hour += i[0]\n        \n        \n        if len(sub_list) > 0:\n            stdata[index] = (tot_hour, stdata[index][1])\n        \n        else:\n            stdata.pop(index)\n        \n        index += 1\n    \n    return stdata\n",
        "num_ids": 172
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = []\n    for i in range(len(stdata)):\n        res.append(sum(stdata[i]))\n    max_value = max(res)\n    return (max_value)\n",
        "num_ids": 52
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    a = 0\n    for i in stdata:\n        a += i[0]\n        a += i[1]\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = defaultdict(lambda:defaultdict(int))\n    for k,v in stdata:\n        agg[k]['total']+=v\n        agg[k]['count']+=1\n    max_v = max(agg[k].values())\n    for k in agg.keys():\n        if agg[k]['total']==max_v:\n            return k\n",
        "num_ids": 90
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for x,y in stdata:\n        total += x\n        total -= y\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val=max(stdata)\n    agg_list=[]\n    for element in stdata:\n        if element[0]==max_val:\n            agg_list.append(element[1])\n    return sum(agg_list)/len(agg_list)\n",
        "num_ids": 67
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    totals = defaultdict(int)\n    for (k,v) in stdata:\n        totals[k] += v\n    return max(totals.items(), key=lambda x: x[1])\n",
        "num_ids": 55
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #answer = 0\n    #for i in range(2**n):\n    #    if sum(int(x) for x in bin(i)[2:]) == i:\n    #        answer += 1\n    #return answer\n",
        "num_ids": 56
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # a function to compute sum of a binary sequence of length n\n    def sum_binary_seq(n): \n        '''\n        find the sum of a binary sequence of length n such that \n        sum of first n bits is same as sum of last n bits. \n        '''\n        # initialization of sum \n        sum = 0\n        # computing sum of all sequences of length n \n        for i in range(2 ** n): \n            # extracting the sequence of length n \n            binary_seq = list(bin(i)[2:]) \n            # computing the sum of the sequence \n            sum += int(binary_seq.count('1'))\n        # returning the sum \n        return sum\n    \n    # a function to find count of all binary sequences of length 2n \n    def binary_seq_count(n): \n        '''\n        Find the count of all binary sequences of length n such that \n        sum of first n bits is same as sum of last n bits. \n        '''\n        # the number of all binary sequences of length n such that sum of first n bits is same as sum of last n bits\n        count = 0\n        # a loop to compute the count of all binary sequences of length n \n        for i in range(2 ** n): \n            # extracting the sequence of length n \n            binary_seq = list(bin(i)[2:]) \n            # computing the sum of the sequence \n            sum = int(binary_seq.count('1'))\n            # if sum is equal to sum of last n bits \n            if sum == sum_binary_seq(n): \n                # incrementing the count by 1 \n                count += 1\n        # returning the count \n        return count\n    \n    # main function \n    def main(): \n        # getting the value of n \n        n = int(input(\"Enter the value of n: \"))\n        # printing the count of all binary sequences of length n \n        print(\"The count of all binary sequences of length\",n,\"such that sum of first\",n,\"bits is same as sum of last\",n,\"bits: \",binary_seq_count(n))\n    \n    # driver code \n    if __name__=='__main__': \n        main() \n",
        "num_ids": 291
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def helper(arr, n): \n        if n == 0: \n            return 1\n        if n == 1: \n            return 2\n        if (n >= 2): \n            return helper(arr, n-1) * (2**(n-1)) + helper(arr, n-2) * (2**(n-2)) \n        \n    ans = helper(arr, n) \n    return ans \n",
        "num_ids": 102
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seq(n,res,a):\n        if n == 0:\n            print(a,end=\" \")\n            res += a\n        else:\n            for i in range(0,2**n):\n                if i >> (n-1) == 1:\n                    count_seq(n-1,res,a+\"1\")\n                else:\n                    count_seq(n-1,res,a+\"0\")\n        return res\n",
        "num_ids": 109
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 2\n    if n==2:\n        return 4\n    if n==3:\n        return 6\n    if n==4:\n        return 8\n    if n==5:\n        return 10\n    if n==6:\n        return 12\n    if n==7:\n        return 14\n    if n==8:\n        return 16\n    if n==9:\n        return 18\n    if n==10:\n        return 20\n    if n==11:\n        return 22\n    if n==12:\n        return 24\n    if n==13:\n        return 26\n    if n==14:\n        return 28\n    if n==15:\n        return 30\n    if n==16:\n        return 32\n    if n==17:\n        return 34\n    if n==18:\n        return 36\n    if n==19:\n        return 38\n    if n==20:\n        return 40\n    if n==21:\n        return 42\n    if n==22:\n        return 44\n    if n==23:\n        return 46\n    if n==24:\n        return 48\n    if n==25:\n        return 50\n    if n==26:\n        return 52\n    if n==27:\n        return 54\n    if n==28:\n        return 56\n    if n==29:\n        return 58\n    if n==30:\n        return 60\n    if n==31:\n        return 62\n    if n==32:\n        return 64\n    if n==33:\n        return 66\n    if n==34:\n        return 68\n    if n==35:\n        return 70\n    if n==36:\n        return 72\n    if n==37:\n        return 74\n    if n==38:\n        return 76\n    if n==39:\n        return 78\n    if n==40:\n        return 80\n    if n==41:\n        return 82\n    if n==42:\n        return 84\n    if n==43:\n        return 86\n    if n==44:\n        return 88\n    if n==45:\n        return 90\n    if n==46:\n        return 92\n    if n==47:\n        return 94\n    if n==48:\n        return 96\n    if n==49:\n        return 98\n    if n==50:\n        return 100\n    if n==51:\n        return 102\n    if n==52:\n        return 104\n    if n==53:\n        return 106\n    if n==54:\n        return 108\n    if n==55:\n        return 110\n    if n==56:\n        return 112\n    if n==57:\n        return 114\n    if n==58:\n        return 116\n    if n==59:\n        return 118\n    if n==60:\n        return 120\n    if n==61:\n        return 122\n    if n==62:\n        return 124\n    if n==63:\n        return 126\n    if n==64:\n        return 128\n    if n==65:\n        return 130\n    if n==66:\n        return 132\n    if n==67:\n        return 134\n    if n==68:\n        return 136\n    if n==69:\n        return 138\n    if n==70:\n        return 140\n    if n==71:\n        return 142\n    if n==72:\n        return 144\n    if n==73:\n        return 146\n    if n==74:\n        return 148\n    if n==75:\n        return 150\n    if n==76:\n        return 152\n    if n==77:\n        return 154\n    if n==78:\n        return 156\n    if n==79:\n        return 158\n    if n==80:\n        return 160\n    if n==81:\n        return 162\n    if n==82:\n        return 164\n    if n==83:\n        return 166\n    if n==84:\n        return 168\n    if n==85:\n        return 170\n    if n==86:\n        return 172\n    if n==87:\n        return 174\n    if n==88:\n        return 176\n    if n==89:\n        return 178\n    if n==90:\n        return 180\n    if n==91:\n        return 182\n    if n==92:\n        return 184\n    if n==93:\n        return 186\n    if n==94:\n        return 188\n    if n==95:\n        return 190\n    if n==96:\n        return 192\n    if n==97:\n        return 194\n    if n==98:\n        return 196\n    if n==99:\n        return 198\n    if n==100:\n        return 200\n    if n==101:\n        return 202\n    if n==102:\n        return 204\n    if n==103:\n        return 206\n    if n==104:\n        return 208\n    if n==105:\n        return 210\n    if n==106:\n        return 212\n    if n==107:\n        return 214\n    if n==108:\n        return 216\n    if n==109:\n        return 218\n    if n==110:\n        return 220\n    if n==111:\n        return 222\n    if n==112:\n        return 224\n    if n==113:\n        return 226\n    if n==114:\n        return 228\n    if n==115:\n        return 230\n    if n==116:\n        return 232\n    if n==117:\n        return 234\n    if n==118:\n        return 236\n    if n==119:\n        return 238\n    if n==120:\n        return 240\n    if n==121:\n        return 242\n    if n==122:\n        return 244\n    if n==123:\n        return 246\n    if n==124:\n        return 248\n    if n==125:\n        return 250\n    if n==126:\n        return 252\n    if n==127:\n        return 254\n    if n==128:\n        return 256\n    if n==129:\n        return 258\n    if n==130:\n        return 260\n    if n==131:\n        return 262\n    if n==132:\n        return 264\n    if n==133:\n        return 266\n    if n==134:\n        return 268\n    if n==135:\n        return 270\n    if n==136:\n        return 272\n    if n==137:\n        return 274\n    if n==138:\n        return 276\n    if n==139:\n        return 278\n    if n==140:\n        return 280\n    if n==141:\n        return 282\n    if n==142:\n        return 284\n    if n==143:\n        return 286\n    if n==144:\n        return 288\n    if n==145:\n        return 290\n    if n==146:\n        return 292\n    if n==147:\n        return 294\n    if n==148:\n        return 296\n    if n==149:\n        return 298\n    if n==150:\n        return 300\n    if n==151:\n        return 302\n    if n==152:\n        return 304\n    if n==153:\n        return 306\n    if n==154:\n        return 308\n    if n==155:\n        return 310\n    if n==156:\n        return 312\n    if n==157:\n        return 314\n    if n==158:\n        return 316\n    if n==159:\n        return 318\n    if n==160:\n        return 320\n    if n==161:\n        return 322\n    if n==162:\n        return 324\n    if n==163:\n        return 326\n    if n==164:\n        return 328\n    if n==165:\n        return 330\n    if n==166:\n        return 332\n    if n==167:\n        return 334\n    if n==168:\n        return 336\n    if n==169:\n        return 338\n    if n==170:\n        return 340\n    if n==171:\n        return 342\n    if n==172:\n        return 344\n    if n==173:\n        return 346\n    if n==174:\n        return 348\n    if n==175:\n        return 350\n    if n==176:\n        return 352\n    if n==177:\n        return 354\n    if n==178:\n        return 356\n    if n==179:\n        return 358\n    if n==180:\n        return 360\n    if n==18",
        "num_ids": 1998
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(s): \n        if s <= 1: \n            return 0\n        elif (s & 1) == 0: \n            return count(s // 2) + count(s // 2) \n        else: \n            return count(s // 2) + count(s // 2) + 1\n    return count(n) \n",
        "num_ids": 83
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0 for i in range(n+1)] for j in range(n+1)] \n    for i in range(n+1): \n        for j in range(n+1): \n            if (i == 0): \n                dp[i][j] = 0\n            elif (j == 0): \n                dp[i][j] = 1\n            elif (i == 1): \n                if (j == 1): \n                    dp[i][j] = 2\n                else: \n                    dp[i][j] = 0\n            else: \n                if (i == j): \n                    dp[i][j] = 2\n                else: \n                    dp[i][j] = dp[i-1][j] + dp[i][j-1] \n    return dp[n][n] \n    \n'''\nGiven an array of size n, find the number of subarrays with sum equal to k.\n",
        "num_ids": 23
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def _count_binary_seq(n):\n        if n==1:\n            return 1\n        else:\n            count = 0\n            for i in range(1, n+1):\n                if (1<<i) & num > 0:\n                    count += _count_binary_seq(n-i)\n        return count\n",
        "num_ids": 79
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # n = 4\n    # 1,1,0,0\n    # 2,1,0,0\n    # 3,1,0,0\n    # 4,1,0,0\n    # 5,1,0,0\n    # 6,1,0,0\n    # 7,1,0,0\n    # 8,1,0,0\n    # 9,1,0,0\n    # 10,1,0,0\n    # 11,1,0,0\n    # 12,1,0,0\n    # 13,1,0,0\n    # 14,1,0,0\n    # 15,1,0,0\n    # 16,1,0,0\n    # 17,1,0,0\n    # 18,1,0,0\n    # 19,1,0,0\n    # 20,1,0,0\n    # 21,1,0,0\n    # 22,1,0,0\n    # 23,1,0,0\n    # 24,1,0,0\n    # 25,1,0,0\n    # 26,1,0,0\n    # 27,1,0,0\n    # 28,1,0,0\n    # 29,1,0,0\n    # 30,1,0,0\n    # 31,1,0,0\n    # 32,1,0,0\n    # 33,1,0,0\n    # 34,1,0,0\n    # 35,1,0,0\n    # 36,1,0,0\n    # 37,1,0,0\n    # 38,1,0,0\n    # 39,1,0,0\n    # 40,1,0,0\n    # 41,1,0,0\n    # 42,1,0,0\n    # 43,1,0,0\n    # 44,1,0,0\n    # 45,1,0,0\n    # 46,1,0,0\n    # 47,1,0,0\n    # 48,1,0,0\n    # 49,1,0,0\n    # 50,1,0,0\n    # 51,1,0,0\n    # 52,1,0,0\n    # 53,1,0,0\n    # 54,1,0,0\n    # 55,1,0,0\n    # 56,1,0,0\n    # 57,1,0,0\n    # 58,1,0,0\n    # 59,1,0,0\n    # 60,1,0,0\n    # 61,1,0,0\n    # 62,1,0,0\n    # 63,1,0,0\n    # 64,1,0,0\n    # 65,1,0,0\n    # 66,1,0,0\n    # 67,1,0,0\n    # 68,1,0,0\n    # 69,1,0,0\n    # 70,1,0,0\n    # 71,1,0,0\n    # 72,1,0,0\n    # 73,1,0,0\n    # 74,1,0,0\n    # 75,1,0,0\n    # 76,1,0,0\n    # 77,1,0,0\n    # 78,1,0,0\n    # 79,1,0,0\n    # 80,1,0,0\n    # 81,1,0,0\n    # 82,1,0,0\n    # 83,1,0,0\n    # 84,1,0,0\n    # 85,1,0,0\n    # 86,1,0,0\n    # 87,1,0,0\n    # 88,1,0,0\n    # 89,1,0,0\n    # 90,1,0,0\n    # 91,1,0,0\n    # 92,1,0,0\n    # 93,1,0,0\n    # 94,1,0,0\n    # 95,1,0,0\n    # 96,1,0,0\n    # 97,1,0,0\n    # 98,1,0,0\n    # 99,1,0,0\n    # 100,1,0,0\n    # 101,1,0,0\n    # 102,1,0,0\n    # 103,1,0,0\n    # 104,1,0,0\n    # 105,1,0,0\n    # 106,1,0,0\n    # 107,1,0,0\n    # 108,1,0,0\n    # 109,1,0,0\n    # 110,1,0,0\n    # 111,1,0,0\n    # 112,1,0,0\n    # 113,1,0,0\n    # 114,1,0,0\n    # 115,1,0,0\n    # 116,1,0,0\n    # 117,1,0,0\n    # 118,1,0,0\n    # 119,1,0,0\n    # 120,1,0,0\n    # 121,1,0,0\n    # 122,1,0,0\n    # 123,1,0,0\n    # 124,1,0,0\n    # 125,1,0,0\n    # 126,1,0,0\n    # 127,1,0,0\n    # 128,1,0,0\n    # 129,1,0,0\n    # 130,1,0,0\n    # 131,1,0,0\n    # 132,1,0,0\n    # 133,1,0,0\n    # 134,1,0,0\n    # 135,1,0,0\n    # 136,1,0,0\n    # 137,1,0,0\n    # 138,1,0,0\n    # 139,1,0,0\n    # 140,1,0,0\n    # 141,1,0,0\n    # 142,1,0,0\n    # 143,1,0,0\n    # 144,1,0,0\n    # 145,1,0,0\n    # 146,1,0,0\n    # 147,1,0,0\n    # 148,1,0,0\n    # 149,1,0,0\n    # 150,1,0,0\n    # 151,1,0,0\n    # 152,1,0,0\n    # 153,1,0,0\n    # 154,1,0,0\n    # 155,1,0,0\n    # 156,1,0,0\n    # 157,1,0,0\n    # 158,1,0,0\n    # 159,1,0,0\n    # 160,1,0,0\n    # 161,1,0,0\n    # 162,1,0,0\n    # 163,1,0,0\n    # 164,1,0,0\n    # 165,1,0,0\n    # 166,1,0,0\n    # 167,1,0,0\n    # 168,1,0,0\n    # 169,1,0,0\n    # 170,1,0,0\n    # 171,1,0,0\n    # 172,1,0,0\n    # 173,1,0,0\n    # 174,1,0,0\n    # 175,1,0,0\n    # 176,1,0,0\n    # 177,1,0,0\n    # 178,1,0,0\n    # 179,1,0,0\n    # 180,1,0,0\n    # 181,1,0,0\n    # 182,1,0,0\n    # 183,1,0,0\n    # 184,1,0,0\n    # 185,1,0,0\n    # 186,1,0,0\n    # 187,1,0,0\n    # 188,1,0,0\n    # 189,1,0,0\n    # 190,1,0,0\n    # 191,1,0,0\n    # 192,1,0,0\n    # 193,1,0,0\n    # 194,1,0,0\n    # 195,1,0,0\n    # 196,1,0,0\n    # 197,1,0,0\n    # 198,1,0,0\n    # 199,1,0,0",
        "num_ids": 1997
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #code here\n",
        "num_ids": 7
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            count += 1\n            count = max(count, dict_depth(v))\n        else:\n            count = max(count, 1)\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth=0\n    for key in d.keys():\n        if type(d[key])==dict:\n            depth=max(depth,1+dict_depth(d[key]))\n        else:\n            depth=max(depth,1)\n    return depth\n",
        "num_ids": 65
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(lambda x: 0 if x is None else 1 + dict_depth(x), d.values()))\n",
        "num_ids": 31
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        d = d.values()\n    return 1 + max([dict_depth(i) for i in d])\n",
        "num_ids": 38
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(dict_depth, d.values())) + 1\n",
        "num_ids": 20
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def helper(d, depth):\n        if not d: return depth\n        return max(helper(d.get(k), depth+1) for k in d)\n    \n    return helper(d, 1)\n",
        "num_ids": 53
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    def dict_depth_helper(d, depth):\n        nonlocal depth\n        if type(d) == dict:\n            depth += 1\n        for k, v in d.items():\n            depth = max(dict_depth_helper(v, depth), depth)\n        return depth\n",
        "num_ids": 75
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d=={}:\n        return 0\n    else:\n        depth=0\n        for k in d.keys():\n            if isinstance(d[k],dict):\n                depth=max(depth,dict_depth(d[k]))\n        return depth+1\n",
        "num_ids": 66
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Your code here\n    if d == {}:\n        return 0\n    return 1 + max([dict_depth(value) for value in d.values()])\n",
        "num_ids": 40
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Case 1: If element at index is present in arr\n    if arr[index] is not None:\n        return arr[index]\n    \n    #Case 2: If element at index is not present in arr\n    else:\n        if len(arr) == 1:\n            return None\n        if len(ranges) == 0 or len(rotations) == 0 :\n            return None\n        #Case 3: If both cases are false, then the element at index is not present in arr\n        if not(arr) :\n            return None\n        #Case 4: If the index is in between a range of rotations and the element is not present\n        if index >= ranges[0] and index <= ranges[1] :\n            if len(rotations) == 1:\n                return None\n            #Case 4.1: If the element is not present in the element at index's rotation\n            if rotations[0] == index:\n                return find_Element(arr,ranges,rotations[1:],index - rotations[0])\n            #Case 4.2: If the element is present at index's rotation\n            else:\n                return find_Element(arr,ranges,rotations[1:],index - rotations[0])\n",
        "num_ids": 284
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] >= ranges[index]:\n            if count < rotations:\n                count += 1\n            else:\n                return i\n    return -1\n",
        "num_ids": 57
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    while(index) :\n        index = index - ranges[r-1]\n        if(r-1!= 0) :\n            r = r - rotations[r-1]\n    return arr[r-1]\n",
        "num_ids": 55
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[(ranges[index]-rotations[index])%index]\n    \n",
        "num_ids": 23
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if index == arr[i] :\n            return i\n    for i in range(len(arr)) :\n        if (index - ranges) >= arr[i] :\n            return (i + rotations)\n    return -1\n    \ndef find_range_rotations(arr,rotations,index) :\n    '''\n    Write a python function to find the rotation required for element at a given index.\n    '''\n    for i in range(len(arr)) :\n        if index == arr[i] :\n            return i\n    for i in range(len(arr)) :\n        if (index + rotations) <= arr[i] :\n            return (i + rotations)\n    return -1\n",
        "num_ids": 69
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start <= end :\n        mid = (start+end) //2\n        if index == arr[mid] :\n            break\n        elif index < arr[mid] :\n            end = mid -1\n        else :\n            start = mid +1\n    if start < len(arr)-1 and index == arr[start+1]:\n        return start+1\n    if start == 0 and index == arr[start]:\n        return start\n    if start == len(arr)-1 and index == arr[start-1]:\n        return start-1\n    if index > arr[start] and index < arr[start+1]:\n        return start\n    if index > arr[start] and index < arr[end]:\n        return end\n    return start\n",
        "num_ids": 189
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    flag = 0\n    for i in range(ranges) :\n        if (arr[i] >= arr[index]) :\n            flag = 1\n            break\n    if (flag == 1) :\n        if (rotations[index] >= ranges) :\n            return -1\n        else :\n            return rotations[index] + find_Element(arr,ranges,rotations,index + 1)\n    else :\n        if (rotations[index] >= ranges) :\n            return -1\n        else :\n            return find_Element(arr,ranges,rotations,index + 1)\n",
        "num_ids": 141
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index in arr :\n        print(arr[index],rotations)\n    else :\n        if index < len(arr) :\n            for i in range(len(ranges)) :\n                if ranges[i] <= rotations and rotations <= ranges[i+1] :\n                    if index >= ranges[i] and index <= ranges[i+1] :\n                        arr[index] = arr[i]\n                        break\n                    else :\n                        rotations = rotations % (ranges[i+1]-ranges[i])\n                        arr[index] = arr[i]\n    return arr\n    \n",
        "num_ids": 143
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (rotations[index] == len(arr[index]) - 1) :\n        return arr[index][0]\n    \n    else :\n        ans = arr[index][int(rotations[index]) + 1]\n        return find_Element(arr,ranges,rotations,int(rotations[index]) + 1) + ans\n",
        "num_ids": 82
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = index % len(arr)\n    for i in range(0,len(ranges)):\n        if (ranges[i][0] <= arr[index] and arr[index] <= ranges[i][1] ) :\n            if (rotations[i] == 0):\n                return arr[index]\n            else :\n                if (index!= len(arr) - 1):\n                    index += 1\n                else :\n                    index = 0\n                    rotations[i] = rotations[i] - 1\n    \n",
        "num_ids": 125
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def start_with_p(words):\n        for i in words:\n            if i[0] == 'p':\n                return i\n    return start_with_p(words)\nprint(start_withp(['pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','b','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','sneeze','banner','p','pale','white','panda','plaid','rain','",
        "num_ids": 2009
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile('^p')\n    for word in words:\n        if re.match(p, word):\n            print(word)\nstart_withp(['pam', 'peter', 'paul'])\ndef multiple_replace(string, old, new):\n    '''\n    Write a function to replace all occurrences of old in the string with new.\n    '''\n    pattern = re.compile(old)\n    new_string = pattern.sub(new, string)\n    return new_string\nprint(multiple_replace('Hi John, how are you doing?', 'John', 'Mike'))\ndef test(words, letter):\n    '''\n    Write a function that takes a string and a letter, and returns the number of times the letter appears in the string.\n    '''\n    count = 0\n    for word in words:\n        if letter == word:\n            count += 1\n    return count\nprint(test('The quick brown fox jumps over the lazy dog', 'a'))\ndef check_prime(num):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if num >= 2:\n        if num == 2:\n            return True\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(num):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if num >= 2:\n        if num == 2:\n            return True\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n            return True\n    else:\n        return False\nprint(is_prime(2))\ndef check_prime(num):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if num >= 2:\n        if num == 2:\n            return True\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(num):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if num >= 2:\n        if num == 2:\n            return True\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef make_abs(num):\n    '''\n    Write a function that takes a number and returns the absolute value.\n    '''\n    return abs(num)\ndef make_abs(num):\n    '''\n    Write a function that takes a number and returns the absolute value.\n    '''\n    if num >= 0:\n        return num\n    else:\n        return -num\ndef factorial(n):\n    '''\n    Write a function that computes the factorial of a number.\n    '''\n    total = 1\n    for i in range(1, n + 1):\n        total = total * i\n    return total\ndef factorial(n):\n    '''\n    Write a function that computes the factorial of a number.\n    '''\n    if n < 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime.\n    '''\n    if n >= 2:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    else",
        "num_ids": 54
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for i in range(len(words)):\n        if words[i].startswith('p'):\n            p.append(words[i])\n    return p\n",
        "num_ids": 47
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith(\"p\"):\n            return word\n    return \"p\"\n",
        "num_ids": 31
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split()\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i],words[i+1]\n",
        "num_ids": 48
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            p_words.append(words[i])\n    print(p_words)\n    return p_words\nstart_withp(['python', 'pythoner', 'pythoned', 'pythonly', 'pythonic', 'pythons', 'jython'])\n",
        "num_ids": 95
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i].startswith('p'):\n            return words[i]\n    return None\n",
        "num_ids": 41
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, word[1:]\n",
        "num_ids": 30
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0].lower()=='p':\n            return word, word\n    return '','','','','','','','','','',''\ndef add_letter(word,letter):\n    '''\n    Write a function that adds a letter to a word if it is not already at the end of the word.\n    '''\n    word=word+letter\n    return word\ndef letter_in_word(word,letter):\n    '''\n    Write a function that checks if a letter is in a word.\n    '''\n    if letter in word:\n        return True\n    return False\ndef replace_letter(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in a word.\n    '''\n    word=word.replace(letter,new_letter)\n    return word\ndef end_withq(word):\n    '''\n    Write a function that returns the last word of a word that ends with 'q'\n    '''\n    if word[-1].lower()=='q':\n        return word\n    return ''\ndef end_with(word):\n    '''\n    Write a function that returns the last word of a word that ends with letter 'a', 'e', 'i', 'o', or 'u'.\n    '''\n    for letter in word[-1:]:\n        if letter.lower() in 'aeiou':\n            return word\n    return ''\ndef add_letter_any(word):\n    '''\n    Write a function that adds a letter to a word in any position.\n    '''\n    word=word[0]+word[1]+word[2]+word[3]+word[4]+word[5]+word[6]+word[7]+word[8]+word[9]\n    return word\ndef add_letter_last(word):\n    '''\n    Write a function that adds a letter to the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for letter in word[-2:]:\n        if letter.lower() not in 'aeiou':\n            word=word[0]+word[1]+word[2]+word[3]+word[4]+word[5]+word[6]+word[7]+word[8]+word[9]\n            return word\n    return ''\ndef is_word_end(word):\n    '''\n    Write a function that returns True if the last word of a word is an end word.\n    '''\n    return end_withq(word) or end_with(word)\ndef add_letter_middle(word):\n    '''\n    Write a function that adds a letter to the middle of a word, only if the letter is not already at the end of the word.\n    '''\n    if word[-3].lower() not in 'aeiou':\n        word=word[0:8]+word[9]\n    else:\n        word=word\n    return word\ndef replace_letter_any(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in a word in any position.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_last(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef add_letter_start(word):\n    '''\n    Write a function that adds a letter to the start of a word, only if the letter is not already at the end of the word.\n    '''\n    if word[0].lower() not in 'aeiou':\n        word=word[1:]+word[0]\n    return word\ndef add_letter_any_start(word):\n    '''\n    Write a function that adds a letter to the start of a word, in any position.\n    '''\n    word=word[1:]+word[0]\n    return word\ndef replace_letter_any_start(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start of a word, in any position.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[1:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_last_start(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[1:i]+new_letter+word[i+1:]\n    return word\ndef last_letter(word):\n    '''\n    Write a function that returns the last letter of a word.\n    '''\n    return word[-1]\ndef replace_letter_any_start_last(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[1:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_end_last(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_any_start_end(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start and end of a word, in any position.\n    '''\n    word=word[1:len(word)-1]+new_letter+word[len(word)-1]\n    return word\ndef replace_letter_any_start_end_middle(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start and end of a word, in any position.\n    '''\n    word=word[1:len(word)-1]+new_letter+word[len(word)-1]\n    return word\ndef replace_letter_any_end(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_any_end_middle(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_any_end_middle_start(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[",
        "num_ids": 45
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n-1:\n        return a[index]\n",
        "num_ids": 18
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #Initializing the values\n    max_sum = 0\n    max_subseq = 0\n    curr_sum = 0\n    \n    #Initializing the starting and ending values\n    start = 0\n    end = 0\n    \n    #Sorting the array in ascending order\n    a = sorted(a)\n    \n    #Computing the starting and ending values\n    for i in range(len(a)):\n        curr_sum += a[i]\n        if(curr_sum > max_sum):\n            max_sum = curr_sum\n            start = i\n            end = i\n        \n        #Checking if curr_sum exceeds max_sum and curr_sum is less than k\n        if curr_sum < k and curr_sum > max_sum:\n            if curr_sum - a[i] > max_sum:\n                max_sum = curr_sum - a[i]\n                start = i\n                end = i\n            \n    return max_sum, start, end\n",
        "num_ids": 240
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = float('-inf')\n    if index == n:\n        return max_sum\n    if k == 0:\n        return a[index]\n    for i in range(index, n):\n        if a[i] > a[index]:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k))\n        else:\n            max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k - 1))\n    return max_sum\n",
        "num_ids": 142
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # print(index,k)\n    if index == n:\n        return 0\n    if k == index:\n        return a[k]\n    ans = max_sum_increasing_subseq(a, n, index + 1, k)\n    if a[index] <= k:\n        ans = max(ans, max_sum_increasing_subseq(a, n, index + 1, k - a[index]) + a[index])\n    return ans\n",
        "num_ids": 109
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    count = 0\n    max_sum = float('-inf')\n    sum_array = list()\n    for i in range(n):\n        count += a[i]\n        sum_array.append(count)\n    for i in range(index, n):\n        count -= a[i-index]\n        count += a[i]\n        sum_array[i] = max(count, sum_array[i])\n        if count >= k:\n            max_sum = max(max_sum, sum_array[i])\n    print(max_sum)\n",
        "num_ids": 134
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    '''\n    Given an array, find the maximum sum of subarray of size k\n    algorithm:\n    '''\n    result = float('-inf')\n    sum = 0\n    #start with the first element and find the max sum subarray of size k\n    for i in range(index, -1, -1):\n        sum = sum + a[i]\n        if sum == k:\n            result = max(result, sum)\n    #start with the second element and find the max sum subarray of size k\n    sum = 0\n    for i in range(index + 1, n):\n        sum = sum + a[i]\n        if sum == k:\n            result = max(result, sum)\n    return result\n",
        "num_ids": 143
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum_curr = 0\n    max_sum_so_far = 0\n    sum_list = []\n    for i in range(n):\n        sum_list.append(max_sum_curr)\n        max_sum_curr = max(max_sum_curr + a[i], 0)\n        max_sum_curr = max(max_sum_curr, sum_list[i - 1] + a[i])\n        max_sum_so_far = max(max_sum_curr, max_sum_so_far)\n    \n    return max_sum_so_far\n",
        "num_ids": 148
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    res = float('-inf')\n    if index < n:\n        if a[index] <= k:\n            res = max(res, a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n        else:\n            res = max(res, max_sum_increasing_subseq(a, n, index+1, k))\n    return res\n",
        "num_ids": 95
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = []\n    index_to_pos = {}\n    for i in range(n):\n        index_to_pos[i] = len(dp)\n        dp.append(a[i])\n    for i in range(1, n):\n        for j in range(index_to_pos[i-1]):\n            if dp[j] < a[i]:\n                dp[j+1] = dp[j] + a[i]\n                index_to_pos[i] = j + 1\n    l = len(dp)\n    dp = dp[:k]\n    print(dp)\n    print(index_to_pos)\n    return dp[l-1]\n",
        "num_ids": 169
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # b[i][j] = max of a[i], a[i], a[i+1], a[i+2],..., a[j]\n    # b[i][j] = max of the following sequence\n    # b[i][j] = a[i] + b[i+1][j] + b[i+2][j] +... + b[i][j-1]\n    \n    # Make a 2D array of size n*n. Initialize all the elements as 0\n    # Make a 2D array of size n*n. Initialize all the elements as 0\n    \n    b = [[0 for i in range(n)] for j in range(n)]\n    \n    # Build the first row and column of the 2D array b\n    for i in range(n):\n        b[i][i] = a[i]\n    \n    # Fill rest of the 2D array\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            b[i][j] = max(a[i]+b[i+1][j], a[j]+b[i][j-1])\n            \n    # Get the maximum element from the matrix b\n    return max(b[0])\n",
        "num_ids": 304
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = m + n\n    res = tuple(m)\n    for i in range(len(tuplex)):\n        res = res + (tuplex[i],)\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex.insert(0,(m,n))\n    return tuplex\n",
        "num_ids": 23
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[i][m] if i % 2 == 0 else tuplex[i][n] for i in range(len(tuplex))])\ndef f1(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the squares of the first n natural numbers.\n    '''\n    return sum([n**2 for n in range(n)])\ndef f2(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**3 for n in range(n)])\ndef f3(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**4 for n in range(n)])\ndef f4(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**5 for n in range(n)])\ndef f5(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**6 for n in range(n)])\ndef f6(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**7 for n in range(n)])\ndef f7(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**8 for n in range(n)])\ndef f8(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**9 for n in range(n)])\ndef f9(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**10 for n in range(n)])\ndef f10(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**11 for n in range(n)])\ndef f11(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**12 for n in range(n)])\ndef f12(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**13 for n in range(n)])\ndef f13(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**14 for n in range(n)])\ndef f14(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**15 for n in range(n)])\ndef f15(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**16 for n in range(n)])\ndef f16(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**17 for n in range(n)])\ndef f17(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**18 for n in range(n)])\ndef f18(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**19 for n in range(n)])\ndef f19(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**20 for n in range(n)])\ndef f20(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**21 for n in range(n)])\ndef f21(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**22 for n in range(n)])\ndef f22(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**23 for n in range(n)])\ndef f23(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**24 for n in range(n)])\ndef f24(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**25 for n in range(n)])\ndef f25(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**26 for n in range(n)])\ndef f26(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**27 for n in range(n)])\ndef f27(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**28 for n in range(n)])\ndef f28(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**29 for n in range(n)])\ndef f29(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**30 for n in range(n)])\ndef f30(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**31 for n in range(n)])\ndef f31(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**32 for n in range(n)])\ndef f32(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**33 for n in range(n)])\ndef f33(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**34 for n in range(n)])\ndef f34(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**35 for n in range(n)])\ndef f35(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**36 for n in range(n)])\ndef f36(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple((m*i,n*i) for i in range(1,m))\n",
        "num_ids": 24
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #tuplex = input('Enter the tuple of the list to get a colon of :')\n    colon = (0,0)\n    i = 0\n    j = 1\n    for x in tuplex:\n        if j%2 == 0:\n            colon = (colon[0]+x[i],colon[1])\n        else:\n            colon = (colon[0],colon[1]+x[j])\n        j += 1\n    #print(tuplex,m,n)\n    print(colon)\n",
        "num_ids": 131
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m<0 or n<0:\n        raise IndexError\n    else:\n        return tuplex[m:n]\n",
        "num_ids": 33
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[0]*m,tuplex[1]*n)\n",
        "num_ids": 24
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ''\n    # Write your code here\n    for i in range(m):\n        colon += tuplex[i] + \":\"\n    return colon[:-1]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ''\n    # Write your code here\n    for i in range(m):\n        colon += str(tuplex[i]) + \":\"\n    return colon[:-1]\ndef colon_list(lst,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    colon = []\n    for i in range(len(lst)):\n        colon.append(str(lst[i])+\":\")\n    colon = colon[:-1]\n    return colon\ndef colon_dict(dic,m,n):\n    '''\n    Write a function to get a colon of a dict.\n    '''\n    colon = {}\n    for i in range(len(dic)):\n        colon[str(i)] = dic[str(i)]\n    colon = colon.items()\n    colon = colon[:-1]\n    return colon\ndef colon_dic_keys(dic,m,n):\n    '''\n    Write a function to get a colon of a dict.\n    '''\n    colon = {}\n    for i in range(len(dic)):\n        colon[str(i)] = dic[str(i)]\n    colon = colon.keys()\n    return colon\ndef colon_dic_values(dic,m,n):\n    '''\n    Write a function to get a colon of a dict.\n    '''\n    colon = {}\n    for i in range(len(dic)):\n        colon[str(i)] = dic[str(i)]\n    colon = colon.values()\n    return colon\ndef colon_dic_items(dic,m,n):\n    '''\n    Write a function to get a colon of a dict.\n    '''\n    colon = {}\n    for i in range(len(dic)):\n        colon[str(i)] = dic[str(i)]\n    colon = colon.items()\n    return colon\ndef colon_frozen_dic(dic,m,n):\n    '''\n    Write a function to get a colon of a dict.\n    '''\n    colon = {}\n    for i in range(len(dic)):\n        colon[str(i)] = dic[str(i)]\n    colon = tuple(colon.items())\n    return colon\ndef colon_str_1(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += str(s[i]) + \":\"\n    return colon[:-1]\ndef colon_str_2(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += str(s[i]) + \":\"\n    return colon[:-1]\ndef colon_str_3(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += str(s[i])\n    return colon[:-1]\ndef colon_str_4(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += str(s[i])\n    return colon[:-1]\ndef colon_str_5(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon[:-1]\ndef colon_str_6(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_7(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_8(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_9(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_10(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_11(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_12(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_13(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_14(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_15(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_16(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_17(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_18(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_19(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_20(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n    return colon\ndef colon_str_21(s,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    colon = ''\n    for i in range(m):\n        colon += s[i]\n",
        "num_ids": 26
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return m*' '+tuplex[0]+n*' '+m*' '+tuplex[1]+n*' '+m*' '+tuplex[2]\ndef space_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    return m*' '+tuplex[0]+n*' '+m*' '+tuplex[1]+n*' '+m*' '+tuplex[2]\ndef get_col_tuplex(tuplex,n,m):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>n:\n        for i in range(m-n):\n            tuplex.pop(0)\n    else:\n        for i in range(n-m):\n            tuplex.pop(0)\n    return tuplex\ndef get_col(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return m*' '+tuplex[0]+n*' '+m*' '+tuplex[1]+n*' '+m*' '+tuplex[2]\ndef get_spa_tuplex(tuplex,n,m):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    if m>n:\n        for i in range(m-n):\n            tuplex.pop(0)\n    else:\n        for i in range(n-m):\n            tuplex.pop(0)\n    return tuplex\ndef get_spa(tuplex,n,m):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    return m*' '+tuplex[0]+n*' '+m*' '+tuplex[1]+n*' '+m*' '+tuplex[2]\ndef get_all_colon(tuplex,n,m):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    for i in range(n-m):\n        tuplex.pop(0)\n    return tuplex\ndef get_all_spa(tuplex,n,m):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex.pop(0)\n    return tuplex\ndef print_tuplex(tuplex,m,n):\n    for i in range(m):\n        print(tuplex[i],end='')\n        if i==m-1:\n            print(n*' ')\ndef n_dict(dic,n):\n    '''\n    Write a function to remove the nth last element of a dictionary.\n    '''\n    dic.pop(n)\n    return dic\ndef tuplex_key(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=get_col_tuplex(tuplex,m,n)\n    return tuplex\ndef tuplex_spa(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    tuplex=get_spa_tuplex(tuplex,m,n)\n    return tuplex\ndef tuplex_all_colon(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    tuplex=get_all_colon(tuplex,m,n)\n    return tuplex\ndef tuplex_all_spa(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    tuplex=get_all_spa(tuplex,m,n)\n    return tuplex\ndef tuplex_all_colon_spa(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    tuplex=get_all_colon(tuplex,m,n)\n    tuplex=get_all_spa(tuplex,m,n)\n    return tuplex\ndef tuplex_index(tuplex,i):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if i>len(tuplex)-1:\n        return 'Invalid Index'\n    else:\n        return tuplex[i]\ndef tuplex_index_spa(tuplex,i):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    if i>len(tuplex)-1:\n        return 'Invalid Index'\n    else:\n        return tuplex[i]\ndef tuplex_index_all_colon(tuplex,i):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    if i>len(tuplex)-1:\n        return 'Invalid Index'\n    else:\n        return tuplex[i]\ndef tuplex_index_all_spa(tuplex,i):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    if i>len(tuplex)-1:\n        return 'Invalid Index'\n    else:\n        return tuplex[i]\ndef tuplex_index_all_colon_spa(tuplex,i):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    if i>len(tuplex)-1:\n        return 'Invalid Index'\n    else:\n        return tuplex[i]\ndef tuplex_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>n:\n        for i in range(m-n):\n            tuplex.pop(0)\n    else:\n        for i in range(n-m):\n            tuplex.pop(0)\n    return tuplex\ndef tuplex_tuplex_spa(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    if m>n:\n        for i in range(m-n):\n            tuplex.pop(0)\n    else:\n        for i in range(n-m):\n            tuplex.pop(0)\n    return tuplex\ndef tuplex_tuplex_all_colon(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex.pop(0)\n    return tuplex\ndef tuplex_tuplex_all_spa(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex.pop(0)\n    return tuplex\ndef tuplex_tuplex_all_colon_spa(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex.pop(0)\n    return tuplex\ndef tuplex_tuplex_all_spa_spa(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex.pop(0)\n    return tuplex\ndef tuplex_tuplex_all_spa_all_colon_spa(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex.pop(0)",
        "num_ids": 22
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m],tuplex[m:n+1],tuplex[n+1:]\ndef print_colon(tuplex):\n    '''\n    Write a function that prints the values inside the tuple.\n    '''\n    m,n,l = colon_tuplex(tuplex,0,2)\n    print(m,n,l)\ndef twod_list(tuplex,m,n):\n    '''\n    Write a function that prints the values inside the list.\n    '''\n    l = tuplex[m:n]\n    print(l)\ndef print_twod_list(tuplex,m,n):\n    '''\n    Write a function that prints the values inside the list.\n    '''\n    twod_list(tuplex,m,n)\ndef add_element(tuplex,element,i):\n    '''\n    Write a function that adds a new element to a tuple at a given index.\n    '''\n    tuplex = tuplex[0:i] + (element,) + tuplex[i:]\n    return tuplex\ndef print_add_element(tuplex,element,i):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(add_element(tuplex,element,i))\ndef get_element(tuplex,i):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    return tuplex[i]\ndef print_get_element(tuplex,i):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(get_element(tuplex,i))\ndef rename_element(tuplex,i,element):\n    '''\n    Write a function that renames an element in a tuple.\n    '''\n    tuplex = tuplex[0:i] + (element,) + tuplex[i+1:]\n    return tuplex\ndef print_rename_element(tuplex,i,element):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(rename_element(tuplex,i,element))\ndef swap_element(tuplex,i1,i2):\n    '''\n    Write a function that swaps two elements in a tuple.\n    '''\n    tuplex = tuplex[0:i1] + tuplex[i2] + tuplex[i1+1:i2] + tuplex[i1] + tuplex[i2+1:]\n    return tuplex\ndef print_swap_element(tuplex,i1,i2):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(swap_element(tuplex,i1,i2))\ndef remove_element(tuplex,i):\n    '''\n    Write a function that removes an element from a tuple.\n    '''\n    tuplex = tuplex[0:i] + tuplex[i+1:]\n    return tuplex\ndef print_remove_element(tuplex,i):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(remove_element(tuplex,i))\ndef update_element(tuplex,i,element):\n    '''\n    Write a function that updates an element in a tuple.\n    '''\n    tuplex = tuplex[0:i] + (element,) + tuplex[i+1:]\n    return tuplex\ndef print_update_element(tuplex,i,element):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(update_element(tuplex,i,element))\ndef move_element(tuplex,i,j):\n    '''\n    Write a function that moves an element from a tuple to another position.\n    '''\n    tuplex = tuplex[0:i] + tuplex[j] + tuplex[i+1:j] + tuplex[i] + tuplex[j+1:]\n    return tuplex\ndef print_move_element(tuplex,i,j):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(move_element(tuplex,i,j))\ndef rotate_list(tuplex,n):\n    '''\n    Write a function that rotates a list n times.\n    '''\n    print(tuplex)\n    tuplex = tuplex[n:] + tuplex[0:n]\n    print(tuplex)\ndef print_rotate_list(tuplex,n):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    rotate_list(tuplex,n)\ndef flip_element(tuplex,i):\n    '''\n    Write a function that flips an element in a tuple.\n    '''\n    tuplex = tuplex[0:i] + tuplex[i+1:] + tuplex[0:i]\n    return tuplex\ndef print_flip_element(tuplex,i):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(flip_element(tuplex,i))\ndef add_and_move_element(tuplex,element,i):\n    '''\n    Write a function that adds an element to a tuple and moves it to another position.\n    '''\n    tuplex = tuplex[0:i] + (element,) + tuplex[i+1:]\n    return tuplex\ndef print_add_and_move_element(tuplex,element,i):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(add_and_move_element(tuplex,element,i))\ndef swap_element_if_sorted(tuplex):\n    '''\n    Write a function that compares two elements in a tuple. If they are not sorted in ascending order, swap them in the tuple.\n    '''\n    a = tuplex[0]\n    for i in range(len(tuplex)-1):\n        if a < tuplex[i+1]:\n            tuplex = tuplex[0:i] + (tuplex[i+1],) + tuplex[i:]\n            break\n        else:\n            a = tuplex[i+1]\n    return tuplex\ndef print_swap_if_sorted(tuplex):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(swap_element_if_sorted(tuplex))\ndef copy_tuplex(tuplex):\n    '''\n    Write a function that copies a tuple.\n    '''\n    tuplex1 = tuplex[:]\n    return tuplex1\ndef print_copy_tuplex(tuplex):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(copy_tuplex(tuplex))\ndef find_min(tuplex,i):\n    '''\n    Write a function that finds the smallest element in a tuple.\n    '''\n    a = tuplex[i]\n    for i in range(len(tuplex)-1):\n        if a < tuplex[i+1]:\n            a = tuplex[i+1]\n    return a\ndef print_find_min(tuplex,i):\n    '''\n    Write a function that prints the tuple with a new element at a given index.\n    '''\n    print(find_min(tuplex,i))\ndef find_max(tuplex,i):\n    '''\n    Write a function that finds the largest element in a tuple.\n    '''\n    a = tuplex[i]\n    for ",
        "num_ids": 15
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    min_p = -1\n    max_p = float(\"inf\")\n    for i in range(N):\n        max_p = max(max_p, nums1[i]*nums2[i])\n        min_p = min(min_p, nums1[i]*nums2[i])\n    print(max_p, min_p)\n    # return (max_p, min_p)\n",
        "num_ids": 104
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n",
        "num_ids": 18
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def factorize(n):\n        arr = []\n        while n!= 1:\n            r = n % 10\n            if r not in arr:\n                arr.append(r)\n            n //= 10\n        return arr\n    def product(arr1, arr2):\n        return (arr1[0] * arr2[0]) + (arr1[1] * arr2[1])\n    arr1 = factorize(nums1[-1])\n    arr2 = factorize(nums2[-1])\n    ans = float(\"-inf\")\n    for i in range(N-1, -1, -1):\n        ans = product(arr1, arr2)\n        if ans > N:\n            break\n        arr1 = factorize(nums1[i])\n        arr2 = factorize(nums2[i])\n    return ans\nprint(large_product([2,3,4], [1,3,4], 4))\nprint(large_product([2,3,4], [1,3,4], 5))\nprint(large_product([2,3,4], [1,3,4], 6))\nprint(large_product([2,3,4], [1,3,4], 7))\nprint(large_product([2,3,4], [1,3,4], 8))\nprint(large_product([1,2,3], [4,5,6], 2))\nprint(large_product([1,2,3], [4,5,6], 3))\nprint(large_product([1,2,3], [4,5,6], 4))\nprint(large_product([1,2,3], [4,5,6], 5))\nprint(large_product([1,2,3], [4,5,6], 6))\nprint(large_product([1,2,3], [4,5,6], 7))\nprint(large_product([1,2,3], [4,5,6], 8))\nprint(large_product([1,2,3,4], [5,6,7,8], 5))\nprint(large_product([1,2,3,4], [5,6,7,8], 6))\nprint(large_product([1,2,3,4], [5,6,7,8], 7))\nprint(large_product([1,2,3,4], [5,6,7,8], 8))\nprint(large_product([1,2,3,4], [5,6,7,8], 9))\nprint(large_product([1,2,3,4], [5,6,7,8], 10))\nprint(large_product([1,2,3,4], [5,6,7,8], 11))\nprint(large_product([1,2,3,4], [5,6,7,8], 12))\nprint(large_product([1,2,3,4], [5,6,7,8], 13))\nprint(large_product([1,2,3,4], [5,6,7,8], 14))\nprint(large_product([1,2,3,4], [5,6,7,8], 15))\nprint(large_product([1,2,3,4], [5,6,7,8], 16))\nprint(large_product([1,2,3,4], [5,6,7,8], 17))\nprint(large_product([1,2,3,4], [5,6,7,8], 18))\nprint(large_product([1,2,3,4], [5,6,7,8], 19))\nprint(large_product([1,2,3,4], [5,6,7,8], 20))\nprint(large_product([1,2,3,4], [5,6,7,8], 21))\nprint(large_product([1,2,3,4], [5,6,7,8], 22))\nprint(large_product([1,2,3,4], [5,6,7,8], 23))\nprint(large_product([1,2,3,4], [5,6,7,8], 24))\nprint(large_product([1,2,3,4], [5,6,7,8], 25))\nprint(large_product([1,2,3,4], [5,6,7,8], 26))\nprint(large_product([1,2,3,4], [5,6,7,8], 27))\nprint(large_product([1,2,3,4], [5,6,7,8], 28))\nprint(large_product([1,2,3,4], [5,6,7,8], 29))\nprint(large_product([1,2,3,4], [5,6,7,8], 30))\nprint(large_product([1,2,3,4], [5,6,7,8], 31))\nprint(large_product([1,2,3,4], [5,6,7,8], 32))\nprint(large_product([1,2,3,4], [5,6,7,8], 33))\nprint(large_product([1,2,3,4], [5,6,7,8], 34))\nprint(large_product([1,2,3,4], [5,6,7,8], 35))\nprint(large_product([1,2,3,4], [5,6,7,8], 36))\nprint(large_product([1,2,3,4], [5,6,7,8], 37))\nprint(large_product([1,2,3,4], [5,6,7,8], 38))\nprint(large_product([1,2,3,4], [5,6,7,8], 39))\nprint(large_product([1,2,3,4], [5,6,7,8], 40))\nprint(large_product([1,2,3,4], [5,6,7,8], 41))\nprint(large_product([1,2,3,4], [5,6,7,8], 42))\nprint(large_product([1,2,3,4], [5,6,7,8], 43))\nprint(large_product([1,2,3,4], [5,6,7,8], 44))\nprint(large_product([1,2,3,4], [5,6,7,8], 45))\nprint(large_product([1,2,3,4], [5,6,7,8], 46))\nprint(large_product([1,2,3,4], [5,6,7,8], 47))\nprint(large_product([1,2,3,4], [5,6,7,8], 48))\nprint(large_product([1,2,3,4], [5,6,7,8], 49))\nprint(large_product([1,2,3,4], [5,6,7,8], 50))\nprint(large_product([1,2,3,4], [5,6,7,8], 51))\nprint(large_product([1,2,3,4], [5,6,7,8], 52))\nprint(large_product([1,2,3,4], [5,6,7,8], 53))\nprint(large_product([1,2,3,4], [5,6,7,8], 54))\nprint(large_product([1,2,3,4], [5,6,7,8], 55))\nprint(large_product([1,2,3,4], [5,6,7,8], 56))\nprint(large_product([1,2,3,4], [5,6,7,8], 57))\nprint(large_product([1,2,3,4], [5,6,7,8], 58))\nprint(large_product([1,2,3,4], [5,6,7,8], 59))\nprint(large_product([1,2,3,4], [5,6,7,8], 60))\nprint(large_product([1,2,3,4], [5,6,7,8], 61))\nprint(large_product([1,2,3,4], [5,6,7,8], 62))\nprint(large_product([1,2,3,4], [5,6,7,8], 63)",
        "num_ids": 2002
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    Find the largest of the two lists.\n    \n    Args:\n        nums1 (list): a list of integers\n        nums2 (list): a list of integers\n        N (int): the number of largest integers to find\n    \n    Returns:\n        list: A list of N integers representing the largest integers in the lists\n    '''\n    def find_largest(nums1, nums2, N):\n        largest = max(nums1[:N], nums2[:N])\n        return largest\n",
        "num_ids": 43
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # build product lists\n    if N > len(nums1):\n        N = len(nums1)\n    if N > len(nums2):\n        N = len(nums2)\n    \n    prods = []\n    \n    for i in range(N):\n        prod1 = nums1[i]\n        prod2 = nums2[i]\n        prods.append(prod1 * prod2)\n    \n    return sorted(prods, reverse=True)[:N]\n",
        "num_ids": 126
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product1 = nums1[:]\n    product2 = nums2[:]\n",
        "num_ids": 22
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) * len(nums2):\n        return -1\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] < nums2[j]:\n                product = nums1[i] * nums2[j]\n            else:\n                product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 140
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #https://www.hackerrank.com/challenges/maximum-product/problem\n    #precondition: len(nums1) == len(nums2)\n    #postcondition: return products in descending order\n    if(len(nums1) > len(nums2)):\n        tmp = nums1\n        nums1 = nums2\n        nums2 = tmp\n    if(len(nums1) == 0):\n        return []\n    ret_list = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            ret_list.append(nums1[i] * nums2[j])\n    return sorted(ret_list, reverse=True)\n",
        "num_ids": 180
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    res = float('-inf')\n    i, j = 0, 0\n    while i < N and j < N:\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            curr = nums1[i] * nums2[j]\n            if curr > res:\n                res = curr\n            i += 1\n            j += 1\n    return res\n",
        "num_ids": 140
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #sort the two lists\n    nums1.sort()\n    nums2.sort()\n    #set two pointers to the beginning and end of the two lists\n    i = 0\n    j = 0\n    product = 1\n    #while we don't have a product larger than the one we're looking for\n    while i < N and j < N:\n        if nums1[i] * nums2[j] > product:\n            product = nums1[i] * nums2[j]\n        if nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return product\n",
        "num_ids": 154
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b",
        "num_ids": 11
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nprint(maximum(2,7))\n",
        "num_ids": 30
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (a + b) / 2\ndef binary_search(a,start,end,value):\n    '''\n    Write a python function to find the index of the first occurence of a value in an array.\n    '''\n    if start > end:\n        return -1\n    mid = (start + end) // 2\n    if a[mid] == value:\n        return mid\n    elif a[mid] > value:\n        return binary_search(a,start,mid - 1,value)\n    else:\n        return binary_search(a,mid + 1,end,value)\ndef rotate(a,n):\n    '''\n    Write a python function to rotate an array by n steps.\n    '''\n    temp = a[n:]\n    for i in range(n):\n        temp = a[:i] + a[i+1:]\n        a = temp\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor(GCD) of two numbers.\n    '''\n    if a < b:\n        a,b = b,a\n    while a % b!= 0:\n        a,b = b,a%b\n    return b\ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return s == s[::-1]\ndef prime_factor(n):\n    '''\n    Write a python function to print the prime factors of the given number.\n    '''\n    while n % 2 == 0:\n        print(2)\n        n = n // 2\n    for i in range(3,int(n**0.5)+1,2):\n        while n % i == 0:\n            print(i)\n            n = n // i\ndef count_primes(n):\n    '''\n    Write a python function to count the number of prime numbers in an interval.\n    '''\n    s = []\n    for i in range(n+1):\n        if i == 0 or i == 1:\n            s.append(i)\n        else:\n            s.append(0)\n            for j in range(2,i):\n                if i % j == 0:\n                    s[i] += 1\n    return s\ndef vowel_count(s):\n    '''\n    Write a python function to count the number of vowel characters in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\ndef vowel_count_2(s):\n    '''\n    Write a python function to count the number of vowel characters in a string.\n    '''\n    count = 0\n    for i in s:\n        if i in ['a','e','i','o','u']:\n            count += 1\n    return count\ndef count_trees(n,m,a,b):\n    '''\n    Write a python function to count the number of trees in a forest given the value of x and y.\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if (i * x + j) % b == 0:\n                ans += 1\n    return ans\ndef is_unique(s):\n    '''\n    Write a python function to check whether the given string is unique or not.\n    '''\n    d = {}\n    for i in s:\n        if i in d:\n            return False\n        else:\n            d[i] = 1\n    return True\ndef is_unique_2(s):\n    '''\n    Write a python function to check whether the given string is unique or not.\n    '''\n    s = sorted(s)\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_unique_3(s):\n    '''\n    Write a python function to check whether the given string is unique or not.\n    '''\n    s = sorted(s)\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            return False\n    return True\ndef is_prime_2(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_3(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_4(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_5(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\ndef minimum_distance(x,y,v,m):\n    '''\n    Write a python function to compute the minimum distance between the points of a set of \n    points that are given in the form of a 2D coordinates matrix.\n    '''\n    n = len(x)\n    c = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        c[i][i] = 0\n    for i in range(n):\n        c[i][i] = abs(x[i] - y[i])\n    for i in range(n):\n        for j in range(i + 1,n):\n            c[i][j] = abs(x[i] - x[j]) + abs(y[i] - y[j])\n    for i in range(n):\n        for j in range(i + 1,n):\n            c[j][i] = c[i][j]\n    i = j = 0\n    result = 10e9\n    while i < n:\n        if j == n - 1:\n            j = i\n        if j == i + 1:\n            j = i\n        result = min(result, c[j][i] + c[i][j])\n        i += 1\n        j += 1\n    return result\ndef minimum_distance_2(x,y,v,m):\n    '''\n    Write a python function to compute the minimum distance between the points of a set of \n    points that are given in the form of a 2D coordinates matrix.\n    '''\n    n = len(x)\n    c = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        c[i][i] = 0\n    for i in range(n):\n        c[i][i] = abs(x[i] - y[i])\n    for i in range(n):\n        for j in range(i + 1,n):\n            c[i][j] = abs(x[i] - x[j]) + abs(y[",
        "num_ids": 124
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"Maximum number is\",a)\n    else:\n        print(\"Maximum number is\",b)\nmaximum(a,b)\nmaximum(b,a)\n",
        "num_ids": 47
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nmax_num=maximum(5,6)\nprint(\"maximum of 5 and 6 is\",max_num)\n",
        "num_ids": 46
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(f\"{a} is maximum\")\n    else:\n        print(f\"{b} is maximum\")\n",
        "num_ids": 37
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(f\"{a} is maximum.\")\n    elif a == b:\n        print(f\"Both the numbers are equal.\")\n    else:\n        print(f\"{b} is maximum.\")\nmaximum(10,20)\n",
        "num_ids": 64
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \nprint(maximum(4,5))\n",
        "num_ids": 32
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #str1 = 'hello'\n    tup = tuple(str1)\n    print(tup)\n    \n    \ndef find_index(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    for i in range(len(str1)):\n        if str1[i] not in str1[:i]:\n            return i\n    return -1\n    \ndef find_index_with_start_and_end(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    for i in range(len(str1)-1):\n        if str1[i] not in str1[i+1:]:\n            return i\n    return -1\n    \ndef find_index_with_start_and_end_without_checking_last_occurrence(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    if str1[0] in str1:\n        return 0\n    else:\n        for i in range(len(str1)-1):\n            if str1[i] not in str1[i+1:]:\n                return i\n    return -1\n    \ndef find_index_with_start_and_end_with_last_index(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    i = 0\n    while i < len(str1) and str1[i] in str1[:i]:\n        i += 1\n        \n    return i\n    \ndef find_index_with_start_and_end_with_last_index_using_generator(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    i = 0\n    while i < len(str1) and str1[i] in str1[:i]:\n        i += 1\n        \n    return i\n    \ndef find_index_with_start_and_end_with_last_index_using_generator2(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    if str1[0] in str1:\n        i = 1\n    else:\n        i = 0\n    \n    while i < len(str1) and str1[i] in str1[i+1:]:\n        i += 1\n    return i\n    \ndef find_index_with_start_and_end_with_last_index_without_checking_last_occurrence(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    if str1[0] in str1:\n        i = 1\n    else:\n        i = 0\n    \n    while i < len(str1) and str1[i] in str1[i+1:]:\n        i += 1\n    return i\n    \ndef find_index_with_start_and_end_with_last_index_without_checking_last_occurrence2(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    if str1[0] in str1:\n        i = 1\n    else:\n        i = 0\n    \n    if str1[i] in str1[i+1:]:\n        i += 1\n        \n    return i\n    \ndef find_index_with_start_and_end_with_last_index_without_checking_last_occurrence3(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    if str1[0] in str1:\n        i = 1\n    else:\n        i = 0\n    \n    if str1[i] not in str1[i+1:]:\n        i += 1\n        \n    return i\n    \ndef find_index_with_start_and_end_with_last_index_without_checking_last_occurrence4(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    if str1[0] in str1:\n        i = 1\n    else:\n        i = 0\n    \n    if str1[i] not in str1[i+1:]:\n        i += 1\n        \n    return i\n    \ndef find_index_with_start_and_end_with_last_index_without_checking_last_occurrence_with_index(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    i = 0\n    while i < len(str1) and str1[i] in str1[:i]:\n        i += 1\n        \n    return i\n    \ndef find_index_with_start_and_end_with_last_index_without_checking_last_occurrence_with_index2(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    i = 0\n    while i < len(str1) and str1[i] in str1[:i]:\n        i += 1\n        \n    return i\n    \ndef find_index_with_start_and_end_with_last_index_without_checking_last_occurrence_with_index3(str1):\n    '''\n    Write a function to find the first non-repeated character in a given string.\n    Return the index of the first non-repeated character.\n    '''\n    #str1 = 'hello'\n    #str1 = 'abca'\n    str1 = 'hello'\n    \n    i = 0\n    while i < len(str1) and str1[i] in str1[:i]:\n        i += 1\n        \n    return i\n    \ndef find_index_with_start_and_end_with_last_index_without_checking_last_occurrence_with_index4(str1):\n    '''\n    Write a function to find th",
        "num_ids": 9
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_of_str=str1.split()\n    return tuple_of_str\n",
        "num_ids": 24
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split()\n    return tuple(str1)\n",
        "num_ids": 20
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \nstr1 = 'abc'\nstr2 = (1,2,3)\nprint(string_to_tuple(str1))\nprint(string_to_tuple(str2))\n",
        "num_ids": 56
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #tuple1=('a','b','c')\n    #tuple1=(''.join(tuple1))\n    #return tuple1\n    return tuple(str1)\n",
        "num_ids": 45
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1=str1.strip()\n    char_list=[]\n    char_list.extend(str1)\n    char_tuple=tuple(char_list)\n    return char_tuple\n",
        "num_ids": 52
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Your code here\n    return tuple(str1)\n",
        "num_ids": 16
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (1 << (n-1))\n",
        "num_ids": 13
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1: \n        n >>= 1\n    return n\n    \ndef set_left_most_unset_bit_opt(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n: \n        n = n - 1\n        # print(n)\n        return n\n        \ndef main(): \n    print(set_left_most_unset_bit(9)) \n    print(set_left_most_unset_bit(4)) \n    print(set_left_most_unset_bit(1)) \n    print(set_left_most_unset_bit_opt(9)) \n    print(set_left_most_unset_bit_opt(4)) \n    print(set_left_most_unset_bit_opt(1)) \n",
        "num_ids": 147
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while(n & 1) == 0 and i < 63:\n        n = n >> 1\n        i += 1\n    print(i)\n    ",
        "num_ids": 41
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if(n == 0):\n        return n\n    while(n & 0x01 == 0):\n        n = n >> 1\n    n = n | (1 << 31)\n    return n\n",
        "num_ids": 48
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    while n > 0:\n        n = n & (n-1)\n    return n\n",
        "num_ids": 26
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << (n.bit_length() - 1))\n",
        "num_ids": 20
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= ~(1 << n.bit_length() - 1)\n    return n\n",
        "num_ids": 24
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #n = int(input(\"Enter an integer: \"))\n    # 1. n & -n == 0 means n is a zero.\n    # 2. n & -n == n means n is a one.\n    # 3. n & -n!= 0 means n is a one.\n    # 4. n | -n == 0 means n is a zero.\n    # 5. n | -n == n means n is a one.\n    # 6. n | -n!= 0 means n is a one.\n    # 7. ~n == -n == n.\n    # 8. ~n == -n == ~n.\n    # 9. ~n == -n == ~n.\n    # 10. n >> 2 == -n == n >> 2 == n >> 2 == 0.\n    # 11. n << 2 == -n == n << 2 == n << 2 == 0.\n    # 12. n >> 2 == -n == n >> 2 == n >> 2 == 0.\n    # 13. n << 2 == -n == n << 2 == n << 2 == 0.\n    # 14. n & 1 == 0.\n    # 15. n & 1 == 1.\n    # 16. n | 1 == n.\n    # 17. n | 1 == n.\n    # 18. n & 1 == n.\n    # 19. n & 1 == 1.\n    # 20. n | 1 == n.\n    # 21. n | 1 == n.\n    # 22. n & 1 == n.\n    # 23. n & 1 == 1.\n    # 24. n | 1 == n.\n    # 25. n | 1 == n.\n    # 26. n & 1 == n.\n    # 27. n & 1 == 1.\n    # 28. n | 1 == n.\n    # 29. n | 1 == n.\n    # 30. n & 1 == n.\n    # 31. n & 1 == 1.\n    # 32. n | 1 == n.\n    # 33. n | 1 == n.\n    # 34. n & 1 == n.\n    # 35. n & 1 == 1.\n    # 36. n | 1 == n.\n    # 37. n | 1 == n.\n    # 38. n & 1 == n.\n    # 39. n & 1 == 1.\n    # 40. n | 1 == n.\n    # 41. n | 1 == n.\n    # 42. n & 1 == n.\n    # 43. n & 1 == 1.\n    # 44. n | 1 == n.\n    # 45. n | 1 == n.\n    # 46. n & 1 == n.\n    # 47. n & 1 == 1.\n    # 48. n | 1 == n.\n    # 49. n | 1 == n.\n    # 50. n & 1 == n.\n    # 51. n & 1 == 1.\n    # 52. n | 1 == n.\n    # 53. n | 1 == n.\n    # 54. n & 1 == n.\n    # 55. n & 1 == 1.\n    # 56. n | 1 == n.\n    # 57. n | 1 == n.\n    # 58. n & 1 == n.\n    # 59. n & 1 == 1.\n    # 60. n | 1 == n.\n    # 61. n | 1 == n.\n    # 62. n & 1 == n.\n    # 63. n & 1 == 1.\n    # 64. n | 1 == n.\n    # 65. n | 1 == n.\n    # 66. n & 1 == n.\n    # 67. n & 1 == 1.\n    # 68. n | 1 == n.\n    # 69. n | 1 == n.\n    # 70. n & 1 == n.\n    # 71. n & 1 == 1.\n    # 72. n | 1 == n.\n    # 73. n | 1 == n.\n    # 74. n & 1 == n.\n    # 75. n & 1 == 1.\n    # 76. n | 1 == n.\n    # 77. n | 1 == n.\n    # 78. n & 1 == n.\n    # 79. n & 1 == 1.\n    # 80. n | 1 == n.\n    # 81. n | 1 == n.\n    # 82. n & 1 == n.\n    # 83. n & 1 == 1.\n    # 84. n | 1 == n.\n    # 85. n | 1 == n.\n    # 86. n & 1 == n.\n    # 87. n & 1 == 1.\n    # 88. n | 1 == n.\n    # 89. n | 1 == n.\n    # 90. n & 1 == n.\n    # 91. n & 1 == 1.\n    # 92. n | 1 == n.\n    # 93. n | 1 == n.\n    # 94. n & 1 == n.\n    # 95. n & 1 == 1.\n    # 96. n | 1 == n.\n    # 97. n | 1 == n.\n    # 98. n & 1 == n.\n    # 99. n & 1 == 1.\n    #100. n | 1 == n.\n    #101. n | 1 == n.\n    #102. n & 1 == n.\n    #103. n & 1 == 1.\n    #104. n | 1 == n.\n    #105. n | 1 == n.\n    #106. n & 1 == n.\n    #107. n & 1 == 1.\n    #108. n | 1 == n.\n    #109. n | 1 == n.\n    #110. n & 1 == n.\n    #111. n & 1 == 1.\n    #112. n | 1 == n.\n    #113. n | 1 == n.\n    #114. n & 1 == n.\n    #115. n & 1 == 1.\n    #116. n | 1 == n.\n    #117. n | 1 == n.\n    #118. n & 1 == n.\n    #119. n & 1 == 1.\n    #120. n | 1 == n.\n    #121. n | 1 == n.\n    #122. n & 1 == n.\n    #123. n & 1 == 1.\n    #124. n | 1 == n.\n    #125. n | 1 == n.\n    #126. n & 1 == n.\n    #127. n & 1 == 1.\n    #128. n | 1 == n.\n    #129. n | 1 == n.\n    #130. n & 1 == n.\n    #131. n & 1 == 1.\n    #132. n | 1 == n.\n    #133. n | 1 == n.\n    #134. n & 1 == n.\n    #135. n & 1 == 1.\n    #136. n | 1 == n.\n    #137. n | 1 == n.\n    #138. n & 1 == n.\n    #139. n & 1 == 1.\n    #140. n | 1 == n.\n    #141. n | 1 == n.\n    #142. n & 1 == n.\n    #143. n & 1 == 1.\n    #144. n | 1 == n.\n    #145. n | 1 == n.\n    #146. n & 1 == n.\n    #147. n & 1 == 1.\n    #148. n | 1 == n.\n    #149. n | 1 == n.\n    #150. n & 1 == n.\n    #151. n & 1 == 1.\n    #152. n | 1 == n.\n    #153. n | 1 == n.\n    #154. n & 1 == n.\n    #155. n & 1 == 1.\n    #156. n | 1 == n.\n    #157. n | 1 == n.\n    #158. n & 1 == n.\n    #159. n & 1 == 1.\n    #160. n | 1 == n.\n    #161. n | 1 == n.\n    #162. n & 1 == n.\n    #163. n & 1 == 1.\n    #164. n | 1 == n.\n    #165. n | 1 == n.\n    #166. n & 1 == n.\n    #167. n & 1 == 1.\n    #168. n | 1 == n.\n    #169. n | 1 == n.\n    #170. n & 1 == n.\n    #171. n & 1 == 1.\n    #172. n | 1 == n.\n    #173. n | 1 == n.\n    #17",
        "num_ids": 2013
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n >= 0\n    assert n <= pow(2,31)-1\n    res = n | pow(2,31)-1\n    return res\n    \ndef main():\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = 10\n    assert n >= 0\n    assert n <= pow(2,31)-1\n    res = set_left_most_unset_bit(n)\n    print(res)\n    \nif __name__=='__main__':\n    main(",
        "num_ids": 64
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    if n == 0:\n        return 1\n    return n | (1 << (n-1))\n",
        "num_ids": 28
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r ** 2 * h\n    return v\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * r * h\n",
        "num_ids": 14
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi/3)*r*r*h\n    return volume\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    try:\n        #return r*h*math.pi\n        return (r**2)*(math.pi*h)\n    except:\n        return \"Invalid Input\"\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    try:\n        #return 4/3*math.pi*r**3\n        return (4/3)*(math.pi*r**3)\n    except:\n        return \"Invalid Input\"\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    try:\n        #return 2*math.pi*r*(r+h)\n        return 2*(math.pi*r)*(r+h)\n    except:\n        return \"Invalid Input\"\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    try:\n        #return 2*math.pi*r*h\n        return 2*(math.pi*r)*h\n    except:\n        return \"Invalid Input\"\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    try:\n        #return 4*math.pi*r**2\n        return (4*math.pi*r**2)\n    except:\n        return \"Invalid Input\"\ndef surface_area_torus(r1,r2):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    try:\n        return 2*math.pi*r1*r2\n    except:\n        return \"Invalid Input\"\ndef volume_torus(r1,r2):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    try:\n        return 2*math.pi*r1*r2*r1\n    except:\n        return \"Invalid Input\"\ndef length_of_cube(l):\n    '''\n    Write a function to find the length of a cube.\n    '''\n    try:\n        return l*6\n    except:\n        return \"Invalid Input\"\ndef length_of_cylinder(r,h):\n    '''\n    Write a function to find the length of a cylinder.\n    '''\n    try:\n        return r*h\n    except:\n        return \"Invalid Input\"\ndef length_of_cone(r,h):\n    '''\n    Write a function to find the length of a cone.\n    '''\n    try:\n        return r*h\n    except:\n        return \"Invalid Input\"\ndef length_of_sphere(r):\n    '''\n    Write a function to find the length of a sphere.\n    '''\n    try:\n        return math.pi*r*r\n    except:\n        return \"Invalid Input\"\ndef circumference_of_circular_semi_circle(r):\n    '''\n    Write a function to find the circumference of a circle whose radius is semi-circle.\n    '''\n    try:\n        return 2*math.pi*r\n    except:\n        return \"Invalid Input\"\ndef area_of_circular_semi_circle(r):\n    '''\n    Write a function to find the area of a circle whose radius is semi-circle.\n    '''\n    try:\n        return math.pi*(r**2)\n    except:\n        return \"Invalid Input\"\ndef circumference_of_circular_semi_ellipse(a,b):\n    '''\n    Write a function to find the circumference of a circle whose semi-axis is semi-elliptic.\n    '''\n    try:\n        return 2*math.pi*a*b\n    except:\n        return \"Invalid Input\"\ndef area_of_circular_semi_ellipse(a,b):\n    '''\n    Write a function to find the area of a circle whose semi-axis is semi-elliptic.\n    '''\n    try:\n        return math.pi*a*b\n    except:\n        return \"Invalid Input\"\ndef circumference_of_elliptic_semi_circle(r,a,b):\n    '''\n    Write a function to find the circumference of an ellipse whose semi-axis is semi-circle.\n    '''\n    try:\n        return a*b*2*math.pi*r\n    except:\n        return \"Invalid Input\"\ndef area_of_elliptic_semi_circle(r,a,b):\n    '''\n    Write a function to find the area of an ellipse whose semi-axis is semi-circle.\n    '''\n    try:\n        return a*b*math.pi*r*r\n    except:\n        return \"Invalid Input\"\ndef circumference_of_elliptic_semi_ellipse(a,b,c,d):\n    '''\n    Write a function to find the circumference of an elliptic semi-ellipse.\n    '''\n    try:\n        return a*b*math.sqrt(1-c**2/a**2)*math.sqrt(1-d**2/b**2)\n    except:\n        return \"Invalid Input\"\ndef area_of_elliptic_semi_ellipse(a,b,c,d):\n    '''\n    Write a function to find the area of an elliptic semi-ellipse.\n    '''\n    try:\n        return math.pi*(a*b)*math.sqrt(1-c**2/a**2)*math.sqrt(1-d**2/b**2)\n    except:\n        return \"Invalid Input\"\ndef circumference_of_elliptic_semi_circular_semi_ellipse(a,b,c,d,e,f):\n    '''\n    Write a function to find the circumference of an elliptic semi-circular semi-ellipse.\n    '''\n    try:\n        return 2*math.sqrt(1-c**2/a**2)*math.sqrt(1-d**2/b**2)*math.sqrt(1-e**2/f**2)\n    except:\n        return \"Invalid Input\"\ndef area_of_elliptic_semi_circular_semi_ellipse(a,b,c,d,e,f):\n    '''\n    Write a function to find the area of an elliptic semi-circular semi-ellipse.\n    '''\n    try:\n        return math.pi*(a*b)*math.sqrt(1-c**2/a**2)*math.sqrt(1-d**2/b**2)*math.sqrt(1-e**2/f**2)\n    except:\n        return \"Invalid Input\"\ndef circumference_of_elliptic_semi_circular_ellipse(a,b,c,d,e,f):\n    '''\n    Write a function to find the circumference of an elliptic semi-circular semi-ellipse.\n    '''\n    try:\n        return math.sqrt(1-c**2/a**2)*math.sqrt(1-d**2/b**2)*math.sqrt(1-e**2/f**2)\n    except:\n        return \"Invalid Input\"\ndef area_of_elliptic_semi_circular_ellipse(a,b,c,d,e,f):\n    '''\n    Write a function to find the area of an elliptic semi-circular semi-ellipse.\n    '''\n    try:\n        return math.pi*(a*b)*math.sqrt(1-c**2/a**2)*math.sqrt(1-d**2/b**2)*math.sqrt(1-e**2/f**2)\n    except:\n        return \"Invalid Input\"\ndef circumference_of_elliptic_semi_circular_elliptical_semi_ellipse(a,b,c,d,e,f):\n    '''\n    Write a function to find the circumference of an elliptic semi-circular elliptical semi-ellipse.\n    '''\n    try:\n        return math.sqrt(1-c**2/a**2)*math.sqrt(1-d**2/b**2)*math.sqrt",
        "num_ids": 42
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**2 * math.pi * h\n",
        "num_ids": 14
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4/3)*math.pi*r**3*h\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    return math.pi*r**2*h\n",
        "num_ids": 18
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r**2) * h) / 3\n",
        "num_ids": 20
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    base = 1\n    while base <= n:\n        base *= 2\n    return base - 1\n",
        "num_ids": 37
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    while True:\n        if (n&(n-1)) == 0:\n            return n\n        else:\n            n = n & (n - 1)\n",
        "num_ids": 51
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    res = n\n    i = 0\n    while (res >= 2):\n        if (res > 2 ** i):\n            res = 2 ** i\n        i += 1\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    cnt = 0\n    while True:\n        if (2**cnt) <= n:\n            break\n        cnt += 1\n    return cnt\n",
        "num_ids": 39
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # print(f\"n={n}\")\n    if n < 2:\n        # print(f\"n={n}\")\n        return n\n    return 2**(highest_Power_of_2(n//2))\n    \ndef test_highest_Power_of_2():\n    '''\n    Some tests for highest_Power_of_2.\n    '''\n    assert highest_Power_of_2(0) == 0\n    assert highest_Power_of_2(1) == 1\n    assert highest_Power_of_2(9) == 9\n    assert highest_Power_of_2(6) == 2\n    assert highest_Power_of_2(15) == 3\n    assert highest_Power_of_2(16) == 2\n    assert highest_Power_of_2(32) == 4\n    assert highest_Power_of_2(64) == 4\n    assert highest_Power_of_2(127) == 7\n    assert highest_Power_of_2(255) == 8\n    assert highest_Power_of_2(1024) == 2\n    assert highest_Power_of_2(1234) == 3\n    assert highest_Power_of_2(0xFFFFFFFF) == 4\n    print(\"passed all tests\")\n",
        "num_ids": 210
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n>0:\n        if n%2==0:\n            n=n/2\n        else:\n            n=n-1\n    return n\nprint('The highest power of 2 that is less than or equal to 12 is ',highest_Power_of_2(12))\nprint('The highest power of 2 that is less than or equal to 0 is ',highest_Power_of_2(0))\n",
        "num_ids": 96
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    else:\n        #print(n)\n        binary = 0\n        i=0\n        while(binary<n and i<32):\n            binary = binary<<1\n            i+=1\n        #print(binary)\n        return binary\n        \n        \n        \n",
        "num_ids": 75
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #code here\n    flag = 1\n    while flag:\n        if flag <= n:\n            flag = flag << 1\n        else:\n            flag >>= 1\n    return flag\n",
        "num_ids": 45
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    \n    p = highest_Power_of_2(n - 1)\n    if (n & (n - 1)) == 0:\n        return p + 1\n    else:\n        return p\n",
        "num_ids": 92
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #n = int(input())\n    largest_power_2 = 0\n",
        "num_ids": 20
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n):\n        if n == 0:\n            return 2\n        elif n == 1:\n            return 1\n        else:\n            return lucas(n-1) + lucas(n-2)\n    if n < 1:\n        print('Input must be positive')\n    else:\n        print(lucas(n))\n",
        "num_ids": 85
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (n == 0) or (n == 1 and 2)\n",
        "num_ids": 18
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas = 0\n    for i in range(n):\n        lucas = lucas + 1\n    return lucas\n",
        "num_ids": 55
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    num = 1\n    for i in range(n):\n        num = num * 2 - 1\n    return num\n",
        "num_ids": 29
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n    \n    \n",
        "num_ids": 52
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 2\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    #edge case\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    #initialize variables\n    lucas = 2\n    n_minus_2 = 1\n    \n    #loop through n\n    for i in range(2, n):\n        lucas = n_minus_2 + n_minus_2\n        n_minus_2 = lucas\n        \n    return lucas\n",
        "num_ids": 108
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    num1, num2 = 1, 1\n    for i in range(n):\n        num1, num2 = num2, num1 + num2\n    return num1\n",
        "num_ids": 43
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (1 + (2*n) - (1/2))\n",
        "num_ids": 19
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if type(list_) == int:\n        list_ = [list_]\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 57
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n",
        "num_ids": 34
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        print(string.format(item))\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in range(len(list_)):\n        list_[item] = list_[item].title()\n    return (list_)\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n",
        "num_ids": 15
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n",
        "num_ids": 15
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return map(lambda x: x.format(string), list_)\n",
        "num_ids": 19
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [f\"{s}\" for s in list_]\n",
        "num_ids": 17
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out_dictionary = dict()\n    for i, j, k in zip(l1, l2, l3):\n        out_dictionary[i] = dict({j: k})\n    return out_dictionary\n",
        "num_ids": 54
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {i: {j: k for j, k in zip(l1, l2)} for i in l3}\n",
        "num_ids": 31
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l3[i]] = l2[i]\n    return d\n",
        "num_ids": 54
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {'key1': {'key21': 'key2', 'key22': 'key2'},\n         'key2': {'key3': 'key2', 'key4': 'key2'},\n         'key3': {'key5': 'key2', 'key6': 'key2'},\n         'key4': {'key7': 'key2', 'key8': 'key2'},\n         'key5': {'key9': 'key2', 'key10': 'key2'},\n         'key6': {'key11': 'key2', 'key12': 'key2'},\n         'key7': {'key13': 'key2', 'key14': 'key2'},\n         'key8': {'key15': 'key2', 'key16': 'key2'},\n         'key9': {'key17': 'key2', 'key18': 'key2'},\n         'key10': {'key19': 'key2', 'key20': 'key2'},\n         'key11': {'key21': 'key2', 'key22': 'key2'},\n         'key12': {'key23': 'key2', 'key24': 'key2'},\n         'key13': {'key25': 'key2', 'key26': 'key2'},\n         'key14': {'key27': 'key2', 'key28': 'key2'},\n         'key15': {'key29': 'key2', 'key30': 'key2'},\n         'key16': {'key31': 'key2', 'key32': 'key2'},\n         'key17': {'key33': 'key2', 'key34': 'key2'},\n         'key18': {'key35': 'key2', 'key36': 'key2'},\n         'key19': {'key37': 'key2', 'key38': 'key2'},\n         'key20': {'key39': 'key2', 'key40': 'key2'},\n         'key21': {'key41': 'key2', 'key42': 'key2'},\n         'key22': {'key43': 'key2', 'key44': 'key2'}}\n    return d\n",
        "num_ids": 537
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # list1 = [\"python\", \"scala\", \"kotlin\", \"java\"]\n    # list2 = [1, 2, 3, 4]\n    # list3 = [\"a\", \"b\", \"c\"]\n    #\n    # l1 = list1.copy()\n    # l2 = list2.copy()\n    # l3 = list3.copy()\n    #\n    # dictionary1 = {}\n    # dictionary2 = {}\n    # dictionary3 = {}\n    #\n    # for i in range(len(l1)):\n    #     dictionary1[l1[i]] = l2[i]\n    #\n    # for i in range(len(l2)):\n    #     dictionary2[l2[i]] = l3[i]\n    #\n    # for i in range(len(l3)):\n    #     dictionary3[l3[i]] = l1[i]\n    #\n    # return dictionary1, dictionary2, dictionary3\n    return {l1[i]: l2[i] for i in range(len(l1))}, {l2[i]: l3[i] for i in range(len(l2))}, {l3[i]: l1[i] for i in range(len(l3))}\n",
        "num_ids": 305
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1.setdefault(i, l2)\n    for i in l3:\n        d1.setdefault(i, l3)\n    return d1\n",
        "num_ids": 55
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = dict.fromkeys(l1, None)\n    l2 = dict.fromkeys(l2, None)\n    l3 = dict.fromkeys(l3, None)\n",
        "num_ids": 47
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    newDict = {}\n    for i in range(len(l1)):\n        newDict.setdefault(l1[i], []).append(l2[i])\n        newDict.setdefault(l2[i], []).append(l3[i])\n    return newDict\n",
        "num_ids": 74
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i == 0:\n                my_dict[l1[i]] = l2[j]\n            else:\n                my_dict[l1[i]] = {l2[j]:l3[i]}\n    return my_dict\n",
        "num_ids": 92
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0:\n        return l1\n    if len(l2) == 0:\n        return l2\n    if len(l3) == 0:\n        return l3\n",
        "num_ids": 50
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case - 1\n    if n == 1:\n        return 1\n    \n    # Base case - 2\n    if n == 2:\n        return 2\n    \n    # Base case - 3\n    if n == 3:\n        return 4\n    \n    # Base case - 4\n    if n == 4:\n        return 7\n    \n    # Base case - 5\n    if n == 5:\n        return 10\n    \n    # Base case - 6\n    if n == 6:\n        return 14\n    \n    # Base case - 7\n    if n == 7:\n        return 21\n    \n    # Base case - 8\n    if n == 8:\n        return 28\n    \n    # Base case - 9\n    if n == 9:\n        return 36\n    \n    # Base case - 10\n    if n == 10:\n        return 45\n    \n    # Base case - 11\n    if n == 11:\n        return 55\n    \n    # Base case - 12\n    if n == 12:\n        return 66\n    \n    # Base case - 13\n    if n == 13:\n        return 77\n    \n    # Base case - 14\n    if n == 14:\n        return 88\n    \n    # Base case - 15\n    if n == 15:\n        return 95\n    \n    # Base case - 16\n    if n == 16:\n        return 102\n    \n    # Base case - 17\n    if n == 17:\n        return 113\n    \n    # Base case - 18\n    if n == 18:\n        return 124\n    \n    # Base case - 19\n    if n == 19:\n        return 141\n    \n    # Base case - 20\n    if n == 20:\n        return 152\n    \n    # Base case - 21\n    if n == 21:\n        return 162\n    \n    # Base case - 22\n    if n == 22:\n        return 172\n    \n    # Base case - 23\n    if n == 23:\n        return 182\n    \n    # Base case - 24\n    if n == 24:\n        return 192\n    \n    # Base case - 25\n    if n == 25:\n        return 202\n    \n    # Base case - 26\n    if n == 26:\n        return 212\n    \n    # Base case - 27\n    if n == 27:\n        return 232\n    \n    # Base case - 28\n    if n == 28:\n        return 242\n    \n    # Base case - 29\n    if n == 29:\n        return 252\n    \n    # Base case - 30\n    if n == 30:\n        return 273\n    \n    # Base case - 31\n    if n == 31:\n        return 285\n    \n    # Base case - 32\n    if n == 32:\n        return 296\n    \n    # Base case - 33\n    if n == 33:\n        return 307\n    \n    # Base case - 34\n    if n == 34:\n        return 318\n    \n    # Base case - 35\n    if n == 35:\n        return 329\n    \n    # Base case - 36\n    if n == 36:\n        return 340\n    \n    # Base case - 37\n    if n == 37:\n        return 341\n    \n    # Base case - 38\n    if n == 38:\n        return 352\n    \n    # Base case - 39\n    if n == 39:\n        return 363\n    \n    # Base case - 40\n    if n == 40:\n        return 384\n    \n    # Base case - 41\n    if n == 41:\n        return 395\n    \n    # Base case - 42\n    if n == 42:\n        return 406\n    \n    # Base case - 43\n    if n == 43:\n        return 417\n    \n    # Base case - 44\n    if n == 44:\n        return 418\n    \n    # Base case - 45\n    if n == 45:\n        return 419\n    \n    # Base case - 46\n    if n == 46:\n        return 420\n    \n    # Base case - 47\n    if n == 47:\n        return 421\n    \n    # Base case - 48\n    if n == 48:\n        return 422\n    \n    # Base case - 49\n    if n == 49:\n        return 423\n    \n    # Base case - 50\n    if n == 50:\n        return 424\n    \n    # Base case - 51\n    if n == 51:\n        return 425\n    \n    # Base case - 52\n    if n == 52:\n        return 426\n    \n    # Base case - 53\n    if n == 53:\n        return 427\n    \n    # Base case - 54\n    if n == 54:\n        return 428\n    \n    # Base case - 55\n    if n == 55:\n        return 429\n    \n    # Base case - 56\n    if n == 56:\n        return 430\n    \n    # Base case - 57\n    if n == 57:\n        return 431\n    \n    # Base case - 58\n    if n == 58:\n        return 432\n    \n    # Base case - 59\n    if n == 59:\n        return 433\n    \n    # Base case - 60\n    if n == 60:\n        return 434\n    \n    # Base case - 61\n    if n == 61:\n        return 435\n    \n    # Base case - 62\n    if n == 62:\n        return 436\n    \n    # Base case - 63\n    if n == 63:\n        return 437\n    \n    # Base case - 64\n    if n == 64:\n        return 438\n    \n    # Base case - 65\n    if n == 65:\n        return 439\n    \n    # Base case - 66\n    if n == 66:\n        return 440\n    \n    # Base case - 67\n    if n == 67:\n        return 441\n    \n    # Base case - 68\n    if n == 68:\n        return 442\n    \n    # Base case - 69\n    if n == 69:\n        return 443\n    \n    # Base case - 70\n    if n == 70:\n        return 444\n    \n    # Base case - 71\n    if n == 71:\n        return 445\n    \n    # Base case - 72\n    if n == 72:\n        return 446\n    \n    # Base case - 73\n    if n == 73:\n        return 447\n    \n    # Base case - 74\n    if n == 74:\n        return 448\n    \n    # Base case - 75\n    if n == 75:\n        return 449\n    \n    # Base case - 76\n    if n == 76:\n        return 450\n    \n    # Base case - 77\n    if n == 77:\n        return 451\n    \n    # Base case - 78\n    if n == 78:\n        return 452\n    \n    # Base case - 79\n    if n == 79:\n        return 453\n    \n    # Base case - 80\n    if n == 80:\n        return 454\n    \n    # Base case - 81\n    if n == 81:\n        return 455\n    \n    # Base case - 82\n    if n == 82:\n        return 456\n    \n    # Base case - 83\n    if n == 83:\n        return 457\n    \n    # Base case - 84\n    if n == 84:\n        return 458\n    \n    # Base case - 85\n    if n == 85:\n        return 459\n    \n    # Base case - 86\n    if n == 86:\n        return 460\n    \n    # Base case - 87\n    if n == 87:\n        return 461\n    \n    # Base case - 88\n    if n == 88:\n        return 462\n    \n    # Base case - 89\n    if n == 89:\n        return 463\n    \n    # Base case - 90\n    if n == 90:\n        return 464\n    \n    # Base case - 91\n    if n == 91:\n        return 465\n    \n    # Base case - 92\n    if n == 92:\n        return 466\n    \n    # Base case - 93\n    if n == 93:\n        return 467\n    \n    # Base case - 94\n    if n == 94:\n        return 468\n    \n    # Base case - 95\n    if n == 95:\n        return 469\n    \n    # Base case - 96\n    if n == 96:\n        return 470\n    \n    # Base case - 97\n    if n == 97:\n        return 471\n    \n    # Base case - 98\n    if n == 98",
        "num_ids": 1978
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = lambda n: max(f(n/2), f(n/3), f(n/4), f(n/5), n)\n    return f(n)\n",
        "num_ids": 44
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    return f(n)\n",
        "num_ids": 77
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = lambda x: x + max(x/2 + x/3 + x/4 + x/5, x)\n    return f(n)\n",
        "num_ids": 38
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n",
        "num_ids": 52
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 15\n    elif n == 6:\n        return 21\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n",
        "num_ids": 123
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return max(get_max(n/2),get_max(n/3),get_max(n/4),get_max(n/5))+n\n    return get_max(n)\n",
        "num_ids": 81
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n",
        "num_ids": 68
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 0) or (n == 1):\n        return n\n    a = get_max_sum (n / 2) + get_max_sum (n / 3) + get_max_sum (n / 4) + get_max_sum (n / 5)\n    return max (a, n)\n",
        "num_ids": 76
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_value = input_list[0]\n    max_length = len(input_list[0])\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_value = input_list[i]\n            max_length = len(input_list[i])\n    return max_value\n",
        "num_ids": 92
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for i in input_list:\n        length_list.append(len(i))\n    max_len = max(length_list)\n    max_index = length_list.index(max_len)\n    result = input_list[max_index]\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            answer = i\n    return answer\n",
        "num_ids": 49
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for x in input_list:\n        if len(x) > max_length:\n            max_length = len(x)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 53
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n    for element in input_list:\n        if len(element) == max_length:\n            return element\n",
        "num_ids": 65
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) >= max_len:\n            max_list = input_list[i]\n            max_len = len(input_list[i])\n    return max_list\n",
        "num_ids": 78
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    output_list = []\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    for item in input_list:\n        if len(item) == max_length:\n            output_list.append(item)\n    return output_list\n",
        "num_ids": 84
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_length = []\n    for num in input_list:\n        list_length.append(len(num))\n    max_length = max(list_length)\n    return list_length.index(max_length)\n",
        "num_ids": 55
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 38
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                print(\"True\")\n                return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    new_tuple = []\n    for i in range(len(test_tup)):\n        if test_tup[i] not in new_tuple:\n            new_tuple.append(test_tup[i])\n        else:\n            print('Duplicate Values!')\n            break\n    if len(new_tuple) == len(test_tup):\n        print('Tuple contains no duplicates!')\n",
        "num_ids": 105
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    is_distinct = True\n    for i in test_tup:\n        if test_tup.count(i)>1:\n            is_distinct = False\n    return is_distinct\n",
        "num_ids": 50
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for num in test_tup:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    try:\n        temp = []\n        for i in test_tup:\n            if i not in temp:\n                temp.append(i)\n    except Exception as e:\n        print(e)\n    else:\n        return len(temp)\n",
        "num_ids": 61
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    my_dict = {}\n    if str1 == '':\n        return None\n    for i in range(len(str1)):\n        if str1[i] in my_dict.keys():\n            my_dict[str1[i]] = my_dict[str1[i]] + 1\n        else:\n            my_dict[str1[i]] = 1\n    for i in range(len(str1)):\n        if my_dict[str1[i]] == 1:\n            return str1[i]\n    return None\n",
        "num_ids": 129
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    my_dict = {}\n    for i in str1:\n        my_dict[i] = my_dict.get(i, 0) + 1\n    for i in str1:\n        if my_dict[i] == 1:\n            return i\n    return None\n",
        "num_ids": 66
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    #O(n) Time and space complexity\n    res = -1\n    str_len = len(str1)\n    for i in range(str_len):\n        if str1.count(str1[i]) == 1:\n            res = i\n            break\n    return res\n",
        "num_ids": 71
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] in d:\n            d[str1[i]] += 1\n        else:\n            d[str1[i]] = 1\n    for i in range(len(str1)):\n        if d[str1[i]] == 1:\n            return str1[i]\n    return \"No non-repeating character found!\"\n",
        "num_ids": 103
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] not in str1[i + 1:]:\n            return str1[i]\n    return None\n",
        "num_ids": 55
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return -1\n    else:\n        my_dict = {}\n        for char in str1:\n            if char not in my_dict:\n                my_dict[char] = 1\n            else:\n                my_dict[char] += 1\n        for key in my_dict:\n            if my_dict[key] == 1:\n                return key\n        return -1\n",
        "num_ids": 101
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
        "num_ids": 31
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] in d:\n            d[str1[i]] += 1\n        else:\n            d[str1[i]] = 1\n    for i in range(len(str1)):\n        if d[str1[i]] == 1:\n            return i\n    return -1\n",
        "num_ids": 92
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict_rep = {}\n    for i in range(len(str1)):\n        dict_rep[str1[i]] = dict_rep.get(str1[i], 0) + 1\n    for i in range(len(str1)):\n        if dict_rep.get(str1[i], 0) == 1:\n            return i\n    return -1\n",
        "num_ids": 90
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        print(f'The given string {string} starts and ends with the same character')\n    else:\n        print(f'The given string {string} starts or ends with different characters')\n",
        "num_ids": 58
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)<2:\n        return False\n    return string[0]==string[-1]\nprint(check_char('python'))\n",
        "num_ids": 39
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\nprint(check_char(\"awel\"))\nprint(check_char(\"ab\"))\nprint(check_char(\"aaba\"))\nprint(check_char(\"abc\"))\nprint(check_char(\"abcdef\"))\nprint(check_char(\"abdef\"))\nprint(check_char(\"def\"))\nprint(check_char(\"awel\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"\"))\nprint(check_char(\"\"))\nprint(check_char(\"a\"))\nprint(check_char(\"a\"))\nprint(check_char(\"\"))\nprint(check_char(\"123\"))\nprint(check_char(\"a123\"))\nprint(check_char(\"a123_\"))\nprint(check_char(\"a123_\"))\nprint(check_char(\"abc\"))\nprint(check_char(\"abc\"))\nprint(check_char(\"abc_\"))\nprint(check_char(\"abc_\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123\"))\nprin",
        "num_ids": 1984
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if string[0] == string[-1] else False\n",
        "num_ids": 19
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    char_r = re.search(regex, string)\n    print(char_r)\n    if char_r:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 48
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #str1 = input('enter string:')\n    if (re.match(regex, string)):\n        print('true')\n    else:\n        print('false')\n        \n        \ndef check_char_regex(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #str1 = input('enter string:')\n    if (re.match(regex, string)):\n        print('true')\n    else:\n        print('false')\n",
        "num_ids": 44
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # match = re.match(regex,string)\n    # print(match)\n    # if match:\n    #     return True\n    # else:\n    #     return False\n    return True if re.search(regex, string) else False\n",
        "num_ids": 62
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string or len(string) <= 1:\n        return False\n    if string[0] == string[-1]:\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    # if string is empty\n    if string == None:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    array = sorted([a,b,c])\n    if array[1] == array[2]:\n        return array[1]\n    elif array[1] == array[0] or array[2] == array[0]:\n        return array[1]\n    return (array[1]+array[2])/2\n",
        "num_ids": 77
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    arr = [a,b,c]\n    arr.sort()\n    n = len(arr)\n    if n % 2 == 0:\n        return (arr[n//2-1] + arr[n//2])/2\n    else:\n        return arr[n//2]\n",
        "num_ids": 70
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    return sorted_list[1]\n",
        "num_ids": 26
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a>b:\n        if a>c:\n            if b>c:\n                return a\n            else:\n                return c\n        else:\n            if b>c:\n                return b\n            else:\n                return c\n    else:\n        if b>c:\n            if a>c:\n                return a\n            else:\n                return c\n        else:\n            if a>c:\n                return a\n            else:\n                return c\n",
        "num_ids": 113
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a < b) and (a < c):\n        return a\n    elif (b < a) and (b < c):\n        return b\n    else:\n        return c\n",
        "num_ids": 47
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    if a<b and a<c:\n        median = float(b)\n    elif a>b and a>c:\n        median = float(a)\n    elif b<a and b<c:\n        median = float(c)\n    else:\n        median = float(b)\n    return median\n",
        "num_ids": 105
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a<=b and a<=c:\n        if b<=c:\n            return b\n        else:\n            return c\n    elif b<=a and b<=c:\n        if a<=c:\n            return a\n        else:\n            return c\n    else:\n        if a<=b:\n            if b<=c:\n                return b\n            else:\n                return c\n        else:\n            if b<=c:\n                return b\n            else:\n                return c\n",
        "num_ids": 127
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    print(sorted_list)\n    if sorted_list[1] == sorted_list[2]:\n        return sorted_list[1]\n    elif sorted_list[1] > sorted_list[2]:\n        return sorted_list[1]\n    else:\n        return sorted_list[2]\n",
        "num_ids": 90
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    s = sorted((a,b,c))\n    if s[0] == s[1]:\n        return s[0]\n    if s[0] == s[2]:\n        return s[0]\n    if s[1] == s[2]:\n        return s[1]\n    if s[0] == s[1] and s[0] == s[2]:\n        return s[0]\n    if s[1] == s[2] and s[1] == s[0]:\n        return s[1]\n    if s[0] == s[1] and s[1] == s[2]:\n        return s[1]\n    if s[2] == s[1] and s[1] == s[0]:\n        return s[1]\n    if s[0] == s[2] and s[2] == s[1]:\n        return s[2]\n    if s[1] == s[2] and s[2] == s[0]:\n        return s[2]\n    if s[0] == s[2] and s[2] == s[1]:\n        return s[2]\n    if s[0] == s[1] and s[1] == s[2]:\n        return s[1]\n    return s[1]\n",
        "num_ids": 310
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    total = 0\n    for num in nums:\n        total += sum_of_digits(num)\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        while num!= 0:\n            sum += num % 10\n            num = num // 10\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums = list(map(lambda x: int(x), nums))\n    return sum(list(map(lambda x: x if x < 10 else x - 9, nums)))\n",
        "num_ids": 46
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for number in nums:\n        total += int(str(number)[-1])\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += (num % 10)\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(str(num)[-1])\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        result.append(sum)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += len(str(i))\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in str(nums))\n",
        "num_ids": 19
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = \"\"\n    for i in range(len(test_tup1)):\n        xor += \"{0:b}\".format(int(test_tup1[i]) ^ int(test_tup2[i]))\n    return xor\n",
        "num_ids": 64
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    test_tup = (tuple1[0] ^ tuple2[0], tuple1[1] ^ tuple2[1])\n    return test_tup\n",
        "num_ids": 62
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = 0\n    for i in range(0, len(test_tup1)):\n        xor = xor ^ (test_tup1[i] ^ test_tup2[i])\n    return xor\n",
        "num_ids": 57
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    (a, b) = test_tup1\n    (c, d) = test_tup2\n    # Your code here\n    return (a ^ c, b ^ d)\n",
        "num_ids": 46
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #First check if the tuples are the same size. If not, throw error.\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('The two tuples do not have the same size.')\n    #Iterate over the values in the tuples, \n    #using zip function and map function\n    for value1, value2 in zip(test_tup1, test_tup2):\n        yield operator.xor(value1, value2)\n",
        "num_ids": 120
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup1[1] ^ test_tup2[0] ^ test_tup2[1], \n    test_tup1[0] ^ test_tup1[1] ^ test_tup2[1] ^ test_tup2[1])\n",
        "num_ids": 79
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = 0\n    for i in range(len(test_tup1)):\n        x ^= test_tup1[i]\n    for i in range(len(test_tup2)):\n        x ^= test_tup2[i]\n    return (x)\n",
        "num_ids": 71
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for x,y in zip(test_tup1, test_tup2):\n        result_tuple += (x^y,)\n    return result_tuple\n",
        "num_ids": 50
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count_dict = {}\n    for i in range(0, len(test_list)):\n        if test_list[i] in count_dict:\n            count_dict[test_list[i]] += 1\n        else:\n            count_dict[test_list[i]] = 1\n",
        "num_ids": 71
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # to count the number of unique elements in the list\n    # pass the list as an argument\n    # one variable that stores the number of elements in the list\n    # we need to store the number of unique elements in the list\n    # first we must sort the list\n    # then we must go through the list and count the number of elements in the list\n    # which is the O(n) time complexity\n    # we are going to make a set using set method and then check to see if it is equal to the length of the list\n    # this is the O(1) time complexity\n    \n    # here we are going to make a set\n    my_set = set(test_list)\n",
        "num_ids": 158
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    return len(set(test_list))\n",
        "num_ids": 19
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            count += 1\n    return count",
        "num_ids": 45
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_unique = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                num_unique += 1\n    return num_unique\n",
        "num_ids": 70
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your Code Here\n    a = set(test_list)\n    b = list(a)\n    return len(b)\n",
        "num_ids": 33
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # INPUT: [3, 5, 8, 5, 3, 2, 4, 6, 7, 4, 9]\n    # OUTPUT: 1\n    #  NOTE: Since we are assuming that all the elements in the array are distinct and are in sorted order,\n    #  we can simply count the number of unique values and then return it\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list[i+1:]:\n            count += 1\n    return count\n",
        "num_ids": 128
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    return len(set(test_list))\n",
        "num_ids": 19
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = list(set(test_list))\n    return len(test_list)\n",
        "num_ids": 25
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return(tuple([sum(i) for i in zip_longest(test_tup1, test_tup2, fillvalue=0)]))\n",
        "num_ids": 39
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1_index_1 = test_tup1[0]\n    tup1_index_2 = test_tup1[1]\n    tup2_index_1 = test_tup2[0]\n    tup2_index_2 = test_tup2[1]\n",
        "num_ids": 74
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    d = {}\n    for i in range(len(l1)):\n        d[i] = l1[i]\n    for i in range(len(l2)):\n        d[i+len(l1)] = l2[i]\n    l = list(d.values())\n    return tuple(l)\n",
        "num_ids": 105
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([tup1[i] + tup2[i] for i in range(len(tup1))])\n",
        "num_ids": 32
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple):\n        raise TypeError('The first argument should be a tuple')\n    if not isinstance(test_tup2, tuple):\n        raise TypeError('The second argument should be a tuple')\n    if not isinstance(test_tup1[0], int) or not isinstance(test_tup1[1], int):\n        raise TypeError('The first element of each tuple should be an integer')\n    if not isinstance(test_tup2[0], int) or not isinstance(test_tup2[1], int):\n        raise TypeError('The second element of each tuple should be an integer')\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The tuples should be of equal length')\n    result = tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n    return result\n",
        "num_ids": 226
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    i = 0\n    for x,y in zip(test_tup1,test_tup2):\n        if i == 0:\n            x = x + test_tup2[i]\n        if i == 1:\n            y = y + test_tup1[i]\n        i += 1\n    return x,y\n",
        "num_ids": 81
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    print(type(test_tup1))\n    print(type(test_tup2))\n    print(type(test_tup1[0]))\n    print(type(test_tup1[1]))\n    print(type(test_tup1[2]))\n    print(type(test_tup2[0]))\n    print(type(test_tup2[1]))\n    print(type(test_tup2[2]))\n    return ((test_tup1[0] + test_tup2[0]), (test_tup1[1] + test_tup2[1]), (test_tup1[2] + test_tup2[2]))\n",
        "num_ids": 194
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        # create a new tuple with the elements of the given tuples\n        new_tup = tuple(test_tup1[i] + test_tup2[i])\n        # add this new tuple to the list of new tuples\n        new_tup_list.append(new_tup)\n",
        "num_ids": 98
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    \n    if test_tup1_len!= test_tup2_len:\n        raise ValueError(\"Invalid Input\")\n    \n    else:\n        for i in range(test_tup1_len):\n            tup_sum = test_tup1[i] + test_tup2[i]\n            tup_sum_tuple = tuple(tup_sum)\n            print(tup_sum_tuple)\n",
        "num_ids": 143
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(f\"Minimum of {a} and {b} is: {a}\")\n    else:\n        print(f\"Minimum of {a} and {b} is: {b}\")\nminimum(4,5)\n",
        "num_ids": 62
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    else:\n        return a\nprint(minimum(10,30))\n",
        "num_ids": 31
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n    \n    # OR\n    \n    #return min(a,b)\n    ",
        "num_ids": 31
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a)\n    else:\n        print(b)\nminimum(100,200)\n",
        "num_ids": 32
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # Code here\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 26
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuplex in tuple1 else False\n",
        "num_ids": 15
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in range(len(tuplex)):\n        if tuplex[x] in tuple1:\n            return True\n        else:\n            return False\n",
        "num_ids": 41
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.index(tuple1) is -1:\n        return -1\n    else:\n        return 1\n",
        "num_ids": 32
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.index(tuple1) >= 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 34
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1:\n            print('True')\n            return True\n    print('False')\n    return False\ndef pop_tuple(tuplex):\n    '''\n    Write a function to pop a random element from a tuple.\n    '''\n    return tuplex.pop()\n",
        "num_ids": 11
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1\n",
        "num_ids": 11
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x!= 0:\n        parity ^= x & 1\n        x >>= 1\n    return parity\n",
        "num_ids": 35
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1:\n        return 'odd'\n    else:\n        return 'even'\n",
        "num_ids": 25
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x % 2 == 0):\n        return False\n    else:\n        return True\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x % 2 == 0):\n        return False\n    else:\n        return True\n    \ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x % 2 == 0):\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    a=x\n    while(x): \n        c = x & 1; \n        x = x >> 1; \n        if (a%2!=c): \n            return False; \n    return True; \n",
        "num_ids": 56
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x % 2 == 0): \n        return x \n    else: \n        return x - 1\n",
        "num_ids": 29
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = int(x)\n    if x % 2 == 0:\n        print(x,\" is even\")\n    else:\n        print(x,\" is odd\")\n        \n        \ndef find_First_Negative(x):\n    '''\n    Write a python function to find the first negative number that is occuring in a given list of integers.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(x):\n        if x[i] < 0:\n            return x[i]\n        i += 1\n    \n        \ndef find_First_Negative_Element(x):\n    '''\n    Write a python function to find the first negative element that is occuring in a given list of integers.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(x):\n        if x[i] < 0:\n            return x[i]\n        i += 1\n        \n        \ndef find_Largest_Single_Digit(x):\n    '''\n    Write a python function to find the largest single digit in a given number.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(str(x)):\n        if i == 0:\n            temp = x%10\n        else:\n            temp = x//10\n            temp = x%10\n        if temp < 10:\n            x = x//10\n            x = x%10\n            i -= 1\n            if i == 0:\n                print(x)\n                return x\n        i += 1\n            \n            \ndef find_Maximum_Element(x):\n    '''\n    Write a python function to find the largest element in a given list of integers.\n    '''\n    x = int(x)\n    i = 0\n    temp = x\n    while i < len(x):\n        if temp < x:\n            temp = x\n        x = x%10\n        x = x//10\n        i += 1\n    print(temp)\n    return temp\n    \n        \ndef find_Smallest_Multiple_of_Digits(x):\n    '''\n    Write a python function to find the smallest multiple of given number of digits in a given number.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(str(x)):\n        if i == 0:\n            temp = x%10\n        else:\n            temp = x//10\n            temp = x%10\n        if temp == 0:\n            x = x//10\n            x = x%10\n        i += 1\n    print(x)\n    return x\n    \n    \ndef find_Smallest_Multiple_of_Digits_Method_1(x):\n    '''\n    Write a python function to find the smallest multiple of given number of digits in a given number.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(str(x)):\n        if i == 0:\n            temp = x%10\n        else:\n            temp = x//10\n            temp = x%10\n        if temp == 0:\n            x = x//10\n            x = x%10\n        i += 1\n    return x\n    \n    \ndef find_Smallest_Multiple_of_Digits_Method_2(x):\n    '''\n    Write a python function to find the smallest multiple of given number of digits in a given number.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(str(x)):\n        if i == 0:\n            temp = x%10\n        else:\n            temp = x//10\n            temp = x%10\n        if temp == 0:\n            x = x//10\n            x = x%10\n        i += 1\n    return x\n    \n        \ndef find_Positive_Divisible_By_3(x):\n    '''\n    Write a python function to find the positive divisible by 3 numbers in a given list of integers.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(x):\n        if x[i] % 3 == 0:\n            print(x[i])\n        i += 1\n        \n        \ndef find_Positive_Divisible_By_3_Method_1(x):\n    '''\n    Write a python function to find the positive divisible by 3 numbers in a given list of integers.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(x):\n        if x[i] % 3 == 0:\n            print(x[i])\n            \n            \ndef find_Positive_Divisible_By_3_Method_2(x):\n    '''\n    Write a python function to find the positive divisible by 3 numbers in a given list of integers.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(x):\n        if x[i] % 3 == 0:\n            print(x[i])\n            return\n        i += 1\n        \n        \ndef find_Positive_Divisible_By_3_Method_3(x):\n    '''\n    Write a python function to find the positive divisible by 3 numbers in a given list of integers.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(x):\n        if x[i] % 3 == 0:\n            print(x[i])\n            return\n        i += 1\n        \n    \ndef find_Substring_of_Number(x):\n    '''\n    Write a python function to find the substrings of a number x.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(str(x)):\n        if i == 0:\n            temp = x%10\n        else:\n            temp = x//10\n            temp = x%10\n        if temp == 0:\n            x = x//10\n            x = x%10\n        i += 1\n    print(x)\n    return x\n    \n    \ndef find_Substring_of_Number_Method_1(x):\n    '''\n    Write a python function to find the substrings of a number x.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(str(x)):\n        if i == 0:\n            temp = x%10\n        else:\n            temp = x//10\n            temp = x%10\n        if temp == 0:\n            x = x//10\n            x = x%10\n        i += 1\n    return x\n    \n    \ndef find_Substring_of_Number_Method_2(x):\n    '''\n    Write a python function to find the substrings of a number x.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(str(x)):\n        if i == 0:\n            temp = x%10\n        else:\n            temp = x//10\n            temp = x%10\n        if temp == 0:\n            x = x//10\n            x = x%10\n        i += 1\n    return x\n    \n    \ndef find_Substring_of_Number_Method_3(x):\n    '''\n    Write a python function to find the substrings of a number x.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(str(x)):\n        if i == 0:\n            temp = x%10\n        else:\n            temp = x//10\n            temp = x%10\n        if temp == 0:\n            x = x//10\n            x = x%10\n        i += 1\n    return x\n    \n    \ndef find_Substring_of_Number_Method_4(x):\n    '''\n    Write a python function to find the substrings of a number x.\n    '''\n    x = int(x)\n    i = 0\n    while i < len(str(x)):\n        if i == 0:\n            temp = x%10\n        else:\n            temp = x//10\n            temp = x%10\n        if temp == 0:\n            x = x//10\n            x = x%10\n        i += 1\n    return x\n    \n    \ndef find_Substring_of_Number_Method_5(x):\n    '''\n    Write a python function to find the substrings of a number x.\n    '''\n    x = in",
        "num_ids": 6
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n        \nprint(find_Parity(2)) \nprint(find_Parity(5)) \nprint(find_Parity(8)) \n",
        "num_ids": 62
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of the number {} is even\".format(x))\n    else:\n        print(\"The parity of the number {} is odd\".format(x))\n",
        "num_ids": 49
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    res = 0\n    while x > 0:\n        res = res ^ x & 1\n        x = x >> 1\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n",
        "num_ids": 27
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # if not a number\n    if n < 10:\n        return -1\n    # loop until length of array is >= length of input\n    while len(str(n)) < len(str(input)):\n        n = str(n)[:-1] + str(n)[-1]\n        print(n)\n        # if not a number\n    if n < 10:\n        return -1\n    return n\n",
        "num_ids": 99
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    s2 = s[1:] + s[0]\n    return int(s2 + s[-1] + s[-2])\n",
        "num_ids": 43
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Get the last digit, and make a temp variable to hold it\n    last_digit = n % 10\n    next_num = n // 10\n    \n    # While we have something to add\n    while next_num:\n        # Find the next bigger number\n        bigger_num = next_num % 10\n        \n        # If we have a bigger digit, then we can swap\n        if bigger_num > last_digit:\n            next_num = next_num // 10\n            next_num = next_num * 10 + bigger_num\n            \n        # If we can't swap anymore, we just need to add the number that's already bigger\n        else:\n            next_num = next_num // 10\n        \n    return next_num * 10 + last_digit\n",
        "num_ids": 179
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    ans = n\n    while n > 0:\n        last_digit = n % 10\n        n //= 10\n        n = last_digit * 10 + n\n    return ans\n",
        "num_ids": 44
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    digits = []\n    for char in n_str:\n        digits.append(char)\n    # print(digits)\n    digits.sort(reverse=True)\n    # print(digits)\n    # print(digits[0])\n    # print(digits[1])\n    # print(digits[2])\n    # print(digits[3])\n    # print(digits[4])\n    # print(digits[5])\n    if digits[0] < digits[1]:\n        if digits[0] < digits[2]:\n            if digits[0] < digits[3]:\n                if digits[0] < digits[4]:\n                    if digits[0] < digits[5]:\n                        new_num = int(\"\".join(digits))\n                        return new_num\n    else:\n        return -1\n",
        "num_ids": 212
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    x = 0\n    z = 1\n    for i in range(1, len(n)):\n        x = int(n[z])\n        z += 1\n        y = int(n[i])\n        n = n[:i-1] + str(y) + n[i:]\n    return int(n)\n",
        "num_ids": 87
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n = sorted(n)\n    i = 0\n    while i < len(n) - 1:\n        if n[i] < n[i + 1]:\n            i += 1\n        else:\n            n[i], n[i + 1] = n[i + 1], n[i]\n            i += 2\n    n = \"\".join(n)\n    if n[0] == '0':\n        n = '0'\n    return int(n)\n    \ndef test_rearrange_bigger():\n    assert rearrange_bigger(9322) == 9332\n    assert rearrange_bigger(1234) == 4321\n    assert rearrange_bigger(2147483647) == 2147483648\n    assert rearrange_bigger(123456789) == 123456789\n    assert rearrange_bigger(1) == 2\n    assert rearrange_bigger(0) == 0\n",
        "num_ids": 232
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    number = list(str(n))\n    for i in range(len(number)-1,0,-1):\n        if number[i-1] < number[i]:\n            for j in range(len(number)-1,i-1,-1):\n                if number[j] > number[i-1]:\n                    number[j],number[i-1] = number[i-1],number[j]\n                    break\n            break\n    return int(''.join(number))\n",
        "num_ids": 115
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)-1):\n        if int(n[i]) < int(n[i+1]):\n            return int(n[:i+1])+int(n[i+1:])\n    return n\n",
        "num_ids": 68
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = [int(i) for i in str(n)]\n    l.sort()\n    while len(l)!= 0:\n        if len(l) == 1:\n            l.sort()\n            return int(\"\".join([str(i) for i in l]))\n        if l[-1] == l[-2]:\n            l.pop()\n            l.pop()\n            continue\n        else:\n            l.pop()\n            break\n    return int(\"\".join([str(i) for i in l]))\n",
        "num_ids": 128
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr1 = [(nums1[i], i) for i in range(len(nums1))]\n    arr2 = [(nums2[i], i) for i in range(len(nums2))]\n",
        "num_ids": 54
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Solution: Kadane's Algorithm\n    # \n    # 1. We can find the maximum value of the element in the array \n    # 2. To find the maximum value of the element in the array, we can use Kadane's algorithm.\n    # 3. Since we can get the maximum element value in the array, we can find the minimum value for the second array, \n    #    by using min array and the maximum value of the array for the first array.\n    # 4. If the maximum value for the array is less than the k, we can return the k pairs.\n    # 5. If the maximum value for the array is greater than k, we need to add one more pair to find the \n    #    the k smallest pair.\n    # 6. We start the maximum value from the second array and keep adding to it and the minimum value from the first array.\n    #    and continue until we reach the k elements. \n    # 7. So the maximum value of the array is between these minimum values.\n",
        "num_ids": 230
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # 1. sort and find min\n    nums1.sort()\n    nums2.sort()\n    print(nums1,nums2)\n    i = j = 0\n    res = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] > nums2[j]:\n            j += 1\n        else:\n            if j - i + 1 < k:\n                i += 1\n            else:\n                res.append([nums1[i], nums2[j]])\n                i += 1\n                j += 1\n",
        "num_ids": 145
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    pairs = set()\n    i = 0\n    j = 0\n    while len(pairs) < k and i < len(nums1) and j < len(nums2):\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (abs(nums1[i] - nums2[j]), (nums1[i], nums2[j])))\n        while len(min_heap) > 0 and min_heap[0][0] <= abs(nums1[i] - nums2[j]):\n            _, (x1, x2) = heapq.heappop(min_heap)\n            if (x1, x2) not in pairs:\n                pairs.add((x1, x2))\n                j += 1\n        i += 1\n    while len(min_heap) > 0:\n        _, (x1, x2) = heapq.heappop(min_heap)\n        if (x1, x2) not in pairs:\n            pairs.add((x1, x2))\n    return list(pairs)\n",
        "num_ids": 285
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1 = nums1[:]\n    nums2 = nums2[:]\n    \n    max_heap = []\n    for i in range(k):\n        if not nums1 or not nums2:\n            break\n        if len(nums1) == 1:\n            if len(nums2) == 1:\n                return nums1, nums2\n            else:\n                return nums1, nums2[1:]\n        \n        if len(nums1) == 2:\n            if len(nums2) == 1:\n                return nums1, nums2\n            else:\n                return nums1, nums2[1:]\n            \n        \n        heapq.heappush(max_heap, (-nums1[0], nums1[0], 0))\n        heapq.heappush(max_heap, (-nums2[0], nums2[0], 1))\n        \n        heapq.heapify(max_heap)\n        \n        min_small = heapq.heappop(max_heap)[1]\n        nums1.remove(min_small)\n        nums2.remove(min_small)\n        \n        \n    return []\n",
        "num_ids": 298
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # set up hashmap to record results\n    hash_map = {}\n    for num1 in nums1:\n        for num2 in nums2:\n            if (num1, num2) in hash_map:\n                hash_map[(num1, num2)] += 1\n            else:\n                hash_map[(num1, num2)] = 1\n    # sort the hash map keys by the value of the corresponding key\n    k_values = sorted(hash_map.items(), key=lambda x: x[1])[:k]\n    res = []\n    for pair in k_values:\n        if pair[0][0] in nums1 and pair[0][1] in nums2:\n            res.append((pair[0][0], pair[0][1]))\n    return res\n",
        "num_ids": 192
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for i in range(k):\n        for j in range(len(nums2)):\n            heapq.heappush(pq, (nums1[i] + nums2[j], i, j))\n    result = []\n    while pq:\n        _, i, j = heapq.heappop(pq)\n        result.append((nums1[i], nums2[j]))\n    return result\n",
        "num_ids": 114
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # nums1 = [1,2,3,4,5,6]\n    # nums2 = [2,3,4]\n    # k = 2\n    if not nums1 or not nums2:\n        return []\n    nums1.sort()\n    nums2.sort()\n    # print(nums1,nums2)\n    if k>len(nums2):\n        return []\n    pq = []\n    ret = []\n    for i in nums1:\n        for j in nums2:\n            if len(pq) == k:\n                heapq.heappop(pq)\n            if len(pq) < k:\n                heapq.heappush(pq, j-i)\n                # print(pq)\n            if pq[0]<0:\n                heapq.heappop(pq)\n            ret.append((i,j))\n    return ret\n",
        "num_ids": 230
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    d = {}\n    result = []\n    for i in nums1:\n        d[i] = nums2.count(i)\n    for i in sorted(d, key=lambda x: d[x], reverse=True):\n        if len(heap) < k:\n            heapq.heappush(heap, (d[i], i))\n        else:\n            if heap[0][0] == d[i]:\n                heapq.heappushpop(heap, (d[i], i))\n    \n    while heap:\n        pair = heapq.heappop(heap)\n        result.append((pair[1], pair[0]))\n    return result\n",
        "num_ids": 202
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    '''\n    heap = []\n    pairs = 0\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n    \n    while k and heap:\n        _, num1, num2 = heapq.heappop(heap)\n        pairs += 1\n        if pairs == k:\n            return num1, num2\n    '''\n    # build heap (1)\n    heap = [(num1 + num2, num1, num2) for num1, num2 in zip(nums1, nums2)]\n    heapq.heapify(heap)\n",
        "num_ids": 58
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][0] < min_product:\n                min_product = list1[i][0]*list1[j][0]\n    return min_product\n",
        "num_ids": 95
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    min_val = list1[0][0] * list1[0][1]\n    min_i = 0\n    \n    for i in range(1, len(list1)):\n        if list1[i][0] * list1[i][1] < min_val:\n            min_val = list1[i][0] * list1[i][1]\n            min_i = i\n            \n    return min_i\n    \n",
        "num_ids": 110
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    from functools import reduce\n    \n    if not list1:\n        raise ValueError('List cannot be empty')\n    \n    product = reduce((lambda x, y: x * y),list1)\n    \n    min_prod = product\n    min_index = -1\n    \n    for i in range(len(list1)):\n        if list1[i][0] < min_prod:\n            min_prod = list1[i][0]\n            min_index = i\n        elif list1[i][1] < min_prod:\n            min_prod = list1[i][1]\n            min_index = i\n    \n    print('Minimum product is {} and its index is {}'.format(min_prod,min_index))\n    \n    return min_prod\n    \nmin_product_tuple([(10,20),(100,200),(10,30)])\nmin_product_tuple([(30,100),(10,20),(100,200)])\nmin_product_tuple([(30,100),(100,200),(10,20)])\nmin_product_tuple([(10,20),(100,200),(10,30)])\n",
        "num_ids": 294
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    tuple_list = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][1] > list1[j][1]:\n                tuple_list.append([list1[i],list1[j]])\n    tuple_list = sorted(tuple_list, key = lambda x: x[0][1])\n    return tuple_list[0]\n",
        "num_ids": 119
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    x = min(list1, key=lambda y: y[0]*y[1])\n    return (x[0]*x[1])\n",
        "num_ids": 38
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = 10000000\n    min_tuple = ()\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if min > (list1[i][0]*list1[j][1]) and (list1[i][0]*list1[j][1])!= 0:\n                min = (list1[i][0]*list1[j][1])\n                min_tuple = (list1[i][0],list1[j][1])\n    print(min_tuple)\n    return min\n",
        "num_ids": 141
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    import math\n    # checking if the list is empty\n    if len(list1) == 0:\n        print('The input list is empty')\n        return\n    # checking if the list is not empty\n    else:\n        list1_copy = list1.copy()\n        min_product_list = []\n        # if list has only one element, then the product will be 1\n        if len(list1_copy) == 1:\n            min_product_list.append(list1_copy[0][0])\n            min_product_list.append(list1_copy[0][1])\n            min_product_list.append(1)\n            return min_product_list\n        # checking if the list has more than one element\n        else:\n            # list with only one element\n            if len(list1_copy) == 2:\n                min_product_list.append(list1_copy[0][0])\n                min_product_list.append(list1_copy[0][1])\n                min_product_list.append(math.prod(list1_copy[0]))\n                return min_product_list\n            # list with more than one element\n            else:\n                for i in range(len(list1_copy)-1):\n                    # list with only one element\n                    if len(list1_copy) == 2:\n                        min_product_list.append(list1_copy[i][0])\n                        min_product_list.append(list1_copy[i][1])\n                        min_product_list.append(math.prod(list1_copy[i]))\n                        return min_product_list\n                    # list with more than one element\n                    else:\n                        for j in range(len(list1_copy[i])-1):\n                            # list with only one element\n                            if len(list1_copy) == 2:\n                                min_product_list.append(list1_copy[i][j])\n                                min_product_list.append(list1_copy[i][j+1])\n                                min_product_list.append(math.prod(list1_copy[i]))\n                                return min_product_list\n                            # list with more than one element\n                            else:\n                                for k in range(len(list1_copy[i][j])-1):\n                                    # list with only one element\n                                    if len(list1_copy) == 2:\n                                        min_product_list.append(list1_copy[i][j][k])\n                                        min_product_list.append(list1_copy[i][j+1][k])\n                                        min_product_list.append(math.prod(list1_copy[i]))\n                                        return min_product_list\n                                    # list with more than one element\n                                    else:\n                                        for l in range(len(list1_copy[i][j][k])-1):\n                                            # list with only one element\n                                            if len(list1_copy) == 2:\n                                                min_product_list.append(list1_copy[i][j][k][l])\n                                                min_product_list.append(list1_copy[i][j+1][k][l])\n                                                min_product_list.append(math.prod(list1_copy[i]))\n                                                return min_product_list\n                                            # list with more than one element\n                                            else:\n                                                for m in range(len(list1_copy[i][j][k][l])-1):\n                                                    # list with only one element\n                                                    if len(list1_copy) == 2:\n                                                        min_product_list.append(list1_copy[i][j][k][l][m])\n                                                        min_product_list.append(list1_copy[i][j+1][k][l][m])\n                                                        min_product_list.append(math.prod(list1_copy[i]))\n                                                        return min_product_list\n                                                    # list with more than one element\n                                                    else:\n                                                        for n in range(len(list1_copy[i][j][k][l][m])-1):\n                                                            # list with only one element\n                                                            if len(list1_copy) == 2:\n                                                                min_product_list.append(list1_copy[i][j][k][l][m][n])\n                                                                min_product_list.append(list1_copy[i][j+1][k][l][m][n])\n                                                                min_product_list.append(math.prod(list1_copy[i]))\n                                                                return min_product_list\n                                                        # list with more than one element\n                                                        else:\n                                                            # list with only one element\n                                                            if len(list1_copy) == 2:\n                                                                min_product_list.append(list1_copy[i][j][k][l][m][n])\n                                                                min_product_list.append(list1_copy[i][j+1][k][l][m][n])\n                                                                min_product_list.append(math.prod(list1_copy[i]))\n                                                                return min_product_list\n                                                            # list with more than one element\n                                                            else:\n                                                                for o in range(len(list1_copy[i][j][k][l][m][n])-1):\n                                                                    # list with only one element\n                                                                    if len(list1_copy) == 2:\n                                                                        min_product_list.append(list1_copy[i][j][k][l][m][n][o])\n                                                                        min_product_list.append(list1_copy[i][j+1][k][l][m][n][o])\n                                                                        min_product_list.append(math.prod(list1_copy[i]))\n                                                                        return min_product_list\n                                                                    # list with more than one element\n                                                                    else:\n                                                                        # list with only one element\n                                                                        if len(list1_copy) == 2:\n                                                                            min_product_list.append(list1_copy[i][j][k][l][m][n][o])\n                                                                            min_product_list.append(list1_copy[i][j+1][k][l][m][n][o])\n                                                                            min_product_list.append(math.prod(list1_copy[i]))\n                                                                            return min_product_list\n                                                                        # list with more than one element\n                                                                        else:\n                                                                            for p in range(len(list1_copy[i][j][k][l][m][n][o])-1):\n                                                                                # list with only one element\n                                                                                if len(list1_copy) == 2:\n                                                                                    min_product_list.append(list1_copy[i][j][k][l][m][n][o][p])\n                                                                                    min_product_list.append(list1_copy[i][j+1][k][l][m][n][o][p])\n                                                                                    min_product_list.append(math.prod(list1_copy[i]))\n                                                                                    return min_product_list\n                                                                                # list with more than one element\n                                                                                else:\n                                                                                    # list with only one element\n                                                                                    if len(list1_copy) == 2:\n                                                                                        min_product_list.append(list1_copy[i][j][k][l][m][n][o][p])\n                                                                                        min_product_list.append(list1_copy[i][j+1][k][l][m][n][o][p])\n                                                                                        min_product_list.append(math.prod(list1_copy[i]))\n                                                                                        return min_product_list\n                                                                                    # list with more than one element\n                                                                                    else:\n                                                                                        for q in range(len(list1_copy[i][j][k][l][m][n][o][p])-1):\n                                                                                            # list with only one element\n                                                                                            if len(list1_copy) == 2:\n                                                                                                min_product_list.append(list1_copy[i][j][k][l]",
        "num_ids": 1972
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if result > list1[i][0] * list1[i][1]:\n            result = list1[i][0] * list1[i][1]\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    min_product = list1[0]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if min_product[0]*list1[i][0] < min_product[0]*list1[j][0]:\n                min_product = list1[i]\n    return min_product\n",
        "num_ids": 103
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] > list1[j][0]:\n                max1 = list1[i][0]\n            else:\n                max1 = list1[j][0]\n            if list1[i][1] > list1[j][1]:\n                max2 = list1[i][1]\n            else:\n                max2 = list1[j][1]\n            # print(max1, max2)\n            temp = max1 * max2\n            if temp < min_product:\n                min_product = temp\n    print(min_product)\n    return\n    \n",
        "num_ids": 173
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if min > i:\n            min = i\n    return min\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]<minval:\n            minval=listval[i]\n    return minval\n    \n",
        "num_ids": 56
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mval = listval[0]\n    for i in range(1, len(listval)):\n        if mval > listval[i]:\n            mval = listval[i]\n    return mval\n",
        "num_ids": 53
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    #return min(listval)\n    \n    #return min(min(x) for x in listval)\n    \n    #return min(x for x in listval if isinstance(x,int))\n    \n    #return min(x for x in listval if isinstance(x,str))\n    \n    #return min(x for x in listval if isinstance(x,tuple))\n    \n    #return min(x for x in listval if isinstance(x,dict))\n    \n    #return min(x for x in listval if isinstance(x,set))\n    \n    #return min(x for x in listval if isinstance(x,float))\n    \n    #return min(x for x in listval if isinstance(x,bool))\n    \n    return min(x for x in listval if isinstance(x,list))\n    \n    return min(x for x in listval if isinstance(x,tuple))\n    \n    return min(x for x in listval if isinstance(x,set))\n    \n    return min(x for x in listval if isinstance(x,float))\n    \n    return min(x for x in listval if isinstance(x,bool))\n",
        "num_ids": 292
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return float('inf')\n    else:\n        return min(listval)\n",
        "num_ids": 28
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]<min_val:\n            min_val=listval[i]\n    return min_val\n",
        "num_ids": 58
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    m = listval[0]\n    for i in listval:\n        if i < m:\n            m = i\n    return m\n",
        "num_ids": 35
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = \"\"\n    for index, char in enumerate(word):\n        if char == \"-\" or char.isupper():\n            result += char.upper()\n        else:\n            result += char\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    word = \"\".join(word)\n    return word[0].lower() + word[1:]\n",
        "num_ids": 36
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('_', '', word)\n    word = word.title()\n    word = re.sub('__', '', word)\n    return word\n    \ndef main():\n    print(snake_to_camel('camelCase'))\n    print(snake_to_camel('i_am_crazy'))\n    print(snake_to_camel('crazy_funky_fancy'))\n    print(snake_to_camel('crazy_funky_fancy_'))\n",
        "num_ids": 127
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # result = ''\n    # word = word.split('_')\n    # for i in word:\n    #     result = result + i.title()\n    # return result\n",
        "num_ids": 44
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('([a-z])([A-Z])', r'\\1 \\2', word)\n    return word[0].upper() + word[1:]\n",
        "num_ids": 45
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    print(word)\n    camel_case = ''\n    for i in range(len(word)):\n        camel_case += word[i].capitalize()\n    print(camel_case)\n    return camel_case\n",
        "num_ids": 67
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first_space = word.find('_')\n    first_lower = first_space - 1\n    if first_lower == -1:\n        return word\n    return word[first_lower] + word[first_space+1:].lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\2_\\1', word).lower()\nclass Solution:\n    def myAtoi(self, str: str) -> int:\n        '''\n        Write a program to convert a string to an integer.\n        \n        The function should support both numeric strings and non-numeric strings.\n        \n        If the string contains leading whitespace characters, \n        then the function should discard them.\n        \n        If the string does not contain any leading whitespace characters, \n        then the function should return 0 if the string is empty.\n        \n        Note: Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\u2212231,  231 \u2212 1]. \n        For the purpose of this problem, assume that your function returns 0 when the conversion \n        results in a number outside of the range.\n        \n        \n        Example 1:\n        \n        Input: \"42\"\n        Output: 42\n        \n        Example 2:\n        \n        Input: \"   -42\"\n        Output: -42\n        Explanation: The first non-whitespace character is '-', which is the minus sign.\n                     Then take as many numerical digits as possible, which gets 42.\n        \n        Example 3:\n        \n        Input: \"4193 with words\"\n        Output: 4193\n        Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.\n        \n        Example 4:\n        \n        Input: \"words and 987\"\n        Output: 0\n        Explanation: The first non-whitespace character is 'w', which is not a numerical \n                     digit or a +/- sign. Therefore no valid conversion could be performed.\n        \n        Example 5:\n        \n        Input: \"-91283472332\"\n        Output: -2147483648\n        Explanation: The number \"-91283472332\" is out of the range of a 32-bit signed integer.\n                     Thefore INT_MIN (\u2212231) is returned.\n        \n        \n        Constraints:\n        \n        * 1 <= s.length <= 200\n        * s consists of English letters (lower-case and upper-case), digits (0-9), '+', '-' (both lower-case), or '.'.\n        * There is at least one character in s.\n        * s is guaranteed to be a valid numeric string.\n        * \n        \n        '''\n        try:\n            s = str.lstrip()\n            s = s.split('+')\n            if len(s) == 1:\n                s = s[0].lstrip()\n                if len(s) == 0:\n                    return 0\n                if s[0] == '-':\n                    s = s[1:]\n                    neg = True\n                else:\n                    neg = False\n                result = int(s)\n                if neg:\n                    result *= -1\n                return result\n            for i in range(len(s)):\n                s[i] = s[i].lstrip()\n                if s[i][0] == '-':\n                    s[i] = s[i][1:]\n                    neg = True\n                else:\n                    neg = False\n                s[i] = int(s[i])\n            if neg:\n                return -s[0]\n            else:\n                return s[0]\n        except:\n            return 0\n",
        "num_ids": 228
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(str.title, re.sub('(.)([A-Z][a-z]+)', r'\\2 \\1', word).split(' ')))\n",
        "num_ids": 45
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(str.capitalize, word.split('_')))\n",
        "num_ids": 23
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('-','')\n    word = word.title()\n    \n    return word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    word = re.sub(r'[A-Z]', lambda x: x.group(0).lower(), word)\n    word = re.sub(r'[^a-zA-Z0-9]+', lambda x: \"_\" + x.group(0).lower(), word)\n    \n    return word\n",
        "num_ids": 76
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(0, len(l)):\n        if l[i] % 2 == 1:\n            l.remove(l[i])\n    return l\n",
        "num_ids": 42
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(0,len(l)-1,2):\n        l.pop(i)\n    return l\n",
        "num_ids": 31
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd =[]\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            odd.append(l[i])\n    l.clear()\n    l = odd\n    return l\n",
        "num_ids": 57
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [1,3,5,7,2]\n    print(l)\n    for i in range(len(l)):\n        if i%2==0:\n            l.remove(l[i])\n    print(l)\n    return l\n",
        "num_ids": 64
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2 == 1:\n            l.remove(i)\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    a = 0\n    l1 = []\n    while a < len(l):\n        if l[a] % 2 == 0:\n            l1.append(l[a])\n        a += 1\n    return l1\n",
        "num_ids": 55
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [2, 3, 5, 7, 11, 13, 17, 19]\n    return l[:11] + l[12:]\n    \ndef odd_even(l):\n    '''\n    Write a python function to find the even and odd numbers from a given list.\n    '''\n    l = [2, 3, 5, 7, 11, 13, 17, 19]\n    return len(l[::2]), len(l[1::2])\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)-1, -1, -1):\n        if l[i]%2!= 0:\n            l.remove(l[i])\n    return l\n    \ndef generate_key():\n    '''\n    Write a python function to generate a key using the user input ciphertext\n    '''\n    ciphertext = input(\"Enter the cipher text:\")\n    key = input(\"Enter the key to generate the key:\")\n    key = key.upper()\n    key = key.replace(\" \", \"\")\n    key = key.replace(\"J\", \"I\")\n    key = key.replace(\"I\", \"J\")\n    key = key.replace(\"L\", \" \")\n    key = key.replace(\" \", \"\")\n    key = key.replace(\".\", \"\")\n    key = key.replace(\"?\", \"\")\n    key = key.replace(\",\", \"\")\n    key = key.replace(\"'\", \"\")\n    key = key.replace(\"|\", \"\")\n    key = key.replace(\";\", \"\")\n    key = key.replace(\":\",\"\")\n    key = key.replace(\"!\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"=\",\"\")\n    key = key.replace(\"(\",\"\")\n    key = key.replace(\")\",\"\")\n    key = key.replace(\"/\",\"\")\n    key = key.replace(\"[\",\"\")\n    key = key.replace(\"]\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n    key = key.replace(\"$\",\"\")\n    key = key.replace(\"%\",\"\")\n    key = key.replace(\"&\",\"\")\n    key = key.replace(\"*\",\"\")\n    key = key.replace(\"_\",\"\")\n    key = key.replace(\"-\",\"\")\n    key = key.replace(\"+\",\"\")\n    key = key.replace(\"^\",\"\")\n    key = key.replace(\"`\",\"\")\n    key = key.replace(\"{\",\"\")\n    key = key.replace(\"}\",\"\")\n    key = key.replace(\"\\\\\",\"\")\n    key = key.replace(\"|\",\"\")\n    key = key.replace(\"~\",\"\")\n    key = key.replace(\"#\",\"\")\n",
        "num_ids": 1941
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for num in l:\n        if num%2!=0:\n            l.remove(num)\n    return l\n",
        "num_ids": 31
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return l[::2]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    index_of_element = len(list1) - 1 - n\n    return list1[index_of_element]\n",
        "num_ids": 31
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Code here\n    # print(\"Extracting nth element from the list\")\n    list1.sort()\n    return list1[n-1]\n",
        "num_ids": 39
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i==n:\n            return list1[i]\n",
        "num_ids": 30
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # print(list1)\n    if n == 0 or len(list1) == 0:\n        return None\n",
        "num_ids": 29
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    print(list1)\n    #print(list1[n-1])\n    return list1[n-1]\n",
        "num_ids": 31
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    s = sorted(list1, key=lambda x:x[1])\n    return s[n][0]\n",
        "num_ids": 29
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n - 1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i]==list1[j]:\n                return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag = False\n    for item in list1:\n        if item in list2:\n            flag = True\n    return flag\n",
        "num_ids": 32
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    a = 0\n    for i in list1:\n        if i in list2:\n            a = 1\n            break\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    check = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                check = True\n    if check == True:\n        return True\n    else:\n        return False\n    \ndef factorial(n):\n    # print(\"Factorial\",n)\n    # if n == 1 or n == 0:\n    #     return 1\n    # else:\n    #     return n * factorial(n-1)\n    # print(factorial(n))\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \n",
        "num_ids": 149
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!=len(list2):\n        return \"Lengths of two sequences are not same\"\n",
        "num_ids": 29
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    max_prod = 1\n    \n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)): \n            if arr[i]*arr[j] > max_prod: \n                max_prod = arr[i]*arr[j] \n                \n    print(max_prod) \n",
        "num_ids": 92
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    arr.sort() \n    for i in range(0, n-1): \n        if arr[i] > 0: \n            return arr[i] * arr[i+1] \n    return -1\n",
        "num_ids": 63
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = []\n    arr = arr.sort()\n    return max(arr)\n",
        "num_ids": 22
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product_max=[]\n    arr_sort = sorted(arr)\n    i=0\n    while i<len(arr):\n        product_max.append(arr_sort[i]*arr_sort[i+1])\n        i+=2\n    return product_max\n",
        "num_ids": 67
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    min_prod = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if(arr[i] * arr[j] > max_prod):\n                max_prod = arr[i] * arr[j]\n            if(arr[i] * arr[j] < min_prod):\n                min_prod = arr[i] * arr[j]\n    print(\"Maximum product:\", max_prod)\n    print(\"Minimum product:\", min_prod)\n",
        "num_ids": 142
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    count = 1\n    prod = arr[0] * arr[1]\n    for i in range(len(arr)-1):\n        if arr[i] * arr[i+1] > prod:\n            prod = arr[i] * arr[i+1]\n            count = 2\n        elif arr[i] * arr[i+1] == prod:\n            count += 1\n    return count\n",
        "num_ids": 109
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = 0\n    arr.sort()\n    for i in range(len(arr)):\n        temp = arr[i]\n        for j in range(i+1,len(arr)):\n            if arr[j]*temp > res:\n                res = arr[j]*temp\n    print(res)\n        \n    \nif __name__ == \"__main__\":\n    arr = list(map(int, input().split()))\n    max_Product(arr)\n",
        "num_ids": 115
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product=arr[0]*arr[1]\n    arr_len = len(arr) \n    i = 0 \n    while (i < arr_len): \n        j = 0\n        while (j < arr_len): \n            if (arr[i] * arr[j] > max_product and i!= j): \n                max_product = arr[i] * arr[j]\n            j = j + 1\n        i = i + 1\n    print(max_product)\n",
        "num_ids": 122
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    arr.sort()\n    max_prod = arr[0] * arr[1]\n    \n    for i in range(len(arr)-1):\n        temp = arr[i] * arr[i+1]\n        if temp > max_prod:\n            max_prod = temp\n        \n    return max_prod\n",
        "num_ids": 83
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return max(set(Input), key = Input.count) \n",
        "num_ids": 18
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def common_first_element(Input):\n        lst = []\n        for i in range(len(Input)):\n            if isinstance(Input[i][0], str):\n                lst.append(Input[i][0])\n        # print(lst)\n        common = set(lst)\n        return common\n    Input = common_first_element(Input)\n    return Input",
        "num_ids": 94
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    arr=[]\n    new=[]\n    new1=[]\n    for i in range(len(Input)): \n        if len(arr)==0: \n            arr.append(Input[i][0]) \n        elif arr[0]!= Input[i][0]: \n            arr.append(Input[i][0]) \n            new.append(arr) \n            arr=[] \n    for i in range(len(new)): \n        arr1=new[i][0] \n        for j in range(len(Input)): \n            if arr1==Input[j][0]: \n                new1.append(Input[j]) \n    return new1\n",
        "num_ids": 168
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    res = []\n    for i in range(len(Input)):\n        common = set(Input[i]) & set(Input[i+1])\n        if len(common) > 0:\n            res.append(common)\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    if not Input: \n        return None\n    \n    first = max(Input, key=lambda x: x[0])[0]\n    \n    return list(filter(lambda x: x[0]==first, Input))\n",
        "num_ids": 58
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return (tuple(set([i[0] for i in Input])))",
        "num_ids": 20
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_list = []\n    for i in range(len(Input)):\n        if Input[i][0] not in new_list:\n            new_list.append(Input[i][0])\n",
        "num_ids": 50
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    ans=[]\n    for i in Input:\n        ans.append(i[0])\n    \n    return ans\n",
        "num_ids": 30
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input= [('a','a'),('a','b'),('a','c'),('a','d'),('b','b'),('b','c'),('b','d'),('c','c'),('c','d')]\n    # Output=[('a','a'),('a','b'),('a','c'),('a','d')]\n    # Output=[('b','c')]\n    # Output=[('b','d')]\n    Output=[]\n    Input=sorted(Input, key=lambda x: x[0])\n    Input=sorted(Input, key=lambda x: x[1])\n    # print(Input)\n    i=0\n    while i<len(Input):\n        if Input[i][1]==Input[i+1][1]:\n            Output.append(Input[i])\n        i+=1\n    # print(Output)\n    return Output\n",
        "num_ids": 208
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    res = {}\n    for i in Input:\n        if i[0] in res:\n            res[i[0]] += 1\n        else:\n            res[i[0]] = 1\n    for i in Input:\n        if res[i[0]] == 1:\n            print(i[0])\n            break\n    return res\n",
        "num_ids": 82
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    len_lst = []\n    max_len = 0\n    for i in range(len(lst)):\n        len_lst.append(len(lst[i]))\n    for i in range(len(len_lst)):\n        if len_lst[i] > max_len:\n            max_len = len_lst[i]\n    for i in range(len(len_lst)):\n        if len_lst[i] == max_len:\n            return lst[i]\n",
        "num_ids": 128
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst)\n",
        "num_ids": 10
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    for ele in lst:\n        if len(ele) > len(max_ele):\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_2(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_3(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_4(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_5(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_6(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_7(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_8(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_9(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_10(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_11(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_12(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_13(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_14(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_15(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_16(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_17(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_18(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_19(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n    \ndef Find_Max_20(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    max_len = len(lst[0])\n    for ele in lst:\n        if len(ele) ",
        "num_ids": 41
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            Max = i\n    return Max\n    \n",
        "num_ids": 50
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    l=0\n    max_lst =[]\n    for i in range(0,len(lst)):\n        if len(lst[i])>l:\n            l=len(lst[i])\n            max_lst.append(lst[i])\n    return max_lst\n    \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    l=0\n    min_lst =[]\n    for i in range(0,len(lst)):\n        if len(lst[i])<l:\n            l=len(lst[i])\n            min_lst.append(lst[i])\n    return min_lst\n    \ndef Maximum_Item_In_a_List(lst):\n    '''\n    Write a python function to find the maximum item in the list.\n    '''\n    max_val=0\n    for i in range(0,len(lst)):\n        if max_val<lst[i]:\n            max_val=lst[i]\n    return max_val\n    \ndef Minimum_Item_In_a_List(lst):\n    '''\n    Write a python function to find the minimum item in the list.\n    '''\n    min_val=0\n    for i in range(0,len(lst)):\n        if min_val>lst[i]:\n            min_val=lst[i]\n    return min_val\n    \ndef Number_Of_Time_Element_Occurs_In_a_List(lst,n):\n    '''\n    Write a python function to find the number of times an element occurs in a list.\n    '''\n    count=0\n    for i in range(0,len(lst)):\n        if lst[i]==n:\n            count+=1\n    return count\n    \ndef Find_Pair_with_Smallest_Difference(lst1,lst2):\n    '''\n    Write a python function to find the pair in a sorted list with smallest difference.\n    '''\n    lst1=sorted(lst1)\n    lst2=sorted(lst2)\n    min_diff=0\n    diff=0\n    p1=0\n    p2=0\n    for i in range(0,len(lst1)):\n        if lst1[i]!=lst2[i]:\n            diff=lst1[i]-lst2[i]\n            if min_diff>diff:\n                min_diff=diff\n                p1=i\n                p2=i\n    return lst1[p1],lst2[p2],min_diff\n    \ndef Find_Pair_With_Maximum_Difference(lst1,lst2):\n    '''\n    Write a python function to find the pair in a sorted list with maximum difference.\n    '''\n    lst1=sorted(lst1)\n    lst2=sorted(lst2)\n    max_diff=0\n    diff=0\n    p1=0\n    p2=0\n    for i in range(0,len(lst1)):\n        if lst1[i]!=lst2[i]:\n            diff=lst1[i]-lst2[i]\n            if max_diff<diff:\n                max_diff=diff\n                p1=i\n                p2=i\n    return lst1[p1],lst2[p2],max_diff\n    \ndef Find_Pair_With_Smallest_Absolute_Difference(lst1,lst2):\n    '''\n    Write a python function to find the pair in a sorted list with smallest absolute difference.\n    '''\n    lst1=sorted(lst1)\n    lst2=sorted(lst2)\n    min_diff=0\n    diff=0\n    p1=0\n    p2=0\n    for i in range(0,len(lst1)):\n        if lst1[i]!=lst2[i]:\n            diff=abs(lst1[i]-lst2[i])\n            if min_diff>diff:\n                min_diff=diff\n                p1=i\n                p2=i\n    return lst1[p1],lst2[p2],min_diff\n    \ndef Find_Pair_With_Maximum_Absolute_Difference(lst1,lst2):\n    '''\n    Write a python function to find the pair in a sorted list with maximum absolute difference.\n    '''\n    lst1=sorted(lst1)\n    lst2=sorted(lst2)\n    max_diff=0\n    diff=0\n    p1=0\n    p2=0\n    for i in range(0,len(lst1)):\n        if lst1[i]!=lst2[i]:\n            diff=abs(lst1[i]-lst2[i])\n            if max_diff<diff:\n                max_diff=diff\n                p1=i\n                p2=i\n    return lst1[p1],lst2[p2],max_diff\n    \ndef Find_First_N_Occurances_in_a_List(lst,n):\n    '''\n    Write a python function to find the first N occurences in a list.\n    '''\n    count=0\n    for i in range(0,len(lst)):\n        if lst[i]==n:\n            count+=1\n            if count>=n:\n                return count\n    return count\n    \ndef Find_First_N_Frequent_Elements_in_a_List(lst,n):\n    '''\n    Write a python function to find the first N frequent elements in a list.\n    '''\n    freq=[]\n    lst=sorted(lst)\n    lst_freq=[]\n    for i in range(0,len(lst)):\n        if lst[i] not in lst_freq:\n            lst_freq.append(lst[i])\n    while(len(lst_freq)<n):\n        val=0\n        for i in range(0,len(lst)):\n            if lst[i] not in lst_freq:\n                val=lst[i]\n        lst_freq.append(val)\n    for i in range(0,n):\n        freq.append(lst_freq[i])\n    return freq\n    \ndef Find_First_N_Common_Elements_in_a_List(lst1,lst2,n):\n    '''\n    Write a python function to find the first N common elements in two list.\n    '''\n    lst1=sorted(lst1)\n    lst2=sorted(lst2)\n    common=[]\n    for i in range(0,len(lst1)):\n        if lst1[i] in lst2 and lst1[i] not in common:\n            common.append(lst1[i])\n    for i in range(0,n):\n        if len(common)==n:\n            return common\n    return common\n    \ndef Find_Nth_To_Last_Occurance_in_a_List(lst,n):\n    '''\n    Write a python function to find the nth to last element in a list.\n    '''\n    lst=sorted(lst)\n    count=0\n    lst_last=[]\n    for i in range(0,len(lst)):\n        if lst[i] not in lst_last:\n            lst_last.append(lst[i])\n    return lst_last[-n]\n    \ndef Find_Common_Elements_in_two_lists(lst1,lst2):\n    '''\n    Write a python function to find the common elements in two lists.\n    '''\n    lst1=sorted(lst1)\n    lst2=sorted(lst2)\n    common=[]\n    for i in range(0,len(lst1)):\n        if lst1[i] in lst2 and lst1[i] not in common:\n            common.append(",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_val = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])>=len(max_val):\n            max_val = lst[i]\n    return max_val\n",
        "num_ids": 63
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i])>=max:\n            max = len(lst[i])\n            index = i\n    return lst[index]\n",
        "num_ids": 62
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxi = lst[0]\n    for i in lst:\n        if(len(i)>len(maxi)):\n            maxi = i\n    return maxi\n",
        "num_ids": 46
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n    for i in lst:\n        if len(i) == max:\n            return i\n            break\n    return 'None'\n        \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    for i in lst:\n        if len(i) == min:\n            return i\n            break\n    return 'None'\n        \ndef Find_Len(lst): \n    '''\n    Write a python function to find the length of a list.\n    '''\n    for i in lst:\n        return len(i)\n    \ndef Replace_Str(lst, x, y): \n    '''\n    Write a python function to replace a string in a list.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i].replace(x, y)\n    return lst\n        \ndef Remove_Char(lst, x): \n    '''\n    Write a python function to remove a character from a string.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i].replace(x,'')\n    return lst\n        \ndef Merge_Two_Lists(lst1, lst2): \n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    merged_list = []\n    while len(lst1) > 0 and len(lst2) > 0:\n        if lst1[0] <= lst2[0]:\n            merged_list.append(lst1.pop(0))\n        else:\n            merged_list.append(lst2.pop(0))\n    merged_list.extend(lst1)\n    merged_list.extend(lst2)\n    return merged_list\n        \ndef Merge_Two_Sorted_Lists(lst1, lst2): \n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    merged_list = []\n    while len(lst1) > 0 and len(lst2) > 0:\n        if lst1[0] <= lst2[0]:\n            merged_list.append(lst1.pop(0))\n        else:\n            merged_list.append(lst2.pop(0))\n    merged_list.extend(lst1)\n    merged_list.extend(lst2)\n    return merged_list\n        \ndef Merge_Sorted_Lists(lst1, lst2): \n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    merged_list = []\n    while len(lst1) > 0 and len(lst2) > 0:\n        if lst1[0] <= lst2[0]:\n            merged_list.append(lst1.pop(0))\n        else:\n            merged_list.append(lst2.pop(0))\n    merged_list.extend(lst1)\n    merged_list.extend(lst2)\n    return merged_list\n    \ndef Reverse_List(lst): \n    '''\n    Write a python function to reverse a list.\n    '''\n    reverse_list = lst[::-1]\n    return reverse_list\n        \ndef Remove_Duplicates(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            lst.pop(i+1)\n    return lst\n        \ndef Remove_Duplicates_From_List(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = []\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            temp_lst.append(lst[i])\n    return temp_lst\n        \ndef Remove_Duplicates_From_List_Without_Using_Set(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = []\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            temp_lst.append(lst[i])\n    return temp_lst\n        \ndef Remove_Duplicates_From_List_Without_Using_Set_Using_Map(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = []\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            temp_lst.append(lst[i])\n    return temp_lst\n        \ndef Remove_Duplicates_From_List_Using_Map(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = {}\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            temp_lst[lst[i]] = 0\n    return temp_lst\n        \ndef Remove_Duplicates_From_List_Using_Map_Using_Set(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = {}\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            temp_lst[lst[i]] = 0\n    return temp_lst\n        \ndef Remove_Duplicates_From_List_Using_Map_Without_Using_Set(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = {}\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            temp_lst[lst[i]] = 1\n    return temp_lst\n        \ndef Remove_Duplicates_From_List_Using_Map_Without_Using_Set_Using_Set(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = {}\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            temp_lst[lst[i]] = 1\n    return temp_lst\n    \ndef Remove_Duplicates_From_List_Using_Set(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = set()\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            temp_lst.add(lst[i])\n    return temp_lst\n        \ndef Remove_Duplicates_From_List_Using_Set_Without_Using_Map(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = set()\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            temp_lst.add(lst[i])\n    return temp_lst\n    \ndef Remove_Duplicates_From_List_Using_Set_Without_Using_Set(lst): \n    '''\n    Write a python function to remove all duplicates from a list.\n    '''\n    temp_lst = set()\n    for i in range(len(lst)-1):",
        "num_ids": 24
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max_len = 0\n    Max = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i])>Max_len:\n            Max_len = len(lst[i])\n            Max = lst[i]\n    return Max\n",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Creating an empty list\n    result_list = []\n    # Appending the rounded numbers to the new list\n    for number in list1:\n        number = round(number)\n        result_list.append(number)\n    # Calculating the total sum\n    total = sum(result_list)\n    # Printing the result\n    print(f'The total sum of all numbers rounded to their nearest integer is: {total}.')\n",
        "num_ids": 102
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [float(i) for i in list1]\n    return round(sum(list1) * len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        total += int(round(list1[i]))\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    sum = 0\n    for i in range(0,len(list1)):\n        rounded_list.append(round(list1[i]))\n    for j in range(0,len(rounded_list)):\n        sum = sum + rounded_list[j]\n    print(f\"The sum of the numbers in the list rounded and summed to the nearest whole number: {sum}\")\n",
        "num_ids": 100
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # total = 0\n    # for x in range(len(list1)):\n    #     total += round(list1[x])\n    # return total\n    return sum([round(x) for x in list1]) * len(list1)\nprint(round_and_sum([1.7,2.7,4.5,5.5,8.5,9.4]))\n",
        "num_ids": 95
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    for i in range(0, len(list1)):\n        list1[i] = round(list1[i], 2)\n    print(f\"The total sum of the list is {sum} multiplied by the length of the list is {round(sum * len(list1))}.\")\n",
        "num_ids": 88
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_val = 0\n    for x in list1:\n        sum_val += x*x\n        x = x * round(x/10)\n    print(sum_val * len(list1))\n",
        "num_ids": 51
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(0,len(list1)):\n        sum = sum + list1[i]\n    print(f\"The sum of the numbers in the list is {sum} and the length of the list is {len(list1)}\")\n",
        "num_ids": 65
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [0.1,2.3,0.3,3.3]\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n",
        "num_ids": 56
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubSum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            cubSum+=i**3\n    print(cubSum)\n",
        "num_ids": 48
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans += i**3\n    return ans\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        sum=sum+i**3\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 0\n    for i in range(0,n+1):\n        if i%2==0:\n            print(i*i*i)\n        else:\n            pass\ncube_Sum(5)",
        "num_ids": 52
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum = Sum + (i*i*i)\n    print(\"Cube Sum: \", Sum)\n",
        "num_ids": 39
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            cube_sum = cube_sum + i**3\n    return cube_sum\n    \n",
        "num_ids": 48
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 1\n    while i <= n:\n        cube_sum += i * i * i\n        i += 1\n    print(cube_sum)\n",
        "num_ids": 45
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n",
        "num_ids": 22
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0:\n        print(\"Input should be a positive integer\")\n        return\n    s = 0\n    while n!= 0:\n        s += n\n        n = n - 2\n    print(\"Cube sum of first\",n,\"numbers is\",s)\n",
        "num_ids": 65
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(0,n):\n        result = result + i**3\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in range(len(test_tup)):\n        print(\"{}{}\".format(test_tup[i], delimiter), end=\"\")\n        \ndef combine_string(str1, str2):\n    '''\n    Write a function to combine two strings by concatenating each character from the last string to the first string.\n    '''\n    return str1 + str2\n",
        "num_ids": 10
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n    \nprint(concatenate_tuple((1,2,3,4,5)))\n    \ndef average_word_length(words):\n    '''\n    Write a function which takes a string and finds the average word length.\n    '''\n    counter = 0\n    for word in words.split():\n        counter += len(word)\n    return counter / len(words.split())\n    \nprint(average_word_length(\"Python is an easy to learn, powerful programming language.\"))\n    \ndef common_words(words):\n    '''\n    Write a function which takes a string as input and return the words which are common in both strings.\n    '''\n    word1, word2 = words.split()\n    common_words_list = []\n    for word in word1.split():\n        if word in word2.split():\n            common_words_list.append(word)\n    return \",\".join(common_words_list)\n    \nprint(common_words(\"Python is an easy to learn, powerful programming language.\"))\n    \ndef format_string(test_string):\n    '''\n    Write a function which takes a string as input and returns the string after making the letters of each word lowercase and replace spaces with \"_\".\n    '''\n    return \"\".join(char.lower() if char.isalpha() else \"_\" for char in test_string)\n    \nprint(format_string(\"This is a test\"))\n    \ndef is_palindrome(test_string):\n    '''\n    Write a function which takes a string as input and returns True if the string is a palindrome, False otherwise. A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., madam or nurses run.\n    '''\n    test_string_list = test_string.split()\n    test_string_list_reverse = test_string_list[::-1]\n    return test_string_list == test_string_list_reverse\n    \nprint(is_palindrome(\"nurses run\"))\n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function that takes in two lists and removes the elements that are common in both of them.\n    '''\n    return [element for element in list1 if element not in list2]\n    \nprint(remove_elements([1,2,3,4,5], [3,4,5]))\n",
        "num_ids": 47
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = \"\"\n    for element in test_tup:\n        output = output + element + \" \"\n    return output\n",
        "num_ids": 31
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result_str = str()\n    for ele in test_tup:\n        result_str += ele + ', '\n    return result_str[:-2]\n    \nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f')))\nprint(concatenate_tuple((1, 2, 3, 4, 5)))\nprint(concatenate_tuple(('a', 'b', 'c')))\nprint(concatenate_tuple((1, 2, 3, 4, 5, 6)))\nprint(concatenate_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9)))\nprint(concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')))\n",
        "num_ids": 254
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Declare a variable for the new tuple\n    new_tup = ()\n    # Iterate through the tuple and concatenate each element by the delimiter\n    for item in test_tup:\n        new_tup = new_tup + (item, )\n    return new_tup\n",
        "num_ids": 72
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result = result + str(item) + ','\n    return result[:-1]\n",
        "num_ids": 38
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    concat_tup = \"\"\n    for tup in test_tup:\n        concat_tup = concat_tup + str(tup) + \" \"\n    return concat_tup\n    ",
        "num_ids": 55
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str, test_tup))\n",
        "num_ids": 18
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(n):\n        cubes.append(i ** 3)\n    return sum(cubes) / n\n",
        "num_ids": 38
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum = 0\n    while count < n:\n        sum += pow(count, 3)\n        count += 1\n    print(sum/n)\n    \ndef get_Permutations(n):\n    '''\n    Write a python function to get all permutations of length n of a list of numbers.\n    '''\n    a = []\n    for i in range(n):\n        a.append(i+1)\n    return a\n",
        "num_ids": 30
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Method 1\n    #Code starts here\n    result = 1\n    for i in range(n):\n        result = result * (i+1)\n    average = result/(n+1)\n    return average\n    \n",
        "num_ids": 54
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return int(sum/n)\n",
        "num_ids": 38
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for x in range(1,n+1):\n        total += x**3\n    return total/n\n    \n    \ndef find_Average_Of_Square(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for x in range(1,n+1):\n        total += x**2\n    return total/n\n    ",
        "num_ids": 34
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    print(\"Average of cubes of first \",n,\" natural numbers is \",sum/n)\n",
        "num_ids": 45
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum/n\nprint(find_Average_Of_Cube(3))",
        "num_ids": 43
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Your code goes here\n    n = int(n)\n    sum_of_cube = 0\n    for i in range(1, n+1):\n        sum_of_cube = sum_of_cube + (i*i*i)\n    return sum_of_cube / n\n    ",
        "num_ids": 71
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n + 1):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes / n\n",
        "num_ids": 48
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        sum=sum+pow(i,3)\n        i=i+1\n    average=(sum/n)\n    return average\n",
        "num_ids": 52
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str(test_tuple)[1][:-1])\n    # return tuple([str(test_tuple)[1][-1]])\n",
        "num_ids": 38
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[-1])\n",
        "num_ids": 14
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    rear_index = list(map(lambda x: x[-1], test_tuple))\n    print(rear_index)\n",
        "num_ids": 37
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n",
        "num_ids": 22
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    try:\n        return test_tuple[1]\n    except IndexError:\n        return \"Not found\"\n",
        "num_ids": 29
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(x[-1])\n    return result_list\n    \n    \ndef extract_first_word(test_tuple):\n    '''\n    Write a function to extract the first word of each string in the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(x.split()[0])\n    return result_list\n    \n    \ndef extract_last_word(test_tuple):\n    '''\n    Write a function to extract the last word of each string in the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(x.split()[-1])\n    return result_list\n    \n    \ndef extract_substring(test_tuple, start, end):\n    '''\n    Write a function to extract a substring from each word in the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(x.split()[start:end+1])\n    return result_list\n    \n    \ndef extract_nth_word_index(test_tuple, n, start=0):\n    '''\n    Write a function to extract the nth word index in each string in the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(x.split()[start:start+n])\n    return result_list\n    \n    \ndef extract_regex(test_tuple, regex):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.findall(regex, x))\n    return result_list\n    \n    \ndef extract_regex_group(test_tuple, regex, group=1):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(group))\n    return result_list\n    \n    \ndef extract_regex_last_group(test_tuple, regex, group=1):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(group))\n    return result_list\n    \n    \ndef extract_nth_word_index_regex(test_tuple, n, start=0, regex='[A-Z]{2}'):\n    '''\n    Write a function to extract the nth word index in each string that matches the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(start))\n    return result_list\n    \n    \ndef extract_nth_word_index_regex_strict(test_tuple, n, start=0, regex='[A-Z]{2}'):\n    '''\n    Write a function to extract the nth word index in each string that matches the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).start(start))\n    return result_list\n    \n    \ndef extract_regex_first(test_tuple, regex):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(1))\n    return result_list\n    \n    \ndef extract_regex_first_group(test_tuple, regex, group=1):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(group))\n    return result_list\n    \n    \ndef extract_regex_first_group_strict(test_tuple, regex, group=1):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(group))\n    return result_list\n    \n    \ndef extract_regex_last_group_strict(test_tuple, regex, group=1):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(group))\n    return result_list\n    \n    \ndef extract_regex_substring(test_tuple, regex, group=1):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(group))\n    return result_list\n    \n    \ndef extract_regex_first_group_substring(test_tuple, regex, group=1, substring=''):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(group))\n    return result_list\n    \n    \ndef extract_regex_last_group_substring(test_tuple, regex, group=1, substring=''):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(group))\n    return result_list\n    \n    \ndef extract_nth_word_index_regex_strict(test_tuple, n, start=0, regex='[A-Z]{2}'):\n    '''\n    Write a function to extract the nth word index in each string that matches the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).start(start))\n    return result_list\n    \n    \ndef extract_regex_strict(test_tuple, regex):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x))\n    return result_list\n    \n    \ndef extract_regex_strict_group(test_tuple, regex, group=1):\n    '''\n    Write a function to extract all the words that match the given regex in each string of the given tuple.\n    '''\n    result_list = []\n    for x in test_tuple:\n        result_list.append(re.search(regex, x).group(group))\n    return result_list\n    \n    \ndef extract_regex_strict_group_regex_first(test_tuple, regex, group=1):\n    '''\n    Write a function to extract all the words that match the given rege",
        "num_ids": 17
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    ret_tuple = []\n    for val in test_tuple:\n        ret_tuple.append(val[-1])\n    return ret_tuple\n",
        "num_ids": 41
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(reversed(test_tuple))\n",
        "num_ids": 16
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return ''.join(test_tuple)[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n",
        "num_ids": 7
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0\n    if len(list1) == 0:\n        return 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            result += 1\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    num_sublists = 0\n    for sublist in list1:\n        if x in sublist:\n            num_sublists += 1\n    return num_sublists\n",
        "num_ids": 42
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda n : n%2!= 0, nums))\n",
        "num_ids": 22
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n",
        "num_ids": 22
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2 == 1:\n            odds.append(num)\n    return odds\n",
        "num_ids": 38
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda n: n % 2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # return [num for num in nums if num % 2!= 0]\n    return list(filter(lambda x: x % 2!= 0, nums))\n",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            nums[i] = None\n",
        "num_ids": 37
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for n in nums:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n    return odd_numbers\n",
        "num_ids": 45
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n    # return list(filter(lambda x: x % 2 == 1, nums))\n",
        "num_ids": 42
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[:10] + '-' + dt[10:13] + '-' + dt[13:16]\n",
        "num_ids": 33
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    d = list(map(int, dt))\n    return '{}-{}-{}'.format(d[2], d[1], d[0])\n",
        "num_ids": 53
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    temp=dt.split(\"-\")\n    dd=int(temp[0])\n    mm=int(temp[1])\n    yyyy=int(temp[2])\n    return \"{:02d}-{:02d}-{:04d}\".format(dd,mm,yyyy)\n",
        "num_ids": 73
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date = dt[:4] + \"-\" + dt[4:6] + \"-\" + dt[6:]\n    return new_date\n",
        "num_ids": 40
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    date_new = f\"{date[2]}-{date[1]}-{date[0]}\"\n    return date_new\n",
        "num_ids": 45
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace(\"-\",\"/\")\n",
        "num_ids": 14
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    month = int(d[1])\n    year = int(d[0])\n    if(month < 10):\n        month = '0'+str(month)\n    else:\n        month = str(month)\n    if(year < 10):\n        year = '0'+str(year)\n    else:\n        year = str(year)\n    return year+'-'+month+'-'+year\n",
        "num_ids": 111
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = ''.join(dt)\n    dt = dt.split(' ')\n    return dt[0]+'-'+dt[1]+'-'+dt[2]\n",
        "num_ids": 56
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt=dt.split('-')\n    dt=dt[::-1]\n    dt=dt[0]+'-'+dt[1]+'-'+dt[2]\n    return dt\n    \ndef sort_gps_data(gps_data):\n    '''\n    Write a function to sort a dictionary of gps data based on a key.\n    '''\n    sorted_d={}\n    for k,v in sorted(gps_data.items(), key=lambda item: item[1][2]):\n        sorted_d[k]=v\n    return sorted_d\n    \ndef count_missing_data(sorted_d,missing_data):\n    '''\n    Write a function to count the number of missing data records in a list of GPS data.\n    '''\n    count=0\n    for i in range(len(sorted_d)):\n        if sorted_d[i][2]==missing_data:\n            count=count+1\n    return count\n    \ndef remove_missing_data(sorted_d,missing_data):\n    '''\n    Write a function to remove missing data records from a list of GPS data.\n    '''\n    for i in range(len(sorted_d)):\n        if sorted_d[i][2]==missing_data:\n            del sorted_d[i]\n    return sorted_d\n    \ndef generate_new_coordinate_data(sorted_d):\n    '''\n    Write a function to convert GPS coordinates into a format that can be used in a SQL query.\n    '''\n    for i in range(len(sorted_d)):\n        del sorted_d[i][1]\n        del sorted_d[i][0]\n    return sorted_d\n    \ndef sort_address_data(address_data):\n    '''\n    Write a function to sort a dictionary of address data based on a key.\n    '''\n    sorted_d={}\n    for k,v in sorted(address_data.items(), key=lambda item: item[1]):\n        sorted_d[k]=v\n    return sorted_d\n    \ndef count_missing_address_data(sorted_d,missing_data):\n    '''\n    Write a function to count the number of missing address records in a list of address data.\n    '''\n    count=0\n    for i in range(len(sorted_d)):\n        if sorted_d[i][0]==missing_data:\n            count=count+1\n    return count\n    \ndef remove_missing_address_data(sorted_d,missing_data):\n    '''\n    Write a function to remove missing address records from a list of address data.\n    '''\n    for i in range(len(sorted_d)):\n        if sorted_d[i][0]==missing_data:\n            del sorted_d[i]\n    return sorted_d\n    \ndef generate_new_address_data(sorted_d):\n    '''\n    Write a function to convert address data into a format that can be used in a SQL query.\n    '''\n    for i in range(len(sorted_d)):\n        del sorted_d[i][1]\n        del sorted_d[i][0]\n    return sorted_d\n    \ndef generate_miles_data(sorted_d):\n    '''\n    Write a function to convert miles data into a format that can be used in a SQL query.\n    '''\n    for i in range(len(sorted_d)):\n        del sorted_d[i][3]\n        del sorted_d[i][2]\n        del sorted_d[i][1]\n    return sorted_d\n    \ndef generate_distance_data(sorted_d):\n    '''\n    Write a function to convert distance data into a format that can be used in a SQL query.\n    '''\n    for i in range(len(sorted_d)):\n        del sorted_d[i][1]\n        del sorted_d[i][0]\n        del sorted_d[i][2]\n    return sorted_d\n    \ndef generate_new_gps_data(sorted_d):\n    '''\n    Write a function to convert gps data into a format that can be used in a SQL query.\n    '''\n    for i in range(len(sorted_d)):\n        del sorted_d[i][0]\n        del sorted_d[i][1]\n    return sorted_d\n    \ndef generate_new_notes_data(sorted_d):\n    '''\n    Write a function to convert notes data into a format that can be used in a SQL query.\n    '''\n    for i in range(len(sorted_d)):\n        del sorted_d[i][0]\n        del sorted_d[i][1]\n        del sorted_d[i][2]\n    return sorted_d\n    \ndef get_key_from_value(d, value):\n    '''\n    Write a function to return the key of the dictionary with the corresponding value.\n    '''\n    for k, v in d.items():\n        if v == value:\n            return k\n    \ndef get_key_from_value_2(d, value):\n    '''\n    Write a function to return the key of the dictionary with the corresponding value.\n    '''\n    for k, v in d.items():\n        if v == value:\n            return k\n    return -1\n    \ndef remove_key_from_dictionary(d, key):\n    '''\n    Write a function to remove a key from a dictionary\n    '''\n    d.pop(key)\n    return d\n    \ndef remove_key_from_dictionary_2(d, key):\n    '''\n    Write a function to remove a key from a dictionary\n    '''\n    d.pop(key)\n    return d\n    \ndef check_new_latitude_coordinates(new_latitude_coordinates):\n    '''\n    Write a function to check if the new latitude coordinates are in the range of -90 to 90.\n    '''\n    for i in range(len(new_latitude_coordinates)):\n        if new_latitude_coordinates[i]>= -90 and new_latitude_coordinates[i] <= 90:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n    \ndef remove_html_tags(text):\n    '''\n    Write a function to remove the html tags from the text.\n    '''\n    return re.sub('<.*?>', '', text)\n    \ndef find_entities(text):\n    '''\n    Write a function to find and extract entities from the text.\n    '''\n    pass\n    \ndef is_valid_email_address(email):\n    '''\n    Write a function to check if an email address is valid or not.\n    '''\n    return True\n    \ndef find_username(text):\n    '''\n    Write a function to find and extract username from the text.\n    '''\n    return ''\n",
        "num_ids": 6
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = 1\n    while(gap < n):\n        gap = gap*2+1\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Start with the element at index 0\n    for gap in range(n,1,-1):\n        for i in range(gap):\n            j = i + gap\n            while j < n:\n                if my_list[j] < my_list[j - gap]:\n                    my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                    j = j + gap\n                else:\n                    break\n    return my_list\n",
        "num_ids": 127
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j - gap], my_list[j] = my_list[j], my_list[j - gap]\n                j -= gap\n    return my_list\n",
        "num_ids": 106
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) <= 1:\n        return my_list\n    \n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j],my_list[j-gap] = my_list[j-gap],my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2016
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    while True:\n        i = 1\n        while i <= size:\n            if my_list[i-1] > my_list[i]:\n                my_list = swap(my_list, i-1, i)\n            i += 1\n        if size == 1:\n            break\n        else:\n            size -= 1\n    return my_list\n",
        "num_ids": 95
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n",
        "num_ids": 12
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) <= 1:\n        return my_list\n    else:\n        mid = len(my_list) // 2\n        list1 = my_list[:mid]\n        list2 = my_list[mid:]\n",
        "num_ids": 59
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j = j-gap\n            my_list[j] = temp\n        gap = gap //2\n",
        "num_ids": 111
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list\n",
        "num_ids": 112
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1]\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 28
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a = []\n    a.append(test_tup1[0] and test_tup1[1])\n    a.append(test_tup2[0] and test_tup2[1])\n    return tuple(a)\n",
        "num_ids": 60
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = test_tup1 + test_tup2\n    res = []\n    for i, j in new_tup:\n        if i and j:\n            res.append(True)\n        else:\n            res.append(False)\n    return tuple(res)\n",
        "num_ids": 71
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x1+x2 for x1, x2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1_element * tup2_element for tup1_element, tup2_element in zip(test_tup1, test_tup2))\n",
        "num_ids": 45
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1]\n",
        "num_ids": 39
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_min = (-b + np.sqrt(b**2 - 4*a*c))/(2*a)\n    x_max = (-b - np.sqrt(b**2 - 4*a*c))/(2*a)\n    return np.array([x_min, x_max])\n",
        "num_ids": 75
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_mid = (a + b) / 2\n    return -c / (2 * a) - x_mid + (2 * b / (a ** 2))\n",
        "num_ids": 41
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    return (-b + a*a)/(2*b)\n",
        "num_ids": 19
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return b*(b**2 - a*c)\n    \n",
        "num_ids": 18
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(\"This function will find the directrix of a parabola.\")\n    print(\"It will take coefficients a, b, and c\")\n    print(\"A directrix is a curve that is tangent to the curve.\")\n    print(\"That is, the directrix is a curve that goes through the curve\")\n    print(\"as it is being drawn and then becomes a tangent to the curve.\")\n    print(\"A directrix has a single point.\")\n    print(\"The point of the directrix must be equal to the focus\")\n    print(\"of the parabola.\")\n    print(\"Given the coefficients a, b, and c, determine the point of\")\n    print(\"the directrix.\")\n    print(\"\")\n    print(\"Note: for a parabola, b is always 0.\")\n    print(\"\")\n    print(\"Input Format: Three numbers, a, b, and c, separated by a single space.\")\n    print(\"The numbers in the input are in the range -100.00 to 100.00\")\n    print(\"\")\n    print(\"Output Format: The directrix point in the form of x, y, where\")\n    print(\"x and y are the coordinates of the directrix point.\")\n    print(\"\")\n    print(\"Example Input 1:  -3 3 -2\")\n    print(\"Example Output 1: -3.00 0.00\")\n    print(\"\")\n    print(\"Example Input 2:  1 -3 3\")\n    print(\"Example Output 2: 1.00 0.00\")\n    print(\"\")\n    print(\"Example Input 3:  1 -1 2\")\n    print(\"Example Output 3: 1.00 0.00\")\n    print(\"\")\n    print(\"\")\n    print(\"CODE\")\n    print(\"# This program determines the directrix of a parabola.\")\n    print(\"# Given three numbers, a, b, and c, calculate the directrix.\")\n    print(\"# The directrix is a curve that goes through the curve\")\n    print(\"# as it is being drawn and then becomes a tangent to the curve.\")\n    print(\"# The directrix has a single point.\")\n    print(\"# The point of the directrix must be equal to the focus\")\n    print(\"# of the parabola.\")\n    print(\"# Given the coefficients a, b, and c, determine the point of\")\n    print(\"# the directrix.\")\n    print(\"\")\n    a = float(input(\"Enter the value of a: \"))\n    b = float(input(\"Enter the value of b: \"))\n    c = float(input(\"Enter the value of c: \"))\n    directrix_x = ((-b / (2 * a)) + ((b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    directrix_y = ((-b / (2 * a)) - ((b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    print(\"The directrix is: \", directrix_x, directrix_y)\n",
        "num_ids": 688
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return np.array([a*a+b*b, 2*a*b])\n",
        "num_ids": 23
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    c = float(c)\n    a = float(a)\n    b = float(b)\n",
        "num_ids": 26
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b**2 + c\n",
        "num_ids": 12
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # your code here\n    return None\n",
        "num_ids": 12
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for el in list1:\n        if el in list2:\n            common = True\n            break\n    return common\n",
        "num_ids": 35
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    print(list1,list2)\n    # iterate through each element and compare to find the common element\n    for element in list1:\n        if element in list2:\n            return True\n        else:\n            return False\n",
        "num_ids": 55
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for item in list1:\n        if item in list2:\n            common_elements.append(item)\n    return common_elements\n",
        "num_ids": 44
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Write your solution here:\n    common = set(list1) & set(list2)\n    if len(common) == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n        else:\n            return False\n",
        "num_ids": 39
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == list2:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length_base1 = float(base1)\n    length_base2 = float(base2)\n    length_trapezium = float(length_base1 + length_base2) / 2\n    height = float(height)\n",
        "num_ids": 56
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    l_1 = base1 * height\n    l_2 = base2 * height\n    l_3 = height * 2\n    return (l_1 + l_2 + l_3)/2",
        "num_ids": 47
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        base1,base2 = base2,base1\n    if height >= (base1+base2)/2.0:\n        return (base1+base2)/2.0\n    else:\n        return (base1*height/height + base2*(1.0-height/height))/(height+0.5)\n",
        "num_ids": 87
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height/2 == 0:\n        return (base1+base2)/2\n    else:\n        return (height*base1)/2 + (height*base2)/2\n",
        "num_ids": 44
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium = (base1+base2)*height/2\n    return trapezium\n",
        "num_ids": 24
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*0.5*height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1+base2)*0.5*height\n    return area\n",
        "num_ids": 22
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    h1 = base1.get_height()\n    h2 = base2.get_height()\n    h3 = height.get_height()\n",
        "num_ids": 37
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) > 0:\n        for i in range(len(arr)):\n            if arr[i] > number:\n                return True\n        else:\n            return False\n",
        "num_ids": 46
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_list = []\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater_list.append(arr[i])\n    return greater_list\n",
        "num_ids": 51
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            print(\"The given number {} is greater than the array element {}\".format(number, arr[i]))\n            return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] < number:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n",
        "num_ids": 11
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    #Your code here\n    for i in range(0, len(arr)):\n        if arr[i] < number:\n            return True\n    return False\n    \n",
        "num_ids": 42
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text)!= None:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 44
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'abcab'\n    # 'ab",
        "num_ids": 2008
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    x = re.search(r'a+b', text)\n    return bool(x)\n",
        "num_ids": 25
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Get the number of occurances of a\n    a = text.count(\"a\")\n    # Get the number of occurances of b\n    b = text.count(\"b\")\n    # If the strings match\n    if (a + b) > 0:\n        # Return 1\n        return 1\n    else:\n        # Return 0\n        return 0\n",
        "num_ids": 84
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'a(b+\\b)')\n    #search = regex.search(text)\n    #return search.group()\n    return regex.findall(text)\n",
        "num_ids": 51
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'a+b', text)\n",
        "num_ids": 17
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # import re\n    # r = re.compile(r'ab+')\n    # s = r.search('aaaabaaaa')\n    # if s:\n    #     print(s.group())\n    # else:\n    #     print('No match')\n    return re.match(r'ab+', text)\n",
        "num_ids": 79
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(.*?)b', text)\n    return match.group()\n",
        "num_ids": 27
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+', text)\n",
        "num_ids": 16
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = -n\n    res = n % 10\n    return res\n",
        "num_ids": 26
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    # Code here\n",
        "num_ids": 19
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    result = n%10\n    return result\n",
        "num_ids": 13
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Initializing an empty string\n    last_digit = ''\n    # Splitting the number\n    a = list(str(n))\n    # Converting it into integer\n    a = int(''.join(a))\n    # Finding the last digit\n    last_digit = a % 10\n    # Returning the result\n    return last_digit\n",
        "num_ids": 81
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    return last_Digit(n//10) + n % 10\nprint(last_Digit(13))\nprint(last_Digit(9))\nprint(last_Digit(0))\n",
        "num_ids": 59
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    print(\"Negative numbers in the list : \", neg_nos)\n",
        "num_ids": 50
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n    return list1\n",
        "num_ids": 50
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg.append(list1[i])\n    return neg\n",
        "num_ids": 46
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = list1\n    return list(filter(lambda x: x < 0, list1))\n",
        "num_ids": 26
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = list(list1)\n    negative = []\n    for i in range(0,len(list1)):\n        if list1[i] < 0:\n            negative.append(list1[i])\n    return negative\n",
        "num_ids": 58
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for i in list1:\n        if i<0:\n            negative_nos.append(i)\n    return negative_nos\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in range(0,len(list1)):\n        if list1[i] < 0:\n            result.append(-list1[i])\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #Code here\n    \n    \n    for i in range(len(list1)):\n        if list1[i]<0:\n            list1[i]=-list1[i]\n    print(\"The list after swapping is \",list1)\n",
        "num_ids": 61
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = []\n    for x in str1:\n        if x not in list1:\n            list1.append(x)\n    return ''.join(list1)\n",
        "num_ids": 44
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[0::2]\n",
        "num_ids": 12
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == '0':\n            str1.remove('0')\n    str1 = ''.join(str1)\n    return str1\n",
        "num_ids": 63
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\"1\", \"\")\n",
        "num_ids": 14
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #write your code here\n",
        "num_ids": 9
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = ''\n    for letter in str1:\n        if letter =='':\n            continue\n        if letter == '-' or letter == '_':\n            new_string += letter\n        elif letter.isalpha():\n            if letter.isupper():\n                if letter.lower() == letter:\n                    new_string += letter\n            else:\n                if letter.lower()!= letter:\n                    new_string += letter\n        else:\n            continue\n    return new_string\n    \n",
        "num_ids": 118
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # returns the original string\n    # with all odd characters removed\n    # as long as they are not at the beginning or end\n    str1 = str1.lower()\n    while str1[0].isalpha() == False:\n        str1 = str1[1:]\n    while str1[-1].isalpha() == False:\n        str1 = str1[:-1]\n    return(str1)\n",
        "num_ids": 98
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new = str1.replace(\"Odd\",\"\")\n    print(new)\n",
        "num_ids": 21
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # return str1[::2]\n    return ''.join(filter(lambda x: x % 2 == 0, str1))\n",
        "num_ids": 33
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    new_string = \"\"\n    for ch in str1:\n        if (ch!= 'o'):\n            new_string += ch\n    return new_string\n    \nif __name__ == '__main__':\n    print(\"Example:\")\n    print(remove_odd('testoddstring'))\n",
        "num_ids": 76
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    count = 0\n",
        "num_ids": 17
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i[::-1] == j:\n                count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your Code Here\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][1] == test_list[i+1][0]:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #your code here\n    tuple_dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i][1],test_list[j][0]) in tuple_dict:\n                tuple_dict[(test_list[i][1],test_list[j][0])] += 1\n            else:\n                tuple_dict[(test_list[i][1],test_list[j][0])] = 1\n    return tuple_dict\n",
        "num_ids": 137
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    num_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                num_pairs += 1\n    return num_pairs\n",
        "num_ids": 73
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([x for x in test_list if x[0]==x[1]])\n",
        "num_ids": 25
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i][1],test_list[j][0]) in test_list:\n                    count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_tuple = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i] < test_list[j] and test_list[j] > test_list[i]):\n                count_tuple += 1\n    return count_tuple\n",
        "num_ids": 90
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L: return 0\n    return reduce(lambda x, y: x*10 + y, L)\n",
        "num_ids": 28
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return (sum(L))\n",
        "num_ids": 10
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result * 10 + L[i]\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    print(L)\n    return sum(L)\n",
        "num_ids": 15
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    print(str(sum(L)) + \"\".join(str(i) for i in L))\n",
        "num_ids": 26
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return ''.join(map(str, L))\n",
        "num_ids": 15
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return L.pop()\n",
        "num_ids": 11
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(map(int, L))\n    return sum(L)\n",
        "num_ids": 21
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return L\n",
        "num_ids": 6
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(i) for i in L))\n",
        "num_ids": 19
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    temp = []\n    for i, word in enumerate(text.split()):\n        if word == 'a':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'an':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'the':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word[:2] == 'a':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word[:2] == 'an':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word[:3] == 'the':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'and':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'but':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'by':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'but':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'how':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        elif word == 'however':\n            if len(temp) > 0:\n                result.append(temp)\n            temp = []\n        e",
        "num_ids": 2009
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # TODO: Write your code here\n    first_adverb=re.search(r\"\\w+\\sadverb\\b\", text)\n    if first_adverb:\n        first_adverb_string=first_adverb.group()\n        first_adverb_string_no_whitespace=first_adverb_string.strip()\n        return first_adverb_string_no_whitespace\n    else:\n        return 'null'\n",
        "num_ids": 110
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.search(r'\\b(?:(?:\\b(?:(?:(?:\\w+)|(?:\\'\\w+)|(?:\\d+)|(?:\\w+\\'\\w+)|(?:\\w+\\\"\\w+))\\.)*)+\\b(?:ad|adv)\\b(?:(?:\\w+)|(?:\\'\\w+)|(?:\\d+)|(?:\\w+\\'\\w+)|(?:\\w+\\\"\\w+))', text)\n    return result\n",
        "num_ids": 126
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(?:adj|adverb|ADV|adv|ad|Adj|adjective|Adj)\\b'\n    pattern_pos = r'\\((.*?)\\)'\n    result = re.findall(pattern, text)\n    result_pos = re.findall(pattern_pos, text)\n    adverbs = []\n    for i in result:\n        if i in result_pos:\n            adverbs.append([i, result_pos.index(i)])\n    return adverbs\n",
        "num_ids": 125
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # 1. Create a regular expression to match for adverb\n    # 2. Iterate over the given sentence and match for adverb\n    # 3. Add the matched word to a dictionary with the word as key and its position as the value\n    \n    regex = re.compile('adverb')\n    regex.findall(text)\n",
        "num_ids": 80
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #split text and put into a list\n    tokens = text.split()\n    #first_word = None\n    #first_word_pos = -1\n    adverb_pos_lst = []\n    #for each word\n    for i in range(len(tokens)):\n        #if it's a 'not'\n        if tokens[i] == 'not':\n            #if it's the first word\n            if i == 0:\n                #if it's an adverb\n                if tokens[i+1][-2:] == 'ly':\n                    #set first_word to be the next word\n                    first_word = tokens[i+1]\n                    #set first_word_pos to be the next word position\n                    first_word_pos = i+1\n                    #set the index of the following adverb\n                    adverb_pos = i+2\n                    #while the next word is an adverb\n                    while tokens[adverb_pos][-2:] == 'ly':\n                        #append the next word to the list\n                        adverb_pos_lst.append(adverb_pos)\n                        #next word\n                        adverb_pos += 1\n            #otherwise the first word is the previous word\n            else:\n                #check for the next word\n                if tokens[i+1][-2:] == 'ly':\n                    #if it's an adverb\n                    if tokens[i-1][-2:] == 'ly':\n                        #set first_word to be the previous word\n                        first_word = tokens[i-1]\n                        #set first_word_pos to be the previous word position\n                        first_word_pos = i-1\n                        #set the index of the following adverb\n                        adverb_pos = i-2\n                        #while the next word is an adverb\n                        while tokens[adverb_pos][-2:] == 'ly':\n                            #append the next word to the list\n                            adverb_pos_lst.append(adverb_pos)\n                            #next word\n                            adverb_pos -= 1\n    return (first_word, first_word_pos, adverb_pos_lst)\n",
        "num_ids": 499
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    print(text)\n    ad_verb = \"\"\n    dic_position = []\n    for index, word in enumerate(text.split()):\n        print(index, word)\n        if re.match(r\"\\b[Hh]e?s?\\b\", word):\n            ad_verb = word\n            dic_position.append(index)\n    print(ad_verb)\n    print(dic_position)\n    return ad_verb, dic_position\n",
        "num_ids": 116
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    adverb_index = []\n    for i in range(len(text)):\n        if text[i].is_adverb():\n            adverb_positions.append(i)\n            adverb_index.append(text[i].word)\n    return adverb_positions,adverb_index\n",
        "num_ids": 83
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    import re\n    # your code here\n    text = text.lower()\n    text = re.sub('\\W','', text)\n    text = re.sub('\\s+','', text)\n    adverb_text = re.findall(r'\\b(?:(?:((?:(?:[^.]|(?<=\\s))*)(?<=[.!?]))|(?<=[.!?](?:[^.!?]|(?=[.!?]\\s))*))(?:[.]|(?=[.!?]\\s))(?:(?:[^.]|(?<=[.!?]))*))\\b(?!\\w)', text)\n    print(adverb_text)\n    return adverb_text\n",
        "num_ids": 177
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(?<= )(?P<adverb>(?:(?:(?:and|but|as|because|(?:whereas|when)?)|yet|(?:so|than|than|although))|(?:how|which|why))(?= )|(?P<adv2>(?:and|but|as|because|(?:whereas|when)?)|yet|(?:so|than|than|although)))'\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    for m in matches:\n        start, end = m.span()\n        return start, end\n",
        "num_ids": 153
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6*l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**2)*6\n    \ndef area_triangle(a,h):\n    '''\n    Write a function to find the area of a triangle of a given size.\n    '''\n    return (a*h)/2\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    return 4*(math.pi)*(r**2)\n    \ndef surface_area_cuboid(l,w,h):\n    '''\n    Write a function to find the surface area of a cuboid of a given size.\n    '''\n    return 2*(l*w+w*h+h*l)\n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid of a given size.\n    '''\n    return l*w*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere of a given radius.\n    '''\n    return (4/3)*math.pi*(r**3)\n    \ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle of a given radius.\n    '''\n    return 2*math.pi*r\n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a square of a given size.\n    '''\n    return a*a\n    \ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram of a given height and base.\n    '''\n    return a*b\n    \ndef surface_area_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle of a given height and width.\n    '''\n    return 2*(a+b)\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube of a given length.\n    '''\n    return l**3\n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid of a given length, width, and height.\n    '''\n    return (l*w*h)\n    \ndef circumference_of_square(a):\n    '''\n    Write a function to find the circumference of a square of a given size.\n    '''\n    return (2*a)\n    \ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle of a given height and width.\n    '''\n    return a*b\n    \ndef circumference_of_triangle(a,b,c):\n    '''\n    Write a function to find the circumference of a triangle of a given legth, width, and height.\n    '''\n    return ((a+b+c)/2)*math.sin(math.pi/3)\n    \ndef surface_area_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle of a given legth, width, and height.\n    '''\n    return (a+b+c)/2*math.sqrt(3)\n    \ndef surface_area_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    return (math.pi*r**2)\n    \ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle of a given radius.\n    '''\n    return 2*math.pi*r\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere of a given radius.\n    '''\n    return (4/3)*math.pi*(r**3)\n    \ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle of a given radius.\n    '''\n    return math.pi*(r**2)\n    \ndef area_circle_sector(r,a):\n    '''\n    Write a function to find the area of a circle sector of a given radius and angle.\n    '''\n    return (r**2)*math.sin(a)\n    \ndef circumference_of_circle_sector(r,a):\n    '''\n    Write a function to find the circumference of a circle sector of a given radius and angle.\n    '''\n    return 2*math.pi*(r*math.cos(a))\n    \ndef area_rectangle_sector(a,b,c):\n    '''\n    Write a function to find the area of a rectangle sector of a given height, width, and angle.\n    '''\n    return a*b*math.sin(c)\n    \ndef volume_rectangle_sector(a,b,c):\n    '''\n    Write a function to find the volume of a rectangle sector of a given height, width, and angle.\n    '''\n    return a*b*math.cos(c)\n    \ndef main():\n    '''\n    Write your code here.\n    '''\n    # Note: Printing is good practice.\n    # This is also a good place to put debugging\n    # print(surfacearea_sphere(1))\n    # print(area_triangle(3,4))\n    # print(surfacearea_cube(3))\n    # print(area_square(3))\n    # print(surfacearea_cuboid(3,4,5))\n    # print(volume_cuboid(3,4,5))\n    # print(volume_cube(3))\n    # print(volume_sphere(3))\n    # print(circumference_of_circle(3))\n    # print(area_square(3))\n    # print(area_parallelogram(3,4))\n    # print(surface_area_rectangle(3,4))\n    # print(circumference_of_square(3))\n    # print(area_rectangle(3,4))\n    # print(circumference_of_triangle(3,4,5))\n    # print(area_triangle(3,4))\n    # print(circumference_of_triangle(3,4,5))\n    # print(area_triangle(3,4))\n    # print(surface_area_rectangle(3,4))\n    # print(circumference_of_circle(3))\n    # print(surface_area_circle(3))\n    # print(surface_area_circle(2))\n    # print(area_circle(2))\n    # print(circumference_of_circle(2))\n    # print(area_circle(3))\n    # print(circumference_of_circle(3))\n    # print(circumference_of_circle(4))\n    # print(volume_cube(3))\n    # print(volume_cube(4))\n    # print(volume_cube(5))\n    # print(volume_sphere(3))\n    # print(volume_sphere(4))\n    # print(volume_sphere(5))\n    # print(area_square(3))\n    # print(area_square(4))\n    # print(area_square(5))\n    # print(surface_area_cuboid(3,4,5))\n    # print(surface_area_cuboid(5,8,9))\n    # print(surface_area_cuboid(5,5,5))\n    # print(surface_area_cuboid(6,5,6))\n    # print(surface_area_cuboid(8,5,8))\n    # print(surface_area_cuboid(3,4,6))\n    # print(surface_area_cuboid(2,3,4))\n    # print(surface_area_cuboid(3,4,6))\n    # print(surface_area_cuboid(3,3,5))\n    # print(surface_area_cuboid(5,6,7))\n    # print(surface_area_cuboid(4,5,6))\n    # print(surface_area_cuboid(4,6,7))\n    # print(surface_area_cuboid(5,6,7))\n    # print(surface",
        "num_ids": 764
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6*l**2\n    return surfacearea\n",
        "num_ids": 17
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2*6\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l**2*6\n    return a\n",
        "num_ids": 15
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    side_length = l\n    return (side_length**2)*6\n",
        "num_ids": 20
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([x for x in nums if x > 0]) / len(nums)\n    \ndef min_max(nums):\n    '''\n    Write a function to find the minimum and maximum of an array of integers.\n    '''\n    return min(nums), max(nums)\n    \ndef sum_of_squares(nums):\n    '''\n    Write a function to find the sum of squares of all the numbers in an array of integers.\n    '''\n    return sum([x**2 for x in nums])\n    \ndef avg_length(nums):\n    '''\n    Write a function to calculate the average length of the words in an array of strings.\n    '''\n    return sum([len(x) for x in nums])/len(nums)\n    \ndef last_word(nums):\n    '''\n    Write a function to find the last word of a string.\n    '''\n    return nums.split()[-1]\n    \ndef common_words(words):\n    '''\n    Write a function to find all the common words in a dictionary.\n    '''\n    \n    # your code here\n    \ndef reverse_dict(d):\n    '''\n    Write a function to find all the keys in a dictionary (with their values) in the \n    reverse order.\n    '''\n    # your code here\n    \n    keys = d.keys()\n    values = d.values()\n    \n    return dict(zip(keys, values[::-1]))\n    \ndef sort_dict(d):\n    '''\n    Write a function to sort the keys and values in a dictionary in alphabetical order.\n    '''\n    # your code here\n    \n    keys = d.keys()\n    values = d.values()\n    \n    return dict(zip(sorted(keys), sorted(values)))\n    \ndef first_last(words):\n    '''\n    Write a function to find the first and last word in an array of strings.\n    '''\n    # your code here\n    \n    return words[0], words[-1]\n    \ndef format_address(address):\n    '''\n    Write a function to format an address in a way that is more readable.\n    '''\n    # your code here\n    \n    first, last = address.split()\n    \n    return f'{first} {last}'\n    \ndef make_dict(nums):\n    '''\n    Write a function to create a dictionary with the first word of each sentence\n    and the length of the sentence.\n    '''\n    # your code here\n    \n    return dict([x.split( )[0] for x in nums])\n    \ndef unique_letters(words):\n    '''\n    Write a function to find the number of unique letters in a string.\n    '''\n    # your code here\n    \n    return len(set(words))\n    \ndef unique_words(sentence):\n    '''\n    Write a function to find the number of unique words in a sentence.\n    '''\n    # your code here\n    \n    return len(set(sentence.split()))\n    \ndef get_longest_word(words):\n    '''\n    Write a function to find the longest word in a sentence.\n    '''\n    # your code here\n    \n    return max(words, key=len)\n    \ndef sort_dict(d):\n    '''\n    Write a function to sort the keys and values in a dictionary in alphabetical order.\n    '''\n    # your code here\n    \n    return dict(sorted(d.items()))\n    \ndef binary_search(nums, target):\n    '''\n    Write a function to find the index of a target number in an array of integers.\n    '''\n    # your code here\n    \n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        middle = (left + right) // 2\n        if nums[middle] == target:\n            return middle\n        elif nums[middle] < target:\n            left = middle + 1\n        else:\n            right = middle - 1\n            \n    return -1\n    \ndef find_first_missing_positive(nums):\n    '''\n    Write a function to find the first positive integer that does not exist in an array\n    of positive integers.\n    '''\n    # your code here\n    \n    for i in range(len(nums)):\n        if nums[i] <= 0:\n            nums[i] = 1\n    \n    for i in range(len(nums)):\n        if nums[i]!= i + 1:\n            return i + 1\n    \n    return len(nums) + 1\n    \ndef no_duplicate_letters(words):\n    '''\n    Write a function to find the number of distinct letters in a string.\n    '''\n    # your code here\n    \n    return len(set(words))\n    \ndef pascal_triangle(n):\n    '''\n    Write a function that generates a pascal's triangle.\n    '''\n    # your code here\n    \n    array = [[1]]\n    \n    while len(array) < n:\n        temp = array[-1][:]\n        temp.append(1)\n        array.append(temp)\n        \n        for i in range(len(array) - 2):\n            temp = array[-1][i]\n            array[-1][i] = temp + array[-1][i + 1]\n    \n    return array\n    \ndef generate_dict(num_keys):\n    '''\n    Write a function to generate a dictionary with keys from 1 to n,\n    and the value of each key is the sum of the corresponding keys.\n    '''\n    # your code here\n    \n    return {x: x + 1 for x in range(1, num_keys)}\n    \ndef get_word_list():\n    '''\n    Write a function to load a list of words from a file.\n    '''\n    # your code here\n    \n    with open('words.txt', 'r') as f:\n        words = f.read().split('\\n')\n        \n    return words\n    \ndef sum_of_fib(n):\n    '''\n    Write a function to find the sum of the numbers in the Fibonacci series\n    '''\n    # your code here\n    \n    fib_sum = 1\n    current = 1\n    \n    while current < n:\n        current, fib_sum = fib_sum, fib_sum + current\n        \n    return fib_sum\n    \ndef find_range_of_primes(nums):\n    '''\n    Write a function to find the range of prime numbers in the given list of numbers.\n    '''\n    # your code here\n    \n    return [min(nums), max(nums)]\n    \ndef rotate_string(string, num):\n    '''\n    Write a function to rotate a string by a given number of positions.\n    '''\n    # your code here\n    \n    return string[num:] + string[:num]\n    \ndef find_pairs_with_sum(nums, target):\n    '''\n    Write a function to find all pairs of numbers in an array whose sum is equal to a given target number.\n    '''\n    # your code here\n    \n    return [[x, y] for x in nums for y in nums if x + y == target]\n    \ndef get_longest_common_prefix(words):\n    '''\n    Write a function to find the longest common prefix in an array of words.\n    '''\n    # your code here\n    \n    return max(words, key=len)\n    \ndef generate_dict(n):\n    '''\n    Write a function to generate a dictionary with keys from 1 to n,\n    and the value of each key is the sum of the corresponding keys.\n    '''\n    # your code here\n    \n    return {x: x + 1 for x in range(1, n)}\n    \ndef tree_depth(nums):\n    '''\n    Write a function to find the deepest level in a tree.\n    '''\n    # your code here\n    \n    depth = 0\n    \n    while len(nums) > 1:\n        temp = nums[0]\n        nums = nums[1:]\n        \n        for i in range(len(nums)):\n            if nums[i] > temp:",
        "num_ids": 72
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('l', nums)\n    return arr.count(0)\nprint(positive_count([-1, 1, -2, 2, -3, 2, -3]))\n",
        "num_ids": 48
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    res = 0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            res += 1\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(0,len(nums)):\n        if nums[i] > 0:\n            count+=1\n    return count/len(nums)\n",
        "num_ids": 48
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    result=0\n    for i in nums:\n        if i>0:\n            result+=1\n    return result/len(nums)\ndef max_number(nums):\n    '''\n    Write a function to find the maximum number in an array of integers.\n    '''\n    max_num=nums[0]\n    for i in nums:\n        if i>max_num:\n            max_num=i\n    return max_num\ndef min_number(nums):\n    '''\n    Write a function to find the minimum number in an array of integers.\n    '''\n    min_num=nums[0]\n    for i in nums:\n        if i<min_num:\n            min_num=i\n    return min_num\ndef sum_array(nums):\n    '''\n    Write a function to find the sum of numbers in an array of integers.\n    '''\n    sum=0\n    for i in nums:\n        sum+=i\n    return sum\ndef even_odd_array(nums):\n    '''\n    Write a function to find the number of even and odd numbers in an array of integers.\n    '''\n    even_count=0\n    odd_count=0\n    for i in nums:\n        if i%2==0:\n            even_count+=1\n        else:\n            odd_count+=1\n    return even_count,odd_count\ndef even_odd_sum_array(nums):\n    '''\n    Write a function to find the sum of even and odd numbers in an array of integers.\n    '''\n    sum_even=0\n    sum_odd=0\n    for i in nums:\n        if i%2==0:\n            sum_even+=i\n        else:\n            sum_odd+=i\n    return sum_even,sum_odd\ndef reverse_array(nums):\n    '''\n    Write a function to reverse the array in place.\n    '''\n    nums_index=len(nums)-1\n    for i in range(0,int((len(nums)/2))):\n        temp=nums[i]\n        nums[i]=nums[nums_index-i]\n        nums[nums_index-i]=temp\n    return nums\ndef find_biggest_number(nums):\n    '''\n    Write a function to find the biggest number in an array of integers.\n    '''\n    max_num=nums[0]\n    for i in nums:\n        if i>max_num:\n            max_num=i\n    return max_num\ndef two_sum_max(nums,sum):\n    '''\n    Write a function to find a maximum value in the array and check whether it occurs twice.\n    '''\n    result=0\n    dic={}\n    for i in nums:\n        if sum-i in dic:\n            return sum-i,i\n        else:\n            dic[i]=True\ndef two_sum_min(nums,sum):\n    '''\n    Write a function to find a minimum value in the array and check whether it occurs twice.\n    '''\n    result=None\n    dic={}\n    for i in nums:\n        if sum-i in dic:\n            return sum-i,i\n        else:\n            dic[i]=True\ndef two_sum_max_even(nums,sum):\n    '''\n    Write a function to find a maximum value in the array and check whether it occurs twice.\n    '''\n    result=0\n    dic={}\n    for i in nums:\n        if sum-i in dic:\n            return sum-i,i\n        else:\n            dic[i]=True\ndef two_sum_min_even(nums,sum):\n    '''\n    Write a function to find a minimum value in the array and check whether it occurs twice.\n    '''\n    result=None\n    dic={}\n    for i in nums:\n        if sum-i in dic:\n            return sum-i,i\n        else:\n            dic[i]=True\ndef sort_array_by_sum(nums):\n    '''\n    Write a function to sort an array in ascending order by sum.\n    '''\n    sum_result=[]\n    if len(nums)==0:\n        return sum_result\n    sum_result.append(nums[0])\n    sum_result.append(nums[1])\n    while len(nums)!=0:\n        new_sum=sum(sum_result)\n        if new_sum==nums[0]:\n            sum_result.append(nums[0])\n        elif new_sum==nums[1]:\n            sum_result.append(nums[1])\n        elif new_sum<nums[0]:\n            sum_result.append(nums[0])\n            sum_result.append(nums[1])\n        nums.pop(0)\n        nums.pop(0)\n    return sum_result\ndef check_sum(nums,sum):\n    '''\n    Write a function to check if there is a triplet in an array whose sum is equal to a given number.\n    '''\n    result=False\n    for i in range(0,len(nums)-2):\n        for j in range(i+1,len(nums)-1):\n            for k in range(j+1,len(nums)):\n                if nums[i]+nums[j]+nums[k]==sum:\n                    result=True\n                    break\n            if result:\n                break\n        if result:\n            break\n    return result\ndef k_largest_number(nums,k):\n    '''\n    Write a function to find the k largest numbers in an array.\n    '''\n    result=[]\n    for i in range(k):\n        max_num=nums[0]\n        for j in nums:\n            if j>max_num:\n                max_num=j\n        result.append(max_num)\n        nums.remove(max_num)\n    return result\ndef k_smallest_number(nums,k):\n    '''\n    Write a function to find the k smallest numbers in an array.\n    '''\n    result=[]\n    for i in range(k):\n        min_num=nums[0]\n        for j in nums:\n            if j<min_num:\n                min_num=j\n        result.append(min_num)\n        nums.remove(min_num)\n    return result\ndef longest_common_subsequence(string1,string2):\n    '''\n    Write a function that returns the longest common subsequence between two strings.\n    '''\n    max_len=0\n    for i in range(len(string1)+1):\n        for j in range(len(string2)+1):\n            if i==0 or j==0:\n                max_len=0\n            elif string1[i-1]==string2[j-1]:\n                max_len=1+max_len\n            else:\n                max_len=max(max_len,max_len)\n    return max_len\ndef longest_common_subsequence_2(string1,string2):\n    '''\n    Write a function that returns the longest common subsequence between two strings.\n    '''\n    dp_array=[]\n    dp_array.append([0]*(len(string1)+1))\n    for i in range(1,len(string1)+1):\n        dp_array.append([0]*(len(string1)+1))\n    for i in range(1,len(string1)+1):\n        for j in range(1,len(string2)+1):\n            if string1[i-1]==string2[j-1]:\n                dp_array[i][j]=1+dp_array[i-1][j-1]\n            else:\n                dp_array[i][j]=max(dp_array[i-1][j],dp_array[i][j-1])\n    return dp_array[len(string1)][len(string2)]\ndef longest_common_subsequence_3(string1,string2):\n    '''\n    Write a function that returns the longest common subsequence between two strings.\n    '''\n    result=[]\n    dp_array=[[",
        "num_ids": 13
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives=[]\n    for i in nums:\n        if i>=0:\n            positives.append(i)\n    return len(positives)/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    i = 0\n    positive = 0\n    while i < len(nums):\n        if nums[i] > 0:\n            positive = positive + 1\n        i = i + 1\n    return positive/len(nums)\n",
        "num_ids": 57
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i > 0:\n            pos += 1\n    return pos / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_n = -100000\n    for i in range(0, len(list1)):\n        if list1[i] > max_n:\n            max_n = list1[i]\n    return max_n\n",
        "num_ids": 56
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in list1:\n        if i < 0:\n            if i > max_neg:\n                max_neg = i\n    print(max_neg)\n    return max_neg\n",
        "num_ids": 58
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_n = -999999999\n    for x in list1:\n        if x<0:\n            if x>max_n:\n                max_n=x\n    return max_n\n",
        "num_ids": 49
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = sorted(list1, reverse = True)\n    print(list1[0])\n    return list1[0]\n",
        "num_ids": 33
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort(reverse = True)\n    return list1[0]\n",
        "num_ids": 21
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -10000\n    for i in list1:\n        if i < largest_neg:\n            largest_neg = i\n    return largest_neg\n",
        "num_ids": 40
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -9999999999\n    for i in list1:\n        if i < max_neg:\n            max_neg = i\n    return max_neg\n",
        "num_ids": 42
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > x:\n            x = list1[i]\n    return x\ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] > 0 and list1[i] < x:\n            x = list1[i]\n    return x\ndef middle(list1): \n    '''\n    Write a python function to find the middle element of the given list.\n    '''\n    m = len(list1)//2\n    if len(list1)%2 == 1:\n        return list1[m]\n    else:\n        return list1[m-1:m+1]\ndef sublist(list1): \n    '''\n    Write a python function to find the sublist with minimum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] < avg:\n            x = list1[i]\n    return x,avg\ndef sublist_max(list1): \n    '''\n    Write a python function to find the sublist with maximum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] > avg:\n            x = list1[i]\n    return x,avg\ndef sublist_min(list1): \n    '''\n    Write a python function to find the sublist with minimum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] < avg:\n            x = list1[i]\n    return x,avg\ndef sublist_max_avg(list1): \n    '''\n    Write a python function to find the sublist with maximum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] > avg:\n            x = list1[i]\n    return x,avg\ndef sublist_min_avg(list1): \n    '''\n    Write a python function to find the sublist with minimum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] < avg:\n            x = list1[i]\n    return x,avg\ndef sublist_max_avg_strict(list1): \n    '''\n    Write a python function to find the sublist with maximum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] > avg:\n            x = list1[i]\n        else:\n            break\n    return x,avg\ndef sublist_min_avg_strict(list1): \n    '''\n    Write a python function to find the sublist with minimum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] < avg:\n            x = list1[i]\n        else:\n            break\n    return x,avg\ndef sublist_avg_diff(list1): \n    '''\n    Write a python function to find the sublist with maximum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] == avg:\n            x = list1[i]\n    return x,avg\ndef sublist_min_avg_diff(list1): \n    '''\n    Write a python function to find the sublist with minimum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] == avg:\n            x = list1[i]\n            break\n    return x,avg\ndef sublist_avg_diff_strict(list1): \n    '''\n    Write a python function to find the sublist with maximum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] == avg:\n            x = list1[i]\n            break\n    return x,avg\ndef sublist_min_avg_diff_strict(list1): \n    '''\n    Write a python function to find the sublist with minimum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] == avg:\n            x = list1[i]\n            break\n    return x,avg\ndef sublist_avg_diff_strict_1(list1): \n    '''\n    Write a python function to find the sublist with maximum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] == avg:\n            x = list1[i]\n            break\n    return x,avg\ndef sublist_min_avg_diff_strict_1(list1): \n    '''\n    Write a python function to find the sublist with minimum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] == avg:\n            x = list1[i]\n            break\n    return x,avg\ndef sublist_avg_diff_strict_2(list1): \n    '''\n    Write a python function to find the sublist with maximum average value from the given list.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    avg = sum(list2)/len(list2)\n    x = -1\n    for i in range(len(list1)):\n        if list1[i] == avg:\n            x = list1[i]\n            break\n    return x,avg\ndef sublist_min_avg_diff_strict_2(list1): \n    '''\n    Write a python function to find the sublist with minimum average value from the given list.\n    '''\n    list2 = list1.copy()\n",
        "num_ids": 12
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest",
        "num_ids": 41
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg=0\n    for i in range(len(list1)):\n        if(list1[i]<0 and list1[i]>max_neg):\n            max_neg=list1[i]\n    return max_neg\n",
        "num_ids": 61
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(0, len(test_list)):\n        if len(test_list[i]) == K:\n            new_list.append(test_list[i])\n    return new_list\n",
        "num_ids": 59
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0,len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list\n",
        "num_ids": 56
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    pass\n    # return the new list\n    \n    \n    \n    # BONUS: Write a function that takes a tuple and returns a tuple of the same size\n    # with only the first and last item.\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2011
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    length_list = []\n    for test_tuple in test_list:\n        # length_list.append(len(test_tuple))\n        length_list.append(len(test_tuple)-K)\n    result_list = []\n    for i in range(len(length_list)):\n        # print(i)\n        if length_list[i] == 0:\n            pass\n        else:\n            result_list.append(test_list[i])\n    return result_list\n",
        "num_ids": 121
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # initialize a list to hold the new list\n    new_list = []\n    # loop through the original list\n    for i in test_list:\n        # if the tuple length is greater than the k\n        if len(i) > K:\n            # get the first K element in the tuple and append to new_list\n            new_list.append(i[:K])\n        # otherwise add the tuple to new_list\n        else:\n            new_list.append(i)\n    # return the new list\n    return new_list\n",
        "num_ids": 127
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        temp = test_list[:K]\n        if len(temp) == K:\n            return test_list\n        else:\n            return trim_tuple(test_list[K:], K)\n",
        "num_ids": 70
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(tuple(i[:K]))\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for each_tuple in test_list:\n        new_list.append(tuple(each_tuple[:K]))\n    return new_list\n",
        "num_ids": 47
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[k:]) for t in test_list]\n",
        "num_ids": 21
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1 * test_tup2\n",
        "num_ids": 16
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    lst1 = []\n    for i in range(len(test_tup1)):\n        lst1.append(test_tup1[i] * test_tup2[i])\n    return tuple(lst1)\n",
        "num_ids": 59
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 36
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = ()\n    for i in range(len(test_tup1)):\n        x = test_tup1[i] * test_tup2[i]\n        res += (x,)\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2]\n",
        "num_ids": 56
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup_mul = ()\n    for i, j in zip(test_tup1, test_tup2):\n        test_tup_mul += (i * j, )\n    return test_tup_mul\n",
        "num_ids": 60
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    tup_1 = list(test_tup1)\n    tup_2 = list(test_tup2)\n    \n    if len(tup_1) > len(tup_2):\n        for i in range(len(tup_2)):\n            if len(tup_1) > 0:\n                tup_1.append(tup_1.pop(0))\n    else:\n        for i in range(len(tup_1)):\n            if len(tup_2) > 0:\n                tup_2.append(tup_2.pop(0))\n    \n    return tuple(tup_1) + tuple(tup_2)\n",
        "num_ids": 170
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list1.sort()\n    test_list2.sort()\n    test_list3 = []\n    for i in range(len(test_list1)):\n        test_list3.append(test_list1[i] * test_list2[i])\n    return tuple(test_list3)\n",
        "num_ids": 107
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_result = tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n    return test_result\n",
        "num_ids": 39
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[1], test_tup1[1] * test_tup2[0]\n    \n",
        "num_ids": 41
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    lst_tup = [] \n    for i in tup: \n        if i in count: \n            lst_tup.append(i) \n    return lst_tup \n    \n    \ntup = (1,2,3,4,3,2)\nlst = [1,2,3,4,3,2]\nprint(count_Occurrence(tup, lst))\n",
        "num_ids": 113
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for i in tup:\n        if i in count:\n            print(i, \": \", count[i]) \n    return\n",
        "num_ids": 43
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = dict()\n    for i in tup:\n        if i in occ:\n            occ[i] += 1\n        else:\n            occ[i] = 1\n    #print(occ)\n    #return occ\n    for j in lst:\n        if j in occ:\n            occ[j] += 1\n        else:\n            occ[j] = 1\n    return occ \n    \nprint(\"\\n\\n***************\\n\\n\")\n",
        "num_ids": 111
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    new_lst=[]\n    for i in tup:\n        for j in range(len(lst)):\n            if i==lst[j]:\n                new_lst.append(lst[j])\n    return new_lst\n",
        "num_ids": 62
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tuple(Counter(lst).items())\n",
        "num_ids": 14
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_count = Counter(lst)\n    occurence = 0\n    for ele in tup:\n        if ele in lst_count:\n            occurence = occurence + 1\n    return occurence\n",
        "num_ids": 56
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # count_Occurrence = lambda tup,lst: [tup[i] in lst for i in range(len(tup))]\n    return sum([1 for i in range(len(tup)) if tup[i] in lst])\n",
        "num_ids": 63
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for item in lst:\n        if item in tup:\n            count = tup.count(item)\n            print(item, '=', count)\n",
        "num_ids": 40
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(0,len(lst)):\n        if tup[i] == lst[i]:\n            count+=1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i ** 3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**3)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = [n ** 3 for n in nums]\n    return cube\n",
        "num_ids": 20
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # if type(nums)!= list:\n    #     print('Not a list')\n    #     return nums\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**3)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Your code here\n    for i in range(len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n",
        "num_ids": 41
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)\ncube_nums([1, 2, 3, 4])\n",
        "num_ids": 32
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    return [num**3 for num in nums]\n",
        "num_ids": 17
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n",
        "num_ids": 38
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(map(lambda x: 2 ** x, range(n)))\n",
        "num_ids": 20
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = n\n    result = 0\n    while n > 0:\n        result = result + (n%10)\n        n = n//10\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    sum = 1\n    if n == 1:\n        return 1\n    else:\n        for i in range(2,n+1):\n            sum += i\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 2\n    sum = 0\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    ans = 0\n    i = 1\n    while(i < n):\n        ans = ans + i\n        i = i + 1\n    return ans\n",
        "num_ids": 38
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # the sum of the first n numbers\n    if n == 1: \n        return 1 \n    else: \n        return n + cal_sum(n-1)\n",
        "num_ids": 43
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=1:\n        return n\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans = ans + i\n    return ans\n",
        "num_ids": 31
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(l):\n        res.append(str.pop(0))\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return \"\".join(str[i] for i in range(0, len(str), l))\n",
        "num_ids": 26
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str = \"\"\n    for i in range(l):\n        str += str + \"\\n\"\n    return str[0:l]\n",
        "num_ids": 34
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return(str.split()[:l])\n",
        "num_ids": 14
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(0, l):\n        if len(str[i]) > 0:\n            res.append(str[i])\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0,len(str),l)]\n",
        "num_ids": 27
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return list(filter(lambda x: len(x) == l, str))\n",
        "num_ids": 21
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_size = l[0]\n    length = 0\n    count = 1\n    while(length < str_size):\n        count += 1\n        length += len(l[count])\n    return l[:count], count\n",
        "num_ids": 56
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    index = 0\n    while index < len(l) and l[index]!= \"\":\n        index += 1\n    if index!= len(l) or l == \"\":\n        return []\n    str += \" \"\n    while l[index]!= \"\":\n        str += l[index]\n        index += 1\n    if index!= len(l):\n        str += \" \"\n    return str.split()\n",
        "num_ids": 102
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    n=0\n    s = \"\"\n    while(n<l):\n        s += str[n]\n        n+=1\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # YOUR CODE HERE\n    return text1.replace(' ','')\n",
        "num_ids": 19
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # text = text1.strip()\n    # return text\n    return text1.replace(\" \", \"\")\n",
        "num_ids": 28
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Implement your solution below:\n    text = text1.strip()\n    return text\n",
        "num_ids": 23
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #Remove all the white spaces from the string\n    return re.sub('\\s+','',text1)\n",
        "num_ids": 28
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "num_ids": 10
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n    \ndef is_even(num):\n    '''\n    Write a function that will return a boolean value True if the number is even, otherwise False.\n    '''\n    if(num%2==0):\n        return True\n    else:\n        return False\n    \ndef is_divisible_by_2(num):\n    '''\n    Write a function to return True if the number is divisible by 2, otherwise False.\n    '''\n    if(num%2==0):\n        return True\n    else:\n        return False\n    \ndef count_digits(number):\n    '''\n    Write a function that will count the number of digits in a given number\n    '''\n    if(re.findall(\"^[0-9]+$\",number)):\n        return len(number)\n    else:\n        return -1\n    \ndef count_chars(string):\n    '''\n    Write a function that will count the number of characters in a given string.\n    '''\n    return len(string)\n    \ndef count_characters(string):\n    '''\n    Write a function that will count the number of characters in a given string.\n    '''\n    return len(string)\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    return string==string[::-1]\n    \ndef is_rotation(string1,string2):\n    '''\n    Write a function to check if a given string is a rotation of another given string.\n    '''\n    if(len(string1)!=len(string2)):\n        return False\n    else:\n        return string1 in string2+string2\n        \ndef partition(string):\n    '''\n    Write a function to partition a given string into pairs of adjacent characters.\n    '''\n    if(re.findall(\"[0-9]+[a-zA-Z]+\",string)):\n        return re.split(\"[0-9]+[a-zA-Z]+\",string)\n    else:\n        return -1\n    \ndef is_anagram(string1,string2):\n    '''\n    Write a function to check if two given strings are anagrams.\n    '''\n    if(len(string1)==len(string2) and sorted(string1)==sorted(string2)):\n        return True\n    else:\n        return False\n    \ndef is_palin_perm(string1,string2):\n    '''\n    Write a function to check if two given strings are palindrome permutations.\n    '''\n    if(len(string1)==len(string2)):\n        if(string1==string2):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef factorial(number):\n    '''\n    Write a function that will return the factorial of a given number.\n    '''\n    if(re.findall(\"^[0-9]+$\",number)):\n        return 1\n    else:\n        return -1\n    \ndef reverse(string):\n    '''\n    Write a function that will reverse a given string.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",string)):\n        return string[::-1]\n    else:\n        return -1\n    \ndef find_repeat(string):\n    '''\n    Write a function to find the first repeating character.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",string)):\n        return max(string,key=string.count)\n    else:\n        return -1\n    \ndef is_unique(string):\n    '''\n    Write a function to check if the given string contains any duplicate characters.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",string)):\n        return len(set(string))==len(string)\n    else:\n        return False\n    \ndef is_password_valid(password):\n    '''\n    Write a function that will determine if the given password is valid.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",password) and (len(password)>=8 and len(password)<=16)):\n        return True\n    else:\n        return False\n    \ndef is_subsequence(string1,string2):\n    '''\n    Write a function to check if a given string is a subsequence of another given string.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",string1) and re.findall(\"^[a-zA-Z]+$\",string2)):\n        return True\n    else:\n        return False\n    \ndef is_balanced(string):\n    '''\n    Write a function that will determine if a given string is balanced.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",string)):\n        if(len(string)%2==0):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_balanced_brackets(string):\n    '''\n    Write a function to check if a given string is balanced.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",string)):\n        if(len(string)%2==0):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_balanced_bracket(string):\n    '''\n    Write a function to check if a given string is balanced.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",string)):\n        if(len(string)%2==0):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef get_pattern(str1):\n    '''\n    Write a function that returns the pattern of a given string.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",str1)):\n        return str1\n    else:\n        return -1\n    \ndef get_pattern_binary(str1):\n    '''\n    Write a function that returns the pattern of a given string.\n    '''\n    if(re.findall(\"^[0-1]+$\",str1)):\n        return str1\n    else:\n        return -1\n    \ndef get_pattern_ternary(str1):\n    '''\n    Write a function that returns the pattern of a given string.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",str1)):\n        return str1\n    else:\n        return -1\n    \ndef get_pattern_four_chars(str1):\n    '''\n    Write a function that returns the pattern of a given string.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",str1)):\n        if(len(str1)>=4):\n            return str1\n        else:\n            return -1\n    else:\n        return -1\n    \ndef get_pattern_five_chars(str1):\n    '''\n    Write a function that returns the pattern of a given string.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",str1)):\n        if(len(str1)>=5):\n            return str1\n        else:\n            return -1\n    else:\n        return -1\n    \ndef get_pattern_six_chars(str1):\n    '''\n    Write a function that returns the pattern of a given string.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",str1)):\n        if(len(str1)>=6):\n            return str1\n        else:\n            return -1\n    else:\n        return -1\n    \ndef get_pattern_seven_chars(str1):\n    '''\n    Write a function that returns the pattern of a given string.\n    '''\n    if(re.findall(\"^[a-zA-Z]+$\",str1)):\n        if(len(str1)>=7):\n            retur",
        "num_ids": 42
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    output = re.sub(\" +\",'', text1)\n    return output\n",
        "num_ids": 21
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r\"\\s+\", \" \", text1)\n    return text2\n",
        "num_ids": 27
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    output = re.sub(\" +\", \" \", text1)\n    return output\n",
        "num_ids": 21
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    if loss_amount <= 0:\n        return 0\n    else:\n        return loss_amount\n",
        "num_ids": 38
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount>0:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    return actual_cost - sale_amount\n",
        "num_ids": 27
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return 0 \n    return (actual_cost - sale_amount)\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        return (sale_amount-actual_cost)\n    else:\n        return 0\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0.0\n    if actual_cost>sale_amount:\n        loss_amount=actual_cost-sale_amount\n    else:\n        loss_amount=0.0\n    return loss_amount\n",
        "num_ids": 54
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    return sale_amount - actual_cost\n",
        "num_ids": 27
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = int(actual_cost) - int(sale_amount)\n    if loss_amount <= 0:\n        return 0\n    else:\n        return loss_amount\n",
        "num_ids": 44
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<=sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n        \ndef loss_amount_for_registration(actual_cost,sale_amount,quantity): \n    '''\n    Write a function that gives loss amount on a registration if the given amount has loss else return 0.\n    '''\n    if actual_cost<=sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return quantity*sale_amount\n",
        "num_ids": 36
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(actual_cost > sale_amount):\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = [] \n    for i in range(1, n): \n        if (n % i == 0): \n            factors.append(i) \n",
        "num_ids": 42
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i=1\n    a=0\n    while(i<=n):\n        if(i%2==0):\n            a=a+i\n        i=i+1\n    print(\"The sum of factors of\",n,\"is\",a)\n    return\ndef polynomialInterpolation(x,a,b,c,d,e) : \n    '''\n    Write a python function to find the polynomial interpolation for any polynomial function of order 3.\n    '''\n    y1=a+b*x+c*x**2\n    y2=d+e*x\n    y=(1/3)*((y1**3)+(y2**3))\n    print(\"The polynomial interpolation of function f(x)=x^3+2x+3 is\",y)\n    return\ndef biQuad(x,a,b,c,d,e) : \n    '''\n    Write a python function to find the solution of the bi-quadratic polynomial\n    '''\n    #partial derivatives of the 2nd order polynomial\n    a2=3*a\n    b2=2*b\n    c2=3*c\n    d2=2*d\n    e2=3*e\n    #solution of the bi-quadratic polynomial\n    z=((d2*x*x)+((b2*x)+c2)-a2)/((d2*(x*x))+((b2*(x))+(c2)))\n    print(\"The solution of the bi-quadratic polynomial is\",z)\n    return\ndef secant(x1,x2,x3,x4,x5,x6) : \n    '''\n    Write a python function to find the solution of secant equation using the Newton method.\n    '''\n    a=1.2\n    b=1.5\n    c=1\n    d=1.5\n    e=0.2\n    f=(a*x1+b*x2+c*x3+d*x4+e*x5+x6)\n    print(\"The solution of the secant equation is\",f)\n    return\ndef quadraticEquation(a,b,c) : \n    '''\n    Write a python function to find the solutions of the quadratic equation using Newton Method.\n    '''\n    #delta function \n    delta=b*b-4*a*c\n    if(delta<0) : \n        print(\"the quadratic equation has no real roots\")\n    else : \n        x1=((-b)/(2*a))\n        x2=((-b)-math.sqrt(delta))/(2*a)\n        x3=((-b)+math.sqrt(delta))/(2*a)\n        print(\"The solutions of the quadratic equation are\",x1,x2,x3)\n    return\ndef cubicEquation(a,b,c,d) : \n    '''\n    Write a python function to find the solutions of the cubic equation using Newton Method.\n    '''\n    #delta function \n    delta=(b*b)-4*a*c\n    if(delta<0) : \n        print(\"the cubic equation has no real roots\")\n    else : \n        x1=(-b+(math.sqrt(delta)))/(2*a)\n        x2=(-b-(math.sqrt(delta)))/(2*a)\n        print(\"The solutions of the cubic equation are\",x1,x2)\n    return\ndef hyperbolicEquation(a,b,c,d) : \n    '''\n    Write a python function to find the solutions of the hyperbolic equation using Newton Method.\n    '''\n    #delta function \n    delta=b*b-4*a*c\n    if(delta<0) : \n        print(\"the hyperbolic equation has no real roots\")\n    else : \n        x1=(-b-math.sqrt(delta))/(2*a)\n        x2=(-b+math.sqrt(delta))/(2*a)\n        print(\"The solutions of the hyperbolic equation are\",x1,x2)\n    return\ndef cubicEquation2(a,b,c,d,e) : \n    '''\n    Write a python function to find the solutions of the cubic equation using Newton Method.\n    '''\n    #delta function \n    delta=b*b-4*a*c\n    if(delta<0) : \n        print(\"the cubic equation has no real roots\")\n    else : \n        x1=(-b+(math.sqrt(delta)))/(2*a)\n        x2=(-b-(math.sqrt(delta)))/(2*a)\n        x3=(-b-(math.sqrt(delta)))/(2*a)\n        print(\"The solutions of the cubic equation are\",x1,x2,x3)\n    return\ndef powModulus(x,a,b) : \n    '''\n    Write a python function to find the modulus of the complex number.\n    '''\n    #complex numbers\n    #print(\"the modulus of the complex number is\",(x**2)%(a*b))\n    z=(x**2)%(a*b)\n    print(\"the modulus of the complex number is\",z)\n    return\ndef fracPart(x,y,z) : \n    '''\n    Write a python function to find the fractional part of the complex number.\n    '''\n    #complex numbers\n    #print(\"the fractional part of the complex number is\",(x-math.floor(x/y)*z))\n    z=(x-math.floor(x/y)*z)\n    print(\"the fractional part of the complex number is\",z)\n    return\ndef fracPart2(x,y) : \n    '''\n    Write a python function to find the fractional part of the complex number.\n    '''\n    #complex numbers\n    #print(\"the fractional part of the complex number is\",(x-math.floor(x/y)*z))\n    z=(x-math.floor(x/y))\n    print(\"the fractional part of the complex number is\",z)\n    return\ndef arithmaticExp(a,b,c) : \n    '''\n    Write a python function to find the sum of an arithmetic progression.\n    '''\n    #arithmetic progression\n    z=(a+b)/2\n    print(\"the arithmetic progression is\",z)\n    return\ndef arithmaticExp2(a,b,c) : \n    '''\n    Write a python function to find the sum of an arithmetic progression.\n    '''\n    #arithmetic progression\n    z=a+c\n    print(\"the arithmetic progression is\",z)\n    return\ndef arithmaticExp3(a,b,c) : \n    '''\n    Write a python function to find the sum of an arithmetic progression.\n    '''\n    #arithmetic progression\n    z=a-c\n    print(\"the arithmetic progression is\",z)\n    return\ndef arithmaticExp4(a,b,c) : \n    '''\n    Write a python function to find the sum of an arithmetic progression.\n    '''\n    #arithmetic progression\n    z=a*c\n    print(\"the arithmetic progression is\",z)\n    return\ndef arithmaticExp5(a,b,c) : \n    '''\n    Write a python function to find the sum of an arithmetic progression.\n    '''\n    #arithmetic progression\n    z=a/c\n    print(\"the arithmetic progression is\",z)\n    return\ndef arithmaticExp6(a,b,c) : \n    '''\n    Write a python function to find the sum of an arithmetic progression.\n    '''\n    #arithmetic progression\n    z=a**c\n    print(\"the arithmetic progression is\",z)\n    return\ndef arithmaticExp7(a,b,c) : \n    '''\n    Write a python function to find the sum of an arithmetic progression.\n    '''\n    #arithmetic progression\n    z=b%c\n    print(\"the arithmetic progression is\",z)\n    return\ndef arithmaticExp8(a,b,c) : \n    '''\n    Write a python function to find the sum of an arithmetic progression.\n    '''\n    #arithmeti",
        "num_ids": 8
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while(n > 0):\n        if (n % 2 == 0):\n            sum = sum + n\n        n = n // 2\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(n%i==0):\n            if(i%2==0):\n                sum = sum+i\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    for i in range(2,n):\n        if n % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n%2!=0:\n        return -1\n    sum=0\n    for i in range(2,n):\n        if n%i==0:\n            sum=sum+i\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    while (n > 1): \n        if n % 2 == 0: \n            sum_of_factors += n \n        n = n / 2\n    return sum_of_factors\nprint(sumofFactors(7)) \nprint(sumofFactors(27)) \n",
        "num_ids": 80
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factor_sum = 0\n    for i in range(1,n) : \n        if n % i == 0 : \n            factor_sum += i\n    return factor_sum\n",
        "num_ids": 45
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    print(sum)\n",
        "num_ids": 47
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while(i <= math.sqrt(n)) :\n        if (n % i == 0) :\n            sum = sum + i + n/i\n        i = i + 1\n    if (n!= 1) :\n        sum = sum + n\n    return sum\n",
        "num_ids": 76
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search('z',text)\n    if match:\n        print(\"yes\")\n    else:\n        print(\"no\")\n",
        "num_ids": 35
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = re.search('z',text)\n    if wordz:\n        return True\n    else:\n        return False\n    \ndef test_text_match_wordz():\n    assert text_match_wordz('zebra') == True\n    assert text_match_wordz('zebra zebra zebra zebra zebra zebra') == True\n    assert text_match_wordz('dog dog dog dog dog dog') == False\n    assert text_match_wordz('') == False\n    \ntext_match_wordz('zebra')\ntext_match_wordz('zebra zebra zebra zebra zebra zebra')\ntext_match_wordz('dog dog dog dog dog dog')\ntext_match_wordz('')\n",
        "num_ids": 178
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall(r'z+', text)\n    return len(match)\n",
        "num_ids": 25
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    if re.search(pattern, text):\n        print('Found a word containing \"z\"')\n    else:\n        print('No word containing \"z\"')\n",
        "num_ids": 48
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def check_zip(word):\n        if word.startswith('z'):\n            return True\n        else:\n            return False\n    return check_zip\n",
        "num_ids": 41
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\bz\\w+', text)\n",
        "num_ids": 20
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.match(\"z+\", text):\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(\"z+\", text)\ndef text_match_wordz(tex",
        "num_ids": 23
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_regex = re.compile(r'\\bz\\w+\\b')\n    return word_regex.findall(text)\n",
        "num_ids": 38
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1, 13):\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # checking whether the month number is positive or not.\n    if monthnum2>0:\n        # checking whether the given month number is 31 or not.\n        if monthnum2%4==0:\n            print('31')\n        else:\n            print('30')\n        return 1\n    else:\n        return 0\n",
        "num_ids": 77
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 0 and monthnum2 < 13:\n        if monthnum2 == 2:\n            return True if 29 in range(1, monthnum2+1) else False\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True if 30 in range(1, monthnum2+1) else False\n        else:\n            return True if 31 in range(1, monthnum2+1) else False\n    else:\n        return False\n",
        "num_ids": 122
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"31\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"30\")\n    else:\n        print(\"28\")\n",
        "num_ids": 97
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in (1,3,5,7,8,10,12):\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Your code goes here\n    \n    if monthnum2 == 2:\n        print(\"It is a leap year\")\n    else:\n        print(\"It is not a leap year\")\n    \n",
        "num_ids": 47
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for s in stringlist:\n        result.append(s[::-1])\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n",
        "num_ids": 14
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # First solution\n    # for i in range(len(stringlist)-1, -1, -1):\n    #     stringlist[i] = stringlist[i][::-1]\n    # return stringlist\n    # Second solution\n    reverse_list = []\n    for i in range(len(stringlist)-1, -1, -1):\n        reverse_list.append(stringlist[i][::-1])\n    return reverse_list\n",
        "num_ids": 108
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # This is where the list of strings can be split into individual strings\n    stringlist = stringlist[::-1]\n",
        "num_ids": 30
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # reversing the strings using zip() and list()\n    new_list = list(zip(*stringlist))\n    return new_list\n",
        "num_ids": 33
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)//2):\n        stringlist[i], stringlist[len(stringlist)-i-1] = stringlist[len(stringlist)-i-1], stringlist[i]\n",
        "num_ids": 54
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    # your code here\n    \n    reverse_string_list = []\n    for i in range(len(stringlist)):\n        reverse_string_list.append(stringlist[i][::-1])\n    return reverse_string_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2013
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    list_length = len(stringlist)\n    for i in range(list_length):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 46
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    a = len(lst)\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    for i in range(a):\n        if len(lst[i]) < len(lst[b]):\n            b = i\n        if len(lst[i]) > len(lst[c]):\n            c = i\n        if len(lst[i]) > len(lst[d]):\n            d = i\n        if len(lst[i]) < len(lst[e]):\n            e = i\n        if len(lst[i]) < len(lst[f]):\n            f = i\n        if len(lst[i]) > len(lst[g]):\n            g = i\n    print('Minimum length of sublists are:')\n    print('1st minimum length:',lst[b])\n    print('2nd minimum length:',lst[c])\n    print('3rd minimum length:',lst[d])\n    print('4th minimum length:',lst[e])\n    print('5th minimum length:',lst[f])\n    print('6th minimum length:',lst[g])\n",
        "num_ids": 296
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    if length == 0:\n        return None\n    min_length = lst[0]\n    min_index = 0\n    for i in range(1, length):\n        if lst[i] < min_length:\n            min_index = i\n            min_length = lst[i]\n    return min_index\n",
        "num_ids": 88
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min=lst[0]\n    for i in range(1,len(lst)):\n        if(len(lst[i])<len(min)):\n            min=lst[i]\n    return min\n",
        "num_ids": 56
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(min(lst, key=len))\n    for i in lst:\n        if len(i) == min_len:\n            return i\n    return -1\n",
        "num_ids": 48
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    mini=float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i])+len(lst[j])==mini:\n                if lst[i]==lst[j]:\n                    mini=len(lst[i])\n                else:\n                    mini=len(lst[i])\n    print(\"The minimum length is \",mini)\n    return mini\n",
        "num_ids": 116
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    return lst\ndef main():\n    print(\"Enter the numbers\")\n    lst = []\n    for i in range(4):\n        lst.append(int(input()))\n    print(\"Enter the numbers\")\n    lst1 = []\n    for i in range(4):\n        lst1.append(int(input()))\n    lst = Find_Min(lst)\n    lst1 = Find_Min(lst1)\n    if lst == lst1:\n        print(\"The minimum length of the sublist is\", lst[1])\n    else:\n        print(\"The minimum length of the sublist is\", lst1[1])\nif __name__ == '__main__':\n    main()",
        "num_ids": 181
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sub_list = []\n    for i in range(len(lst)):\n        if len(lst[i])< min_len:\n            min_len = len(lst[i])\n            min_sub_list = lst[i]\n    return min_sub_list\n",
        "num_ids": 86
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 0\n    min_length_index = 0\n    for i in range(1,len(lst)):\n        if(len(lst[i]) < len(lst[min_length])):\n            min_length = len(lst[i])\n            min_length_index = i\n    return(min_length_index)\n",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return 0\n    Min = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < len(Min):\n            Min = lst[i]\n    return Min\n",
        "num_ids": 69
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_index = 0\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return lst[min_index]\n",
        "num_ids": 82
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l==b:\n        return 0\n    else:\n        return l*b\n",
        "num_ids": 23
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    ",
        "num_ids": 9
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace(\"a\", \"\").replace(\"A\", \"\").replace(\"e\", \"\").replace(\"E\", \"\").replace(\"i\", \"\").replace(\"I\", \"\").replace(\"o\", \"\").replace(\"O\", \"\").replace(\"u\", \"\").replace(\"U\", \"\")\n",
        "num_ids": 68
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace(str1.upper(), str1.lower())\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_string = re.findall(r'[A-Z]', str1)\n    for i in range(len(uppercase_string)):\n        str1 = str1.replace(uppercase_string[i],'')\n    return str1\n",
        "num_ids": 67
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]\", \"\", str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #str1 = 'this is awesome'\n    pattern = re.compile(r'\\b[A-Z]{1}\\b')\n    return pattern.sub('', str1)\n",
        "num_ids": 47
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n    \ndef remove_invalid_chars(str1):\n    '''\n    Write a function to remove invalid characters from a string.\n    '''\n    return re.sub('[^A-Za-z0-9]+', '', str1)\n",
        "num_ids": 27
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str1)):\n        if str1[i].islower():\n            new_string += str1[i]\n        else:\n            new_string += \" \"\n    return new_string\n",
        "num_ids": 62
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.casefold()\n",
        "num_ids": 11
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #return str1.replace('[A-Z]','')\n    return ''.join(list(filter(lambda x: x.islower(), str1)))\n",
        "num_ids": 41
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0],lst)\n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst] \n    \nif __name__ == \"__main__\":\n    print(Extract([[1, 2, 3],\n        [4, 5],\n        [6]]))\n    print(Extract([[1, 2, 3],\n        [4, 5],\n        [6]]))\n    print(Extract([[1, 2, 3],\n        [4, 5],\n        [6]]))\n    print(Extract([[1, 2, 3, 4, 5, 6],\n        [4, 5],\n        [6]]))\n    print(Extract([[1, 2, 3],\n        [4, 5, 6],\n        [7]]))\n    print(Extract([[1, 2, 3],\n        [4, 5, 6],\n        [7],\n        [8]]))",
        "num_ids": 206
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst_1 = []\n    for i in range(len(lst)):\n        lst_1.append(lst[i][0])\n    return lst_1\n",
        "num_ids": 46
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    l = list() \n    if len(lst) == 0:\n        return l\n    first = lst[0]\n    if len(first) == 0:\n        return l\n    l.append(first[0])\n    for i in range(1,len(first)):\n        l.append(first[i])\n    for i in range(len(lst)-1):\n        l.append(lst[i+1][0])\n    return l\n",
        "num_ids": 114
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def Extract(lst):\n    #start writing your code here\n        lst1=[]\n        for i in range(0,len(lst),2):\n            lst1.append(lst[i])\n        return lst1\n    return Extract\n",
        "num_ids": 64
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i]=lst[i][0]\n    return lst\n",
        "num_ids": 34
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return Extract(lst[0]) + [Extract(lst[1:])]\n    \ndef is_palindrome(lst):\n    '''\n    Write a python function to check if a given list is a palindrome.\n    '''\n    return lst == Extract(lst)\n    \n    \n        \n        \n        \n    \n",
        "num_ids": 25
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for x in lst:\n        result.append(x[0])\n    return result \n",
        "num_ids": 30
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    # lst = [1,2,3,[4,5],6,7,8,9]\n    # lst1 = [1,2,3,4,5]\n    # lst2 = [10,11,12,13,14,15,16,17]\n    # lst3 = [21,22,23]\n",
        "num_ids": 85
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x: x[0], lst))\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    l = 0\n    for c in str:\n        if c.isupper():\n            l+=1\n    return l\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt=0\n    for i in str:\n        if i.isupper():\n            cnt+=1\n    return cnt\nprint(upper_ctr(\"Hello World\"))\n",
        "num_ids": 44
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count(\"U\")\n",
        "num_ids": 13
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return(len(str.upper()))\n",
        "num_ids": 13
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # count_upper_case = len(str.split(\" \")) - str.count(\" \")\n    # return count_upper_case\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n    \ndef upper_ctr_nospace(str):\n    '''\n    Write a python function to count the upper case characters in a given string with space.\n    '''\n    return str.upper().count(' ')\n    \ndef upper_ctr_nospace_2(str):\n    '''\n    Write a python function to count the upper case characters in a given string with space.\n    '''\n    return len(str.split()) - str.count(\" \")\n",
        "num_ids": 18
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if ord(str[i]) > 64 and ord(str[i]) < 91:\n            count += 1\n    print(\"Upper case count in the given string is\", count)\n",
        "num_ids": 63
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result=str.upper().count(\"A\")\n    return result\nprint(upper_ctr(\"AaaaBbbbCccC\")) #returns 2\nprint(upper_ctr(\"aAAAbbbbbbCccC\")) #returns 3\nprint(upper_ctr(\"AaaaBbbbCccC\")) #returns 4\nprint(upper_ctr(\"AaaaBbbbCccCdddd\")) #returns 4\nprint(upper_ctr(\"AaaaBbbbCccCdddde\")) #returns 5\nprint(upper_ctr(\"\")) #returns 0\n",
        "num_ids": 136
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isupper()):\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(count)\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                new_list.append([list1[i],list1[j],list1[k]])\n    return new_list\n",
        "num_ids": 86
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # return list(itertools.combinations(list1, r=3))\n    result = []\n    for i in range(1, len(list1) + 1):\n        result.extend(list(map(list, list(itertools.combinations(list1, r=i)))))\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 0:\n        result.append([])\n    else:\n        for i in range(len(list1)):\n            for comb in combinations_list(list1[i+1:]):\n                result.append([list1[i]] + comb)\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        return_list = []\n        for i in range(len(list1)):\n            if i == 0:\n                list1 = list1[1:]\n            else:\n                list1 = list1[0:i] + list1[i+1:]\n            return_list.extend([[list1[0]] + x for x in combinations_list(list1)])\n    return return_list\n",
        "num_ids": 139
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # if we already have the answer, return it\n    if len(list1) <= 1:\n        return [[]]\n    elif len(list1) == 2:\n        return [[], list1]\n",
        "num_ids": 50
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combi_list = []\n    #sort the list\n    list1.sort()\n    #loop through the list\n    for i in range(0,len(list1)):\n        #reverse the list\n        list1.reverse()\n        #build a list of the sorted list\n        combi_list.append(list1)\n        #remove the element from the list\n        list1.pop()\n        #reverse the list again\n        list1.reverse()\n    #return the list\n    return combi_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    com = []\n    for i in range(len(list1)):\n        if len(com)==0:\n            com.append(list1[i])\n        else:\n            for j in range(len(com)):\n                com.append(com[j]+list1[i])\n    return com\n    \n    ",
        "num_ids": 79
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return [list1]\n",
        "num_ids": 36
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    comb = []\n    len_list = len(list1)\n",
        "num_ids": 20
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_length = len(list1)\n    list_combinations = []\n    for i in range(list_length):\n        for j in range(i+1,list_length):\n            list_combinations.append(list1[i] + list1[j])\n    return list_combinations\n",
        "num_ids": 74
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_value = max(arr)\n    start_idx = arr.index(max_value)\n    # The maximum product subarray could be from (start_idx + 1) to end_idx\n    end_idx = len(arr) - 1\n    max_product_from_start = max_value * arr[start_idx]\n    max_product_from_end = max_value * arr[end_idx]\n    current_max = max_value\n    while start_idx!= end_idx:\n        current_max = max(arr[start_idx], current_max)\n        current_max = max(arr[end_idx], current_max)\n        if current_max > max_value:\n            # current_max is greater than max_value.\n            # Do not continue the while loop.\n            break\n        start_idx += 1\n        end_idx -= 1\n        max_product_from_start = max(max_product_from_start, max_value * arr[start_idx])\n        max_product_from_end = max(max_product_from_end, max_value * arr[end_idx])\n    return max_product_from_start, max_product_from_end\n",
        "num_ids": 300
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            temp = arr[i] * arr[j]\n            if temp > max_prod:\n                max_prod = temp\n    return max_prod\n",
        "num_ids": 74
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    res = arr[0]\n    cur_max = arr[0]\n    for i in range(1, n):\n        cur_max = max(arr[i], arr[i] * cur_max)\n        res = max(res, cur_max)\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            arr[j] = arr[j] * arr[i]\n            \n    max_product = -999999999999999999\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            \n    return max_product\n",
        "num_ids": 102
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #FASTEST:\n    #    -max_product = max(cur_product, cur_product * min_end)\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    #Slow:\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    # Slow:\n    #    -arr = [-2,3,-4]\n    #    cur_product = -2\n    #    min_end = -4\n    #    max_product = 6\n    \n    if not arr or len(arr) <= 1:\n        return None\n    \n    cur_max = arr[0]\n    min_end = arr[0]\n    cur_min = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        cur_product = max(cur_max*arr[i], arr[i])\n        cur_max = max(cur_max, cur_min*arr[i], arr[i])\n        cur_min = min(cur_min, cur_product, arr[i])\n        max_product = max(max_product, cur_max)\n        \n    return max_product\n    \ndef max_subarray_product_2(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #FASTEST:\n    #    -max_product = max(cur_product, cur_product * min_end)\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    #Slow:\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    # Slow:\n    #    -arr = [-2,3,-4]\n    #    cur_product = -2\n    #    min_end = -4\n    #    max_product = 6\n    \n    if not arr or len(arr) <= 1:\n        return None\n    \n    cur_max = arr[0]\n    min_end = arr[0]\n    cur_min = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        cur_product = max(cur_max*arr[i], arr[i])\n        cur_max = max(cur_max, cur_min*arr[i], arr[i])\n        cur_min = min(cur_min, cur_product, arr[i])\n        max_product = max(max_product, cur_max)\n        \n    return max_product\n    \ndef max_subarray_product_3(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #FASTEST:\n    #    -max_product = max(cur_product, cur_product * min_end)\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    #Slow:\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    # Slow:\n    #    -arr = [-2,3,-4]\n    #    cur_product = -2\n    #    min_end = -4\n    #    max_product = 6\n    \n    if not arr or len(arr) <= 1:\n        return None\n    \n    cur_max = arr[0]\n    min_end = arr[0]\n    cur_min = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        cur_product = max(cur_max*arr[i], arr[i])\n        cur_max = max(cur_max, cur_min*arr[i], arr[i])\n        cur_min = min(cur_min, cur_product, arr[i])\n        max_product = max(max_product, cur_max)\n        \n    return max_product\n    \ndef max_subarray_product_4(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #FASTEST:\n    #    -max_product = max(cur_product, cur_product * min_end)\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    #Slow:\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    # Slow:\n    #    -arr = [-2,3,-4]\n    #    cur_product = -2\n    #    min_end = -4\n    #    max_product = 6\n    \n    if not arr or len(arr) <= 1:\n        return None\n    \n    cur_max = arr[0]\n    min_end = arr[0]\n    cur_min = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        cur_product = max(cur_max*arr[i], arr[i])\n        cur_max = max(cur_max, cur_min*arr[i], arr[i])\n        cur_min = min(cur_min, cur_product, arr[i])\n        max_product = max(max_product, cur_max)\n        \n    return max_product\n    \ndef max_subarray_product_5(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #FASTEST:\n    #    -max_product = max(cur_product, cur_product * min_end)\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    #Slow:\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    # Slow:\n    #    -arr = [-2,3,-4]\n    #    cur_product = -2\n    #    min_end = -4\n    #    max_product = 6\n    \n    if not arr or len(arr) <= 1:\n        return None\n    \n    cur_max = arr[0]\n    min_end = arr[0]\n    cur_min = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        cur_product = max(cur_max*arr[i], arr[i])\n        cur_max = max(cur_max, cur_min*arr[i], arr[i])\n        cur_min = min(cur_min, cur_product, arr[i])\n        max_product = max(max_product, cur_max)\n        \n    return max_product\n    \ndef max_subarray_product_6(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #FASTEST:\n    #    -max_product = max(cur_product, cur_product * min_end)\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    #Slow:\n    #    -arr = [2,3,-2,4]\n    #    cur_product = 2\n    #    min_end = -2\n    #    max_product = 6\n    # Slow:\n    #    -arr = [-2,3,-4]",
        "num_ids": 143
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            max_prod = max(arr[i:j+1]) * (j-i+1)\n    return max_prod\n",
        "num_ids": 68
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    for i in range(0, len(arr)):\n        max_product = max(arr[i], max_product*arr[i])\n",
        "num_ids": 46
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    best_product = arr[0]\n    current_product = arr[0]\n    for i in range(1,len(arr)):\n        current_product = max(current_product*arr[i],arr[i])\n        best_product = max(current_product,best_product)\n    return best_product\n",
        "num_ids": 78
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] * arr[i], arr[i])\n",
        "num_ids": 65
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    '''\n    Idea: Let's start a max_arr by storing the maximum value of arr, i.e., arr[i]\n    i.e., max_arr. Let's also keep a max_subarray_product by storing the largest\n    subarray ending with arr[i]\n    '''\n    max_arr = float('-inf')\n    max_subarray_product = float('-inf')\n    for i in range(len(arr)):\n        max_arr = max(max_arr, arr[i])\n        max_subarray_product = max(max_subarray_product, max_arr * arr[i])\n    return max_subarray_product\n",
        "num_ids": 90
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    result = True\n    \n    for i in dict.values():\n        if type(i) == dict:\n            if check_value(i, n) == False:\n                result = False\n                break\n    else:\n        return result\n        \ndef check_key(dict):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    result = True\n    \n    for i in dict.values():\n        if type(i) == dict:\n            if check_key(i) == False:\n                result = False\n                break\n    else:\n        return result\n",
        "num_ids": 58
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict.values()) == 1\n",
        "num_ids": 13
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict)==1 and list(dict.values())[0]==n\n",
        "num_ids": 23
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!=n:\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n",
        "num_ids": 16
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.keys()) == 1:\n        return True\n    elif len(dict.keys()) > 1:\n        for key, value in dict.items():\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict) == len(set(dict.values()))\n",
        "num_ids": 19
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = 0\n    for i in dict.values():\n        if i!= value:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return dict1\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]\n    return dict1\n    \n",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 23
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    d={}\n    for i in dict1:\n        if dict1[i]!= '':\n            d[i] = dict1[i]\n    return d\n",
        "num_ids": 43
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #print(dict1)\n    while True:\n        try:\n            key = input('Enter the key to drop: ')\n            #print(key)\n            del dict1[key]\n            print(key, \"dropped\")\n            break\n        except:\n            print('Invalid key.')\n    return dict1\n",
        "num_ids": 78
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict(filter(None,dict1.items()))\n",
        "num_ids": 17
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict((key,value) for key,value in dict1.items() if value)\n",
        "num_ids": 24
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict_copy=dict1.copy()\n    for k,v in dict_copy.items():\n        if v=='':\n            dict_copy.pop(k)\n    return dict_copy\n",
        "num_ids": 49
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for i in dict1:\n        if dict1[i] == {}:\n            continue\n        else:\n            dict2[i] = dict1[i]\n    return dict2\n",
        "num_ids": 52
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty = {}\n    for key, value in dict1.items():\n        if value:\n            empty[key] = value\n    return empty\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    temp = list()\n    for key in dict1:\n        if dict1[key] == 0:\n            temp.append(key)\n    for i in temp:\n        del dict1[i]\n",
        "num_ids": 50
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def maximum_product_subseq(arr):\n        length = len(arr)\n        max_product = 0\n        for i in range(length):\n            if arr[i]!= 0:\n                prev = 0\n                curr_max = 1\n                for j in range(i, length):\n                    if arr[j]!= 0:\n                        if arr[i] <= arr[j]:\n                            curr_max = max(prev * arr[j], curr_max)\n                            prev = curr_max\n                        else:\n                            curr_max = max(prev * arr[j], curr_max)\n                            prev = curr_max\n                max_product = max(max_product, curr_max)\n        return max_product\n    return maximum_product_subseq(arr)\n",
        "num_ids": 191
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        product = arr[i] * max_product\n        max_product = max(product, arr[i])\n        \n    return max_product\n",
        "num_ids": 83
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_i = 0\n        max_j = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[max_i]:\n                max_i = i\n            if arr[i] > arr[max_j]:\n                max_j = i\n        return max_i, max_j, arr[max_i] * arr[max_j]\n",
        "num_ids": 115
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Base Cases\n    if len(arr) <= 1:\n        return arr\n",
        "num_ids": 21
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    min_index = 0\n    for i in range(0, len(arr)):\n        if arr[i] < 0:\n            if min_index == i:\n                min_index = i + 1\n                min_index_value = arr[i]\n            continue\n        if arr[i] > max_product:\n            max_product = arr[i]\n    if min_index == len(arr):\n        return -1\n    return max_product, min_index_value\n",
        "num_ids": 123
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #brute force approach\n    max_product = -1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n    \ndef max_product_optimized(arr):\n    '''\n    Better approach using divide and conquer\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        first = max_product_optimized(arr[:len(arr)//2])\n        second = max_product_optimized(arr[len(arr)//2:])\n        return max(first, second)\n",
        "num_ids": 74
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    m = -999\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            m = max(m, multiply(arr[i:j+1]))\n    return m\n",
        "num_ids": 76
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        max_prod = max(max_prod*arr[i], arr[i])\n    return max_prod\n",
        "num_ids": 87
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(max_product(arr[1:]), arr[0]*max_product(arr[1:]))\n",
        "num_ids": 51
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m=0\n    a=0\n    for i in range(len(arr)):\n        if arr[i]<0:\n            continue\n        a=a*arr[i]\n        if a>m:\n            m=a\n    return m\n",
        "num_ids": 63
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(lambda i:i[0]+i[1], zip(test_tup, test_tup[1:])))\n",
        "num_ids": 35
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = list(test_tup)\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            new_tup[i] = new_tup[i] + test_tup[i-1]\n        elif i == 0:\n            new_tup[i] = test_tup[i] + new_tup[i+1]\n        else:\n            new_tup[i] = test_tup[i] + new_tup[i+1]\n    return tuple(new_tup)\n",
        "num_ids": 148
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0]+test_tup[1]\n",
        "num_ids": 19
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    arr = []\n    for i in range(len(test_tup)):\n        arr.append(test_tup[i] + test_tup[i+1])\n    print(arr)\n    return arr\n",
        "num_ids": 55
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    tup = test_tup\n    \n    '''\n    Note that the length of tup can vary. So we cannot use an if and else statement to check if\n    tup has 3 elements. Hence we use the len function.\n    '''\n    \n    if len(tup) == 3:\n        '''\n        If there are 3 elements in the tuple, then the output is simply the addition of\n        the left and right values.\n        '''\n        return tup[0] + tup[1] + tup[2]\n    \n    elif len(tup) == 2:\n        '''\n        If there are 2 elements in the tuple, then the output is the sum of the left and \n        the right values.\n        '''\n        return tup[0] + tup[1]\n    \n    else:\n        '''\n        If there are less than 2 elements in the tuple, then we should consider\n        the values and calculate the pairwise sum of the left and right values\n        '''\n        total = 0\n        \n        for i in range(len(tup)):\n            if i == 0 or i == len(tup) - 1:\n                total += tup[i]\n            else:\n                total += tup[i]\n        \n        return total\n",
        "num_ids": 67
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(lambda x,y:x+y,test_tup,tuple(reversed(test_tup))))\n",
        "num_ids": 35
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1]) + (test_tup[2] + test_tup[3]) + (test_tup[4] + test_tup[5])\n",
        "num_ids": 55
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            if i == 0:\n                test_tup = test_tup[1:]\n            if j == len(test_tup)-1:\n                test_tup = test_tup[:-1]\n            test_tup = test_tup + (test_tup[i]+test_tup[j],)\n    return test_tup\n",
        "num_ids": 121
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a,b,c = test_tup\n    return tuple(map(sum,zip(test_tup,(a,b,c))))\n",
        "num_ids": 37
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup1 = []\n    tup2 = []\n    \n    for i in range(len(test_tup)):\n        tup1.append(test_tup[i])\n        tup2.append(test_tup[i])\n    \n    for i in range(len(test_tup)):\n        if i == 0:\n            tup1.append(test_tup[i]+test_tup[i+1])\n        elif i == len(test_tup)-1:\n            tup1.append(test_tup[i]+test_tup[i-1])\n        else:\n            tup1.append(test_tup[i]+test_tup[i-1]+test_tup[i+1])\n    \n    return tup1\n",
        "num_ids": 195
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Edge cases\n    if(n < 0):\n        print(\"Error: n cannot be negative\")\n        return -1\n    if(len(arr) == 0):\n        print(\"Error: array is empty\")\n        return -1\n    if(len(arr) == 1):\n        return arr[0]\n    \n    # Computations\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    \n    if(n < 0):\n        product = product % n\n    else:\n        product %= n\n        \n    return product\n    \n    ",
        "num_ids": 144
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod = n \n    \n    # Find the product of array and its elements \n    res = reduce(lambda x,y: x*y%mod, arr, 1) \n    \n    # Find the product of remainders of array elements and its elements \n    rem = reduce(lambda x,y: x*y%mod, map(lambda x: x%mod, arr), 1) \n    \n    return res - rem\n",
        "num_ids": 102
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # start with a product of 0\n    product = 1\n    \n    # for each element in the array\n    for i in range(n): \n        product = (product * arr[i]) % n\n    \n    return product\n",
        "num_ids": 56
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x, y: x*y, arr) % n\n",
        "num_ids": 20
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    if len(arr) == 1:\n        return product\n",
        "num_ids": 21
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # number of terms in array multiplication = n \n    n = int(n) \n    total = 1\n    for i in range(n): \n        total = (total * arr[i]) % n\n    return total\n",
        "num_ids": 55
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) < 1:\n        return 0\n    else:\n        num_arr = [int(i) for i in arr]\n        product = 1\n        for i in range(len(num_arr)):\n            product = product * num_arr[i]\n",
        "num_ids": 67
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    \n    # return n * (1 - (sum(arr) % n)) \n    # return (n * (1 - sum(arr) % n)) % n\n    \n    product = 1\n    arr.sort()\n    for i in arr:\n        product *= i\n    return product % n\n",
        "num_ids": 75
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n):\n        result = (result * arr[i]) % n\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product\n",
        "num_ids": 29
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consec = True\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            consec = False\n            break\n    return consec\n    \ndef check_Harshad(n): \n    '''\n    Write a python function to check whether the given number is a Harshad number or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        while n > 0:\n            h = n % 10\n            n = n//10\n            if h * h!= n:\n                return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    if(len(l) < 2):\n        return False\n    \n    for i in range(1, len(l)):\n        if (l[i - 1] + 1!= l[i]):\n            return False\n    \n    return True\n",
        "num_ids": 64
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    con_flag = True\n    for i in range(len(l)-1):\n        if (l[i]+1)!= l[i+1]:\n            con_flag = False\n            break\n    return con_flag\n",
        "num_ids": 55
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l == None:\n        print(\"Given list is empty\")\n        return -1\n    l = sorted(l)\n    i = 0\n    while(i < len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            print(\"False\")\n            return -1\n        i += 1\n    print(\"True\")\n    return 1\n",
        "num_ids": 92
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    result = True\n    if len(l) == 0:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            result = False\n            break\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return \"False\"\n    return \"True\"\n    \nprint(check_Consecutive([1,2,3,3,4,5])",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Write your code here\n    c=0\n    for i in range(0,len(l)):\n        if i+1==len(l):\n            break\n        elif l[i+1]-l[i]==1:\n            c=c+1\n            if c>1:\n                return False\n        elif l[i+1]-l[i]==0:\n            c=0\n    return True\n",
        "num_ids": 103
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # if total consecutive numbers are greater than 1\n    if len(set(l))==len(l):\n        return True\n    else:\n        return False\n    \n    \ndef main():\n    l =[1,2,3,4,5,1,2,3,4,5]\n    print(check_Consecutive(l))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 102
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your code here\n    # for i,j in test_list1:\n    #     if (i,j) in test_list2:\n    #         return (i,j)\n",
        "num_ids": 47
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return (set(test_list1).intersection(test_list2))\n",
        "num_ids": 21
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_tuple = ()\n    for i in range(min(len(test_list1),len(test_list2))):\n        if test_list1[i] == test_list2[i]:\n            intersect_tuple = intersect_tuple + (test_list1[i],)\n    return intersect_tuple\n",
        "num_ids": 82
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    union = test_list1 + test_list2\n    tuple_intersection = []\n    for i in union:\n        if i in test_list1 and i in test_list2:\n            tuple_intersection.append(i)\n    return tuple_intersection\n",
        "num_ids": 67
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_element_list = []\n    i = 0\n    for element in test_list1:\n        if element in test_list2:\n            common_element_list.append(element)\n    return tuple(common_element_list)\n",
        "num_ids": 59
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    common_tuple = test_list1.intersection(test_list2)\n    return common_tuple\n",
        "num_ids": 57
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_tuple = []\n    for i in range(len(test_list1)):\n        if test_list1[i] == test_list2[i]:\n            intersection_tuple.append(test_list1[i])\n    return intersection_tuple\n",
        "num_ids": 68
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = []\n    for i in test_list1:\n        if i in test_list2 and i not in output:\n            output.append(i)\n    return output\n",
        "num_ids": 44
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = []\n    for i in test_list1:\n        if i in test_list2:\n            output.append(i)\n    return output\n",
        "num_ids": 39
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # your code here\n    # return set(test_list1).intersection(test_list2)\n    tuple1 = set(test_list1)\n    tuple2 = set(test_list2)\n    return tuple1.intersection(tuple2)\n",
        "num_ids": 66
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str1=str1[:i]+newch+str1[i+1:]\n            return str1\n    return str1\n",
        "num_ids": 57
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \n",
        "num_ids": 17
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=''\n    for i in str1:\n        if i == ch:\n            i = newch\n        newstr += i\n    return newstr\n",
        "num_ids": 40
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    lst = list(str1)\n    for i in range(len(lst)):\n        if lst[i] == ch:\n            lst[i] = newch\n    return ''.join(lst)\n    \n    ",
        "num_ids": 59
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    a=\"\"\n    for x in range(0,len(str1)):\n        if str1[x]==ch:\n            a=a+newch\n        else:\n            a=a+str1[x]\n    return a\n    \ndef swap_string(s1,s2):\n    '''\n    Write a function to swap the characters in two strings.\n    '''\n    a=replace_char(s1,s2[0],s1[0])\n    b=replace_char(s2,s1[0],s2[0])\n    c=replace_char(s1,s2[1],s1[1])\n    d=replace_char(s2,s1[1],s2[1])\n    e=replace_char(a,b[0],c)\n    f=replace_char(a,b[1],d)\n    g=replace_char(e,f[0],g)\n    h=replace_char(e,f[1],h)\n    return g+h\n    \ndef char_convert(str1):\n    '''\n    Write a function to count the number of times a specific character appears in a string.\n    '''\n    x=0\n    for i in range(0,len(str1)):\n        if str1[i]==\"a\" or str1[i]==\"e\" or str1[i]==\"i\" or str1[i]==\"o\" or str1[i]==\"u\":\n            x+=1\n    return x\n    \ndef ab_cd(s1,s2):\n    '''\n    Write a function to swap the characters in two strings.\n    '''\n    a=replace_char(s1,\"a\",\"b\")\n    b=replace_char(s2,\"b\",\"a\")\n    return a+b\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    a=s[::-1]\n    return a\n    \ndef count_substring(string,sub_string):\n    '''\n    Write a function to count the number of occurrences of a substring in a string.\n    '''\n    a=string.count(sub_string)\n    return a\n    \ndef find_substring(string,sub_string):\n    '''\n    Write a function to find the first occurrence of substring in a string\n    '''\n    x=string.find(sub_string)\n    if x==-1:\n        return -1\n    else:\n        return x\n        \ndef read_file(file_name):\n    '''\n    Write a function to read content from the file and print it.\n    '''\n    with open(file_name,\"r\") as f:\n        x=f.read()\n        print(x)\n    return x\n    \ndef find_duplicate(a):\n    '''\n    Write a function to find the duplicate number from an array.\n    '''\n    x=set()\n    for i in range(0,len(a)):\n        if a[i] in x:\n            return a[i]\n        else:\n            x.add(a[i])\n    return -1\n    \ndef find_duplicate_with_hash(a):\n    '''\n    Write a function to find the duplicate number from an array.\n    '''\n    x=set()\n    for i in range(0,len(a)):\n        if a[i] in x:\n            return a[i]\n        else:\n            x.add(a[i])\n    return -1\n    \ndef find_digit(n):\n    '''\n    Write a function to find the digit which appears odd number of times.\n    '''\n    s=str(n)\n    d=list(s)\n    k=[]\n    for i in range(0,len(d)):\n        if d[i] in k:\n            return -1\n        else:\n            k.append(d[i])\n    for i in range(0,len(k)):\n        if k.count(k[i])%2!=0:\n            return k[i]\n    return -1\n    \ndef find_sum(a,b):\n    '''\n    Write a function to find the sum of two numbers.\n    '''\n    if (a<b):\n        x=a\n        a=b\n        b=x\n    x=0\n    for i in range(a,b+1):\n        x+=i\n    return x\n    \ndef print_alternate(a):\n    '''\n    Write a function to print the alternate characters of a string.\n    '''\n    x=\"\"\n    for i in range(0,len(a)):\n        if i%2!=0:\n            x=x+a[i]\n        else:\n            x=x+a[i]\n    print(x)\n    \ndef reverse_string_alternate(s):\n    '''\n    Write a function to reverse the string and print the alternate characters of the string.\n    '''\n    x=\"\"\n    for i in range(0,len(s)):\n        if i%2!=0:\n            x=x+s[i]\n        else:\n            x=x+s[i]\n    return x\n    \ndef duplicate_count(x):\n    '''\n    Write a function to count the number of duplicates in a list.\n    '''\n    x=set(x)\n    z=list(x)\n    return len(z)\n    \ndef find_triple_sum(a,b):\n    '''\n    Write a function to find the triplets such that sum is equal to zero.\n    '''\n    x=set()\n    for i in range(a,b+1):\n        if i not in x:\n            x.add(i)\n            for j in range(i+1,b+1):\n                if j not in x:\n                    x.add(j)\n                    for k in range(j+1,b+1):\n                        if k not in x:\n                            x.add(k)\n                            if sum(x)==0:\n                                print(x)\n                                return x\n                            else:\n                                x.discard(sum(x))\n    return None\n    \ndef find_triples(a):\n    '''\n    Write a function to find the triples such that sum is equal to zero.\n    '''\n    x=set()\n    for i in range(a,a+1):\n        for j in range(i+1,a+1):\n            for k in range(j+1,a+1):\n                if i+j+k==0:\n                    x.add(i)\n                    x.add(j)\n                    x.add(k)\n    return x\n    \ndef find_doubles(a):\n    '''\n    Write a function to find the doubles such that sum is equal to zero.\n    '''\n    x=set()\n    for i in range(a,a+1):\n        for j in range(i+1,a+1):\n            if i+j==0:\n                x.add(i)\n                x.add(j)\n    return x\n    \ndef find_triples_sum_to_zero(a,b):\n    '''\n    Write a function to find the triples such that sum is equal to zero.\n    '''\n    x=set()\n    for i in range(a,b+1):\n        for j in range(i+1,b+1):\n            for k in range(j+1,b+1):\n                if i+j+k==0:\n                    x.add(i)\n                    x.add(j)\n                    x.add(k)\n                    if sum(x)==0:\n                        print(x)\n                        return x\n                    else:\n                        x.discard(sum(x))\n    return None\n    \ndef find_all_duplicates(x):\n    '''\n    Write a function to find all the duplicates in a string.\n    '''\n    a=set(x)\n    b=list(a)\n    return b\n    \ndef read_file_using_readlines(file_name):\n    '''\n    Write a function to read the content from a file and print it.\n    '''\n    with open(file_name,\"r\") as f:\n        x=f",
        "num_ids": 20
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=\"\"\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str2+=newch\n        else:\n            str2+=str1[i]\n    return str2\n",
        "num_ids": 57
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=list(str1)\n    str1[0]=newch\n    str1=''.join(str1)\n    return str1\n",
        "num_ids": 37
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #str1 = 'Rishabh'\n    #ch = 'a'\n    #newch = 'R'\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return new_dict\n",
        "num_ids": 34
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    print(sorted_dict)\n",
        "num_ids": 38
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    d = {}\n    sorted_dict = {}\n    for k, v in dict1.items():\n        d[v] = k\n    for i in sorted(d, reverse=True):\n        sorted_dict[i] = d[i]\n    return sorted_dict\n",
        "num_ids": 68
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda item: item[1])\n    print(sorted_dict)\n",
        "num_ids": 34
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    \ndict1 = {\"Harry\": 10, \"Bill\": 5, \"Ron\": 20, \"Hermione\": 9, \"Ginny\": 5, \"Draco\": 7, \"Chhaya\": 12}\nsort_counter(dict1)\n",
        "num_ids": 85
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n    return dict1\n",
        "num_ids": 38
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return(sorted(dict1.items(), key=lambda x:x[1], reverse=True))\n    \ndef sort_counter_reverse(dict1):\n    '''\n    Write a function to sort a dictionary by value in reverse order.\n    '''\n    return(sorted(dict1.items(), key=lambda x:x[1], reverse=True))\n",
        "num_ids": 27
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key = lambda kv:(kv[1], kv[0])))\n    # return sorted(dict1.items(), key=lambda kv: (kv[1], kv[0]))\n",
        "num_ids": 61
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = 0\n    for i in range(len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return largest + smallest\n",
        "num_ids": 73
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    nums.sort()\n    return nums[-1] + nums[0]\n",
        "num_ids": 26
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Your Code Here\n    max = nums[0]\n    min = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n        elif nums[i] > max:\n            max = nums[i]\n    return max + min\n",
        "num_ids": 88
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big, small = nums[0], nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] > big:\n            big = nums[i]\n        elif nums[i] < small:\n            small = nums[i]\n    return big + small\n",
        "num_ids": 80
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = None\n    smallest = None\n    for num in nums:\n        if largest is None or largest < num:\n            largest = num\n        if smallest is None or smallest > num:\n            smallest = num\n    return largest + smallest\n",
        "num_ids": 60
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(\"The sum of the biggest number in the array is : %d\" %(max(nums)))\n    print(\"The sum of the smallest number in the array is : %d\" %(min(nums)))\n",
        "num_ids": 52
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest_value = max(nums)\n    smallest_value = min(nums)\n    return (largest_value + smallest_value)\n",
        "num_ids": 37
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #get the max and min value from the array\n    max = 0\n    min = 100000000\n    for num in nums:\n        if num > max:\n            max = num\n        if num < min:\n            min = num\n    #return the result\n    return max + min\n",
        "num_ids": 69
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "num_ids": 17
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n",
        "num_ids": 18
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # return string.lower()\n    \n    # with open(file) as f:\n    #     return f.read().lower()\n    \n    # with open(file) as f:\n    #     return \"\".join(f.read().lower().split())\n    \n    # with open(file) as f:\n    #     return f.read().lower().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \")\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isdigit()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isdigit()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isalpha()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isalpha()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isalpha()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isalpha()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isalpha()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isalpha()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isalpha()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isalpha()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if not i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    #     return \" \".join([i.lower() for i in f.read().replace(\"\\n\", \" \").replace(\"\\r\", \"\").replace(\"  \",\" \").split() if i.isnumeric()])\n    \n    # with open(file) as f:\n    ",
        "num_ids": 2018
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #lower_case = string.lower()\n    #return lower_case\n    return string.lower()\n",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) == str:\n        return string.lower()\n    else:\n        raise TypeError('Invalid Input')\n    \n",
        "num_ids": 34
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_string = str1\n    for i in range(len(str1)):\n        if str1[i]=='a' or str1[i]=='A':\n            new_string = new_string.replace('a','')\n        elif str1[i]=='e' or str1[i]=='E':\n            new_string = new_string.replace('e','')\n        elif str1[i]=='i' or str1[i]=='I':\n            new_string = new_string.replace('i','')\n        elif str1[i]=='o' or str1[i]=='O':\n            new_string = new_string.replace('o','')\n        elif str1[i]=='u' or str1[i]=='U':\n            new_string = new_string.replace('u','')\n    return new_string\ndef get_file(file_path):\n    '''\n    Write a function to read data from a file.\n    '''\n    file_object = open(file_path)\n    file_data = file_object.read()\n    file_object.close()\n    return file_data\n",
        "num_ids": 40
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(str1.lower(),\"\")\n",
        "num_ids": 17
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    final_list = re.findall(r\"[^a-z]\", str1)\n    final_str = \"\".join(final_list)\n    return final_str\n    \n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \n    \n    \ndef reverse_char(str1):\n    '''\n    Write a function to reverse the characters of a given string.\n    '''\n    final_list = re.findall(r\"[^a-z]\", str1)\n    final_str = \"\".join(final_list)\n    final_str = final_str[::-1]\n    return final_str\n    \n    \n    \ndef is_palindrome_reversed(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == reverse_char(str1)\n    \n    \n    \ndef remove_all_odd(str1):\n    '''\n    Write a function to remove all the odd characters from a given string.\n    '''\n    final_list = re.findall(r\"\\D\", str1)\n    final_str = \"\".join(final_list)\n    return final_str\n    \n    \n    \ndef is_palindrome_reversed2(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed3(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    #removing even indexed characters\n    str1 = remove_all_odd(str1)\n    return str1 == str1[::-1]\n    \n    \n    \ndef find_all_indexes(str1):\n    '''\n    Write a function to find all the indexes of the substring 'ab'.\n    '''\n    list1 = []\n    start = 0\n    end = 0\n    while start < len(str1):\n        if str1[start:end+1] == 'ab':\n            list1.append(start)\n        end += 1\n        \n        \n    return list1\n    \n    \n    \ndef find_all_indexes2(str1):\n    '''\n    Write a function to find all the indexes of the substring 'ab'.\n    '''\n    return [i for i in range(len(str1)) if str1[:i] == str1[:i][::-1]]\n    \n    \n    \ndef find_all_indexes3(str1):\n    '''\n    Write a function to find all the indexes of the substring 'ab'.\n    '''\n    str1 = remove_all_odd(str1)\n    list1 = []\n    \n    for i in range(len(str1)):\n        if str1[i:i+2] == 'ab':\n            list1.append(i)\n    return list1\n    \n    \n    \ndef find_all_indexes4(str1):\n    '''\n    Write a function to find all the indexes of the substring 'ab'.\n    '''\n    return [i for i in range(len(str1)) if str1[:i] == str1[:i][::-1]]\n    \n    \n    \ndef is_palindrome_reversed4(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    #removing even indexed characters\n    str1 = remove_all_odd(str1)\n    return str1 == str1[::-1]\n    \n    \n    \ndef find_all_indexes5(str1):\n    '''\n    Write a function to find all the indexes of the substring 'ab'.\n    '''\n    #removing even indexed characters\n    str1 = remove_all_odd(str1)\n    return [i for i in range(len(str1)) if str1[:i] == str1[:i][::-1]]\n    \n    \n    \ndef is_palindrome_reversed5(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    #removing even indexed characters\n    return str1 == str1[::-1]\n    \n    \n    \ndef is_palindrome_reversed6(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed7(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    #removing even indexed characters\n    str1 = remove_all_odd(str1)\n    return str1 == str1[::-1]\n    \n    \n    \ndef find_all_indexes8(str1):\n    '''\n    Write a function to find all the indexes of the substring 'ab'.\n    '''\n    return str1.find('ab')\n    \n    \n    \ndef is_palindrome_reversed8(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \n    \n    \ndef is_palindrome_reversed9(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \n    \n    \ndef is_palindrome_reversed10(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed11(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed12(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed13(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed14(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed15(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed16(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed17(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed18(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    return str1 == remove_all_odd(str1)\n    \n    \n    \ndef is_palindrome_reversed19(str1):\n",
        "num_ids": 39
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(str1.lower(),str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]{1}\\b', '', str1)\n",
        "num_ids": 28
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = str1.lower()\n    return new_str\n",
        "num_ids": 19
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    i = 0\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n",
        "num_ids": 55
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\")\n    \n    \ndef count_the_words(str1):\n    '''\n    Write a function to count all the words in a given string.\n    '''\n    #return len(re.findall(r\"\\w+\", str1))\n    return len(re.findall(r\"\\w+\", str1))\n",
        "num_ids": 41
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l = len(str1)\n    new = str1\n    for i in range(0, l):\n        if i+1 == l:\n            new = new.replace(str1[i], \"\")\n        elif str1[i] == str1[i+1]:\n            new = new.replace(str1[i], \"\")\n        else:\n            new = new.replace(str1[i], \"\")\n    return new\n",
        "num_ids": 107
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n>0:\n        return n%10\n    elif n<0:\n        return -1\n    else:\n        return 0\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return n//10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n//10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return -1\n        return n%10\n    except Exception as e:\n        return -1\n        \n        \n        \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        retur",
        "num_ids": 9
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = n\n    first_digit = 0\n    while num > 0:\n        num = num // 10\n        first_digit = first_digit * 10 + num % 10\n    return first_digit\n",
        "num_ids": 49
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :  \n        return 0  \n    while n > 0 :  \n        n = n // 10  \n    return n % 10  \ndef first_Digit_of_Number_Sum(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    Sum = 0  \n    while n > 0 :  \n        Sum = Sum + (n%10)  \n        n = n//10  \n    return Sum\ndef isPrime(n) :  \n    '''\n    Write a python function to check whether the given number is prime.\n    '''\n    if n <= 1 :  \n        return False  \n    for i in range(2, n) :  \n        if n % i == 0 :  \n            return False  \n    return True  \ndef is_Perfect_square(n) :  \n    '''\n    Write a python function to check whether the given number is perfect square.\n    '''\n    if n < 0 :  \n        n = -n  \n    #n = n%10  \n    while n % 2 == 0 :  \n        n = n // 2  \n    #for i in range(3,int(n**0.5)+1,2) :  \n    for i in range(3,n,2) :  \n        if n % i == 0 :  \n            return False  \n    return True  \ndef is_Perfect_square_with_cnt_of_1_in_first_digit(n) :  \n    '''\n    Write a python function to check whether the given number is perfect square.\n    '''\n    if n < 0 :  \n        n = -n  \n    #n = n%10  \n    while n % 2 == 0 :  \n        n = n // 2  \n    if n == 0 :  \n        return True  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return True  \n    if cnt == 1 :  \n        return False  \n    if cnt == 2 :  \n        return True  \n    if cnt == 3 :  \n        return True  \n    if cnt == 4 :  \n        return True  \n    if cnt == 5 :  \n        return True  \n    if cnt == 6 :  \n        return True  \n    if cnt == 7 :  \n        return True  \n    if cnt == 8 :  \n        return True  \n    if cnt == 9 :  \n        return True  \ndef is_Perfect_square_with_cnt_of_1_in_last_digit(n) :  \n    '''\n    Write a python function to check whether the given number is perfect square.\n    '''\n    if n < 0 :  \n        n = -n  \n    #n = n%10  \n    while n % 2 == 0 :  \n        n = n // 2  \n    if n == 0 :  \n        return True  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return True  \n    if cnt == 1 :  \n        return False  \n    if cnt == 2 :  \n        return True  \n    if cnt == 3 :  \n        return True  \n    if cnt == 4 :  \n        return True  \n    if cnt == 5 :  \n        return True  \n    if cnt == 6 :  \n        return True  \n    if cnt == 7 :  \n        return True  \n    if cnt == 8 :  \n        return True  \n    if cnt == 9 :  \n        return True  \ndef get_Digits_Sum(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    Sum = 0  \n    while n > 0 :  \n        Sum = Sum + (n%10)  \n        n = n//10  \n    return Sum  \ndef is_prime_or_not(n) :  \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1 :  \n        return False  \n    if n == 2 :  \n        return True  \n    if n == 3 :  \n        return True  \n    if n % 2 == 0 or n % 3 == 0 :  \n        return False  \n    i = 5  \n    while i * i <= n :  \n        if n % i == 0 or n % (i + 2) == 0 :  \n            return False  \n        i = i + 6  \n    return True  \ndef is_prime_or_not_with_cnt_of_1_in_first_digit(n) :  \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1 :  \n        return False  \n    if n == 2 :  \n        return True  \n    if n == 3 :  \n        return True  \n    if n % 2 == 0 or n % 3 == 0 :  \n        return False  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return True  \n    if cnt == 1 :  \n        return False  \n    if cnt == 2 :  \n        return True  \n    if cnt == 3 :  \n        return True  \n    if cnt == 4 :  \n        return True  \n    if cnt == 5 :  \n        return True  \n    if cnt == 6 :  \n        return True  \n    if cnt == 7 :  \n        return True  \n    if cnt == 8 :  \n        return True  \n    if cnt == 9 :  \n        return True  \ndef get_Digits_Sum_with_cnt_of_1_in_first_digit(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    Sum = 0  \n    while n > 0 :  \n        Sum = Sum + (n%10)  \n        n = n//10  \n    if n == 0 :  \n        return 0  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return 0  \n    if cnt == 1 :  \n        return Sum  \n    if cnt == 2 :  \n        return Sum  \n    if cnt == 3 :  \n        return Sum  \n    if cnt == 4 :  \n        return Sum  \n    if cnt == 5 :  \n        return Sum  \n    if cnt == 6 :  \n        return Sum  \n    if cnt == 7 :  \n        return Sum  \n    if cnt == 8 :  \n        return Sum  \n    if cnt == 9 :  \n        return Sum  \ndef get_Digits_Sum_with_cnt_of_1_in_last_digit(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    Sum = 0  \n    while n > 0 :  \n        Sum = Sum + (n%10)  \n        n = n//10  \n    if n == 0 :  \n        return 0  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return 0  \n    if cnt == 1 :  \n        return Sum  \n    if cnt == 2 :  \n        return Sum  \n    if cnt == 3 :  \n        return Sum  \n    if cnt == 4 :  \n        return Sum  \n    if cnt == 5 :  \n        return Sum  \n    if cnt == 6 :  \n        return Sum  \n    if cnt == 7 :  \n        return Sum  \n    if cnt == 8 :  \n        return Sum  \n    if cnt == 9 :  \n        return Sum  \ndef is_prime_or_not_with_cnt_of_1_in_last_digit(n) :  \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1 :  \n        retur",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n=str(n)\n    for i in range(len(n)) :\n        if(n[i]=='0'):\n            break\n        else:\n            return int(n[i])\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    n=str(n)\n    for i in range(len(n)) :\n        if(n[i]=='0'):\n            break\n        else:\n            return int(n[i])\n",
        "num_ids": 51
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    a=list(str(n))\n    a.remove(a[0])\n    n=int(''.join(a))\n    return n\n",
        "num_ids": 37
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n[0])\n",
        "num_ids": 11
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n=n//10\n    return n\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return n[0]\n",
        "num_ids": 17
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n    \nif __name__ == \"__main__\":\n    n = int(input())\n    print(first_Digit(n))\n    ",
        "num_ids": 41
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n",
        "num_ids": 10
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for item in list:\n        if item%2!= 0:\n            odd.append(item)\n    return odd\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in range(len(list)):\n        if list[i]%2!=0:\n            odd_list.append(list[i])\n    return odd_list\n",
        "num_ids": 52
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    myList = []\n    for item in list:\n        if item % 2!= 0:\n            myList.append(item)\n    return myList\n    \ndef Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    myList = []\n    for item in list:\n        if item % 2 == 0:\n            myList.append(item)\n    return myList\n",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return ([x for x in list if x % 2!= 0])\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in range(0,len(list)):\n        if list[i]%2!=0:\n            list1.append(list[i])\n    return list1",
        "num_ids": 50
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for i in list:\n        if i % 2!= 0:\n            odd_numbers.append(i)\n    return odd_numbers\n",
        "num_ids": 45
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for i in range(len(list)): \n        if list[i] % 2!= 0: \n            odd_list.append(list[i]) \n    return odd_list\n",
        "num_ids": 56
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_odd = []\n    for i in list:\n        if i%2==0:\n            list_odd.append(i)\n    print(list_odd)\n    return list_odd\n",
        "num_ids": 49
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd =[]\n    for i in range(len(list)):\n        if i%2==0:\n            odd.append(list[i])\n    return odd\n",
        "num_ids": 42
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n :\n        sum = sum + i**3\n        i = i + 1\n    sum2 = 0\n    i = 0\n    while i < n :\n        sum2 = sum2 + i\n        i = i + 1\n    return sum - sum2\n",
        "num_ids": 76
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumofcube(n) :\n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(n) :\n            sum = sum + i*i*i\n        return sum\n",
        "num_ids": 32
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)/6\n",
        "num_ids": 20
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cubed(x) :  \n        '''\n        input: int x\n        output: int\n        '''\n        c = 0\n        while x > 0 :\n            c = c + (x%10)*(x%10)*(x%10)\n            x = x//10\n        return c\n    \n    if n < 0 : \n        print (\"Negative Numbers not allowed.\")\n        return \n    n = n + 1\n    return abs(cubed(n) - cubed(n-1))\n",
        "num_ids": 96
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1) :\n        s+=i**3\n    return s - (n*(n+1))/2\n",
        "num_ids": 43
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res = res + (i**3)\n    print(res)\n    res = 0\n    for i in range(1,n+1):\n        res = res + i\n    print(res)\n",
        "num_ids": 68
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    return pow(n,3) - pow(n,2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2002
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))//6\n    \n    ",
        "num_ids": 25
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(input())\n    sum = 0\n    for i in range(1, n+1) :\n        sum = sum + i**3\n    print(sum - (n*(n+1)//2))\n",
        "num_ids": 55
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (cube(n)-cube(n-1))\n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function fibonacci which calculates the Nth fibonacci number.\n    '''\n    if n<=1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n        \n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function fibonacci which calculates the Nth fibonacci number.\n    '''\n    if n<=1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n        \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \ndef isPalindrome(string):\n    '''\n    Write a python function isPalindrome which checks if the given string is palindrome or not.\n    '''\n    return string==string[::-1]\n    \n    \n    \nde",
        "num_ids": 20
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    odd_pair_count = 0\n    \n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j])%2!= 0 : \n                odd_pair_count += 1\n    print(odd_pair_count)\n    return odd_pair_count\n",
        "num_ids": 93
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(N) : \n            if i!= j and (A[i]^A[j])%2!= 0 : \n                count+=1\n    return count ",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N,2):\n        if (A[i] ^ A[i+1]) % 2!= 0 :\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        x = A[i]\n        count += (x & 1)\n    return count \n",
        "num_ids": 40
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(1, N, 1):\n        if A[i] ^ A[i-1] == 1:\n            odd_count += 1\n    return odd_count\n    # code here\n",
        "num_ids": 57
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    for i in range(1,N):\n        if ((A[i] ^ A[i-1]) & 1) == 1:\n            count += 1\n    \n    return count\n",
        "num_ids": 52
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A = sorted(A)\n    i,j = 0,len(A)-1\n    while i<j : \n        if A[i]^A[j] == 1:\n            return 1\n        elif A[i]^A[j] == 0:\n            i += 1\n        else: \n            j -= 1\n    return 0\n",
        "num_ids": 85
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) & 1 :\n                count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 0:\n                count = count+1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    flag = 0\n    \n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                flag = flag + 1\n    \n    return flag\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    flag = 0\n    \n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                flag = flag + 1\n    \n    return flag\n",
        "num_ids": 64
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print('Original string: ', string)\n    string = string.swapcase()\n    print('Toggled string: ', string)\n",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    a = []\n    for i in range(len(string)):\n        a.append(string[i].swapcase())\n    return ''.join(a)\n    \nprint(toggle_string('String'))\n",
        "num_ids": 56
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # split the string to a list, and\n    # iterate the list to toggle the case\n    for i in range(len(string)):\n        if string[i].isupper():\n            string = string[:i].lower() + string[i:].upper()\n        else:\n            string = string[:i].upper() + string[i:].lower()\n    return string\n",
        "num_ids": 92
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string)!= str:\n        return None\n    else:\n        return string.swapcase()\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lower_string = string.lower()\n    upper_string = string.upper()\n",
        "num_ids": 22
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_distance = 0\n    n1_digits = list(str(n1))\n    n2_digits = list(str(n2))\n    min_len = min(len(n1_digits), len(n2_digits))\n    for i in range(min_len):\n        distance = abs(int(n1_digits[i]) - int(n2_digits[i]))\n        if distance!= 0:\n            total_distance += distance\n    return total_distance\n",
        "num_ids": 123
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_digit = 0\n    while n1 > 0 or n2 > 0:\n        sum_digit += abs(n1 % 10 - n2 % 10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return sum_digit\n",
        "num_ids": 64
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert (type(n1) is int)\n    assert (type(n2) is int)\n    assert (type(n1) is not float)\n    assert (type(n2) is not float)\n    assert (n1 > 0)\n    assert (n2 > 0)\n",
        "num_ids": 70
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # num1 = int(input('Enter first integer:'))\n    # num2 = int(input('Enter second integer:'))\n    #print(digit_distance_nums(num1, num2))\n    return sum([abs(num1-num2) for num1, num2 in zip(str(n1), str(n2))])\n",
        "num_ids": 83
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(n1-n2))\n",
        "num_ids": 15
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    for i in range(len(str(n1))):\n        s += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return s\n",
        "num_ids": 52
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    d_sum = 0\n    d_list = list(map(int, list(str(n1)))) + list(map(int, list(str(n2))))\n    d_list.sort()\n    for i in range(1, len(d_list)):\n        d_sum += abs(int(d_list[i - 1]) - int(d_list[i]))\n    return d_sum\n",
        "num_ids": 113
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    while n1>0:\n        sum+= abs(n1%10- n2%10)\n        n1 //= 10\n        n2 //= 10\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2006
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    total = 0\n    while n1 or n2:\n        if n1 > n2:\n            n1 = n1 % 10\n        else:\n            n2 = n2 % 10\n        total += abs(n1 - n2)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return total\n",
        "num_ids": 94
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    res = 0\n    n1 = str(n1)\n    n2 = str(n2)\n    for i in range(len(n1)):\n        res += abs(int(n1[i]) - int(n2[i]))\n    return res\n",
        "num_ids": 66
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_array = -sys.maxsize\n    sub_array_sum = 0\n    for i in range(size):\n        sub_array_sum += a[i]\n        if sub_array_sum > max_sub_array:\n            max_sub_array = sub_array_sum\n    return max_sub_array\n",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    largest_sum = 0\n    sum = 0\n    for i in range(0, size):\n        sum = sum + a[i]\n        if largest_sum < sum:\n            largest_sum = sum\n    return largest_sum\n",
        "num_ids": 68
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    result = 0\n    max_sum = 0\n    for i in range(size):\n        for j in range(i, size):\n            if a[i:j] > max_sum:\n                max_sum = sum(a[i:j])\n            if max_sum > result:\n                result = max_sum\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        for j in range(i, size):\n            current_sum = sum(a[i:j+1])\n            if current_sum > max_sum:\n                max_sum = current_sum\n    print(max_sum)\n",
        "num_ids": 73
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # list_len = len(a)\n    # max_sum = 0\n    # for i in range(list_len):\n    #     for j in range(list_len):\n    #         if i == j:\n    #             continue\n    #         sum = 0\n    #         for k in range(i, j+1):\n    #             sum += a[k]\n    #         max_sum = max(max_sum, sum)\n    # return max_sum\n",
        "num_ids": 115
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sub_array_sum = 0\n    for i in range(0, size):\n        sub_array_sum = max(sub_array_sum + a[i], 0)\n        max_sum = max(sub_array_sum, max_sum)\n",
        "num_ids": 69
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    best_sum = 0\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum = curr_sum + a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum > best_sum:\n            best_sum = curr_sum\n    return best_sum\n",
        "num_ids": 102
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(size):\n        sum = sum + a[i]\n        if sum > max_sum:\n            max_sum = sum\n",
        "num_ids": 49
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    max_sum = a[0]\n    for i in range(1, size):\n        max_sum = max(max_sum, a[i] + max_sub_array_sum(a, i))\n    return max_sum\n",
        "num_ids": 74
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    temp = 0\n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    sub_list = []\n",
        "num_ids": 35
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    union_list = test_tup1 + test_tup2\n    union_list = sorted(union_list)\n    return union_list\n",
        "num_ids": 44
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize result\n    result = ()\n",
        "num_ids": 12
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return(sorted(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set = set(test_tup1) | set(test_tup2)\n    return sorted(list(test_set))\n",
        "num_ids": 36
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set().union(test_tup1, test_tup2))\n",
        "num_ids": 23
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = []\n    union_elements.extend(test_tup1)\n    union_elements.extend(test_tup2)\n    union_elements.sort()\n    return union_elements\n",
        "num_ids": 58
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for num in test_tup1:\n        test_list1.append(num)\n    for num in test_tup2:\n        test_list2.append(num)\n    return sorted(set(test_list1) | set(test_list2))\n",
        "num_ids": 82
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = list(set(test_tup1).union(set(test_tup2)))\n    union_tup.sort()\n    return union_tup\n",
        "num_ids": 45
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_list = list()\n    for i in test_tup1:\n        if i not in sorted_list:\n            sorted_list.append(i)\n    for i in test_tup2:\n        if i not in sorted_list:\n            sorted_list.append(i)\n    return sorted_list\n",
        "num_ids": 81
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #print(lst)\n    max_len = 0\n    length = []\n    for i in range(len(lst)):\n        #print(\"solving for \", i)\n        len_sub = Find_Sublist(lst, i)\n        #print(len_sub)\n        if len_sub > max_len:\n            max_len = len_sub\n            length = lst[i]\n    return max_len, length\n",
        "num_ids": 108
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return -1\n    len_lst = len(lst)\n    d = {}\n    for i in range(len_lst):\n        for j in range(i+1, len_lst):\n            if lst[i] in d and lst[j] in d:\n                d[lst[i]].append(lst[j])\n            elif lst[i] not in d:\n                d[lst[i]] = [lst[j]]\n            elif lst[j] not in d:\n                d[lst[j]] = [lst[i]]\n            else:\n                d[lst[i]].append(lst[j])\n                d[lst[j]].append(lst[i])\n    max_length = max(len(d[i]) for i in d)\n    return max_length\n",
        "num_ids": 216
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dic = {}\n    for l in lst:\n        dic[l] = dic.get(l, 0) + 1\n    return max([len(lst) for lst in dic.values()])\n",
        "num_ids": 55
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst = sorted(lst)\n    max = len(lst[0])\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n    return max\n",
        "num_ids": 53
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:  \n        return 0\n    max_len = 1\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i:j] not in lst[i+1:]:\n                if max_len < j - i:\n                    max_len = j - i\n    return max_len\n    \nprint(Find_Max_Length([2, 3, 4, 5, 6, 7, 9, 10]))\n",
        "num_ids": 125
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        max_length = 1\n        for i in range(0,len(lst)):\n            if len(lst[i]) > max_length:\n                max_length = len(lst[i])\n        return max_length",
        "num_ids": 76
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len=0\n    for ele in lst:\n        max_len = max(max_len, len(ele))\n    return max_len\n",
        "num_ids": 39
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    print('The longest sublists are',lst[i])\n    print('The length of longest sublists is', max_length)\n    return max_length\n",
        "num_ids": 87
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = len(lst)\n    maxx = 0\n    count = 1\n    for i in range(0, l):\n        for j in range(i + 1, l):\n            count += 1\n            if (lst[j] - lst[i]) == 1:\n                if maxx < count:\n                    maxx = count\n            else:\n                count = 1\n    return maxx\n",
        "num_ids": 97
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\".*\\\"'\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text[text.find('\"'):text.rfind('\"')]\n",
        "num_ids": 21
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"[^\"]*\"', text)\n    print(values)\n    return values\n",
        "num_ids": 31
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # remove these three lines when starting python for contest\n    #text = re.sub('\\\"', '', text)\n    #text = re.sub('\\.', '', text)\n    #text = re.sub('\\'', '', text)\n    #text = text.replace(',', '.')\n    #text = text.replace(' ', '')\n    #text = text.replace('\\n','')\n    #text = text.replace('\"', '')\n    #text = text.replace('-', '')\n    #text = text.replace('\\t', '')\n    #text = text.replace('\\r', '')\n    text = text.replace('\\'', '')\n    text = text.replace('\\\"', '')\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.replace(';', '')\n    text = text.replace('\\t', '')\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    #print(text)\n    values = text.split('\\n')\n    #print(values)\n    val = []\n    for v in values:\n        #print(v)\n        value = v.split(':')\n        #print(value)\n        value = list(map(lambda x: x.strip(), value))\n        val.append(value)\n    return val\n",
        "num_ids": 343
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"[^\"]+\"',text)\n",
        "num_ids": 20
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    x = text.split('\\\"')\n    val = x[1].split('\\\"')\n    val1 = val[0].split('\\n')\n    for i in val1:\n        if(i=='='):\n            val1 = val[0].split('\\n')\n            val1 = val1[0]\n            break\n    val1 = val1.split(' ')\n    for i in range(len(val1)):\n        val1[i] = float(val1[i])\n    return val1\n",
        "num_ids": 127
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=\\\")[\\w\\d\\s\\-\\.\\,\\(\\)\\\\:\\'\\\"\\!\\?\\;\\[\\]]+(?=\\\")\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_values_part2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"([^\\\"]+[\\\"])([^\\\"]+)\\\"\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(\\w+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part2(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part3(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part3(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part4(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part4(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part5(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part5(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part6(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part6(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part7(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part7(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part8(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part8(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part9(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part9(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part10(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part10(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part11(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part11(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part12(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part12(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part13(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part13(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part14(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part14(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    retur",
        "num_ids": 29
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"\\\"(.*?)\\\"\"\n    return re.findall(pattern,text)\n",
        "num_ids": 26
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r\"\\\"(.*?)\\\"\")\n    return re.findall(pattern, text)\n",
        "num_ids": 31
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"[a-zA-Z]+\\\"')\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n>1:\n        for i in range(n):\n            for j in range(i+1,n):\n                if arr[i]!=arr[j]:\n                    count=count+1\n        return count\n",
        "num_ids": 84
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if(n<2):\n        return 0\n    hash=defaultdict(int)\n    for i in arr:\n        hash[i]+=1\n    pairs=0\n    for i in range(n):\n        if(hash[i]>1):\n            pairs+=hash[i]*(hash[i]-1)//2\n    return pairs",
        "num_ids": 86
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    print(count)\n    \ncount_Pairs([1,3,2,5,3],6)\ncount_Pairs([1,3,4,7,8,5],5)\n",
        "num_ids": 92
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                ans += 1\n    return ans\n",
        "num_ids": 52
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] == arr[j]: \n                count += 1\n    return count \ndef count_unordered_pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of unordered pairs. \n    '''\n    count = 0\n    for i in range(len(arr)-1): \n        if arr[i]!= arr[i+1]: \n            count += 1\n    return count ",
        "num_ids": 46
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(n): \n            if arr[i] == arr[j]: \n                count = count + 1\n    return count \n",
        "num_ids": 52
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    arr.sort()\n    i=0\n    count=0\n    while(i<n):\n        if(arr[i]!=arr[i+1]):\n            count=count+1\n        i=i+1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count=count+1\n    print(count)\n",
        "num_ids": 60
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \n",
        "num_ids": 11
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # creating an empty list to contain the characters of the string\n    split_list = []\n    # traversing through each character of the string\n    for i in word:\n        # adding the character into the list\n        split_list.append(i)\n    # returning the list containing the characters\n    return split_list\n",
        "num_ids": 75
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\nprint(split('abcde'))\n",
        "num_ids": 18
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    l = [] \n    for i in range(len(word)): \n        l.append(word[i]) \n    return l \n    \ndef reverse(word): \n    '''\n    Write a python function to reverse the characters of a string.\n    '''\n    for i in range(len(word)): \n        word = word[::-1]\n        return word \n        \ndef isPalindrome(word): \n    '''\n    Write a python function to check if the given word is palindrome or not.\n    '''\n    temp = word.split(' ')\n    if len(temp) == 0:\n        return False\n    if len(temp) == 1:\n        return True\n    if len(temp) == 2:\n        if (temp[0] == temp[1]):\n            return True\n        else:\n            return False\n    for i in range(len(temp)):\n        if temp[i]!= temp[len(temp) - 1 - i]:\n            return False\n    return True\n    \ndef removeDuplicates(l): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    i = 0\n    while i < len(l) - 1: \n        if l[i] == l[i + 1]: \n            l.remove(l[i]) \n        else: \n            i = i + 1\n    return l \n    \ndef min(l): \n    '''\n    Write a python function to find the minimum element of a list.\n    '''\n    min = l[0]\n    for i in range(len(l)): \n        if l[i] < min: \n            min = l[i]\n    return min \n    \ndef max(l): \n    '''\n    Write a python function to find the maximum element of a list.\n    '''\n    max = l[0]\n    for i in range(len(l)): \n        if l[i] > max: \n            max = l[i]\n    return max \n    \ndef unique(l): \n    '''\n    Write a python function to find the unique elements of a list.\n    '''\n    s = set() \n    for i in range(len(l)): \n        if l[i] in s: \n            return False\n        else: \n            s.add(l[i])\n    return True \n    \ndef isPalindrome1(word): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    l = split(word)\n    reverse(l)\n    l = reverse(l)\n    if l == word:\n        return True\n    return False\n    \ndef maxLen(l1, l2): \n    '''\n    Write a python function to find the length of the longest string.\n    '''\n    if l1 > l2:\n        return l1\n    else:\n        return l2\n    \ndef isPalindrome2(word): \n    '''\n    Write a python function to check if the given word is palindrome or not.\n    '''\n    l = split(word)\n    if l == reverse(l):\n        return True\n    return False\n    \ndef isPalindrome3(word): \n    '''\n    Write a python function to check if the given word is palindrome or not.\n    '''\n    l = split(word)\n    reverse(l)\n    if l == reverse(l):\n        return True\n    return False\n    \ndef isPalindrome4(word): \n    '''\n    Write a python function to check if the given word is palindrome or not.\n    '''\n    l = split(word)\n    reverse(l)\n    if l == reverse(l):\n        return True\n    return False\n    \ndef checkMagazine(magazine, note): \n    '''\n    Write a python function to check if the given magazine and note are valid.\n    '''\n    if len(note) > len(magazine):\n        return \"Note is too big\"\n    else:\n        for i in range(len(magazine)):\n            if magazine[i] not in note:\n                return False\n        return True\n",
        "num_ids": 60
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n",
        "num_ids": 10
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return(word.split(' ')) ",
        "num_ids": 12
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    \n    while n > 0:\n        n, digit = divmod(n, 10)\n        sum_digits += digit\n",
        "num_ids": 43
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # return sum(int(x) for x in str(n))\n    return sum(i for i in map(int, str(n)))\n",
        "num_ids": 36
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n",
        "num_ids": 15
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    elif n % 10 > 0:\n        return 1 + sum_digits(n // 10)\n    else:\n        return sum_digits(n // 10)\n",
        "num_ids": 53
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        n = -n\n    # left_sum = 0\n    # while n:\n    #     left_sum += n%10\n    #     n = n//10\n    left_sum = n%10\n    if left_sum < 9:\n        return left_sum\n    return sum_digits(n//10)\n",
        "num_ids": 96
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 0\n    while i < len(list1) - 1:\n        if list1[i] > list1[i+1]:\n            return False\n        i = i + 1\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i - 1] > list1[i]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if(list1[i] < list1[i-1]):\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0,len(list1)):\n        if i == 0:\n            continue\n        if list1[i] > list1[i-1]:\n            continue\n        else:\n            return False\n    return True\nlist1 = list(map(int,input().split()))\nprint(issort_list(list1))\n",
        "num_ids": 84
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    if len(list1) < 2:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i+1] < list1[i]:\n            return False\n        \n    return True\n    \n    \nif __name__ == '__main__':\n    import sys\n    import io\n    \n    sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding = 'utf-8')\n    sys.stderr = io.TextIOWrapper(sys.stderr.detach(), encoding = 'utf-8')\n    \n    list1 = [2,4,5,1]\n    print(issort_list(list1))\n    \n    list2 = []\n    print(issort_list(list2))\n    \n    list3 = [1]\n    print(issort_list(list3))\n    \n    list4 = [1,2]\n    print(issort_list(list4))\n    \n    list5 = [2,2]\n    print(issort_list(list5))\n    \n    list6 = [2,3,5,1]\n    print(issort_list(list6)",
        "num_ids": 293
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0,len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids": 29
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 29
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0,len(list1)-1):\n        if list1[i]>=list1[i+1]:\n            return False\n    return True\ndef is_intersect(list1,list2):\n    '''\n    Write a function to check whether a specified list contains any two values that are the same.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)):\n            if i!=j and list1[i]==list1[j]:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # use of a list comprehension, will be looking for\n    # an empty dictionary as { } within the list comprehension\n    # \n    # list comprehension of length n \n    #\n    # list comprehension syntax:\n    #\n    #    [{} for i in range(n)]\n    return [[{} for i in range(length)]\n            for j in range(length)]\n",
        "num_ids": 90
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n",
        "num_ids": 34
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n",
        "num_ids": 27
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_ = []\n    for i in range(length):\n        list_.append({})\n    return list_\n",
        "num_ids": 29
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list\n",
        "num_ids": 33
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n",
        "num_ids": 24
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[0])\n",
        "num_ids": 19
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    res = []\n    for i in range(len(list1)):\n        res += sorted(list1[i])\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # 1. Sort each of the sublists\n    for l in range(len(list1)):\n        list1[l].sort()\n        \n    # 2. Convert the sublists into a single list\n    final_list = []\n    for sublist in list1:\n        for item in sublist:\n            final_list.append(item)\n    return final_list\n    \n",
        "num_ids": 92
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    while list1:\n        new_list = []\n        for l in list1:\n            new_list.append(sorted(l))\n        sorted_list.append(new_list)\n        list1 = new_list\n",
        "num_ids": 65
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        sublist.sort()\n        result.append(sublist)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n",
        "num_ids": 16
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n",
        "num_ids": 24
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if type(list1)!= list:\n        raise TypeError(\"Input must be list of lists!\")\n    if len(list1) == 0:\n        return list1\n    else:\n        for i in range(len(list1)):\n            sort_sublists(list1[i])\n        for i in range(len(list1)):\n            list1[i].sort()\n",
        "num_ids": 94
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen_nums = set()\n    seen_nums_unordered = list()\n    for num in nums:\n        if num not in seen_nums:\n            seen_nums.add(num)\n            seen_nums_unordered.append(num)\n    seen_nums_unordered.sort()\n    return seen_nums_unordered\n",
        "num_ids": 89
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #using set method to remove the duplicate numbers\n    nums1=set(nums)\n    #using dictionary method\n    nums2={i:nums.count(i) for i in nums1}\n    #printing the result\n    for i in nums2:\n        print(i,nums2[i])\n    #using for loop\n    for i in nums1:\n        nums2=0\n        for j in range(len(nums)):\n            if i==nums[j]:\n                nums2=nums2+1\n        if nums2>1:\n            nums.remove(i)\n    return nums\n",
        "num_ids": 159
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    final_nums = []\n    for num in nums:\n        if num not in final_nums:\n            final_nums.append(num)\n    return final_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    my_set = set()\n    for i in nums:\n        if i not in my_set:\n            my_set.add(i)\n    return my_set\n",
        "num_ids": 44
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_unique = []\n    for num in nums:\n        if num not in nums_unique:\n            nums_unique.append(num)\n    return nums_unique\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(nums)\n    while len(nums) > 0:\n        num = nums[0]\n        for i in range(1, len(nums)):\n            if num == nums[i]:\n                nums.pop(i)\n        nums.append(num)\n    return nums\n",
        "num_ids": 80
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    result = []\n    for num in nums:\n        if num in nums_set:\n            continue\n        else:\n            nums_set.add(num)\n            result.append(num)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    l1 = sorted(nums)\n    l2 = []\n    for i in l1:\n        if i not in l2:\n            l2.append(i)\n    return l2\n",
        "num_ids": 49
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = set()\n    for num in nums:\n        result.add(num)\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    # YOUR CODE HERE\n    unique_numbers=[]\n    for i in list_data:\n        if i not in unique_numbers:\n            unique_numbers.append(i)\n    print(\"The list after removing duplicate numbers:\",unique_numbers)\n    prod=1\n    for i in unique_numbers:\n        prod=prod*i\n    print(\"The product of unique numbers in the list is:\",prod)\n",
        "num_ids": 109
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in range(0,len(list_data)):\n        if(list_data.count(list_data[i])>1):\n            result*=list_data[i]\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    prod = 1\n    for i in list_data:\n        if i not in list_data[:]:\n            prod = prod * i\n    print(prod)\n",
        "num_ids": 44
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_of_uniq_nums = 1\n    for i in list_data:\n        product_of_uniq_nums *= i\n    return product_of_uniq_nums\n",
        "num_ids": 50
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list = []\n    for i in list_data:\n        if i not in new_list:\n            new_list.append(i)\n    return len(new_list)\n",
        "num_ids": 47
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for number in list_data:\n        if number not in product:\n            product = product * number\n        else:\n            continue\n    return product\n",
        "num_ids": 42
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, 9]\n    result = 1\n    for i in range(len(list_data)):\n        if list_data[i] == list_data[i-1]:\n            result = result * list_data[i]\n    print(\"The result is : %d\" % result)\n",
        "num_ids": 96
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    print(\"Enter the list elements: \")\n    new_list = list(map(int,input().split()))\n    new_list = sorted(new_list)\n    unique_list = []\n    for i in range(len(new_list)):\n        if new_list[i] in unique_list:\n            pass\n        else:\n            unique_list.append(new_list[i])\n    new_list = sorted(unique_list)\n    result = 1\n    for i in range(len(new_list)):\n        result = result * new_list[i]\n    print(\"The product of the unique numbers in the list is : \", result)\n",
        "num_ids": 161
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = sorted(list_data)\n    product = 1\n    for i in list_data:\n        if i not in list_data[list_data.index(i)+1:]:\n            product *= i\n    print(product)\n    \ndef get_last_k_elements(k, list_data):\n    '''\n    Write a python function to get the last k elements from the given list.\n    '''\n    list_data = sorted(list_data)\n    i = len(list_data)-k\n    result = list_data[i:]\n    print(result)\n    \ndef reverse_words_order_in_a_string(string_data):\n    '''\n    Write a python function to reverse the words in the given string.\n    '''\n    string_data = string_data.split()\n    result = string_data[::-1]\n    result =''.join(result)\n    print(result)\n    \ndef get_prime_numbers_in_a_range(lower_limit, upper_limit):\n    '''\n    Write a python function to get the prime numbers within the given range.\n    '''\n    prime_number = list(range(lower_limit,upper_limit))\n    i = 0\n    while i < len(prime_number):\n        if prime_number[i]!= 0 and prime_number[i]!= 2 and prime_number[i]!= 3 and prime_number[i]!= 5 and prime_number[i]!= 7:\n            prime_number.remove(prime_number[i])\n        else:\n            i += 1\n    print(prime_number)\n    \ndef sum_of_digits_in_an_integer(integer_data):\n    '''\n    Write a python function to sum the digits in a given integer.\n    '''\n    total = 0\n    while integer_data > 0:\n        total += integer_data % 10\n        integer_data = integer_data // 10\n    print(total)\n    \ndef get_max_element_from_list(list_data):\n    '''\n    Write a python function to get the maximum element from a given list.\n    '''\n    list_data = sorted(list_data)\n    print(list_data[-1])\n    \ndef check_if_string_is_palindrome(string_data):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    string_data = string_data.replace(' ', '')\n    string_data = string_data.lower()\n    result = string_data[::-1]\n    print(result == string_data)\n    \ndef get_number_of_common_elements(list_data_1, list_data_2):\n    '''\n    Write a python function to get the number of common elements in two lists.\n    '''\n    result = 0\n    for i in list_data_1:\n        if i in list_data_2:\n            result += 1\n    print(result)\n    \ndef get_number_of_odd_elements(list_data):\n    '''\n    Write a python function to get the number of odd elements in a given list.\n    '''\n    list_data = sorted(list_data)\n    i = 0\n    while i < len(list_data):\n        if list_data[i] % 2!= 0:\n            break\n        i += 1\n    print(i)\n    \ndef sort_list_of_strings(list_data):\n    '''\n    Write a python function to sort a list of strings in ascending order.\n    '''\n    list_data = sorted(list_data)\n    print(list_data)\n    \ndef get_avg(list_data):\n    '''\n    Write a python function to get the average value from a given list.\n    '''\n    list_data = sorted(list_data)\n    result = sum(list_data) / len(list_data)\n    print(result)\n    \ndef get_longest_common_sequence(str_1, str_2):\n    '''\n    Write a python function to get the longest common subsequence of two strings.\n    '''\n    m = len(str_1)\n    n = len(str_2)\n    result = [[0 for x in range(n+1)] for y in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str_1[i-1] == str_2[j-1]:\n                result[i][j] = result[i-1][j-1] + 1\n            else:\n                result[i][j] = max(result[i][j-1], result[i-1][j])\n    i = m\n    j = n\n    result_str = ''\n    while i > 0 and j > 0:\n        if str_1[i-1] == str_2[j-1]:\n            result_str += str_1[i-1]\n            i -= 1\n            j -= 1\n        else:\n            if result[i][j-1] > result[i-1][j]:\n                j -= 1\n            else:\n                i -= 1\n    print(result_str)\n    \ndef get_anagrams(str_1, str_2):\n    '''\n    Write a python function to find all the anagrams of a string from the given string.\n    '''\n    list_1 = list(str_1)\n    list_2 = list(str_2)\n    result = []\n    while len(list_1) > 0:\n        if len(list_2) == 0:\n            break\n        elif list_1[0] == list_2[0]:\n            list_1.pop(0)\n            list_2.pop(0)\n        else:\n            list_1.pop(0)\n            result.append(list_1[0])\n            list_1.pop(0)\n            list_2.pop(0)\n    print(result)\n    \ndef get_longest_common_subsequence(str_1, str_2):\n    '''\n    Write a python function to get the longest common subsequence of two strings.\n    '''\n    m = len(str_1)\n    n = len(str_2)\n    result = [[0 for x in range(n+1)] for y in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str_1[i-1] == str_2[j-1]:\n                result[i][j] = result[i-1][j-1] + 1\n            else:\n                result[i][j] = max(result[i][j-1], result[i-1][j])\n    i = m\n    j = n\n    result_str = ''\n    while i > 0 and j > 0:\n        if str_1[i-1] == str_2[j-1]:\n            result_str += str_1[i-1]\n            i -= 1\n            j -= 1\n        else:\n            if result[i][j-1] > result[i-1][j]:\n                j -= 1\n            else:\n                i -= 1\n    print(result_str)\n    \ndef get_longest_palindromic_substring(str_1):\n    '''\n    Write a python function to get the longest palindromic substring of a string.\n    '''\n    m = len(str_1)\n    result = [[0 for x in range(m+1)] for y in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, m+1):\n            if str_1[i-1] == str_1[j-1]:\n                result[i][j] = result[i-1][j-1] + 1\n            else:\n                result[i][j] = max(result[i][j-1], result[i-1][j])\n    i = m\n    j = m\n    result_str = ''\n    while i > 0 and j > 0:\n        if str_1[i-1] == str_1[j-1]:\n            result_str += str_1[i-1]\n            i -= 1\n            j -",
        "num_ids": 204
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp=[]\n    for i in list_data:\n        if i not in temp:\n            temp.append(i)\n    if len(temp)==1:\n        return temp[0]\n    else:\n        return temp[0]*temp[1]\n    return temp[0]*temp[1]\n",
        "num_ids": 77
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2 * pi * r * r + 2 * pi * h * r\n    return a\n",
        "num_ids": 25
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = (2*pi*r**2)+(2*pi*r*h)\n    return sa\n",
        "num_ids": 28
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area=pi*r*h\n    return surface_area\n",
        "num_ids": 19
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = math.pi * r ** 2\n    b = 2 * math.pi * r * h\n    c = math.pi * h ** 2\n    print('the surface area of a cylinder is %.2f'%(a+b+c))\n",
        "num_ids": 61
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    surfacearea = pi * r**2 + 2*pi * r *h\n    return surfacearea\n",
        "num_ids": 32
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = pi*r**2 + 2*pi*r*h\n    return surfacearea\n",
        "num_ids": 25
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=3.14*r*r\n    return area*2+2*3.14*r*h\n",
        "num_ids": 29
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    def surfacearea_cylinder(r,h):\n        A = math.pi * r**2\n        B = 2 * math.pi * r * h\n        C = math.pi * (r**2) + math.pi * h * (h-r)\n        return (A + B + C)/2\n",
        "num_ids": 79
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    pi = math.pi\n    S = pi*r*h\n    return S\n",
        "num_ids": 26
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface_area = 2*math.pi*r*h + 2*math.pi*(r**2)\n    return surface_area\n",
        "num_ids": 39
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)]==B:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_a = len(A)\n    len_b = len(B)\n    if len_a < len_b:\n        return False\n    for i in range(len_b):\n        if A[i] == B[i]:\n            continue\n        elif A[i] > B[i]:\n            break\n        else:\n            return False\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(B)\n    for i in range(len(A)):\n        for j in range(n):\n            if A[i]==B[j]:\n                if i==len(A)-1:\n                    return True\n                elif i+j+1==len(A):\n                    return True\n            else:\n                i=i+1\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #arr = A\n    #n = len(arr)\n    #B = len(B)\n    #i = 0\n    #j = 0\n    #flag = 0\n    #flag = 1\n    #while i < len(A):\n        #while j < len(B):\n            #if arr[i] == B[j]:\n                #i += 1\n            #j += 1\n        #if j == len(B):\n            #flag = 0\n            #break\n    #if flag == 0:\n        #print(flag)\n    #else:\n        #print(flag)\n    #return flag\n    \n    \n    \n    \n    #code\n    if len(A) < len(B):\n        return False\n    elif len(A) == len(B):\n        for i in range(0,len(A)):\n            if A[i] == B[i]:\n                return True\n            else:\n                return False\n    else:\n        for i in range(0,len(A)):\n            if A[i] == B[i]:\n                return True\n            else:\n                return False\n                \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2009
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    length = len(B)\n    for i in range(0,length):\n        for j in range(0,length):\n            if A[i:i+length] == B[j:j+length]:\n                return True\n    return False\nA = [1,2,3]\nB = [1,2,3]\nprint(is_Sub_Array(A,B))\n",
        "num_ids": 93
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == 0 or len(B) == 0:\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for x in range(len(A)):\n        if x>=len(B):\n            break\n        if A[x]==B[x]:\n            continue\n        else:\n            return False\n    return True\nprint(is_Sub_Array([1,2,3,4,5,6,7],[1,2,3]))\nprint(is_Sub_Array([1,2,3,4,5,6,7],[1,2,3,5]))\nprint(is_Sub_Array([1,2,3,4,5,6,7],[1,2,3,5,6]))",
        "num_ids": 149
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == 0 and len(B) == 0: \n        return True\n    if len(B) == 0: \n        return False\n    if len(A) > len(B): \n        return False\n    if len(A) == len(B): \n        return compare(A, B) \n    return is_Sub_Array(A[1:],B)\n",
        "num_ids": 95
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            if A[i+1: ] == B[i: ]:\n                return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)]==B:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 0 or n == 1): \n        return 1\n    else: \n        return (n%10)*last_Digit_Factorial(n//10) \nn = int(input(\"Enter the number whose factorial is to be found: \"))\nif (n <= 0): \n    print(\"Factorial does not exist for negative numbers\") \nelse: \n    print(\"Factorial of\", n, \"is\", last_Digit_Factorial(n))\n",
        "num_ids": 114
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n%10 + last_Digit_Factorial(n//10)\n    ",
        "num_ids": 37
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    elif n >= 2: \n        return (n % 10) * last_Digit_Factorial(n // 10)\n",
        "num_ids": 49
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    total = 1\n    for i in range(1,n+1):\n        total = total*i\n    return total % 10\n",
        "num_ids": 33
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 1\n    fact = 1\n    while i <= n:\n        fact = fact * i\n        i = i + 1\n    # print(fact)\n    return fact % 10\nprint(last_Digit_Factorial(9))\nprint(last_Digit_Factorial(10))\n",
        "num_ids": 72
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    total = 1\n    for i in range(1, n+1):\n        total = total*i\n    return total % 10\n",
        "num_ids": 33
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num=1\n    for i in range(n,0,-1):\n        num*=i\n    return num%10\n    \n    \n    ",
        "num_ids": 37
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    return n % 10 * last_Digit_Factorial(n // 10) \n",
        "num_ids": 34
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    for i in range(1,n+1):\n        fact=fact*i\n    return fact%10\nprint(last_Digit_Factorial(20))\nprint(last_Digit_Factorial(5))\nprint(last_Digit_Factorial(8))\nprint(last_Digit_Factorial(3))\nprint(last_Digit_Factorial(10))\n",
        "num_ids": 98
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact % 10\n    ",
        "num_ids": 34
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.extend([list1[i], list2[i], list3[i]])\n    return interleaved_list\n",
        "num_ids": 59
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #if len(list1) == len(list2) and len(list2) == len(list3):\n    inter = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        inter.append(list1[i])\n        inter.append(list2[j])\n        inter.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return inter\n",
        "num_ids": 127
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                flat_list.append(list1[i])\n                flat_list.append(list2[j])\n                flat_list.append(list3[k])\n    return flat_list\n",
        "num_ids": 93
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + \\\n            [list2[i] for i in range(len(list2))] + \\\n            [list3[i] for i in range(len(list3))]\n",
        "num_ids": 64
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l = []\n    l.extend(list1)\n    l.extend(list2)\n    l.extend(list3)\n    return l\n",
        "num_ids": 41
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    for i in range(len(list1)):\n        final_list.append(list1[i])\n        final_list.append(list2[i])\n        final_list.append(list3[i])\n    return final_list\n",
        "num_ids": 67
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst_test_tup1, lst_test_tup2 = list(test_tup1), list(test_tup2)\n    lst_dissimilar = []\n    for elem in lst_test_tup1:\n        if elem in lst_test_tup2 and elem not in lst_dissimilar:\n            lst_dissimilar.append(elem)\n    return tuple(lst_dissimilar)\n",
        "num_ids": 115
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Size of two tuples are different\")\n        return None\n    diss = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diss.append(test_tup1[i])\n    return diss\n",
        "num_ids": 100
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(set(test_tup1).difference(set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                continue\n            elif test_tup1[i]!= test_tup2[j]:\n                return test_tup1[i], test_tup2[j]\n",
        "num_ids": 98
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1).symmetric_difference(set(test_tup2)))\n",
        "num_ids": 30
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_elements.append(i)\n    return dissimilar_elements\n",
        "num_ids": 56
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_list = list()\n    # Check if length of test_tup1 == length of test_tup2\n    if len(test_tup1)!= len(test_tup2):\n        # If yes, then print the length and the difference\n        # print(len(test_tup1), len(test_tup2))\n        # print(abs(len(test_tup1) - len(test_tup2)))\n        dissim_list.append(abs(len(test_tup1) - len(test_tup2)))\n    # Compare the list and find the difference\n    else:\n        for i in range(len(test_tup1)):\n            # If element at index i does not match, add to dissimilar list\n            if test_tup1[i]!= test_tup2[i]:\n                dissim_list.append(test_tup1[i])\n    # Return the list\n    return dissim_list\n    # End of the find_dissimilar function\n",
        "num_ids": 250
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return test_tup1[i], test_tup2[i]\n",
        "num_ids": 92
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set_test_tup1 = set(test_tup1)\n    set_test_tup2 = set(test_tup2)\n    return list(set_test_tup1.difference(set_test_tup2))\n",
        "num_ids": 62
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n",
        "num_ids": 66
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple): \n        if len(test_tuple) == 0:\n            return None\n        else:\n            return tuple(even_ele(tup, even_fnc) for tup in test_tuple if tup % 2 == 0)\n    else:\n        return test_tuple\n    \ndef even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple): \n        if len(test_tuple) == 0:\n            return None\n        else:\n            return even_fnc(test_tuple)\n    else:\n        return test_tuple\n",
        "num_ids": 61
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_ele(i, even_fnc)\n        elif type(i) == int:\n            if even_fnc(i):\n                test_tuple.remove(i)\n    return test_tuple\n",
        "num_ids": 74
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    #set up conditional\n    # no need to check for negative number \n    #so if it's a negative number, it's not even\n    \n    if test_tuple == -1:\n        return -1\n    \n    #because the range function is inclusive\n    #have to add 1 so not inclusive\n    #ex: range(1,10) = [1,2,3,4,5,6,7,8,9]\n    #need to add one so we go up to 9\n    \n    #range(1,10)\n    #range(1,10,2)\n    #range(1,10,3)\n    \n    for i in range(0,len(test_tuple),2):\n        if test_tuple[i] % 2!= 0:\n            #get the index number of the even number\n            #ex: the even elements are even numbers\n            #(1,2,4,6,8,10)\n            #even numbers are even numbers\n            #(2,4,6,8,10)\n            #(2,4,6,8)\n            #(2,4)\n            #the even elements are even numbers\n            #(1,3,5,7,9)\n            #even numbers are even numbers\n            #(3,5,7,9)\n            #(3,5)\n            #(3)\n            #get the index of the even element\n            even_index = test_tuple[i]\n            #set even_fnc equal to the inverse of the index\n            even_fnc = even_index\n            \n            #test_tuple[i] is the even element\n            #remove the even element and return the result\n            test_tuple = test_tuple[:i] + test_tuple[i+1:]\n            return test_tuple\n    \n    #if the for loop does not run, then even_index is None\n    #this means that the list is empty\n    #the nested for loop ran, so the nested list is not empty\n    return test_tuple\n    \n",
        "num_ids": 486
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if not i%2 == 0:\n            even_fnc(i)\n    return test_tuple\n",
        "num_ids": 38
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple)!= tuple:\n        raise TypeError(\"Only tuple\")\n    elif type(even_fnc)!= int or even_fnc <= 0:\n        raise TypeError(\"Only integer and positive\")\n    else:\n        if even_fnc == 0:\n            return tuple(i for i in test_tuple if type(i) == int)\n        elif even_fnc == 1:\n            return tuple(i for i in test_tuple if type(i) == int and i % 2 == 0)\n        else:\n            return tuple(i for i in test_tuple if type(i) == int and i % 2 == 0 and i!= even_fnc)\n",
        "num_ids": 168
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print(\"The original tuple is : \", test_tuple)\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_ele(i, even_fnc)\n        else:\n            if i%2 == 0:\n                continue\n            else:\n                even_fnc(i)\n    print(\"The resulting tuple is : \", test_tuple)\n",
        "num_ids": 94
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple: \n        if i % 2!= 0: \n            even_fnc(i)\n    return test_tuple\n",
        "num_ids": 40
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        for j in range(len(test_tuple[i])):\n            if test_tuple[i][j] % 2 == 1:\n                test_tuple[i][j] = even_fnc(test_tuple[i][j])\n    return test_tuple\n",
        "num_ids": 84
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    if len(test_tuple) == 0:\n        return None\n",
        "num_ids": 21
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2)*s \n",
        "num_ids": 12
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"Total Surface Area = %d\" %(2 * b * s + 2 * (s + b) * b))\n",
        "num_ids": 31
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s_area = (1/2)*b*s\n    return s_area\n",
        "num_ids": 22
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # get the input values\n    b = float(input(\"Enter the base: \"))\n    s = float(input(\"Enter the height: \"))\n    # calculate the surface area\n    sa = b*s\n    # display the output\n    print(f\"The surface area of the pyramid is {sa}\")\n    return\n",
        "num_ids": 77
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surfaceArea(b,h):\n        return (b*h*2)+(b*(h-1))+b\n    return surfaceArea(b,h)\nprint(surface_Area(10,4))\nprint(surface_Area(10,5))\nprint(surface_Area(10,6))\nprint(surface_Area(5,6))",
        "num_ids": 85
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"Input: %d %d\"%(b,s))\n    A = (1/3)*b*s*s\n    print(\"Output:\",A)\n",
        "num_ids": 42
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b+s)\n",
        "num_ids": 12
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (1/2) * b * s \n    return area\n",
        "num_ids": 20
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = b\n    height = s\n    surface_area = (base*height)/2\n    print(\"The surface area of the pyramid is : \", surface_area)\n",
        "num_ids": 41
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_area(b,h):\n        '''\n        Write a python function to find the surface area of a square pyramid with a given base edge and height.\n        '''\n        def surface_area(b,h):\n            '''\n            Write a python function to find the surface area of a square pyramid with a given base edge and height.\n            '''\n            def is_square(n):\n                '''\n                Write a python function to find whether a number is a perfect square or not\n                '''\n                def is_square(n):\n                    '''\n                    Write a python function to find whether a number is a perfect square or not\n                    '''\n                    if n == 1:\n                        return True\n                    return n == 2 or n == 3 or n == 4 or n == 5 or n == 6 or n == 7 or n == 8 or n == 9 or n == 10 or n == 11 or n == 12 or n == 13 or n == 14 or n == 15 or n == 16 or n == 17 or n == 18 or n == 19 or n == 20 or n == 21 or n == 22 or n == 23 or n == 24 or n == 25 or n == 26 or n == 27 or n == 28 or n == 29 or n == 30 or n == 31 or n == 32 or n == 33 or n == 34 or n == 35 or n == 36 or n == 37 or n == 38 or n == 39 or n == 40 or n == 41 or n == 42 or n == 43 or n == 44 or n == 45 or n == 46 or n == 47 or n == 48 or n == 49 or n == 50 or n == 51 or n == 52 or n == 53 or n == 54 or n == 55 or n == 56 or n == 57 or n == 58 or n == 59 or n == 60 or n == 61 or n == 62 or n == 63 or n == 64 or n == 65 or n == 66 or n == 67 or n == 68 or n == 69 or n == 70 or n == 71 or n == 72 or n == 73 or n == 74 or n == 75 or n == 76 or n == 77 or n == 78 or n == 79 or n == 80 or n == 81 or n == 82 or n == 83 or n == 84 or n == 85 or n == 86 or n == 87 or n == 88 or n == 89 or n == 90 or n == 91 or n == 92 or n == 93 or n == 94 or n == 95 or n == 96 or n == 97 or n == 98 or n == 99 or n == 100:\n                        return False\n                    return is_square(n//2)\n                if is_square(b):\n                    return b*b\n                elif is_square(h):\n                    return b*h\n                else:\n                    return False\n            if h == 0:\n                return 0\n            if b == 0:\n                return 0\n            if b == 1:\n                return b\n            if b == 2:\n                return 2*b\n            if b == 3:\n                return b+b\n            if b == 4:\n                return 2*b+b\n            if b == 5:\n                return 2*b+b+b\n            if b == 6:\n                return 2*b+b+b+b\n            if b == 7:\n                return 2*b+b+b+b+b\n            if b == 8:\n                return 2*b+b+b+b+b+b\n            if b == 9:\n                return 2*b+b+b+b+b+b+b+b\n            if b == 10:\n                return 2*b+b+b+b+b+b+b+b+b+b\n            if b == 11:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 12:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 13:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 14:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 15:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 16:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 17:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 18:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 19:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 20:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 21:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 22:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 23:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 24:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 25:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 26:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 27:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 28:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 29:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 30:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 31:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 32:\n                return 2*b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b\n            if b == 33:\n                return 2*b+b+b+b+b+",
        "num_ids": 1855
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n    #if len(dict1) == 0:\n    #    return True\n    #return False\n",
        "num_ids": 32
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Base case\n    if num < 2:\n        return 1\n    \n    # First recurrence\n    x = num * catalan_number(num - 1)\n    \n    # Second recurrence\n    y = catalan_number(num - 2)\n    return x + y\n",
        "num_ids": 68
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    \n    catalan_num = 0\n    for i in range(1, num+1):\n        catalan_num += comb(num, i) * (2**i) * (1/i)\n",
        "num_ids": 65
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError('Invalid input')\n    else:\n        n = 0\n        if num == 0:\n            return 1\n        else:\n            for i in range(0,num):\n                n += catalan_number(i)*catalan_number((num-i)-1)\n            return n\n",
        "num_ids": 79
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        cat_n_1 = catalan_number(num-1)\n        cat_n_2 = (1/2)*cat_n_1*(cat_n_1+1)\n        return cat_n_2\n",
        "num_ids": 70
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan_num = 0\n    for i in range(0, n+1):\n        catalan_num += catalan_number_rec(i)\n    return catalan_num\n",
        "num_ids": 51
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 6\n    \n    result = [0] * num\n    result[0] = 1\n    result[1] = 1\n    result[2] = 2\n    result[3] = 6\n",
        "num_ids": 91
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    def catalan_helper(i, num):\n        if i == 1:\n            return 1\n        if i == 0:\n            return 1\n        if i == num:\n            return 1\n        res = 0\n        for j in range(1, i):\n            res += catalan_helper(j, num)*catalan_helper(i-j, num)\n        return res\n    \n    return catalan_helper(num, num)\n",
        "num_ids": 111
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = [1]\n    for i in range(1,num+1):\n        catalan_list.append(0)\n    for i in range(1,num+1):\n        for j in range(i):\n            catalan_list[i] += catalan_list[j]*catalan_list[i-j-1]\n    return catalan_list[num]\n",
        "num_ids": 97
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def nth_catalan(num):\n        '''\n        Divide a number by the base(4)\n        '''\n        return int(math.factorial(num)/(math.factorial(num-2)*4))\n    '''\n    Calculate the sum of the previous(n) catalan number\n    '''\n    catalan_sum = 0\n    for i in range(0, num):\n        catalan_sum += nth_catalan(i)\n    return catalan_sum\n",
        "num_ids": 43
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    def solve(n,k,d):\n        '''\n        Recursion to solve catalan number in C(n,k)\n        '''\n        if d == k:\n            return 1\n        elif d < k:\n            return 0\n        else:\n            return solve(n,k,d-1) + (n-k+1)*solve(n,k-1,d)\n    return solve(num,num,num)\n    \n    \n    \nprint(catalan_number(5))\n",
        "num_ids": 88
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs=re.findall(r'ly[ ]?',text)\n    if len(adverbs)==0:\n        return None\n    return adverbs,len(adverbs)\n",
        "num_ids": 47
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # your code here\n    text = '''Harry Potter was released on 26th October 1997, \n    and was followed by two sequels -  Suitable, The Third, and Prince - \n    where Suitable was released on 5th October 1997 and Prince - \n    on 8th October 1997.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    #text = text.lower()\n    print(text)\n    regex = r'(ly|every|all|very|a|am|an|is|was|were|be|been|being|has|has|had|hasn't|hadn't|hadn|hadn't|haven't|haven't|hadn|hadn|hadn't|had|had|hadn|hadn)'\n    return re.findall(regex, text)\n    \nfind_adverbs(text)\n",
        "num_ids": 143
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    res = []\n    for i, w in enumerate(text):\n        if w == 'ly':\n            if text[i+1] == 'i' or text[i+1] == 'y':\n                if text[i+2] == 'y':\n                    res.append(i)\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i, word in enumerate(text.split()):\n        if word[-2:] == 'ly' and word.lower()!= 'ly':\n            adverbs.append(word)\n    print(adverbs)\n    return adverbs\n",
        "num_ids": 66
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs=[]\n    for i, word in enumerate(text.split()):\n        if word.endswith('ly') and 'RB' in word:\n            adverbs.append([word, i])\n    return adverbs\n",
        "num_ids": 57
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    pattern = r'ly'\n    result = re.finditer(pattern, text)\n",
        "num_ids": 25
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = re.compile(r'ly')\n    matched = re.findall(adverb_pattern, text)\n    if matched:\n        print(matched)\n",
        "num_ids": 45
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_positions = []\n    for i in range(len(text)):\n        if text[i] == \"ly\" and text[i+1] == \" \":\n            adverb_positions.append(i)\n    return adverb_positions\n",
        "num_ids": 65
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Using re module, take in a string and use re to search for the following patterns:\n    # r'(ADV|ADV|LY)$'\n    # r'ADV|ADV|LY'\n    # r'ADV|ADV|LY$'\n    # r'^(ADV|ADV|LY)'\n    # r'ADV|ADV|LY$'\n    # r'ADV|ADV|LY$'\n    # The \"|\" is for or, since I want to search for the following patterns:\n    # r'ADV|ADV|LY$'\n    # r'^(ADV|ADV|LY)'\n    # r'ADV|ADV|LY$'\n    # r'^(ADV|ADV|LY)'\n    # r'ADV|ADV|LY$'\n    # r'^(ADV|ADV|LY)'\n",
        "num_ids": 217
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if type(text)!= str:\n        raise TypeError(\"text must be a string\")\n    else:\n        regex = r\"(?i)\\bly(?=\\s)\"\n        match = re.search(regex, text)\n        if match:\n            adverbs = match.group()\n            return adverbs, match.span()\n        else:\n            return None\n",
        "num_ids": 90
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    res = []\n    for item in items:\n        if item[1] > 0:\n            heapq.heappush(h,(-item[1],item))\n    for i in range(n):\n        res.append(heapq.heappop(h)[1])\n    return res\n",
        "num_ids": 79
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        if len(heap) <= n:\n            heapq.heappush(heap, item)\n        else:\n            heapq.heappushpop(heap, item)\n    return heap\n    \n",
        "num_ids": 80
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    data = []\n    for key,value in items.items():\n        data.append((value,key))\n",
        "num_ids": 28
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key = lambda x: x[1])\n    return items[:n]\n",
        "num_ids": 25
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    items = {item: price for item, price in items.items()}\n    items = sorted(items, key=items.get, reverse=True)\n    for i in range(n):\n        result.append(items[i])\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)==0:\n        return items\n    for i in range(len(items)):\n        if items[i][1]>n:\n            return items[:i]\n    return items[:n]\n",
        "num_ids": 56
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    i = []\n    for item in items:\n        i.append(item[2])\n    heapq.heapify(i)\n    for _ in range(len(i)-n):\n        heapq.heappop(i)\n    return i\n",
        "num_ids": 65
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    l = {}\n    for i in items:\n        if l.get(i[1]) is None:\n            l[i[1]] = []\n        l[i[1]].append(i[0])\n    s = []\n    for i in sorted(l.keys()):\n        for j in sorted(l[i]):\n            s.append((j,i))\n    return s[-n:]\n",
        "num_ids": 100
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    dict_items = {}\n    for i in items:\n        dict_items[i[0]] = i[1]\n",
        "num_ids": 31
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Time complexity is O(N+NlogN)\n    items.sort(key=lambda item:item[1],reverse=True)\n    print(items[:n])\n    heapq.heapify(items)\n    print(items[:n])\n    \n    # Time complexity is O(N)\n    # items.sort(key=lambda item:item[1])\n    # print(items[:n])\n    # return items[:n]\n    \n    \n    \n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Time complexity is O(NlogN)\n    # heap = []\n    # for i in range(len(items)):\n    #     if heap and heap[0] < items[i][1]:\n    #         heapq.heappushpop(heap,items[i][1])\n    #     else:\n    #         heapq.heappush(heap,items[i][1])\n    # print(heap)\n    # return heap[:n]\n",
        "num_ids": 117
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    newlist = l[0:n]\n    newlist.extend(l[n+1:])\n    return newlist\n",
        "num_ids": 33
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    length = len(l)\n    return l[0:length-n] + l[length-n:length]\n",
        "num_ids": 30
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n<=0 or n >= len(l):\n        return l\n    return l[:n]+l[n+1:]\n",
        "num_ids": 34
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if l==[]:\n        return l\n    if n==len(l):\n        return [l]\n    if n==0:\n        return l\n    elif n>len(l):\n        return []\n    else:\n        return (l[:n]+l[n+1:])\n",
        "num_ids": 73
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    n=int(n)\n    first_n=l[:n]\n    second_n=l[n:]\n    new_list=[first_n,second_n]\n    return new_list\n",
        "num_ids": 51
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    nth_element = l[n-1]\n    l = l[:n-1]\n    l.append(nth_element)\n    print(l)\n",
        "num_ids": 43
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 0:\n        return\n    else:\n        if len(l) >= n:\n            if n == 0:\n                return l\n            else:\n                return l[n:] + l[:n]\n        else:\n            print(\"The length of the list is not enough to split in half.\")\n",
        "num_ids": 78
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n+1:]\n",
        "num_ids": 16
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    if n >= len(l):\n        return l\n    for i in range(n):\n        arr.append(l[i])\n    for j in range(n, len(l)):\n        arr.append(l[j])\n    return arr\n",
        "num_ids": 67
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    return l[:n] + split_Arr(l[n:], n-1)\n",
        "num_ids": 36
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if isinstance(listx, list):\n        return tuple(listx)\n    else:\n        raise TypeError(\"The input is not a list.\")\n",
        "num_ids": 38
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(type(listx))\n    \n    listx = tuple(listx)\n    \n    print(type(listx))\n    \n    return listx\n    \n",
        "num_ids": 43
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in listx:\n        tup += (i,)\n    return tup\n",
        "num_ids": 29
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_tuple = tuple(listx)\n    return new_tuple\n",
        "num_ids": 21
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\nprint(list_tuple([1, 2, 3, 4]))\n",
        "num_ids": 27
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x = tuple(listx)\n    print(x)\n",
        "num_ids": 17
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listy = listx[:]\n    tuplex = tuple(listy)\n    return tuplex\n",
        "num_ids": 28
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    list1 = nums\n    big = max(list1)\n    small = min(list1)\n    print(big-small)\n",
        "num_ids": 35
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = max(nums) - min(nums)\n    return diff\n",
        "num_ids": 21
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums_list = sorted(nums)\n    return nums_list[0] - nums_list[-1]\n",
        "num_ids": 33
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return nums[-1] - nums[0]\n",
        "num_ids": 27
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_val = nums[0]\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val - min_val\n",
        "num_ids": 74
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    s1 = 0\n    s2 = 0\n    for i in nums:\n        if i > s1:\n            s2 = s1\n            s1 = i\n        elif i > s2:\n            s2 = i\n    return s2 - s1\n",
        "num_ids": 66
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for n in nums:\n        if n > largest:\n            largest = n\n        elif n < smallest:\n            smallest = n\n    return largest - smallest\n",
        "num_ids": 61
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = nums[-1] - nums[0]\n    return diff\n",
        "num_ids": 22
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if nums is None:\n        return \"invalid input\"\n    nums_sorted = sorted(nums)\n    return abs(nums_sorted[0]-nums_sorted[-1])\n",
        "num_ids": 53
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    s = (a,b)\n    return set(x**2 for x in range(s[0], s[1]))\n",
        "num_ids": 33
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return list(range(int(sqrt(a)), int(sqrt(b)+1)))\n",
        "num_ids": 25
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        return [i ** 2 for i in range(a, b+1)]\n    else:\n        return [i ** 2 for i in range(a, b-1, -1)]\n",
        "num_ids": 52
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def square(x):\n        return x*x\n    # x = int(input(\"Enter a number: \"))\n    # y = int(input(\"Enter a number: \"))\n    # while x > y:\n    #     print(\"Input Error: x must be smaller than y\")\n    #     x = int(input(\"Enter a number: \"))\n    #     y = int(input(\"Enter a number: \"))\n    # lst = list(range(x, y+1))\n    # lst = list(range(x, y+1))\n    lst = range(x, y+1)\n    # lst = [x for x in range(x, y+1)]\n    squares = []\n    for i in lst:\n        if i == x:\n            continue\n        elif square(i) == x:\n            squares.append(i)\n        else:\n            continue\n    print(f\"{squares}\")\n    return squares\n",
        "num_ids": 231
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    while a <= b:\n        n = a**2\n        if n == a:\n            print(f'Perfect square between {a} and {b} is: {a}')\n        else:\n            a += 1\n        \n        \n",
        "num_ids": 58
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # assert : SyntaxError: unindent does not match any outer indentation level\n    assert a < b, 'a < b is wrong!'\n    # while : false\n    while not (a <= b):\n        a += 1\n    # print : a is not less than b\n    print(a)\n    # for : true\n    for i in range(a, b+1):\n        if i ** 2 == a:\n            print(i)\n",
        "num_ids": 107
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sq_a = a ** 2\n    sq_b = b ** 2\n    if sq_a < sq_b:\n        while sq_a <= sq_b:\n            if sq_a ** 0.5 == int(sq_a ** 0.5):\n                return sq_a\n            sq_a += 1\n    else:\n        while sq_b <= sq_a:\n            if sq_b ** 0.5 == int(sq_b ** 0.5):\n                return sq_b\n            sq_b += 1\n",
        "num_ids": 125
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = set()\n    for i in range(a, b + 1):\n        if perfect_square(i) == True:\n            result.add(i)\n    return result\n    \n",
        "num_ids": 47
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        return True\n    else:\n        while a > 0:\n            if a % 2 == 0:\n                return False\n            else:\n                a = a // 2\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if (x==0 and y==0):\n        raise ValueError\n    else:\n        r = abs(x)\n        if (x<0):\n            angle = -2*cmath.pi + cmath.atan(y/x)\n        else:\n            angle = cmath.atan(y/x)\n        \n    return (int(r*cmath.cos(angle)),int(r*cmath.sin(angle)))\n",
        "num_ids": 105
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if type(x) == float and type(y) == float:\n        if x==0 and y==0:\n            return 0,0\n        r = cmath.sqrt(x**2+y**2)\n        theta = cmath.acos(x/r)\n        return (r*theta).real, (r*theta).imag\n    else:\n        print('Wrong input')\n        return None\n",
        "num_ids": 103
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cos(y)+y*sin(y)\n",
        "num_ids": 17
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x == 0 and y!= 0:\n        return x,y,0\n    if x == 0 and y == 0:\n        return x,0,0\n    if x > 0:\n        if y > 0:\n            return abs(x),abs(y),math.degrees(math.atan(y/x))\n        if y < 0:\n            return abs(x),abs(y),math.degrees(math.atan(y/x))+180\n    else:\n        if y > 0:\n            return abs(x),abs(y),math.degrees(math.atan(y/x))+180\n        if y < 0:\n            return abs(x),abs(y),math.degrees(math.atan(y/x))\n",
        "num_ids": 180
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*complex(0,1), y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x/(1+y**2)**.5, cmath.sqrt(1-x**2-y**2))\nprint(rect_polar(3,2))\nprint(polar_rect(3,2))\nprint(rect_polar(3,3))\nprint(polar_rect(3,3))\n",
        "num_ids": 82
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = math.sqrt(x**2 + y**2)\n    theta = math.degrees(math.atan2(y,x))\n    return(r, theta)\n",
        "num_ids": 47
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*y,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (cmath.sqrt(x**2+y**2),cmath.atan(y/x))\ndef point_line(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the distance between point (x3,y3) and the line passing through two other points (x1,y1) and (x2,y2).\n    '''\n    d1=x2-x1\n    d2=y2-y1\n    d3=x3-x1\n    d4=y3-y1\n    #print(d1,d2,d3,d4)\n    denominator=d1*d4-d3*d2\n    if denominator==0:\n        print(\"Point doesn't lie on the line\")\n    else:\n        m=d1*d3-d2*d4\n        print(m/denominator)\n        x=m/(d1*d3-d2*d4)\n        print(x)\n        y=m/(d1*d3-d2*d4)\n        print(y)\n    return x,y\ndef dist(x1,y1,x2,y2):\n    '''\n    Write a function that returns the distance between two points\n    '''\n    return ((x1-x2)**2+(y1-y2)**2)**0.5\ndef vector(x1,y1,x2,y2):\n    '''\n    Write a function to find the vector (x1,y1) to (x2,y2).\n    '''\n    return (x2-x1,y2-y1)\ndef area(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of the triangle given by the line passing through 3 points.\n    '''\n    return abs((x1*y2+x2*y3+x3*y1-x1*y3-x2*y1-x3*y2)/2)\ndef triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of the triangle given by the line passing through 3 points.\n    '''\n    a=(x1,y1)\n    b=(x2,y2)\n    c=(x3,y3)\n    #vector_ab=vector(a[0],a[1],b[0],b[1])\n    #vector_bc=vector(b[0],b[1],c[0],c[1])\n    #vector_ac=vector(c[0],c[1],a[0],a[1])\n    #print(vector_ab,vector_bc,vector_ac)\n    #vector_ab_BC=vector(vector_ab[0],vector_ab[1],vector_bc[0],vector_bc[1])\n    #vector_BC_ac=vector(vector_bc[0],vector_bc[1],vector_ac[0],vector_ac[1])\n    #print(vector_ab_BC,vector_BC_ac)\n    #vectors_AB_BC_ac=vector(vector_ab_BC[0],vector_ab_BC[1],vector_BC_ac[0],vector_BC_ac[1])\n    #vectors_AC_BC_ab=vector(vector_AC_BC_ac[0],vector_AC_BC_ac[1],vector_ab_BC[0],vector_ab_BC[1])\n    #print(vectors_AB_BC_ac,vectors_AC_BC_ab)\n    #area_of_triangle=dist(a[0],a[1],b[0],b[1])+dist(b[0],b[1],c[0],c[1])+dist(c[0],c[1],a[0],a[1])-dist(a[0],a[1],c[0],c[1])-dist(b[0],b[1],a[0],a[1])-dist(c[0],c[1],b[0],b[1])\n    vector_ab=vector(a[0],a[1],b[0],b[1])\n    vector_bc=vector(b[0],b[1],c[0],c[1])\n    vector_ac=vector(c[0],c[1],a[0],a[1])\n    area_of_triangle=((vector_ab[0]*vector_bc[0])+(vector_bc[0]*vector_ac[0])+(vector_ac[0]*vector_ab[0]))/2\n    return area_of_triangle\ndef area_of_triangle_2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of the triangle given by the line passing through 3 points.\n    '''\n    # vector_ab=vector(a[0],a[1],b[0],b[1])\n    # vector_bc=vector(b[0],b[1],c[0],c[1])\n    # vector_ac=vector(c[0],c[1],a[0],a[1])\n    # print(vector_ab,vector_bc,vector_ac)\n    # vector_ab_BC=vector(vector_ab[0],vector_ab[1],vector_bc[0],vector_bc[1])\n    # vector_BC_ac=vector(vector_bc[0],vector_bc[1],vector_ac[0],vector_ac[1])\n    # print(vector_ab_BC,vector_BC_ac)\n    # vectors_AB_BC_ac=vector(vector_ab_BC[0],vector_ab_BC[1],vector_BC_ac[0],vector_BC_ac[1])\n    # vectors_AC_BC_ab=vector(vector_AC_BC_ac[0],vector_AC_BC_ac[1],vector_ab_BC[0],vector_ab_BC[1])\n    # print(vectors_AB_BC_ac,vectors_AC_BC_ab)\n    # area_of_triangle=dist(a[0],a[1],b[0],b[1])+dist(b[0],b[1],c[0],c[1])+dist(c[0],c[1],a[0],a[1])-dist(a[0],a[1],c[0],c[1])-dist(b[0],b[1],a[0],a[1])-dist(c[0],c[1],b[0],b[1])\n    vector_ab=vector(a[0],a[1],b[0],b[1])\n    vector_bc=vector(b[0],b[1],c[0],c[1])\n    vector_ac=vector(c[0],c[1],a[0],a[1])\n    vector_ac_bc=vector_ac-vector_bc\n    vector_ac_ab=vector_ac-vector_ab\n    area_of_triangle=(vector_ac_bc[0]*vector_bc[1])-(vector_ab[0]*vector_ac[1])\n    return area_of_triangle\ndef area_of_triangle_3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of the triangle given by the line passing through 3 points.\n    '''\n    # vector_ab=vector(a[0],a[1],b[0],b[1])\n    # vector_bc=vector(b[0],b[1],c[0],c[1])\n    # vector_ac=vector(c[0],c[1],a[0],a[1])\n    # print(vector_ab,vector_bc,vector_ac)\n    # vector_ab_BC=vector(vector_ab[0],vector_ab[1],vector_bc[0],vector_bc[1])\n    # vector_BC_ac=vector(vector_bc[0],vector_bc[1],vector_ac",
        "num_ids": 154
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    \n    if x==0:\n        return (0,y)\n    else:\n        theta = cmath.acos(x/r)\n    \n    if y>0:\n        return (r*theta,0)\n    else:\n        return (r*theta,0)\n",
        "num_ids": 91
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.asin(y/x)\n    return r, theta\n",
        "num_ids": 34
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x,y)\n",
        "num_ids": 11
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # with open(\"C:/Users/Kalyan/Desktop/Python_Programs/swap_List.py\", \"w\") as file:\n    #     file.write(\"swap_List = lambda x: list(x[-1], x[:-1])\")\n    # print(\"Please test your code.\\n\")\n    # print(swap_List([1, 2, 3, 4, 5]))\n    # print(swap_List([5, 4, 3, 2, 1]))\n    # print(swap_List([1, 2, 3, 4]))\n    # print(swap_List([1]))\n    # print(swap_List([]))\n",
        "num_ids": 164
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2014
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = [i for i in newList[::-1]]\n    newList.append(newList[0])\n    newList = newList[::-1]\n    return newList\n",
        "num_ids": 48
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList.remove(last)\n    newList.remove(first)\n    newList.insert(0, last)\n    newList.insert(len(newList), first)\n    return newList\n",
        "num_ids": 69
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n > 1:\n        newList[n-1] = newList[0]\n        newList[0] = newList[n-2]\n        newList[n-2] = newList[n-1]\n        print(newList)\n    elif n == 1:\n        return newList\n    else:\n        print(\"List is empty\")\n",
        "num_ids": 97
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    temp = newList[0]\n    newList[0] = newList[n-1]\n    newList[n-1] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = len(newList)\n    temp = newList[l-1]\n    newList[l-1] = newList[0]\n    newList[0] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1,k+1):\n        res = res * (n - i + 1) / i\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialising the counter \n    count = 0\n    # Iterating the required no. of terms \n    for i in range(n+1): \n        # The binomial coefficient  \n        product = 1\n        # Sum of the product \n        for j in range(i): \n            product = product * (k+j) \n        count = count + product \n    print(count) \n    return count \n",
        "num_ids": 102
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binom_nk = 1\n    for i in range(1,k+1):\n        binom_nk = binom_nk*(n-i+1)\n        binom_nk = binom_nk/i\n    return binom_nk\n",
        "num_ids": 68
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = 0\n    for i in range(0,n+1):\n        binomial_coeff += (n-i) * ((1+i) * (1+i) // 2)\n    return binomial_coeff\n    \n",
        "num_ids": 62
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 1\n    for i in range(1,n+1):\n        C = C * i\n    print(C)\n    C = binomial_coeff(n,k)\n    print(C)\n    #for i in range(1,n+1):\n    #    print(i, \"=\", binomial_coeff(n,i))\n",
        "num_ids": 88
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k < 0 or k > n:\n        return 0\n    return (math.factorial(n))/(math.factorial(k)*math.factorial(n-k))\n    \nprint(binomial_Coeff(3,1)) # 1\nprint(binomial_Coeff(6,3)) # 30\nprint(binomial_Coeff(0,0)) # 1\nprint(binomial_Coeff(1,0)) # 0\nprint(binomial_Coeff(3,2)) # 10\nprint(binomial_Coeff(3,3)) # 12\nprint(binomial_Coeff(3,4)) # 15\nprint(binomial_Coeff(5,3)) # 24\nprint(binomial_Coeff(5,4)) # 31\nprint(binomial_Coeff(5,5)) # 35\nprint(binomial_Coeff(5,6)) # 44\nprint(binomial_Coeff(5,7)) # 51\nprint(binomial_Coeff(10,9)) # 12288\nprint(binomial_Coeff(10,10)) # 2520\nprint(binomial_Coeff(10,11)) # 24576\nprint(binomial_Coeff(15,13)) # 207584\nprint(binomial_Coeff(15,14)) # 262144\nprint(binomial_Coeff(15,15)) # 312288\nprint(binomial_Coeff(15,16)) # 31536\nprint(binomial_Coeff(15,17)) # 324324\nprint(binomial_Coeff(15,18)) # 332640\nprint(binomial_Coeff(15,19)) # 3442880\nprint(binomial_Coeff(15,20)) # 3641600\nprint(binomial_Coeff(15,21)) # 3663880\nprint(binomial_Coeff(15,22)) # 3727200\nprint(binomial_Coeff(15,23)) # 3829440\nprint(binomial_Coeff(15,24)) # 39936000\nprint(binomial_Coeff(15,25)) # 40310800\nprint(binomial_Coeff(15,26)) # 40665600\nprint(binomial_Coeff(15,27)) # 41344160\nprint(binomial_Coeff(15,28)) # 41630400\nprint(binomial_Coeff(15,29)) # 42140400\nprint(binomial_Coeff(15,30)) # 42375200\nprint(binomial_Coeff(15,31)) # 43292800\nprint(binomial_Coeff(15,32)) # 43425600\nprint(binomial_Coeff(15,33)) # 43724160\nprint(binomial_Coeff(15,34)) # 44101760\nprint(binomial_Coeff(15,35)) # 44588160\nprint(binomial_Coeff(15,36)) # 45180240\nprint(binomial_Coeff(15,37)) # 45427600\nprint(binomial_Coeff(15,38)) # 46731120\nprint(binomial_Coeff(15,39)) # 48270960\nprint(binomial_Coeff(15,40)) # 49005600\nprint(binomial_Coeff(15,41)) # 50325600\nprint(binomial_Coeff(15,42)) # 55132080\nprint(binomial_Coeff(15,43)) # 56160720\nprint(binomial_Coeff(15,44)) # 57327360\nprint(binomial_Coeff(15,45)) # 58729360\nprint(binomial_Coeff(15,46)) # 60263760\nprint(binomial_Coeff(15,47)) # 62186080\nprint(binomial_Coeff(15,48)) # 63660480\nprint(binomial_Coeff(15,49)) # 65857760\nprint(binomial_Coeff(15,50)) # 68645360\nprint(binomial_Coeff(15,51)) # 69335200\nprint(binomial_Coeff(15,52)) # 71389600\nprint(binomial_Coeff(15,53)) # 73870240\nprint(binomial_Coeff(15,54)) # 76969280\nprint(binomial_Coeff(15,55)) # 80513120\nprint(binomial_Coeff(15,56)) # 82971280\nprint(binomial_Coeff(15,57)) # 84634360\nprint(binomial_Coeff(15,58)) # 86652800\nprint(binomial_Coeff(15,59)) # 87702800\nprint(binomial_Coeff(15,60)) # 89062500\nprint(binomial_Coeff(15,61)) # 90471760\nprint(binomial_Coeff(15,62)) # 91735360\nprint(binomial_Coeff(15,63)) # 93322720\nprint(binomial_Coeff(15,64)) # 94895840\nprint(binomial_Coeff(15,65)) # 96961920\nprint(binomial_Coeff(15,66)) # 99403760\nprint(binomial_Coeff(15,67)) # 100205120\nprint(binomial_Coeff(15,68)) # 101009920\nprint(binomial_Coeff(15,69)) # 102013600\nprint(binomial_Coeff(15,70)) # 103023200\nprint(binomial_Coeff(15,71)) # 103011840\nprint(binomial_Coeff(15,72)) # 104031200\nprint(binomial_Coeff(15,73)) # 104076480\nprint(binomial_Coeff(15,74)) # 104150720\nprint(binomial_Coeff(15,75)) # 104351440\nprint(binomial_Coeff(15,76)) # 104522080\nprint(binomial_Coeff(15,77)) # 104600480\nprint(binomial_Coeff(15,78)) # 104728480\nprint(binomial_Coeff(15,79)) # 104790720\nprint(binomial_Coeff(15,80)) # 104827600\nprint(binomial_Coeff(15,81)) # 104860240\nprint(binomial_Coeff(15,82)) # 104907200\nprint(binomial_Coeff(15,83)) # 104952000\nprint(binomial_Coeff(15,84)) # 105025600\nprint(binomial_Coeff(15,85)) # 105161600\nprint(binomial_Coeff(15,86)) # 105358240\nprint(binomial_Coeff(15,87)) # 105523200\nprint(binomial_Coeff(15,88)) # 105561600\nprint(binomial_Coeff(15,89)) # 105753600\nprint(binomial_Coeff(15,90)) # 105760000\nprint(binomial_Coeff(15,91)) # 105760480\nprint(binomial_Coeff(15,92)) # 105777760\nprint(binomial_Coeff(15,93)) # 105881920\nprint(binomial_Coeff(15,94)) # 105901120\nprint(binomial_Coeff(15,95)) # 105908800\nprint(binomial_Coeff(15,96)) # 105970240\nprint(binomial_Coeff(15,97)) # 105985120\nprint(binomial_Coeff(15,98)) # 106014640\nprint(binomial_Coeff(15,99)) # 106035360\nprint(binomial_Coeff(15,100)) # 106045120\nprint(binomial_Coeff(15,101)) # 106065440\nprint(binomial_Coeff(15,102)) # 106085120\nprint(binomial_Coeff(15,103)) # 106124640\nprint(binomial_Coeff(15,104)) # 106253600\nprint",
        "num_ids": 2005
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # n = 4\n    # k = 3\n    # a = 1\n    # b = 1\n    # c = 1\n    # d = 1\n    # s = a + b + c + d\n    # for i in range(1,k+1):\n    #     a = b\n    #     b = c\n    #     c = d\n    #     d = s - a - b - c\n    #     s = a + b + c + d\n    # print(s)\n    # print(a,b,c,d)\n    # using loop\n    s = 0\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    for i in range(1,k+1):\n        a = b\n        b = c\n        c = d\n        d = s - a - b - c\n        s = a + b + c + d\n    print(s)\n    print(a,b,c,d)\n    \n    # Using recursion\n    def recur(n,k):\n        if (k==0 or k==1):\n            return 1\n        if(n==k):\n            return 1\n        return recur(n-1,k-1)+recur(n-1,k)\n    s = 0\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    for i in range(1,k+1):\n        a = b\n        b = c\n        c = d\n        d = s - a - b - c\n        s = a + b + c + d\n    print(s)\n    print(a,b,c,d)\n    ",
        "num_ids": 392
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i > k:\n            sum += binomial_coeff(n,k)\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    while(k > 0):\n        product = product*(n-k+1)/(k+1)\n        n = n -1\n        k = k - 1\n    return product\n    \ndef binomial_sum(n):\n    '''\n    Write a python function to find the sum of the binomial coefficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += binomial_Coeff(n,k)\n    return product\n    \ndef Trinomial_Coeff(n,k):\n    '''\n    Write a python function to find the product of the Trinomial Co-efficients.\n    '''\n    product = 1\n    while(k > 0):\n        product = product*(n-k+1)/(k+1)\n        n = n -1\n        k = k - 1\n    return product\n    \ndef Trinomial_Sum(n):\n    '''\n    Write a python function to find the sum of the Trinomial coefficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += Trinomial_Coeff(n,k)\n    return product\n    \ndef Quadratic_sum(n):\n    '''\n    Write a python function to find the sum of the Quadratic Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += (1/(k+1))**2\n    return product\n    \ndef Quadratic_Coeff(n):\n    '''\n    Write a python function to find the product of the Quadratic Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*(1/(k+1))**2\n    return product\n    \ndef Gauss_Legendre_sum(n):\n    '''\n    Write a python function to find the sum of the Gauss-Legendre Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += 0.5*k*(k+1)\n    return product\n    \ndef Gauss_Legendre_Coeff(n):\n    '''\n    Write a python function to find the product of the Gauss-Legendre Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product = product*(0.5*k*(k+1))\n    return product\n    \ndef Polygonal_sum(n):\n    '''\n    Write a python function to find the sum of the Polygonal Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += ((1/(k+1))**2)\n    return product\n    \ndef Polygonal_Coeff(n):\n    '''\n    Write a python function to find the product of the Polygonal Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*((1/(k+1))**2)\n    return product\n    \ndef Strict_Quadratic_sum(n):\n    '''\n    Write a python function to find the sum of the Strict Quadratic Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += (1/(k+1))**2\n    return product\n    \ndef Strict_Quadratic_Coeff(n):\n    '''\n    Write a python function to find the product of the Strict Quadratic Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*(1/(k+1))**2\n    return product\n    \ndef Dyadic_sum(n):\n    '''\n    Write a python function to find the sum of the Dyadic Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += ((1/(k+1))**3)\n    return product\n    \ndef Dyadic_Coeff(n):\n    '''\n    Write a python function to find the product of the Dyadic Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*((1/(k+1))**3)\n    return product\n    \ndef Spline_Coeff(n):\n    '''\n    Write a python function to find the product of the Spline Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*(((k+1)/(2*(k**2+2*k)))**3)\n    return product\n    \ndef U_sum(n):\n    '''\n    Write a python function to find the sum of the U Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += (2*k+1)/(k**2+2*k)\n    return product\n    \ndef U_Coeff(n):\n    '''\n    Write a python function to find the product of the U Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*((2*k+1)/(k**2+2*k))\n    return product\n    \ndef N_sum(n):\n    '''\n    Write a python function to find the sum of the N Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += (2*k+1)/(k**2+2*k)\n    return product\n    \ndef N_Coeff(n):\n    '''\n    Write a python function to find the product of the N Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*(2*k+1)/(k**2+2*k)\n    return product\n    \ndef Gamma_sum(n):\n    '''\n    Write a python function to find the sum of the Gamma Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += (2*k)/(k+1)\n    return product\n    \ndef Gamma_Coeff(n):\n    '''\n    Write a python function to find the product of the Gamma Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*(2*k)/(k+1)\n    return product\n    \ndef Gamma_sum(n):\n    '''\n    Write a python function to find the sum of the Gamma Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += ((2*k)/(k+1))\n    return product\n    \ndef Gamma_Coeff(n):\n    '''\n    Write a python function to find the product of the Gamma Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*((2*k)/(k+1))\n    return product\n    \ndef Zeta_sum(n):\n    '''\n    Write a python function to find the sum of the Zeta Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += (k+1)/(k+2)\n    return product\n    \ndef Zeta_Coeff(n):\n    '''\n    Write a python function to find the product of the Zeta Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*(k+1)/(k+2)\n    return product\n    \ndef Gamma_new_sum(n):\n    '''\n    Write a python function to find the sum of the Gamma Co-efficients.\n    '''\n    product = 0\n    for k in range(n+1):\n        product += (k+1)/(k+2)\n    return product\n    \ndef Gamma_new_Coeff(n):\n    '''\n    Write a python function to find the product of the Gamma Co-efficients.\n    '''\n    product = 1\n    for k in range(n+1):\n        product = product*(k+1)/(k",
        "num_ids": 30
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    assert n > 0\n    assert k >= 0\n    # n = 4\n    # k = 2\n",
        "num_ids": 26
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.split('.')\n    for i in range(len(ip)):\n        if ip[i]=='0':\n            ip[i]=''\n        else:\n            break\n    return '.'.join(ip)\n",
        "num_ids": 59
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == 0:\n        return '0'\n    if type(ip) is not str:\n        return 0\n    else:\n        return ip.lstrip('0')\n",
        "num_ids": 44
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip = '.'.join(ip)\n    return ip\n",
        "num_ids": 27
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    res = \".\".join([str(int(x)) for x in ip.split(\".\")])\n    \n    print(res)\n    \n    return res\n",
        "num_ids": 42
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return int(ip.split('.')[0])\n",
        "num_ids": 15
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\d+(?:\\.\\d+){3}', r'\\g<1>', ip)\n",
        "num_ids": 34
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip = ''.join(ip)\n    ip = ip.lstrip('0')\n    return ip\n    \ndef remove_already_existing_ip(list_of_ips):\n    '''\n    Write a function to remove all already existing ip addresses from a list of ip addresses.\n    '''\n    list_of_ips = list(map(removezero_ip, list_of_ips))\n    return list_of_ips\n",
        "num_ids": 33
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.split(\".\")[-1]\n",
        "num_ids": 14
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    while(len(ip)>1):\n        if ip[0] == '0':\n            ip = ip[1:]\n        elif ip[0] == '.':\n            ip = ip[2:]\n        else:\n            break\n    return ip\ndef make_ip_list(ip):\n    '''\n    Write a function to make a list of ip addresses from a given ip string.\n    '''\n    ip = removezero_ip(ip)\n    ip_list = []\n    for i in range(0, len(ip), 1):\n        ip_list.append(ip[i])\n    return ip_list\ndef is_valid_ip(ip):\n    '''\n    Write a function to check whether a given ip address is valid or not.\n    '''\n    ip = removezero_ip(ip)\n    if re.match(r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\", ip):\n        return True\n    else:\n        return False\ndef is_valid_mask(mask):\n    '''\n    Write a function to check whether a given ip mask is valid or not.\n    '''\n    ip_list = make_ip_list(mask)\n    for i in range(0, len(ip_list), 1):\n        if not ip_list[i].isdigit():\n            return False\n        elif int(ip_list[i])<0 or int(ip_list[i])>255:\n            return False\n    return True\ndef get_host_mask(mask):\n    '''\n    Write a function to get the host mask from a given ip and mask.\n    '''\n    ip_list = make_ip_list(mask)\n    ip_list.reverse()\n    host_mask = ''\n    for i in range(0, len(ip_list), 1):\n        host_mask = str(host_mask) + str(ip_list[i])\n    return host_mask\ndef get_subnet_mask(mask, ip):\n    '''\n    Write a function to get the subnet mask from a given ip and mask.\n    '''\n    ip_list = make_ip_list(mask)\n    host_mask = get_host_mask(mask)\n    host_mask_list = make_ip_list(host_mask)\n    host_mask_list.reverse()\n    subnet_mask = ''\n    for i in range(0, len(ip_list), 1):\n        subnet_mask = str(subnet_mask) + str(ip_list[i])\n        for j in range(0, len(host_mask_list), 1):\n            if ip_list[i] == host_mask_list[j]:\n                subnet_mask = str(subnet_mask) + str(host_mask_list[j])\n    return subnet_mask\ndef make_binary_list(binary_ip):\n    '''\n    Write a function to make a binary list from a given binary ip.\n    '''\n    binary_ip = removezero_ip(binary_ip)\n    binary_ip_list = []\n    for i in range(0, len(binary_ip), 1):\n        if not binary_ip[i].isdigit():\n            binary_ip_list.append(binary_ip[i])\n        elif int(binary_ip[i])<0 or int(binary_ip[i])>1:\n            return False\n    return binary_ip_list\ndef get_wildcard_mask(mask):\n    '''\n    Write a function to get the wildcard mask from a given ip and mask.\n    '''\n    binary_ip_list = make_binary_list(mask)\n    wildcard_mask = ''\n    for i in range(0, len(binary_ip_list), 1):\n        if binary_ip_list[i] == '1':\n            wildcard_mask = str(wildcard_mask) + str(binary_ip_list[i])\n    return wildcard_mask\ndef get_wildcard_ip(mask, ip):\n    '''\n    Write a function to get the wildcard ip from a given ip and mask.\n    '''\n    binary_ip_list = make_binary_list(mask)\n    wildcard_ip = ''\n    for i in range(0, len(binary_ip_list), 1):\n        if binary_ip_list[i] == '1':\n            wildcard_ip = str(wildcard_ip) + str(ip[i])\n    return wildcard_ip\ndef get_subnet_id(subnet_mask, ip):\n    '''\n    Write a function to get the subnet id from a given ip and mask.\n    '''\n    binary_ip_list = make_binary_list(subnet_mask)\n    binary_ip_list.reverse()\n    subnet_id = ''\n    for i in range(0, len(binary_ip_list), 1):\n        if binary_ip_list[i] == '1':\n            subnet_id = str(subnet_id) + str(binary_ip_list[i])\n        elif binary_ip_list[i] == '0':\n            subnet_id = str(subnet_id) + str(binary_ip_list[i])\n    subnet_id = removezero_ip(subnet_id)\n    subnet_id = subnet_id + '.' + str(ip)\n    return subnet_id\ndef get_broadcast_ip(subnet_id, ip):\n    '''\n    Write a function to get the broadcast ip from a given ip and subnet id.\n    '''\n    subnet_id = removezero_ip(subnet_id)\n    ip_list = make_ip_list(ip)\n    broadcast_ip = ''\n    for i in range(0, len(ip_list), 1):\n        if ip_list[i] == '255':\n            broadcast_ip = str(broadcast_ip) + str(ip_list[i])\n        elif ip_list[i] == '254':\n            broadcast_ip = str(broadcast_ip) + str(ip_list[i])\n    broadcast_ip = str(broadcast_ip) + str(subnet_id) + '.'\n    return broadcast_ip\ndef get_subnet_id_list(subnet_mask, ip_list):\n    '''\n    Write a function to get the subnet id list from a given ip and mask.\n    '''\n    subnet_id_list = []\n    for ip in ip_list:\n        subnet_id = get_subnet_id(subnet_mask, ip)\n        subnet_id_list.append(subnet_id)\n    return subnet_id_list\ndef get_broadcast_ip_list(subnet_mask, ip_list):\n    '''\n    Write a function to get the broadcast ip list from a given ip and mask.\n    '''\n    broadcast_ip_list = []\n    for ip in ip_list:\n        broadcast_ip = get_broadcast_ip(subnet_mask, ip)\n        broadcast_ip_list.append(broadcast_ip)\n    return broadcast_ip_list\ndef make_mask_list(mask):\n    '''\n    Write a function to make a mask list from a given mask.\n    '''\n    mask = removezero_ip(mask)\n    mask_list = []\n    for i in range(0, len(mask), 1):\n        if mask[i] == '.':\n            mask_list.append(mask[i])\n    return mask_list\ndef get_cidr_list(ip_list, mask_list):\n    '''\n    Write a function to get the cidr list from a given ip and mask.\n    '''\n    cidr_list = []\n    for i in range(0, len(ip_list), 1):\n        cidr_list.append(str(ip_list[i]) + '/' + str(mask_list[i]))\n    return cidr_list\ndef make_wildcard_mask(wildcard_mask):\n    '''\n    Write a function to make a wildcard mask from a given wildcard mask.\n    '''\n    wildcard_mask = removezero_ip(wildcard_mask)\n    wildcard_mask_list = make_binary_list(wildcard",
        "num_ids": 35
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('0+', '', ip)\n",
        "num_ids": 16
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0]-list1[1]\n",
        "num_ids": 15
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if(i%2==0):\n            even+=i\n        else:\n            odd+=i\n    print(even-odd)\n    \nif __name__ == \"__main__\":\n    list1 = list(map(int, input().split()))\n    diff_even_odd(list1)",
        "num_ids": 91
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = []\n    odd_index = []\n    for i in range(len(list1)):\n        if (list1[i]%2 == 0):\n            even_index.append(i)\n        else:\n            odd_index.append(i)\n    even_index.sort()\n    odd_index.sort()\n    print(\"First even number is:\", even_index[0])\n    print(\"First odd number is:\", odd_index[0])\n",
        "num_ids": 115
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('The input must be a list')\n    else:\n        odd = None\n        even = None\n        for i in list1:\n            if i % 2 == 0:\n                even = i\n            else:\n                odd = i\n        return even - odd\n",
        "num_ids": 78
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_count = 0\n    even_count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count - odd_count\n    \n    \n    \ndef match_score(list1, list2):\n    '''\n    Write a function to find the score of an individual in a match of 2 strings.\n    '''\n    common_str = ''\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            common_str += list1[i]\n        else:\n            continue\n    return len(common_str)\n    \ndef same_string(string1, string2):\n    '''\n    Write a function to determine if two strings are the same or not.\n    '''\n    if string1 == string2:\n        return True\n    else:\n        return False\n    \ndef replace_spaces(string1):\n    '''\n    Write a function to replace all spaces in a string with '%20'.\n    '''\n    string1 = string1.replace(' ', '%20')\n    return string1\n    \ndef count_lower(string1):\n    '''\n    Write a function to count the number of lowercase characters in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i].islower():\n            count += 1\n    return count\n    \ndef count_upper(string1):\n    '''\n    Write a function to count the number of uppercase characters in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i].isupper():\n            count += 1\n    return count\n    \ndef count_digits(string1):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i].isdigit():\n            count += 1\n    return count\n    \ndef count_special_characters(string1):\n    '''\n    Write a function to count the number of special characters in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if not string1[i].isalpha():\n            if not string1[i].isdigit():\n                if not string1[i].isspace():\n                    count += 1\n    return count\n    \ndef count_words(string1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i] =='':\n            count += 1\n        else:\n            continue\n    return count\n    \ndef count_uppercase_words(string1):\n    '''\n    Write a function to count the number of uppercase words in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i].isupper():\n            count += 1\n    return count\n    \ndef count_lower_words(string1):\n    '''\n    Write a function to count the number of lowercase words in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i].islower():\n            count += 1\n    return count\n    \ndef count_words_separated_by_hyphen(string1):\n    '''\n    Write a function to count the number of words separated by hyphen in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if '-' in string1[i]:\n            count += 1\n    return count\n    \ndef count_words_separated_by_comma(string1):\n    '''\n    Write a function to count the number of words separated by comma in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if ',' in string1[i]:\n            count += 1\n    return count\n    \ndef count_words_separated_by_space(string1):\n    '''\n    Write a function to count the number of words separated by space in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if'' in string1[i]:\n            count += 1\n    return count\n    \ndef count_words_separated_by_single_quotes(string1):\n    '''\n    Write a function to count the number of words separated by single quotes in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if '\\'' in string1[i]:\n            count += 1\n    return count\n    \ndef count_words_separated_by_double_quotes(string1):\n    '''\n    Write a function to count the number of words separated by double quotes in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if '\\\"' in string1[i]:\n            count += 1\n    return count\n    \ndef count_vowels_in_string(string1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i] in 'aeiou':\n            count += 1\n    return count\n    \ndef count_consonants_in_string(string1):\n    '''\n    Write a function to count the number of consonants in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i] not in 'aeiou':\n            count += 1\n    return count\n    \ndef count_consecutive_vowels(string1):\n    '''\n    Write a function to count the number of consecutive vowels in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i] in 'aeiou' and string1[i+1] in 'aeiou':\n            count += 1\n    return count\n    \ndef count_consecutive_consonants(string1):\n    '''\n    Write a function to count the number of consecutive consonants in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i] not in 'aeiou' and string1[i+1] not in 'aeiou':\n            count += 1\n    return count\n    \ndef count_consonants_before_vowel(string1):\n    '''\n    Write a function to count the number of consonants before a vowel in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i] in 'aeiou':\n            if string1[i] in 'aeiou' and string1[i+1] not in 'aeiou':\n                count += 1\n    return count\n    \ndef count_vowels_before_consonants(string1):\n    '''\n    Write a function to count the number of vowels before consonants in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i] not in 'aeiou':\n            if string1[i] in 'aeiou' and string1[i+1] in 'aeiou':\n                count += 1\n    return count\n    \ndef count_consonant_with_vowel(string1):\n    '''\n    Write a function to count the number of consonants with a vowel in a given string.\n    '''\n    count = 0\n    for i in range(len(string1)):\n        if string1[i] not in 'aeiou':\n            if string1[i] in 'aeiou' and string1[i+1] in 'aeiou':\n                count += 1\n    return count\n    \ndef count_doubl",
        "num_ids": 80
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    print(f'{even} - {odd} = {even - odd}')\n",
        "num_ids": 76
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    list1.reverse()\n    \n    if list1[0] % 2 == 0 and list1[1] % 2 == 0:\n        return (list1[0] - list1[1])\n    elif list1[0] % 2 == 0 and list1[1] % 2!= 0:\n        return (list1[0] - list1[1])\n    elif list1[0] % 2!= 0 and list1[1] % 2 == 0:\n        return (list1[1] - list1[0])\n    elif list1[0] % 2!= 0 and list1[1] % 2!= 0:\n        return (list1[1] - list1[0])\n",
        "num_ids": 177
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    \n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    \n    return even[0] - odd[0]\n",
        "num_ids": 76
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return abs(even[0]-odd[0])\n",
        "num_ids": 73
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    result = []\n    if len(list1) == 0:\n        return result\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            result.append(list1[i] - list1[i - 1])\n        else:\n            result.append(list1[i] - list1[i - 1])\n    return result\n",
        "num_ids": 92
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def swap(n1,n2) : \n    \n        return int(str(n2)+str(n1)[1:],2)\n    \n    \n    def min_swaps(str1,str2) : \n        '''\n        The function return the minimum number of swaps required to convert one binary number represented as a string to another.\n        '''\n        \n        str1 = str1.split(\" \")\n        str2 = str2.split(\" \")\n        \n        if len(str1)!= len(str2) : \n            return -1\n        \n        n1 = int(str1[0],2)\n        n2 = int(str2[0],2)\n        \n        # print(n1,n2)\n        \n        if n1 == n2 : \n            return 0\n        \n        a = 0\n        \n        # For checking if str1 or str2 are not in the same order\n        \n        if n1 > n2 : \n            a = 1\n        \n        # If two numbers are in the same order, we need not swap them.\n        # So, we'll set the first number to be less than the second number.\n        \n        if a == 0 : \n            n1,n2 = swap(n1,n2)\n            \n        # We need to know the difference in the number of characters between str1 and str2\n        \n        chars_in_str1 = len(str1[1])\n        chars_in_str2 = len(str2[1])\n        \n        # We can use the formula to get the number of swaps required.\n        \n        # We'll count all the swaps in a row.\n        \n        count = 0\n        \n        for i in range(1,len(str1)) : \n            # str1[i] == str2[i-1] == str1[i-1] == str2[i]\n            \n            if str1[i] == str2[i-1] : \n                count += 0\n            \n            # str1[i] == str2[i-1]!= str1[i-1] == str2[i]\n            \n            if str1[i]!= str2[i-1] : \n                count += 1\n                \n            \n        \n        # Now we'll count all the swaps in a column.\n        \n        for i in range(1,len(str2)) : \n            # str2[i] == str1[i-1] == str2[i-1] == str1[i]\n            \n            if str1[i] == str2[i-1] : \n                count += 0\n            \n            # str2[i] == str1[i-1]!= str2[i-1] == str1[i]\n            \n            if str2[i]!= str1[i-1] : \n                count += 1\n                \n        # Now we'll count all the swaps in both the rows and columns.\n        \n        for i in range(1,chars_in_str1) : \n            \n            # First, we'll check if str2[i] == str1[i] == str2[i-1] == str1[i-1]\n            \n            if str1[i] == str2[i-1] : \n                count += 0\n            \n            # If str2[i] == str1[i]!= str2[i-1] == str1[i-1]\n            \n            if str1[i]!= str2[i-1] : \n                count += 1\n                \n        # Now we'll check if str2[chars_in_str1-1] == str1[chars_in_str1-1] == str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str1[chars_in_str1-1] == str2[chars_in_str1-1] : \n            count += 0\n        \n        # If str2[chars_in_str1-1]!= str1[chars_in_str1-1]!= str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str1[chars_in_str1-1]!= str2[chars_in_str1-1] : \n            count += 1\n            \n        # Now we'll check if str2[chars_in_str1-1] == str1[chars_in_str1-1] == str2[chars_in_str1-2]!= str1[chars_in_str1-2]\n        \n        if str2[chars_in_str1-1] == str1[chars_in_str1-1] : \n            count += 0\n        \n        # If str2[chars_in_str1-1] == str1[chars_in_str1-1]!= str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str2[chars_in_str1-1]!= str1[chars_in_str1-1] : \n            count += 1\n        \n        # Now we'll check if str2[chars_in_str1-1] == str1[chars_in_str1-1]!= str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str2[chars_in_str1-1]!= str1[chars_in_str1-1] : \n            count += 1\n        \n        # Now we'll check if str2[chars_in_str1-1] == str1[chars_in_str1-1]!= str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str2[chars_in_str1-1]!= str1[chars_in_str1-1] : \n            count += 1\n        \n        # Now we'll check if str2[chars_in_str1-1] == str1[chars_in_str1-1] == str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str2[chars_in_str1-1] == str1[chars_in_str1-1] : \n            count += 0\n        \n        # If str2[chars_in_str1-1] == str1[chars_in_str1-1] == str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str2[chars_in_str1-1] == str1[chars_in_str1-1] : \n            count += 1\n        \n        # Now we'll check if str2[chars_in_str1-1] == str1[chars_in_str1-1]!= str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str2[chars_in_str1-1]!= str1[chars_in_str1-1] : \n            count += 1\n        \n        # If str2[chars_in_str1-1] == str1[chars_in_str1-1]!= str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str2[chars_in_str1-1]!= str1[chars_in_str1-1] : \n            count += 1\n        \n        # Now we'll check if str2[chars_in_str1-1] == str1[chars_in_str1-1]!= str2[chars_in_str1-2] == str1[chars_in_str1-2]\n        \n        if str2[chars_in_str1-1]!= str1[chars_in_str1-1] : \n            count += 1\n        \n        # Now we'll check if str2[chars_in_str1-1] == str1[chars_in",
        "num_ids": 1937
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Converting the strings to ints\n    n1 = int(str1,2)\n    n2 = int(str2,2)\n    # Traversing the binary numbers\n    count = 0\n    for i in range(len(str1)) :\n        # Checking if they are equal\n        if(n1 & (1<<i)) == (n2 & (1<<i)) :\n            continue\n        # If not then update the count\n        else :\n            count+=1\n    return count\n",
        "num_ids": 119
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    j = 0\n    i = 0\n    diff = 0\n    count = 0\n    while j < n:\n        if str1[j]!= str2[i]:\n            count += 1\n            if str1[j] == '1' and str2[i] == '0':\n                i += 1\n            elif str1[j] == '0' and str2[i] == '1':\n                i += 1\n        j += 1\n",
        "num_ids": 118
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # your code here\n    a = str1\n    b = str2\n    m=len(a)\n    n=len(b)\n    swap = 0\n    for i in range(0,m):\n        for j in range(0,n):\n            if a[i] == b[j]:\n                break\n        if j == n-1:\n            swap += 1\n            \n    return swap\n    \n    ",
        "num_ids": 103
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # using hashtable\n    # time: O(n)\n    # space:O(n)\n    # count = 0\n    # for i in range(len(str1)) :\n    #     if str1[i]!= str2[i] :\n    #         str1, str2 = str2, str1\n    #         count += 1\n    # return count\n",
        "num_ids": 91
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    dic1={}\n    dic2={}\n    for i in range(len(str1)) : \n        if str1[i] not in dic1 : \n            dic1[str1[i]] = i\n        if str2[i] not in dic2 : \n            dic2[str2[i]] = i\n    swaps = 0\n    for key in dic1: \n        if key!= dic2[key]: \n            dic2[key], dic1[key] = dic1[key], dic2[key] \n            swaps += 1\n    return swaps\n",
        "num_ids": 153
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    str1 = list(str1)\n    str2 = list(str2)\n    n = len(str1)\n    k = len(str2)\n    \n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n            #Swap the elements\n            temp = str1[i]\n            str1[i] = str2[i]\n            str2[i] = temp\n            \n    return count\n",
        "num_ids": 120
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Your code here\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            swaps += 1\n            if str1[i] == '0' and str2[i] == '1':\n                str1 = str1[:i] + '1' + str1[i+1:]\n            elif str1[i] == '1' and str2[i] == '0':\n                str1 = str1[:i] + '0' + str1[i+1:]\n    return swaps\n    \nif __name__ == '__main__':\n    str1 = '10101'\n    str2 = '10101'\n    print(min_Swaps(str1,str2))\n",
        "num_ids": 189
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            str2 = swap(str2,i)\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # your code here\n    \n    if str1 == str2 : return 0\n    \n    arr1 = list(str1)\n    arr2 = list(str2)\n    \n    # to keep track of what is being swapped\n    swaps = 0\n    \n    # for each element in arr1\n    for i in range(len(arr1)) : \n        \n        # if current element is different \n        # from the current element in arr2\n        # update swaps\n        if arr1[i]!= arr2[i] : \n            swaps += 1\n            \n            # swap current element of arr1 with \n            # the next element from the end in arr1\n            temp = arr1[i]\n            arr1[i] = arr1[i+1]\n            arr1[i+1] = temp\n            \n    return swaps\n    \n    ",
        "num_ids": 205
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if tuple_list == tuple():\n        return 0\n    return sys.getsizeof(tuple_list[0]) + tuple_size(tuple_list[1:])\n",
        "num_ids": 44
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    counter = 0\n    for i in range(len(tuple_list)):\n        counter += sys.getsizeof(tuple_list[i])\n    return counter\n",
        "num_ids": 43
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    #print(type(size))\n    return size\n",
        "num_ids": 30
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # size_ = 0\n    # for x in range(len(tuple_list)):\n    #     size_ += sys.getsizeof(tuple_list[x])\n    size_ = sys.getsizeof(tuple_list)\n    return size_\n",
        "num_ids": 66
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # \uc544\ub798\uc640 \uac19\uc774 \uc791\uc131\ud558\uc2dc\uc624.\n    return sum(list(map(lambda x: x.__sizeof__(), tuple_list)))\n",
        "num_ids": 58
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if type(tuple_list)!= list or len(tuple_list) == 0:\n        raise Exception(\"Invalid parameter type. Please provide a list of tuples\")\n    for t in tuple_list:\n        if type(t)!= tuple:\n            raise Exception(\"Invalid parameter type. Please provide a list of tuples\")\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 92
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # the number of bytes of the tuple, which is a list.\n    size = 0\n    # looping through the tuple list and adding the size of each element to the size.\n    for value in tuple_list:\n        size = size + sys.getsizeof(value)\n    # returning the size.\n    return size\n",
        "num_ids": 77
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)*sys.getsizeof(tuple_list[0])\n",
        "num_ids": 25
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # your code here\n    #get list of strings\n    length=0\n    #get index of first item\n    first_item_index=len(tuple_list)-1\n    #traverse to the second item in tuple\n    for i in range(len(tuple_list)-1):\n        #increment length if item is non-empty\n        if len(tuple_list[i]) >0:\n            length+=sys.getsizeof(tuple_list[i])\n    #add final item\n    length+=sys.getsizeof(tuple_list[first_item_index])\n    return length\n",
        "num_ids": 146
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # N = len(arr1)\n    # M = len(arr2)\n    # i = 0\n    # j = 0\n    #\n    # while i < N and j < M:\n    #     if arr1[i] < arr2[j]:\n    #         i += 1\n    #     elif arr1[i] > arr2[j]:\n    #         j += 1\n    #     else:\n    #         print(arr1[i], \" \", arr2[j])\n    #         i += 1\n    #         j += 1\n    #         if i >= N:\n    #             return arr2[j]\n    #         if j >= M:\n    #             return arr1[i]\n    # return -1\n",
        "num_ids": 178
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    while len(arr1)!= 0 and len(arr2)!= 0:\n        if arr1[0] > arr2[0]:\n            arr1.append(arr1[0])\n            arr1.pop(0)\n        else:\n            arr2.append(arr2[0])\n            arr2.pop(0)\n",
        "num_ids": 81
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    if j == len(arr2):\n        return arr1[i]\n    else:\n        return arr2[j]\n",
        "num_ids": 90
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n",
        "num_ids": 20
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    n = len(arr1)\n    m = len(arr2)\n    \n    # a little trick. If we have same length of two arrays, we can just compare them directly.\n    if n == m:\n        return comp(arr1, arr2, n)\n    \n    # find a pivot which divides both arr1 and arr2\n    # p_1 = n // 2\n    # p_2 = m // 2\n    p = n // 2\n    \n    # if p_1 == p_2, then we want to find kth element in arr2\n    # else, we want to find kth element in arr1\n    # so, we first find pivot and then do recursion\n    if n % 2 == 0:\n        p_1 = p - 1\n        p_2 = p\n    else:\n        p_1 = p\n        p_2 = p + 1\n    \n    # comp\n    def comp(arr1, arr2, n):\n        '''\n        Compares kth element from arr2 to kth element from arr1\n        '''\n        if n == 0:\n            return False\n        \n        if arr1[p_1] < arr2[p_2]:\n            return comp(arr1, arr2[p_2+1:], n)\n        elif arr1[p_1] > arr2[p_2]:\n            return comp(arr1[p_1+1:], arr2, n-1)\n        else:\n            return True\n    \n    if k == 0 or k == n:\n        return False\n    \n    if k < m:\n        return comp(arr1, arr2, k)\n    else:\n        return comp(arr1, arr2[p_2+1:], k-m)\n",
        "num_ids": 167
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = 0\n    p2 = len(arr2) - 1\n    \n    while p1 <= p2:\n        mid = (p1 + p2) // 2\n        if arr1[mid] < arr2[mid]:\n            p1 = mid + 1\n        elif arr1[mid] > arr2[mid]:\n            p2 = mid - 1\n        else:\n            return arr1[mid]\n    \n    return -1\n",
        "num_ids": 108
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l = len(arr1)\n    m = len(arr2)\n    if l > m:\n        l, m = m, l\n    \n    if k > m:\n        if k >= (l + m):\n            return arr2[m-1]\n        k = k - (l + m) + m\n        i = m - 1\n        while i >= 0 and arr2[i] > arr2[i + m]:\n            i = i - 1\n        if i < 0:\n            return -1\n        j = m - 1\n        while j >= 0 and arr1[i + j] < arr1[i]:\n            j = j - 1\n        return arr2[i + j + 1]\n    else:\n        i = 0\n        j = 0\n        while i < l and j < m:\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n        if i == l:\n            return arr2[j]\n        else:\n            return arr1[i]\n",
        "num_ids": 250
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1 = 0\n    idx2 = 0\n    s = 0\n    while s < k:\n        if arr1[idx1] < arr2[idx2]:\n            s = s + 1\n            idx1 = idx1 + 1\n        elif arr1[idx1] > arr2[idx2]:\n            s = s + 1\n            idx2 = idx2 + 1\n        else:\n            return arr1[idx1]\n    return -1\n    ",
        "num_ids": 121
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while True:\n        if n1 > n2:\n            arr1, arr2 = arr2, arr1\n            n1, n2 = n2, n1\n        if n2 == 0:\n            break\n        p1 = arr1[n1-1]\n        p2 = arr2[n2-1]\n        if p1 <= p2:\n            break\n        else:\n            n1 -= 1\n            n2 -= 1\n    if k == n1:\n        return arr1[k-1]\n    else:\n        return arr2[k-1]\n",
        "num_ids": 159
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if j < len(arr2):\n        return arr2[j]\n    else:\n        return arr1[i]\n",
        "num_ids": 87
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    str_number=str(number)\n    for i in str_number:\n        sum=sum+int(i)**len(str_number)\n    if sum==number:\n        print(\"yes\")\n    else:\n        print(\"no\")\n",
        "num_ids": 66
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum\n",
        "num_ids": 45
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    i = 0\n    while number > 0:\n        i += number % 10\n        number = number // 10\n    if i == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = 0\n    n = number\n    while n > 0:\n        digit = n % 10\n        s += digit ** 3\n        n = n // 10\n    if number == s:\n        print(f'{number} is an Armstrong Number.')\n    else:\n        print(f'{number} is not an Armstrong Number.')\n",
        "num_ids": 82
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    string = str(number)\n    for i in string:\n        sum += (int(i) ** len(string))\n    if number == sum:\n        print(\"{} is an armstrong number\".format(number))\n    else:\n        print(\"{} is not an armstrong number\".format(number))\n",
        "num_ids": 80
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #https://www.programiz.com/python-programming/methods/string/format\n    digits = [int(i) for i in str(number)]\n    s = 0\n    while(len(digits) > 0):\n        s += digits[0] ** len(digits)\n        del digits[0]\n    return s == number\n",
        "num_ids": 86
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num = num // 10\n    if sum == number:\n        print(number, \"is an armstrong number\")\n    else:\n        print(number, \"is not an armstrong number\")\n    return\n",
        "num_ids": 81
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_num = str(number)\n    str_num_len = len(str_num)\n    if str_num_len == 1:\n        return True\n    elif str_num_len == 2:\n        first_num = int(str_num[0])\n        second_num = int(str_num[1])\n        return first_num**4 + second_num**4 == number\n    else:\n        for i in range(str_num_len):\n            temp_num = int(str_num[i])\n            if temp_num**4!= number:\n                return False\n        return True\n",
        "num_ids": 148
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = 0\n    temp = number\n    while temp > 0:\n        d = temp % 10\n        s += d ** 3\n        temp //= 10\n",
        "num_ids": 39
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    tmp=number\n    while tmp>0:\n        digit=tmp%10\n        tmp=tmp//10\n        sum=sum+(digit**3)\n    if number==sum:\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    if number > 0:\n        for i in range(number):\n            sum += i\n            average = sum/number\n        print('Sum : ', sum)\n        print('Average : ', average)\n    else:\n        print('Please enter a positive integer')\n",
        "num_ids": 72
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        return 0\n    s = 0\n    for i in range(number+1):\n        s += i\n    return s / number\n",
        "num_ids": 40
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    sum_number = 0\n    average_number = 0\n    \n    for i in range(1,number + 1):\n        sum_number += i\n    \n    average_number = sum_number/number\n    \n    return sum_number, average_number\n    \n",
        "num_ids": 67
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1, number + 1)), sum(range(1, number + 1)) / number\n    \ndef print_list(l):\n    '''\n    Write a function print_list that takes a list l as an argument and prints it.\n    '''\n    for item in l:\n        print(item)\n",
        "num_ids": 15
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    sum = 0\n    for i in range(n):\n        sum = sum + i\n    avg = sum/n\n    return(sum, avg)\n",
        "num_ids": 44
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,number+1):\n        s = s + i\n    avg = s/number\n    return s,avg\n",
        "num_ids": 42
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < number:\n        sum += count\n        count += 1\n    print(f\"Sum of {number} natural numbers is: {sum}\")\n    print(f\"Average of {number} natural numbers is: {sum / number}\")\n",
        "num_ids": 69
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    average = 0\n    for i in range(number):\n        total += i\n        average = total / (i + 1)\n    print(f'Sum = {total}')\n    print(f'Average = {average}')\n",
        "num_ids": 61
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #number = int(input('Enter the number of natural numbers: '))\n    #s = 0\n    #a = 0\n    #for i in range(1,number+1):\n        #s = s + i\n        #a = a + 1\n    #print('The sum of numbers is {} and the average of numbers is {}.'.format(s, a/number))\n    return s, a/number\n    \ndef power(base,exponent):\n    '''\n    Write a function to calculate base raised to exponent.\n    '''\n    #base = float(input('Enter the base: '))\n    #exponent = int(input('Enter the exponent: '))\n    #result = 1\n    #for i in range(0,exponent):\n        #result = result * base\n    #print('The power of {} to the power of {} is {}.'.format(base, exponent, result))\n    return base**exponent\n",
        "num_ids": 93
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    pass\n    # complete the function\n",
        "num_ids": 11
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) : \n        return True \n    return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True \n    else: \n        return False\n",
        "num_ids": 26
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #print(n, \"is even number\")\n    #return n%2==0\n    return n%2==0\n",
        "num_ids": 31
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 ==0\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    return n%2!=0\ndef is_Prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1 :\n        return False\n    if n == 2 or n == 3 :\n        return True\n    if n > 2 and n%2 == 0:\n        return False\n    for i in range(3, n):\n        if n%i == 0 :\n            return False\n    return True\ndef is_Prime2(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1))\ndef is_Prime3(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n))\ndef is_Prime4(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0\ndef is_Prime5(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0\ndef is_Prime6(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0\ndef is_Prime7(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0\ndef is_Prime8(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0\ndef is_Prime9(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0 and n%17==0\ndef is_Prime10(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0 and n%17==0 and n%19==0\ndef is_Prime11(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0 and n%17==0 and n%19==0 and n%23==0\ndef is_Prime12(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0 and n%17==0 and n%19==0 and n%23==0 and n%29==0\ndef is_Prime13(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0 and n%17==0 and n%19==0 and n%23==0 and n%29==0 and n%31==0\ndef is_Prime14(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0 and n%17==0 and n%19==0 and n%23==0 and n%29==0 and n%31==0 and n%37==0\ndef is_Prime15(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0 and n%17==0 and n%19==0 and n%23==0 and n%29==0 and n%31==0 and n%37==0 and n%41==0\ndef is_Prime16(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0 and n%17==0 and n%19==0 and n%23==0 and n%29==0 and n%31==0 and n%37==0 and n%41==0 and n%43==0\ndef is_Prime17(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3==0 and n%5==0 and n%7==0 and n%11==0 and n%13==0 and n%17==0 and n%19==0 and n%23==0 and n%29==0 and n%31==0 and n%37==0 and n%41==0 and n%43==0 and n%47==0\ndef is_Prime18(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    import math\n    return n>=2 and not(n & (n-1)) and math.sqrt(n)==int(math.sqrt(n)) and n%3=",
        "num_ids": 45
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n    \ndef is_Odd(n) :\n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    return n % 2!= 0\n    \ndef is_prime(n) :\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 :\n        for i in range(2,n) :\n            if n % i == 0 :\n                return False\n                break\n            return True\n    else :\n        return False\n        \ndef is_Fact(n) :\n    '''\n    Write a python function to check whether the given number is factor or not.\n    '''\n    if n > 1 :\n        for i in range(2,n) :\n            if n % i == 0 :\n                return False\n                break\n        return True\n        \ndef is_PrimeFact(n) :\n    '''\n    Write a python function to check whether the given number is prime factor or not.\n    '''\n    if n > 1 :\n        for i in range(2,n) :\n            if n % i == 0 :\n                return False\n                break\n        return True\n        \ndef is_Perfect(n) :\n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    return n == sum(range(1,n))\n    \ndef is_Palindrome(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    n = str(n)\n    return n == n[::-1]\n    \ndef is_Mirror(n) :\n    '''\n    Write a python function to check whether the given number is mirror or not.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef is_Harshad(n) :\n    '''\n    Write a python function to check whether the given number is harshad or not.\n    '''\n    n = str(n)\n    if len(n) == 2 :\n        return n[0] == n[1] and n[1] == n[0]\n    if len(n) == 1 :\n        return n[0] == n[0]\n    if len(n) == 3 :\n        return n[0] == n[1] and n[0] == n[2] and n[1] == n[2]\n    if len(n) == 4 :\n        return n[0] == n[1] and n[1] == n[3] and n[2] == n[3] and n[0] == n[2]\n        \ndef is_Palindrome_Using_Stack(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if n == 0 :\n        return True\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[-1]!= s[0] :\n            return False\n        s.pop()\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Queue(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n            return False\n        s.pop(0)\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Stack_Using_Queue(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n            return False\n        s.pop(0)\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Queue_Using_Stack(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n            return False\n        s.pop(0)\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Queue_Using_Queue(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n            return False\n        s.pop(0)\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Stack_Using_Stack(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n            return False\n        s.pop(0)\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Stack_Using_Stack_Using_Stack(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n            return False\n        s.pop(0)\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Queue_Using_Queue_Using_Queue(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n            return False\n        s.pop(0)\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Queue_Using_Queue_Using_Queue_Using_Queue(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n            return False\n        s.pop(0)\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Queue_Using_Queue_Using_Queue_Using_Queue_Using_Queue(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n            return False\n        s.pop(0)\n        s.pop()\n    return True\n    \ndef is_Palindrome_Using_Stack_Using_Stack_Using_Stack_Using_Stack(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s = []\n    while n > 0 :\n        s.append(n % 10)\n        n = n // 10\n    while len(s) > 1 :\n        if s[0]!= s[-1] :\n        ",
        "num_ids": 57
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)-1):\n            if str1[i] == str1[j+1]:\n                return str1[i]\n    else:\n        return \"Not found\"\n",
        "num_ids": 64
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Check for none type\n    if str1 is None:\n        print(\"None String\")\n",
        "num_ids": 24
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict_char = {}\n    for i in range(len(str1)):\n        if str1[i] in dict_char:\n            dict_char[str1[i]]+=1\n        else:\n            dict_char[str1[i]]=1\n    for i in dict_char:\n        if dict_char[i]>1:\n            print(i)\n            return\n",
        "num_ids": 95
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = ''\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            repeated_char = str1[i]\n            break\n    return repeated_char\n    \ndef single_byte_xor(message, key):\n    '''\n    Write a python function to perform a XOR of a message and a given key.\n    '''\n    xored_message = ''\n    for i in range(len(message)):\n        xored_message += chr(ord(message[i]) ^ ord(key[i]))\n    return xored_message\n    \ndef reverse_words_in_string(str1):\n    '''\n    Write a python function to reverse words in a given string.\n    '''\n    words = str1.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)\n",
        "num_ids": 37
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if not str1: return None\n    str1 = list(str1)\n    \n    for i in range(0, len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return None\n",
        "num_ids": 67
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Your code here\n    str1=str1.lower()\n    final=str1.split(' ')\n    final=list(filter(None,final))\n    str2=\"\"\n    for i in final:\n        if final.count(i)>1:\n            str2+=str(i)\n            str2+=str(final.count(i))\n            str2+=str(' ')\n    return str2\n        \n        \n",
        "num_ids": 105
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    f = {}\n    for i in str1:\n        if i in f.keys():\n            return i\n        else:\n            f[i]=0\n",
        "num_ids": 39
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    try:\n        str1 = str1.lower()\n        d = {}\n        for i in range(0, len(str1)):\n            if str1[i] in d:\n                return str1[i]\n            else:\n                d[str1[i]] = 1\n    except:\n        return -1\n",
        "num_ids": 81
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    cnt = 0\n    str1 = str1.lower()\n    for i in str1:\n        if str1.count(i) > 1:\n            cnt += 1\n            break\n    if cnt == 0:\n        return -1\n    return str1.index(str1[0])\n",
        "num_ids": 74
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if not str1:\n        return -1\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return i\n    return -1\n",
        "num_ids": 62
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_ludicrous(number):\n        '''\n        Recursive function. Takes the current number and finds all the lunidic numbers that are less than it.\n        '''\n        if number <= 0:\n            return []\n        elif number <= 3:\n            return [number]\n        else:\n            return get_ludicrous(number - 1) + get_ludicrous(number - 2) + get_ludicrous(number - 3)\n",
        "num_ids": 63
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        if (i%7==0 or i%2==0) and i%5!=0:\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 57
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(i for i in range(1,n) if is_ludic(i))\n",
        "num_ids": 25
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(filter(lucid, range(1, n)))\n",
        "num_ids": 19
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        d = i * i * i\n        s = str(i)\n        if str(i) == s and (d <= n):\n            ludic.append(i)\n        if str(i)!= s and (d <= n):\n            ludic.append(i)\n    return lidic\n",
        "num_ids": 91
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(n):\n        ludic = 0\n        for j in range(i):\n            ludic += j\n        if ludic == i:\n            ludics.append(i)\n    return ludics\n",
        "num_ids": 63
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lid=[]\n    for i in range(n):\n        if(i**2+2*i+3*(i**2)+2*i**3+i**2==n):\n            lid.append(i)\n    return lid\n",
        "num_ids": 61
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n+1):\n        count = 0\n        for j in str(i):\n            if j == '4':\n                count += 1\n        if count == 2:\n            l.append(i)\n    return l\n",
        "num_ids": 66
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        return []\n    s = set()\n    s.add(n)\n    while n >= 2:\n        if n%2 == 0:\n            n = n/2\n        else:\n            n = 3*n+1\n        if n in s:\n            return s\n        s.add(n)\n",
        "num_ids": 82
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(n):\n        while n >= 0:\n            if (n%2 == 0) or (n%3 == 0) or (n%5 == 0):\n                return True\n            else:\n                n = n - 1\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.replace(' ', '').split()[::-1]\n",
        "num_ids": 19
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    s = s[::-1]\n    s = \" \".join(s)\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_string = s.split()\n    new_string.reverse()\n    return \" \".join(new_string)\n",
        "num_ids": 31
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    words = words[::-1]\n    result =''.join(words)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word = \"\"\n    for i in s.split():\n        word += i[::-1]\n    return word\n",
        "num_ids": 30
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # return s[::-1].split()\n    return''.join(reversed(s.split()))\n",
        "num_ids": 29
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    #reverse list\n    s.reverse()\n    return''.join(s)\n",
        "num_ids": 31
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    words.reverse()\n    return \" \".join(words)\n",
        "num_ids": 27
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    s = s[::-1]\n    return''.join(s)\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    is_prime = True\n    for i in range(2, num):\n        if num % i == 0:\n            is_prime = False\n            break\n    return is_prime\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    import math\n    if (num < 2):\n        return False\n    elif (num == 2):\n        return True\n    elif (num > 2 and num % 2 == 0):\n        return False\n    else:\n        for i in range(3, int(math.sqrt(num) + 1), 2):\n            if (num % i == 0):\n                return False\n        return True\n",
        "num_ids": 95
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num//2+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num,\"is not a prime number\")\n                break\n        else:\n            print(num,\"is a prime number\")\n    else:\n        print(num,\"is not a prime number\")\n        \nprime_num(7)\n",
        "num_ids": 86
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_1(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_2(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_3(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_4(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_5(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_6(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_7(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_8(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_9(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_10(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_11(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_12(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_13(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_14(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_15(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_16(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_17(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_18(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_19(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_20(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_21(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_22(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_23(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_24(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_25(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_26(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_27(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_28(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_29(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_30(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_31(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_32(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_33(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_34(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_35(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_36(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_37(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_38(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_39(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_40(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_41(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_42(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_43(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\ndef radian_degree_44(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_45(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180.0 / math.pi\ndef radian_degree_46(degree):\n    '''",
        "num_ids": 1
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree*math.pi/180\n    return radians\ndef radian_degree_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degrees = radians*180/math.pi\n    return degrees\ndef h_k_fun(time_step,l,d):\n    '''\n    Write a function to calculate the height, k, \n    of the rocket.\n    '''\n    return (l/2)*(1-math.cos(math.radians(time_step*d)))\ndef v_k_fun(time_step,l,d):\n    '''\n    Write a function to calculate the velocity, k, \n    of the rocket.\n    '''\n    return (l/2)*(math.sin(math.radians(time_step*d)))\ndef velocity_fun(time_step,l,d):\n    '''\n    Write a function to calculate the velocity of the rocket \n    in the y direction.\n    '''\n    v = v_k_fun(time_step,l,d)\n    return v\ndef distance_fun(time_step,l,d):\n    '''\n    Write a function to calculate the distance of the rocket \n    in the x direction.\n    '''\n    d = d\n    a = h_k_fun(time_step,l,d)\n    return a\ndef angle_fun(time_step,l,d):\n    '''\n    Write a function to calculate the angle of the rocket \n    in the y direction.\n    '''\n    angle = radian_degree(time_step*d)\n    return angle\ndef energy_fun(time_step,l,d):\n    '''\n    Write a function to calculate the energy of the rocket.\n    '''\n    h = h_k_fun(time_step,l,d)\n    v = v_k_fun(time_step,l,d)\n    e = (1/2)*(h**2 + v**2)\n    return e\ndef mass_fun(time_step,l,d):\n    '''\n    Write a function to calculate the mass of the rocket.\n    '''\n    e = energy_fun(time_step,l,d)\n    m = (e*(l/2))/(2*math.pi)\n    return m\ndef impulse_fun(l,d):\n    '''\n    Write a function to calculate the impulse\n    of the rocket.\n    '''\n    imp = (h_k_fun(0,l,d)/math.sin(math.radians(d/2)))\n    return imp\ndef final_impulse_fun(time_step,l,d):\n    '''\n    Write a function to calculate the final impulse\n    of the rocket.\n    '''\n    imp = impulse_fun(l,d)\n    final = imp*time_step\n    return final\ndef acceleration_fun(imp_final,l,d):\n    '''\n    Write a function to calculate the final acceleration\n    of the rocket.\n    '''\n    a = (imp_final/(l/2))\n    return a\ndef final_acceleration_fun(time_step,l,d):\n    '''\n    Write a function to calculate the final acceleration \n    of the rocket.\n    '''\n    imp = impulse_fun(l,d)\n    final = acceleration_fun(imp,l,d)\n    final_acceleration = final*time_step\n    return final_acceleration\ndef final_angle_fun(angle,final_acceleration):\n    '''\n    Write a function to calculate the final angle of the rocket.\n    '''\n    final_angle = angle + final_acceleration\n    return final_angle\ndef final_angle_min(final_angle,l):\n    '''\n    Write a function to calculate the final minimum angle \n    of the rocket.\n    '''\n    final_angle = final_angle\n    final_angle_min = final_angle*math.sin(math.radians(l/2))\n    return final_angle_min\ndef final_angle_max(final_angle,l):\n    '''\n    Write a function to calculate the final maximum angle \n    of the rocket.\n    '''\n    final_angle = final_angle\n    final_angle_max = final_angle*math.cos(math.radians(l/2))\n    return final_angle_max\ndef change_x_fun(l,d,a):\n    '''\n    Write a function to calculate the change in x direction.\n    '''\n    change = l/2*(math.cos(math.radians(d))+math.cos(math.radians(d+a)))\n    return change\ndef change_y_fun(l,d,a):\n    '''\n    Write a function to calculate the change in y direction.\n    '''\n    change = l/2*(math.sin(math.radians(d))+math.sin(math.radians(d+a)))\n    return change\ndef velocity_y_fun(time_step,l,d):\n    '''\n    Write a function to calculate the change in y direction.\n    '''\n    v = v_k_fun(time_step,l,d)\n    y_change = v*time_step\n    return y_change\ndef final_velocity_y_fun(final_angle_max,l,d):\n    '''\n    Write a function to calculate the final change in y direction.\n    '''\n    final_angle = final_angle_max\n    final_velocity = v_k_fun(0,l,d)\n    final_velocity_y = (final_velocity*math.sin(math.radians(final_angle)))\n    return final_velocity_y\ndef final_velocity_x_fun(final_angle_min,l,d):\n    '''\n    Write a function to calculate the final change in x direction.\n    '''\n    final_angle = final_angle_min\n    final_velocity = v_k_fun(0,l,d)\n    final_velocity_x = (final_velocity*math.cos(math.radians(final_angle)))\n    return final_velocity_x\ndef final_velocity_z_fun(final_angle,final_velocity_y):\n    '''\n    Write a function to calculate the final change in z direction.\n    '''\n    final_velocity_z = final_velocity_y*math.sin(math.radians(final_angle))\n    return final_velocity_z\ndef final_velocity_x_fun(final_angle_min,l,d):\n    '''\n    Write a function to calculate the final change in x direction.\n    '''\n    final_angle = final_angle_min\n    final_velocity = v_k_fun(0,l,d)\n    final_velocity_x = (final_velocity*math.cos(math.radians(final_angle)))\n    return final_velocity_x\ndef final_velocity_z_fun(final_angle,final_velocity_x):\n    '''\n    Write a function to calculate the final change in z direction.\n    '''\n    final_velocity_z = final_velocity_x*math.sin(math.radians(final_angle))\n    return final_velocity_z\ndef final_angle_min_fun(final_angle_min,l):\n    '''\n    Write a function to calculate the final minimum angle \n    of the rocket.\n    '''\n    final_angle_min = final_angle_min\n    final_angle_min_min = final_angle_min*math.sin(math.radians(l/2))\n    return final_angle_min_min\ndef final_angle_max_fun(final_angle_max,l):\n    '''\n    Write a function to calculate the final maximum angle \n    of the rocket.\n    '''\n    final_angle_max = final_angle_max\n    final_angle_max_max = final_angle_max*math.cos(math.radians(l/2))\n    return final_angle_max_max\ndef time_step_fun(time_step,l,d):\n    '''\n    Write a function to calculate the time step of the rocket.\n    '''\n    time_step = time_step\n",
        "num_ids": 11
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n",
        "num_ids": 17
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef circle_area(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius * radius\ndef circle_circumference(radius):\n    '''\n    Write a function to calculate the circumference of a circle.\n    '''\n    return 2 * math.pi * radius\ndef calculate_area_and_circumference(radius, angle):\n    '''\n    Write a function to calculate the area and circumference of a circle.\n    '''\n    radian = radian_degree(angle)\n    return circle_area(radius) * circle_circumference(radius)\ndef compare(a, b):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return a < b\ndef is_prime(number):\n    '''\n    Write a function to determine whether a number is prime.\n    '''\n    if number == 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\ndef find_prime_factors(number):\n    '''\n    Write a function to find prime factors of a number.\n    '''\n    return []\ndef find_smallest_prime_factor(number):\n    '''\n    Write a function to find the smallest prime factor of a number.\n    '''\n    return []\ndef find_smallest_prime_factor2(number):\n    '''\n    Write a function to find the smallest prime factor of a number.\n    '''\n    if number == 1:\n        return 1\n    i = 2\n    while i * i <= number:\n        if number % i == 0:\n            return i\n        i = i + 1\n    return number\ndef find_longest_common_prefix(str1, str2):\n    '''\n    Write a function to find the longest common prefix.\n    '''\n    if str1 == str2:\n        return 0\n    for i in range(min(len(str1), len(str2))):\n        if str1[i]!= str2[i]:\n            return str1[:i]\n    return str1[:len(str1)]\ndef remove_duplicates(str1):\n    '''\n    Write a function to remove duplicates from a given string.\n    '''\n    str1_set = set()\n    for i in str1:\n        if i not in str1_set:\n            str1_set.add(i)\n    return str(str1_set)\ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(str1.split())\ndef count_words_2(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    if str1 == \"\":\n        return 0\n    elif str1 == \" \":\n        return 1\n    elif str1 == \"   \":\n        return 2\n    elif str1 == \"  \":\n        return 3\n    elif str1 == \" \":\n        return 4\n    elif str1 == \"   \":\n        return 5\n    elif str1 == \"  \":\n        return 6\n    elif str1 == \"   \":\n        return 7\n    else:\n        return 8\ndef count_words_3(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    if str1 == \"\":\n        return 0\n    elif str1 == \" \":\n        return 1\n    elif str1 == \"   \":\n        return 2\n    elif str1 == \"  \":\n        return 3\n    elif str1 == \" \":\n        return 4\n    elif str1 == \"   \":\n        return 5\n    elif str1 == \"  \":\n        return 6\n    elif str1 == \"   \":\n        return 7\n    else:\n        return 8\ndef has_unique_characters(str1):\n    '''\n    Write a function to check whether a given string has all unique characters.\n    '''\n    return len(set(str1)) == len(str1)\ndef has_unique_characters_2(str1):\n    '''\n    Write a function to check whether a given string has all unique characters.\n    '''\n    if str1 == \"\":\n        return True\n    elif str1 == \" \":\n        return False\n    else:\n        return has_unique_characters_2(str1[:-1])\ndef has_unique_characters_3(str1):\n    '''\n    Write a function to check whether a given string has all unique characters.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return False\n    return True\ndef is_subsequence(str1, str2):\n    '''\n    Write a function to check whether a given string is a substring of another string.\n    '''\n    if len(str1) > len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\ndef is_subsequence_2(str1, str2):\n    '''\n    Write a function to check whether a given string is a substring of another string.\n    '''\n    if len(str1) > len(str2):\n        return False\n    for i in range(len(str2)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\ndef is_subsequence_3(str1, str2):\n    '''\n    Write a function to check whether a given string is a substring of another string.\n    '''\n    if len(str1) > len(str2):\n        return False\n    if str1 == str2:\n        return True\n    else:\n        return is_subsequence_3(str1[:-1], str2)\ndef is_subsequence_4(str1, str2):\n    '''\n    Write a function to check whether a given string is a substring of another string.\n    '''\n    if len(str1) > len(str2):\n        return False\n    if str1 == str2:\n        return True\n    else:\n        return is_subsequence_4(str1[:-1], str2)\ndef is_subsequence_5(str1, str2):\n    '''\n    Write a function to check whether a given string is a substring of another string.\n    '''\n    if len(str1) > len(str2):\n        return False\n    if str1 == str2:\n        return True\n    if str1 == \"\":\n        return True\n    if str1 == \" \":\n        return False\n    if str1 == \"   \":\n        return True\n    if str1 == \"  \":\n        return False\n    if str1 == \" \":\n        return True\n    if str1 == \"   \":\n        return False\n    if str1 == \"  \":\n        return True\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return False\n    if str1 == \"   \":\n        return False\n    if str1 == \"   \":\n        return False\n    if str1 == \"   \":\n        return False\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return False\n    if str1 == \"  \":\n        return True\n    if str1 == \"  \":\n        return False\n    if str1 == \"  \":\n        return True\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return False\n    if str1 == \"   \":\n        return False\n    if str1 == \"   \":\n        return False\n    if str1 == \"   \":\n        return False\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return False\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return True\n    if str1 == \"   \":\n        return Tru",
        "num_ids": 434
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n    \ndef test_radian_degree():\n    print('radian_degree(180)')\n    assert radian_degree(180) == math.pi\n    print('OK')\n    \ndef radian_degree_to_degrees(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\n    \ndef test_radian_degree_to_degrees():\n    print('radian_degree_to_degrees(math.pi)')\n    assert radian_degree_to_degrees(math.pi) == 180\n    print('OK')\n    \ndef degrees_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n    \ndef test_degrees_to_radian():\n    print('degrees_to_radian(180)')\n    assert degrees_to_radian(180) == math.pi\n    print('OK')\n    \ndef radians_to_degrees(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\n    \ndef test_radians_to_degrees():\n    print('radians_to_degrees(math.pi)')\n    assert radians_to_degrees(math.pi) == 180\n    print('OK')\n    \ndef get_euclidean_distance(point_a, point_b):\n    '''\n    Write a function to calculate the euclidean distance between two points.\n    '''\n    return math.sqrt((point_a[0] - point_b[0]) ** 2 + (point_a[1] - point_b[1]) ** 2)\n    \ndef test_get_euclidean_distance():\n    print('get_euclidean_distance((-1,-1),(1,1))')\n    assert get_euclidean_distance((-1,-1),(1,1)) == 2\n    print('OK')\n    \ndef get_polygon_area(points):\n    '''\n    Write a function to calculate the area of a polygon.\n    '''\n    count = len(points)\n    area = 0\n    for i in range(count):\n        a = get_euclidean_distance(points[i], points[(i + 1) % count])\n        area += a\n    return area / 2\n    \ndef test_get_polygon_area():\n    print('get_polygon_area((1,1,2,2,3,3,4,4))')\n    assert get_polygon_area((1,1,2,2,3,3,4,4)) == (1+1+2+2)*4/2\n    print('OK')\n    \ndef get_perimeter(points):\n    '''\n    Write a function to calculate the perimeter of a polygon.\n    '''\n    count = len(points)\n    perimeter = 0\n    for i in range(count):\n        a = get_euclidean_distance(points[i], points[(i + 1) % count])\n        perimeter += a\n    return perimeter + 2\n    \ndef test_get_perimeter():\n    print('get_perimeter((1,1,2,2,3,3,4,4))')\n    assert get_perimeter((1,1,2,2,3,3,4,4)) == (1+1+2+2)*2+3+3+4+4\n    print('OK')\n    \ndef get_average_of_points(points):\n    '''\n    Write a function to calculate the average of the x and y values of the points.\n    '''\n    return (sum(points) / len(points), sum(x * y for x, y in points) / len(points))\n    \ndef test_get_average_of_points():\n    print('get_average_of_points((1,2,3,4,5,6))')\n    assert get_average_of_points((1,2,3,4,5,6)) == (2+3)/3, (2+3)/3\n    print('OK')\n    \ndef get_points_on_sine(start_angle, angle_step, end_angle):\n    '''\n    Write a function to calculate the points that lie on a sine curve.\n    '''\n    points = []\n    angle = start_angle\n    while angle <= end_angle:\n        points.append((math.sin(angle), math.cos(angle)))\n        angle += angle_step\n    return points\n    \ndef test_get_points_on_sine():\n    print('get_points_on_sine(0,0.5,1)')\n    assert get_points_on_sine(0,0.5,1) == ((math.sqrt(2)/2, math.sqrt(2)/2), (math.sqrt(2)/2, -math.sqrt(2)/2))\n    print('OK')\n    \ndef get_points_on_cosine(start_angle, angle_step, end_angle):\n    '''\n    Write a function to calculate the points that lie on a cosine curve.\n    '''\n    points = []\n    angle = start_angle\n    while angle <= end_angle:\n        points.append((math.cos(angle), math.sin(angle)))\n        angle += angle_step\n    return points\n    \ndef test_get_points_on_cosine():\n    print('get_points_on_cosine(0,0.5,1)')\n    assert get_points_on_cosine(0,0.5,1) == ((-math.sqrt(2)/2, math.sqrt(2)/2), (math.sqrt(2)/2, -math.sqrt(2)/2))\n    print('OK')\n    \ndef get_points_on_tan(start_angle, angle_step, end_angle):\n    '''\n    Write a function to calculate the points that lie on a tangent curve.\n    '''\n    points = []\n    angle = start_angle\n    while angle <= end_angle:\n        points.append((math.tan(angle), math.tan(angle)))\n        angle += angle_step\n    return points\n    \ndef test_get_points_on_tan():\n    print('get_points_on_tan(0,0.5,1)')\n    assert get_points_on_tan(0,0.5,1) == ((-math.sqrt(2)/2, math.sqrt(2)/2), (math.sqrt(2)/2, -math.sqrt(2)/2))\n    print('OK')\n    \ndef get_points_on_quartic_curve(start_point, start_angle, end_angle):\n    '''\n    Write a function to calculate the points that lie on a quartic curve.\n    '''\n    points = []\n    x = start_point[0]\n    y = start_point[1]\n    angle = start_angle\n    while angle <= end_angle:\n        points.append((x+x*math.cos(angle), y+y*math.cos(angle)))\n        angle += 0.5\n    return points\n    \ndef test_get_points_on_quartic_curve():\n    print('get_points_on_quartic_curve((1,1),0,1)')\n    assert get_points_on_quartic_curve((1,1),0,1) == ((-math.sqrt(2)/2, math.sqrt(2)/2), (math.sqrt(2)/2, -math.sqrt(2)/2))\n    print('OK')\n    \ndef get_points_on_quadratic_curve(start_point, start_angle, end_angle):\n    '''\n    Write a function to calculate the points that lie on a quadratic curve.\n    '''\n    points = []\n    x = start_point[0]\n    y = start_point[1]\n    angle = start_angle\n    while angle <= end_angle:\n        points.append((x+x*math.cos(angle), y+y*math.cos(angle)))\n        angle += 0.5\n    return points\n    \ndef test_ge",
        "num_ids": 86
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    return match.group()\n",
        "num_ids": 30
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_to_match = re.compile(pattern)\n    match = pattern_to_match.search(text)\n    return (match.group(), match.start(), match.end())\n",
        "num_ids": 47
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n",
        "num_ids": 14
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n    \ndef test_find_literals():\n    assert find_literals('foo123bar', 'foo') == ('foo', 0, 3)\n    assert find_literals('xyz', 'x[0-9]+') == ('xyz', 0, 1)\n    assert find_literals('123xyz', 'x[0-9]+') == ('123', 0, 3)\n    assert find_literals('1foo123', 'x[0-9]+') == ('1foo123', 0, 6)\n    assert find_literals('foo', 'x[0-9]+') == None\n    assert find_literals('foo123bar', '123') == ('', 0, 3)\n    assert find_literals('123xyz', 'x[0-9]+') == ('', 0, 1)\n    assert find_literals('123foo', 'x[0-9]+') == ('', 0, 3)\n    assert find_literals('123foo', 'x[0-9]+') == ('', 0, 3)\n    \ndef find_tokens(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return an array of matching tokens.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    tokens = []\n    if match:\n        for token in match.groups():\n            tokens.append(token)\n    return tokens\n    \ndef test_find_tokens():\n    assert find_tokens('foo123bar', 'foo') == ['foo']\n    assert find_tokens('xyz', 'x[0-9]+') == ['x', 'y', 'z']\n    assert find_tokens('1foo123', 'x[0-9]+') == ['1', 'foo', '3']\n    assert find_tokens('1foo123', 'x[0-9]+') == ['1', 'foo', '3']\n    assert find_tokens('1foo123', 'x[0-9]+') == ['1', 'foo', '3']\n    \ndef find_all_tokens(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return a dictionary of all tokens in the form: key: group, value: number of times that group appears in the text.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    tokens = {}\n    if match:\n        for token in match.groups():\n            if token in tokens.keys():\n                tokens[token] += 1\n            else:\n                tokens[token] = 1\n    return tokens\n    \ndef test_find_all_tokens():\n    assert find_all_tokens('foo123bar', 'foo') == {'foo': 1}\n    assert find_all_tokens('xyz', 'x[0-9]+') == {'x': 2, 'y': 1, 'z': 1}\n    assert find_all_tokens('1foo123', 'x[0-9]+') == {'1': 3, 'foo': 1, '3': 1}\n    assert find_all_tokens('1foo123', 'x[0-9]+') == {'1': 3, 'foo': 1, '3': 1}\n    assert find_all_tokens('1foo123', 'x[0-9]+') == {'1': 3, 'foo': 1, '3': 1}\n    \ndef find_first_and_last_substr(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the first and last matching substring, respectively.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        first_match = match.group()\n        last_match = match.group()\n    return first_match, last_match\n    \ndef test_find_first_and_last_substr():\n    assert find_first_and_last_substr('foo123bar', 'foo') == ('foo', 'foo')\n    assert find_first_and_last_substr('xyz', 'x[0-9]+') == ('xyz', 'xyz')\n    assert find_first_and_last_substr('1foo123', 'x[0-9]+') == ('1foo', 'foo123')\n    assert find_first_and_last_substr('123foo', 'x[0-9]+') == ('123foo', 'foo')\n    \ndef find_tokens_and_first_and_last_substr(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return an array of tokens in the form: key: group, value: number of times that group appears in the text.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    tokens = []\n    if match:\n        for token in match.groups():\n            tokens.append(token)\n    first_match, last_match = find_first_and_last_substr(text, pattern)\n    tokens.append(first_match)\n    tokens.append(last_match)\n    return tokens\n    \ndef test_find_tokens_and_first_and_last_substr():\n    assert find_tokens_and_first_and_last_substr('foo123bar', 'foo') == ['foo']\n    assert find_tokens_and_first_and_last_substr('xyz', 'x[0-9]+') == ['x', 'y', 'z']\n    assert find_tokens_and_first_and_last_substr('1foo123', 'x[0-9]+') == ['1', 'foo', '3']\n    assert find_tokens_and_first_and_last_substr('1foo123', 'x[0-9]+') == ['1', 'foo', '3']\n    assert find_tokens_and_first_and_last_substr('1foo123', 'x[0-9]+') == ['1', 'foo', '3']\n    \ndef find_all_tokens_and_first_and_last_substr(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return a dictionary of all tokens in the form: key: group, value: number of times that group appears in the text.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    tokens = {}\n    if match:\n        for token in match.groups():\n            if token in tokens.keys():\n                tokens[token] += 1\n            else:\n                tokens[token] = 1\n    first_match, last_match = find_first_and_last_substr(text, pattern)\n    tokens[first_match] = 1\n    tokens[last_match] = 1\n    return tokens\n    \ndef test_find_all_tokens_and_first_and_last_substr():\n    assert find_all_tokens_and_first_and_last_substr('foo123bar', 'foo') == {'foo': 1}\n    assert find_all_tokens_and_first_and_last_substr('xyz', 'x[0-9]+') == {'x': 2, 'y': 1, 'z': 1}\n    assert find_all_tokens_and_first_and_last_substr('1foo123', 'x[0-9]+') == {'1': 3, 'foo': 1, '3': 1}\n    assert find_all_tokens_and_first_and_last_substr('1foo123', 'x[0-9]+') == {'1': 3, 'foo': 1, '3': 1}\n    assert find_all_tokens_and_first_and_last_substr('1foo123'",
        "num_ids": 368
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # match = re.search(pattern, text)\n    # return match\n    regex_pattern = re.compile(pattern)\n    match = regex_pattern.search(text)\n    if not match:\n        return None\n    return match\n",
        "num_ids": 60
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        yield match.group(), start, end\n",
        "num_ids": 50
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    list_of_literals = []\n    lit = pattern.find('^')\n    \n    if lit!= -1:\n        list_of_literals.append(lit)\n    lit = pattern.find('$')\n    if lit!= -1:\n        list_of_literals.append(lit)\n    lit = pattern.find('\\.')\n    if lit!= -1:\n        list_of_literals.append(lit)\n    lit = pattern.find('\\+')\n    if lit!= -1:\n        list_of_literals.append(lit)\n    lit = pattern.find('?')\n    if lit!= -1:\n        list_of_literals.append(lit)\n    lit = pattern.find('*')\n    if lit!= -1:\n        list_of_literals.append(lit)\n    lit = pattern.find('|')\n    if lit!= -1:\n        list_of_literals.append(lit)\n    \n    if len(list_of_literals) == 0:\n        return 0\n    \n    if len(list_of_literals) == 1:\n        start = list_of_literals[0]\n        end = list_of_literals[0]+1\n        return (text[start:end], start, end)\n    \n    else:\n        start = list_of_literals[0]\n        end = list_of_literals[0]+1\n        while end < len(text):\n            if text[end] == '\\\\':\n                end+=1\n            else:\n                break\n        return (text[start:end], start, end)\n",
        "num_ids": 400
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    indices = []\n    for match in re.finditer(pattern, text):\n        indices.append(match.span())\n",
        "num_ids": 33
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literal = re.search(pattern, text)\n    if literal:\n        return text[literal.start():literal.end()], literal.start(), literal.end()\n    else:\n        return None, None, None\n",
        "num_ids": 56
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find first match of pattern in text\n    match = re.search(pattern, text)\n    if match is not None:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -1\n",
        "num_ids": 61
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + 2\n",
        "num_ids": 63
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n<=1:\n        return 1\n    else:\n        return n*bell_Number(n-1)+1\n",
        "num_ids": 32
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bellNumber(n):\n        '''\n        till that we can count n-th bell number\n        '''\n        if n <=0:\n            return 0\n        return bellNumber(n-1) + bellNumber(n-2) + n\n    return bellNumber(n)\nbell_Number(10)",
        "num_ids": 47
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell_Number_rec(n,k): \n        if n == 1: \n            return k \n        else: \n            return (k*bell_Number_rec(n-1,k) + bell_Number_rec(n-1,k-1)) \n    return bell_Number_rec(n,1) \n",
        "num_ids": 82
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    '''\n    def bell_number(n): \n    if n == 0: \n    return 1 \n    else: \n    return n * bell_number(n - 1) \n    '''\n    #return bell_number(n-1) + bell_number(n-2)\n    a = 1\n    for i in range(n): \n        a = a * (i + 1) \n    return a \n",
        "num_ids": 55
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return bell(n)",
        "num_ids": 8
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    sum=0\n    for i in range(n):\n        sum+=i+1\n    return sum\n    \ndef count_primes(start,end):\n    '''\n    Write a python function to find the count of prime numbers in given range.\n    '''\n    count=0\n    for i in range(start,end+1):\n        prime=True\n        for j in range(2,i//2+1):\n            if i%j==0:\n                prime=False\n                break\n        if prime:\n            count+=1\n    return count\n    \ndef count_primes_optimised(start,end):\n    '''\n    Write a python function to find the count of prime numbers in given range.\n    '''\n    count=0\n    for i in range(start,end+1):\n        if i==1 or i==2 or i==3 or i==5 or i==7:\n            continue\n        for j in range(2,i//2+1):\n            if i%j==0:\n                break\n        else:\n            count+=1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = n-1\n    return n*(n+1)//2\n",
        "num_ids": 21
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = {0: 0, 1: 1}\n    \n    for i in range(2, n+1): \n        bell_numbers[i] = bell_numbers[i-1] + bell_numbers[i-2]\n    return bell_numbers[n]\n    ",
        "num_ids": 74
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L + 1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove from the end\n    return list1[:L - 1] + list1[L:]\n",
        "num_ids": 26
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print('Original list is:', list1)\n    length = len(list1)\n    k = L\n    if k < length and k >= 0:\n        new_list = list1[0:k]\n        print('New list is:', new_list)\n        list1 = new_list\n    elif k > length:\n        print('Index out of range.')\n    else:\n        print('Index should be greater than 0.')\n    return list1\n",
        "num_ids": 112
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if (len(list1) > 0):\n        \n        del list1[k - 1]\n        \n        return list1\n    else:\n        return \"List is empty\"\n",
        "num_ids": 45
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n= len(list1)\n    if n==0:\n        return None\n    else:\n        if n==1:\n            return list1[0]\n        if n==2:\n            if L==1:\n                return list1[0]\n            else:\n                return list1[1]\n        if n>2:\n            if L==1:\n                return list1[0]\n            else:\n                i=0\n                while i<n-1:\n                    if i==n-2:\n                        if L==1:\n                            return list1[i+1]\n                        else:\n                            return list1[i+2]\n                    else:\n                        i+=1\n    \n",
        "num_ids": 166
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n    \ndef remove_kth_element_v2(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i!= k:\n            list2.append(list1[i])\n    return list2\n    \ndef remove_kth_element_v3(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n    return list2\n    \ndef remove_kth_element_v4(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == 0:\n        return []\n    if k == j:\n        return list1[0:len(list1)-1]\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \n    \ndef remove_kth_element_v5(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == j:\n        return list1[0:len(list1)-1]\n    if k == 0:\n        return []\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \n    \ndef remove_kth_element_v6(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == j:\n        return list1[0:len(list1)-1]\n    if k == 0:\n        return []\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \ndef remove_kth_element_v7(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == j:\n        return list1[0:len(list1)-1]\n    if k == 0:\n        return []\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \n    \ndef remove_kth_element_v8(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == j:\n        return list1[0:len(list1)-1]\n    if k == 0:\n        return []\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \ndef remove_kth_element_v9(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == j:\n        return list1[0:len(list1)-1]\n    if k == 0:\n        return []\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \ndef remove_kth_element_v10(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == j:\n        return list1[0:len(list1)-1]\n    if k == 0:\n        return []\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \n    \ndef remove_kth_element_v11(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == j:\n        return list1[0:len(list1)-1]\n    if k == 0:\n        return []\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \ndef remove_kth_element_v12(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == j:\n        return list1[0:len(list1)-1]\n    if k == 0:\n        return []\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \ndef remove_kth_element_v13(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    i = 0\n    j = len(list1)\n    if k > j:\n        return list1\n    if k == j:\n        return list1[0:len(list1)-1]\n    if k == 0:\n        return []\n    while i < j:\n        if i!= k:\n            list2.append(list1[i])\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return list2\n    \ndef remove_kth_element_v14(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, bu",
        "num_ids": 21
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove kth element from the given list\n    # Input: 1->3->5->7->None, 1\n    # Output: 3->5->7->None\n    # Remove kth element from the list of length n and modify the list\n    '''\n    n = len(list1)\n    k = 0\n    index = 0\n    while(k!= n):\n        if list1[index] == k:\n            k += 1\n        else:\n            index += 1\n    list1.remove(list1[index])\n    '''\n    # Solution\n    '''\n    if list1[-1] == L:\n        list1 = list1[:-1]\n    else:\n        list1.pop()\n    '''\n    # A better solution\n    for i in range(n-1):\n        if list1[i]!= L:\n            list1[i] = list1[i+1]\n    list1.pop()\n    return list1\n",
        "num_ids": 58
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i == L:\n            continue\n        else:\n            list2.append(list1[i])\n    return list2\n",
        "num_ids": 52
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    list1.pop(L)\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column = []\n    for i in test_list:\n        column.append(i[N-1])\n    return max(column)\n",
        "num_ids": 35
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    assert type(test_list) == type([])\n    assert type(test_list[0]) == type([]), 'Matrix must be represented as list of lists.'\n    assert type(N) == type(1), 'N must be an integer.'\n    assert N >= 1 and N <= len(test_list), 'N must be in range 1..{}.'.format(len(test_list))\n",
        "num_ids": 95
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(max, test_list[:N]))\n",
        "num_ids": 19
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = []\n    for i in range(len(test_list)):\n        max_col.append(max(test_list[i][N-1:N+1]))\n    return max_col\n",
        "num_ids": 54
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    largest
        "num_ids": 2002
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # get the length of the lists\n    N = len(test_list)\n    # initialize max\n    max_of_nth = 0\n    # for each element in the list\n    for i in range(N):\n        # if the length of the list is N and the element is not then'th column\n        if i < N and i!= N - 1:\n            # if the element is greater than the max\n            if test_list[i] > max_of_nth:\n                # update max\n                max_of_nth = test_list[i]\n    # return the max\n    return max_of_nth\n",
        "num_ids": 151
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N <= len(test_list):\n        return max([max(x) for x in zip(*test_list)][N-1])\n    else:\n        return -1\n",
        "num_ids": 45
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        res.append(max(test_list[i]))\n    return res[N-1]\n",
        "num_ids": 45
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_n = -1\n    for i in range(len(test_list)):\n        if i == N:\n            for j in range(len(test_list[i])):\n                if max_n == -1:\n                    max_n = test_list[i][j]\n                elif test_list[i][j] > max_n:\n                    max_n = test_list[i][j]\n",
        "num_ids": 102
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][N - 1]\n    else:\n        return max_of_nth(test_list[1:], N)\n",
        "num_ids": 50
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    lst.sort()\n    for i in range(0, len(lst), 2):\n        merged_list.append(lst[i])\n    return merged_list\n    ",
        "num_ids": 54
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0][0], lst[0][1], lst[1][0], lst[1][1]]\n",
        "num_ids": 34
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    new_lst = []\n    \n    for i in lst:\n        new_lst.append([i[0],i[1]])\n        \n    return new_lst\n    \n",
        "num_ids": 51
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return lst[0][0], lst[0][1]\n    \nmerge([[1, 2], [3, 4], [5, 6]])\nmerge([[2, 3], [4, 5], [6, 7]])\n",
        "num_ids": 61
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) <= 1:\n        return lst\n    \n    return [[lst[0][0],lst[0][1]],merge(lst[1:])]\n",
        "num_ids": 49
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    \n    for i in range(len(lst)):\n        new_lst.append([lst[i][0], lst[i][1]])\n        \n    return new_lst\n    \n    \n    \n    \nmerge([[1,2],[4,3],[7,8]])",
        "num_ids": 83
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final_lst = []\n    for i in range(0,len(lst)):\n        lst_2 = lst[i]\n        lst_1 = lst[i-1]\n        final_lst.append(lst_1)\n        final_lst.append(lst_2)\n    final_lst.pop()\n    return final_lst\nprint(merge([[1,3],[2,5],[4,7]]))\nprint(merge([[1,3],[2,5],[4,7]]))\n",
        "num_ids": 135
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #initialise empty list for result\n    result = []\n    \n    #traverse through list\n    for sublist in lst:\n        #for each sublist, add first element\n        result.append(sublist[0])\n        #add second element\n        result.append(sublist[1])\n    \n    #return result list\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    m_list = []\n    for sublist in lst:\n        m_list.append(sublist[0])\n        m_list.append(sublist[1])\n    return m_list\n",
        "num_ids": 50
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in lst:\n        res.append([i[0], i[1]])\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(0,len(test_list)):\n        cummulative_sum += test_list[i]\n    print(cummulative_sum)\n",
        "num_ids": 51
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(0, len(test_list)):\n        cummulative_sum += test_list[i]\n",
        "num_ids": 41
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    for i in range(len(test_list)):\n        cummulative_sum_list.append(test_list[i]+sum(test_list[0:i]))\n    return cummulative_sum_list\n",
        "num_ids": 66
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summation = 0\n    for i in range(len(test_list)):\n        summation += test_list[i]\n    return summation\n",
        "num_ids": 40
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(0, len(test_list)):\n        sum += test_list[i]\n        print(sum)\n",
        "num_ids": 39
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # the given list:\n    #     [0,1,2,3,4,5]\n    # the cumulative sum will be:\n    #     [0,1,3,6,10,15]\n",
        "num_ids": 52
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum\n",
        "num_ids": 47
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    import numpy as np\n    return np.cumsum(test_list)\n",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return total/len(nums)\n",
        "num_ids": 39
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    avg_tuple = []\n    for i in range(len(nums)):\n        sum = sum + nums[i]\n    avg = sum/len(nums)\n    avg = (avg, avg, avg)\n    avg_tuple.append(avg)\n    return avg_tuple\n",
        "num_ids": 85
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_tuple = []\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        average_tuple.append(sum/len(nums[i]))\n    return average_tuple\n",
        "num_ids": 80
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_list = list(nums)\n    return [tup[0] / tup[1] for tup in nums_list]\n",
        "num_ids": 38
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    a = []\n    for i in range(len(nums)):\n        t = nums[i]\n        s = sum(t)\n        a.append(s/len(t))\n    return tuple(a)\n",
        "num_ids": 56
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for i in range(len(nums)):\n        if len(nums[i]) == 1:\n            tuple_list.append(nums[i][0])\n        else:\n            tuple_list.append((nums[i][0] + nums[i][1])/2)\n    return tuple_list\n",
        "num_ids": 89
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    result = list(map(lambda x: sum(x)/len(x), nums))\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        average.append(total/len(nums[i]))\n    return average\n",
        "num_ids": 71
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        nums[i] = sum(nums[i])/len(nums[i])\n        avg_list.append(nums[i])\n    return avg_list\n",
        "num_ids": 66
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # nums = tuple(map(lambda x: tuple(map(int, x)), tuple))\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n",
        "num_ids": 46
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # print('tuples test_tup1 = {}\\ntuples test_tup2 = {}'.format(test_tup1, test_tup2))\n    # print('tuples test_tup1 = {}\\ntuples test_tup2 = {}'.format(type(test_tup1), type(test_tup2)))\n    \n    if len(test_tup1)!= len(test_tup2):\n        print('lengths of tuples do not match')\n        return\n    \n    test_res = []\n    for i in range(len(test_tup1)):\n        # print('i = {}'.format(i))\n        # print('test_tup1[i] = {}'.format(test_tup1[i]))\n        # print('test_tup2[i] = {}'.format(test_tup2[i]))\n        test_res.append(test_tup1[i] % test_tup2[i])\n        # print('test_res = {}'.format(test_res))\n    \n    return tuple(test_res)\n    \n    ",
        "num_ids": 272
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        new_tup = []\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] % test_tup2[i])\n        return tuple(new_tup)\n    else:\n        raise ValueError('Your tuples must have the same length')\n",
        "num_ids": 101
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        if len(test_tup1)!= len(test_tup2):\n            return (False, 0)\n        else:\n            tup1 = test_tup1[i]\n            tup2 = test_tup2[i]\n            if tup1 % tup2 == 0:\n                test_tup1[i] = tup1 % tup2\n            else:\n                test_tup1[i] = 0\n    return (True, test_tup1)\n",
        "num_ids": 137
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(tup1_val % tup2_val for tup1_val, tup2_val in zip(test_tup1, test_tup2))\n",
        "num_ids": 45
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(test_tup1[0] % test_tup2[0])\n",
        "num_ids": 23
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    #passing if the tuple has the same length\n    if len(test_tup1) == len(test_tup2):\n        print(f'{test_tup1} mod {test_tup2} is {tuple_modulo(test_tup1,test_tup2)}')\n",
        "num_ids": 78
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1_size = len(test_tup1)\n    test_tup2_size = len(test_tup2)\n    tuple_modulo = []\n    for i in range(test_tup1_size):\n        temp_tuple = (test_tup1[i] % test_tup2[i])\n        tuple_modulo.append(temp_tuple)\n    return tuple_modulo\n",
        "num_ids": 109
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    answer = ()\n    for x, y in zip(test_tup1, test_tup2):\n        answer += (x % y,)\n    return answer\n",
        "num_ids": 41
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 0 or d < 1: \n        return -1\n    elif steps == 0 or d == 1: \n        return 0\n    else: \n        return 1 + min_Jumps(steps - 1, d) if min_Jumps(steps - 1, d) >= 0 else -1\n",
        "num_ids": 74
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps) \n    if n == 0: \n        return 0\n    \n    s = 0\n    dp = [] \n    for i in range(n): \n        dp.append(s) \n        if i > 0: \n            dp[i] = dp[i-1] + 1\n        if i < n-1: \n            dp[i] = min(dp[i], dp[i+1]) \n        s = dp[i] + steps[i]\n        \n    return dp[n-1]\n",
        "num_ids": 136
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    cnt = 0\n    while steps >= d:\n        if steps >= d + d:\n            cnt += 1\n            steps -= d\n        else:\n            steps = steps - d\n",
        "num_ids": 46
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps) \n    if n == 0: \n        return 0\n    jumps = 0\n    steps = steps + [steps[-1]]\n    for i in range(n): \n        if steps[i] == d: \n            jumps += 1\n            steps.pop(0) \n    return jumps ",
        "num_ids": 81
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if not d:\n        return 0\n    # We have at least one\n    # take the first jump\n    if steps == 0:\n        return 0\n    # We have at least one step\n    # have to take in the following steps\n    if steps < 2:\n        return 1\n    \n    # Take the first step to reach the point (d,0)\n    new_steps = steps + 1\n    if new_steps >= d:\n        return 1\n    \n    # Take the second step to reach the point (d,0)\n    # If we reach the point in 1 step\n    # then we need 1 step to reach the point (d,0)\n    # Else we need 2 steps to reach the point (d,0)\n    if (steps + 1) == d:\n        return 2\n    else:\n        return 3\n",
        "num_ids": 194
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 0):\n        return 0\n    min_steps = float('inf')\n    for x in range(d+1):\n        if (min_steps > x):\n            continue\n        if (steps - x) % d == 0:\n            min_steps = min(min_steps, 1 + min_Jumps(steps - x, d))\n    return min_steps\n",
        "num_ids": 92
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n",
        "num_ids": 13
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def distance(x, y): \n        return abs(x) + abs(y)\n    jumps = 0\n    x = 0\n    y = 0\n    while x < steps:\n        y += d\n        x += distance(x, y)\n    return jumps\n",
        "num_ids": 66
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        if steps[0] == 0 and steps[1] == 0:\n            return 1\n        else:\n            return 0\n",
        "num_ids": 68
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x_cord = 0\n    y_cord = 0\n    count = 0\n    while x_cord!= d:\n        if abs(x_cord) >= abs(y_cord):\n            count += 1\n            x_cord = x_cord - steps\n        else:\n            count += 1\n            y_cord = y_cord - steps\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]*nums2[i])\n    return result\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]+nums2[i])\n    return result\ndef sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\ndef div_by_two(nums):\n    '''\n    Write a function to divide a list of numbers by 2.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]/2)\n    return result\ndef sub_by_two(nums):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]-2)\n    return result\ndef mul_by_two(nums):\n    '''\n    Write a function to multiply a list of numbers by 2.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]*2)\n    return result\ndef add_by_two(nums):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]+2)\n    return result\ndef sub_by_three(nums):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]-3)\n    return result\ndef mul_by_three(nums):\n    '''\n    Write a function to multiply a list of numbers by 3.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]*3)\n    return result\ndef div_by_three(nums):\n    '''\n    Write a function to divide a list of numbers by 3.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]/3)\n    return result\ndef add_by_five(nums):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]+5)\n    return result\ndef sum_list_of_strings(nums):\n    '''\n    Write a function to sum up a list of strings.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += int(nums[i])\n    return result\ndef avg_list_of_strings(nums):\n    '''\n    Write a function to average a list of strings.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += int(nums[i])\n    return result/len(nums)\ndef max_list_of_strings(nums):\n    '''\n    Write a function to get the largest string from a list.\n    '''\n    for i in range(len(nums)):\n        result = nums[i]\n        if len(result) > len(nums[0]):\n            result = nums[0]\n    return result\ndef min_list_of_strings(nums):\n    '''\n    Write a function to get the smallest string from a list.\n    '''\n    for i in range(len(nums)):\n        result = nums[i]\n        if len(result) < len(nums[0]):\n            result = nums[0]\n    return result\ndef first_last_elements(nums):\n    '''\n    Write a function to get the first and the last elements of a list.\n    '''\n    result = []\n    result.append(nums[0])\n    result.append(nums[len(nums)-1])\n    return result\ndef middle_elements(nums):\n    '''\n    Write a function to get the middle elements of a list.\n    '''\n    middle = len(nums)//2\n    result = []\n    for i in range(middle):\n        result.append(nums[i])\n    return result\ndef reverse_list(nums):\n    '''\n    Write a function to reverse a list.\n    '''\n    result = nums[::-1]\n    return result\ndef is_palindrome(nums):\n    '''\n    Write a function to check whether a list is a palindrome or not.\n    '''\n    reverse_list(nums)\n    if nums == nums[::-1]:\n        return True\n    return False\ndef sum_list(nums):\n    '''\n    Write a function to get the sum of a list of integers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i]\n    return result\ndef mean_list(nums):\n    '''\n    Write a function to get the mean of a list of integers.\n    '''\n    result = sum_list(nums)/len(nums)\n    return result\ndef even_list(nums):\n    '''\n    Write a function to get the even elements of a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            result.append(nums[i])\n    return result\ndef odd_list(nums):\n    '''\n    Write a function to get the odd elements of a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            result.append(nums[i])\n    return result\ndef if_prime(nums):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    prime = True\n    for i in range(2,int(nums/2)):\n        if nums%i == 0:\n            prime = False\n            break\n    return prime\ndef prime_list(nums):\n    '''\n    Write a function to get the prime elements of a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if if_prime(nums[i]) == True:\n            result.append(nums[i])\n    return result\ndef is_sublist(nums,sublist):\n    '''\n    Write a function to check whether a list is a sublist or not.\n    '''\n    for i in range(len(nums)):\n        if nums[i] == sublist[0]:\n            for j in range(len(sublist)):\n                if nums[i+j] == sublist[j]:\n                    continue\n                else:\n                    return False\n            return True\n    return False\ndef multi_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]*nums2[i])\n    return result\ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wis",
        "num_ids": 13
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) < len(nums2):\n        min_len = len(nums1)\n    else:\n        min_len = len(nums2)\n    max_len = min_len\n",
        "num_ids": 55
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [i//j for i,j in zip(nums1,nums2)]\n    \n",
        "num_ids": 26
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    dividend = []\n    divisor = []\n    for i in range(len(nums1)):\n        dividend.append(nums1[i]/nums2[i])\n        divisor.append(nums2[i])\n    return dividend, divisor\n",
        "num_ids": 93
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    len_1 = len(nums1)\n    len_2 = len(nums2)\n    if len_1 > len_2:\n        # long list longer\n        diff = len_1 - len_2\n        # get the last element of the shorter list\n        temp = nums2[-1]\n        for i in range(len_1-1):\n            nums2[i] = nums2[i+1]\n        nums2[-1] = temp\n    else:\n        # long list longer\n        diff = len_2 - len_1\n        for i in range(len_1-1):\n            nums1[i] = nums1[i+1]\n        nums1[-1] = temp\n    return nums1, nums2\n",
        "num_ids": 189
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i] / nums2[i])\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    lst1 = list(nums1)\n    lst2 = list(nums2)\n",
        "num_ids": 26
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return list(map(lambda x,y: x/y,nums1,nums2))\n",
        "num_ids": 26
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #create an empty list\n    res = []\n    for i in range(len(nums1)):\n        #print(res)\n        #convert both the lists into integers\n        nums1[i] = int(nums1[i])\n        nums2[i] = int(nums2[i])\n        #divide the number in the first list by the number in the second list\n        res.append(nums1[i]/nums2[i])\n    #print(res)\n    return res\n    \nprint(div_list([2, 4, 8, 10], [2, 2, 2, 2])",
        "num_ids": 152
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str: return \"\"\n",
        "num_ids": 12
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == '':\n        return test_str\n    s = \"\"\n    for x in test_str:\n        if not x.isdigit():\n            s += x\n        else:\n            s += x\n    return s\n",
        "num_ids": 59
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    tmp = ''\n    tmp2 = ''\n    for i in test_str:\n        if i.isdigit():\n            tmp += i\n        else:\n            tmp2 += i\n    test_str = tmp2 + tmp\n    return test_str\n",
        "num_ids": 62
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    num_str = ''.join(num_list)\n    return num_str + test_str.replace(num_str, '')\n",
        "num_ids": 70
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = list(test_str)\n    for i in range(len(str_list)):\n        if str_list[i].isdigit():\n            str_list.append(str_list.pop(i))\n    return ''.join(str_list)\n",
        "num_ids": 68
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst = []\n    for i in test_str:\n        if i.isdigit():\n            lst.append(i)\n    while test_str[0].isdigit():\n        lst.append(test_str[0])\n        test_str = test_str[1:]\n    if test_str!= '':\n        lst.append(test_str)\n    return ''.join(lst)\n",
        "num_ids": 104
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    print(test_str.rjust(len(test_str) + 2,''))\n    print(test_str.ljust(len(test_str) + 2,''))\n    print(test_str.center(len(test_str) + 2,''))\n",
        "num_ids": 64
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_str.insert(0, test_str.pop(i))\n    return''.join(test_str)\n",
        "num_ids": 69
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.strip()\n    split_str = test_str.split()\n    result = \"\"\n    for item in split_str:\n        if item.isnumeric():\n            result += item\n            result += \" \"\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_list = list(test_str)\n    for i in range(len(test_str_list)):\n        if test_str_list[i].isnumeric():\n            for j in range(i, len(test_str_list)):\n                if test_str_list[j].isnumeric():\n                    test_str_list[j], test_str_list[i] = test_str_list[i], test_str_list[j]\n    return ''.join(test_str_list)\n",
        "num_ids": 128
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest(a, subset):\n        if len(subset) == len(a):\n            return subset\n        i = 1\n        while i < len(a):\n            if a[i] % a[i-1]!= 0:\n                return largest(a, subset + [a[i]])\n            i += 1\n        return largest(a, subset + [a[i]])\n",
        "num_ids": 95
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    res = 0\n    \n    # Build a prefix sum array\n    # Time: O(n) | Space: O(n)\n    a.sort()\n    a.append(a[-1]+1)\n    for i in range(len(a)-1):\n        a[i+1] = a[i+1] + a[i]\n    \n    # Multiply all numbers in the array by the last element of the array.\n    # Time: O(n) | Space: O(n)\n    max_prod = 1\n    for i in range(len(a)-1):\n        max_prod *= a[i]\n    \n    # Iterate through the array and remove all numbers that are less than the product of the previous numbers in the array.\n    # Time: O(n) | Space: O(1)\n    for i in range(1,len(a)):\n        if a[i] <= max_prod:\n            max_prod = max_prod - a[i-1]\n    \n    # If the max product of the numbers is not zero, add the product of the last number to the sum.\n    # Time: O(n) | Space: O(1)\n    if max_prod > 0:\n        res += max_prod\n    \n    return res\n",
        "num_ids": 311
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def is_divisible(x,y):\n        return x%y==0 or y%x==0\n    s = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if is_divisible(a[i],a[j]):\n                s+=1\n    if s == 0:\n        print(a)\n        return 1\n    else:\n        print(s)\n        return 0\n    \nlargest_subset([6,9,1,2,4,3,5,8])\n",
        "num_ids": 138
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # This is the largest subset of a list of numbers so that every pair is divisible.\n    # This is the problem from leetcode.\n    # The problem is that the minimum of all the numbers is equal to the maximum of all the numbers.\n    # So in order to find the minimum of all the numbers, we need to find the minimum of every element in the list.\n    # The minimum is found by using the max function on every element in the list, and the max function is a built in function in python.\n    # An alternative is to use the built in function reduce which does the same thing, but is a bit more advanced.\n    # Note: List may contain duplicate elements.\n    # You may assume that all elements are positive integers.\n    # Runtime Complexity: O(n)\n",
        "num_ids": 178
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset_helper(lst):\n        if len(lst) == 0:\n            return 0\n        elif len(lst) == 1:\n            return lst[0]\n        else:\n            mid = len(lst) // 2\n            left = largest_subset(lst[:mid])\n            right = largest_subset(lst[mid:])\n            return max(left, right, left + right)\n    \n    return largest_subset_helper(sorted(a))\n",
        "num_ids": 127
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def subset(a):\n        # this is the base case\n        if len(a) == 1:\n            return (1,a)\n        # this is the recursive case\n        m,l = subset(a[1:])\n        l.append(a[0])\n        m = 1 + m if a[0]%l[0] == 0 else m\n        return (m,l)\n    return subset(a)[0]\n",
        "num_ids": 104
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def is_divisible(n1,n2):\n        if n1 % n2 == 0: return True\n        return False\n    \n    \n    def largest_subset_helper(a,count):\n        #a is a list of numbers\n        #count is the number of numbers in the current largest set\n        \n        if count == len(a):\n            #if count == len(a): return True\n            #largest_subset_helper(a,count+1)\n            return True\n        \n        for i in range(count,len(a)):\n            #print a[:count]\n            #print a[count:]\n            if is_divisible(a[count],a[i]) and largest_subset_helper(a,count+1):\n                return True\n        \n        #return largest_subset_helper(a,count+1)\n        return False\n    \n    if len(a) == 0: return 0\n    return largest_subset_helper(a,0)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2006
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    i = 0\n    max_size = 0\n    while i < len(a)-1:\n        if a[i]%a[i+1] == 0:\n            if max_size < a[i]+a[i+1]:\n                max_size = a[i]+a[i+1]\n        i+=1\n    return max_size\n",
        "num_ids": 94
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    def subset_divisor(a):\n        # Base case\n        if len(a) == 0:\n            return 0\n        if len(a) == 1:\n            return 1\n        \n        if a[0] % 2 == 0:\n            return subset_divisor(a[1:]) + 1\n        else:\n            return max(subset_divisor(a[1:]), subset_divisor(a[2:]))\n",
        "num_ids": 110
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n",
        "num_ids": 22
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n    if n%2 == 0:\n        return (arr1[n//2] + arr2[n//2])/2\n    else:\n        return arr1[n//2]\n",
        "num_ids": 58
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i=0\n    j=0\n    x=[]\n    while(i<n and j<n):\n        if(arr1[i]<arr2[j]):\n            x.append(arr1[i])\n            i+=1\n        else:\n            x.append(arr2[j])\n            j+=1\n    while(i<n):\n        x.append(arr1[i])\n        i+=1\n    while(j<n):\n        x.append(arr2[j])\n        j+=1\n    if(n%2==0):\n        x1=x[n//2]\n        x2=x[n//2-1]\n        return (x1+x2)/2\n    return x[n//2]\n    \ndef median_sorting(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    x=[]\n    i=0\n    j=0\n    while(i<n and j<n):\n        if(arr1[i]<arr2[j]):\n            x.append(arr1[i])\n            i+=1\n        else:\n            x.append(arr2[j])\n            j+=1\n    while(i<n):\n        x.append(arr1[i])\n        i+=1\n    while(j<n):\n        x.append(arr2[j])\n        j+=1\n    if(n%2==0):\n        x1=x[n//2]\n        x2=x[n//2-1]\n        return (x1+x2)/2\n    return x[n//2]\n",
        "num_ids": 183
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Approach 1 - Merge Sort\n    '''\n    In the process, we first take the difference between the two lists, and sort that\n    difference. Then, we take the median of the difference.\n    '''\n    def merge_sort(arr):\n        '''\n        Sort a given array using merge sort algorithm\n        :param arr: input array\n        :return: sorted array\n        '''\n        if len(arr) < 2:\n            return arr\n        else:\n            mid = len(arr)//2\n            # Split the array into left and right arrays\n            left = arr[:mid]\n            right = arr[mid:]\n",
        "num_ids": 58
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if n % 2 == 1:\n        return arr1[n//2]\n    else:\n        return (arr1[(n//2) - 1] + arr1[n//2]) / 2\n",
        "num_ids": 64
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    \n    if m < n:\n        return get_median(arr2, arr1, n)\n    \n    if m == 0:\n        return arr2[n//2]\n    \n    low, high = 0, m - 1\n    while low <= high:\n        pivot = low + (high - low)//2\n        pivot_l = arr1[pivot]\n        pivot_r = arr2[pivot]\n        \n        if pivot_l <= pivot_r:\n            low = pivot + 1\n        else:\n            high = pivot - 1\n            \n    return arr1[low]\n",
        "num_ids": 165
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    print(arr1, arr2)\n    m = (n + 1) // 2\n    if n%2 == 0:\n        median1 = arr1[m - 1]\n        median2 = arr2[m - 1]\n        median = (median1 + median2)/2\n    else:\n        median = arr1[m]\n    return median\n",
        "num_ids": 90
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0:\n        return arr2[n//2]\n    if len(arr2) == 0:\n        return arr1[n//2]\n    if arr1[0] <= arr2[0]:\n        return get_median(arr1[1:], arr2, n-1)\n    return get_median(arr1, arr2[1:], n-1)\n",
        "num_ids": 100
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[n // 2]\n",
        "num_ids": 30
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    len1, len2 = len(arr1), len(arr2)\n    if len1 > len2:\n        arr1, arr2 = arr2, arr1\n    if len1 == 0:\n        return arr2[len2 // 2]\n    \n    if len2 == 0:\n        return arr1[len1 // 2]\n",
        "num_ids": 82
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # if n == 1:\n    #     return nums\n    # elif n == 2:\n    #     return [x*x for x in nums]\n    # else:\n    #     return [x*x for x in nums] + [x*x*x for x in nums]\n    \n    return [x**n for x in nums]\n",
        "num_ids": 89
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return [num**n for num in nums]\n    elif n == 2:\n        return [x**2 for x in nums]\n    else:\n        return [x**n for x in nums]\n",
        "num_ids": 60
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**i for i in range(n)]\n    ",
        "num_ids": 17
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #n = 0\n    #print(n)\n    #print(nums)\n    #n = 1\n    #print(n)\n    #print(nums)\n    #n = 2\n    #print(n)\n    #print(nums)\n    #n = 3\n    #print(n)\n    #print(nums)\n    #n = 4\n    #print(n)\n    #print(nums)\n    #n = 5\n    #print(n)\n    #print(nums)\n    #n = 6\n    #print(n)\n    #print(nums)\n    #n = 7\n    #print(n)\n    #print(nums)\n    #n = 8\n    #print(n)\n    #print(nums)\n    #n = 9\n    #print(n)\n    #print(nums)\n    #n = 10\n    #print(n)\n    #print(nums)\n    #n = 11\n    #print(n)\n    #print(nums)\n    #n = 12\n    #print(n)\n    #print(nums)\n    #n = 13\n    #print(n)\n    #print(nums)\n    #n = 14\n    #print(n)\n    #print(nums)\n    #n = 15\n    #print(n)\n    #print(nums)\n    #n = 16\n    #print(n)\n    #print(nums)\n    #n = 17\n    #print(n)\n    #print(nums)\n    #n = 18\n    #print(n)\n    #print(nums)\n    #n = 19\n    #print(n)\n    #print(nums)\n    #n = 20\n    #print(n)\n    #print(nums)\n    #n = 21\n    #print(n)\n    #print(nums)\n    #n = 22\n    #print(n)\n    #print(nums)\n    #n = 23\n    #print(n)\n    #print(nums)\n    #n = 24\n    #print(n)\n    #print(nums)\n    #n = 25\n    #print(n)\n    #print(nums)\n    #n = 26\n    #print(n)\n    #print(nums)\n    #n = 27\n    #print(n)\n    #print(nums)\n    #n = 28\n    #print(n)\n    #print(nums)\n    #n = 29\n    #print(n)\n    #print(nums)\n    #n = 30\n    #print(n)\n    #print(nums)\n    #n = 31\n    #print(n)\n    #print(nums)\n    #n = 32\n    #print(n)\n    #print(nums)\n    #n = 33\n    #print(n)\n    #print(nums)\n    #n = 34\n    #print(n)\n    #print(nums)\n    #n = 35\n    #print(n)\n    #print(nums)\n    #n = 36\n    #print(n)\n    #print(nums)\n    #n = 37\n    #print(n)\n    #print(nums)\n    #n = 38\n    #print(n)\n    #print(nums)\n    #n = 39\n    #print(n)\n    #print(nums)\n    #n = 40\n    #print(n)\n    #print(nums)\n    #n = 41\n    #print(n)\n    #print(nums)\n    #n = 42\n    #print(n)\n    #print(nums)\n    #n = 43\n    #print(n)\n    #print(nums)\n    #n = 44\n    #print(n)\n    #print(nums)\n    #n = 45\n    #print(n)\n    #print(nums)\n    #n = 46\n    #print(n)\n    #print(nums)\n    #n = 47\n    #print(n)\n    #print(nums)\n    #n = 48\n    #print(n)\n    #print(nums)\n    #n = 49\n    #print(n)\n    #print(nums)\n    #n = 50\n    #print(n)\n    #print(nums)\n    #n = 51\n    #print(n)\n    #print(nums)\n    #n = 52\n    #print(n)\n    #print(nums)\n    #n = 53\n    #print(n)\n    #print(nums)\n    #n = 54\n    #print(n)\n    #print(nums)\n    #n = 55\n    #print(n)\n    #print(nums)\n    #n = 56\n    #print(n)\n    #print(nums)\n    #n = 57\n    #print(n)\n    #print(nums)\n    #n = 58\n    #print(n)\n    #print(nums)\n    #n = 59\n    #print(n)\n    #print(nums)\n    #n = 60\n    #print(n)\n    #print(nums)\n    #n = 61\n    #print(n)\n    #print(nums)\n    #n = 62\n    #print(n)\n    #print(nums)\n    #n = 63\n    #print(n)\n    #print(nums)\n    #n = 64\n    #print(n)\n    #print(nums)\n    #n = 65\n    #print(n)\n    #print(nums)\n    #n = 66\n    #print(n)\n    #print(nums)\n    #n = 67\n    #print(n)\n    #print(nums)\n    #n = 68\n    #print(n)\n    #print(nums)\n    #n = 69\n    #print(n)\n    #print(nums)\n    #n = 70\n    #print(n)\n    #print(nums)\n    #n = 71\n    #print(n)\n    #print(nums)\n    #n = 72\n    #print(n)\n    #print(nums)\n    #n = 73\n    #print(n)\n    #print(nums)\n    #n = 74\n    #print(n)\n    #print(nums)\n    #n = 75\n    #print(n)\n    #print(nums)\n    #n = 76\n    #print(n)\n    #print(nums)\n    #n = 77\n    #print(n)\n    #print(nums)\n    #n = 78\n    #print(n)\n    #print(nums)\n    #n = 79\n    #print(n)\n    #print(nums)\n    #n = 80\n    #print(n)\n    #print(nums)\n    #n = 81\n    #print(n)\n    #print(nums)\n    #n = 82\n    #print(n)\n    #print(nums)\n    #n = 83\n    #print(n)\n    #print(nums)\n    #n = 84\n    #print(n)\n    #print(nums)\n    #n = 85\n    #print(n)\n    #print(nums)\n    #n = 86\n    #print(n)\n    #print(nums)\n    #n = 87\n    #print(n)\n    #print(nums)\n    #n = 88\n    #print(n)\n    #print(nums)\n    #n = 89\n    #print(n)\n    #print(nums)\n    #n = 90\n    #print(n)\n    #print(nums)\n    #n = 91\n    #print(n)\n    #print(nums)\n    #n = 92\n    #print(n)\n    #print(nums)\n    #n = 93\n    #print(n)\n    #print(nums)\n    #n = 94\n    #print(n)\n    #print(nums)\n    #n = 95\n    #print(n)",
        "num_ids": 2009
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    a = []\n    for i in nums:\n        a.append(i**n)\n    return a\n        \n",
        "num_ids": 31
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n    \n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l = []\n    for i in range(0,len(nums)):\n        l.append(num ** n for num in nums)\n    return l\n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) > 1:\n        nums = nums[0:len(nums)-1]\n    else:\n        nums = nums[0:len(nums)]\n    return nums[0:len(nums)]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return nums[n:] + nums[0:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return nums[n:] + nums[0:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        return nums[1:] + nums[0]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return nums[n:] + nums[:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        return nums[n:] + nums[:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums = nums[1:]\n    \n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums = nums[1:]\n    nums.append(1)\n    \n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    return nums[n:] + nums[:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    return nums[n:] + nums[:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    nums = nums[1:]\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    return nums[n:] + nums[:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    nums = nums[1:]\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    return nums[n:] + nums[:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    return nums[n:] + nums[:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    return nums[n:] + nums[:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    return nums[n:] + nums[:n]\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.append(1)\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n    \ndef nth_nums(nums,n):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        res.append(nums[i]**n)\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i ** n)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l = len(nums)\n    x = []\n    for i in range(l):\n        x.append(nums[i]**n)\n    return x\n",
        "num_ids": 43
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    if len(nums)==1 and n==0:\n        return []\n    elif n==0:\n        return [1]\n    \n    if n==1:\n        return [x**n for x in nums]\n    elif n==2:\n        return [x**n for x in nums]\n    else:\n        power_nums=nth_nums(nums,n-2)\n        return [x*y for x,y in zip(power_nums,nums)]\n",
        "num_ids": 135
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # st = string.upper()\n    st = string\n    return st\n",
        "num_ids": 20
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\nprint(is_upper(\"HELP\"))\nprint(is_upper(\"hello\"))\nprint(is_upper(\"pArAsPlArAn\"))\n",
        "num_ids": 43
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\nprint(is_upper('user'))\n",
        "num_ids": 19
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    ",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # assert False == True\n    # assert True == False\n    \n    \n    # return string.upper()\n    # s = 'abcABC'\n    # assert s.upper() == 'ABC'\n    # return s.upper()\n    \n    \n    # Return string in upper case\n    # s = 'abcABC'\n    # assert s.upper() == 'ABC'\n    return string.upper()\n    \n    \n    \ndef main():\n    # print(is_upper('CALC'))\n    print(is_upper(''))\n    print(is_upper('a'))\n    print(is_upper('ABc'))\n    print(is_upper('AbC'))\n    print(is_upper('ABcABC'))\n    print(is_upper('abCabc'))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 208
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # return string.upper()\n    return string.upper()\n    # return string.title()\n",
        "num_ids": 25
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    if size == 1:\n        return newList\n    else:\n        temp = newList[-1]\n        newList[-1] = newList[0]\n        newList[0] = temp\n        return newList\n    \nif __name__ == '__main__':\n    newList = [4,2,3,5,5,6]\n    newList = swap_List(newList)\n    print(newList)",
        "num_ids": 114
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    print(newList)\n    return\n",
        "num_ids": 37
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "num_ids": 26
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    head = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = head\n    return newList\n",
        "num_ids": 48
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList\n    \ndef second_min_element(newList): \n    '''\n    Write a python function to return the second min element in a given list.\n    '''\n    n = len(newList)\n    first_min = newList[0]\n    for i in range(1,n):\n        if newList[i] < first_min:\n            first_min = newList[i]\n    return first_min\n    \ndef three_largest_elements(newList): \n    '''\n    Write a python function to return the three largest elements in a given list.\n    '''\n    n = len(newList)\n    three_largest = []\n    for i in range(n-1,n-4,-1):\n        three_largest.append(newList[i])\n    return three_largest\n    \ndef second_largest_element(newList): \n    '''\n    Write a python function to return the second largest element in a given list.\n    '''\n    n = len(newList)\n    for i in range(n-2,-1,-1):\n        if newList[i] > newList[i+1]:\n            break\n    return newList[i+1]\n",
        "num_ids": 55
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    lst = newList.copy()\n    if len(lst) > 0:\n        lst[0], lst[-1] = lst[-1], lst[0]\n        newList = lst\n    return newList\n",
        "num_ids": 60
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    x = len(newList)\n    newList[0] = newList[x-1]\n    newList[x-1] = newList[0]\n    print(newList)\n",
        "num_ids": 48
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def gcd(a,b):\n        while b:\n            a, b = b, a % b\n        return a\n",
        "num_ids": 36
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0\n    for i in range(0,r) :\n        a = r**2 -(r-i)**2\n        area = area + (math.sqrt(a))\n    return area\n    \ndef triangle_area_2(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = 0\n    for i in range(0,r) :\n        a = r**2 -(r-i)**2\n        if a > a :\n            a = a\n    return a\n    \ndef sphere_area(r) :\n    '''\n    Write a python function to find the area of the largest sphere that can be inscribed in a hypersphere with a given radius.\n    '''\n    import math\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef sphere_area_2(r) :\n    '''\n    Write a python function to find the area of the largest sphere that can be inscribed in a hypersphere with a given radius.\n    '''\n    import math\n    s = 4*math.pi*r**2\n    return s\n    \ndef circle_area(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = math.pi*r**2\n    return area\n    \ndef circle_area_2(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    a = math.pi*r**2\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (1/2) * r**2 * math.sin(math.pi/3)\n    return round(area, 3)\n",
        "num_ids": 35
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def tri_area(r):\n        area = (1/3)*r*(r+1)*(r-1)\n        return area\n    return tri_area(r)\n",
        "num_ids": 45
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def perimeter(a,b) :\n        '''\n        Write a python function to find the perimeter of a triangle.\n        '''\n        return (a + b + a) / 2\n    def area(a,b,c) :\n        '''\n        Write a python function to find the area of a triangle.\n        '''\n        return (a * b) / 2\n    def area_of_semicircle(r,perimeter,area) :\n        '''\n        Write a python function to find the area of a semicircle given the radius and triangle perimeter.\n        '''\n        return (r ** 2) * (perimeter / 2) * (area / 2)\n    return area_of_semicircle(r,perimeter(a,b),area(a,b,c))\n",
        "num_ids": 52
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 0 :\n        return 0\n    elif r < 0 :\n        return 'Invalid input'\n    else:\n        area = (r**2)*(0.5*math.sqrt(3))\n        return area\n",
        "num_ids": 57
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def square_area(a) :\n    \n        '''\n        Python function to find the area of a square.\n        '''\n        return a*a\n    def triangle_area(r) :\n    \n        '''\n        Python function to find the area of a triangle.\n        '''\n        return (1/2)*math.sqrt(r*r*r)\n    def circle_area(r) :\n    \n        '''\n        Python function to find the area of a circle.\n        '''\n        import math\n        return math.pi*r*r\n    if r == 0 or r == 1 :\n        return 0\n    else :\n        print(square_area(r))\n        print(triangle_area(r))\n        print(circle_area(r))\n",
        "num_ids": 66
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    n = 1\n    while True :\n        x = r*r*n\n        if x > 0.25 :\n            break\n        else :\n            n = n+1\n    \n    y = (1/2)*x\n    area = (1/2)*x*(x-y)\n    return area\n",
        "num_ids": 76
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(r*2+1) :\n        area += (1/2)*(r**2)*i\n    return area\n",
        "num_ids": 40
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    r = float(r)\n    area = r * (r * math.sqrt(2) - 1)\n    print('Area of the triangle :', area)\n    return area\n",
        "num_ids": 49
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array) if not end else end\n    for i in range(start,end):\n        if(array[i]!= i+1):\n            return i+1\n    return end+1\n",
        "num_ids": 52
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if end-start==0:\n        return start\n    \n    if end-start==1:\n        if array[start]!=1:\n            return start\n        return end\n    middle = (end+start)//2\n    if array[middle] == middle+1:\n        return find_First_Missing(array,start,middle)\n    if array[middle] == middle:\n        return find_First_Missing(array,middle,end)\n    if array[middle]!= middle+1:\n        return middle\n    return find_First_Missing(array,start,middle)\n    \n",
        "num_ids": 157
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) -1\n    if start == end:\n        return start +1\n    if array[start]!= start+1:\n        return find_First_Missing(array,start+1,end)\n    return find_First_Missing(array,start+1,end-1)\n    \n    \n    \nprint(find_First_Missing([4,5,7,9,10]))\nprint(find_First_Missing([1,3,7,4,10]))\nprint(find_First_Missing([1,2,3,4,5]))\nprint(find_First_Missing([1,2,3,5,4]))\nprint(find_First_Missing([1,2,3,5,4,6]))\nprint(find_First_Missing([1,2,3,5,4,6,7,8,9,10]))\nprint(find_First_Missing([1,2,3,5,4,6,7,8,9,10,11]))",
        "num_ids": 250
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == len(array)-1:\n        return start\n    if end == None:\n        end = len(array)-1\n    if end-start == 0:\n        return -1\n    if array[start]!= 1:\n        return start\n    if array[end]!= len(array)-1:\n        return end\n    return find_First_Missing(array,start+1,end-1)\n",
        "num_ids": 100
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return None\n    for i in range(start,end+1):\n        if array[i]!= i + 1 and array[i]!= i - 1:\n            return i\n    return None\n",
        "num_ids": 73
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    for i in range(start,end):\n        if i not in array:\n            return i\n    return end+1\n",
        "num_ids": 46
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return -1\n    if end is None:\n        end = len(array)\n    if end<start:\n        return -1\n    if start==end:\n        return start+1\n    mid = (start+end)//2\n    if array[mid] == mid+1:\n        return find_First_Missing(array,mid,end)\n    elif array[mid] == mid-1:\n        return find_First_Missing(array,start,mid)\n    else:\n        return mid\n",
        "num_ids": 127
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n",
        "num_ids": 55
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end==start:\n        return start+1\n    if end-start==1:\n        return end+2\n    elif array[start]==1:\n        return find_First_Missing(array,start+1,end-1)\n    elif array[start]==array[end-1]:\n        return find_First_Missing(array,start+1,end-1)\n    else:\n        temp = find_First_Missing(array,start+1,end-1)\n        return start+temp\ndef find_First_Missing_for_list_of_numbers(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    for i in range(0,len(numbers)):\n        temp = numbers[i]+1\n        if temp in numbers:\n            continue\n        else:\n            return temp\ndef find_First_Missing_for_list_of_numbers_using_binary(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_2(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_3(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_4(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_5(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_6(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_7(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_8(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_9(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_10(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_11(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_12(numbers):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(numbers)\n    number_of_missing = len(numbers)\n    #print(number_of_missing)\n    #print(numbers[0])\n    for i in range(len(numbers)):\n        if numbers[i] == number_of_missing:\n            number_of_missing = number_of_missing + 1\n    return number_of_missing\ndef find_First_Missing_for_list_of_numbers_using_binary_13(numbers)",
        "num_ids": 119
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    for i in range(start,end+1):\n        if array[i]==i+1:\n            continue\n        elif array[i]==i:\n            print(i)\n            break\n        else:\n            return i\n    return i\n",
        "num_ids": 78
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n",
        "num_ids": 23
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_str = string.replace(' ','%20')\n    return new_str\n    \ndef check_char(str):\n    '''\n    Write a function to check if the given string has any special characters.\n    '''\n    if not any(x.isalpha() for x in str):\n        if not any(x.isdigit() for x in str):\n            if not any(x in set('.-_') for x in str):\n                return 'OK'\n            else:\n                return 'Bad'\n        else:\n            return 'Bad'\n    else:\n        return 'Bad'\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if string[0] == string[-1]:\n        return is_palindrome(string[1:-1])\n    else:\n        return False\n    \ndef remove_duplicate(list_of_items):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    unique_list = []\n    for item in list_of_items:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n    \ndef group_list_by_first_index(list):\n    '''\n    Write a function to sort the list in ascending order by first index.\n    '''\n    sorted_list = sorted(list)\n    return sorted_list\n    \ndef validate_passports(passports):\n    '''\n    Write a function to validate passports by looking for passport's fields and its rules.\n    '''\n    required_fields = ['byr','iyr','eyr','hgt','hcl','ecl','pid']\n    valid_passports = 0\n    \n    for passport in passports:\n        if all(field in passport for field in required_fields):\n            valid_passports += 1\n            \n    return valid_passports\n    \ndef check_hgt_height(hgt):\n    '''\n    Write a function to validate a passport's height.\n    '''\n    if len(hgt) < 4 or hgt[-2:]!= 'cm' and hgt[-2:]!= 'in':\n        return False\n    \n    num = int(hgt[:-2])\n    if hgt[-2:] == 'cm' and not 150 <= num <= 193:\n        return False\n    elif hgt[-2:] == 'in' and not 59 <= num <= 76:\n        return False\n    else:\n        return True\n        \ndef validate_hcl(hcl):\n    '''\n    Write a function to validate a passport's colour.\n    '''\n    if hcl[0] == '#':\n        if len(hcl)!= 7:\n            return False\n        if any(x not in set('0123456789abcdef') for x in hcl[1:]):\n            return False\n        return True\n    else:\n        return False\n        \ndef validate_ecl(ecl):\n    '''\n    Write a function to validate a passport's colour.\n    '''\n    if ecl in set('amb blu brn gry grn hzl oth'.split()):\n        return True\n    else:\n        return False\n        \ndef validate_pid(pid):\n    '''\n    Write a function to validate a passport's ID.\n    '''\n    if len(pid) == 9 and all(x.isdigit() for x in pid):\n        return True\n    else:\n        return False\n        \ndef count_valid_passports(passports):\n    '''\n    Write a function to count the valid passports.\n    '''\n    valid_passports = 0\n    for passport in passports:\n        if (len(passport) == 8 or (len(passport) == 7 and 'cid' not in passport)) and \\\n        all(field in passport for field in required_fields):\n            valid_passports += 1\n    return valid_passports\n    \ndef count_valid_passports_2(passports):\n    '''\n    Write a function to count the valid passports.\n    '''\n    valid_passports = 0\n    for passport in passports:\n        if (len(passport) == 8 or (len(passport) == 7 and 'cid' not in passport)) and \\\n        all(field in passport for field in required_fields):\n            valid_passports += 1\n    return valid_passports\n    \ndef check_numeric_fields(passport):\n    '''\n    Write a function to check if a passport has a valid numerical fields.\n    '''\n    for field in required_fields:\n        if field == 'byr':\n            if not (1920 <= int(passport[field]) <= 2002):\n                return False\n        elif field == 'iyr':\n            if not (2010 <= int(passport[field]) <= 2020):\n                return False\n        elif field == 'eyr':\n            if not (2020 <= int(passport[field]) <= 2030):\n                return False\n        elif field == 'hgt':\n            if passport[field][-2:] == 'cm' and not (150 <= int(passport[field][:-2]) <= 193):\n                return False\n            elif passport[field][-2:] == 'in' and not (59 <= int(passport[field][:-2]) <= 76):\n                return False\n        elif field == 'hcl':\n            if passport[field][0]!= '#' or len(passport[field])!= 7 or any(x not in set('0123456789abcdef') for x in passport[field][1:]):\n                return False\n        elif field == 'ecl':\n            if passport[field] not in set('amb blu brn gry grn hzl oth'.split()):\n                return False\n        elif field == 'pid':\n            if len(passport[field])!= 9 or any(x not in set('0123456789') for x in passport[field]):\n                return False\n    return True\n    \ndef check_numeric_fields_2(passport):\n    '''\n    Write a function to check if a passport has a valid numerical fields.\n    '''\n    for field in required_fields:\n        if field == 'byr':\n            if not (1920 <= int(passport[field]) <= 2002):\n                return False\n        elif field == 'iyr':\n            if not (2010 <= int(passport[field]) <= 2020):\n                return False\n        elif field == 'eyr':\n            if not (2020 <= int(passport[field]) <= 2030):\n                return False\n        elif field == 'hgt':\n            if passport[field][-2:] == 'cm' and not (150 <= int(passport[field][:-2]) <= 193):\n                return False\n            elif passport[field][-2:] == 'in' and not (59 <= int(passport[field][:-2]) <= 76):\n                return False\n        elif field == 'hcl':\n            if passport[field][0]!= '#' or len(passport[field])!= 7 or any(x not in set('0123456789abcdef') for x in passport[field][1:]):\n                return False\n        elif field == 'ecl':\n            if passport[field] not in set('amb blu brn gry grn hzl oth'.split()):\n                return False\n        elif field == 'pid':\n            if len(passport[field])!= 9 or any(x not in set('0123456789') for x in passport[field]):\n                return False\n    return True\n    \nif __name__ == '__main__':\n    # PART 1\n    test_cases = [\n        {\n            'input': 'test.txt',\n            'expected': 4\n        },\n        {\n            'input': 'input.txt',\n            'expected': 260\n        }\n    ]\n",
        "num_ids": 416
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n    # return string.replace(\" \", \"%20\")\n",
        "num_ids": 26
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string=string.split(' ')\n    str=\"\"\n    for i in range(len(string)):\n        str+=string[i]\n        if i==len(string)-1:\n            str+=''\n    return str\n",
        "num_ids": 56
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n",
        "num_ids": 19
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    print('Even numbers from the list are: ', even_list)\n",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n    \n    \n    \nlist1=[1,3,5,7]\nprint(\"List of numbers :\",list1)\neven=Split(list1)\nprint(\"List of even numbers :\",even)\n",
        "num_ids": 83
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1=[]\n    list2=[]\n    for i in list:\n        if i%2==0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    return list1,list2\n",
        "num_ids": 60
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #split the list into a set and add them into an array\n    even = []\n    set(list)\n    for x in list:\n        if x%2==0:\n            even.append(x)\n    return even\n",
        "num_ids": 56
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in range(len(list)):\n        if list[i]%2 == 0:\n            even_num.append(list[i])\n    return even_num\n",
        "num_ids": 51
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return (filter(lambda x: x % 2 == 0, list))\n",
        "num_ids": 19
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    x = int(input(\"Enter the size of the list:\"))\n    list1 = []\n    print(\"The list is:\", list)\n    for i in range(0,x,2):\n        list1.append(list[i])\n    print(\"The even numbers in the list are:\", list1)\n",
        "num_ids": 75
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    lst = []\n    for i in list:\n        if i%2==0:\n            lst.append(i)\n    print(lst)\n",
        "num_ids": 40
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] > 0:\n        sub.append((ele[0]-1,ele[1]))\n    if ele[1] > 0:\n        sub.append((ele[0],ele[1]-1))\n    if ele[0] < len(grid)-1:\n        sub.append((ele[0]+1,ele[1]))\n    if ele[1] < len(grid[0])-1:\n        sub.append((ele[0],ele[1]+1))\n    return sub\n    \ndef dfs(node, visited, row, col): \n    '''\n    Write a function to perform a depth-first traversal in a graph.\n    '''\n    visited.append((row,col))\n    for coord in adjac(node):\n        if not (coord in visited): \n            dfs(coord, visited, row, col)\n    \ndef find_path(node1, node2):\n    '''\n    Write a function to find a path between two nodes.\n    '''\n    visited = []\n    dfs(node1, visited, 0,0)\n    dfs(node2, visited, len(grid)-1, len(grid[0])-1)\n    path = []\n    for i in range(len(visited)-1):\n        path.append(visited[i+1]-visited[i])\n    return path\n    \ndef is_reachable(node1, node2):\n    '''\n    Write a function to find whether the path between two nodes exists.\n    '''\n    path = find_path(node1, node2)\n    for i in range(len(path)-1):\n        if path[i] == 0:\n            return False\n    return True\n    ",
        "num_ids": 48
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [[x-1,y],[x,y-1],[x+1,y],[x,y+1]]\n    for i in adj:\n        if i not in sub:\n            sub.append(i)\n    return sub\n",
        "num_ids": 65
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == ele[1] and ele[1] == ele[2]:\n        return sub\n    if ele[0] == ele[1] and ele[0] == ele[2]:\n        sub.append(ele)\n        return sub\n    else:\n        sub.append(ele)\n        return adjac(ele[1], sub) + adjac(ele[2], sub)\n",
        "num_ids": 96
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x == 0:\n        adj.append((x+1, y))\n        if y == 0:\n            adj.append((x+1, y+1))\n        elif y == len(matrix)-1:\n            adj.append((x+1, y-1))\n        else:\n            adj.append((x+1, y+1))\n            adj.append((x+1, y-1))\n    elif x == len(matrix)-1:\n        adj.append((x-1, y))\n        if y == 0:\n            adj.append((x-1, y+1))\n        elif y == len(matrix)-1:\n            adj.append((x-1, y-1))\n        else:\n            adj.append((x-1, y+1))\n            adj.append((x-1, y-1))\n    else:\n        adj.append((x-1, y))\n        if y == 0:\n            adj.append((x-1, y+1))\n        elif y == len(matrix)-1:\n            adj.append((x-1, y-1))\n        else:\n            adj.append((x-1, y+1))\n            adj.append((x-1, y-1))\n    for i in adj:\n        if i not in sub:\n            sub.append(i)\n    return sub\n",
        "num_ids": 341
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == 0:\n        sub.append((ele[1], ele[2]))\n    if ele[0] == n-1:\n        sub.append((ele[1], ele[2]))\n    if ele[1] == 0:\n        sub.append((ele[0], ele[2]))\n    if ele[1] == n-1:\n        sub.append((ele[0], ele[2]))\n    if ele[2] == 0:\n        sub.append((ele[0], ele[1]))\n    if ele[2] == n-1:\n        sub.append((ele[0], ele[1]))\n    return sub\n",
        "num_ids": 162
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # print(ele, sub)\n    x, y, z = ele\n    sub.append((x, y+1))\n    sub.append((x+1, y+1))\n    sub.append((x+1, y))\n    sub.append((x+1, y-1))\n    sub.append((x, y-1))\n    sub.append((x-1, y-1))\n    sub.append((x-1, y))\n    sub.append((x-1, y+1))\n    return sub\n    \ndef inBound(ele, size): \n    '''\n    Check if the coordinate tuple lies in the given grid.\n    '''\n    x, y, z = ele\n    if x >= 0 and x < size and y >= 0 and y < size and z >= 0 and z < size:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #temp = tuple(map(lambda x, y: x - y, ele, [1, 0, 0, 1]))\n    temp = tuple(map(lambda x, y: x - y, ele, [1, 0, 0, 1]))\n    for i in range(4):\n        if temp == (1, 0, 0, 1):\n            if (1, 0, 0, 0) not in sub:\n                sub.append((1, 0, 0, 0))\n        elif temp == (-1, 0, 0, 1):\n            if (0, 0, 0, 1) not in sub:\n                sub.append((0, 0, 0, 1))\n        elif temp == (0, 1, 0, 1):\n            if (0, 1, 0, 0) not in sub:\n                sub.append((0, 1, 0, 0))\n        elif temp == (0, -1, 0, 1):\n            if (0, -1, 0, 0) not in sub:\n                sub.append((0, -1, 0, 0))\n        elif temp == (0, 0, 1, 1):\n            if (0, 0, 1, 0) not in sub:\n                sub.append((0, 0, 1, 0))\n        elif temp == (0, 0, -1, 1):\n            if (0, 0, -1, 0) not in sub:\n                sub.append((0, 0, -1, 0))\n        elif temp == (1, 1, 0, 1):\n            if (1, 1, 0, 0) not in sub:\n                sub.append((1, 1, 0, 0))\n        elif temp == (-1, -1, 0, 1):\n            if (0, -1, 0, 1) not in sub:\n                sub.append((0, -1, 0, 1))\n        elif temp == (1, -1, 0, 1):\n            if (1, -1, 0, 0) not in sub:\n                sub.append((1, -1, 0, 0))\n        elif temp == (-1, 1, 0, 1):\n            if (0, 1, 0, 1) not in sub:\n                sub.append((0, 1, 0, 1))\n        elif temp == (0, -1, 1, 1):\n            if (0, -1, 1, 0) not in sub:\n                sub.append((0, -1, 1, 0))\n        elif temp == (0, 1, 1, 1):\n            if (0, 1, 1, 0) not in sub:\n                sub.append((0, 1, 1, 0))\n        elif temp == (0, 1, -1, 1):\n            if (0, 1, -1, 0) not in sub:\n                sub.append((0, 1, -1, 0))\n        elif temp == (0, -1, -1, 1):\n            if (0, -1, -1, 0) not in sub:\n                sub.append((0, -1, -1, 0))\n        elif temp == (0, -1, 1, 1):\n            if (0, -1, 1, 0) not in sub:\n                sub.append((0, -1, 1, 0))\n        elif temp == (0, 1, -1, 1):\n            if (0, 1, -1, 0) not in sub:\n                sub.append((0, 1, -1, 0))\n    return sub\n",
        "num_ids": 823
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    temp = ele\n    if (ele[0] + 1, ele[1]) in sub:\n        sub.append((ele[0] - 1, ele[1]))\n    if (ele[0], ele[1] + 1) in sub:\n        sub.append((ele[0], ele[1] - 1))\n    if (ele[0] - 1, ele[1]) in sub:\n        sub.append((ele[0] + 1, ele[1]))\n    if (ele[0], ele[1] - 1) in sub:\n        sub.append((ele[0], ele[1] + 1))\n    return sub\n",
        "num_ids": 153
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # start = coord.start\n    # end = coord.end\n    # y0 = start[0]\n    # x0 = start[1]\n    # y1 = end[0]\n    # x1 = end[1]\n    # if y1 - y0 == 0:\n    #     if x0 == x1:\n    #         sub.append((y0, x0))\n    #         sub.append((y0, x0 + 1))\n    #     else:\n    #         sub.append((y0, x0))\n    #         sub.append((y0, x0 + 1))\n    #         sub.append((y1, x1))\n    #         sub.append((y1, x1 + 1))\n    # else:\n    #     if x0 == x1:\n    #         sub.append((y0, x0))\n    #         sub.append((y0, x0 + 1))\n    #         sub.append((y1, x0))\n    #         sub.append((y1, x1 + 1))\n    #     else:\n    #         sub.append((y0, x0))\n    #         sub.append((y0, x1))\n    #         sub.append((y1, x0))\n    #         sub.append((y1, x1))\n",
        "num_ids": 315
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return [ele]\n    sub.append(ele)\n    temp = []\n    for i in range(4):\n        temp.append((ele[0] +1, ele[1]))\n        temp.append((ele[0] -1, ele[1]))\n        temp.append((ele[0], ele[1] +1))\n        temp.append((ele[0], ele[1] -1))\n    return temp\n    \ndef dfs(graph, v):\n    '''\n    Write a function to print all vertices reachable from a given source vertex.\n    '''\n    visited = []\n    stack = []\n    stack.append(v)\n    while len(stack) > 0:\n        ele = stack.pop()\n        if ele not in visited:\n            visited.append(ele)\n            for ele in graph[ele]:\n                if ele not in visited:\n                    stack.append(ele)\n    return visited\n    \ndef all_vertices(graph):\n    '''\n    Write a function to print all the vertices in the given graph.\n    '''\n    visited = []\n    for i in range(len(graph)):\n        for j in range(len(graph[i])):\n            visited.append(i)\n    return visited\n",
        "num_ids": 47
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n    \n    \ndef count_words(text):\n    '''\n    Write a function that counts the number of words in a given text. The words must be separated by a single space.\n    '''\n    return len(text.split())\n",
        "num_ids": 11
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == '':\n        return text\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces =''\n    text = text.strip()\n    text = text.replace(spaces, '_')\n    text = text.replace('_', spaces)\n    return text\n",
        "num_ids": 46
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \"\".join([\"_\" if x == \" \" else x for x in text])\n",
        "num_ids": 24
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 12
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == \"\":\n        return text\n",
        "num_ids": 13
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    lst = text.split()\n    for x in range(len(lst)):\n        if lst[x] =='':\n            lst[x] = '_'\n        else:\n            lst[x] =''\n    \n    print(lst)\n",
        "num_ids": 68
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text=text.replace(\" \",\"_\")\n    return text.replace(\"_\",\" \")\n    \ndef front_back(str):\n    '''\n    Write a function to print the string in the format that is shown in the examples.\n    '''\n    str=str[::-1]\n    print(str)\n    \ndef swap_case(str):\n    '''\n    Write a function to swap the case of all the characters in the string.\n    '''\n    return str.swapcase()\n    \ndef run_length_encode(str):\n    '''\n    Write a function to encode a given string. \n    The string may contain special characters.\n    '''\n    count=1\n    output=\"\"\n    for i in range(1,len(str)):\n        if str[i-1]==str[i]:\n            count+=1\n        else:\n            output+=str[i-1]+str(count)\n            count=1\n    output+=str[-1]+str(count)\n    return output\n",
        "num_ids": 84
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_' + text.replace(' ', '_') + '_'\n",
        "num_ids": 21
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \",\"_\").replace(\"_\",\" \")\n",
        "num_ids": 19
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = num_list.count(0)\n    i = 0\n    while i < count:\n        num_list.remove(0)\n        num_list.append(0)\n        i += 1\n    return num_list\n",
        "num_ids": 57
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    print(\"Function called\")\n    i = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            break\n    num_list.reverse()\n    while i < len(num_list):\n        num_list.append(0)\n        i += 1\n    num_list.reverse()\n",
        "num_ids": 86
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    n = len(num_list)\n    while(index < n):\n        if num_list[index]!= 0:\n            num_list.append(num_list[index])\n            del num_list[index]\n        index += 1\n    return num_list\n",
        "num_ids": 72
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[zero_count], num_list[i] = num_list[i], num_list[zero_count]\n            zero_count += 1\n    return num_list\n",
        "num_ids": 80
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    for num in num_list:\n        if num!= 0:\n            break\n    else:\n        num_list.append(0)\n    for num in num_list[:]:\n        if num == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 82
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return num_list\n    elif len(num_list) == 1:\n        return num_list\n    elif len(num_list) == 2 and num_list[0] == 0:\n        return num_list\n    elif len(num_list) == 2 and num_list[1] == 0:\n        return num_list[1::] + num_list[:1:]\n    elif len(num_list) == 2 and num_list[0] == 0 and num_list[1] == 0:\n        return []\n    elif len(num_list) > 2 and num_list[0] == 0:\n        return num_list[1::] + num_list[:1:]\n    else:\n        return num_list\n",
        "num_ids": 192
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    i=0\n    count=0\n    while i<len(num_list):\n        if num_list[i]!=0:\n            num_list[count]=num_list[i]\n            i+=1\n            count+=1\n        else:\n            i+=1\n    \n    while count<len(num_list):\n        num_list[count]=0\n        count+=1\n    \n    return num_list\n",
        "num_ids": 106
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    lst = []\n    for x in num_list:\n        if x!= 0:\n            lst.append(x)\n    return lst + [0] * num_list.count(0)\n    \n    \n    \ndef max_sum_of_sublist(num_list):\n    '''\n    Write a python function to find the maximum sum of all the sublist of the given list.\n    '''\n    n = len(num_list)\n    if n == 0:\n        return 0\n    curr_sum = 0\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += num_list[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n    \n    \ndef palindrome(word):\n    '''\n    Write a python function to check whether the given word is palindrome or not.\n    '''\n    if word == word[::-1]:\n        return True\n    return False\n    \n    \ndef remove_all_occurences(char, word):\n    '''\n    Write a python function to remove all occurences of the given character from a word.\n    '''\n    return word.replace(char, '')\n    \n    \ndef find_max_and_min_by_grouping(num_list):\n    '''\n    Write a python function to find maximum and minimum number in a list by grouping the elements in a list.\n    '''\n    n = len(num_list)\n    if n == 0:\n        return []\n    res = []\n    num_list.sort()\n    min_num = num_list[0]\n    max_num = num_list[n-1]\n    for i in range(n):\n        if min_num > num_list[i]:\n            min_num = num_list[i]\n        if max_num < num_list[n-i-1]:\n            max_num = num_list[n-i-1]\n    res.append(min_num)\n    res.append(max_num)\n    return res\n    \n    \ndef find_max_and_min_by_grouping(num_list):\n    '''\n    Write a python function to find maximum and minimum number in a list by grouping the elements in a list.\n    '''\n    n = len(num_list)\n    if n == 0:\n        return []\n    res = []\n    num_list.sort()\n    min_num = num_list[0]\n    max_num = num_list[n-1]\n    for i in range(n):\n        if min_num > num_list[i]:\n            min_num = num_list[i]\n        if max_num < num_list[n-i-1]:\n            max_num = num_list[n-i-1]\n    res.append(min_num)\n    res.append(max_num)\n    return res\n    \n    \ndef find_max_and_min_by_grouping(num_list):\n    '''\n    Write a python function to find maximum and minimum number in a list by grouping the elements in a list.\n    '''\n    n = len(num_list)\n    if n == 0:\n        return []\n    res = []\n    num_list.sort()\n    min_num = num_list[0]\n    max_num = num_list[n-1]\n    for i in range(n):\n        if min_num > num_list[i]:\n            min_num = num_list[i]\n        if max_num < num_list[n-i-1]:\n            max_num = num_list[n-i-1]\n    res.append(min_num)\n    res.append(max_num)\n    return res\n    \n    \ndef count_substring(string, sub_string):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given string.\n    '''\n    if string == '':\n        return 0\n    if sub_string == '':\n        return 0\n    return string.count(sub_string)\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    string = string.lower()\n    return string == string[::-1]\n    \n    \ndef count_substring(string, sub_string):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given string.\n    '''\n    if string == '':\n        return 0\n    if sub_string == '':\n        return 0\n    return string.count(sub_string)\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    string = string.lower()\n    return string == string[::-1]\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    string = string.lower()\n    return string == string[::-1]\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    string = string.lower()\n    return string == string[::-1]\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    string = string.lower()\n    return string == string[::-1]\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    string = string.lower()\n    return string == string[::-1]\n    \n    \ndef remove_all_occurences(char, word):\n    '''\n    Write a python function to remove all occurences of the given character from a word.\n    '''\n    if char == '':\n        return ''\n    return word.replace(char, '')\n    \n    \ndef remove_all_occurences(char, word):\n    '''\n    Write a python function to remove all occurences of the given character from a word.\n    '''\n    if char == '':\n        return ''\n    return word.replace(char, '')\n    \n    \ndef remove_all_occurences(char, word):\n    '''\n    Write a python function to remove all occurences of the given character from a word.\n    '''\n    if char == '':\n        return ''\n    return word.replace(char, '')\n    \n    \ndef remove_all_occurences(char, word):\n    '''\n    Write a python function to remove all occurences of the given character from a word.\n    '''\n    if char == '':\n        return ''\n    return word.replace(char, '')\n    \n    \ndef remove_all_occurences(char, word):\n    '''\n    Write a python function to remove all occurences of the given character from a word.\n    '''\n    if char == '':\n        return ''\n    return word.replace(char, '')\n    \n    \ndef remove_all_occurences(char, word):\n    '''\n    Write a python function to remove all occurences of the given character from a word.\n    '''\n    if char == '':\n        return ''\n    return word.replace(char, '')\n    \n    \ndef remove_all_occurences(char, word):\n    '''\n    Write a python function to remove all occurences of the given character from a word.\n    '''\n    if char == '':\n        return ''\n    return word.replace(char, '')\n    \n    \ndef remove_all_occurences(char, word):\n    '''\n    Write a python function to remove all occurences of the given character from a word.\n    '''\n    if char == '':\n        return ''\n    return word.replace(char, '')\n    \n    \ndef remove_all_occurences(char",
        "num_ids": 38
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list[:] = [num for num in num_list if num!= 0]\n    num_list.extend([0] * len(num_list))\n    return num_list\n    \nif __name__ == \"__main__\":\n    num_list = [0, 2, 1, 2, 1, 1, 2, 2, 0]\n    print(move_zero(num_list)",
        "num_ids": 97
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    index = 0\n    while index < len(num_list) and num_list[index]!= 0:\n        index += 1\n    \n    while index < len(num_list):\n        if num_list[index] == 0:\n            num_list.pop(index)\n            num_list.append(0)\n        index += 1\n",
        "num_ids": 86
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    l = []\n    for i in range(n):\n        l.append(arr[i])\n    l.sort()\n    s = 0\n    for i in range(n-1):\n        s += l[i] ^ l[i+1]\n    print(\"Sum of pairs of XOR of all pairs of numbers:\",s)\n",
        "num_ids": 82
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(0,n-1) :\n        sum=sum^arr[i]\n        print(sum)\n        for j in range(i+1,n) :\n            sum=sum^arr[j]\n            print(sum)\n    return sum\n    \n",
        "num_ids": 73
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += (arr[i] ^ arr[j])\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    SUM = 0\n    for i in range(n) : \n        SUM = (SUM + arr[i])^arr[i]\n    print(\"The given list\",arr,\"\\n\")\n    print(\"The sum of the XOR of all pairs of numbers in the given list is\",SUM)\n    return\n",
        "num_ids": 77
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(n-1) : \n        for j in range(i+1,n) : \n            sum=sum+(arr[i]^arr[j])\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(a^b for a,b in zip(arr,arr[1:]))\n",
        "num_ids": 24
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = xor ^ (arr[i] ^ arr[j])\n    return xor\n    \ndef pair_xor_Sum2(arr,n) : \n    '''\n    Using bit manipulation.\n    '''\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    return xor\n    \ndef findSumOfTwo(arr,n,sum):\n    '''\n    Write a python function to find the number of pairs of numbers in the array such that their sum is equal to sum.\n    '''\n    pair_cnt = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] + arr[j] == sum):\n                pair_cnt = pair_cnt + 1\n    return pair_cnt\n    \ndef findSumOfTwo2(arr,n,sum):\n    '''\n    Using bit manipulation.\n    '''\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    return ((xor & ~sum) == 0)\n    \ndef sumOfPairs(arr, n, k):\n    '''\n    You are given an array of integers in which every element appears exactly twice, except for one element which appears exactly once.\n    Find this single element that appears only once.\n    '''\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == k:\n                return arr[i]\n    return -1\n    \ndef sumOfPairs2(arr, n, k):\n    '''\n    Using bit manipulation.\n    '''\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    return ((xor & ~k) == 0)\n    \ndef findMaxSumSubarray(arr, n):\n    '''\n    Given an array of numbers, find the contiguous subarray of given length which has maximum sum.\n    '''\n    sum = 0\n    max_sum = -1\n    for i in range(n):\n        sum = sum + arr[i]\n        if (sum > max_sum):\n            max_sum = sum\n            start = i\n    sum = 0\n    for i in range(start,n):\n        sum = sum + arr[i]\n    return (sum, start)\n    \ndef findMaxSumSubarray2(arr, n):\n    '''\n    Using bit manipulation.\n    '''\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    max_sum = xor\n    start = 0\n    for i in range(1,n):\n        xor = xor - arr[start] + arr[i]\n        if (xor > max_sum):\n            max_sum = xor\n            start = i\n    return (max_sum, start)\n    \ndef sumOfBeauty(arr, n):\n    '''\n    You are given an array of integers. Find and return the maximum beauty value in the array.\n    A beauty value is equal to the difference between the maximum value and minimum value of the array.\n    '''\n    return (max(arr)-min(arr))\n    \ndef sumOfBeauty2(arr, n):\n    '''\n    Using bit manipulation.\n    '''\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    return (max(arr)-min(arr))\n    \ndef countSmaller(arr, n):\n    '''\n    You are given an array. You need to find number of smaller elements than the element in the array.\n    '''\n    count = 0\n    arr = list(arr)\n    for i in range(n):\n        arr[i] = arr[i] - 1\n    for i in range(n):\n        count = count + arr[i]\n    return count\n    \ndef countSmaller2(arr, n):\n    '''\n    Using bit manipulation.\n    '''\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    return xor\n    \ndef countSmaller3(arr, n):\n    '''\n    Using counting sort.\n    '''\n    count = [0 for i in range(len(arr))]\n    for i in range(n):\n        count[arr[i]] += 1\n    for i in range(n-1, 0, -1):\n        count[i] = count[i] + count[i+1]\n    return count\n    \ndef countSmaller4(arr, n):\n    '''\n    Using sorting.\n    '''\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i] == i:\n            count += 1\n    return count\n    \ndef countSmaller5(arr, n):\n    '''\n    Using recursion.\n    '''\n    count = 0\n    if n == 0 or len(arr) == 0:\n        return count\n    if arr[n-1] == n-1:\n        count = 1\n    else:\n        count = countSmaller(arr[:n-1], n-1)\n    return count + countSmaller(arr[:n-1], n-1)\n    \ndef countSmaller6(arr, n):\n    '''\n    Using dynamic programming.\n    '''\n    dp = [0 for i in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = dp[i] + dp[j]\n    return dp[n-1]\n    \ndef countSmaller7(arr, n):\n    '''\n    Using heap.\n    '''\n    from heapq import heappush, heappop\n    arr = list(arr)\n    h = []\n    for i in range(n):\n        heappush(h, arr[i])\n    count = 0\n    while len(h) > 0:\n        tmp = heappop(h)\n        if tmp == n-1:\n            count += 1\n        else:\n            heappush(h, tmp+1)\n    return count\n    \ndef countSmaller8(arr, n):\n    '''\n    Using counting sort.\n    '''\n    count = [0 for i in range(len(arr))]\n    for i in range(n):\n        count[arr[i]] += 1\n    for i in range(n-1, 0, -1):\n        count[i] = count[i] + count[i+1]\n    return count[0]\n    \ndef countSmaller9(arr, n):\n    '''\n    Using recursion.\n    '''\n    count = 0\n    if n == 0 or len(arr) == 0:\n        return count\n    if arr[n-1] == n-1:\n        count = 1\n    else:\n        count = countSmaller(arr[:n-1], n-1)\n    return count + countSmaller(arr[:n-1], n-1)\n    \ndef countSmaller10(arr, n):\n    '''\n    Using dynamic programming.\n    '''\n    dp = [0 for i in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = dp[i] + dp[j]\n    return dp[n-1]\n    \ndef countSmaller11(arr, n):\n    '''\n    Using heap.\n    '''\n    from heapq import heappush, heappop\n    arr = list(arr)\n    h = []\n    for i in range(n):\n        heappush(h, arr[i])\n    count = 0\n    while len(h) > 0:\n        tmp = heappop(h)\n        if tmp == n-1:\n            count += 1\n        else:\n            heap",
        "num_ids": 95
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n-1) : \n        ans = ans + (arr[i] ^ arr[i+1])\n    return ans\n        \nprint(pair_xor_Sum([1,2,3,4],4)) \n",
        "num_ids": 67
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pair_xor_Sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            pair_xor_Sum = pair_xor_Sum + (arr[i] ^ arr[j])\n    return pair_xor_Sum\n",
        "num_ids": 71
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = xor ^ arr[i] ^ arr[j]\n    return xor\n",
        "num_ids": 52
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    output = []\n    while iterable:\n        output.append(iterable.pop(0))\n    return output\n",
        "num_ids": 42
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    heapq.heapify(h)\n    for element in iterable:\n        heapq.heappush(h,element)\n    return h\n",
        "num_ids": 45
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable:\n        hq.heapify(iterable)\n        sorted_list = []\n        while iterable:\n            sorted_list.append(hq.heappop(iterable))\n        return sorted_list\n",
        "num_ids": 59
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sort_list = []\n    for i in iterable:\n        hq.heappush(sort_list, i)\n    return list(sort_list)\ndef merge_sort(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\ndef merge(iterable1, iterable2):\n    '''\n    Write a function that takes two lists and returns a new list that is the same as the original two list, but sorted in ascending order.\n    '''\n    index = 0\n    for i in range(len(iterable1) + len(iterable2)):\n        if index >= len(iterable1):\n            iterable2[index - len(iterable1)] = iterable2[index]\n            index = index - len(iterable1)\n        elif index >= len(iterable2):\n            iterable1[index - len(iterable2)] = iterable1[index]\n            index = index - len(iterable2)\n        elif iterable1[index] < iterable2[index]:\n            iterable1[index] = iterable1[index]\n            index = index + 1\n        elif iterable2[index] < iterable1[index]:\n            iterable2[index] = iterable2[index]\n            index = index + 1\n    return iterable1 + iterable2\ndef heap_sort_2(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sort_list = []\n    for i in iterable:\n        hq.heappush(sort_list, i)\n    return list(sort_list)\ndef merge_sort_2(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_2(left)\n    right = merge_sort_2(right)\n    return merge(left, right)\ndef merge(iterable1, iterable2):\n    '''\n    Write a function that takes two lists and returns a new list that is the same as the original two list, but sorted in ascending order.\n    '''\n    if iterable2[0] < iterable1[0]:\n        return iterable2\n    elif iterable2[0] > iterable1[0]:\n        return iterable1\n    elif iterable2[1] > iterable1[1]:\n        return iterable2\n    else:\n        return iterable1\ndef merge_sort_2(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_2(left)\n    right = merge_sort_2(right)\n    return merge(left, right)\ndef merge_sort_3(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_3(left)\n    right = merge_sort_3(right)\n    return merge(left, right)\ndef merge(iterable1, iterable2):\n    '''\n    Write a function that takes two lists and returns a new list that is the same as the original two list, but sorted in ascending order.\n    '''\n    if iterable2[0] < iterable1[0]:\n        return iterable2\n    elif iterable2[0] > iterable1[0]:\n        return iterable1\n    elif iterable2[1] > iterable1[1]:\n        return iterable2\n    else:\n        return iterable1\ndef merge_sort_4(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_4(left)\n    right = merge_sort_4(right)\n    return merge(left, right)\ndef merge_sort_5(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_5(left)\n    right = merge_sort_5(right)\n    return merge(left, right)\ndef merge_sort_6(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_6(left)\n    right = merge_sort_6(right)\n    return merge(left, right)\ndef merge_sort_7(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_7(left)\n    right = merge_sort_7(right)\n    return merge(left, right)\ndef merge_sort_8(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_8(left)\n    right = merge_sort_8(right)\n    return merge(left, right)\ndef merge_sort_9(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_9(left)\n    right = merge_sort_9(right)\n    return merge(left, right)\ndef merge_sort_10(iterable):\n    '''\n    Write a function that takes a list and returns a new list that is the same as the list, but sorted in ascending order.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable)//2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = merge_sort_10(left)\n    right = merge_sort_10(right)\n    return merge(left, right)\ndef merge_sort_11(iterable):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    min_heap = []\n    for i in iterable:\n        hq.heappush(min_heap, i)\n    return [i for i in min_heap][::-1]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        heapq.heappush(heap, i)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n",
        "num_ids": 57
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    result = []\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    while heap:\n        heapq.heappush(result, hq.heappop(heap))\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n",
        "num_ids": 70
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    new_h = hq.heapify(iterable)\n    sort_h = []\n    for i in range(len(new_h)):\n        sort_h.append(new_h.pop())\n    return sort_h\n",
        "num_ids": 59
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: -x)\n",
        "num_ids": 18
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"No Profit or Loss\")\n    else:\n        print(\"Profit\")\n",
        "num_ids": 33
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost_int = int(actual_cost)\n    sale_amount_int = int(sale_amount)\n    if actual_cost_int == sale_amount_int:\n        print(\"No Profit and Loss\")\n    elif actual_cost_int > sale_amount_int:\n        print(\"Profit\")\n    else:\n        print(\"Loss\")\n        \ndef test_noprofit_noloss():\n    actual_cost = '1.00'\n    sale_amount = '2.00'\n    print(f\"Expected: No Profit and Loss\\nActual: {noprofit_noloss(actual_cost,sale_amount)}\")\n",
        "num_ids": 162
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_cost = actual_cost + sale_amount \n    profit = 0\n    loss = 0\n    if total_cost > sale_amount:\n        profit = total_cost - sale_amount\n        loss = sale_amount\n    else:\n        loss = total_cost - sale_amount\n        profit = 0\n    if profit == 0 and loss == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(noprofit_noloss(1000, 500)) \n",
        "num_ids": 119
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"No profit and loss\")\n        return 0\n    else:\n        if actual_cost > sale_amount:\n            print(\"No profit and loss\")\n            return 0\n        else:\n            print(\"Profit and loss\")\n            return 1\n",
        "num_ids": 71
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    cost_list = actual_cost.split(\",\")\n    #print(cost_list)\n    sales_list = sale_amount.split(\",\")\n    #print(sales_list)\n    profit = 0\n    for cost in cost_list:\n        if float(cost) > float(sales_list[0]):\n            print(\"No Profit\")\n            profit = 1\n    if profit == 0:\n        print(\"Profit\")\n    else:\n        print(\"No Profit\")\n    return profit\n",
        "num_ids": 123
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0: \n        return True\n    if actual_cost > 0 and sale_amount == actual_cost:\n        return True\n    if actual_cost < sale_amount:\n        return False\n    if actual_cost > sale_amount:\n        return False\n    \nactual_cost = float(input(\"Enter actual cost: \"))\nsale_amount = float(input(\"Enter sale amount: \"))\n",
        "num_ids": 99
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit == 0:\n        print('yes')\n    else:\n        print('no')\n",
        "num_ids": 36
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"profit and loss is 0\")\n    else:\n        print(\"profit and loss is \",actual_cost-sale_amount)\nnoprofit_noloss(actual_cost=58.5,sale_amount=115) \n",
        "num_ids": 69
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"NO PROFIT AND NO LOSS\")\n    else:\n        print(\"PROFIT AND LOSS\")\n",
        "num_ids": 41
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    wci = (35.74 + 0.6215 * t - 35.75 * math.pow(v, 0.16) + 0.4275 * math.pow(t, 0.16) + 0.00677 * math.pow(v, 0.16))\n    return round(wci)\n",
        "num_ids": 92
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = (35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16)\n    return round(wind_chill)\n",
        "num_ids": 54
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #CHILL OF WEATHER\n    #Calculate the wind chill\n    vchill = 35.74 + 0.6215 * t + 11.37 * (v ** 0.16) - 35.75 * (v ** 0.16) * (t ** 0.16)\n    return int(vchill)\n",
        "num_ids": 76
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74 + (0.6215 * t) - 35.75 * (v ** 0.16) + 0.4275 * (t ** 0.16)\n    return math.floor(a)\n",
        "num_ids": 52
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temp = t\n    wind_chill = 35.74 + 0.6215*temp - 35.75*math.pow(wind_speed/2.23,0.16) + 0.4275*math.pow(wind_speed/2.23,2) - 35.75*math.pow(wind_speed/2.23,3)\n    return wind_chill\n    \ndef activity_routine():\n    '''\n    Write a function that takes in the maximum weight (in lbs) that the user is allowed to put in to lift and the number of days of the week the user is active.\n    The function should calculate the time needed to lift the weight and then print the information to the user\n    '''\n    max_weight = input('Enter your maximum weight: ')\n    num_days = input('Enter the number of days: ')\n    max_weight_lb = float(max_weight)\n    num_days_int = int(num_days)\n    days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']\n    hours = ['00','01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']\n    if num_days_int > 7:\n        print('Please enter a valid number of days: ')\n        return activity_routine()\n    time_needed = ((max_weight_lb/2.2)/8)\n    time_needed = math.ceil(time_needed)\n    print('You need to lift'+ str(max_weight_lb) +'lbs of weight before you can begin your daily routine!')\n    print('We are calculating the time needed to lift'+ str(time_needed) +'lbs of weight for'+ days[num_days_int] + '.')\n    print('Your time is about:'+ str(hours[num_days_int]) +'hours')\n    return activity_routine()\n    \ndef current_temperature(fahrenheit):\n    '''\n    Write a function that takes in a temperature in celsius as an integer and returns the temperature in fahrenheit in a floating point number\n    '''\n    temperature = float(fahrenheit)\n    temperature_in_celsius = (temperature - 32)*(5/9)\n    return temperature_in_celsius\n    \ndef fare_calculator(distance,price):\n    '''\n    Write a function that takes in a distance in miles, and a price in dollars and returns the total amount of the fare.\n    '''\n    if distance == 0:\n        distance = distance\n    else:\n        distance = float(distance)\n    fare = distance*float(price)\n    return fare\n    \ndef kilometers_to_miles(km):\n    '''\n    Write a function that takes in a distance in kilometers and returns the total distance in miles.\n    '''\n    miles = km*0.621371\n    return miles\n",
        "num_ids": 18
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 35.75\n    f = 0.4275\n    g = 9.81\n    if v>=63:\n        return \"ERROR\"\n    t = t + 273.15\n    v = v * math.pow(10, 3)\n    u = v / (a*math.exp((b*c)/(d*t)))\n    u = u * (math.pow(10, 7))\n    wci = 35.74 + (0.6215 * t) + (0.4275 * (t - 273.15)) - (v * math.pow((0.6215 * t) + (0.4275 * (t - 273.15)),2)) + (0.224 * math.pow((t - 273.15), 2)) - (0.224 * (t - 273.15)) * (v ** 2)\n    wci = math.floor(wci)\n    return wci\n",
        "num_ids": 248
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def get_wa():\n        return 4.25*t + 35.75*v**0.16 + 0.4275*v**0.16 + 35.75\n    wa = get_wa()\n    return int(wa)\n    \ndef distance_btwn_points(p1, p2):\n    '''\n    Write a function to calculate the distance between two points in a 2D plane given their x,y coordinates.\n    '''\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n    \ndef two_points_intersect(p1, p2, p3, p4):\n    '''\n    Write a function to determine whether or not two lines segments intersect.\n    '''\n    if (p1[0] - p2[0])*(p3[1] - p4[1]) - (p1[1] - p2[1])*(p3[0] - p4[0]) == 0:\n        return True\n    else:\n        return False\n    \ndef points_on_line(p1,p2, p3, p4):\n    '''\n    Write a function to determine if two points are on a line segment.\n    '''\n    if (p1[0] - p2[0])*(p3[1] - p4[1]) - (p1[1] - p2[1])*(p3[0] - p4[0]) == 0:\n        return True\n    else:\n        return False\n    \ndef get_nearest_point_to_line(p1,p2, p3, p4):\n    '''\n    Write a function to get the nearest point to a line segment given two points and the line segment's endpoints.\n    '''\n    if (p1[0] - p2[0])*(p3[1] - p4[1]) - (p1[1] - p2[1])*(p3[0] - p4[0])!= 0:\n        # x is distance from p3 to p4\n        if (p3[0] - p4[0]) == 0:\n            x = p3[0]\n            y = (p1[0] - p2[0])/(p1[1] - p2[1])*(x - p1[0]) + p1[0]\n        else:\n            x = (p1[1] - p2[1])/(p3[1] - p4[1])*(p1[0] - p3[0]) + p3[0]\n            y = (p1[1] - p2[1])/(p3[1] - p4[1])*(x - p1[0]) + p1[1]\n        return (x, y)\n    else:\n        # check if p1 p2 p3 p4 are colinear\n        x = p3[0]\n        y = p3[1]\n        return (x, y)\n    \ndef get_nearest_point_to_line_fast(p1, p2, p3, p4):\n    '''\n    Write a function to get the nearest point to a line segment given two points and the line segment's endpoints.\n    '''\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x4, y4 = p4\n    d1 = (x4-x3)**2 + (y4-y3)**2\n    d2 = (x1-x2)**2 + (y1-y2)**2\n    d3 = (x3-x4)**2 + (y3-y4)**2\n    d4 = (x2-x1)**2 + (y2-y1)**2\n    if d1 < d2:\n        if d1 < d3:\n            if d1 < d4:\n                return p3\n            else:\n                return p4\n        else:\n            if d2 < d3:\n                return p1\n            else:\n                return p2\n    else:\n        if d2 < d4:\n            return p2\n        else:\n            return p1\n    \ndef get_nearest_point_to_line_fast_negative(p1, p2, p3, p4):\n    '''\n    Write a function to get the nearest point to a line segment given two points and the line segment's endpoints.\n    '''\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x4, y4 = p4\n    d1 = (x4-x3)**2 + (y4-y3)**2\n    d2 = (x1-x2)**2 + (y1-y2)**2\n    d3 = (x3-x4)**2 + (y3-y4)**2\n    d4 = (x2-x1)**2 + (y2-y1)**2\n    if d1 < d2:\n        if d1 < d3:\n            if d1 < d4:\n                return p3\n            else:\n                return p4\n        else:\n            if d2 < d3:\n                return p1\n            else:\n                return p2\n    else:\n        if d2 < d4:\n            return p2\n        else:\n            return p1\n    \ndef get_nearest_point_to_line_fast_negative_cache(p1, p2, p3, p4):\n    '''\n    Write a function to get the nearest point to a line segment given two points and the line segment's endpoints.\n    '''\n    cache = {}\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x4, y4 = p4\n    d1 = (x4-x3)**2 + (y4-y3)**2\n    d2 = (x1-x2)**2 + (y1-y2)**2\n    d3 = (x3-x4)**2 + (y3-y4)**2\n    d4 = (x2-x1)**2 + (y2-y1)**2\n    if d1 < d2:\n        if d1 < d3:\n            if d1 < d4:\n                return p3\n            else:\n                return p4\n        else:\n            if d2 < d3:\n                return p1\n            else:\n                return p2\n    else:\n        if d2 < d4:\n            return p2\n        else:\n            return p1\n    \ndef get_nearest_point_to_line_fast_negative_cache_int(p1, p2, p3, p4):\n    '''\n    Write a function to get the nearest point to a line segment given two points and the line segment's endpoints.\n    '''\n    cache = {}\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    x4, y4 = p4\n    d1 = (x4-x3)**2 + (y4-y3)**2\n    d2 = (x1-x2)**2 + (y1-y2)**2\n    d3 = (x3-x4)**2 + (y3-y4)**2\n    d4 = (x2-x1)**2 + (y2-y1)**2\n    if d1 < d2:\n        if d1 < d3:\n            if d1 < d4:\n                cache[p3] = p3\n                return p3\n            else:\n                cache[p4] = p4\n                return p4\n        else:\n            if d2 < d3:\n                cache[p1] = p1\n                return p1\n            else:\n                cache[p2] = p2\n                return p2\n    else:\n        if d2 < d4:\n            return p2\n        else:\n            return p1\n    \ndef get_nearest_point_to_line_fast_negative_cache_int_lower(p1, p2, p3, p4):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v/3.6\n    t = t+273.15\n    z = 35.74 + 0.6215*t - 35.75*math.pow(v,0.16) + 0.4275*math.pow(v,0.16)*math.pow(t,0.16)\n    z = round(z)\n    return z\n",
        "num_ids": 90
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #calculate windchill\n    v_corr = v*1.6\n    t_corr = t+273.5\n    return 13.12 + (0.6215*t_corr) - (11.37*v_corr**0.16) + (0.3965*v_corr**0.16)\n",
        "num_ids": 84
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    windchill = 35.74 + (0.6215 * t) - 35.75 * math.pow(v,0.16) + 0.4275 * t * math.pow(v,0.16)\n    return int(windchill)\nprint(wind_chill(5,30))\n",
        "num_ids": 76
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_no_lowercase = []\n    for s in sample_names:\n        if s.startswith(('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')):\n            sample_names_no_lowercase.append(s)\n    return(len(sample_names_no_lowercase))\n",
        "num_ids": 116
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sample_nam(sample_names):\n        def remove_names(sample_name):\n            name_list = list(sample_name.split(' '))\n            return''.join([word for word in name_list if not word.startswith('a')])\n        return sum([len(remove_names(sample_name)) for sample_name in sample_names])\n    return sample_nam\n",
        "num_ids": 94
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = ['wirq', 'qwir', 'qirw', 'nimbus', 'vwxyz', 'zv']\n    sum = 0\n    for name in names:\n        if len(name) > 1 and name[0]!= 'q':\n            sum += len(name)\n    return sum\n",
        "num_ids": 79
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if not sample_names:\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #sample_names = ['Adam', 'Alex', 'Zoe', 'John', 'Beth', 'Peter', 'Mark', 'Jane', 'John', 'Joe', 'Billy', 'Brad']\n    #output = 8\n    result = 0\n    for name in sample_names:\n        if name[0].islower():\n            result += len(name)\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    ans = 0\n    for name in sample_names:\n        if name[0].islower():\n            ans += len(name)\n    return ans\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n    nums = [1,2,3,4,5]\n    names = ['mary','harry','tom','jerry','john']\n    #names.sort()\n    #names.sort(key=str.lower)\n    #print(names)\n    #print(names.sort(key=str.lower))\n    #print(names)\n    #names.sort(key=str.lower)\n    #nums.sort()\n    #names = [n for n in names if not n.startswith('j')]\n    #nums = [n for n in nums if n>2]\n    #print(names)\n    #print(nums)\n    #names = [name for name in names if not name.startswith('j')]\n    #nums = [n for n in nums if n>2]\n    #print(names)\n    #print(nums)\n    #names = [n for n in names if n.startswith('j')]\n    #nums = [n for n in nums if n>2]\n    #print(names)\n    #print(nums)\n    names = ['joe','james','jimmy','jane','john']\n    #names = [n for n in names if n.startswith('j')]\n    #print(names)\n    #names = []\n    #for name in names:\n    #    if not name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #for i in range(len(names)-1,-1,-1):\n    #    if not names[i].startswith('j'):\n    #        del names[i]\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #for i in range(len(names)-1,-1,-1):\n    #    if not names[i].startswith('j'):\n    #        names.pop(i)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #for i in range(len(names)-1,-1,-1):\n    #    if not names[i].startswith('j'):\n    #        names.pop(i)\n    #print(names)\n    names = ['joe','james','jimmy','jane','john']\n    for i in range(len(names)-1,-1,-1):\n        if not names[i].startswith('j'):\n            names.pop(i)\n    print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #for i in range(len(names)-1,-1,-1):\n    #    if not names[i].startswith('j'):\n    #        names.pop(i)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #for i in range(len(names)-1,-1,-1):\n    #    if not names[i].startswith('j'):\n    #        names.pop(i)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if not name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james','jimmy','jane','john']\n    #names = []\n    #for name in names:\n    #    if name.startswith('j'):\n    #        names.append(name)\n    #print(names)\n    #names = ['joe','james',",
        "num_ids": 2002
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names.split(' ')\n    nam_len = len(sample_names)\n    nam_sum = 0\n    for n in sample_names:\n        if n[0].islower():\n            nam_sum += len(n)\n    return nam_len - nam_sum\n",
        "num_ids": 76
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    lowercase_letter = re.compile('^[a-z]')\n    sum_of_nam = 0\n    for name in sample_names:\n        if lowercase_letter.match(name):\n            sum_of_nam += len(name)\n    return sum_of_nam\n",
        "num_ids": 75
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(n) for n in sample_names if n[0].islower())\n",
        "num_ids": 25
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.split('(')\n    result = ''\n    for i in range(len(items)):\n        items[i] = items[i].split(')')[0]\n        result = result + items[i] +''\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", items)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i = 0\n    while(i<len(items)):\n        if items[i] == '(' and items[i+1] == ')':\n            items.pop(i+1)\n            items.pop(i)\n        else:\n            i+=1\n    return items\n    \ndef remove_all_but_alphabet(items):\n    '''\n    Write a function to remove all items that are not alphabetic characters from a string.\n    '''\n    items = list(items)\n    items = remove_parenthesis(items)\n    i = 0\n    while(i<len(items)):\n        if items[i].isalpha() == False:\n            items.pop(i)\n            i-=1\n        else:\n            i+=1\n    return items\n",
        "num_ids": 77
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\n",
        "num_ids": 19
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\",\"\")\n    items = items.replace(\")\",\"\")\n    return items\n",
        "num_ids": 28
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"([\\(\\[].*?[\\)\\]])\"\n    items = re.sub(pattern, '', items)\n    return items\n",
        "num_ids": 38
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if isinstance(items,str):\n        items = items.strip()\n        \n        if items.startswith(\"(\"):\n            items = items.replace('(','').replace(')','')\n        return items\n    else:\n        raise ValueError(f\"The input must be a string not {items}\")\n",
        "num_ids": 78
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #print(items)\n    new_list = []\n    list1 = []\n    list1.append(items)\n    list2 = []\n    list2.append(items)\n    if '(' in list1 or '[' in list1:\n        while '(' in list1 or '[' in list1:\n            for i in list1:\n                if i == '(' or i == '[':\n                    list2.append(i)\n                    list1.remove(i)\n        list3 = []\n        list4 = []\n        if '(' in list1:\n            for i in list1:\n                if i == '(' and i == ')' and '(' in list1 and ')' in list1:\n                    list2.remove(i)\n                    list3.append(i)\n        if '[' in list1:\n            for i in list1:\n                if i == '[' and i == ']' and '[' in list1 and ']' in list1:\n                    list2.remove(i)\n                    list3.append(i)\n        for i in list2:\n            list3.append(i)\n        for i in list3:\n            if i == '(' or i == '[' or i == '{':\n                list4.append(i)\n            elif i == ')' or i == ']' or i == '}':\n                list4.append(i)\n        new_list.append(list4)\n        for i in new_list:\n            for j in i:\n                if j == '(' or j == '[':\n                    i.remove(j)\n                    new_list.remove(i)\n    else:\n        new_list = list2\n    return new_list\n",
        "num_ids": 401
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if not items:\n        return \"\"\n    else:\n        return items.strip('()')\n",
        "num_ids": 25
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 1:\n        return items[0]\n    else:\n        if items[0] == '(':\n            return items[1] + remove_parenthesis(items[2:])\n        elif items[-1] == ')':\n            return remove_parenthesis(items[:-1]) + items[-2]\n        else:\n            return items\ndef parenthesis_check(items):\n    '''\n    Write a function to check if a string is in the form of parenthesis.\n    '''\n    if len(items) == 1:\n        return True\n    else:\n        if items[0] == '(':\n            return parenthesis_check(items[1:])\n        elif items[-1] == ')':\n            return parenthesis_check(items[:-1])\n        else:\n            return False\ndef first_last_position(items):\n    '''\n    Write a function to calculate the first and the last position of a substring within a string.\n    '''\n    def inner(items, str_idx, str_len):\n        if len(items) == 0:\n            return str_idx, str_idx + str_len\n        elif items[0] == str_idx:\n            return inner(items[1:], str_idx, str_len)\n        else:\n            return inner(items[1:], str_idx, str_len)\n    return inner(items, 0, len(items))\ndef get_matching_characters(items):\n    '''\n    Write a function to find and return all characters that appear more than once in a string.\n    '''\n    if len(items) == 1:\n        return items[0]\n    else:\n        if items[0] == items[1]:\n            return get_matching_characters(items[2:])\n        else:\n            return items[0]\ndef get_matching_characters_curry(items):\n    '''\n    Write a function to find and return all characters that appear more than once in a string.\n    '''\n    def inner(items, start_idx):\n        if len(items) == 0:\n            return start_idx\n        elif items[0] == items[1]:\n            return inner(items[2:], start_idx)\n        else:\n            return inner(items[2:], start_idx)\n    return inner(items, 0)\ndef all_consecutive(items):\n    '''\n    Write a function to check if all characters in a string are consecutive.\n    '''\n    if len(items) == 1:\n        return True\n    else:\n        if items[0] == items[1]:\n            return all_consecutive(items[1:])\n        else:\n            return False\ndef all_consecutive_curry(items):\n    '''\n    Write a function to check if all characters in a string are consecutive.\n    '''\n    def inner(items, start_idx):\n        if len(items) == 0:\n            return True\n        elif items[0] == items[1]:\n            return inner(items[1:], start_idx)\n        else:\n            return False\n    return inner(items, 0)\ndef is_palindrome(items):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(items) == 1:\n        return True\n    else:\n        if items[0] == items[-1]:\n            return is_palindrome(items[1:-1])\n        else:\n            return False\ndef is_palindrome_curry(items):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    def inner(items, start_idx):\n        if len(items) == 0:\n            return True\n        elif items[0] == items[-1]:\n            return inner(items[1:-1], start_idx)\n        else:\n            return False\n    return inner(items, 0)\ndef is_palindrome_with_replacement(items):\n    '''\n    Write a function to check if a string is a palindrome with replacement.\n    '''\n    if len(items) == 1:\n        return True\n    else:\n        if items[0] == items[-1]:\n            return is_palindrome_with_replacement(items[1:-1])\n        else:\n            return False\ndef is_palindrome_with_replacement_curry(items):\n    '''\n    Write a function to check if a string is a palindrome with replacement.\n    '''\n    def inner(items, start_idx):\n        if len(items) == 0:\n            return True\n        elif items[0] == items[-1]:\n            return inner(items[1:-1], start_idx)\n        else:\n            return False\n    return inner(items, 0)\ndef get_sum_of_digits(items):\n    '''\n    Write a function to calculate the sum of all digits in a string.\n    '''\n    def inner(items, start_idx):\n        if len(items) == 0:\n            return 0\n        elif items[0] == '0':\n            return inner(items[1:], start_idx)\n        else:\n            return inner(items[1:], start_idx + int(items[0]))\n    return inner(items, 0)\ndef get_sum_of_digits_curry(items):\n    '''\n    Write a function to calculate the sum of all digits in a string.\n    '''\n    def inner(items, start_idx):\n        if len(items) == 0:\n            return 0\n        elif items[0] == '0':\n            return inner(items[1:], start_idx)\n        else:\n            return inner(items[1:], start_idx + int(items[0]))\n    return inner(items, 0)\ndef is_valid_password(items):\n    '''\n    Write a function to check if a password is valid. A valid password must contain at least one uppercase letter, one lowercase letter, and one digit.\n    '''\n    if len(items) == 1:\n        return True\n    else:\n        if items[0].isupper() and items[1].isupper() and items[2].isdigit():\n            return is_valid_password(items[3:])\n        else:\n            return False\ndef is_valid_password_curry(items):\n    '''\n    Write a function to check if a password is valid. A valid password must contain at least one uppercase letter, one lowercase letter, and one digit.\n    '''\n    def inner(items, start_idx):\n        if len(items) == 0:\n            return True\n        elif items[0].isupper() and items[1].isupper() and items[2].isdigit():\n            return inner(items[3:], start_idx)\n        else:\n            return False\n    return inner(items, 0)\ndef count_same_characters(items):\n    '''\n    Write a function to count the number of occurrences of a substring within a string.\n    '''\n    if len(items) == 1:\n        return 1\n    else:\n        if items[0] == items[1]:\n            return count_same_characters(items[2:])\n        else:\n            return 1 + count_same_characters(items[1:])\ndef count_same_characters_curry(items):\n    '''\n    Write a function to count the number of occurrences of a substring within a string.\n    '''\n    def inner(items, start_idx):\n        if len(items) == 0:\n            return 1\n        elif items[0] == items[1]:\n            return inner(items[2:], start_idx)\n        else:\n            return 1 + inner(items[1:], start_idx)\n    return inner(items, 0)\ndef count_same_characters_efficient(items):\n    '''\n    Write a function to count the number of occurrences of a substring within a string.\n    '''\n    if len(items) == 1:\n        return 1\n    else:\n        if items[0] == items[1]:\n            return count_same_character",
        "num_ids": 39
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n",
        "num_ids": 15
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while i < n:\n        i += 1\n        if i % 2 == 0:\n            i += 1\n        elif i == 3:\n            i += 1\n        else:\n            i += 2\n    return i\n",
        "num_ids": 59
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1))//2 + 1\n    # # sol1: 1.23\n    # return (n * (n + 1)) // 2 + 1\n    # # sol2: 1.28\n    # return (n * (n + 1)) // 2 + 1\n",
        "num_ids": 69
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n**2 + n + 2\n",
        "num_ids": 12
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    while n!= 0:\n        n -= count\n        count += 2\n    return n \n",
        "num_ids": 30
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def nth_non_diagonal(n):\n        def nth_non_diagonal_helper(n, i, j):\n            if i == j:\n                return i * (j - 1) // 2\n            \n            if i!= j:\n                return nth_non_diagonal_helper(n, i + 1, j - 1) + (n - 1)\n            \n        return nth_non_diagonal_helper(n, 0, n - 1)\n",
        "num_ids": 118
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n ** 2 + 1) ** 0.5\n",
        "num_ids": 16
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = 2*n\n    if n==0:\n        return 1\n    if n==2:\n        return 3\n    if n==3:\n        return 6\n    if n==4:\n        return 10\n    if n==5:\n        return 15\n    if n==6:\n        return 21\n    if n==7:\n        return 28\n    if n==8:\n        return 36\n    if n==9:\n        return 45\n    if n==10:\n        return 55\n    if n==11:\n        return 66\n    if n==12:\n        return 78\n    if n==13:\n        return 91\n    if n==14:\n        return 102\n    if n==15:\n        return 113\n    if n==16:\n        return 124\n    if n==17:\n        return 135\n    if n==18:\n        return 146\n    if n==19:\n        return 157\n    if n==20:\n        return 168\n    if n==21:\n        return 179\n    if n==22:\n        return 190\n    if n==23:\n        return 201\n    if n==24:\n        return 213\n    if n==25:\n        return 225\n    if n==26:\n        return 226\n    if n==27:\n        return 228\n    if n==28:\n        return 229\n    if n==29:\n        return 230\n    if n==30:\n        return 231\n    if n==31:\n        return 232\n    if n==32:\n        return 233\n    if n==33:\n        return 234\n    if n==34:\n        return 235\n    if n==35:\n        return 236\n    if n==36:\n        return 237\n    if n==37:\n        return 238\n    if n==38:\n        return 239\n    if n==39:\n        return 240\n    if n==40:\n        return 241\n    if n==41:\n        return 242\n    if n==42:\n        return 243\n    if n==43:\n        return 244\n    if n==44:\n        return 245\n    if n==45:\n        return 246\n    if n==46:\n        return 247\n    if n==47:\n        return 248\n    if n==48:\n        return 249\n    if n==49:\n        return 250\n    if n==50:\n        return 251\n    if n==51:\n        return 252\n    if n==52:\n        return 253\n    if n==53:\n        return 254\n    if n==54:\n        return 255\n    if n==55:\n        return 256\n    if n==56:\n        return 257\n    if n==57:\n        return 258\n    if n==58:\n        return 259\n    if n==59:\n        return 260\n    if n==60:\n        return 261\n    if n==61:\n        return 262\n    if n==62:\n        return 263\n    if n==63:\n        return 264\n    if n==64:\n        return 265\n    if n==65:\n        return 266\n    if n==66:\n        return 267\n    if n==67:\n        return 268\n    if n==68:\n        return 269\n    if n==69:\n        return 270\n    if n==70:\n        return 271\n    if n==71:\n        return 272\n    if n==72:\n        return 273\n    if n==73:\n        return 274\n    if n==74:\n        return 275\n    if n==75:\n        return 276\n    if n==76:\n        return 277\n    if n==77:\n        return 278\n    if n==78:\n        return 279\n    if n==79:\n        return 280\n    if n==80:\n        return 281\n    if n==81:\n        return 282\n    if n==82:\n        return 283\n    if n==83:\n        return 284\n    if n==84:\n        return 285\n    if n==85:\n        return 286\n    if n==86:\n        return 287\n    if n==87:\n        return 288\n    if n==88:\n        return 289\n    if n==89:\n        return 290\n    if n==90:\n        return 291\n    if n==91:\n        return 292\n    if n==92:\n        return 293\n    if n==93:\n        return 294\n    if n==94:\n        return 295\n    if n==95:\n        return 296\n    if n==96:\n        return 297\n    if n==97:\n        return 298\n    if n==98:\n        return 299\n    if n==99:\n        return 300\n    if n==100:\n        return 301\n    if n==101:\n        return 302\n    if n==102:\n        return 303\n    if n==103:\n        return 304\n    if n==104:\n        return 305\n    if n==105:\n        return 306\n    if n==106:\n        return 307\n    if n==107:\n        return 308\n    if n==108:\n        return 309\n    if n==109:\n        return 310\n    if n==110:\n        return 311\n    if n==111:\n        return 312\n    if n==112:\n        return 313\n    if n==113:\n        return 314\n    if n==114:\n        return 315\n    if n==115:\n        return 316\n    if n==116:\n        return 317\n    if n==117:\n        return 318\n    if n==118:\n        return 319\n    if n==119:\n        return 320\n    if n==120:\n        return 321\n    if n==121:\n        return 322\n    if n==122:\n        return 323\n    if n==123:\n        return 324\n    if n==124:\n        return 325\n    if n==125:\n        return 326\n    if n==126:\n        return 327\n    if n==127:\n        return 328\n    if n==128:\n        return 329\n    if n==129:\n        return 330\n    if n==130:\n        return 331\n    if n==131:\n        return 332\n    if n==132:\n        return 333\n    if n==133:\n        return 334\n    if n==134:\n        return 335\n    if n==135:\n        return 336\n    if n==136:\n        return 337\n    if n==137:\n        return 338\n    if n==138:\n        return 339\n    if n==139:\n        return 340\n    if n==140:\n        return 341\n    if n==141:\n        return 342\n    if n==142:\n        return 343\n    if n==143:\n        return 344\n    if n==144:\n        return 345\n    if n==145:\n        return 346\n    if n==146:\n        return 347\n    if n==147:\n        return 348\n    if n==148:\n        return 349\n    if n==149:\n        return 350\n    if n==150:\n        return 351\n    if n==151:\n        return 352\n    if n==152:\n        return 353\n    if n==153:\n        return 354\n    if n==154:\n        return 355\n    if n==155:\n        return 356\n    if n==156:\n        return 357\n    if n==157:\n        return 358\n    if n==158:\n        return 359\n    if n==159:\n        return 360\n    if n==160:\n        return 361\n    if n==161:\n        return 362\n    if n==162:\n        return 363\n    if n==163:\n        return 364\n    if n==164:\n        return 365\n    if n==165:\n        return 366\n    if n==166:\n        return 367\n    if n==167:\n        return 368\n    if n==168:\n        return 369\n    if n==169:\n        return 370\n    if n==170:\n        return 371\n    if n==171:\n        return 372\n    if n==172:\n        return 373\n    if n==173:\n        return 374\n    if n==174:\n        return 375\n    if n==175:\n        return 376\n    if n==176:\n        return 377\n    if n==177:\n        return 378\n    if n==178:\n        return 379\n    if n==179:\n        return 380\n    if n==180:\n        return 381\n    if n==181:\n        return 382\n    if n==182:\n        return 383\n    if n=",
        "num_ids": 2018
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return math.factorial(n) / (2 * math.factorial(n - 2))\n",
        "num_ids": 25
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        return n * (n - 1) // 2\n",
        "num_ids": 41
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    new_text = text.split(\" \")\n    new_text = text.replace(\" \", \"\")\n    if text.startswith(\"z\") or text.startswith(\"Z\") or text.endswith(\"z\") or text.endswith(\"Z\"):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n",
        "num_ids": 82
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # counter = 0\n    # for i in text:\n    #     if i!= \" \":\n    #         counter += 1\n    # return counter >= 2\n",
        "num_ids": 41
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"[^z][z][^z]|[z][z][^z]\"\n    return re.findall(pattern, text)\n",
        "num_ids": 37
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    new_text = re.sub(r\"\\W*\\Z\", \" \", text)\n    # print(new_text)\n    return new_text\n",
        "num_ids": 47
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    if not text:\n        return False\n    \n    text = text.strip()\n    \n    if re.search('^z', text):\n        return True\n    if re.search('z$', text):\n        return True\n    if re.search('z\\\\b', text):\n        return True\n",
        "num_ids": 75
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r\"^[a-zA-Z]\", text):\n        if re.search(r\"[a-zA-Z]$\", text):\n            return False\n    if re.search(r\"^[a-zA-Z]\", text):\n        if re.search(r\"[a-zA-Z]$\", text):\n            return False\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    str = text\n    a = re.compile(r'[^z](?:z)?[^z]?(?P<word>.*?)(?:z)(?:[^z]?z)?[^z]?(?:z)?(?P=word)$')\n    b = a.search(str)\n    if b:\n        return(b.group(1))\n    else:\n        return('No match')\n",
        "num_ids": 103
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.startswith('z') and text.endswith('z'):\n        return False\n    elif text.startswith('z') and not text.endswith('z'):\n        text1 = text[1:]\n        if text1.startswith('z'):\n            return True\n    elif not text.startswith('z') and text.endswith('z'):\n        text1 = text[:-1]\n        if text1.startswith('z'):\n            return True\n    else:\n        text1 = text\n        if text1.startswith('z') and text1.endswith('z'):\n            return True\n    return False\n",
        "num_ids": 167
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_list = text.split()\n    for i in range(len(word_list)):\n        if i == 0 and 'z' in word_list[i] or i == len(word_list)-1 and 'z' in word_list[i] or 'z' in word_list[i] and i == 0 or 'z' in word_list[i] and i == len(word_list)-1:\n            return True\n    return False\nprint(text_match_wordz_middle('z z')) # True\nprint(text_match_wordz_middle('z zz')) # False\nprint(text_match_wordz_middle('z zz zzzz zz')) # True\nprint(text_match_wordz_middle('z zzz zzzz zz')) # False\nprint(text_match_wordz_middle('z zzz zzzz zz')) # True\n",
        "num_ids": 218
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    temp = re.findall(r'z', text)\n    return True if temp else False\n",
        "num_ids": 25
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k == n:\n        return input\n    if n == 0:\n        return []\n    start = 0\n    end = n-1\n    while start <= end:\n        while start < k and input[start]!= k:\n            start += 1\n        while input[end]!= k:\n            end -= 1\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input[:k]\n",
        "num_ids": 124
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev = list()\n    for i in range(len(input)-1, -1, -1):\n        if i == k:\n            break\n        rev.append(input[i])\n    return rev\n",
        "num_ids": 51
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverseArray(input):\n        start = 0\n        end = len(input)-1\n        while start < end:\n            input[start], input[end] = input[end], input[start]\n            start += 1\n            end -= 1\n        return input\n    return reverseArray(input)\n",
        "num_ids": 72
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    a = input\n    # a = input.reverse()\n    # print(a)\n    k = k+1\n    for i in range(k):\n        print(i)\n    return a\n",
        "num_ids": 49
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if n <= k:\n        return input\n    k = k + 1\n    for i in range(k // 2):\n        input[i], input[n - k + i] = input[n - k + i], input[i]\n    return input\n",
        "num_ids": 70
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    for i in range(k):\n        input.append(input[l-i-1])\n    for i in range(l-k):\n        input.remove(input[0])\n    return input\n",
        "num_ids": 58
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    index = 0\n    reverse = 0\n    n = len(input)\n    for i in range(n):\n        if i == k:\n            break\n        reverse = reverse * 10 + input[i]\n    print(reverse)\n    for i in range(n-1,k-1,-1):\n        input[i] = input[i-1]\n        print(input)\n    input[k] = reverse\n    print(input)\n",
        "num_ids": 107
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    array = input.copy()\n    i = 0\n    while i < len(array):\n        if i > k:\n            break\n        else:\n            array = array[::-1]\n        i += 1\n    return array\n",
        "num_ids": 57
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input.split()\n    reverse_arr = []\n    i = 0\n    while i<len(arr):\n        if len(arr) == 0:\n            break\n        if i == len(arr)-1:\n            reverse_arr.append(arr.pop(i))\n            break\n        else:\n            reverse_arr.append(arr.pop(i))\n        i += 1\n    print(reverse_arr)\n    return reverse_arr\n",
        "num_ids": 109
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    from sys import maxsize as max\n    min = -max\n    max = max\n    i = 0\n    j = len(input)-1\n    input.reverse()\n    if k > len(input):\n        return None\n    while i <= k and j >= k:\n        if input[i] <= input[j]:\n            input[i], input[j] = input[j], input[i]\n            i += 1\n            j -= 1\n        else:\n            return None\n    return input\n",
        "num_ids": 119
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    return tuple(test_tup)\n",
        "num_ids": 39
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_dict)\n",
        "num_ids": 17
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict, )\n    return test_tup\n",
        "num_ids": 27
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict, )\n    return test_tup\n",
        "num_ids": 27
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(list(test_tup) + list(test_dict.values()))\n",
        "num_ids": 24
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup) + (test_dict,)\n    return new_tup\n    \ndef add_tuple_to_dict(test_tup, test_dict):\n    '''\n    Write a function to add a tuple to a dictionary. The output should be a dictionary.\n    '''\n    new_dict = {}\n    for i in range(len(test_tup)):\n        new_dict[test_tup[i]] = test_dict[i]\n    return new_dict\n    \ndef add_dict_to_set(test_set, test_dict):\n    '''\n    Write a function to add a dictionary to the set. The output should be a set.\n    '''\n    new_set = test_set | {test_dict}\n    return new_set\n    \ndef add_set_to_dict(test_set, test_dict):\n    '''\n    Write a function to add a set to a dictionary. The output should be a dictionary.\n    '''\n    new_dict = {}\n    for i in test_set:\n        new_dict[i] = test_dict[i]\n    return new_dict\n    \ndef add_tuple_to_set(test_tup, test_set):\n    '''\n    Write a function to add a tuple to a set. The output should be a set.\n    '''\n    new_set = test_set | {test_tup}\n    return new_set\n    \ndef add_set_to_set(test_set, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set1 | test_set2\n    return new_set\n    \ndef add_set_to_set(test_set1, test_set2):\n    '''\n    Write a function to add two sets. The output should be a set.\n    '''\n    new_set = test_set2 | test_set1\n    return new_set\n    \ndef add_set_to_set(test_set1, test_se",
        "num_ids": 42
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup\n    new_tup = tuple(val for val in new_tup)\n    new_tup = tuple(val for val in new_tup)\n    new_tup += (test_dict,)\n    new_tup = tuple(val for val in new_tup)\n    return new_tup\n",
        "num_ids": 86
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "num_ids": 16
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple([*test_tup, *test_dict.values()])\n",
        "num_ids": 21
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    maxavg = -1\n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            if cost[i][j] == 0:\n                continue\n            paths = dfs(cost, i, j, N)\n            currpathsum = 0\n            for path in paths:\n                currpathsum += cost[path[0]][path[-1]]\n            avg = currpathsum/len(paths)\n            if avg > maxavg:\n                maxavg = avg\n    return maxavg\n",
        "num_ids": 146
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    \n    if N == 0:\n        return 0\n    \n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    \n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n    \n    for i in range(1, N):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i][j-1], dp[i-1][j])\n            \n    return (sum(dp[N-1]) / (N*N))\n    \n'''\n    You are given an array of strings, A. Each string represents a node in a graph.\n    Your task is to find whether there exists a directed graph, G, which can be constructed from A and is such that all nodes are reachable from some node.\n    Note:\n    You need to write only one function to complete the problem. \n    You can take only one argument as input. A will be a list of strings representing nodes in the graph.\n",
        "num_ids": 101
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #we can simply use Dijkstra's Algorithm to solve this problem\n    import heapq\n    \n    #create the adjacency list\n    adjacency = {i:{} for i in range(len(cost))}\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if i+1 < len(cost) and j+1 < len(cost[i]):\n                adjacency[i][(i+1,j+1)] = cost[i][j]\n            if j-1 >= 0 and i+1 < len(cost):\n                adjacency[i][(i+1,j-1)] = cost[i][j]\n            if i-1 >= 0 and j+1 < len(cost[i]):\n                adjacency[i][(i-1,j+1)] = cost[i][j]\n            if i-1 >= 0:\n                adjacency[i][(i-1,j)] = cost[i][j]\n            if j-1 >= 0:\n                adjacency[i][(i,j-1)] = cost[i][j]\n                \n    #convert adjacency list to heap\n    for i in range(len(adjacency)):\n        for j in adjacency[i]:\n            heapq.heappush(queue,j)\n    \n    #store the cost of the current path\n    path = {}\n    \n    #store the average of the current path\n    average = {}\n    \n    #check if we've already reached the end of the matrix\n    end = False\n    \n    while not end:\n        #get the current cost and current position\n        curr_cost, curr_pos = heapq.heappop(queue)\n        curr_pos = curr_pos[1:]\n        \n        #check if we've reached the end\n        if not curr_pos:\n            end = True\n            continue\n            \n        #if not, then we need to update the current cost and average\n        average[curr_pos] = average.get(curr_pos,0) + curr_cost\n        \n        #check if this position is on the current path already\n        if curr_pos in path:\n            path[curr_pos] += 1\n        else:\n            path[curr_pos] = 1\n            \n        #check if the current position has a parent\n        if curr_pos in adjacency:\n            for curr_adj in adjacency[curr_pos]:\n                #if not, skip it\n                if curr_adj not in path:\n                    continue\n                #otherwise, check if we have to update the cost and average of the current path\n                curr_cost += cost[curr_pos[0]][curr_pos[1]]\n                average[curr_pos] = average.get(curr_pos,0) + curr_cost\n                path[curr_pos] += 1\n    \n    #find the average\n    average = {i:average[i]/path[i] for i in path}\n    \n    #find the maximum\n    max_average = -1\n    max_path = None\n    for i in path:\n        if max_average < average[i]:\n            max_average = average[i]\n            max_path = i\n    \n    #return the maximum average\n    return max_average\n",
        "num_ids": 806
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    cost.append(0)\n    n = len(cost)\n    m = len(cost[0])\n",
        "num_ids": 28
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    \n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    \n    #Edge Cases:\n    # 1. Initialization:\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    \n    # 2. Recursion:\n    for row in range(n-1, -1, -1):\n        for col in range(row+1, n):\n            \n            #Add the minimum cost for diagonal\n            #left_up_cell_cost = dp[row][col-1]\n            left_up_cell_cost = cost[row][col-1]\n            \n            #If there is a lower cell to the left, update the left_up_cell_cost\n            if col > 0:\n                left_up_cell_cost = min(left_up_cell_cost, dp[row][col-1])\n            \n            #Add the minimum cost for diagonal\n            #right_down_cell_cost = dp[row+1][col]\n            right_down_cell_cost = cost[row+1][col]\n            \n            #If there is a lower cell to the right, update the right_down_cell_cost\n            if row < n-1:\n                right_down_cell_cost = min(right_down_cell_cost, dp[row+1][col])\n            \n            #Add the minimum cost for diagonal\n            #diagonal_cell_cost = dp[row][col-1] + dp[row+1][col]\n            diagonal_cell_cost = cost[row][col] + cost[row+1][col]\n            \n            #Update the minimum cost\n            dp[row][col] = left_up_cell_cost + right_down_cell_cost + diagonal_cell_cost\n            \n    #Return the maximum average\n    return (sum(cost) + dp[0][n-1]) // n\n",
        "num_ids": 470
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Create a nested dict to store the values\n    dict = defaultdict(lambda : defaultdict(lambda : float('-inf')))\n    # Store the average in the first cell\n    dict[0][0] = cost[0][0]\n    # Go through each cell and compare it with its neighbor\n    for i in range(1, N):\n        dict[0][i] = dict[0][i-1] + cost[0][i]\n    # Go through each cell and compare it with its neighbor\n    for i in range(1, N):\n        dict[i][0] = dict[i-1][0] + cost[i][0]\n    # Go through each cell and compare it with its neighbor\n    for i in range(1, N):\n        for j in range(1, N):\n            dict[i][j] = max(dict[i-1][j], dict[i][j-1]) + cost[i][j]\n    # Return the max average value\n    return max(dict.values())\n",
        "num_ids": 240
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n <= 1:\n        return 0\n    dp = [[0 for i in range(n)] for j in range(n)]\n",
        "num_ids": 41
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    #We start with a list of lists \n    #We initialize a list of lists that will be the output\n    max_avg_list = []\n    \n    # We start with the length of the matrix\n    # We start from the first cell\n    # We start from the first cell move right\n    # We stop at the bottom right cell\n    for i in range(len(cost)):\n        row = []\n        for j in range(len(cost)):\n            row.append(0)\n            \n        max_avg_list.append(row)\n    \n    for i in range(len(cost)):\n        for j in range(len(cost)):\n            #We start from the top left cell\n            #We move right \n            #We finish in the bottom right cell\n            if i == 0 and j == 0:\n                max_avg_list[i][j] = cost[i][j]\n            elif i == 0 and j!= 0:\n                max_avg_list[i][j] = max_avg_list[i][j-1] + cost[i][j]\n            elif i!= 0 and j == 0:\n                max_avg_list[i][j] = max_avg_list[i-1][j] + cost[i][j]\n            else:\n                max_avg_list[i][j] = max(max_avg_list[i][j-1] + cost[i][j], max_avg_list[i-1][j] + cost[i][j])\n    \n    max_avg = 0\n    for i in range(len(max_avg_list)):\n        for j in range(len(max_avg_list[0])):\n            if max_avg_list[i][j] > max_avg:\n                max_avg = max_avg_list[i][j]\n                \n    return max_avg/len(max_avg_list[0])\n",
        "num_ids": 477
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Instead of converting matrix into a list, we can just use a dictionary\n    d = {(0,0):cost[0][0]}\n",
        "num_ids": 35
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_average = 0\n    n = len(cost)\n    visited = [[False for j in range(n)] for i in range(n)]\n",
        "num_ids": 38
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_list = []\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            students_list.append(student)\n    print(students_list)\n",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_res = []\n    for i in students.items():\n        if i[1][0]>h and i[1][1]>w:\n            filter_res.append(i[0])\n    return filter_res\n",
        "num_ids": 57
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    h_low = h - 0.5\n    h_up = h + 0.5\n    w_low = w - 0.5\n    w_up = w + 0.5\n    return {name: (tup) for name, tup in students.items() if h_low <= tup[0] and tup[0] <= h_up and w_low <= tup[1] and tup[1] <= w_up}\n    \n",
        "num_ids": 109
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    dict1={}\n    for i,j in students.items():\n        if j[0]>h and j[1]>w:\n            dict1[i]=j\n    return dict1\n",
        "num_ids": 49
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = {}\n    for key,value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n",
        "num_ids": 53
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student,(height,weight) in students.items():\n        if height > h or weight > w:\n            filtered_students[student] = (height,weight)\n    return filtered_students\n    \n    \n    \n    \n",
        "num_ids": 68
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_data = {}\n    filter_data = {k:v for k, v in students.items() if v[0]>h and v[1]>w}\n    return filter_data\n",
        "num_ids": 49
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h>=min_height and w>=min_weight:\n        for i in students:\n            students[i]=students[i][0]\n    return students\n",
        "num_ids": 44
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = {}\n    for s in students.keys():\n        out[s] = h\n    return out\n    \n",
        "num_ids": 30
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    def func(data):\n        if data[1]>h and data[0]>w:\n            return True\n        return False\n    \n    students = {k:v for k,v in students.items() if func(v)}\n    return students\n",
        "num_ids": 65
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(1 for i in range(len(nums1)) if nums1[i] == nums2[i])\n",
        "num_ids": 33
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return 0\n    for i in range(len(nums1)):",
        "num_ids": 40
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(1 for i in range(len(nums1)) if nums1[i]==nums2[i])\n",
        "num_ids": 33
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result += 1\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef difference_array(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to return the difference of the two lists.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    i = 0\n    j = 0\n    result = []\n    while i < len(nums1) and j < len(nums2):\n        if eq(nums1[i], nums2[j]):\n            result.append(nums2[j])\n            i += 1\n            j += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return result\ndef mutate_string(string, position, character):\n    '''\n    The input is defined as a string and a position within the string. Write a function that returns a new string where the character is replaced with another character.\n    '''\n    s = string[0:position]\n    t = string[position+1:len(string)]\n    return s + character + t\ndef large_difference(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to return the maximum absolute difference between any two elements in the list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    largest = abs(nums1[0] - nums2[0])\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if abs(nums1[i] - nums2[j]) > largest:\n                largest = abs(nums1[i] - nums2[j])\n    return largest\ndef common_end(a, b):\n    '''\n    The input is defined as two lists of the same length. Write a function that returns a boolean indicating whether they share an end in common.\n    '''\n    if len(a) > len(b):\n        small = b\n        big = a\n    else:\n        small = a\n        big = b\n    for i in range(len(small)):\n        if small[i] == big[0]:\n            return True\n        else:\n            return False\ndef sum3(nums):\n    '''\n    The input is defined as a list of integers. Write a function that returns the sum of all the integers in the list.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return total\ndef first_plus_last(nums):\n    '''\n    The input is defined as a list of integers. Write a function that returns the sum of the first value in the list plus the last value in the list.\n    '''\n    return nums[0] + nums[-1]\ndef make_ends(nums):\n    '''\n    The input is defined as a list of integers. Write a function that returns a list where the first element is the first element from the original list and the last element is the last element from the original list.\n    '''\n    return [nums[0], nums[-1]]\ndef middle_way(a, b):\n    '''\n    The input is defined as two lists of the same length. Write a function that returns a new list that is the result of computing the average of the middle values in the two original lists. The average is calculated using the formula below.\n    '''\n    size = len(a) + len(b)\n    middle = size // 2\n    result = 0\n    if size % 2!= 0:\n        result = (a[middle] + b[middle]) / 2\n    else:\n        result = (a[middle] + b[middle]) / 2\n    return result\ndef palindrome_permutation(string):\n    '''\n    The input is defined as a string. Write a function that returns a boolean value indicating whether or not a string is a permutation of a palindrome. A palindrome is a string that reads the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n    '''\n    c = {}\n    for i in string:\n        if i in c:\n            c[i] += 1\n        else:\n            c[i] = 1\n    odd = 0\n    for i in c.values():\n        if i % 2!= 0:\n            odd += 1\n    if odd == 1:\n        return True\n    else:\n        return False\ndef common_characters(string1, string2):\n    '''\n    The input is defined as two strings. Write a function that returns a dictionary containing all the key-value pairs in which the key appears in both strings and the value appears in the same position in both strings.\n    '''\n    c = {}\n    for i in range(len(string1)):\n        if string1[i] in c:\n            c[string1[i]] += 1\n        else:\n            c[string1[i]] = 1\n    for i in range(len(string2)):\n        if string2[i] in c:\n            c[string2[i]] += 1\n        else:\n            c[string2[i]] = 1\n    result = {}\n    for key, value in c.items():\n        if value > 1:\n            result[key] = value\n    return result\ndef single_number(nums):\n    '''\n    The input is defined as a list of integers. Write a function that returns the single number in the list. The single number can appear any number of times in the list.\n    '''\n    c = {}\n    for i in range(len(nums)):\n        if nums[i] in c:\n            c[nums[i]] += 1\n        else:\n            c[nums[i]] = 1\n    for key, value in c.items():\n        if value == 1:\n            return key\ndef max_product(nums):\n    '''\n    The input is defined as a list of integers. Write a function that returns the maximum product that can be formed by multiplying any 3 integers in the list.\n    '''\n    c = {}\n    for i in range(len(nums)):\n        if nums[i] in c:\n            c[nums[i]] += 1\n        else:\n            c[nums[i]] = 1\n    largest = -1\n    for key, value in c.items():\n        if value > largest:\n            largest = value\n    product = 1\n    for i in range(len(nums)):\n        if nums[i] in c:\n            if c[nums[i]] == largest:\n                product *= nums[i]\n    return product\ndef third_maximum_number(nums):\n    '''\n    The input is defined as a list of integers. Write a function that returns the third maximum number in the list.\n    '''\n    c = {}\n    for i in range(len(nums)):\n        if nums[i] in c:\n            c[nums[i]] += 1\n        else:\n            c[nums[i]] = 1\n    result = -1\n    largest = -1\n    second_largest = -1\n    for key, value in c.items():\n        if value > largest:\n            largest = value\n        elif value > second_largest and value!= largest:\n            second_largest = value\n    if second_largest == largest:\n        return largest\n    else:\n        return second_largest\ndef sum_matrix(matrix):\n    '''\n    The input is defined as a list of lists of integers. Write a function that returns the sum of all the integers in the matrix.\n    '''\n    sum = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            sum += matrix[i][j]\n    return sum\ndef sum_of_odd_numbers(nums):\n    '''\n    The input is defined as a list of integers. Write a function that returns the sum of all the odd numbers in the list",
        "num_ids": 28
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pair_count = 0\n    for idx in range(len(nums1)):\n        if nums1[idx] == nums2[idx]:\n            pair_count += 1\n    return pair_count\n",
        "num_ids": 55
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(x == y for x,y in zip(nums1, nums2))\n",
        "num_ids": 25
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([i for i in range(len(nums1)) if nums1[i] == nums2[i]])\n",
        "num_ids": 34
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    #base, power = int(input()), int(input())\n    return sum(map(int, str(base))) ** power\n",
        "num_ids": 33
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(int, str(base))) ** power\n",
        "num_ids": 17
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0 and power == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 1:\n        return 1\n    return base * power_base_sum(base, power-1)\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n",
        "num_ids": 12
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(int, str(base))) ** power\n",
        "num_ids": 17
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert base >= 0\n    assert power >= 0\n    if power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n",
        "num_ids": 46
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert isinstance(base, int) and isinstance(power, int)\n    if power == 0:\n        return 1\n    else:\n        return base ** power\n        \n        \ndef power_base_sum_n(base, power, n):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power, taking a specified number of digits from the base.\n    '''\n    assert isinstance(base, int) and isinstance(power, int) and isinstance(n, int)\n    if n == 0:\n        return 1\n    else:\n        return (power_base_sum(base, n-1)) * base\n        \n        \ndef power_base_reverse_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert isinstance(base, int) and isinstance(power, int)\n    if power == 0:\n        return 1\n    else:\n        return (base**power) % 10\n",
        "num_ids": 45
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    # initiate the sum to 0\n    sum_of_digits = 0\n    \n    # check if the input is negative\n    if power < 0:\n        \n        # multiply the base with -1, and add it to the sum\n        base_mult_with_neg_1 = base * -1\n        sum_of_digits += base_mult_with_neg_1\n        \n        # add all the digits of the resulting number to the sum\n        for i in range(1, power):\n            sum_of_digits += int(base_mult_with_neg_1 / 10)\n            base_mult_with_neg_1 = int(base_mult_with_neg_1 % 10)\n            \n    # check if the input is positive\n    elif power > 0:\n        \n        # add all the digits of the base to the sum\n        for i in range(1, power + 1):\n            sum_of_digits += int(base / 10)\n            base = int(base % 10)\n    \n    # return the sum\n    return sum_of_digits\n",
        "num_ids": 257
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    from math import log\n    return sum(int(x) for x in str(base)) ** power\n",
        "num_ids": 26
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    search_object = re.search('\"', text1)\n    start = 0\n    end = len(text1)\n    while search_object:\n        start = text1.find('\"', start) + 1\n        end = text1.find('\"', end)\n        if start == end:\n            break\n        yield text1[start:end]\n        start = end + 1\n",
        "num_ids": 94
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pat = r'\"(.*?)\"'\n    match = re.findall(pat,text1)\n    print(match)\n",
        "num_ids": 32
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # pattern = '\\\"([^\\\"]*)\\\"\\\"'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile(\"\\\"[^\\\"]+\\\"\")\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_brackets(text1):\n    '''\n    Write a function to extract values between brackets \"{ \" and \" \"}\".\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_between_square_brackets(text1):\n    '''\n    Write a function to extract values between square brackets [ ]\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_all(text1):\n    '''\n    Write a function to extract all values between square brackets\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_between_square_brackets_all(text1):\n    '''\n    Write a function to extract all values between square brackets\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_all_no_recursive(text1):\n    '''\n    Write a function to extract all values between square brackets\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_all_no_recursive_no_if(text1):\n    '''\n    Write a function to extract all values between square brackets\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_no_recursive(text1):\n    '''\n    Write a function to extract all values between square brackets\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_no_recursive_no_if(text1):\n    '''\n    Write a function to extract all values between square brackets\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_no_recursive_no_if_no_if(text1):\n    '''\n    Write a function to extract all values between square brackets\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_no_recursive_no_if_no_if_no_if(text1):\n    '''\n    Write a function to extract all values between square brackets\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search(pattern, text1).group())\n    # else:\n    #     print(\"No match\")\n    pat=re.compile('\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}')\n    m=pat.finditer(text1)\n    for i in m:\n        print(i.group())\ndef extract_no_recursive_no_if_no_if_no_if_no_if(text1):\n    '''\n    Write a function to extract all values between square brackets\n    '''\n    # pattern = '\\[([^\\]]+)\\]\\([^\\(\\)]+\\)|\\{([^\\}]+)\\}'\n    # if re.search(pattern, text1):\n    #     print(re.search",
        "num_ids": 57
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('[^\"]',text1)\n",
        "num_ids": 17
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    start_quote_index = 0\n    end_quote_index = 0\n    for index, char in enumerate(text1):\n        if char == '\"':\n            start_quote_index = index\n            break\n    for index in range(start_quote_index + 1, len(text1)):\n        if text1[index] == '\"':\n            end_quote_index = index\n            break\n    return text1[start_quote_index + 1:end_quote_index]\n",
        "num_ids": 118
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return text1.split('\"')[1]\n    \ndef extract_phone_number(text2):\n    '''\n    Write a function to extract phone number from given string.\n    '''\n    return re.findall(r'\\d{10}',text2)\n    \ndef extract_state(text3):\n    '''\n    Write a function to extract state name from given string.\n    '''\n    return re.findall(r'[A-Z]{2}',text3)\n    \ndef extract_name(text4):\n    '''\n    Write a function to extract name from given string.\n    '''\n    return re.findall(r'[A-Z]{2}\\s\\w{2,}',text4)\n    \ndef extract_address(text5):\n    '''\n    Write a function to extract address from given string.\n    '''\n    return re.findall(r'[A-Z]{2}\\s[A-Z]{2}',text5)\n    \ndef extract_city(text6):\n    '''\n    Write a function to extract city name from given string.\n    '''\n    return re.findall(r'[A-Z]{2}',text6)\n    \ndef extract_email(text7):\n    '''\n    Write a function to extract email id from given string.\n    '''\n    return re.findall(r'[A-Z]{2}\\s[A-Z]{2}\\s[A-Z]{2}\\s[A-Z]{2}\\s[A-Z]{2}\\s[A-Z]{2}',text7)\n    \ndef extract_birth_date(text8):\n    '''\n    Write a function to extract birth date from given string.\n    '''\n    return re.findall(r'\\d{1,2}\\s\\d{1,2}\\s\\d{1,2}\\s\\d{4}',text8)\n    \ndef extract_id(text9):\n    '''\n    Write a function to extract id number from given string.\n    '''\n    return re.findall(r'\\d{11}',text9)\n    \ndef extract_zip(text10):\n    '''\n    Write a function to extract zip code from given string.\n    '''\n    return re.findall(r'\\d{5}',text10)\n    \ndef extract_relative(text11):\n    '''\n    Write a function to extract relative from given string.\n    '''\n    return re.findall(r'[A-Z]{2,}',text11)\n    \ndef extract_gender(text12):\n    '''\n    Write a function to extract gender from given string.\n    '''\n    return re.findall(r'\\d{1}',text12)\n    \ndef extract_occupation(text13):\n    '''\n    Write a function to extract occupation from given string.\n    '''\n    return re.findall(r'\\d{1}',text13)\n    \ndef extract_income(text14):\n    '''\n    Write a function to extract income from given string.\n    '''\n    return re.findall(r'\\d{1}',text14)\n    \ndef extract_family_id(text15):\n    '''\n    Write a function to extract family id from given string.\n    '''\n    return re.findall(r'\\d{10}',text15)\n    \ndef extract_race(text16):\n    '''\n    Write a function to extract race from given string.\n    '''\n    return re.findall(r'[A-Z]{2}',text16)\n    \ndef extract_decile(text17):\n    '''\n    Write a function to extract decile from given string.\n    '''\n    return re.findall(r'\\d{1}',text17)\n    \ndef extract_sexual_orientation(text18):\n    '''\n    Write a function to extract sex orientation from given string.\n    '''\n    return re.findall(r'\\d{1}',text18)\n    \ndef extract_height(text19):\n    '''\n    Write a function to extract height from given string.\n    '''\n    return re.findall(r'\\d{1,2}',text19)\n    \ndef extract_year(text20):\n    '''\n    Write a function to extract year from given string.\n    '''\n    return re.findall(r'\\d{4}',text20)\n    \ndef extract_eye_color(text21):\n    '''\n    Write a function to extract eye color from given string.\n    '''\n    return re.findall(r'[A-Z]{2}',text21)\n    \ndef extract_education(text22):\n    '''\n    Write a function to extract education from given string.\n    '''\n    return re.findall(r'\\d{1}',text22)\n    \ndef extract_income_variable(text23):\n    '''\n    Write a function to extract income variable from given string.\n    '''\n    return re.findall(r'\\d{2}',text23)\n    \ndef extract_profession(text24):\n    '''\n    Write a function to extract profession from given string.\n    '''\n    return re.findall(r'\\d{2}',text24)\n    \ndef extract_native_country(text25):\n    '''\n    Write a function to extract native country from given string.\n    '''\n    return re.findall(r'[A-Z]{2}',text25)\n    \ndef extract_income_variable2(text26):\n    '''\n    Write a function to extract income variable2 from given string.\n    '''\n    return re.findall(r'\\d{2}',text26)\n    \ndef extract_native_country2(text27):\n    '''\n    Write a function to extract native country2 from given string.\n    '''\n    return re.findall(r'[A-Z]{2}',text27)\n    \ndef extract_other_language(text28):\n    '''\n    Write a function to extract other language from given string.\n    '''\n    return re.findall(r'[A-Z]{2}',text28)\n    \ndef extract_language(text29):\n    '''\n    Write a function to extract language from given string.\n    '''\n    return re.findall(r'[A-Z]{2}',text29)\n    \ndef extract_native_country3(text30):\n    '''\n    Write a function to extract native country3 from given string.\n    '''\n    return re.findall(r'[A-Z]{2}',text30)\n    \ndef extract_income_variable3(text31):\n    '''\n    Write a function to extract income variable3 from given string.\n    '''\n    return re.findall(r'\\d{2}',text31)\n    \ndef extract_gender_variable(text32):\n    '''\n    Write a function to extract gender variable from given string.\n    '''\n    return re.findall(r'\\d{1}',text32)\n    \ndef extract_income_variable4(text33):\n    '''\n    Write a function to extract income variable4 from given string.\n    '''\n    return re.findall(r'\\d{2}',text33)\n    \ndef extract_income_variable5(text34):\n    '''\n    Write a function to extract income variable5 from given string.\n    '''\n    return re.findall(r'\\d{2}',text34)\n    \ndef extract_income_variable6(text35):\n    '''\n    Write a function to extract income variable6 from given string.\n    '''\n    return re.findall(r'\\d{2}',text35)\n    \ndef extract_income_variable7(text36):\n    '''\n    Write a function to extract income variable7 from given string.\n    '''\n    return re.findall(r'\\d{2}',text36)\n    \ndef extract_income_variable8(text37):\n    '''\n    Write a function to extract income variable8 from given string.\n    '''\n    return re.findal",
        "num_ids": 8
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pairs= re.finditer(r'\"(.*?)\"',text1)\n    for pair in quotation_pairs:\n        yield pair.group(1)\n",
        "num_ids": 45
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    pattern = re.compile(r'\\\"')\n    if pattern.search(text1):\n        start = text1.find('\"')\n        end = text1.find('\"',start+1)\n        text = text1[start+1:end]\n    else:\n        text = None\n        \n    return text\n",
        "num_ids": 81
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #sentence = \"Hello, World!\"\n    #sentence = \"Today is 11/27/2020. The weather is nice and sunny.\"\n    sentence = 'The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = '\"Today is 11/27/2020. The weather is nice and sunny.\"'\n    #sentence = '\"Today is 11/27/2020. The weather is nice and sunny.\"'\n    #sentence = '\"Today is 11/27/2020. The weather is nice and sunny.\"'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice and sunny.'\n    #sentence = 'Today is 11/27/2020. The weather is nice and sunny. Today is 11/27/2020. The weather is nice an",
        "num_ids": 2011
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    import re\n    text2=re.search(r'[\"].*[\"]',text1)\n    if text2:\n        print(text2.group())\n",
        "num_ids": 41
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply_elements2(t):\n        n = len(t)\n        return t[:n-1] + (t[0]*t[1:])\n",
        "num_ids": 43
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Your code here\n    return (x * (x + 1) for x in test_tup)\n    \nmultiply_elements((3, 4, 5, 6, 7))\n",
        "num_ids": 49
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t = test_tup\n    out = []\n    out.append(0)\n    for i in range(len(t)-1):\n        out.append(t[i] * t[i+1])\n    out.append(0)\n    return tuple(out)\n",
        "num_ids": 68
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # your code here\n    return\n",
        "num_ids": 11
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    num_list = list(test_tup)\n    n = len(num_list)\n    num_list.pop(-1)\n    return (tuple(num_list))\n",
        "num_ids": 46
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test = []\n    for num in test_tup:\n        test.append(num)\n    res = (test[0] * test[1], )\n    for i in range(len(test)-1):\n        res += (test[i+1] * test[i+2], )\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup_len = len(test_tup)\n    ret_tup = []\n    for i in range(tup_len-1):\n        ret_tup.append(test_tup[i] * (test_tup[i+1]))\n    ret_tup.append(1)\n    return ret_tup\n",
        "num_ids": 84
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    ret = []\n    for i in range(n):\n        ret.append(test_tup[i]*test_tup[i+1])\n    ret.append(test_tup[-1])\n    return tuple(ret)\n",
        "num_ids": 73
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]*test_tup[i+1],)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    if N < 1:\n        raise ValueError\n    if N == 1:\n        return (test_tup[0],)\n    else:\n        return tuple(test_tup[0:N]) + multiply_elements(tuple(test_tup[0:N]) + tuple(test_tup[1:]))\n",
        "num_ids": 91
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] += lst2[i]\n    return lst1\n",
        "num_ids": 37
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst=[]\n    if len(lst1)>=len(lst2):\n        length = len(lst1)\n    else:\n        length = len(lst2)\n    for i in range(length):\n        new_lst.append(lst1[i]+lst2[i])\n    return new_lst\n",
        "num_ids": 88
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n",
        "num_ids": 12
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] = lst1[i] + lst2[i]\n    return lst1\n",
        "num_ids": 44
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if(len(lst1)!= len(lst2)):\n        return None\n    sum = []\n    for i in range(len(lst1)):\n        sum.append(lst1[i] + lst2[i])\n    return sum\n",
        "num_ids": 66
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError('Lengths of the lists do not match.')\n    else:\n        result_list = []\n        for i in range(len(lst1)):\n            result_list.append(lst1[i]+lst2[i])\n    return result_list\n",
        "num_ids": 85
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    result = lst1 + lst2\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #Create a new list that will contain the sum\n    result = []\n    #Add the list of the first list to the new list\n    result += lst1\n    #Add the list of the second list to the new list\n    result += lst2\n    #Return the new list\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)==len(lst2):\n        return [lst1[i]+lst2[i] for i in range(len(lst1))]\n    else:\n        print(\"length of two lists should be same\")\n        return 0\n",
        "num_ids": 66
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] + lst2[i])\n    return lst3\n",
        "num_ids": 50
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i, j in zip(nums, nums[1:]):\n        if j == i + 1:\n            return nums\n    return nums\n",
        "num_ids": 39
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        out = []\n        for g in groupby(nums):\n            out.append(list(g)[0])\n        return out\n",
        "num_ids": 54
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # print(list(groupby(nums)))\n    return list(dict.fromkeys(nums))\n",
        "num_ids": 28
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    x = 0\n    for k, g in groupby(nums):\n        x += 1\n    return x\n",
        "num_ids": 29
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = list(nums)\n    for (key, group) in groupby(result):\n        if not key:\n            result.remove(group[0])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # return list(set(nums))\n    return list(map(list, groupby(nums)))\n",
        "num_ids": 28
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # the trick is that the last occurance of an element is an iterator\n    # convert it to a generator for faster next() calls.\n    # itertools.groupby is a tool for finding all the unique elements in a list\n    # and matching them to a key function (which returns a key, i.e. a lambda)\n    # then we can use groupby to group the elements by their key\n    # and call the next() method of the iterator to get the next occurrence\n    # for each group\n    return list(\n        # pass the groupby object into a list comprehension\n        map(\n            # call the key function and return the result\n            lambda x: x,\n            # call the groupby object's itertools.groupby() method\n            # and pass in the iterator and the key function\n            list(groupby(nums, lambda x: x))\n        )\n    )\n",
        "num_ids": 205
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return nums\n",
        "num_ids": 14
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    list_to_concat = []\n    for key, group in groupby(nums):\n        list_to_concat.append(list(group))\n",
        "num_ids": 40
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i=0\n    while i<len(nums)-1:\n        if nums[i]==nums[i+1]:\n            nums.pop(i+1)\n        else:\n            i+=1\n    return nums\n",
        "num_ids": 60
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r ** 2) * h / 3\n    return area\n",
        "num_ids": 23
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h/3\n",
        "num_ids": 16
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    h_ = (math.pi/3)*r**2\n    if h_ > h:\n        h_ = h\n    a = math.sqrt(h_*(h_-h))\n    b = r*math.sin(math.pi/3)\n    c = (a**2+b**2)**(1/2)\n    r_lateral = math.sqrt(r**2+(c**2-a**2)**(1/2))\n    lateral_surface = h_*(r_lateral)\n    return lateral_surface\n",
        "num_ids": 135
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    angle = math.radians(30)\n    s = math.sin(angle)\n    c = math.cos(angle)\n    x_cone = r * c\n    y_cone = r * s\n    z_cone = h\n    x_cyl = x_cone + z_cone\n    y_cyl = y_cone + z_cone\n    z_cyl = h\n    x_cyl_area = (x_cyl - x_cone) * (x_cyl - x_cone)\n    y_cyl_area = (y_cyl - y_cone) * (y_cyl - y_cone)\n    z_cyl_area = (z_cyl - z_cone) * (z_cyl - z_cone)\n    s_cyl_area = x_cyl_area + y_cyl_area\n    lateralsurface_area = (x_cyl_area * y_cyl) + (x_cyl_area * z_cyl) + (y_cyl_area * z_cyl) - (s_cyl_area * h)\n    return lateralsurface_area\n",
        "num_ids": 254
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r ** 2) * (h / 2)\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=2*r**2\n    b=2*r*h\n    c=math.pi*r**2\n    f=a+b+c\n    t=2*r*h+math.pi*r**2\n    s=2*r**2*math.sin(h/2)\n    return f*t/2,f*s/2\n",
        "num_ids": 89
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*(h/2)\ndef lateralsurface_cuboid(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width b and height h.\n    '''\n    return 2*l*b+2*b*h+2*h*l\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return math.pi*4*r**2\ndef lateralsurface_cylinder(h,r):\n    '''\n    Write a function to find the lateral surface area of a cylinder given height h and radius r.\n    '''\n    return math.pi*2*h*r\ndef lateral_surface_cube(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a cube given length l, width b and height h.\n    '''\n    return 2*l*b+2*b*h+2*h*l\ndef lateral_surface_para_cylinder(l,h,r):\n    '''\n    Write a function to find the lateral surface area of a parallel cylinder given length l, height h and radius r.\n    '''\n    return 2*l*r\ndef lateral_surface_para_sphere(l,r):\n    '''\n    Write a function to find the lateral surface area of a parallel sphere given length l and radius r.\n    '''\n    return 2*l*r\ndef lateral_surface_cylinder(h,r):\n    '''\n    Write a function to find the lateral surface area of a cylinder given height h and radius r.\n    '''\n    return math.pi*2*h*r\ndef lateral_surface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse given its semi-major axis a and its semi-minor axis b.\n    '''\n    return math.pi*a*b\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateral_surface_hexahedron(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given length l, width b and height h.\n    '''\n    return 6*l*b+6*b*h+6*h*l\ndef lateral_surface_hypercube(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a hypercube given length l, width b and height h.\n    '''\n    return 4*l*b+4*b*h+4*h*l\ndef lateral_surface_prism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a prism given length l, width b and height h.\n    '''\n    return 2*l*b+2*b*h+2*h*l\ndef lateral_surface_prism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a prism given length l, width b and height h.\n    '''\n    return 2*l*b+2*b*h+2*h*l\ndef lateral_surface_box(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a box given length l, width b and height h.\n    '''\n    return 2*l*b+2*b*h+2*h*l\ndef lateral_surface_cylinder(h,r):\n    '''\n    Write a function to find the lateral surface area of a cylinder given height h and radius r.\n    '''\n    return math.pi*2*h*r\ndef lateral_surface_para_sphere(l,r):\n    '''\n    Write a function to find the lateral surface area of a parallel sphere given length l and radius r.\n    '''\n    return 2*l*r\ndef lateral_surface_para_cylinder(l,h,r):\n    '''\n    Write a function to find the lateral surface area of a parallel cylinder given length l, height h and radius r.\n    '''\n    return 2*l*r\ndef lateral_surface_rectangle(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and width b.\n    '''\n    return l*b\ndef lateral_surface_parallelogram(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given length l, width b and height h.\n    '''\n    return l*b+l*h+b*h\ndef lateral_surface_triangle(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given length l, width b and height h.\n    '''\n    return math.sqrt(l**2+h**2)-l\ndef lateral_surface_trapezium(l,b,h,a):\n    '''\n    Write a function to find the lateral surface area of a trapezium given length l, width b and height h.\n    '''\n    return 2*l*a+2*b*h+2*h*l\ndef lateral_surface_trapezium(l,b,h,a):\n    '''\n    Write a function to find the lateral surface area of a trapezium given length l, width b and height h.\n    '''\n    return 2*l*a+2*b*h+2*h*l\ndef lateral_surface_parallelogram(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given length l and width b and height h.\n    '''\n    return l*b+l*h+b*h\ndef lateral_surface_square(l):\n    '''\n    Write a function to find the lateral surface area of a square given length l.\n    '''\n    return l*l\ndef lateral_surface_square(l,b):\n    '''\n    Write a function to find the lateral surface area of a square given length l and width b.\n    '''\n    return l*b+l*b+b*b\ndef lateral_surface_square(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a square given length l, width b and height h.\n    '''\n    return l*b+l*h+b*h+b*h\ndef lateral_surface_square(l,b,h,a):\n    '''\n    Write a function to find the lateral surface area of a square given length l, width b, height h and side a.\n    '''\n    return l*b+l*h+b*h+a*a\ndef lateral_surface_square(l,b,h,a,c):\n    '''\n    Write a function to find the lateral surface area of a square given length l, width b, height h and side a.\n    '''\n    return l*b+l*h+b*h+a*a+a*a+c*c\ndef lateral_surface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse given semi-major axis a and semi-minor axis b.\n    '''\n    return math.pi*a*b\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateral_surface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    return math.pi*r**2\ndef lateral_surface_cuboid(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width b and height h.\n    '''\n    return 2*l*b+2*b*h+2*h*l\ndef lateral_surface_cylinder(h,r):\n    '''\n    Write a function to find the lateral surface area of a cylinder given height h and radius r.",
        "num_ids": 22
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\n",
        "num_ids": 18
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r\n    base = math.pi*r*(r+h)\n    height = math.pi*h*h\n    print(area+base+height)\n    return area+base+height\nprint(lateralsurface_cone(4,5))\n",
        "num_ids": 71
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Make sure that r and h are positive, if not raise a TypeError.\n    if type(r) is not int and type(h) is not int:\n        raise TypeError\n    if r < 0 or h < 0:\n        raise TypeError\n    return math.pi * r**2 * h\n",
        "num_ids": 73
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "num_ids": 44
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[ ]|[,:]\", ':', text)\n    \ndef remove_specialchar(text):\n    '''\n    Write a function to remove all characters which are not alphabetic or numerical.\n    '''\n    return re.sub(r\"[^a-zA-Z0-9]+\", '', text)\n    \ndef reverse_words(text):\n    '''\n    Write a function that reverses the words in a sentence.\n    '''\n    return''.join(text.split()[::-1])\n    \ndef replace_numbers(text):\n    '''\n    Write a function to replace all occurrences of the numbers with their corresponding alphabet characters.\n    '''\n    return re.sub(r'[0-9]+', '', text)\n    \ndef remove_punctuations(text):\n    '''\n    Write a function to remove all punctuation characters.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\n",
        "num_ids": 23
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':')\n",
        "num_ids": 13
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    specialchar = \"!@#$%^&*()-=+_`~\\\"|[]{}<>?/,./;\"\n    for ch in specialchar:\n        text = text.replace(ch,\"\")\n    return text\n",
        "num_ids": 56
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n",
        "num_ids": 27
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[\\s,.]+',':',text)\n    return text\n",
        "num_ids": 25
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # All the. are replaced with :\n    text = re.sub(r'[.,]', ':', text)\n    # All the spaces are replaced with :\n    text = re.sub(r'[\\s]+', ':', text)\n    # All the commas are replaced with,\n    text = re.sub(r'[\\,]+', ',', text)\n    return text\n",
        "num_ids": 95
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[,.:]\",':',text)\n",
        "num_ids": 19
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = re.sub(r\"[,.]\", ':', text)\n    return text.replace(',', ':')\n",
        "num_ids": 33
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = start + (end - start)//2\n        if A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n",
        "num_ids": 69
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if A[mid] < x:\n            lo = mid + 1\n        elif A[mid] > x:\n            hi = mid - 1\n        else:\n            return mid\n    return lo\n",
        "num_ids": 84
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 98
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    low, high = 0, n-1\n    while low <= high:\n        mid = low + (high - low)//2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            high = mid-1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 113
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A == []:\n        return None\n    elif A[0] == x:\n        return 0\n    elif A[-1] == x:\n        return len(A) - 1\n    else:\n        start, end = 0, len(A) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if A[mid] > x:\n                end = mid - 1\n            elif A[mid] < x:\n                start = mid + 1\n            else:\n                return mid\n        return start\n",
        "num_ids": 132
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def left_boundary_of_element_to_be_found(arr, x):\n        '''\n        This function is used to find the left boundary of the element\n        to be found in an array.\n        '''\n        lo = 0\n        hi = len(arr)\n        while lo < hi:\n            mid = lo + (hi-lo)//2\n            if x == arr[mid]:\n                return mid\n            elif x < arr[mid]:\n                hi = mid\n            else:\n                lo = mid + 1\n        return -1\n",
        "num_ids": 79
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0 or A[0] > x:\n        return -1\n    start = 0\n    end = len(A) - 1\n    while start + 1 < end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid\n        else:\n            start = mid\n    if A[start] == x:\n        return start\n    if A[end] == x:\n        return end\n    return -1\n",
        "num_ids": 131
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x in A:\n        return A.index(x)\n    else:\n        return -1\n",
        "num_ids": 27
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    i = 0\n    j = n - 1\n    while i <= j:\n        mid = i + (j - i) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return -1\n",
        "num_ids": 90
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            prod = prod * arr[j]\n            if j!= i:\n                prod = prod / arr[i]\n            \n            if j == n - 1:\n                break\n",
        "num_ids": 82
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if(len(arr) == 0):\n        return 0\n    else:\n        total = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    total = total + (arr[i]*arr[j]*arr[k])\n        return total\n",
        "num_ids": 95
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sums = arr[0]\n    prods = arr[0]\n",
        "num_ids": 28
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(1,len(arr)+1):\n        for j in range(0,len(arr)-i+1):\n            product = 1\n            for k in range(j,j+i):\n                product *= arr[k]\n            sum += product\n    return sum\n",
        "num_ids": 75
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    max_lst = max(arr)\n    sum_of_prod = 0\n    sum_of_subarrays = []\n    for i in range(0,len(arr)-(max_lst-1)):\n        if arr[i]>0:\n            temp = []\n            temp.append(arr[i])\n            for j in range(i+1,len(arr)):\n                if arr[j]>0:\n                    temp.append(arr[j])\n                    if len(temp)==(max_lst):\n                        sum_of_subarrays.append(temp)\n        \n    for sublist in sum_of_subarrays:\n        sum_of_prod = sum_of_prod + (sublist[0]*sublist[-1])\n    \n    return sum_of_prod\n",
        "num_ids": 215
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = sum(arr)\n    p = product(arr)\n    s = s - p\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            s += arr[i] * arr[j]\n    return s\n",
        "num_ids": 50
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            res += arr[i] * arr[j]\n    return res\nprint(sum_Of_Subarray_Prod(arr))\n",
        "num_ids": 67
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # The idea of this problem is to have the recursive function then call the function from left and right part of the list\n    # which will help us to find the sum of products of all sublist of list.\n",
        "num_ids": 48
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                ans+=arr[i]*arr[j]*arr[k]\n    return ans\n",
        "num_ids": 73
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(n,end=' ')\n    # your code here\n    for i in range(1,n):\n        if i<n-1:\n            print((n-i)<<1,end=' ')\n        else:\n            print(n>>1,end=' ')\n    print()\n",
        "num_ids": 73
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & 0x55555555\n    n = n | (n >> 1)\n    n = n & 0x33333333\n    n = n | (n >> 2)\n    n = n & 0x0f0f0f0f\n    n = n | (n >> 4)\n    n = n & 0xf0f0f0f0\n    n = n | (n >> 8)\n    n = n & 0x00ff00ff\n    n = n | (n >> 16)\n    n = n & 0x0000ffff\n    n = n | (n >> 32)\n    n = n & 0x00000000ffffffff\n    return n\n",
        "num_ids": 158
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    ans = 0\n    while (n):\n        ans = (ans << 1) | (n & 1)\n        n = n >> 1\n    return ans\n",
        "num_ids": 39
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    '''\n    A number with only even numbers is called Even parity bit. It represents a condition of the system.\n    If the number is odd then the output of the system is 0 else output is 1.\n    '''\n    '''\n    a = int(input(\"Enter the number: \"))\n    for i in range(1,a+1):\n        if i%2!=0:\n            print(i)\n    '''\n    '''\n    Write a python program to count the number of 1 bits in a given number.\n    '''\n    '''\n    Write a python program to print the sum of multiples of 3 and 5 between 0 and limit.\n    '''\n    '''\n    Write a python program to print the numbers in a list which are divisible by 5 and 7.\n    '''\n    '''\n    Write a python program to remove the duplicate entries from a given list.\n    '''\n    '''\n    Write a python program to sum the individual items in a list.\n    '''\n    '''\n    Write a python program to print the first and last 5 elements from a list.\n    '''\n    '''\n    Write a python program to print the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to print the list after removing the 0th, 2nd and 4th elements.\n    '''\n    '''\n    Write a python program to print the length of a list.\n    '''\n    '''\n    Write a python program to print the index position of an element in a list.\n    '''\n    '''\n    Write a python program to check whether a list contains a particular element or not.\n    '''\n    '''\n    Write a python program to check whether a list contains a particular element or not.\n    '''\n    '''\n    Write a python program to print the list after removing the 0th, 2nd and 4th elements.\n    '''\n    '''\n    Write a python program to check whether a list contains a particular element or not.\n    '''\n    '''\n    Write a python program to print the index position of an element in a list.\n    '''\n    '''\n    Write a python program to convert a list of characters into a list of integers.\n    '''\n    '''\n    Write a python program to check whether a given list is palindrome or not.\n    '''\n    '''\n    Write a python program to remove the nth index element from a list.\n    '''\n    '''\n    Write a python program to remove the nth index element from a list.\n    '''\n    '''\n    Write a python program to find the maximum element from a list.\n    '''\n    '''\n    Write a python program to print the number of even and odd numbers from a list.\n    '''\n    '''\n    Write a python program to print the frequency of each element in a list.\n    '''\n    '''\n    Write a python program to print the frequency of each element in a list.\n    '''\n    '''\n    Write a python program to print the frequency of each element in a list.\n    '''\n    '''\n    Write a python program to convert a list of characters into a list of integers.\n    '''\n    '''\n    Write a python program to print the frequency of each element in a list.\n    '''\n    '''\n    Write a python program to count the number of characters in a string.\n    '''\n    '''\n    Write a python program to find the sum of the cubes of the first n positive integers.\n    '''\n    '''\n    Write a python program to convert a list of characters into a list of integers.\n    '''\n    '''\n    Write a python program to find the sum of the cubes of the first n positive integers.\n    '''\n    '''\n    Write a python program to check whether a list contains a particular element or not.\n    '''\n    '''\n    Write a python program to convert a list of characters into a list of integers.\n    '''\n    '''\n    Write a python program to print the numbers in a list in which only even numbers occur.\n    '''\n    '''\n    Write a python program to print the sum of the cubes of the first n positive integers.\n    '''\n    '''\n    Write a python program to find the index position of an element in a list.\n    '''\n    '''\n    Write a python program to print the first n positive integers in a list.\n    '''\n    '''\n    Write a python program to print the first n positive integers in a list.\n    '''\n    '''\n    Write a python program to print the frequency of each element in a list.\n    '''\n    '''\n    Write a python program to print the frequency of each element in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to print the first n positive integers in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n    '''\n    '''\n    Write a python program to count the number of times a particular element occurs in a list.\n",
        "num_ids": 22
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mid = n & ~(n - 1)\n    return mid\n",
        "num_ids": 18
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    a = n & ~n + 1\n    return a\n",
        "num_ids": 16
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n<<1\n    n = n&0xffffffff\n    return n\n",
        "num_ids": 23
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = n >> 1\n    n = n ^ first_bit\n    n = n ^ last_bit\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n >> 1\n    n = n | n << 1\n    return n\n",
        "num_ids": 22
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (1 << (len(bin(n)) - 3))\n",
        "num_ids": 20
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1\n",
        "num_ids": 50
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i+1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i+1\n",
        "num_ids": 50
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x < a:\n        return\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i+1\n",
        "num_ids": 60
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l, r = 0, len(a)-1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if x == a[mid]:\n            return mid\n        if x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\n",
        "num_ids": 79
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    l = 0\n    r = len(a) - 1\n    if len(a) == 1:\n        if x >= a[0]:\n            return 0\n        if x <= a[0]:\n            return 1\n    while l <= r:\n        m = (l + r)//2\n        if x >= a[m]:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n",
        "num_ids": 116
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return 0\n    if x <= a[0]:\n        return 0\n    if x >= a[-1]:\n        return len(a)\n    i = bisect.bisect_left(a, x)\n    if x == a[i-1]:\n        return i\n    return i+1\n",
        "num_ids": 80
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if a[mid] > x:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\ndef numOfElements(a, x):\n    '''\n    Write a function to count the number of occurrences of a value in a sorted array.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\ndef reverse_a_linked_list(a):\n    '''\n    Write a function that reverses a given linked list.\n    '''\n    prev = None\n    curr = a\n    while curr is not None:\n        next = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next\n    return prev\ndef has_cycle(a):\n    '''\n    Write a function to determine if a cycle exists in a singly linked list.\n    '''\n    slow = a\n    fast = a\n    while slow and fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False\ndef remove_kth_node(a, k):\n    '''\n    Write a function that removes the kth node from a singly linked list.\n    '''\n    slow = a\n    fast = a\n    while k:\n        fast = fast.next\n        k -= 1\n    while fast.next:\n        fast = fast.next\n        slow = slow.next\n    slow.next = slow.next.next\n    return a\ndef insert_at_k_position(a, x, k):\n    '''\n    Write a function that inserts a value at a given index in a singly linked list.\n    '''\n    def insert(x, k):\n        '''\n        Write a function that inserts a value at a given index in a singly linked list.\n        '''\n        curr = a\n        count = 0\n        while count < k:\n            curr = curr.next\n            count += 1\n        new_node = Node(x)\n        new_node.next = curr.next\n        curr.next = new_node\n        return a\n    curr = a\n    count = 0\n    while curr:\n        if count == k:\n            temp = curr.next\n            curr.next = x\n            x.next = temp\n        curr = curr.next\n        count += 1\n    return a\ndef find_middle_element(a):\n    '''\n    Write a function that finds the middle element in a singly linked list.\n    '''\n    slow = a\n    fast = a\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    return slow\ndef partition(a, x):\n    '''\n    Write a function that partitions a linked list around a value x, such that all nodes less than x come before nodes greater than or equal to x.\n    '''\n    less = None\n    greater = None\n    curr = a\n    while curr:\n        next = curr.next\n        curr.next = None\n        if curr.data < x:\n            if less is None:\n                less = curr\n            else:\n                less.next = curr\n            less = curr\n        else:\n            if greater is None:\n                greater = curr\n            else:\n                greater.next = curr\n            greater = curr\n        curr = next\n    if greater is not None:\n        greater.next = None\n    if less is not None:\n        less.next = greater\n    return a\ndef reverse_sublist(a, x, y):\n    '''\n    Write a function that reverses the given sublist of a linked list.\n    '''\n    prev = None\n    curr = a\n    while curr and curr.data!= x:\n        prev = curr\n        curr = curr.next\n    if curr is None:\n        return a\n    next = curr.next\n    curr.next = None\n    sub_list = reverse_sublist(next, x, y)\n    if prev is None:\n        a = sub_list\n    else:\n        prev.next = sub_list\n    return a\ndef is_palindrome(a):\n    '''\n    Write a function that checks whether a linked list is a palindrome or not.\n    '''\n    def get_palindrome(a, length):\n        '''\n        Write a function that checks whether a linked list is a palindrome or not.\n        '''\n        curr = a\n        count = 0\n        while curr:\n            curr = curr.next\n            count += 1\n        if length == count:\n            return True\n        elif length == count // 2:\n            return False\n        else:\n            return get_palindrome(a, length - 1)\n    return get_palindrome(a, length(a))\ndef intersection(a, b):\n    '''\n    Write a function that returns the node at which the intersection of two singly linked lists begins.\n    '''\n    def get_intersection(a, b):\n        '''\n        Write a function that returns the node at which the intersection of two singly linked lists begins.\n        '''\n        curr = a\n        while curr and curr.next:\n            curr = curr.next\n        curr = b\n        while curr and curr.next:\n            curr = curr.next\n        return curr\n    return get_intersection(a, b)\ndef has_cycle(a):\n    '''\n    Write a function that returns whether or not a linked list contains a cycle.\n    '''\n    slow = a\n    fast = a\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False\ndef find_middle_of_ll(a):\n    '''\n    Write a function that finds the middle element in a singly linked list.\n    '''\n    slow = a\n    fast = a\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\ndef merge_two_sorted_ll(a, b):\n    '''\n    Write a function that merges two sorted singly linked lists into one sorted singly linked list.\n    '''\n    def merge(a, b):\n        '''\n        Write a function that merges two sorted singly linked lists into one sorted singly linked list.\n        '''\n        merged = None\n        while a and b:\n            if a.data < b.data:\n                temp = a\n                a = a.next\n            else:\n                temp = b\n                b = b.next\n            if merged is None:\n                merged = temp\n            else:\n                merged.next = temp\n            merged = temp\n        if a:\n            merged.next = a\n        if b:\n            merged.next = b\n        return merged\n    curr = None\n    while a and a.next:\n        a = a.next\n        curr = merge(a, curr)\n    return curr\ndef remove_duplicates(a):\n    '''\n    Write a function that removes all duplicate nodes from a singly linked list.\n    '''\n    prev = None\n    curr = a\n    while curr",
        "num_ids": 17
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1\n",
        "num_ids": 56
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #code here\n    #find the index value of x in the array\n    idx = bisect.bisect_left(a, x)\n    if idx == 0 or a[idx-1] > x:\n        return idx\n    else:\n        return idx - 1\n",
        "num_ids": 70
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex,string)):\n        return \"Yes, It is a starting with a vowel.\"\n    return \"No, It is not a starting with a vowel.\"\n",
        "num_ids": 45
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex,string))\n    \nif __name__ == '__main__': \n    s = 'BANANA'\n    print(check_str(s)) \n    s = 'JONAS'\n    print(check_str(s)) \n    s = 'AaANNABbABBAcC'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str(s)) \n    s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(check_str",
        "num_ids": 1980
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex,string) \n    return match!= None\n",
        "num_ids": 23
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string)!= None:\n        print(\"Given string is starting with vowel\")\n    else:\n        print(\"Given string is not starting with vowel\")\n",
        "num_ids": 44
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    #to check whether the string is starting with a vowel or not \n    if bool(re.match(regex,string)) == True:\n        return True \n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    reg = re.compile(regex)\n    match = reg.match(string)\n    if match:\n        if match.group()[0].upper() in 'AEIOU':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef main():\n    '''\n    Write a function to find the occurrence of vowels in the given string.\n    '''\n    string = 'the quick brown fox jumps over the lazy dog'\n    print(check_str(string))\nif __name__ == '__main__':\n    main(",
        "num_ids": 41
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (n-1)*(n-2)\n",
        "num_ids": 15
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1/n * geometric_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n*(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n + geometric_sum(n - 1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n * geometric_sum(n - 1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 1\n    return geometric_sum(n-1) + n\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(n-1))/(n-1)\n",
        "num_ids": 33
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 0:\n        raise ValueError('n must be positive')\n    elif n == 0:\n        return 1\n    else:\n        return n*(1 + geometric_sum(n-1))\n",
        "num_ids": 52
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a,b,c=0,0,0\n    a=n//2\n    b=a*(a+1)//2\n    c=a*b//2\n    if n%2!=0:\n        i=n//2\n        print(i)\n    else:\n        i=(n//2)-1\n        print(i)\n",
        "num_ids": 86
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n):\n        for j in range(1,i):\n            if ((1+2*j)*(i-j)) // 2 == (1+2*j)*i:\n                print(i,j)\n                print((1+2*j)*(i-j))\n                print((1+2*j)*i)\n                print(i)\n                return(i)\nfind_Index(9",
        "num_ids": 103
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    number = 3\n    count = 0\n    while(count!= n):\n        number = number + 1\n        count = count + 1\n    return number - 1\n",
        "num_ids": 41
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # m = n//2 + 1\n    m = n + 1\n    return math.floor( math.log2(m) )\n",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    x = 10**(n-1) +1\n    y = 10**n\n    for i in range(x,y):\n        if (i*(i+1))/2 == i:\n            return i\n    return -1\n",
        "num_ids": 58
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while(True):\n        if (i**2-n**2)%2==0:\n            break\n        i+=1\n    \n    if (i**2-n**2)%2==0:\n        return i\n    else:\n        return i-1\n",
        "num_ids": 71
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count\n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    a = n//2\n    b = math.floor(math.sqrt(1 + 8*n))\n    count = 0\n    for i in range(a,b):\n        if(math.sqrt(1+8*i) == math.floor(math.sqrt(1+8*i))):\n            count += 1\n        else:\n            pass\n    return b - count",
        "num_ids": 120
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # code here\n    for i in range(1,n+1):\n        print(i*(i+1)//2)\n",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Loop will terminate when n=1\n    for i in range(1,n):\n        num=i+i+1\n        #  Check if num is smaller than 3*n\n        if (num<3*n):\n            # Find index of num\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(temp)\n        num=i+i\n        if (num<3*n):\n            temp=int(math.log(num,2))\n            return int(tem",
        "num_ids": 1981
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    while(True):\n        n = n + 1\n        n = n * (n + 1) // 2\n        if n >= 10001:\n            break\n        index += 1\n    return index\n",
        "num_ids": 53
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for item in test_tup:\n        if item in result:\n            result[item].append(1)\n        else:\n            result[item] = [1]\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n",
        "num_ids": 48
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    a = {}\n    for i in range(0,len(test_tup),2):\n        a[test_tup[i]] = test_tup[i+1]\n    return a\n",
        "num_ids": 50
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val_dict = {}\n    for idx in range(len(test_tup)-1):\n        key_val_dict[test_tup[idx]] = test_tup[idx+1]\n    return key_val_dict\n",
        "num_ids": 63
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n",
        "num_ids": 50
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict1 = {}\n    for i in range(0, len(test_tup)):\n        if i == 0:\n            dict1[test_tup[i]] = test_tup[i + 1]\n        elif i == len(test_tup) - 1:\n            dict1[test_tup[i - 1]] = test_tup[i]\n        else:\n            dict1[test_tup[i - 1]] = test_tup[i + 1]\n    return dict1\n",
        "num_ids": 125
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i: test_tup[i] for i in range(len(test_tup))}\n",
        "num_ids": 28
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup))\n",
        "num_ids": 19
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(len(test_tup)):\n        if i == 0:\n            new_dict[test_tup[i]] = test_tup[i+1]\n        else:\n            new_dict[test_tup[i]] = test_tup[i-1]\n    return new_dict\n",
        "num_ids": 87
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict\n",
        "num_ids": 53
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l=[]\n    for i in s:\n        if i not in l:\n            l.append(i)\n    if len(l) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) <= 1:\n        return True\n    if s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s1 = s\n    s2 = s\n    while True :\n        if len(s1) == 0 and len(s2) == 0 :\n            return True\n        if len(s1)!= len(s2) :\n            return False\n        if s1 == s2 :\n            return True\n        s1 = s1[1:]\n        s2 = s2[1:]\n",
        "num_ids": 94
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==0 or len(s)==1:\n        return True\n    if s[0]==s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = []\n    for i in range(len(s)):\n        if s[i] in l:\n            return False\n        else:\n            l.append(s[i])\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s1 = s\n    n = len(s1)\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    i = 0\n    while (i < n) :\n        if s1[i]!= s1[n - 1]:\n            return False\n        i = i + 1\n    return True\n",
        "num_ids": 85
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (s == s[0]*len(s))\n    \n    \n",
        "num_ids": 21
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    ch = []\n    for i in range(len(s)) :\n        if s[i] not in ch :\n            ch.append(s[i])\n",
        "num_ids": 40
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==0:\n        return False\n    else:\n        return s[0]==s[-1]\n",
        "num_ids": 33
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)/4\n    A = (1/6) * s * (1 + math.sqrt(3))\n    return A\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    s = (side**2)/2\n    A = math.sqrt(3) * s\n    return A\n",
        "num_ids": 29
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side**2)*(5/12)\n    return area\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    area = side**2\n    return area\ndef area_rectangle(width, height):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = width*height\n    return area\ndef area_parallelogram(base, height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    area = base*height\n    return area\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    volume = side**3\n    return volume\ndef volume_cylinder(height, radius):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    volume = height*math.pi*radius**2\n    return volume\ndef volume_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    volume = height*math.pi*radius**2\n    return volume\ndef volume_cylinder_hole(height, radius):\n    '''\n    Write a function to caluclate the volume of a cylinder with hole.\n    '''\n    volume = height*math.pi*radius**2-math.pi*radius**2\n    return volume\ndef volume_cone_hole(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone with hole.\n    '''\n    volume = height*math.pi*radius**2-math.pi*radius**2\n    return volume\ndef volume_cone_with_hole(radius, height, angle):\n    '''\n    Write a function to caluclate the volume of a cone with hole.\n    '''\n    volume = math.pi*radius**2*height/angle\n    return volume\ndef volume_cone_with_hole_2(radius, height, angle):\n    '''\n    Write a function to caluclate the volume of a cone with hole.\n    '''\n    volume = math.pi*radius**2*height/angle\n    return volume\ndef volume_cone_with_hole_3(radius, height, angle):\n    '''\n    Write a function to caluclate the volume of a cone with hole.\n    '''\n    volume = math.pi*radius**2*height/angle\n    return volume\ndef volume_cone_with_hole_4(radius, height, angle):\n    '''\n    Write a function to caluclate the volume of a cone with hole.\n    '''\n    volume = math.pi*radius**2*height/angle\n    return volume\ndef volume_tetrahedron_hole(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_2(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_3(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_4(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_5(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_6(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_7(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_8(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_9(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_10(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_11(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_12(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_13(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_14(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_15(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_16(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_17(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_18(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_19(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_20(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.\n    '''\n    volume = math.pi*radius**2*height/3\n    return volume\ndef volume_tetrahedron_hole_21(radius, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with hole.",
        "num_ids": 21
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    A = side**2/2\n    return A\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side**2)*(3*(1+math.sqrt(5)))/4\n    return area\n",
        "num_ids": 30
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5*math.sqrt(3)/side**2\n",
        "num_ids": 19
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side ** 2 / 4\n    return a\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    area = (1/6)*(5*side**2 - 5*side - 4)\n    \n    print('The area of the tetrahedron with side %d is %f' %(side,area))\n    \narea_tetrahedron(5)\n",
        "num_ids": 67
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2 / 4\n",
        "num_ids": 10
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Your code here\n    # side = input('Enter the length of the first side of the tetrahedron: ')\n    # try:\n    #     side = float(side)\n    # except ValueError:\n    #     side = -1\n    # if side == -1:\n    #     raise ValueError(\"side can't be equal to -1\")\n    side = float(side)\n    if side > 0:\n        area = (1/4)*(side*side*side)\n        return area\n    else:\n        raise ValueError(\"side can't be equal to 0\")\n",
        "num_ids": 140
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    print('The area of a tetrahedron is: %.2f' % area)\n",
        "num_ids": 37
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    for i in range(len(list)):\n        if i < m:\n            print(i, \" \", list)\n        else:\n            print(i, \" \", list[-1])\n            list[i] = list[i-1]\n    print(list)\n",
        "num_ids": 69
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_a = []\n    for i in range(m):\n        list_a.append(list[-1])\n        list.pop()\n    return list_a + list\n",
        "num_ids": 45
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        # Grab the first element in the list\n        x = list.pop(0)\n        # Add the first element to the end of the list\n        list.append(x)\n",
        "num_ids": 52
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    list_len = len(list)\n    m = m % list_len\n    \n    if m == 0:\n        return list\n    new_list = list[list_len - m:] + list[0:list_len - m]\n    return new_list\n",
        "num_ids": 76
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return list\n    elif len(list) == 1:\n        return list\n    else:\n        for i in range(m):\n            list.insert(0, list[-1])\n            list.pop()\n        return list\n",
        "num_ids": 67
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l=len(list)\n    for i in range(l):\n        m = m + 1\n        list.append(list.pop(0))\n    return list\n",
        "num_ids": 42
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if list is None or len(list) == 0 or len(list) == 1:\n        return list\n    else:\n        for i in range(len(list)):\n            list.append(list.pop(0))\n    return list\n",
        "num_ids": 59
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # code here\n    m = len(list) - m\n    return list[m:] + list[:m]\n    \n",
        "num_ids": 32
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(x is not None for x in test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        print(\"Yes, there is at least one None value\")\n    else:\n        print(\"No, there is no None value\")\n",
        "num_ids": 48
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(ele == None for ele in test_tup):\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    #use 'is None' to check if the value is None or not\n    if (any(test_tup) == False):\n        print('None values found')\n    else:\n        print('None values not found')\n",
        "num_ids": 54
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val == None:\n            print(\"We found a None value in the given tuple!\")\n            return True\n    print(\"The given tuple has no None value in it!\")\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup.count(None) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup) is None:\n        print(f\"{test_tup} contains none value\")\n    else:\n        print(f\"{test_tup} does not contain none value\")\n",
        "num_ids": 53
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(x is not None for x in test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None not in test_tup\n",
        "num_ids": 12
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return (\n        (lambda x: lambda y: (lambda z: lambda w: (lambda t: sum((lambda u: lambda v: (lambda w: (lambda x: x * y)(x), x)(y)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)(",
        "num_ids": 1967
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #returns the number of divisible by each digit\n    return_list = []\n    for i in range(startnum, endnum):\n        for num in str(i):\n            if i % int(num) == 0:\n                return_list.append(i)\n    return return_list\n",
        "num_ids": 72
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    start = int(startnum)\n    end = int(endnum)\n    range_nums = range(start, end+1)\n    nums_divisible_by_digits = []\n    for num in range_nums:\n        nums_divisible_by_digits.append(num)\n    nums_divisible_by_digits_list = list(map(lambda x: x, nums_divisible_by_digits))\n    nums_divisible_by_digits_list = list(map(lambda x: str(x), nums_divisible_by_digits_list))\n    nums_divisible_by_digits_list = list(map(lambda x: int(x), nums_divisible_by_digits_list))\n    nums_divisible_by_digits_list = list(filter(lambda x: x!= 0, nums_divisible_by_digits_list))\n    return nums_divisible_by_digits_list\n",
        "num_ids": 244
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return (lambda num : [i for i in range(startnum,endnum + 1) if all([True if (num % i == 0) else False for i in range(startnum,endnum+1)])])\n",
        "num_ids": 53
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    '''\n    Using the below list of numbers, write a Python program to find all the numbers between 0 and 100 having a sum divisible by 9.\n    Sample List : num_list = [12, 30, 42, 66, 81, 100, 30, 55, 77, 90]\n    Expected Output : [30, 55, 66]\n    '''\n    '''\n    num_list = [12, 30, 42, 66, 81, 100, 30, 55, 77, 90]\n    output = []\n    for i in num_list:\n        if sum(i % j for j in range(2,10)):\n            output.append(i)\n    print(output)\n    '''\n    '''\n    Write a Python program to find all the numbers between 0 and 100 having a sum divisible by 9 and a product divisible by 3.\n    Sample List : num_list = [12, 30, 42, 66, 81, 100, 30, 55, 77, 90]\n    Expected Output : \n    [66, 81]\n    '''\n    '''\n    num_list = [12, 30, 42, 66, 81, 100, 30, 55, 77, 90]\n    output = []\n    for i in num_list:\n        if sum(i % j for j in range(2,10)) and i % 3:\n            output.append(i)\n    print(output)\n    '''\n    '''\n    Write a Python program to find all the numbers between 0 and 100 having a sum divisible by 9 and a product divisible by 3.\n    Sample List : num_list = [12, 30, 42, 66, 81, 100, 30, 55, 77, 90]\n    Expected Output : \n    [66, 81]\n    '''\n    '''\n    num_list = [12, 30, 42, 66, 81, 100, 30, 55, 77, 90]\n    output = []\n    for i in num_list:\n        if sum(i % j for j in range(2,10)) and i % 3:\n            output.append(i)\n    print(output)\n    '''\n    '''\n    Write a Python program to find the first non-repeating character in a given string.\n    Note: In a string, there can be multiple characters having the same frequency.\n    Sample String : 'thequickbrownfoxjumpsoverthelazydog'\n    Expected Output : d\n    '''\n    '''\n    s = 'thequickbrownfoxjumpsoverthelazydog'\n    output = ''\n    if s:\n        for i in s:\n            count = s.count(i)\n            if count == 1:\n                output = i\n                break\n    print(output)\n    '''\n    '''\n    Write a Python program to create a histogram from a given list of integers.\n    Note : histogram should be a list of lists.\n    Sample List : [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Expected Output : [[1], [2, 4], [3, 5, 7], [8, 6, 9]]\n    '''\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    l = []\n    for i in range(len(nums)):\n        if l == []:\n            l.append([nums[i]])\n        else:\n            for j in l:\n                if nums[i] in j:\n                    j.append(nums[i])\n                    break\n            else:\n                l.append([nums[i]])\n    print(l)\n    '''\n    '''\n    Write a Python program to count the number of even and odd numbers from a series of numbers.\n    Sample numbers: numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Expected Output:\n    Number of even numbers : 5\n    Number of odd numbers : 4\n    '''\n    '''\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    even_count = 0\n    odd_count = 0\n    for i in numbers:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    print(\"Number of even numbers :\", even_count)\n    print(\"Number of odd numbers :\", odd_count)\n    '''\n    '''\n    Write a Python program to print the documents (syntax, description etc.) of Python built-in function(s).\n    Sample function : abs()\n    Expected Result :\n    abs(number) -> number\n    Return the absolute value of the argument.\n    '''\n    '''\n    abs = lambda x: abs(-x)\n    print(abs(-7))\n    '''\n    '''\n    Write a Python program to create Fibonacci series upto n terms using Lambda.\n    Note :\n    Fibonacci Series: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\n    '''\n    '''\n    nterms = int(input(\"enter the number of terms\"))\n    n1, n2 = 0, 1\n    count = 0\n    if nterms <= 0:\n        print(\"enter positive integer\")\n    elif nterms == 1:\n        print(\"Fibonacci sequence upto\",nterms,\":\")\n        print(n1)\n    else:\n        print(\"Fibonacci sequence upto\",nterms,\":\")\n        while count < nterms:\n            print(n1,end=\", \")\n            nth = n1 + n2\n            # update values\n            n1 = n2\n            n2 = nth\n            count += 1\n    '''\n    '''\n    Write a Python program to find the volume of a sphere with radius 6.\n    '''\n    '''\n    radius = float(input(\"Enter the radius of the sphere: \"))\n    if radius > 0:\n        volume = (4.0/3.0)*3.14*radius*radius*radius\n        print(\"The volume of the sphere is :\",volume)\n    else:\n        print(\"Enter positive value\")\n    '''\n    '''\n    Write a Python program to calculate number of days between two dates.\n    Sample data : (2014, 7, 2), (2014, 7, 11)\n    Expected Output : 9 days\n    '''\n    '''\n    date1 = (2014, 7, 2)\n    date2 = (2014, 7, 11)\n    import datetime\n    d1 = datetime.date(date1[0], date1[1], date1[2])\n    d2 = datetime.date(date2[0], date2[1], date2[2])\n    delta = d2 - d1\n    print(delta.days)\n    '''\n    '''\n    Write a Python program to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters.\n    Sample String : \"Hello Mr. Rogers, how are you this fine Tuesday?\"\n    Expected Output : Mr. Rogers, how are you this fine Tuesday?\n    '''\n    '''\n    s = input(\"enter the string\")\n    upper = s[0:4].upper()\n    if len(upper) >= 2:\n        print(upper)\n    else:\n        print(s)\n    '''\n    '''\n    Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\n    Sample String : 'The lyrics is not that poor!'\n    'The lyrics is poor!'\n    Expected Result : 'The lyrics is good!'\n    '''\n    '''\n    s = input(\"enter the string\")\n    if s.find('not') < s.find('poor'):\n        s = s.replace('not','good')\n        print(s)\n    else:\n        print(s)\n    '''\n    '''\n    Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leav",
        "num_ids": 59
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = []\n    for num in range(startnum, endnum+1):\n        if len(str(num)) == len(set(str(num))):\n            l.append(num)\n    return l\n",
        "num_ids": 53
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    x = []\n    for num in range(startnum, endnum):\n        if num % 2 == 0 and num % 3 == 0 and num % 4 == 0 and num % 5 == 0 and num % 6 == 0 and num % 7 == 0 and num % 8 == 0 and num % 9 == 0 and num % 10 == 0:\n            x.append(num)\n    return x\n",
        "num_ids": 89
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    results = []\n    for i in range(startnum, endnum):\n        num = str(i)\n        if (num[0] in num) and (num[1] in num) and (num[2] in num) and (num[3] in num) and (num[4] in num) and (num[5] in num) and (num[6] in num) and (num[7] in num) and (num[8] in num) and (num[9] in num):\n            results.append(i)\n    return results\n",
        "num_ids": 132
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisibles = []\n    for i in range(startnum, endnum):\n        if (i%2 == 0):\n            continue\n        else:\n            x = list(str(i))\n            if (2 in x):\n                divisibles.append(i)\n    return divisibles\n",
        "num_ids": 73
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible = []\n    for num in range(startnum,endnum+1):\n        if all(elem in str(num) for elem in str(num)):\n            divisible.append(num)\n    return divisible\n",
        "num_ids": 58
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=0 and a<=360:\n        return math.pi*r**2\n    else:\n        return None\n",
        "num_ids": 33
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*math.sin(math.radians(a))\n    \ndef find_positive_integer(prompt):\n    while True:\n        number = input(prompt)\n        if number.isdigit():\n            number = int(number)\n            return number\n        else:\n            print(\"This is not a positive integer. Please try again\")\n            continue\ndef find_interger(prompt):\n    while True:\n        number = input(prompt)\n        if number.isdigit():\n            return int(number)\n        else:\n            print(\"This is not an integer. Please try again\")\n            continue\ndef find_float(prompt):\n    while True:\n        number = input(prompt)\n        if number.isdigit():\n            number = float(number)\n            return float(number)\n        else:\n            print(\"This is not a float. Please try again\")\n            continue\n",
        "num_ids": 235
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    s=0.5*math.pi*r*r\n    if(a%360==0):\n        return s\n    else:\n        return s*(1-math.cos(math.radians(a)))\n",
        "num_ids": 66
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a < 0:\n        a = 360 + a\n    print(a/2)\n    return (math.pi*r*r*a)/(4*math.sin(math.pi/180*a/2))\n",
        "num_ids": 67
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    if a==0 or a==360:\n        return r*r*math.pi\n    else:\n        return (r*r*math.pi)*(1+(a*a)/(2*math.pi))\n",
        "num_ids": 64
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        return (math.pi*(r**2)*a)/4\n    return None\n",
        "num_ids": 29
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #find the total surface area\n    total_area = math.pi * (r**2)\n    \n    #find the area of the sector\n    sector_area = total_area * math.cos(math.radians(a))\n    \n    #if the angle is larger than 360 degrees\n    if sector_area > math.pi * (r**2):\n        print(\"The angle is larger than 360 degrees.\")\n    else:\n        print(\"The sector area is:\",sector_area)\n    \nsector_area(5,90)\nsector_area(5,360)\nsector_area(5,0)\n",
        "num_ids": 145
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a\ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\ndef fibonacci(n):\n    '''\n    Write a function to return the n-th Fibonacci number. The Fibonacci numbers are defined as the sum of two previous numbers. So the first few numbers are:\n    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,...\n    The Fibonacci sequence starts with 0 and 1, and each term is the sum of the previous two terms.\n    '''\n    if n == 0:\n        return n\n    elif n == 1:\n        return n\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef sum_of_digits(n):\n    '''\n    Write a function that takes a number and returns the sum of the digits in the number. So if the given number is 471, the function should return 7.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = int(n / 10)\n    return sum\ndef rot_string(s,n):\n    '''\n    Write a function that rotates a string by n characters. So if s is \u201cabc\u201d and n is 3, the function should return \u201ccba\u201d.\n    '''\n    return s[n:]+s[:n]\ndef rev(s):\n    '''\n    Write a function that takes a string and returns the reverse of the string. For example, the function rev('abcdefg') returns 'fedcba'.\n    '''\n    s = list(s)\n    s.reverse()\n    return ''.join(s)\ndef cmp_sum(a,b):\n    '''\n    Write a function that takes two numbers a and b and returns the sum of their squares. The input numbers are positive integers a and b.\n    '''\n    sum_a = a**2\n    sum_b = b**2\n    return sum_a+sum_b\ndef rotate_matrix(m):\n    '''\n    Write a function that takes a matrix and returns the matrix rotated by 90 degrees in the counter-clockwise direction.\n    '''\n    n = len(m)\n    for i in range(n):\n        for j in range(i,n):\n            m[i][j],m[j][i] = m[j][i],m[i][j]\n    for i in range(n):\n        for j in range(n//2):\n            m[i][j],m[i][-j-1] = m[i][-j-1],m[i][j]\n    return m\ndef print_grid(s,n):\n    '''\n    Write a function that takes a string s and a number n. The function should return a list of strings that are the first n characters of the string s.\n    '''\n    print(''.join(s[:n]))\n    return ''.join(s[:n])\ndef find_substring(s,ss):\n    '''\n    Write a function that takes a string and a substring and returns the starting index of the first occurrence of the substring in the string. If the substring is not found, then return -1.\n    '''\n    if s.count(ss) == 0:\n        return -1\n    else:\n        for i in range(len(s)):\n            if s[i:i+len(ss)] == ss:\n                return i\ndef min_window(s,t):\n    '''\n    Write a function that takes a string s and a string t and returns the tuple (a,b), where a is the length of the smallest window that contains both strings and b is the window. If there is no such window, then return None. For example, if the input strings are \u201cabcd\u201d and \u201ccd\u201d, the output is (3,2).\n    '''\n    if len(s) < len(t):\n        return None\n    #min_window = None\n    min_window = (len(s)-len(t),t)\n    for i in range(len(s)-len(t)+1):\n        substring = s[i:i+len(t)]\n        if all(substring.count(x) >= t.count(x) for x in set(substring)):\n            window = (i,i+len(t))\n            if min_window == None or window[1]-window[0] < min_window[1]-min_window[0]:\n                min_window = window\n    return min_window\ndef reverse_bits(n):\n    '''\n    Write a function that takes a number and returns the integer corresponding to the bits of the given number in reverse order. For example, if the input is 128, then your function should return 64.\n    '''\n    return (n&1)|((n>>1)&1)|((n>>2)&1)|((n>>3)&1)|((n>>4)&1)|((n>>5)&1)|((n>>6)&1)|((n>>7)&1)\ndef double_base_palindrome(x):\n    '''\n    Write a function that takes an integer x as input and returns a boolean value indicating whether or not the given integer is a palindrome. A palindrome is defined as a number that is the same when read from left to right or right to left. The function should return False if the integer is less than 0.\n    '''\n    if x < 0:\n        return False\n    else:\n        while x:\n            tmp = x%10\n            x = x//10\n            if tmp!= x%10:\n                return False\n            x = x//10\n    return True\ndef calculate_pattern(pattern,max_len,n):\n    '''\n    Write a function that takes a pattern and a maximum length and a string n and returns the number of occurrences of the pattern in the string. For example, if the pattern is \u201cab\u201d and the maximum length is 3, then the function should return 3.\n    '''\n    result = 0\n    for i in range(max_len):\n        if pattern == ''.join(n[i:i+len(pattern)]):\n            result += 1\n    return result\ndef is_valid(isbn):\n    '''\n    Write a function that takes a string and returns a boolean indicating whether or not the given string is a valid ISBN. The string is valid if the string contains only digits and is exactly 17 characters long.\n    '''\n    if len(isbn)!= 17:\n        return False\n    for char in isbn:\n        if char.isnumeric() == False:\n            return False\n    return True\ndef find_closest_elements(nums, k, lower, upper):\n    '''\n    Write a function that takes a sorted array and a target number and returns a tuple containing the k closest numbers to the target. The function should return a tuple of the form (closest_nums, closest_nums_distances).\n    '''\n    if upper - lower <= k:\n        return (nums[:k],0)\n    else:\n        mid = (lower + upper)//2\n        if mid == lower:\n            return (nums[:k],0)\n        elif mid == upper:\n            return (nums[:k],0)\n        elif nums[mid] < nums[upper]:\n            return find_closest_elements(nums,k,mid,upper)\n        else:\n            return find_closest_elements(nums,k,lower,mid)\ndef reverse_integer(x):\n    '''\n    Write a function that takes an integer as input and returns the integer as output. The output should be in reverse order of the digits in the input integer.\n    '''\n    result = 0\n    x = int(str(x)[::-1])\n    while x!= 0:\n        result = result*10 + x%10\n        x = x//10\n    retur",
        "num_ids": 50
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    else:\n        r = abs(r)\n        area = math.pi * (r**2) * (a/180)\n        return round(area,2)\n",
        "num_ids": 57
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a < 0):\n        return None\n    elif(a == 0):\n        return 4*(math.pi)*(r**2)\n    elif(a == 360):\n        return (2*math.pi*(r**2))\n    else:\n        return (2*math.pi*(r**2))*(a/360)\n",
        "num_ids": 87
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lst1 = len(X) + 1\n    lst2 = len(Y) + 1\n    lst3 = len(Z) + 1\n    lst = [[0 for i in range(lst3)] for j in range(lst2)] \n    \n    \n    for i in range(lst2): \n        for j in range(lst3): \n            if (i == 0 or j == 0): \n                lst[i][j] = 0\n            elif (X[i-1] == Y[j-1] and X[i-1] == Z[j-1]): \n                lst[i][j] = 1 + lst[i-1][j-1] \n            else: \n                lst[i][j] = max(lst[i-1][j], lst[i][j-1]) \n    print(lst)\n    return lst[-1][-1]\n    \nlcs_of_three(\"ABCDGH\", \"AEDFHR\", \"XYZ\")\nlcs_of_three(\"ABCDGH\", \"AEDFHR\", \"ABCDG\")\nlcs_of_three(\"ABCDGH\", \"AEDFHR\", \"EDFH\")\n",
        "num_ids": 298
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[0 for i in range(o+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n",
        "num_ids": 173
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    o = len(Z) \n    \n    dp = [[[0 for i in range(o+1)] for j in range(m+1)] for k in range(n+1)]\n    \n    # If either string is empty, then result is always 0 \n    for i in range(n+1): \n        for j in range(m+1): \n            for k in range(o+1): \n                dp[i][j][k] = 0\n                \n    # Initialize first row and column as 1 \n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            for k in range(1, o+1): \n                \n                # If the last characters of two strings are same, \n                # then their lcs is 1. \n                # otherwise, LCS will be equal to the maximum of lcs of \n                # the two strings with the last characters removed \n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                    \n                else: \n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]) \n    \n    # print the dp matrix \n    for i in range(n+1): \n        for j in range(m+1): \n            for k in range(o+1): \n                print(dp[i][j][k], end = \" \") \n            print() \n    \n    # Find the lcs \n    i = n \n    j = m \n    k = o \n    lcs = \"\" \n    \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n            k -= 1 \n            \n        elif dp[i-1][j][k] == dp[i][j-1][k]: \n            i -= 1\n            \n        else: \n            j -= 1\n            \n    print(lcs) \n    \nX = \"ABCBDAB\"\nY = \"BDCABA\"\nZ = \"ABCDABC\"\nlcs_of_three(X, Y, Z) \n",
        "num_ids": 640
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    z = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M, N, O = len(X), len(Y), len(Z)\n    lcs_arr = [[0 for j in range(O+1)] for i in range(M+1)] \n    \n    for i in range(M+1):\n        for j in range(O+1):\n            if i == 0 or j == 0:\n                lcs_arr[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                lcs_arr[i][j] = 1 + lcs_arr[i-1][j-1]\n            else:\n                lcs_arr[i][j] = max(lcs_arr[i-1][j], lcs_arr[i][j-1])\n    \n    return lcs_arr[M][O]\n",
        "num_ids": 196
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    c = [[0 for i in range(o+1)] for j in range(n+1)]\n    \n    max_length = 0\n    p = 0\n    q = 0\n    r = 0\n    \n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            for k in range(1,o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    c[i][k] = c[i-1][k-1]+1\n                    if max_length < c[i][k]:\n                        max_length = c[i][k]\n                        p = i\n                        q = j\n                        r = k\n                else:\n                    c[i][k] = 0\n    \n    result = []\n    while p!=0 and q!=0 and r!=0:\n        if X[p-1] == Y[q-1] and X[p-1] == Z[r-1]:\n            result.append(X[p-1])\n            p = p -1\n            q = q -1\n            r = r -1\n        else:\n            if c[p-1][r] > c[q-1][r]:\n                q = q - 1\n            else:\n                p = p - 1\n    result = result[::-1]\n    return (result, max_length)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1980
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = ''.join(sorted(X))\n    Y = ''.join(sorted(Y))\n    Z = ''.join(sorted(Z))\n",
        "num_ids": 41
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not X or not Y or not Z: \n        return 0\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    l = [[[0 for i in range(o+1)]  for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0 : \n                    l[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Z[i-1] == Y[j-1]: \n                    l[i][j][k] = l[i-1][j-1][k-1] + 1\n                else: \n                    l[i][j][k] = max(l[i-1][j][k], l[i][j-1][k], l[i][j][k-1]) \n    return l[m][n][o] \n",
        "num_ids": 266
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    # table[i][j] will be storing the length of LCS for X[0...i-1] \n    # and Y[0...j-1] \n    table = [[0 for x in range(o)] for x in range(m)] \n    \n    # initialization of LCS \n    for i in range(m): \n        for j in range(o): \n            if X[i] == Y[j]: \n                table[i][j] = 1 + table[i-1][j-1] \n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n    \n    # for i in range(m): \n    #     for j in range(o): \n    #         print(table[i][j], end = \" \") \n    #     print() \n    \n    # lcs is the final result \n    lcs = table[m-1][o-1] \n    \n    # find the length of the longest common supersequence. \n    ''' \n    For this problem, it is possible to find lcs by subtracting the length of the longest subsequence in X, \n    from the length of the longest subsequence in Y. \n    '''\n    for i in range(m-1, -1, -1): \n        for j in range(o-1, -1, -1): \n            \n            ''' \n            If the current character in X is equal to the current character in Y, \n            and if the current character in Y is equal to the current character in Z, \n            then we can pick this character to make it common supersequence. \n            In this case, we increase the result by 1. \n            '''\n            if X[i] == Y[j] and Y[j] == Z[j]: \n                lcs = max(lcs, 1 + table[i][j]) \n                \n    # for i in range(m): \n    #     for j in range(o): \n    #         print(table[i][j], end = \" \") \n    #     print() \n    \n    return lcs \n    ",
        "num_ids": 103
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    result = re.sub('[a-zA-Z]','', str1)\n    result = result.replace('  ','')\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split_words = re.split(r'\\s', str1)\n    # print(' '.join([word.capitalize() for word in split_words]))\n    return''.join([word.capitalize() for word in re.findall(r'[A-Z]+(?:\\s[a-z]+)', str1)])\n    \ndef rot13_deccipher(str1):\n    '''\n    Write a function to encode letters from a given string using Rot13.\n    '''\n    cipher_dict = {'a':'n','b':'o','c':'p','d':'q','e':'r','f':'s','g':'t','h':'u','i':'v','j':'w','k':'x','l':'y','m':'z','n':'a','o':'b','p':'c','q':'d','r':'e','s':'f','t':'g','u':'h','v':'i','w':'j','x':'k','y':'l','z':'m','a':'n','b':'o','c':'p','d':'q','e':'r','f':'s','g':'t','h':'u','i':'v','j':'w','k':'x','l':'y','m':'z','n':'a','o':'b','p':'c','q':'d','r':'e','s':'f','t':'g','u':'h','v':'i','w':'j','x':'k','y':'l','z':'m'}\n    return ''.join([cipher_dict[i] for i in str1])\n    \ndef has_vowel(str1):\n    '''\n    Write a function to check if the given string has at least one vowel.\n    '''\n    vowels = ['a','e','i','o','u']\n    return any(i in str1 for i in vowels)\n    \ndef solve_a(str1):\n    '''\n    Write a function to solve the problem of merging a sorted and unsorted linked lists.\n    '''\n    str1 = list(str1)\n    if not str1:\n        return\n    str1.sort()\n    head1, tail1 = str1[0], str1[1:]\n    head2, tail2 = head1, tail1\n    while tail2:\n        if head2 < tail2[0]:\n            head2.next = tail2\n            break\n        head2 = tail2\n        tail2 = tail2[1:]\n    while tail1:\n        if head2 < tail1[0]:\n            head2.next = tail1\n            break\n        head2 = tail1\n        tail1 = tail1[1:]\n    return head1\n    \ndef solve_b(str1):\n    '''\n    Write a function to get the max length of the word that can be formed from the given list of words\n    '''\n    words = str1.split(' ')\n    # print(words)\n    d = {}\n    for word in words:\n        # print(word)\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    # print(d)\n    d = {k:v for k, v in sorted(d.items(), key=lambda item: item[1], reverse=True)}\n    # print(d)\n    if not d:\n        return 0\n    max_len = 0\n    for word in d:\n        max_len = max(max_len, d[word])\n    return max_len\n    \ndef solve_c(str1):\n    '''\n    Write a function to remove all the vowels from a given string.\n    '''\n    # print(str1)\n    vowels = ['a','e','i','o','u']\n    if not str1:\n        return ''\n    str1 = list(str1)\n    # print(str1)\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = ''\n    # print(str1)\n    return ''.join(str1)\n    \ndef solve_d(str1):\n    '''\n    Write a function to check if the string is a permutation of a palindrome.\n    '''\n    if len(str1) < 2:\n        return True\n    str1 = sorted(str1)\n    rev_str1 = str1[::-1]\n    return str1 == rev_str1\n    \ndef solve_e(str1):\n    '''\n    Write a function to check if the given string is a permutation of a palindrome.\n    '''\n    if not str1:\n        return False\n    str1 = sorted(str1)\n    rev_str1 = str1[::-1]\n    return str1 == rev_str1\n    \ndef solve_f(str1):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    if len(str1) < 2:\n        return True\n    str1 = sorted(str1)\n    return str1 == str1[::-1]\n    \ndef solve_g(str1):\n    '''\n    Write a function to get the largest number from a given string.\n    '''\n    if not str1:\n        return 0\n    str1 = re.findall('\\d+', str1)\n    if not str1:\n        return 0\n    str1 = [int(i) for i in str1]\n    return max(str1)\n    \ndef solve_h(str1):\n    '''\n    Write a function to remove spaces from the start and end of the string, also from the end of the string.\n    '''\n    return str1.strip()\n    \ndef solve_i(str1):\n    '''\n    Write a function to get the first non-repeating character from a given string.\n    '''\n    if not str1:\n        return -1\n    str1 = sorted(str1)\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return -1\n    \ndef solve_j(str1):\n    '''\n    Write a function to count the number of times a given character appears in the string.\n    '''\n    if not str1:\n        return 0\n    str1 = re.findall('[a-z]', str1)\n    if not str1:\n        return 0\n    count = 0\n    for i in str1:\n        count += str1.count(i)\n    return count\n    \ndef solve_k(str1):\n    '''\n    Write a function to swap the occurrence of the given character in the string.\n    '''\n    if not str1:\n        return\n    str1 = re.split('[aeiou]', str1)\n    str1 = ''.join(str1)\n    return str1\n    \ndef solve_l(str1):\n    '''\n    Write a function to remove the last element of a given list.\n    '''\n    if not str1:\n        return\n    return str1.pop()\n    \ndef solve_m(str1):\n    '''\n    Write a function to get the index of the first occurrence of a given character in a string.\n    '''\n    if not str1:\n        return -1\n    str1 = re.findall('[a-z]', str1)\n    if not str1:\n        return -1\n    for i in range(len(str1)):\n        if str1[i] == 'a':\n            return i\n    return -1\n    \ndef solve_n(str1):\n    '''\n    Write a function to check if a string contains only digits.\n    '''\n    if not str1:\n        return False\n    str1 = re.findall('\\d+', str1)\n    if not str1:\n        return False\n    str1 = [int(i) for i in str1]\n    return True\n    \ndef solve_o(str1):\n    '''\n    Write a function to check if a string contains only lowercase characters.\n    '''\n    if not str1:\n        return False",
        "num_ids": 12
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return \" \".join([i for i in re.split(\"(\\s+)\",str1.upper()) if i])\n",
        "num_ids": 29
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_words= re.findall(r'\\w*[A-Z]+\\w*',str1)\n    return''.join(capital_words)\n",
        "num_ids": 40
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = str1.split()\n    for i in range(len(res)):\n        if res[i][0].isupper():\n            res[i] = res[i]+\" \"\n    res = \" \".join(res)\n    return res\n",
        "num_ids": 62
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using split(), re.split()\n    # print(re.split('([^a-zA-Z0-9\\s]+)', str1))\n    str1=re.sub('([^a-zA-Z0-9\\s]+)', r' \\1 ', str1)\n    return str1\n",
        "num_ids": 78
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'\\b[A-Z][a-z]*',lambda x:x.group()+' ',str1)\nprint(capital_words_spaces('Hi there this is jinja2'))\n",
        "num_ids": 57
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('.','')\n    str1 = str1.replace(',',' ')\n    str1 = str1.replace('!',' ')\n    str1 = str1.replace(':','')\n    str1 = str1.replace(';','')\n    str1 = str1.replace('?','')\n    str1 = str1.replace('@','')\n    str1 = str1.replace('#','')\n    str1 = str1.replace('*','')\n    return str1\n",
        "num_ids": 145
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # full_string = \" \".join(str1.split())\n    # return full_string\n    # full_string =''.join([word[0].upper() + word[1:] if word.isupper() else word for word in str1.split(' ')])\n    # return full_string.capitalize()\n    return \" \".join([word[0].upper() + word[1:] if word.isupper() else word for word in re.split(r\"\\s+\", str1)])\n",
        "num_ids": 119
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # print(str1.capitalize())\n    #print(\"---start---\")\n    # pattern = r\"\\b[A-Z][a-zA-Z]+\\b\"\n    # print(re.search(pattern, str1))\n    return str1.replace(\" \", \" \").capitalize()\n",
        "num_ids": 75
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x:int(x))\n    return nums_str\n",
        "num_ids": 27
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # return nums_str.sort() # this method works but returns a new list\n    # return sorted(nums_str, key=num_key) # this method does not work\n    return sorted(nums_str, key=lambda s: float(s.replace('-', '', 1))) # this method works\n",
        "num_ids": 76
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = sorted(nums_str[i])\n        for j in range(len(nums_str[i])):\n            nums_str[i][j] = float(nums_str[i][j])\n",
        "num_ids": 76
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "num_ids": 16
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for s in nums_str:\n        nums.append(s)\n    nums = sorted(nums)\n",
        "num_ids": 37
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Using lambda\n    # nums_str = [1, 3, 7, 1, 1, 1, 3, 9, 6, 8]\n    # nums_str = [\"one\", \"one\", \"two\", \"two\"]\n",
        "num_ids": 56
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [str(i) for i in nums_str]\n    nums.sort()\n    return nums\n",
        "num_ids": 32
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import operator\n    str_nums = []\n    \n    # convert the string to float and store in a list\n    for i in range(len(nums_str)):\n        str_nums.append(nums_str[i].replace(',', '').replace('$', '').replace('-', ''))\n",
        "num_ids": 78
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort_numeric_strings(nums_str):\n        nums_str = [num for num in nums_str]\n        for i in range(len(nums_str)):\n            for j in range(len(nums_str)-1):\n                if nums_str[j] > nums_str[j+1]:\n                    nums_str[j], nums_str[j+1] = nums_str[j+1], nums_str[j]\n        return nums_str\n    return sort_numeric_strings(nums_str)\n",
        "num_ids": 142
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x:float(x))\n",
        "num_ids": 20
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(f\"New Tuple added: {test_tup}\")\n    return test_list\n",
        "num_ids": 39
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "num_ids": 24
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and arr[i] < arr[i*2]:\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # First i'th element will be compared to the last element as it is a max heap\n    left = 2*i+1\n    right = 2*i+2\n    if left <= len(arr)-1 and arr[i] > arr[left]:\n        return False\n    if right <= len(arr)-1 and arr[i] > arr[right]:\n        return False\n    if left <= len(arr)-1 and right <= len(arr)-1:\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    return True\n",
        "num_ids": 144
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = (2 * i) + 1\n    right_child = (2 * i) + 2\n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        return False\n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        return False\n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    return True\n",
        "num_ids": 140
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # pdb.set_trace()\n    if not is_valid_heap(arr):\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return True\n    \n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    \n    if i > 1 and arr[i] < arr[i//2] and arr[i] < arr[i//2 + 1]:\n        return False\n    \n    return check_min_heap_helper(arr, i // 2)\n",
        "num_ids": 99
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Max Heap\n    if i >= len(arr) or arr[i] < arr[(i+1)//2]:\n        return False\n    # Binary Heap\n    if i >= len(arr) or arr[i] < arr[i//2]:\n        return False\n    if i >= len(arr) or arr[i] < arr[(i+1)//2]:\n        return False\n    if i >= len(arr) or arr[i] < arr[(i+2)//2]:\n        return False\n    return True\n",
        "num_ids": 130
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[int(i/2)]:\n        return False\n    if arr[i] > arr[int(i/2)]:\n        if check_min_heap_helper(arr, i/2):\n            return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(i, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base Case\n    if i >= len(arr):\n        return True\n    # If arr[i] is greater than its parent, return false\n    if (i * 2) + 1 < len(arr) and arr[i] > arr[i * 2]:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = n+1\n    L = 0\n    U = 1\n    \n    for i in range(2,n): \n        L = U \n        U = U + L\n    return L\n",
        "num_ids": 50
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = [1]\n    for i in range(1, n):\n        l.append(l[i-1] + l[i-2])\n    return l[n-1]\n",
        "num_ids": 48
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    k = 1\n    while(k < n):\n        j = (3*k +1) // 2\n        k = j + (j - k) // 2\n    return j\n",
        "num_ids": 45
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return (2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)) % n\n    else:\n        return (jacobsthal_num(n - 1) + 1) % n\n",
        "num_ids": 92
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x, y = 1, 1\n    for i in range(1, n+1):\n        x, y = y, x+y\n    return x\nprint(jacobsthal_num(10))\n",
        "num_ids": 51
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    else:\n        return (jacobsthal_num(n-1) + 2*jacobsthal_num(n-2))%(10**9 + 7)\n",
        "num_ids": 65
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 34\n    elif n == 9:\n        return 55\n    elif n == 10:\n        return 89\n    elif n == 11:\n        return 144\n    elif n == 12:\n        return 233\n    elif n == 13:\n        return 377\n    elif n == 14:\n        return 610\n    elif n == 15:\n        return 987\n    elif n == 16:\n        return 1661\n    elif n == 17:\n        return 3333\n    elif n == 18:\n        return 5555\n    elif n == 19:\n        return 8979\n    elif n == 20:\n        return 14428\n    elif n == 21:\n        return 23333\n    elif n == 22:\n        return 36681\n    elif n == 23:\n        return 60555\n    elif n == 24:\n        return 99799\n    elif n == 25:\n        return 175536\n    elif n == 26:\n        return 305526\n    elif n == 27:\n        return 577476\n    elif n == 28:\n        return 985706\n    elif n == 29:\n        return 1555326\n    elif n == 30:\n        return 2777398\n    elif n == 31:\n        return 489095\n    elif n == 32:\n        return 8377108\n    elif n == 33:\n        return 14279925\n    elif n == 34:\n        return 23332444\n    elif n == 35:\n        return 39378765\n    elif n == 36:\n        return 70590992\n    elif n == 37:\n        return 1133851715\n    elif n == 38:\n        return 22180528255\n    elif n == 39:\n        return 34961429967\n    elif n == 40:\n        return 74694758981\n    elif n == 41:\n        return 119185903509\n    elif n == 42:\n        return 2359897803351\n    elif n == 43:\n        return 43636683166571\n    elif n == 44:\n        return 77982627689961\n    elif n == 45:\n        return 122044347312209\n    elif n == 46:\n        return 2446482785706031\n    elif n == 47:\n        return 46699661586010511\n    elif n == 48:\n        return 96669603326817107\n    elif n == 49:\n        return 155819385491690863\n    elif n == 50:\n        return 281347045119958025\n    elif n == 51:\n        return 498555323482978509\n    elif n == 52:\n        return 871524146542307511\n    elif n == 53:\n        return 1523866940931354427\n    elif n == 54:\n        return 2497258768440012205\n    elif n == 55:\n        return 4685047314336081279\n    elif n == 56:\n        return 888133566602338979\n    elif n == 57:\n        return 154567854066003547\n    elif n == 58:\n        return 2480575029381392125\n    elif n == 59:\n        return 484369495549423048\n    elif n == 60:\n        return 888624115433573033\n    elif n == 61:\n        return 144787336635761866\n    elif n == 62:\n        return 2496010516739452559\n    elif n == 63:\n        return 4844463682047783679\n    elif n == 64:\n        return 878723991278118911\n    elif n == 65:\n        return 143815487925604577\n    elif n == 66:\n        return 2338782938889064369\n    elif n == 67:\n        return 479787995936455558\n    elif n == 68:\n        return 903115012847948899\n    elif n == 69:\n        return 154682164544243853\n    elif n == 70:\n        return 271241194801884069\n    elif n == 71:\n        return 477746900974900729\n    elif n == 72:\n        return 904242844942419243\n    elif n == 73:\n        return 1562707991028583841\n    elif n == 74:\n        return 2921975808478767683\n    elif n == 75:\n        return 4796573121765835841\n    elif n == 76:\n        return 908655525157529979\n    elif n == 77:\n        return 156124875334816777\n    elif n == 78:\n        return 2903230615237060643\n    elif n == 79:\n        return 4764570148507311361\n    elif n == 80:\n        return 906205078517353991\n    elif n == 81:\n        return 1557295302368944997\n    elif n == 82:\n        return 288646711727153701\n    elif n == 83:\n        return 4772526232895400737\n    elif n == 84:\n        return 908206618141858139\n    elif n == 85:\n        return 1554554685244952709\n    elif n == 86:\n        return 289209283630673533\n    elif n == 87:\n        return 477064821786389948\n    elif n == 88:\n        return 907761530751281737\n    elif n == 89:\n        return 156602048784710127\n    elif n == 90:\n        return 289617929703817895\n    elif n == 91:\n        return 474773448970839921\n    elif n == 92:\n        return 90312704835192493\n    elif n == 93:\n        return 1557136835868272955\n    elif n == 94:\n        return 289428571523781627\n    elif n == 95:\n        return 476989386822597342\n    elif n == 96:\n        return 907392140675801971\n    elif n == 97:\n        return 1555625762674682837\n    elif n == 98:\n        return 2894460531856404527\n    elif n == 99:\n        return 477195019012925599\n    elif n == 100:\n        return 905891669169725497\n    elif n == 101:\n        return 1558159694555953073\n    elif n == 102:\n        return 2885939241668983363\n    elif n == 103:\n        return 476655468231258027\n    elif n == 104:\n        return 910251896563144959\n    elif n == 105:\n        return 1554900157067171837\n    elif n == 106:\n        return 288459825189788669\n    elif n == 107:\n        return 476411094323391663\n    elif n == 108:\n        return 907147632298991261\n    elif n == 109:\n        return 155645138417459099\n    elif n == 110:\n        return 2885695870864143225\n    elif n == 111:\n        return 477027302555104791\n    elif n == 112:\n        return 908591",
        "num_ids": 1949
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        return ((1 + 3*n)/2)\n",
        "num_ids": 43
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    import numpy as np\n    jacobsthal = np.array([0,1,1,3,5,11,21,43,85,171,341,673,1365,2731])\n    if n>len(jacobsthal):\n        print(\"Error, n is greater than the number of jacobsthal numbers\")\n        return -1\n    return jacobsthal[n-1]\n",
        "num_ids": 100
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal(n, j, k):\n        #returns the nth jacobsthal number\n        if n == 1:\n            return j + k + 1\n        elif n == 2:\n            return (j + k + 2) ** 2\n        else:\n            return jacobsthal(n - 1, j, k) + j + k + 1\n    return jacobsthal(n, 0, 0)\n",
        "num_ids": 108
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # return list(map(lambda x: x[0], heapq.nsmallest(K, test_list, key=lambda x: x[1])))\n    return sorted(test_list, key=lambda x: x[1])[:K]\n",
        "num_ids": 62
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n",
        "num_ids": 20
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) <= K:\n        return test_list\n    return test_list[:K]\n",
        "num_ids": 30
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for i in range(len(test_list)):\n        j = i + 1\n        while j < len(test_list) and test_list[i][1] > test_list[j][1]:\n            min_num = test_list[j][0]\n            min_ind = j\n            j += 1\n        test_list[i], test_list[min_ind] = test_list[min_ind], test_list[i]\n    return test_list[:K]\n",
        "num_ids": 119
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result = []\n    arr = []\n    for i in range(K):\n        if len(arr) == 0:\n            arr.append(test_list[i])\n            result.append(test_list[i])\n        else:\n            if arr[0] > test_list[i]:\n                arr.insert(0, test_list[i])\n                result.insert(0, test_list[i])\n            else:\n                arr.append(test_list[i])\n                result.append(test_list[i])\n    return result\n",
        "num_ids": 133
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = test_list[1:]\n    min_k = []\n    #code here\n    for k in range(K):\n        min_k.append(min(test_list))\n        test_list.remove(min(test_list))\n    return min_k\n",
        "num_ids": 69
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Write your code here\n    # l = []\n    # for i in range(0, len(test_list), K):\n    #     l.append(test_list[i])\n    # return l[0]\n    \n    # Naive approach:\n    l = []\n    for i in range(0, len(test_list), K):\n        l.append(test_list[i])\n    min_k = l[0]\n    for i in range(1, K):\n        if min_k[1] > test_list[i][1]:\n            min_k = test_list[i]\n    return min_k\n",
        "num_ids": 155
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if len(result) == K:\n            break\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] < test_list[i][0]:\n                result.append(test_list[i])\n                break\n            else:\n                result.append(test_list[j])\n    return result\n",
        "num_ids": 107
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # TODO: Write your solution here\n    from heapq import nsmallest\n    return nsmallest(K,test_list)\n",
        "num_ids": 34
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
        "num_ids": 29
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1.count(l1[i]) == 3 and l2.count(l2[i]) == 3 and l3.count(l3[i]) == 3:\n            l.append(l1[i])\n    return l\n",
        "num_ids": 77
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    a = l1\n    b = l2\n    c = l3\n    common = []\n    for i in range(len(a)):\n        if a[i] == b[i] and a[i] == c[i]:\n            common.append(a[i])\n    return common\n",
        "num_ids": 73
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return set(l1).intersection(set(l2), set(l3))\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #two solutions, one by using a loop and a list comprehension, the other is by using a set and a list comprehnsion\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n    return index_list\n    #return set(l1).intersection(set(l2), set(l3))\n",
        "num_ids": 112
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #Extract indexes\n    index_list_l1 = set([i for i, x in enumerate(l1) if x!= ''])\n    index_list_l2 = set([i for i, x in enumerate(l2) if x!= ''])\n    index_list_l3 = set([i for i, x in enumerate(l3) if x!= ''])\n    #Convert to lists\n    index_list_l1 = list(index_list_l1)\n    index_list_l2 = list(index_list_l2)\n    index_list_l3 = list(index_list_l3)\n    #Get common indexes\n    common_indexes = list(index_list_l1[:])\n    common_indexes += list(index_list_l2[:])\n    common_indexes += list(index_list_l3[:])\n    #Get uncommon indexes\n    uncommon_indexes = list(set(index_list_l1).difference(set(index_list_l2).union(set(index_list_l3))))\n    uncommon_indexes += list(set(index_list_l2).difference(set(index_list_l1).union(set(index_list_l3))))\n    uncommon_indexes += list(set(index_list_l3).difference(set(index_list_l1).union(set(index_list_l2))))\n    #Remove common indexes\n    common_indexes = [i for i in common_indexes if i not in uncommon_indexes]\n    return common_indexes\n",
        "num_ids": 386
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] and l1[index] == l3[index]:\n            common_elements.append(l1[index])\n    return common_elements\n",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    temp = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            temp.append(l1[i])\n    return temp\n",
        "num_ids": 56
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    i = 0\n    for i in range(min(len(l1),len(l2),len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n",
        "num_ids": 75
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list1 = []\n    index_list2 = []\n    index_list3 = []\n",
        "num_ids": 26
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = []\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index.append(i)\n            common.append(l1[i])\n    return index, common\n",
        "num_ids": 71
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #print('list:', numbers)\n    #print('list', numbers)\n    if len(numbers) == 0:\n        return None\n    numbers = sorted(numbers)\n    return numbers[1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2016
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # The simplest solution would be to sort the list and take the second index of the sorted list\n    # But this is probably not a good way to solve this problem.\n    # Because we are sorting the list, we can know that the second smallest number will be somewhere in the sorted list.\n    # So we can just use the index at which the number appears in the sorted list\n    numbers.sort()\n    second_smallest_number = numbers[1]\n    return second_smallest_number\n",
        "num_ids": 113
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)<2:\n        return -1\n    numbers = sorted(numbers)\n    return numbers[1]\n",
        "num_ids": 35
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest_index = 0\n    second_smallest = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n            smallest_index = i\n    return second_smallest\n",
        "num_ids": 88
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n",
        "num_ids": 20
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return sorted(numbers)[1]\n    min_number = sorted(numbers)[1]\n    max_number = sorted(numbers)[-1]\n    if min_number == max_number:\n        return None\n    else:\n        return max_number\n",
        "num_ids": 108
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Using Quick Sort\n    if len(numbers) == 0:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    \n    numbers = sorted(numbers)\n    if numbers[0] == numbers[-1]:\n        return numbers[-1]\n    if len(numbers) == 2:\n        return numbers[1]\n    \n    low = 0\n    high = len(numbers)-1\n    \n    while low <= high:\n        if high == low:\n            return numbers[low]\n        mid = (low + high)//2\n        if numbers[mid] > numbers[high]:\n            low = mid + 1\n        elif numbers[mid] < numbers[high]:\n            high = mid - 1\n        else:\n            high -= 1\n        \n    return numbers[low]\n",
        "num_ids": 200
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # using heap\n    numbers.sort()\n    if len(numbers) <= 1:\n        return None\n    # min heap\n    # heapq.heapify(numbers)\n    return numbers[1]\n    \ndef second_smallest(numbers):\n    # 2 pointers\n    if len(numbers) <= 1:\n        return None\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif second_smallest > number > smallest:\n            second_smallest = number\n    return second_smallest\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2016
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    n = numbers\n    n.sort()\n    return n[1]\n",
        "num_ids": 30
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r\"a[b]*\"\n    result = re.search(regex, text)\n    print(result)\n",
        "num_ids": 34
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    print(result)\n    \ndef text_match_zero_one_1(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+')\n    result = pattern.search(text)\n    print(result)\n",
        "num_ids": 33
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'(a)+b'\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #return bool(re.match(\"ab*\", text))\n    return bool(re.search(\"ab*\", text))\n",
        "num_ids": 31
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'a[ab]+b', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # match('a') will match any single character, match('aa') will not.\n    #match('aa') returns no match\n    #match('aaa') returns a match\n    #match('aaa', re.I) will match any character of a different case\n    #match('aa', re.I) will match any single character of a different case\n    #match('aa', re.I and re.I) will not match any single character of a different case\n    #print(match('aa', re.I))\n    #print(match('aaa', re.I))\n    #print(match('aaa', re.I and re.I))\n    \n    match = re.match(r'a.*b', text)\n    \n    if match:\n        return 'Found a match'\n    else:\n        return 'No match'\n",
        "num_ids": 193
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search('a(.+?)b',text) is not None:\n        print(\"Match found!\")\n    else:\n        print(\"No Match\")\n        \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's.\n    '''\n    if re.search('a(.+?)b*',text) is not None:\n        print(\"Match found!\")\n    else:\n        print(\"No Match\")\n",
        "num_ids": 42
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]'\n    result = re.search(pattern,text)\n    if result:\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #solution\n    def reverse_pairs(n):\n        x = 0\n        for i in range(n-1):\n            for j in range(i+1,n):\n                if n[i] > n[j]:\n                    x+=1\n        return x\n",
        "num_ids": 67
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if test_list == None:\n        return 0\n    else:\n        res = 0\n        for i in range(len(test_list)):\n            for j in range(i+1, len(test_list)):\n                if test_list[i] == test_list[j][::-1]:\n                    res += 1\n        return res\n",
        "num_ids": 85
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_list = []\n    for element in test_list:\n        reverse_list.append(element[::-1])\n    return sum(zip(reverse_list,test_list))\n",
        "num_ids": 47
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                total += 1\n    return total\n",
        "num_ids": 69
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def reverse_string(s):\n        return s[::-1]\n    return len([reverse_string(x) for x in test_list])\n",
        "num_ids": 38
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict_reverse_string = {}\n",
        "num_ids": 11
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for i in test_list:\n        if i[::-1] in dict:\n            dict[i[::-1]] += 1\n        else:\n            dict[i[::-1]] = 1\n    \n    return dict\n",
        "num_ids": 62
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Count the reverse pairs in a list of strings\n    #\n    # Test cases:\n    # Test 1 - [['q', 'u', 'i','m'], 'b']    --->    [['i', 'u','m'], 'b']    --->    [3, 3]\n    # Test 2 - [['q', 'u', 'i','m'], 'bbb']    --->    [['i','m'], 'bbb']    --->    [1, 3]\n    # Test 3 - [['a', 'b', 'c'], 'd']    --->    [['c', 'd'], 'a']    --->    [1, 1]\n    # Test 4 - [['p', 'q', 'r','s'], 't']    --->    [['t','s'], 'q']    --->    [1, 2]\n    # Test 5 - [['p', 'q', 'r','s'],'st']    --->    [['r','s'], 'p']    --->    [1, 1]\n    # Test 6 - [['p', 'q', 'r','s'], 'tst']    --->    [['r','s'], 'p']    --->    [1, 1]\n",
        "num_ids": 297
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # test_list = [\"sri\", \"rever\", \"pla\", \"rever\", \"lou\"]\n    # count_reverse_pairs(test_list)\n    # print(test_list)\n",
        "num_ids": 52
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    \n    test_list.sort()\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(list1)\n    dictionary = {}\n    for i in range(len(list1)):\n        if list1[i] not in dictionary:\n            dictionary[list1[i]] = 1\n        else:\n            dictionary[list1[i]] += 1\n    return dictionary\n    \n    # Another way to do the same thing\n    # How to separate items into sublists?\n    # How to search through a nested list?\n    # How to count the occurences of each item in a nested list?\n    # How to find the unique sublists?\n    # How to find the number of occurences of each sublist?\n",
        "num_ids": 155
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res = {}\n    for i in range(len(list1)):\n        res[tuple(list1[i])] = 0\n        for j in range(len(list1)):\n            if list1[i] == list1[j]:\n                res[tuple(list1[i])] += 1\n    return res\n",
        "num_ids": 81
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if(type(list1)!= list):\n        return 0\n    else:\n        d = {}\n        for i in list1:\n            if(type(i)!= list):\n                return 0\n            else:\n                for j in i:\n                    if(j in d):\n                        d[j] += 1\n                    else:\n                        d[j] = 1\n        return d\n",
        "num_ids": 93
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {list1:1}\n",
        "num_ids": 11
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for l in list1:\n        if l in dic:\n            dic[l] += 1\n        else:\n            dic[l] = 1\n    return dic\n",
        "num_ids": 51
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n",
        "num_ids": 61
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        d[tuple(i)] = d.get(tuple(i), 0) + 1\n    return d\n",
        "num_ids": 42
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_tuple = []\n    for l in list1:\n        if l not in unique_tuple:\n            unique_tuple.append(l)\n    \n    unique_dict = {}\n    for n in unique_tuple:\n        count = 0\n        for i in range(len(list1)):\n            if n == list1[i]:\n                count += 1\n        unique_dict[tuple(n)] = count\n    return unique_dict\n",
        "num_ids": 111
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return Counter(list1)\n",
        "num_ids": 10
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {list(x):x.count(x) for x in list1}\n    # # or\n    # sublists = {}\n    # for list_item in list1:\n    #     sublists.setdefault(tuple(list_item), list_item.count(list_item))\n    # return sublists\n",
        "num_ids": 78
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    s = str(num)\n    return s.replace('.', '', 1).isdigit() and s.find('.')!= -1\n",
        "num_ids": 37
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # if re.match(r'^\\d\\.\\d$', num):\n    #     return True\n    # else:\n    #     return False\n    # # using '+' to check is number\n    # if re.match(r'^(\\d+\\.\\d+|\\d+\\.|\\d+|\\d+)$', num):\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 103
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return '.' in num and num.count('.') == 1 and num.replace('.', '').replace('-', '').isdigit()\n",
        "num_ids": 37
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if (num.find('.') > 0) or (num.find('e') > 0) or (num.find('E') > 0):\n        return False\n    else:\n        try:\n            float(num)\n        except ValueError:\n            return False\n        return True\n",
        "num_ids": 69
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.split('.')\n    if len(num)!= 2:\n        return False\n    try:\n        float(num[0])\n        float(num[1])\n        return True\n    except:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # assert that no decimal in a number is given\n    assert not re.search('[^\\d.]', num)\n",
        "num_ids": 30
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = num.split('.')\n    if len(n) == 2:\n        return len(n[1]) == 2 and n[0].replace('.','',1).isdigit()\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    try:\n        float(num)\n    except:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # input: \n    #     arr = [1,2,3,1]\n    # output: True\n    #     arr = [1,2,3]\n    # output: False\n    #     arr = []\n    # output: False\n    \n    # Edge case:\n    if len(arr) == 0:\n        return False\n    \n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 109
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)<1:\n        return False\n    else:\n        if len(set(arr))==1:\n            return True\n        else:\n            return False\n",
        "num_ids": 44
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==0:\n        return False\n    for i in range(len(arr)-1):\n        if arr[i]==arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    size = len(arr)\n    if(size == 0):\n        return False\n    if(size == 1):\n        return True\n    arr.sort()\n    for i in range(0, size-1):\n        if(arr[i] == arr[i+1]):\n            return False\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    try:\n        if(len(arr)==0):\n            return False\n        elif(len(arr)==1):\n            return True\n        elif(len(arr)>1):\n            flag=0\n            for i in range(0,len(arr)):\n                if(arr[i]==arr[i-1]):\n                    flag=1\n                    break\n            if(flag==0):\n                return True\n            else:\n                return False\n    except:\n        return False\nprint(unique_Element([1,1,2,3,3,3,3,4,5,6]))\n",
        "num_ids": 148
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    try:\n        if len(arr)==0:\n            return True\n        else:\n            if len(set(arr))==1:\n                return True\n            else:\n                return False\n    except TypeError:\n        return \"Invalid Input\"\n",
        "num_ids": 61
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i] and arr[i] not in arr[i+1:]:\n            count += 1\n        if count > 1:\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dict={}\n    if len(arr)==0:\n        return False\n    for i in arr:\n        if i in dict.keys():\n            return False\n        else:\n            dict[i]=1\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['jan', 'feb','mar', 'apr','may', 'jun', 'jul', 'aug','sep', 'oct', 'nov', 'dec']\n    if monthnum3 in months:\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"No 30 days month\")\n    else:\n        print(\"30 days month\")\n",
        "num_ids": 50
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 >= 1 and monthnum3 <= 12):\n        if (monthnum3 == 2 and year % 4 == 0 and year % 100!= 0 or monthnum3 == 2 and year % 400 == 0):\n            print(\"The month contains 29 days\")\n        else:\n            print(\"The month contains 28 days\")\n    else:\n        print(\"Invalid input\")\n",
        "num_ids": 88
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for i in range(1,13):\n        if monthnum3 == i:\n            if i == 12 and monthnum3!= 1:\n                print(False)\n            elif i == 1 and monthnum3!= 12:\n                print(False)\n            elif i!= 1 and i!= 12 and monthnum3 == 1:\n                print(False)\n            elif i!= 1 and i!= 12 and monthnum3!= 1:\n                print(True)\n                break\n",
        "num_ids": 119
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return monthnum3 == 30\n",
        "num_ids": 10
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,3) or monthnum3 in range(4,6) or monthnum3 in range(7,9) or monthnum3 in range(10,12):\n        return 'This is a 30 day month'\n    else:\n        return 'This is not a 30 day month'\n",
        "num_ids": 75
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # if monthnum3 == 31:\n    #     return True\n    # elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n    #     return False\n    # else:\n    #     return True\n    if monthnum3 == 31 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return True\n",
        "num_ids": 139
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n        \n        \ndef check_month_date(date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if date > 31 or date < 1:\n        return False\n    else:\n        return True\n        \ndef check_if_valid(year, month, date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    elif month < 1 or month > 12:\n        return False\n    elif date < 1 or date > 31:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    else:\n        if check_month_date(date):\n            return True\n        else:\n            return False\n            \ndef leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef is_leap(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef check_date(year, month, date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    elif month < 1 or month > 12:\n        return False\n    elif date < 1 or date > 31:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    else:\n        if is_leap(year):\n            if date > 29:\n                return False\n        else:\n            if date > 28:\n                return False\n        return True\n        \ndef check_input_date(date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if date.count('-')!= 2:\n        return False\n    else:\n        date_split = date.split('-')\n        if len(date_split[0]) == 4 and len(date_split[1]) == 2 and len(date_split[2]) == 2:\n            if not check_date(int(date_split[0]), int(date_split[1]), int(date_split[2])):\n                return False\n            else:\n                return True\n        else:\n            return False\n            \ndef is_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef leap_year_output(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    elif is_leap_year(year):\n        return True\n    else:\n        return False\n        \ndef is_leap_year_output(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    elif is_leap_year(year):\n        return True\n    else:\n        return False\n    \ndef check_input_month(month):\n    '''\n    Write a function to check whether the given month is valid or not.\n    '''\n    if month > 12 or month < 1:\n        return False\n    else:\n        return True\n        \ndef check_input_month_year(month, year):\n    '''\n    Write a function to check whether the given month and year is valid or not.\n    '''\n    if not check_input_month(month):\n        return False\n    elif not check_input_year(year):\n        return False\n    else:\n        return True\n        \ndef check_input_date_month_year(date, month, year):\n    '''\n    Write a function to check whether the given date and month and year is valid or not.\n    '''\n    if date < 1 or date > 31 or month < 1 or month > 12 or year < 1000 or year > 3000:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    elif not check_input_year(year):\n        return False\n    else:\n        if date > 29 and month == 2 and is_leap_year(year):\n            return False\n        else:\n            return True\n        \ndef check_input_date_month(date, month):\n    '''\n    Write a function to check whether the given date and month is valid or not.\n    '''\n    if date < 1 or date > 31 or month < 1 or month > 12:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    else:\n        if date > 28:\n            return False\n        else:\n            return True\n            \ndef check_input_date_month_year(date, month, year):\n    '''\n    Write a function to check whether the given date and month and year is valid or not.\n    '''\n    if date < 1 or date > 31 or month < 1 or month > 12 or year < 1000 or year > 3000:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    elif not check_input_year(year):\n        return False\n    else:\n        if date > 29 and month == 2 and is_leap_year(year):\n            return False\n        else:\n            return True\n        \ndef check_input_date_year(date, year):\n    '''\n    Write a function to check whether the given date and year is valid or not.\n    '''\n    if date < 1 or date > 31 or year < 1000 or year > 3000:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    else:\n        if date > 28:\n            return False\n        else:\n            return True\n            \ndef check_input_date_month_year(date, month, year):\n    '''\n    Write a function to check whether the given date and month and year is valid or not.\n    '''\n    if date < 1 or date > 31 or month < 1 or month > 12 or year < 1000 or year > 3000:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    elif not check_input_year(year):\n        return False\n    else:\n        if date > 29 and month == 2 and is_leap_year(year):\n            return False\n        else:\n            return True\n    \ndef check_input_year(year):\n    '''\n    Write a function to check whether the given year is valid or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    else:\n        return True\n    \ndef check_input_month(month):\n    '''\n    Write a function to check whether the given month is valid or not.\n    '''\n    if month > 12 or month < 1:\n        return False\n    else:\n        return True\n        \ndef check_input_date(date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if date < 1 or date > 31:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%2==0:\n        return 'It is an even month number'\n    else:\n        return 'It is an odd month number'\n    \n",
        "num_ids": 41
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n):\n        for j in range(i+1,n):\n            if min_diff > arr[j] - arr[i]:\n                min_diff = arr[j] - arr[i]\n",
        "num_ids": 76
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return abs(arr[0]-0)\n    \n    if len(arr) == 2:\n        return abs(arr[0]-arr[1])\n",
        "num_ids": 61
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #code here\n    arr.sort()\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(0,len(arr)-1):\n        if abs(arr[i+1] - arr[i]) < min_diff:\n            min_diff = abs(arr[i+1] - arr[i])\n    return min_diff\n",
        "num_ids": 91
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    min_diff = arr[0]\n    for i in range(1,len(arr)):\n        min_diff = min(min_diff, arr[i]-arr[i-1])\n    return min_diff\n",
        "num_ids": 62
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # To store the minimum difference possible\n    min_diff = 2147000000\n",
        "num_ids": 20
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # initialize first and second element \n    first = arr[0] \n    second = arr[1] \n    min_diff = abs(first - second) \n    \n    for i in range(2, len(arr)): \n        \n        # update the minimum difference  \n        # if the current difference  \n        # is less than the min_diff  \n        if abs(arr[i] - first) < min_diff: \n            second = first \n            min_diff = abs(arr[i] - first) \n        \n        # update first \n        if abs(arr[i] - second) < min_diff: \n            first = arr[i] \n    return min_diff \n",
        "num_ids": 170
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 0\n    min_diff_i = None\n    min_diff_j = None\n",
        "num_ids": 27
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr)<2:\n        return None\n    arr.sort()\n    ans=abs(arr[1]-arr[0])\n    for i in range(0,len(arr)-1):\n        diff=abs(arr[i+1]-arr[i])\n        if diff<ans:\n            ans=diff\n    return ans\n",
        "num_ids": 83
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] < min_diff:\n                min_diff = arr[i] + arr[j]\n    return min_diff\n",
        "num_ids": 76
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(abs(arr[i] - arr[j]))\n    print(lst)\n    res = min(lst)\n    print(res)\n    return res\n",
        "num_ids": 71
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = len(str)\n    count = 0\n    while n > 0:\n        n = n - 1\n        if str[n] == '0':\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - len(str.strip(' '))",
        "num_ids": 17
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_ctr = 0\n    for char in str:\n        if char.isdigit():\n            num_ctr += 1\n    return num_ctr\n",
        "num_ids": 38
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    s = str.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"'\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"/\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\":\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"\\\\\", \"\")\n    s = s.replace(\"'\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"/\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"\\\\\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(",
        "num_ids": 2018
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    c = 0\n    for s in str:\n        if s.isdigit():\n            c += 1\n    return c\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    x=0\n    y=0\n    for i in str:\n        if i.isdigit():\n            x=x+1\n        else:\n            y=y+1\n    print('Number of digits in given string',x,'\\n' 'Number of non digits in given string',y)\n",
        "num_ids": 73
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x = 0\n    n = int(n)\n    while x<=n:\n        if x%7==0 or x%2==0:\n            x+=1\n        else:\n            x+=2\n    return(x)\n    \ndef is_palindrome(n):\n    '''\n    Write a function to find nth palindrome number. geeksforgeeks.org/n-th-palindrome-number/\n    '''\n    x = 0\n    y = 0\n    n = int(n)\n    while x<=n:\n        if x%7==0 or x%2==0:\n            x+=1\n        else:\n            x+=2\n    while y<=x:\n        if n%y==0:\n            print(y)\n        y+=1\n    return(0)\n    \ndef is_prime(n):\n    '''\n    Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\n    '''\n    if n<=3:\n        return(1)\n    elif n%2==0 or n%3==0:\n        return(0)\n    elif n>3:\n        for i in range(5,n,2):\n            if n%i==0 or n%(i+2)==0:\n                return(0)\n        return(1)\n    \ndef to_binary(n):\n    '''\n    Write a function to convert an integer to binary. geeksforgeeks.org/binary-to-decimal/\n    '''\n    x = 0\n    n = int(n)\n    while n>0:\n        x = x*2+n%10\n        n = n//10\n    return(x)\n    \ndef sum_of_two_integers(x,y):\n    '''\n    Write a function to sum two integers and print the required binary value. geeksforgeeks.org/sum-of-two-integers/\n    '''\n    a = to_binary(x)\n    b = to_binary(y)\n    s = 0\n    while a>=b:\n        s+=a%2\n        a = a//2\n    return(s)\n    \ndef is_prime_till(n):\n    '''\n    Write a function to find all prime numbers till n. geeksforgeeks.org/prime-numbers-till-n/\n    '''\n    x = 1\n    while x<=n:\n        if n%x==0:\n            print(x)\n        x+=1\n    return(0)\n    \ndef is_prime_till_v2(n):\n    '''\n    Write a function to find all prime numbers till n. geeksforgeeks.org/prime-numbers-till-n/\n    '''\n    x = 2\n    while x<=n:\n        if n%x==0:\n            print(x)\n        x+=1\n    return(0)\n    \ndef is_prime_v3(n):\n    '''\n    Write a function to find all prime numbers till n. geeksforgeeks.org/prime-numbers-till-n/\n    '''\n    x = 2\n    if n<=3:\n        return(0)\n    elif n%2==0 or n%3==0:\n        return(0)\n    elif n>3:\n        while x<=math.sqrt(n):\n            if n%x==0:\n                return(0)\n            x+=1\n        return(1)\n    \ndef get_prime_numbers_upto(n):\n    '''\n    Write a function to find all prime numbers upto and including n. geeksforgeeks.org/prime-numbers-upto-n/\n    '''\n    if n<=2:\n        return(0)\n    else:\n        prime_numbers = []\n        i = 2\n        while i<=n:\n            if is_prime_v3(i):\n                prime_numbers.append(i)\n            i+=1\n        return(prime_numbers)\n    \ndef get_prime_numbers_upto_v2(n):\n    '''\n    Write a function to find all prime numbers upto and including n. geeksforgeeks.org/prime-numbers-upto-n/\n    '''\n    if n<=2:\n        return(0)\n    else:\n        prime_numbers = []\n        i = 2\n        while i<=n:\n            if is_prime_v3(i):\n                prime_numbers.append(i)\n            i+=1\n        return(prime_numbers)\n    \ndef get_prime_numbers_upto_v3(n):\n    '''\n    Write a function to find all prime numbers upto and including n. geeksforgeeks.org/prime-numbers-upto-n/\n    '''\n    if n<=2:\n        return(0)\n    else:\n        prime_numbers = []\n        i = 2\n        while i<=n:\n            if is_prime_v3(i):\n                prime_numbers.append(i)\n            i+=1\n        return(prime_numbers)\n    \ndef print_prime_numbers(n):\n    '''\n    Write a function to print all prime numbers till n. geeksforgeeks.org/prime-numbers-till-n/\n    '''\n    x = 1\n    while x<=n:\n        if is_prime_v3(x):\n            print(x, end=\" \")\n        x+=1\n    return(0)\n    \ndef print_prime_numbers_v2(n):\n    '''\n    Write a function to print all prime numbers till n. geeksforgeeks.org/prime-numbers-till-n/\n    '''\n    x = 2\n    if n<=2:\n        return(0)\n    elif n%2==0 or n%3==0:\n        return(0)\n    elif n>3:\n        while x<=n:\n            if is_prime_v3(x):\n                print(x, end=\" \")\n            x+=1\n        return(0)\n    \ndef print_prime_numbers_v3(n):\n    '''\n    Write a function to print all prime numbers till n. geeksforgeeks.org/prime-numbers-till-n/\n    '''\n    x = 2\n    if n<=2:\n        return(0)\n    elif n%2==0 or n%3==0:\n        return(0)\n    elif n>3:\n        while x<=n:\n            if is_prime_v3(x):\n                print(x, end=\" \")\n            x+=1\n        return(0)\n    \ndef get_prime_factors(n):\n    '''\n    Write a function to find all prime factors of an integer n. geeksforgeeks.org/prime-factors/\n    '''\n    i = 2\n    prime_factors = []\n    while i<=n:\n        if n%i==0:\n            if is_prime_v3(i):\n                prime_factors.append(i)\n            while n%i==0:\n                n = n//i\n        i+=1\n    return(prime_factors)\n    \ndef get_prime_factors_v2(n):\n    '''\n    Write a function to find all prime factors of an integer n. geeksforgeeks.org/prime-factors/\n    '''\n    i = 2\n    prime_factors = []\n    while i<=n:\n        if n%i==0:\n            prime_factors.append(i)\n        i+=1\n    return(prime_factors)\n    \ndef get_prime_factors_v3(n):\n    '''\n    Write a function to find all prime factors of an integer n. geeksforgeeks.org/prime-factors/\n    '''\n    i = 2\n    prime_factors = []\n    while i<=n:\n        if n%i==0:\n            prime_factors.append(i)\n        i+=1\n    return(prime_factors)\n    \ndef get_prime_factors_v4(n):",
        "num_ids": 72
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n==1):\n        return 3\n    l = 5\n    while l<=n:\n        l *= 3\n    return l%int(n) \n",
        "num_ids": 43
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = {'1': '1st', '2': '2nd', '3': '3rd', '4': '4th', '5': '5th', '6': '6th', '7': '7th', '8': '8th', '9': '9th', '10': '10th'} \n    polite_numbers = {v: k for k, v in polite_numbers.items()} \n",
        "num_ids": 109
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #code here\n    if n==1:\n        return 1\n    else:\n        return 2*n+1\n",
        "num_ids": 30
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    while num <= n:\n        if is_polite_rec(num):\n            print(num)\n        num = num + 1\ndef is_polite_rec(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        if (is_polite_rec(n-1) and is_polite_rec(n-2)):\n            return True\n        elif (is_polite_rec(n-1) or is_polite_rec(n-2)):\n            return False\n        else:\n            return True\nn=int(input())\nif is_polite(n):\n    pass\nelse:\n    print(\"-1\")",
        "num_ids": 130
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    p1=1\n    p2=2\n    p3=4\n    for i in range(3,n+1):\n        p=p1+p2+p3\n        p1=p2\n        p2=p3\n        p3=p\n    return p\n",
        "num_ids": 102
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    c = 0\n    for i in range(2,n):\n        if (n % i) == 0:\n            c = c + 1\n    if c == 0:\n        print(\"true\")\n    else:\n        print(\"false\")\n",
        "num_ids": 59
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def helper(i, n):\n        if i == 1:\n            return n\n        if i % 2 == 0:\n            return n*2\n        else:\n            return n*2+1\n    if n == 1:\n        return 1\n    else:\n        return helper(1, n)\n",
        "num_ids": 73
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return False\n    else:\n        for i in range(1,(n//2)+1):\n            if n%i == 0:\n                return False\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_number=[]\n    for i in range(n):\n        polite_number.append(1)\n    polite_number.append(2)\n    for i in range(3,n+1):\n        if(i%2!=0):\n            polite_number.append(polite_number[i-1]+1)\n        else:\n            polite_number.append(polite_number[i-1]-1)\n    return polite_number[n]",
        "num_ids": 117
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # This function should return a list of tuples containing pairs of consecutive elements in the list.\n    # This function should return the pairs in sorted order\n    # This function should work for any list of elements but not in-place\n    # for example: if the input list is {1, 3, 5, 7, 9} then the function should return [(1, 3), (3, 5), (5, 7), (7, 9)]\n",
        "num_ids": 99
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    if len(l1) < 2:\n        return l1\n    \n    for i in range(len(l1)):\n        if i!= len(l1) - 1:\n            yield (l1[i], l1[i + 1])\n",
        "num_ids": 66
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i],l1[i+1]])\n    return pairs\n",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not isinstance(l1, list):\n        raise TypeError\n    if len(l1) == 0:\n        return []\n    else:\n        pairs = []\n        i = 0\n        while i < len(l1):\n            if i + 1 == len(l1):\n                pairs.append([l1[i], l1[0]])\n            else:\n                pairs.append([l1[i], l1[i + 1]])\n            i += 2\n        return pairs\nprint(pair_wise(l1)",
        "num_ids": 131
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output = []\n    temp = []\n    for item in l1:\n        if item == None:\n            continue\n        temp.append(item)\n        if len(temp) > 1:\n            output.append((temp[0],temp[1]))\n        temp = []\n    return output\n",
        "num_ids": 72
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(0,len(l1)-1):\n        l2.append(l1[i:i+2])\n    return l2\n",
        "num_ids": 45
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1.sort()\n    pairs=[]\n    for i in range(0,len(l1)-1):\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n",
        "num_ids": 55
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)==1:\n        return []\n    l1_pairs = []\n    for i in range(len(l1)-1):\n        l1_pairs.append((l1[i],l1[i+1]))\n    return l1_pairs\n",
        "num_ids": 71
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    my_list = list(range(0, len(l1)))\n    pair_list = []\n    for i in range(len(l1) - 1):\n        pair_list.append((l1[i], l1[i + 1]))\n    return pair_list\n",
        "num_ids": 68
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 0:\n        return []\n    res = []\n    l1 = deque(l1)\n    l1.append(None)\n    for i in range(len(l1)-1):\n        res.append((l1[i], l1[i+1]))\n    return res\n",
        "num_ids": 79
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #return number of pairs\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (arr[i] + arr[j] == sum):\n                count = count + 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i]+arr[j] == sum):\n                pairs.append((arr[i],arr[j]))\n    return len(pairs)\n",
        "num_ids": 73
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                cnt +=1\n    return cnt\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    arr.sort()\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        if arr[low] + arr[high] == sum:\n            pairs_count+=1\n            low+=1\n            high-=1\n        elif arr[low] + arr[high]<sum:\n            low+=1\n        else:\n            high-=1\n    return pairs_count\n",
        "num_ids": 109
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # N = len(arr)\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count = count + 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # create a dictionary with key being pair and value as their frequencies\n    dic = {}\n    #traversing the list of elements\n    for i in range(len(arr)):\n        if arr[i] not in dic:\n            dic[arr[i]] = 1\n        else:\n            dic[arr[i]] += 1\n    count = 0\n    #checking if the pair is in dictionary or not\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    print(dic)\n    return count\n",
        "num_ids": 159
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n",
        "num_ids": 55
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [value for value in li1 if value not in li2]\n    \ndef Multiply(list1,list2):\n    '''\n    Write a python function to multiply two list of numbers.\n    '''\n    return [value1*value2 for value1 in list1 for value2 in list2]\n    \ndef Palindrome(list1):\n    '''\n    Write a python function to check if a list is a palindrome or not.\n    '''\n    return list1 == list1[::-1]\n    \ndef Partition(list1,list2):\n    '''\n    Write a python function to find the index of the first occurrence of an item from list1 in list2.\n    '''\n    for i,value in enumerate(list2):\n        if value == list1[0]:\n            return i\n        \ndef hasCycle(list1,list2):\n    '''\n    Write a python function to check if a list has any repeated elements.\n    '''\n    return list(set(list1) & set(list2))\n    \ndef Palindrome2(list1):\n    '''\n    Write a python function to check if a list is a palindrome or not.\n    '''\n    return list1 == list1[::-1]\n    \ndef Subset(list1,list2):\n    '''\n    Write a python function to check if all the elements in list2 are also present in list1.\n    '''\n    for item in list2:\n        if item not in list1:\n            return False\n    return True\n    \ndef EquiSizedPairs(list1):\n    '''\n    Write a python function to check if all the pairs of items from the list are of the same size.\n    '''\n    return all([len(list1) == len(list2) for list2 in zip(*[list1,list1])])\n    \ndef EquiSizedPairs2(list1):\n    '''\n    Write a python function to check if all the pairs of items from the list are of the same size.\n    '''\n    if len(list1) % 2:\n        return False\n    return all([len(list1) == len(list2) for list2 in zip(*[list1,list1])])\n    \ndef SumList(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(list1)\n    \ndef SumList2(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(list1,0)\n    \ndef SumList3(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(iter(list1))\n    \ndef SumList4(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(iter(list1),0)\n    \ndef SumList5(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(enumerate(list1))\n    \ndef SumList6(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(enumerate(list1),0)\n    \ndef SumList7(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(zip(list1,list1))\n    \ndef SumList8(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(zip(list1,list1),0)\n    \ndef SumList9(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(enumerate(list1),0)\n    \ndef SumList10(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(enumerate(list1),0)\n    \ndef SumList11(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(zip(list1,list1),0)\n    \ndef SumList12(list1):\n    '''\n    Write a python function to sum all the items in the list.\n    '''\n    return sum(zip(list1,list1),0)\n    \ndef CountList(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return list1.count(list1[0])\n    \ndef CountList2(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return list1.count(list1[0],0)\n    \ndef CountList3(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList4(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1,)))\n    \ndef CountList5(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList6(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList7(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList8(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList9(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList10(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList11(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList12(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList13(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList14(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList15(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList16(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList17(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList18(list1):\n    '''\n    Write a python function to count the occurences of an item in the list.\n    '''\n    return len(list(set(list1)))\n    \ndef CountList19(list1):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res=[]\n    for i in li1:\n        if i not in li2:\n            res.append(i)\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1 + li2\n    \n    \n    \n    \n    \n    \n    \ndef FindMaxElement(li):\n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    max = li[0]\n    for i in range(len(li)):\n        if max < li[i]:\n            max = li[i]\n    return max\n    \n    \ndef GetCommonElements(li1,li2):\n    '''\n    Write a python function to find the common elements in two lists.\n    '''\n    common = []\n    for i in li1:\n        if i in li2 and i not in common:\n            common.append(i)\n    return common\n    \n    \n    \n    \ndef PrintMatrixReverse(matrix):\n    '''\n    Write a python function to print a matrix in a reverse fashion.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print(matrix[i][j],end=\" \")\n        print()\n        \n    \n    \n    \ndef PrintMatrix(matrix):\n    '''\n    Write a python function to print a matrix.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print(matrix[i][j],end=\" \")\n        print()\n        \n    \n    \n    \ndef PrintMatrixReverse(matrix):\n    '''\n    Write a python function to print a matrix in a reverse fashion.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])-1,-1,-1):\n            print(matrix[i][j],end=\" \")\n        print()\n        \n    \n    \n    \ndef PrintMatrix(matrix):\n    '''\n    Write a python function to print a matrix.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print(matrix[i][j],end=\" \")\n        print()\n        \n    \n    \n    \ndef PrintMatrixReverse(matrix):\n    '''\n    Write a python function to print a matrix in a reverse fashion.\n    '''\n    for i in range(len(matrix)-1,-1,-1):\n        for j in range(len(matrix[i])):\n            print(matrix[i][j],end=\" \")\n        print()\n        \n    \n    \n    \ndef isPalindrome(str):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    i = 0\n    j = len(str) - 1\n    while i < j:\n        if str[i] == str[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\n    \n    \ndef GetPrimeFactors(number):\n    '''\n    Write a python function to get the prime factors of a number.\n    '''\n    prime = []\n    while number % 2 == 0:\n        prime.append(2)\n        number = number / 2\n    for i in range(3,int(number**0.5)+1,2):\n        while number % i == 0:\n            prime.append(i)\n            number = number / i\n    if number > 2:\n        prime.append(int(number))\n    return prime\n    \n    \ndef PrintNumber(n):\n    '''\n    Write a python function to print all the prime numbers in a given range.\n    '''\n    n = int(n)\n    for i in range(n+1):\n        if i in range(2,n+1):\n            print(i,end=\" \")\n    print()\n    \n    \n    \n    \ndef PrintNumber(n):\n    '''\n    Write a python function to print all the prime numbers in a given range.\n    '''\n    for i in range(2,n+1):\n        prime = True\n        for j in range(2,i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            print(i,end=\" \")\n    print()\n    \n    \n    \n    \ndef GetPrimeFactors(number):\n    '''\n    Write a python function to get the prime factors of a number.\n    '''\n    prime = []\n    while number % 2 == 0:\n        prime.append(2)\n        number = number / 2\n    for i in range(3,int(number**0.5)+1,2):\n        while number % i == 0:\n            prime.append(i)\n            number = number / i\n    if number > 2:\n        prime.append(int(number))\n    return prime\n    \n    \ndef IsPrime(number):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    prime = True\n    for i in range(2,int(number**0.5)+1):\n        if number % i == 0:\n            prime = False\n            break\n    return prime\n    \n    \ndef GetPrimeFactors(number):\n    '''\n    Write a python function to get the prime factors of a number.\n    '''\n    prime = []\n    while number % 2 == 0:\n        prime.append(2)\n        number = number / 2\n    for i in range(3,int(number**0.5)+1,2):\n        while number % i == 0:\n            prime.append(i)\n            number = number / i\n    if number > 2:\n        prime.append(int(number))\n    return prime\n    \n    \ndef IsPrime(number):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    prime = True\n    for i in range(2,int(number**0.5)+1):\n        if number % i == 0:\n            prime = False\n            break\n    return prime\n    \n    \ndef GetPrimeFactors(number):\n    '''\n    Write a python function to get the prime factors of a number.\n    '''\n    prime = []\n    while number % 2 == 0:\n        prime.append(2)\n        number = number / 2\n    for i in range(3,int(number**0.5)+1,2):\n        while number % i == 0:\n            prime.append(i)\n            number = number / i\n    if number > 2:\n        prime.append(int(number))\n    return prime\n    \n    \ndef IsPrime(number):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    prime = True\n    for i in range(2,int(number**0.5)+1):\n        if number % i == 0:\n            prime = False\n            break\n    return prime\n    \n    \ndef GetPrimeFactors(number):\n    '''\n    Write a python function to get the prime factors of a number.\n    '''\n    prime = []\n    while number % 2 == 0:\n        prime.append(2)\n        number = number / 2\n    for i in range(3,int(number**0.5)+1,2):\n        while number % i == 0:\n            prime.append(i)\n            number = number / i\n    if number > 2:\n        prime.append(int(number))\n    return prime\n    \n    \ndef IsPrime(number):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    prime = True\n    for i in range(2,int(number**0.5)+1):\n        if number % i == 0:\n            prime = False\n            break\n    return prime\n    \n    \ndef GetPrimeFactors(number):\n    '''\n    Write a python function to get the prime factors of a number.\n    '''\n    prime = []\n    while number % 2 == 0:\n        prime.append(2)\n        number = number / 2\n    for i in range(3,int(number**0.5)+1,2):\n        while number % i == 0:\n            prime.append(i)\n            number = number / i\n    if number > 2:\n        prime.append(int(number))\n    return prime\n",
        "num_ids": 97
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = []\n    for i in range(0,len(li1)):\n        if li1[i] not in li2:\n            li.append(li1[i])\n    return li\n",
        "num_ids": 50
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1=set(li1)\n    li2=set(li2)\n    li3=li1-li2\n    li4=li2-li1\n    li5=li1.intersection(li2)\n    li6=li2.intersection(li1)\n    return li3.union(li4,li5,li6)\nif __name__=='__main__':\n    li1=[1,2,3,4]\n    li2=[2,3,4,5,6]\n    print(Diff(li1,li2))\n    # Expected output: {1,4}",
        "num_ids": 149
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [i for i in li1 + li2 if i not in li1 or i not in li2]\n",
        "num_ids": 28
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li=[]\n    li1_copy=li1[:]\n    for i in li1_copy:\n        if i not in li2:\n            li.append(i)\n    return li\n",
        "num_ids": 49
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum += i**2\n    return sum\nodd_num_sum(10)\n",
        "num_ids": 51
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2) :\n        sum += i ** 4\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for num in range(n+1) : \n        if num % 2!= 0 : \n            sum += pow(num,4)\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    ans=0\n    for i in range(n+1):\n        if i%2!=0:\n            ans+=i**3\n    return ans\n",
        "num_ids": 39
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #solution\n    '''\n    solution: \n        1. First find n as the count of odd number using a list comprehension.\n        2. Next generate a list of numbers from 1 to n using range function.\n        3. Next use a loop to generate a list of first n numbers from 1 to n using range.\n        4. Finally use a for loop to compute the sum of fourth power of numbers from list i.e. [4^2, 4^2, 4^2,..., 4^2].\n    '''\n    #code\n    odd_list = list(range(1,n+1,2))\n    fourth_power_list = []\n    for i in range(0, len(odd_list), 1):\n        fourth_power_list.append(odd_list[i]**4)\n    return sum(fourth_power_list)\n",
        "num_ids": 80
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(1,n,2) : \n        odd_sum += i**2 \n    return odd_sum\n",
        "num_ids": 40
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = n + 1\n    s = 0\n    for i in range(1,n,2) : \n        s += i**3 \n    print (s)\n",
        "num_ids": 43
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if(i%2!= 0) :\n            sum = sum + pow(i,4)\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_odd_numbers = 0\n    odd_numbers = []\n    for i in range(1,n+1) : \n        if i%2!= 0 : \n            odd_numbers.append(i)\n    for i in range(len(odd_numbers)) : \n        sum_of_odd_numbers = sum_of_odd_numbers + (odd_numbers[i]**2)\n    return sum_of_odd_numbers\n",
        "num_ids": 117
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd = 0\n    for i in range(1,n+1):\n        if(i%2!= 0):\n            sum_odd += i**3\n    print(sum_odd)\n",
        "num_ids": 50
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n",
        "num_ids": 61
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    # list of operators\n    symbols = ['+', '-', '*', '/']\n    for char in exp:\n        if char in symbols:\n            stack.append(char)\n        else:\n            # if current symbol is not in the stack, return False\n            if not stack or stack.pop()!= char:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 97
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)%2!= 0:\n        return False\n    op_stack = deque()\n    char_stack = deque()\n    left_count = 0\n    right_count = 0\n    for char in exp:\n        if char in \"({[\":\n            char_stack.append(char)\n            left_count += 1\n            if char == ')':\n                if left_count == right_count:\n                    while char_stack:\n                        poped = char_stack.pop()\n                        if poped!= '(':\n                            return False\n                        else:\n                            right_count -= 1\n                else:\n                    return False\n            if char == ']':\n                if left_count == right_count:\n                    while char_stack:\n                        poped = char_stack.pop()\n                        if poped!= '[':\n                            return False\n                        else:\n                            right_count -= 1\n                else:\n                    return False\n            if char == '}':\n                if left_count == right_count:\n                    while char_stack:\n                        poped = char_stack.pop()\n                        if poped!= '{':\n                            return False\n                        else:\n                            right_count -= 1\n                else:\n                    return False\n        if char in \")]}\":\n            if char == ')':\n                if left_count == right_count:\n                    while char_stack:\n                        poped = char_stack.pop()\n                        if poped!= '(':\n                            return False\n                        else:\n                            right_count -= 1\n                else:\n                    return False\n            if char == ']':\n                if left_count == right_count:\n                    while char_stack:\n                        poped = char_stack.pop()\n                        if poped!= '[':\n                            return False\n                        else:\n                            right_count -= 1\n                else:\n                    return False\n            if char == '}':\n                if left_count == right_count:\n                    while char_stack:\n                        poped = char_stack.pop()\n                        if poped!= '{':\n                            return False\n                        else:\n                            right_count -= 1\n                else:\n                    return False\n    return True\n",
        "num_ids": 513
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    p_map = {\n            '(': ')',\n            '[': ']',\n            '{': '}',\n            '<': '>',\n            '+': '-',\n            '*': '*',\n            ')': '('\n        }\n    for i in exp:\n        if i in p_map:\n            stack.append(i)\n        else:\n            if stack:\n                v = stack.pop()\n                if p_map[i]!= v:\n                    return False\n            else:\n                return False\n    if stack:\n        return False\n    return True\ndef validate_parentheses(exp):\n    '''\n    Write a function to check if the given string is a correct expression or not. https://www.geeksforgeeks.org/check-if-expression-is-balanced-or-not/\n    '''\n    # Check for empty string\n    if not exp:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i=='(' or i=='[' or i=='{':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                pop = stack.pop()\n                if i==')':\n                    if pop!='(':\n                        return False\n                elif i==']':\n                    if pop!='[':\n                        return False\n                elif i=='}':\n                    if pop!='{':\n                        return False\n    if len(stack)!=0:\n        return False\n    return True\ndef pair(exp):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    if len(exp)%2!=0:\n        return False\n    stack = []\n    for i in exp:\n        if i=='(':\n            stack.append(i)\n        elif i==')':\n            if len(stack) == 0:\n                return False\n            else:\n                pop = stack.pop()\n                if i!=pop:\n                    return False\n    if len(stack)!= 0:\n        return False\n    return True\ndef get_parenthesis(exp):\n    '''\n    Write a function to get the matching parenthesis\n    '''\n    stack = []\n    for i in exp:\n        if i=='(' or i=='[' or i=='{':\n            stack.append(i)\n        else:\n            if len(stack)==0:\n                return -1\n            else:\n                pop = stack.pop()\n                if i==')':\n                    if pop!='(':\n                        return -1\n                elif i==']':\n                    if pop!='[':\n                        return -1\n                elif i=='}':\n                    if pop!='{':\n                        return -1\n    if len(stack)!=0:\n        return -1\n    return 0\ndef is_positive(exp):\n    '''\n    Write a function to check whether given expression is a positive expression or not.\n    '''\n    stack = []\n    for i in exp:\n        if i=='+' or i=='-':\n            stack.append(i)\n        else:\n            if len(stack)==0:\n                return False\n            else:\n                pop = stack.pop()\n                if i=='+' and pop=='-' or i=='-' and pop=='+':\n                    return False\n    if len(stack)!=0:\n        return False\n    return True\ndef get_diff(exp1, exp2):\n    '''\n    Write a function to get the difference of two given expressions\n    '''\n    stack1 = []\n    stack2 = []\n    for i in exp1:\n        if i=='(' or i=='[' or i=='{':\n            stack1.append(i)\n        elif i==')' or i==']' or i=='}':\n            if len(stack1)==0:\n                return '0'\n            else:\n                pop = stack1.pop()\n                if i==')' and pop=='(' or i==']' and pop=='[' or i=='}' and pop=='{':\n                    return '0'\n    for i in exp2:\n        if i=='(' or i=='[' or i=='{':\n            stack2.append(i)\n        elif i==')' or i==']' or i=='}':\n            if len(stack2)==0:\n                return '0'\n            else:\n                pop = stack2.pop()\n                if i==')' and pop=='(' or i==']' and pop=='[' or i=='}' and pop=='{':\n                    return '0'\n    if len(stack1)!=0 or len(stack2)!=0:\n        return '0'\n    ans = 0\n    while len(stack1)!=0 or len(stack2)!=0:\n        if len(stack1)!=0 and len(stack2)!=0:\n            if stack1[-1]=='+' and stack2[-1]=='+':\n                ans = ans+2\n            elif stack1[-1]=='-' and stack2[-1]=='-':\n                ans = ans+2\n            elif stack1[-1]=='*' and stack2[-1]=='*':\n                ans = ans+4\n            elif stack1[-1]=='/' and stack2[-1]=='/':\n                ans = ans+4\n            else:\n                return '0'\n            pop1 = stack1.pop()\n            pop2 = stack2.pop()\n            if pop1=='+' or pop1=='-':\n                stack1.append(pop1)\n            if pop2=='+' or pop2=='-':\n                stack2.append(pop2)\n        elif len(stack1)==0 and len(stack2)!=0:\n            pop2 = stack2.pop()\n            if pop2=='+' or pop2=='-':\n                stack2.append(pop2)\n        elif len(stack1)!=0 and len(stack2)==0:\n            pop1 = stack1.pop()\n            if pop1=='+' or pop1=='-':\n                stack1.append(pop1)\n        else:\n            return '0'\n    while len(stack1)!=0 or len(stack2)!=0:\n        if len(stack1)!=0 and len(stack2)!=0:\n            if stack1[-1]=='+' and stack2[-1]=='+':\n                ans = ans+2\n            elif stack1[-1]=='-' and stack2[-1]=='-':\n                ans = ans+2\n            elif stack1[-1]=='*' and stack2[-1]=='*':\n                ans = ans+4\n            elif stack1[-1]=='/' and stack2[-1]=='/':\n                ans = ans+4\n            else:\n                return '0'\n            pop1 = stack1.pop()\n            pop2 = stack2.pop()\n            if pop1=='+' or pop1=='-':\n                stack1.append(pop1)\n            if pop2=='+' or pop2=='-':\n                stack2.append(pop2)\n        elif len(stack1)==0 and len(stack2)==0:\n            pop2 = stack2.pop()\n            if pop2=='+' or pop2=='-':\n                stack2.append(pop2)\n        elif len(stack1)!=0 and len(stack2)==0:\n            pop1 = stack1.pop()\n            if pop1=='+' or pop1=='-':\n                stack1.append(pop1)\n        else:\n            return '0'\n    return str(ans)\ndef paranthesis_balanced(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i=='(' or i=='[' or i=='{':\n            stack.append(i)\n        else:\n            if len(stack)==0:\n                return False\n            else:\n                pop = stack.pop()\n                if i==')':\n                    if pop!='(':\n                        return False\n                elif i==']':\n                    if pop!='[':\n                        return False\n                elif i=='}':\n                    if pop!='{':\n                        return False\n    if len(stack)!=0:\n        return False\n    return True\ndef eval_post_fix(exp):\n    '''\n    Write a function to evaluate the postfix expression\n    '''\n    stack = []\n    for i in exp:\n        if i=='+' or i=='-' or i=='*' or i=='/':\n            pop = stack.pop()\n            while pop=='+' or pop=='-' or pop=='*' or pop=='/':\n                val1 = int(stack.pop())\n                val2 = int(stack.pop()",
        "num_ids": 91
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #base case\n    if(len(exp) == 0):\n        return True\n    #compute first\n    first = exp[0]\n    #check if it is opening bracket\n    if(first == '(' or first == '{' or first == '['):\n        #recursive call\n        if(not check_expression(exp[1:])):\n            return False\n    #compute second\n    second = exp[len(exp)-1]\n    #check if it is closing bracket\n    if(first == ')' or first == '}' or first == ']'):\n        #recursive call\n        if(not check_expression(exp[:-1])):\n            return False\n    return True\n",
        "num_ids": 166
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)%2!= 0:\n        return False\n    if is_balanced(exp) == 'UNBALANCED':\n        return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in \"([{\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char == \")\" and top!= \"(\":\n                return False\n            if char == \"]\" and top!= \"[\":\n                return False\n            if char == \"}\" and top!= \"{\":\n                return False\n    return True if not stack else False\n",
        "num_ids": 113
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    \n    for ch in exp:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 88
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # code here\n    if len(exp) == 0:\n        return True\n    exp = '(' + exp + ')'\n    stack = []\n    for i in exp:\n        if i == '(' or i == '[':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\n",
        "num_ids": 100
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # if not test_str:\n    #     return test_str\n    #\n    # # use a list comprehension and set()\n    # # if K in (test_str):\n    # #     test_str = test_str.replace(test_str, \"\")\n    #\n    # return \"\".join([word for word in test_str.split() if len(word)!= K])\n",
        "num_ids": 95
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)):\n        if len(test_str) - i < K:\n            test_str = test_str[:i] + test_str[i + 1:]\n    return test_str\n",
        "num_ids": 58
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length = K\n    str1 = str(test_str)\n    str1 = str1.split()\n    print(str1)\n    for i in range(len(str1)-1,-1,-1):\n        if len(str1[i])==K:\n            del str1[i]\n    print(str1)\n    str1 = \" \".join(str1)\n    print(str1)\n    return str1\n",
        "num_ids": 105
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(\" \")\n    for i in range(len(test_str)):\n        if(len(test_str[i]) == K):\n            test_str.remove(test_str[i])\n    return \" \".join(test_str)\n",
        "num_ids": 70
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = \"\"\n    for i in test_str:\n        if len(i) == K:\n            result += i\n            result +=''\n    return result[:-1]\n",
        "num_ids": 44
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # new_str = test_str.split()\n    # words = []\n    # for word in new_str:\n    #     if len(word) == K:\n    #         words.append(word)\n    # print(words)\n    # return''.join(words)\n    \n    s = test_str.split()\n    s = list(filter(lambda x: len(x)!= K, s))\n    return''.join(s)\n",
        "num_ids": 109
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == '':\n        return ''\n    \n    words = test_str.split()\n    words_lst = []\n    for i in words:\n        if len(i) == K:\n            words_lst.append(i)\n    \n    return''.join(words_lst)\n        \n        \n",
        "num_ids": 80
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = \"\"\n    for word in test_str.split():\n        if len(word) == K:\n            continue\n        else:\n            result += word + \" \"\n    result = result.strip()\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    import re\n    if len(test_str) > 0:\n        pattern = re.compile(r'\\b\\w{%d}\\b' % (K))\n        return pattern.sub('', test_str)\n    else:\n        return ''\n",
        "num_ids": 63
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            test_str.pop(i)\n    return''.join(test_str)\n",
        "num_ids": 62
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occur={}\n    for i in range(0,len(text)):\n        for j in range(len(pattern)):\n            if(text[i:i+j]==pattern[j]):\n                occur.setdefault(pattern[j],[]).append(i)\n    if occur:\n        if len(occur)==1:\n            return next(iter(occur.values()))\n        else:\n            return occur\n    else:\n        return None\n",
        "num_ids": 115
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern:\n        return None\n    if pattern == text:\n        return [0,0]\n    if pattern not in text:\n        return None\n    pattern_length = len(pattern)\n    for i in range(len(text)-pattern_length+1):\n        if text[i:i+pattern_length] == pattern:\n            return [i,i+pattern_length-1]\n    return None\n",
        "num_ids": 100
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        print(\"{} has occured at position {}\".format(pattern,result.start()))\n    else:\n        print(\"{} has no occurence\".format(pattern))\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(len(text)-len(pattern)+1):\n        match=True\n        for j in range(len(pattern)):\n            if text[i+j]!=pattern[j]:\n                match=False\n                break\n        if match:\n            return (i,i+len(pattern)-1)\n    return None\n",
        "num_ids": 82
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # text = \"AAAABBCCCCDDDDEEEEEE\"\n    # pattern = \"BBCCCCCDDDDEEEE\"\n",
        "num_ids": 30
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = []\n    start = 0\n    end = 0\n    result.append(start)\n    result.append(end)\n    while start < len(text):\n        if pattern not in text[start:]:\n            return None\n        index = text[start:].find(pattern)\n        start = index + start + 1\n        end = index + len(pattern) + start\n        result.append(start)\n        result.append(end)\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    n = len(text)\n    m = len(pattern)\n    i = 0\n    j = 0\n    while (i<n and j<m):\n        if (text[i]==pattern[j]):\n            i += 1\n            j += 1\n        else:\n            i = i-j+1\n            j = 0\n    if (j == m):\n        return i-j,i\n    else:\n        return None\n        \ntext = \"Tere is my name\"\npattern = \"name\"\noccurance_substring(text,pattern)",
        "num_ids": 134
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    substring_list = re.findall(pattern,text)\n    if not substring_list:\n        return None\n    for i in substring_list:\n        start,end = re.finditer(pattern,text).span()\n        return (i,start,end)\n",
        "num_ids": 68
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # pattern = r'bond\\s?[stu]{1}'\n    pattern = r'bond\\s?[stu]{1}'\n    result = re.finditer(pattern, text)\n    for x in result:\n        print(x)\n",
        "num_ids": 67
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.findall(pattern,text)\n    if len(match)==0:\n        return None\n    else:\n        return match\n",
        "num_ids": 37
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return True if all(num%2==1 for num in nums) else False\n",
        "num_ids": 22
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # evens = []\n    # for i in range(0,len(nums)):\n    #     if i%2!= 0:\n    #         evens.append(nums[i])\n    # print(evens)\n    # return True if evens else False\n    if n % 2!= 0:\n        return True\n    return False\n    # return all(elem % 2!= 0 for i,elem in enumerate(nums))\n",
        "num_ids": 112
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_numbers = []\n    for i in range(len(nums)):\n        if i%2!= 0:\n            odd_numbers.append(nums[i])\n    \n    return odd_numbers\n",
        "num_ids": 56
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_position = True\n    for i in range(1,len(nums)):\n        if i % 2 == 0:\n            if nums[i]!= nums[i-1]:\n                odd_position = False\n                break\n    return odd_position\n",
        "num_ids": 66
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if type(nums) is not list:\n        print('Input must be a list')\n    else:\n        for i in range(0,len(nums)):\n            if i%2!= 0:\n                if nums[i]%2 == 0:\n                    print('False')\n                    return False\n        print('True')\n        return True\nprint(odd_position([1,2,3,4,5,6,7,8,9]))\n",
        "num_ids": 112
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    list = nums\n    if len(nums) == 0:\n        return 0\n    for i in range(0, len(nums), 1):\n        if list[i] % 2!= 0:\n            return 1\n    return 0\n",
        "num_ids": 60
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    list1 = []\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            list1.append(True)\n        else:\n            list1.append(False)\n    return list1\n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    list1 = []\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            list1.append(True)\n        else:\n            list1.append(False)\n    return list1\n",
        "num_ids": 67
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    d = {'a':0,'e':0,'i':0,'o':0,'u':0}\n    vowels = ['a','e','i','o','u']\n    for c in test_str:\n        if c in vowels:\n            d[c] += 1\n    return d\n",
        "num_ids": 74
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    test_str = test_str.lower()\n    \n    count = 0\n    if len(test_str) == 0:\n        return 0\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if len(test_str) < 2:\n        return 0\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou':\n            if test_str[i+1] in 'aeiou':\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count=0\n    for char in test_str:\n        if char in 'aeiou':\n            count+=1\n    return count",
        "num_ids": 34
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    #code here\n    #count vowels in the given string.\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] == test_str[i+1]:\n            count += 1\n    return count\n    \nif __name__ == '__main__':\n    \n    test_str = 'abdca'\n    print('Output for {}'.format(test_str))\n    print(count_vowels(test_str))\n    \n    \n    \n    '''\n    Expected Output:\n    \n    Output for abdca\n    2\n    '''",
        "num_ids": 1
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # lets make use of a dictionary\n    d = {}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in d:\n            d[test_str[i]] += 1\n        else:\n            d[test_str[i]] = 1\n",
        "num_ids": 75
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = set('aeiouAEIOU')\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n        \n    return count\n",
        "num_ids": 87
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str == '':\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "num_ids": 11
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    seen = set()\n    for num in arr:\n        if num in seen:\n            result += num\n        else:\n            seen.add(num)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    set_ = set()\n    for i in arr:\n        if i in set_:\n            continue\n        else:\n            sum += i\n            set_.add(i)\n",
        "num_ids": 49
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # list = []\n    # for i in arr:\n    #     if i not in list:\n    #         list.append(i)\n    # return sum(list)\n    # print(list)\n    # # # print(len(list))\n    # print(len(arr))\n    # # # # print(sum(set(arr)))\n    # # # # print(len(set(arr)))\n    # print(arr[0] + arr[1] + arr[2] + arr[3])\n    return sum(set(arr))\n    \n",
        "num_ids": 134
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + find_sum(arr[1:])\n",
        "num_ids": 40
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = list(set(arr))\n    total_sum = 0\n    for x in range(len(arr)):\n        total_sum = total_sum + arr[x]\n    return total_sum\n",
        "num_ids": 51
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    i=0\n    s=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]!=arr[j]):\n                s=s+arr[i]\n    return s\n",
        "num_ids": 69
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in arr:\n        res = res + i\n    print(f\"Sum of Non-Repeated elements is: {res}\")\n",
        "num_ids": 40
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr[arr.index(i) + 1:]:\n            sum += i\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set()\n    res = 0\n    for i in arr:\n        if i in seen:\n            continue\n        res += i\n        seen.add(i)\n    return res\n",
        "num_ids": 47
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    print('\\nFuncion: pack_consecutive_duplicates(list1)')\n    grouped = groupby(list1)\n    return [list(grp) for k, grp in grouped]\n",
        "num_ids": 64
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    i = 0\n    for key, group in groupby(list1):\n        size = len(list(group))\n        if size > 1:\n            list2.append(list(group))\n            i += 1\n    return list2\n",
        "num_ids": 64
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    print(result)\n",
        "num_ids": 36
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp_list = []\n    for i in list1:\n        if len(temp_list) == 0:\n            temp_list.append(i)\n        elif len(temp_list) > 0 and temp_list[-1] == i:\n            continue\n        else:\n            temp_list.append(i)\n    return temp_list\n    \n",
        "num_ids": 87
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_consecutive_duplicates_helper(list1, output):\n        if len(list1) == 0:\n            return\n        for key, group in groupby(list1):\n            list_tuple = list(group)\n            if len(list_tuple) == 1:\n                output.append(list_tuple[0])\n            else:\n                output.append(list_tuple[0])\n                pack_consecutive_duplicates_helper(list(list_tuple[1:]), output)\n        return output\n",
        "num_ids": 135
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    ans = []\n    for key, group in groupby(list1):\n        group = list(group)\n        ans.append(group)\n    return ans\n",
        "num_ids": 40
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return\n    if len(list1) <= 1:\n        return list1\n    iterate = iter(list1)\n    last = next(iterate)\n    result = []\n    result.append(last)\n    i = 1\n    for ele in iterate:\n        if ele == last:\n            continue\n        if i < 2:\n            i += 1\n            last = ele\n        else:\n            result.append(last)\n            last = ele\n            i = 1\n    if i == 2:\n        result.append(last)\n    return result\n",
        "num_ids": 141
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # # Solution 1: Using itertools.groupby()\n    # result = []\n    # for key, group in groupby(list1):\n    #     result.append([*group])\n    # return result\n",
        "num_ids": 53
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    result = []\n    for k, g in groupby(list1):\n        result.append([x for x in g])\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return groupby(list1)\n",
        "num_ids": 11
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #list1 = ['a','b','c','a','b','c']\n    list1 = list(set(list1))\n    list1 = list(map(tuple,list1))\n    dic_sublist = {}\n    for each in list1:\n        if each not in dic_sublist.keys():\n            dic_sublist[each] = 1\n        else:\n            dic_sublist[each] += 1\n    return dic_sublist\n",
        "num_ids": 115
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        count[tuple(item)] = count.get(tuple(item), 0) + 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Convert the list to a tuple.\n    tuple_list = tuple(list1)\n    #Create an empty dictionary.\n    my_dict = {}\n",
        "num_ids": 40
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Tuple-based solution\n    unique_tuple = lambda x : tuple(set(x))\n    unique_list = lambda x : tuple(sorted(x))\n    unique_count = lambda x : {}\n    for i in range(0, len(list1)):\n        unique_count[unique_tuple(list1[i])] = list1.count(list1[i])\n    return unique_count\n",
        "num_ids": 101
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dic = {}\n    for i in range(len(list1)):\n        if (list1[i],) not in list_dic.keys():\n            list_dic[(list1[i],)] = 1\n        else:\n            list_dic[(list1[i],)] += 1\n    return list_dic\n",
        "num_ids": 85
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        if sublist not in result.keys():\n            result[sublist] = 0\n        result[sublist] += 1\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    ans = {}\n    for i in list1:\n        if i not in ans:\n            ans[i] = 1\n        else:\n            ans[i] += 1\n    return ans\n    \n    \n",
        "num_ids": 51
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #list_copy = list1.copy()\n    #\n    #print(list_copy)\n    #\n    #unique_lists = []\n    #\n    #for item in list_copy:\n    #    if item not in unique_lists:\n    #        unique_lists.append(item)\n    \n    #print(unique_lists)\n    #\n    #return len(unique_lists)\n    \n    #List comprehension\n    #list1 = list(list1)\n    #return {i: list1.count(i) for i in list1}\n    \n    \n    \n    #iterate through list and count the occurrences of each item in the list\n    #O(n)\n    \n    #dict_list = {}\n    #\n    #for item in list1:\n    #    if item not in dict_list:\n    #        dict_list[item] = 1\n    #    else:\n    #        dict_list[item] += 1\n    #\n    #print(dict_list)\n    \n    #use set to eliminate duplicate items\n    #O(n)\n    \n    #set_list = set(list1)\n    #return len(set_list)\n    \n    \n    #define a set of unique values\n    \n    #set_unique = set()\n    #\n    #for item in list1:\n    #    set_unique.add(item)\n    #\n    #print(set_unique)\n    \n    #dict comprehension\n    \n    #dict_set = {item: 0 for item in list1}\n    #\n    #print(dict_set)\n    \n    #return a dictionary with unique values as keys and their respective frequencies as values\n    #O(n)\n    \n    #print(len(set(list1)))\n    \n    #return a dictionary with unique values as keys and their respective frequencies as values\n    #O(n)\n    \n    #return a dictionary with unique values as keys and their respective frequencies as values\n    #O(n)\n    \n    #use counter\n    #from collections import Counter\n    #\n    #count_list = Counter(list1)\n    #\n    #return count_list\n    \n    \n    #new_dict = {}\n    #\n    #for item in list1:\n    #    if item not in new_dict:\n    #        new_dict[item] = 1\n    #    else:\n    #        new_dict[item] += 1\n    #\n    #print(new_dict)\n    \n    #using dict comprehension\n    \n    #count_list = {item: 0 for item in list1}\n    #\n    #print(count_list)\n    \n    #return a dictionary with unique values as keys and their respective frequencies as values\n    #O(n)\n    \n    #unique_item = set(list1)\n    #\n    #print(len(unique_item))\n    \n    #dict comprehension\n    \n    #count_list = {item: 0 for item in list1}\n    #\n    #print(count_list)\n    \n    #return a dictionary with unique values as keys and their respective frequencies as values\n    #O(n)\n    \n    #define a set of unique values\n    #O(n)\n    \n    #set_unique = set()\n    #\n    #for item in list1:\n    #    set_unique.add(item)\n    #\n    #print(set_unique)\n    \n    #dict comprehension\n    \n    #count_list = {item: 0 for item in list1}\n    #\n    #print(count_list)\n    \n    #return a dictionary with unique values as keys and their respective frequencies as values\n    #O(n)\n    \n    #print(len(set(list1)))\n    \n    #define a set of unique values\n    #O(n)\n    \n    #set_unique = set()\n    #\n    #for item in list1:\n    #    set_unique.add(item)\n    #\n    #print(set_unique)\n    \n    #dict comprehension\n    \n    #count_list = {item: 0 for item in list1}\n    #\n    #print(count_list)\n    \n    #return a dictionary with unique values as keys and their respective frequencies as values\n    #O(n)\n    \n    #print(len(set(list1)))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1987
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for index in range(len(list1)):\n        if len(list1[index]) in list_dict:\n            list_dict[len(list1[index])] += 1\n        else:\n            list_dict[len(list1[index])] = 1\n    return list_dict\nprint(unique_sublists([[1,2,3,4,5],[1,2,3,5],[1,2],[1,2]]))\n",
        "num_ids": 115
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in list1:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\n",
        "num_ids": 49
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list,4)\n",
        "num_ids": 13
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    l = list(combinations(test_list,3))\n    return l\n",
        "num_ids": 21
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    # combinations_list.append(test_list)\n    for i in range(1,len(test_list)+1):\n        temp_list = combinations(test_list,i)\n        for val in temp_list:\n            combinations_list.append(val)\n    # print(combinations_list)\n    return combinations_list\n",
        "num_ids": 90
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list) + 1):\n        for subset in combinations(test_list, i):\n            yield subset\n",
        "num_ids": 38
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def combinations_sum_tuples(l,n):\n        for i in range(0, len(l)):\n            for j in range(i+1, len(l)):\n                for k in range(j+1, len(l)):\n                    if (l[i] + l[j] + l[k]) == n:\n                        comb = (l[i], l[j], l[k])\n                        print(comb)\n        return 0\n    if len(test_list)==0:\n        print(\"No tuples\")\n    else:\n        combinations_sum_tuples(test_list,13)\n    \ntest_list = [(1,2,3),(3,4,5),(6,7,8)]\nfind_combinations(test_list)\n",
        "num_ids": 188
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    import itertools\n    all_combo_tuples = itertools.combinations(test_list,2)\n",
        "num_ids": 31
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    combs = list(combinations(test_list,2))\n    print(combs)\n",
        "num_ids": 37
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1,len(test_list)):\n        result += list(combinations(test_list,i))\n",
        "num_ids": 38
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Creating the list with empty tuples\n    tuple_list = list()\n    for i in range(1,len(test_list)+1):\n        tuple_list.append(tuple(test_list[:i]))\n",
        "num_ids": 58
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for tup in combinations(test_list, 2):\n        combinations_list.append(tup)\n",
        "num_ids": 36
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += 1\n        i += 1\n    if total_divisors % 2 == 0 :\n        print(\"The number of divisors is even\")\n    else :\n        print(\"The number of divisors is odd\")\ncount_divisors(100)\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += 1\n        i += 1\n    if total_divisors % 2 == 0 :\n        print(\"The number of divisors is even\")\n    else :\n        print(\"The number of divisors is odd\")\ncount_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = 0\n    while i <= n :\n        if n % i == 0:\n            total_divisors += i\n        i += 1\n    print(total_divisors)\nsum_of_divisors(100)\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    total_divisors = ",
        "num_ids": 15
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            count_divisors += 1\n    return count_divisors\n",
        "num_ids": 49
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i <= math.sqrt(n):\n        if n%i == 0:\n            count += 2\n        i += 1\n    if count%2 == 0:\n        return True\n    else:\n        return False\nprint(count_divisors(20)) \n",
        "num_ids": 76
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n_divisors = 0\n    for i in range(1,n):\n        if n % i == 0:\n            n_divisors += 1\n    return n_divisors\n",
        "num_ids": 48
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    return n % 2 == 0\n",
        "num_ids": 12
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) : \n        if n % i == 0 :\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for x in range(1, int(math.sqrt(n))+1) : \n        if n%x == 0 : \n            divisors +=2\n            if x == int(math.sqrt(n)) : \n                divisors -= 1\n    if divisors%2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 97
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, int(n/2) + 1) :\n        if n % i == 0 :\n            divisors_count += 2\n    return divisors_count\n",
        "num_ids": 56
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count = count + 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    ans = 0\n    for i in range(n):\n        if i%2==1:\n            ans += arr[i]\n    return ans\n",
        "num_ids": 56
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #Initialize sum and length\n    odd_sum = 0\n    length = len(arr)\n",
        "num_ids": 25
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr_length = len(arr)\n    total = 0\n    for i in range(arr_length):\n        for j in range(i, arr_length):\n            sub_array = arr[i:j + 1]\n            if len(sub_array) % 2 == 1:\n                total += sum(sub_array)\n",
        "num_ids": 79
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    odd_sum = 0\n    for i in range(length):\n        for j in range(i, length):\n            if (j + 1 - i) % 2!= 0:\n                odd_sum += sum(arr[i:j+1])\n    return odd_sum\n",
        "num_ids": 75
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    from collections import deque\n    my_arr = arr[:]\n    odd_sum = 0\n    n = len(arr)\n    dq = deque()\n    dq.append(0)\n    for i in range(1, n+1):\n        dq.append(i)\n        while len(dq) >= 3 and dq[0] + 1!= dq[1]:\n            dq.popleft()\n        while len(dq) >= 2 and dq[0] + 1!= dq[1] and dq[1] + 1!= dq[2]:\n            dq.popleft()\n        while len(dq) >= 1 and dq[0] + 1!= dq[1]:\n            dq.popleft()\n        odd_sum += dq[0]\n    return odd_sum\n",
        "num_ids": 197
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum = sum + arr[i]\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr_len = len(arr)\n    arr = [0] + arr\n    sum = 0\n    for i in range(arr_len):\n        sum += arr[i]\n        # print(sum)\n        if i % 2!= 0:\n            # print(i)\n            continue\n        sum -= arr[i]\n    print(sum)\n",
        "num_ids": 86
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if(i%2!=0):\n            odd_sum += arr[i]\n    return odd_sum\n    \ndef word_counter(str):\n    '''\n    Write a python function to count the occurrences of a word in a string. https://www.geeksforgeeks.org/count-the-occurrences-of-a-word-in-a-string/\n    '''\n    return str.count(\"the\")\n    \ndef palindrome_checker(str):\n    '''\n    Write a python function to check whether a string is a palindrome. https://www.geeksforgeeks.org/check-whether-a-string-is-palindrome/\n    '''\n    return str == str[::-1]\n    \ndef check_number(str):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.geeksforgeeks.org/python-program-to-check-whether-a-number-is-prime-or-not/\n    '''\n    n = int(str)\n    if (n <= 1):\n        return False\n    for i in range(2, n//2 + 1):\n        if (n % i == 0):\n            return False\n    return True\n    \ndef check_password(str):\n    '''\n    Write a python function to check whether a password is valid or not. https://www.geeksforgeeks.org/validate-password-in-python/\n    '''\n    if(len(str)<8):\n        return False\n    elif(str.isdigit()!=True):\n        return False\n    elif(str.isalpha()!=True):\n        return False\n    else:\n        return True\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.geeksforgeeks.org/python-check-if-a-string-is-palindrome/\n    '''\n    return str == str[::-1]\n    \ndef check_vowels(str):\n    '''\n    Write a python function to check whether a string contains vowels or not. https://www.geeksforgeeks.org/python-check-if-a-string-contains-vowels/\n    '''\n    vowels = \"aeiou\"\n    for char in str:\n        if char in vowels:\n            return True\n    return False\n    \ndef check_odd_length(str):\n    '''\n    Write a python function to check whether a string has an odd length or not. https://www.geeksforgeeks.org/check-whether-a-string-has-an-odd-length/\n    '''\n    return len(str)%2!=0\n    \ndef odd_length_substring(str):\n    '''\n    Write a python function to find all the odd length substrings in a string. https://www.geeksforgeeks.org/odd-length-substrings-in-a-string/\n    '''\n    odd_substr = []\n    for i in range(0, len(str)):\n        if i%2!=0:\n            odd_substr.append(str[i])\n    return odd_substr\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not. https://www.geeksforgeeks.org/python-program-to-check-whether-a-number-is-prime-or-not/\n    '''\n    if(n<2):\n        return False\n    elif(n==2):\n        return True\n    else:\n        for i in range(2,n//2+1):\n            if(n%i==0):\n                return False\n        return True\n        \ndef prime_factorization(n):\n    '''\n    Write a python function to find prime factorization of a number. https://www.geeksforgeeks.org/find-prime-factorization/\n    '''\n    prime_factors = []\n    while(n%2==0):\n        prime_factors.append(2)\n        n//=2\n    for i in range(3,n+1,2):\n        while(n%i==0):\n            prime_factors.append(i)\n            n//=i\n    if n>2:\n        prime_factors.append(n)\n    return prime_factors\n    \ndef sort_string(arr,str):\n    '''\n    Write a python function to sort a string in the decreasing order. https://www.geeksforgeeks.org/python-sort-a-string-in-decreasing-order/\n    '''\n    arr.sort(reverse=True)\n    str = \"\".join(arr)\n    return str\n",
        "num_ids": 26
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    odd_sum = 0\n    for i in range(1, n, 2):\n        odd_sum += sum(arr[i-1:i+1])\n    return odd_sum\n",
        "num_ids": 54
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    if len(arr) == 0:\n        return count\n    else:\n        for i in range(len(arr)):\n            if i == 0:\n                count = count + arr[i]\n            elif i % 2!= 0:\n                count = count + arr[i]\n            else:\n                pass\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    if delta == 0:\n        return 0, 0, 0\n    s = delta / max_color\n    # calculate the chromacity\n    c = (max_color - min_color) / delta\n    # calculate the value of h\n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_color == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:\n        h = 60 * (((r - g) / delta) + 4)\n    # convert hsv color to hsv\n    h = h / 360\n    s = c / 255\n    v = s * 255\n    # return the converted hsv color\n    return h, s, v\n",
        "num_ids": 234
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    deltac = maxc - minc\n    if maxc == minc:\n        h = 0\n        s = 0\n        v = maxc\n    elif maxc == r:\n        h = (60 * ((g - b) / deltac) + 360) % 360\n        s = deltac\n        v = maxc\n    elif maxc == g:\n        h = (60 * ((b - r) / deltac) + 120) % 360\n        s = deltac\n        v = maxc\n    elif maxc == b:\n        h = (60 * ((r - g) / deltac) + 240) % 360\n        s = deltac\n        v = maxc\n    if s == 0:\n        h = 0\n        s = 0\n        v = maxc\n    return h, s, v\n",
        "num_ids": 254
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if not (type(r) == int or type(g) == int or type(b) == int):\n        raise ValueError(\"TypeError: rgb_to_hsv(): r, g, b should be ints!\")\n",
        "num_ids": 55
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # (r, g, b) = (r, g, b) / 255\n    min = (min(r, g, b),)\n    max = (max(r, g, b),)\n    delta = max[0] - min[0]\n    if delta == 0:\n        h = 0\n    else:\n        h = ((((g - b) / delta) % 6) * 360) / 255\n        if h < 0:\n            h += 360\n        if h > 360:\n            h -= 360\n    \n    return h, s, v\n",
        "num_ids": 135
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = 60 * ((g - b) / df) + 360\n    elif mx == g:\n        h = 60 * ((b - r) / df) + 120\n    elif mx == b:\n        h = 60 * ((r - g) / df) + 240\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v\n",
        "num_ids": 182
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_color = min(r, g, b)\n    max_color = max(r, g, b)\n    diff = max_color - min_color\n    if min_color == max_color:\n        return 0, 0, 0\n    elif diff == 0:\n        return 0, 0, 100\n    \n    h = 0\n    s = (diff / max_color) * 100\n    v = max_color\n    return h, s, v\n",
        "num_ids": 111
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_ = max(r, g, b)\n    min_ = min(r, g, b)\n    delta = max_ - min_\n    if delta == 0:\n        return 0, 0, 0\n    s = 0 if max_ == 0 else delta / max_\n    \n    if max_ == r:\n        h = (g - b) / delta\n    elif max_ == g:\n        h = 2 + ((b - r) / delta)\n    else:\n        h = 4 + ((r - g) / delta)\n    \n    h = h / 6\n    return h, s, s\n",
        "num_ids": 147
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_rgb = min(r, g, b)\n    max_rgb = max(r, g, b)\n    \n    v = max_rgb\n    delta = max_rgb - min_rgb\n    \n    if delta == 0:\n        h = 0\n    elif max_rgb == r:\n        h = (g-b)/delta\n    elif max_rgb == g:\n        h = 2 + (b-r)/delta\n    elif max_rgb == b:\n        h = 4 + (r-g)/delta\n    h = h*60\n    s = 0 if (v == 0) else delta/v\n    \n    if s == 0:\n        h = 0\n    elif v == r:\n        h = 60 * (g-b) / (max_rgb-min_rgb)\n    elif v == g:\n        h = 2*(b-r) / (max_rgb-min_rgb) + 120\n    else:\n        h = 4*(r-g) / (max_rgb-min_rgb) + 240\n    \n    return (h, s, v)\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = h / 60.0\n    i = int(h)\n    f = h - i\n    p = v * (1.0 - s)\n    q = v * (1.0 - s * f)\n    t = v * (1.0 - s * (1.0 - f))\n    \n    if i == 0:\n        R = v\n        G = t\n        B = p\n    elif i == 1:\n        R = q\n        G = v\n        B = p\n    elif i == 2:\n        R = p\n        G = v\n        B = t\n    elif i == 3:\n        R = p\n        G = q\n        B = v\n    \n    R, G, B = R + (i - 3)*p, G + (i - 3)*q, B + (i - 3)*t\n    \n    return (R, G, B)\n    \ndef rgb_to_lab(r, g, b):\n    '''\n    Write a function to convert rgb color to lab color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    min_rgb = min(r, g, b)\n    max_rgb = max(r, g, b)\n    delta = max_rgb - min_rgb\n    \n    if abs(r - g) >= abs(g - b):\n        l_prime = (r + g) / 2.0\n    else:\n        l_prime = (g + b) / 2.0\n        \n    l = l_prime / 2.0\n    \n    if l_prime == 0:\n        a = 0\n    else:\n        a = delta / (1 - pow(l_prime, 2))\n    \n    if l <= 0.5:\n        c = a * (1 - l)\n    else:\n        c = a * (1 - l) + (4.0 - a) * l\n        \n    f = 2.0 * l - 1.0\n    \n    return (l, c, f)\n    \ndef lab_to_rgb(l, c, f):\n    '''\n    Write a function to convert lab color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    l = l / 2.0\n    c = c / 2.0\n    f = f / 2.0\n    \n    if l <= 2.0:\n        if l <= 1.0:\n            b = -4.0 * l * math.pow(l, 3) + 1.0\n        else:\n            b = -4.0 * math.pow(l, 3) - 8.0 * math.pow(l, 2) + 4.0 * math.pow(l, 2) - 14.0 * l + 3.0\n    else:\n        if l <= 3.0:\n            b = 4.0 * math.pow(l, 3) - 8.0 * math.pow(l, 2) + 1.0\n        else:\n            b = 4.0 * math.pow(l, 3) - 12.0 * math.pow(l, 2) + 8.0 * math.pow(l, 2) - 4.0 * math.pow(l, 2) + 3.0\n    \n    if f <= -4.0:\n        if f <= -7.0:\n            r = 2.0 * f + c\n        else:\n            r = 7.0 * c - 8.0 * f\n    elif f >= 4.0:\n        if f >= 12.0:\n            r = 2.0 * f - c\n        else:\n            r = -8.0 * f + c\n    else:\n        if f >= -4.0:\n            r = f - c\n        else:\n            r = c + 4.0 * f\n    \n    r = r / 3.0\n    g = r - 1.0\n    b = r + 1.0\n    \n    r, g, b = r * 255.0, g * 255.0, b * 255.0\n    \n    if r < 0:\n        r = 0\n    if g < 0:\n        g = 0\n    if b < 0:\n        b = 0\n    \n    return (r, g, b)\n    \ndef rgb_to_ypbpr(r, g, b):\n    '''\n    Write a function to convert rgb color to ypbpr color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    y = 0.299*r + 0.587*g + 0.114*b\n    b = 0.299*g + 0.587*b + 0.114*r\n    \n    if b > y:\n        max_ = b\n    else:\n        max_ = y\n    \n    if max_ == 0:\n        if y >= 1:\n            max_ = 1\n    \n    if max_ == 1:\n        max_ = 255\n        \n    if max_ == 0:\n        r, g, b = 0, 0, 0\n    \n    else:\n        r = 255.0 * (y/max_)\n        g = 255.0 * (y/max_)\n        b = 255.0 * (y/max_)\n    \n    return (r, g, b)\n    \ndef ypbpr_to_rgb(r, g, b):\n    '''\n    Write a function to convert ypbpr color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    y = r * 0.299 + g * 0.587 + b * 0.114\n    \n    if y > 255:\n        y = 255\n    \n    if y <= 128:\n        b = y\n    else:\n        b = 255 - (y - 128)\n    \n    if b > 128:\n        b = 128\n    \n    if b <= 64:\n        g = b\n    else:\n        g = 255 - (b - 64)\n    \n    if g > 128:\n        g = 128\n    \n    if g <= 64:\n        r = g\n    else:\n        r = 255 - (g - 64)\n    \n    r, g, b = r * 255.0, g * 255.0, b * 255.0\n    \n    return (r, g, b)\n    \ndef rgb_to_ycbcr(r, g, b):\n    '''\n    Write a function to convert rgb color to ycbcr color",
        "num_ids": 15
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    sr, sg, sb = 0, 0, 0\n    if r == 0:\n        sr = 0\n    else:\n        sr = float(r) / 255\n    if g == 0:\n        sg = 0\n    else:\n        sg = float(g) / 255\n    if b == 0:\n        sb = 0\n    else:\n        sb = float(b) / 255\n    hr = (sr + sg + sb) / 3\n    sr = (sr - hr) * 6\n    if (sr < 0):\n        sr = sr + 6\n    if (sr > 6):\n        sr = sr - 6\n    v = float(max(min((sb - sg), 6), 0))\n    d = (v * 6) - (sr * 2)\n    h = float(d + (sr))\n    return (h, sr, v)\n",
        "num_ids": 206
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #print('here')\n    #print(r,g,b)\n    #print(type(r))\n    if (r>=0 and g>=0 and b>=0):\n        #print('all')\n        if (r>g and r>b):\n            maximum = r\n            if (g>b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g>r and g>b):\n            maximum = g\n            if (r>b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r>g):\n                minimum = g\n            else:\n                minimum = r\n    elif (r>=0 and g<0 and b<0):\n        #print('all')\n        if (r>g and r>b):\n            maximum = r\n            if (g<b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g>r and g>b):\n            maximum = g\n            if (r<b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r>g):\n                minimum = g\n            else:\n                minimum = r\n    elif (r<0 and g<0 and b<0):\n        #print('all')\n        if (r<g and r<b):\n            maximum = r\n            if (g<b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g<r and g<b):\n            maximum = g\n            if (r<b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r<g):\n                minimum = g\n            else:\n                minimum = r\n    elif (r<0 and g>=0 and b>=0):\n        #print('all')\n        if (r<g and r<b):\n            maximum = r\n            if (g>b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g<r and g<b):\n            maximum = g\n            if (r>b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r<g):\n                minimum = g\n            else:\n                minimum = r\n    elif (r>=0 and g<0 and b>=0):\n        #print('all')\n        if (r>g and r>b):\n            maximum = r\n            if (g<b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g>r and g>b):\n            maximum = g\n            if (r<b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r>g):\n                minimum = g\n            else:\n                minimum = r\n    elif (r>=0 and g<0 and b<0):\n        #print('all')\n        if (r>g and r>b):\n            maximum = r\n            if (g<b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g>r and g>b):\n            maximum = g\n            if (r<b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r>g):\n                minimum = g\n            else:\n                minimum = r\n    elif (r<0 and g<0 and b<0):\n        #print('all')\n        if (r<g and r<b):\n            maximum = r\n            if (g<b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g<r and g<b):\n            maximum = g\n            if (r<b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r<g):\n                minimum = g\n            else:\n                minimum = r\n    elif (r<0 and g>=0 and b<0):\n        #print('all')\n        if (r<g and r<b):\n            maximum = r\n            if (g>b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g<r and g<b):\n            maximum = g\n            if (r>b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r<g):\n                minimum = g\n            else:\n                minimum = r\n    elif (r>=0 and g<0 and b<0):\n        #print('all')\n        if (r>g and r>b):\n            maximum = r\n            if (g<b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g>r and g>b):\n            maximum = g\n            if (r<b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r>g):\n                minimum = g\n            else:\n                minimum = r\n    else:\n        #print('all')\n        if (r>g and r>b):\n            maximum = r\n            if (g<b):\n                minimum = b\n            else:\n                minimum = g\n        elif (g>r and g>b):\n            maximum = g\n            if (r<b):\n                minimum = b\n            else:\n                minimum = r\n        else:\n            maximum = b\n            if (r>g):\n                minimum = g\n            else:\n                minimum = r\n    #print(maximum, minimum)\n    #print(type(maximum))\n    if (maximum == 0):\n        maximum = 0.0000000001\n    #print(maximum)\n    if (maximum == 0.0000000001):\n        maximum = 0.000000001\n    if (minimum == 0):\n        minimum = 0.0000000001\n    if (minimum == 0.0000000001):\n        minimum = 0.000000001\n    #print(maximum, minimum)\n    #print(type(maximum), type(minimum))\n    #print(type(maximum))\n    #print(type(minimum))\n    if (maximum == 0):\n        maximum = 0.0000000001\n    if (minimum == 0):\n        minimum = 0.0000000001\n    return minimum, maximum\n",
        "num_ids": 1539
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    even_numbers = []\n    odd_numbers = []\n    product_even_odd = []\n    \n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even_numbers.append(list1[i])\n        else:\n            odd_numbers.append(list1[i])\n",
        "num_ids": 89
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    \n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n",
        "num_ids": 66
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    prod_even = 1\n    prod_odd = 1\n    for i in even:\n        prod_even *= i\n    for i in odd:\n        prod_odd *= i\n    prod = prod_even * prod_odd\n    print(\"The product of first even and odd number of the list is:\",prod)\n",
        "num_ids": 141
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #make dictionary to hold the result\n    prod_even_odd = {}\n    #make counter to hold the result\n    counter = 1\n    #loop through each number in the list\n    for i in range(len(list1)):\n        #check to see if even number exists\n        if list1[i] % 2 == 0:\n            #make sure even number exists\n            if prod_even_odd.get(list1[i]) == None:\n                prod_even_odd[list1[i]] = 1\n            else:\n                prod_even_odd[list1[i]] += 1\n            #add 1 to the counter\n            counter += 1\n        #check to see if odd number exists\n        elif list1[i] % 2!= 0:\n            #make sure odd number exists\n            if prod_even_odd.get(list1[i]) == None:\n                prod_even_odd[list1[i]] = 1\n            else:\n                prod_even_odd[list1[i]] += 1\n            #add 1 to the counter\n            counter += 1\n    #return the result\n    return prod_even_odd\n",
        "num_ids": 272
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd\n",
        "num_ids": 49
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_nums = []\n    odd_nums = []\n    for num in list1:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    print(\"product of first even and odd number in the list is : \", even_nums[0]*even_nums[1])\n    return even_nums[0]*even_nums[1]\n",
        "num_ids": 111
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    first_even = []\n    first_odd = []\n    for i in list1:\n        if i%2 == 0:\n            first_even.append(i)\n        else:\n            first_odd.append(i)\n    return prod(first_even), prod(first_odd)\n",
        "num_ids": 72
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even, odd = 1, 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even, odd\n",
        "num_ids": 50
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # new_list = []\n    # for i in range(len(list1)):\n    #     if i%2 == 0:\n    #         new_list.append(list1[i]*list1[i])\n    #     else:\n    #         new_list.append(list1[i]*list1[i])\n    # print(new_list)\n",
        "num_ids": 92
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return even,odd\n",
        "num_ids": 66
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "num_ids": 11
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if isinstance(test_str, tuple):\n        return test_str\n    elif isinstance(test_str, str):\n        if test_str.count(',') == 1:\n            temp_str = test_str.split(',')\n            return tuple(int(item) for item in temp_str)\n        elif test_str.count(',') == 2:\n            temp_str = test_str.split(',')\n            return tuple(int(item) for item in temp_str)\n        else:\n            print('Please enter only one comma in tuple string')\n    else:\n        print('Please enter tuple or string')\n",
        "num_ids": 153
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(',')\n    new_tuple = tuple(int(x) for x in test_list)\n    return new_tuple\n",
        "num_ids": 43
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(\",\")))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    a = tuple(test_str.split(','))\n    return int(a[0]), int(a[1])\n",
        "num_ids": 31
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    return tuple(int(char) for char in test_str)\n",
        "num_ids": 50
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str])\n",
        "num_ids": 18
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n",
        "num_ids": 67
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    size = len(a)\n    left, right = 0, size-1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x == a[mid]:\n            return mid\n        elif x > a[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n",
        "num_ids": 86
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # insert the new item at the end\n    a.append(x)\n    # sort the array in increasing order\n    a.sort()\n    # if value is smaller than the element before then that is the right insertion point\n    return a.index(x)\n",
        "num_ids": 62
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i] == x:\n        return i\n    else:\n        return i + 1\n",
        "num_ids": 63
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    # print(\"i={}\".format(i))\n    if i == 0:\n        return a.index(x)\n    elif i == len(a) or a[i-1]!= x:\n        return i\n    else:\n        return i-1\n",
        "num_ids": 82
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    if a[-1] <= x:\n        return len(a)\n    l = 0\n    r = len(a)\n    while l < r:\n        m = (l + r) // 2\n        if a[m] == x:\n            return m\n        elif a[m] > x:\n            r = m\n        else:\n            l = m\n    return r\n",
        "num_ids": 108
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    if x > a[n-1]:\n        return n\n    i = n-1\n    while i > 0:\n        if x <= a[i-1]:\n            return i\n        i -= 1\n    return 0\n",
        "num_ids": 74
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x > a[-1]:\n        return len(a)\n    else:\n        return bisect.bisect_right(a, x)\n",
        "num_ids": 38
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[0]<=x:\n        return 0\n    if a[0]>x:\n        return 1\n    for i in range(1,len(a)):\n        if a[i]>x and a[i-1]<x:\n            return i\na = [1,2,3,4,5,6]\nx = 1\nprint(right_insertion(a, x))\n",
        "num_ids": 100
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n    \ndef find_k_pairs(arr, k):\n    '''\n    Write a function that returns a list of all unique pairs of integers from the array whose sum is equal to k.\n    '''\n    res = []\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] + arr[i+1] == k:\n            res.append((arr[i], arr[i+1]))\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('a+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followed by 3 'b'\n    # text = 'aabbbb'\n    pattern = re.compile('ab+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b+b')\n    if re.match(pattern,text):\n        print(True)\n    else:\n        print(False)\n    # match a followe",
        "num_ids": 2011
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(\"ab\")\n    return pattern.search(text)\n",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #matching = re.match(r\"ab{3}\", text)\n    #if matching!= None:\n    #    print(matching.group(0))\n    return re.match(r\"ab{3}\", text)!= None\n",
        "num_ids": 61
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return text.count(\"ab\") == 3\n",
        "num_ids": 13
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = 'a'\n    b = 'b'\n    return True if re.match(a+b+'+',text) else False\n",
        "num_ids": 36
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # --- Write your code here\n    pattern = r'abab'\n    if re.search(pattern,text):\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Start with matching first single character \n    # and check for match up to 'b' until we run out of text\n    while (text!= None) and (text[0] == 'a'):\n        text = text[1:]\n        if text == None or text[0]!= 'b':\n            return False\n        text = text[1:]\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return bool(re.search('a.+b.+b.+', text))\n",
        "num_ids": 23
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r\"ab\", text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_tuple = []\n    for i in range(0, len(test_list)):\n        new_tuple.append(test_list[i])\n        new_tuple.append(test_str[i])\n    \n    return new_tuple\n",
        "num_ids": 67
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str)\n    new_tuple = tuple(test_list)\n    return new_tuple\n",
        "num_ids": 35
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_str.split(', ')\n    return tuple(test_list)\n",
        "num_ids": 27
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str), tuple(test_list)\n    \ndef tuple_func(tuple1, tuple2):\n    '''\n    Write a function to combine the given tuples into one new tuple.\n    '''\n    return tuple1 + tuple2\n    \ndef negative_tuple(tuple1):\n    '''\n    Write a function to find the negative of the given tuple.\n    '''\n    return tuple1[::-1]\n    \ndef tuple_zip(tuple1, tuple2):\n    '''\n    Write a function to zip the given tuples and print the zipped result.\n    '''\n    print(tuple(zip(tuple1, tuple2)))\n",
        "num_ids": 18
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print(tuple(test_list + test_str))\n",
        "num_ids": 17
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple\n",
        "num_ids": 25
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # your code here\n    return tuple(test_list) + tuple(test_str)\n",
        "num_ids": 24
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str), tuple(test_list)\n",
        "num_ids": 17
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "num_ids": 16
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # Your code here\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    #print(nums[::2])\n    return True if len(nums[::2]) == len(set(nums[::2])) else False\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # print(nums)\n    # return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))\n    # print(nums[::2])\n    # print(nums[1::2])\n    return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))\n    # print(nums[::2])\n    # print(nums[1::2])\n    # return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))\n    # print(nums[::2])\n    # print(nums[1::2])\n    # return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    # print(nums[::2])\n    # print(nums[1::2])\n    ",
        "num_ids": 2012
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    l = len(nums)\n    res = False\n    for i in range(l):\n        if nums[i] % 2 == 0:\n            if i % 2 == 0:\n                res = True\n    if res == True:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 75
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums = nums\n    even_index = []\n    for i in range(len(nums)):\n        if i%2 == 0:\n            even_index.append(nums[i])\n    if len(even_index) == len(nums):\n        return True\n    else:\n        return False\n        \n",
        "num_ids": 80
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not test_tup:\n        return\n",
        "num_ids": 14
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not test_tup:\n        return test_tup\n    \n    elif type(test_tup) == tuple:\n        for i in test_tup:\n            if i:\n                return remove_nested(i)\n        return tuple(test_tup)\n    return test_tup\n",
        "num_ids": 76
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for tup in test_tup:\n        print(tup)\n    print(type(test_tup))\n    print(\"-------------------------------\")\n    new_tup = []\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            new_tup.append(tup)\n    return tuple(new_tup)\n",
        "num_ids": 90
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0] if len(test_tup)==1 else remove_nested(test_tup[1:])\n    ",
        "num_ids": 37
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return remove_nested_tuple(tuple(test_tup), 0)\n",
        "num_ids": 23
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0] if len(test_tup) == 1 else remove_nested(test_tup[1:])\n",
        "num_ids": 36
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0], test_tup[1]\n",
        "num_ids": 19
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n    if len(test_tup) == 0:\n        return ()\n    elif len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0], remove_nested(test_tup[1:])\n",
        "num_ids": 76
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Your Code Here\n    res = ()\n    for i in range(len(test_tup)):\n        res = res + (test_tup[i],)\n    return res\n    \ndef remove_nested_4(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Your Code Here\n    res = test_tup\n    for i in range(len(test_tup)):\n        res = res[:i] + res[i+1:]\n    return res\n    ",
        "num_ids": 52
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            for j in range(len(test_tup[i])):\n                if type(test_tup[i][j]) == tuple:\n                    for k in range(len(test_tup[i][j])):\n                        if type(test_tup[i][j][k]) == tuple:\n                            for l in range(len(test_tup[i][j][k])):\n                                if type(test_tup[i][j][k][l]) == tuple:\n                                    for m in range(len(test_tup[i][j][k][l])):\n                                        new_list.append(test_tup[i][j][k][l][m])\n                        else:\n                            new_list.append(test_tup[i][j][k])\n                else:\n                    new_list.append(test_tup[i][j])\n        else:\n            new_list.append(test_tup[i])\n    return tuple(new_list)\n",
        "num_ids": 273
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    for elem in input_list:\n        if type(elem) == list:\n            list_count += 1\n    print(list_count)\n    return list_count\n    \ncount_list([1,2,3,[4,5],6,7,8]) # Should be 1\ncount_list([1,2,3,[4,5],6,7,8,9]) # Should be 2\ncount_list([1,2,3,4,5,[6,7,8,9],10]) # Should be 3\n",
        "num_ids": 134
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n        return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_of_lists=0\n    for i in input_list:\n        num_of_lists+=1\n    return num_of_lists\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == type([]):\n            counter += 1\n    return counter \n",
        "num_ids": 47
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if type(i)==list:\n            count+=1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i,list):\n            count = count + 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    h = len(arr) - 1\n    while l <= h:\n        mid = l + (h - l) // 2\n        if x < arr[mid]:\n            h = mid - 1\n        elif x > arr[mid]:\n            l = mid + 1\n        else:\n            return mid\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if x not in arr:\n    #     return -1\n    # else:\n    #     for i in range(len(arr)-1,-1,-1):\n    #         if arr[i] == x:\n    #             return i\n    i = 0\n    j = len(arr)-1\n    while(i<=j):\n        mid = (i+j)//2\n        if arr[mid] == x:\n            if mid == 0:\n                return 0\n            else:\n                return mid\n        elif arr[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return -1\n",
        "num_ids": 157
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return -1\n    if arr[n-1]==x:\n        return n-1\n    if arr[n-1]>x:\n        return -1\n    low=0\n    high=n-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]>x:\n            high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            return mid\n    return -1\n",
        "num_ids": 135
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    if arr[0] <= x:\n        return 0\n    if x >= arr[-1]:\n        return len(arr)\n    else:\n        l = 0\n        r = len(arr)\n        while l < r:\n            mid = (l + r)//2\n            if arr[mid] > x:\n                r = mid\n            else:\n                l = mid+1\n        return l\n",
        "num_ids": 146
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start=0\n    end=len(arr)-1\n    while start<end:\n        mid=start+(end-start)//2\n        if arr[mid]<x:\n            start=mid+1\n        else:\n            end=mid\n    if arr[start]==x:\n        return start\n    else:\n        return -1\n",
        "num_ids": 84
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #arr = [10,12,15,16,20,25,35]\n    #x = 20\n    #print(find(arr,x,len(arr)-1))\n    \n    #code to find the index of the last position of the element in a sorted array.\n    #logic is to find the index of the element just after the last element of the array.\n    #if the element at that index is less than the element to be searched, then increment by 1.\n    #else if the element at that index is greater than the element to be searched, then decrement by 1.\n    #if we reach the end of the array then return -1.\n    #check if the value at the last index is less than the value to be searched.\n    #if it is less than the value to be searched then return the index of the last element.\n    #if not then decrement by one and check if the value at the last index is less than the value to be searched.\n    #if it is less than the value to be searched then return the index of the last element.\n    #else if the element at the last index is greater than the value to be searched then return the index of the last element.\n    #else return -1.\n    \n    #code to find the last position of the element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the end to the start of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than next element then increase the pointer by one.\n    #else if current element is greater than next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the end to the start of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to find the last position of an element in a sorted array.\n    #it will return the index of the last element.\n    #looping in the array\n    #traversing from the start to the end of the array\n    #traversing from 0 to len(arr)-1\n    #if current element is less than the next element then increase the pointer by one.\n    #else if current element is greater than the next element then decrease the pointer by one.\n    #if the pointer goes out of the array then return -1.\n    #else return the pointer's position\n    \n    #code to fin",
        "num_ids": 2015
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    left,right = 0,length-1\n    mid = length // 2\n    while left < right:\n        mid = length // 2\n        if x > arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    left,right = 0,length - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n    left,right = 0,len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if x > arr[mid]:\n            left = mid + 1\n        elif x < arr[mid]:\n            right = mid - 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    left,right = 0,length - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    left,right = 0,length - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    left,right = 0,length - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    left,right = 0,length - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    left,right = 0,length - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\ndef last",
        "num_ids": 112
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    \n    while low<=high:\n        mid = (low+high)//2\n        \n        if arr[mid]==x:\n            if mid==0 or arr[mid-1]!=arr[mid]:\n                return mid\n            else:\n                high=mid-1\n        elif arr[mid]>x:\n            high=mid-1\n        else:\n            low=mid+1\n    return -1\n",
        "num_ids": 117
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        if x<arr[0]:\n            return -1\n        if x>arr[0]:\n            return 0\n        else:\n            return 0\n    if arr[n-1]>x:\n        return n-1\n    if arr[0]<x:\n        return 0\n    i = 0\n    while arr[i]<=x:\n        if arr[i]==x:\n            return i\n        i += 1\n    return i\n",
        "num_ids": 135
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    low=0\n    high=n-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==x:\n            if mid==0 or arr[mid-1]!=x:\n                return mid\n            else:\n                high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return -1\n",
        "num_ids": 116
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a\\w*b')\n    return pattern.search(text)\n",
        "num_ids": 28
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return text.replace(\"b\", \"a\")\n",
        "num_ids": 14
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print('Start a, End b:')\n    print(re.findall('a.+?b', text))\n    \n    \ndef text_start_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End:')\n    print(re.findall('a.+?a', text))\n    \n    \ndef text_start_end_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End one:')\n    print(re.findall('a[a-z]+a', text))\n    \n    \ndef text_start_end_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End two:')\n    print(re.findall('a[a-z]*a', text))\n    \n    \ndef text_start_end_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End three:')\n    print(re.findall('a{1}a', text))\n    \n    \ndef text_start_end_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End four:')\n    print(re.findall('a{1,}a', text))\n    \n    \ndef text_start_end_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End five:')\n    print(re.findall('a{1,}a', text))\n    \n    \ndef text_start_end_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End six:')\n    print(re.findall('a*a', text))\n    \n    \ndef text_start_end_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End seven:')\n    print(re.findall('a{0,}a', text))\n    \n    \ndef text_start_end_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End eight:')\n    print(re.findall('a{0,}a', text))\n    \n    \ndef text_start_end_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End nine:')\n    print(re.findall('a{1}a', text))\n    \n    \ndef text_start_end_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End ten:')\n    print(re.findall('a{2}a', text))\n    \n    \ndef text_start_end_eleven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End eleven:')\n    print(re.findall('a{3}a', text))\n    \n    \ndef text_start_end_twelve(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End twelve:')\n    print(re.findall('a{4}a', text))\n    \n    \ndef text_start_end_thirteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End thirteen:')\n    print(re.findall('a{5}a', text))\n    \n    \ndef text_start_end_fourteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End fourteen:')\n    print(re.findall('a{6}a', text))\n    \n    \ndef text_start_end_fifteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End fifteen:')\n    print(re.findall('a{7}a', text))\n    \n    \ndef text_start_end_sixteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End sixteen:')\n    print(re.findall('a{8}a', text))\n    \n    \ndef text_start_end_seventeen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End seventeen:')\n    print(re.findall('a{9}a', text))\n    \n    \ndef text_start_end_eighteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End eighteen:')\n    print(re.findall('a{10}a', text))\n    \n    \ndef text_start_end_nineteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End nineteen:')\n    print(re.findall('a{11}a', text))\n    \n    \ndef text_start_end_twenty(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End twenty:')\n    print(re.findall('a{12}a', text))\n    \n    \ndef text_start_end_twentyone(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End twentyone:')\n    print(re.findall('a{13}a', text))\n    \n    \ndef text_start_end_twentytwo(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End twentytwo:')\n    print(re.findall('a{14}a', text))\n    \n    \ndef text_start_end_twentythree(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End twentythree:')\n    print(re.findall('a{15}a', text))\n    \n    \ndef text_start_end_twentyfour(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End twentyfour:')\n    print(re.findall('a{16}a', text))\n    \n    \ndef text_start_end_twentyfive(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    print('Start, End twentyfive:')\n    print(re.findall('a",
        "num_ids": 22
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('a[^b]*b', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a*b')\n    # Returned a match object\n    return pattern.search(text)\n",
        "num_ids": 34
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[\\w]+b')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*?b$')\n    result = pattern.search(text)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #using regex\n    pattern = r\"a.*b\"\n    #returns true if match found\n    return re.match(pattern, text)\n",
        "num_ids": 37
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"(a.*b)\")\n    match = re.match(pattern, text)\n    if match:\n        print(match.group(1))\n        return match.group(1)\n    else:\n        return None\n",
        "num_ids": 62
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Ex: \"abaaaaa\" --> match\n    pattern = re.compile(r\"^a.*?b$\")\n    \n    result = pattern.search(text)\n    print(result)\n",
        "num_ids": 50
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum\n",
        "num_ids": 33
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    print(\"Sum of values in dictionary is: \", sum(dict.values()))\n    return 0\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key,value in dict.items():\n        sum+=value\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    #start writing your code here\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n    \n    #return sum\n",
        "num_ids": 41
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n    \nprint(return_sum({\"a\":1,\"b\":2,\"c\":3}))\n",
        "num_ids": 34
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_odd(n - 2)\n",
        "num_ids": 42
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return (n*(n+1))//2\n        \nprint(sum_odd(1)) # 0\nprint(sum_odd(2)) # 3\nprint(sum_odd(3)) # 6\nprint(sum_odd(4)) # 10\nprint(sum_odd(5)) # 15\n",
        "num_ids": 88
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum = sum + i\n    return sum\n    ",
        "num_ids": 37
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        raise ValueError('Input for sum_odd() function must be a natural number')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return n + sum_odd(n-2)\n",
        "num_ids": 81
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    if n > 0 and n < 11:\n        s = 0\n        while n > 0:\n            n = n - 2\n            if n < 0:\n                break\n            s = s + n\n        return s\n    else:\n        print(\"Please enter the natural numbers below 10.\")\n        return None\n",
        "num_ids": 78
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s=0\n    for i in range(n+1):\n        if i%2==1:\n            s=s+i\n    return s\nprint(sum_odd(100))\n",
        "num_ids": 47
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n==0:\n        return 1\n    sum=0\n    for i in range(n+1):\n        if i%2!=0:\n            sum=sum+i\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2==1:\n            s += i\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(n,n+3):\n        if i%2==0:\n            continue\n        else:\n            sum+=i\n    print(\"sum of odd natural numbers:\",sum)\nsum_odd(100)\n",
        "num_ids": 61
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2!= 0:\n            sum += i\n    return sum",
        "num_ids": 36
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_val = 0\n    for i in arr:\n        sum_val += i\n    return sum_val\n",
        "num_ids": 29
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    _sum = 0\n    for i in range(len(arr)):\n        _sum += arr[i]\n    return _sum\n",
        "num_ids": 34
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s=s+i\n    return s\n    \ndef _min(arr):  \n    '''\n    Write a python function to find the minimum of an array.\n    '''\n    s=_sum(arr)\n    if s==0:\n        return -1\n    return min(arr)\n    \ndef _max(arr):  \n    '''\n    Write a python function to find the maximum of an array.\n    '''\n    s=_sum(arr)\n    if s==0:\n        return -1\n    return max(arr)\n    \ndef _mean(arr):  \n    '''\n    Write a python function to find the mean of an array.\n    '''\n    s=_sum(arr)\n    n=len(arr)\n    if s==0:\n        return -1\n    return s/n\n    \ndef _median(arr):  \n    '''\n    Write a python function to find the median of an array.\n    '''\n    if len(arr)%2==1:\n        return _min(arr)\n    else:\n        return (_min(arr)+_max(arr))/2\n        \ndef _mode(arr):  \n    '''\n    Write a python function to find the mode of an array.\n    '''\n    mod=_mode(arr)\n    arr.remove(mod)\n    return mod\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    # if the number is 32 bit then the rotation is 2**32 - 1 \n    if d > (2**32 - 1):\n        raise OverflowError(\"no such rotation possible\")\n        \n    return (n << d) | (n >> (32 - d))\n    \n    \n",
        "num_ids": 70
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #return (n<<d)|(n>>(32-d))\n    return (n<<d)|((~n)&((1<<32)-1))&((1<<32)-1)\n",
        "num_ids": 47
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d\n",
        "num_ids": 8
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n & (2**32 -1)\n    return n\n",
        "num_ids": 26
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if (n<0):\n        print(\"n must be a non-negative integer\")\n        return\n    if (d<0):\n        print(\"d must be a non-negative integer\")\n        return\n    if (d==0):\n        return n\n    for i in range(d):\n        print(\"swap\",n)\n        n = n << 1 | n >> 31\n    return n\n",
        "num_ids": 95
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=int(n)\n    d=int(d)\n    for i in range(d):\n        n=n<<1\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #arr = number//10\n    #arr = number%10\n    #print(d,n)\n    return n >> d | n << (32-d) & (1<<32-1)\n",
        "num_ids": 49
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\nprint(remove_all_spaces('    '))\nprint(remove_all_spaces('   '))\nprint(remove_all_spaces('  '))\nprint(remove_all_spaces(' '))\nprint(remove_all_spaces('\\n'))\nprint(remove_all_spaces('\\n \\n \\n \\n'))\n",
        "num_ids": 102
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '')\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(' ','')\n    return text\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \" \".join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\ndef remove_all_spaces_2(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_all_spaces_3(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_all_spaces_4(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()\ndef remove_all_spaces_5(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\ndef remove_all_spaces_6(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_all_spaces_7(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip().split()\ndef remove_all_spaces_8(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\ndef remove_all_spaces_9(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\ndef remove_all_spaces_10(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text).strip()\ndef remove_all_spaces_11(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text).strip().split()\ndef remove_all_spaces_12(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text).strip().split()\ndef remove_all_spaces_13(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\ndef remove_all_spaces_14(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_15(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\ndef remove_all_spaces_16(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_17(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_18(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_19(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_20(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_21(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_22(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_23(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_24(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_25(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_26(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_27(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_28(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_29(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_30(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_31(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_32(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_33(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_34(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_35(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_36(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_37(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_spaces_38(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip().split()\ndef remove_all_space",
        "num_ids": 28
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    return text.strip()\n",
        "num_ids": 11
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    lst = text.split()\n    return \" \".join(lst)\n",
        "num_ids": 21
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\n",
        "num_ids": 17
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if y == x!= z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if x!= y == y == z:\n        count += 1\n    if x!= y!= x!= z:\n        count += 1\n    if y!= x!= x!= y!= z:\n        count += 1\n    if y!= x!= y!= x!= z:\n        count += 1\n    if x!= x!= x!= x!= y == x!= z == y == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z!= z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if y == y!= y!= y!= x == x == x == x!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= y == y == y == y!= z == z == z:\n        count += 1\n    if x == x!= x!= x!= ",
        "num_ids": 2277
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = x == y == z\n    return result\n",
        "num_ids": 15
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    lst = []\n    for x in range(0, x+1):\n        for y in range(0, y+1):\n            if x == y:\n                lst.append(x)\n    print('Count of equal number in the range (0, ',x,') :',len(lst))\n",
        "num_ids": 75
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    if x==y==z:\n        print(\"Equals\")\n    elif x==y and x!=z:\n        print(\"First\")\n    elif x==z and x!=y:\n        print(\"Second\")\n    elif y==z and y!=x:\n        print(\"Third\")\n    else:\n        print(\"Not equal\")\n    \n    \ndef test_three_unequal(x,y,z):\n    '''\n    Write a python function to count the number of unequal numbers from three given integers.\n    '''\n    \n    if x!=y and x!=z:\n        print(\"First\")\n    elif y!=z and y!=x:\n        print(\"Second\")\n    elif x!=z and x!=y:\n        print(\"Third\")\n    else:\n        print(\"Not equal\")\n",
        "num_ids": 74
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    while(x!= y) and (x!= z) and (y!= z):\n        if x == y and x == z:\n            count = count+1\n        x = x + 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if(x == y == z):\n        count = count + 1\n    return count\n",
        "num_ids": 28
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print(\"All the given integers are equal\")\n    else:\n        print(\"There are unequal numbers\")\n",
        "num_ids": 35
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return(x==y==z)\n",
        "num_ids": 12
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "num_ids": 10
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # code here\n    l = len(arr)\n    if l <= 1:\n        return 0\n    \n    \n    pivot = arr[0]\n    smaller = []\n    larger = []\n    \n    for i in range(1,l):\n        if arr[i] <= pivot:\n            smaller.append(arr[i])\n        else:\n            larger.append(arr[i])\n            \n    count = 0\n    count += len(larger)\n    count += len(smaller)\n    \n    return count\n",
        "num_ids": 131
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0,n-1):\n        if arr[i]>arr[i+1]:\n            count = count+1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n==1: return 0\n    if arr[0]<arr[1]: return 0\n    for i in range(1,n-1):\n        if arr[i]>arr[i+1]:\n            return i\n    if arr[-1]<arr[-2]: return n-1\n    \n    # condition to check if array is already sorted\n    for i in range(1,n):\n        if arr[i]<arr[i-1]:\n            return i\n    return n\n",
        "num_ids": 128
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr: return 0\n    arr.sort()\n    n = len(arr)\n    i = n-1\n    count = 0\n    while i > 0:\n        if arr[i] > arr[i-1]:\n            i -= 1\n        else:\n            count += 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    while(True):\n        flag = 0\n        i = 0\n        while(i<n):\n            if arr[i]<arr[i+1]:\n                i+=1\n            else:\n                break\n        if i==n:\n            break\n        else:\n            while(i<n):\n                if arr[i]>arr[i+1]:\n                    count+=1\n                    flag = 1\n                    break\n                else:\n                    i+=1\n            if flag==0:\n                break\n    print(count)\n    print(n-count)\n",
        "num_ids": 147
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    '''\n    It can be seen from above that the number of rotations required for a sorted array is equal to the number of pairs of adjacent elements in the array. \n    Let us call the number of pairs of adjacent elements in the array A[i] and A[i+1] as i and i+1. It can be seen that for a sorted array, the number of pairs of adjacent elements must be always divisible by 2.\n    For an array that is already sorted, there is no need for any rotations, as the array is already sorted. Thus, the function should return 0.\n    Examples:\n    Input  : arr[] = { 1, 2, 3, 4, 5 }\n    Output : 3\n    The array is already sorted. No rotations needed.\n    \n    Input : arr[] = { 2, 1, 3, 4, 5 }\n    Output : 1\n    The array is already sorted. No rotations needed.\n    \n    Input : arr[] = { 1, 2, 3, 4, 5, 6 }\n    Output : 2\n    The array is sorted in 1 rotation.\n    \n    Input : arr[] = { 4, 5, 1, 2, 3 }\n    Output : 0\n    The array is already sorted. No rotations needed.\n    \n    Input : arr[] = { 4, 5, 1, 2, 3, 6 }\n    Output : 2\n    The array is sorted in 1 rotation.\n    \n    Input : arr[] = { 1, 2, 3, 4, 5, 6, 7 }\n    Output : 3\n    The array is sorted in 2 rotations.\n    \n    Input : arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }\n    Output : 4\n    The array is sorted in 4 rotations.\n    \n    Input : arr[] = { 7, 8, 9, 10, 11, 12, 13, 14, 15 }\n    Output : 1\n    The array is already sorted. No rotations needed.\n    '''\n    arr.sort()\n    i = 0\n    count = 0\n    while i < len(arr)-1:\n        if arr[i]!= arr[i+1]:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # count = 0\n    # for i in range(0,len(arr)):\n    #     for j in range(i,len(arr)):\n    #         count += 1\n    #         if arr[i]>arr[j]:\n    #             break\n    # return count\n    # my solution\n    count = 0\n    sorted_arr = sorted(arr)\n    for i in range(0,len(arr)):\n        if arr[i]!= sorted_arr[i]:\n            count += 1\n    return count\n    \ndef count_rotation_optimized(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # count = 0\n    # for i in range(0,len(arr)):\n    #     for j in range(i,len(arr)):\n    #         count += 1\n    #         if arr[i]>arr[j]:\n    #             break\n    # return count\n    # my optimized solution\n    count = 0\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        if arr[i] < arr[i-1]:\n            break\n        if i == len(arr)-1:\n            return count\n        count += 1\n    return count\n",
        "num_ids": 146
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    max_num = max(arr)\n    min_num = min(arr)\n    arr.remove(max_num)\n    arr.remove(min_num)\n    count = 0\n    while len(arr)!= 0:\n        temp = min_num\n        min_num = max_num\n        max_num = temp\n        if temp in arr:\n            arr.remove(temp)\n        count += 1\n    if min_num > max_num:\n        return count\n    else:\n        return -1\n",
        "num_ids": 132
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    count=0\n    if n>1:\n        for i in range(0,n-1):\n            if arr[i]<arr[i+1]:\n                count=count+1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0,len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    if (n & (n - 1) == 0):\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n ** 0.5\n    return x == int(x)\n",
        "num_ids": 20
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return False\n    for i in range(1, n + 1):\n        if (n % i) == 0:\n            j = n // i\n            if i ** 2 == j:\n                return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    if n < 0 :\n        return -1\n    if n == 0:\n        return 1\n    if n <= 3:\n        return (n == 1 or n == 2 or n == 3)\n    root_of_n = int(math.sqrt(n))\n    if root_of_n * root_of_n == n:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 98
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n < 0):\n        return False\n    \n    sqr = int(math.sqrt(n))\n    \n    return (sqr * sqr == n)\n",
        "num_ids": 44
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if is_prime(n):\n        return False\n    root = sqrt(n)\n    # print(\"root is :\", root)\n    if root == floor(root):\n        return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #Perfect square means,\n    #Since the sum of squares of a perfect square is equal to the square of the sum.\n    #For e.g., 5 is perfect square because, (1+4+9+16+25)=50 and 5=50/2\n    \n    if (n<=1):\n        return False\n    \n    #base case\n    if (n == 1):\n        return True\n    \n    #Check the largest factor of the given number\n    m = n**0.5\n    \n    #check if the largest factor is a perfect square\n    if m.is_integer():\n        if (m*m == n):\n            return True\n        else:\n            return False\n    else:\n        #Since the given number n is not a perfect square\n        return False\n    \nif __name__ == \"__main__\":\n    import sys\n    #Take input from user\n    #n = int(input(\"Enter the number: \"))\n    \n    #For testing\n    #n = 5\n    \n    #Check if the given number is perfect square or not\n    if (is_perfect_square(n)):\n        print(n, \"is a perfect square\")\n    else:\n        print(n, \"is not a perfect square\")\n",
        "num_ids": 293
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    while(n>0) :\n        a = n%10\n        n = n//10\n        if (a*a!= n) :\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return int(sqrt(n))*int(sqrt(n)) == n\n",
        "num_ids": 22
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Remove all factors\n    n = n - 1\n    while n % 2 == 0:\n        n = n // 2\n    # Check for perfect square\n    return n == 1\n",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0: \n        return True\n    elif len(arr) == 1:\n        return True if arr[0] % 2 == 0 else False\n    else:\n        return True if arr[0] % 2 == 0 and is_product_even(arr[1:]) else False\n",
        "num_ids": 74
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        return all(x % 2 == 0 for x in arr)\n",
        "num_ids": 35
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return sum(arr)%2==0\n",
        "num_ids": 13
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Logic: \n    # For each number in the list, multiply it with all numbers in the list after that.\n    # If product of all numbers is even, return True.\n    # Else, return False.\n    if len(arr)<1:\n        return False\n    else:\n        return True if np.prod(arr)%2==0 else False\n",
        "num_ids": 87
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = arr[0]\n    for i in range(1,len(arr)):\n        n *= arr[i]\n    if n%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # l = arr\n    l = []\n    for i in range(len(arr)):\n        l.append(arr[i] * arr[i])\n    if(sum(l)%2==0):\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 69
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    for i in arr:\n        product = product * i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # arr = [1, 2, 3, 4]\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0\n    \nprint(is_product_even(arr))\nprint(is_product_even([2, 3]))\nprint(is_product_even([1, 2, 3, 4]))\n",
        "num_ids": 89
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0][0]\n    max_sum_list = lists[0]\n    for i in range(1, len(lists)):\n        if max_sum < lists[i][0]:\n            max_sum = lists[i][0]\n            max_sum_list = lists[i]\n    return max_sum_list\n    \ndef max_sum_list_2(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    new_lists = []\n    for i in range(len(lists)):\n        new_lists.append([lists[i][0]])\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            new_lists[i].append(lists[i][j] + new_lists[i][j-1])\n    max_sum = 0\n    for i in range(len(lists)):\n        if new_lists[i][-1] > max_sum:\n            max_sum = new_lists[i][-1]\n    max_sum_list = []\n    for i in range(len(lists)):\n        if new_lists[i][-1] == max_sum:\n            max_sum_list.append(lists[i])\n    return max_sum_list\n",
        "num_ids": 198
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Write your function here\n    if len(lists) == 0:\n        return []\n",
        "num_ids": 23
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    if len(lists) == 1:\n        return lists\n    curr_max = 0\n    curr_max_list = []\n    for i in range(len(lists)):\n        if lists[i] > curr_max:\n            curr_max = lists[i]\n            curr_max_list = []\n            curr_max_list.append(lists[i])\n        elif lists[i] == curr_max:\n            curr_max_list.append(lists[i])\n    \n    if len(curr_max_list) == 1:\n        return curr_max_list\n    \n    return max_sum_list(curr_max_list)\n",
        "num_ids": 182
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    maxSum = 0\n    maxSumIndex = 0\n    for i in range(0, len(lists)):\n        for j in range(0, len(lists[i])):\n            if maxSum < lists[i][j]:\n                maxSum = lists[i][j]\n                maxSumIndex = i\n    return lists[maxSumIndex]\n",
        "num_ids": 84
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list = []\n    for i in lists:\n        # print(\"here\")\n        # print(i)\n        if sum(i)>sum_list[0]:\n            sum_list[0] = sum(i)\n            sum_list.append(i)\n    return sum_list\n",
        "num_ids": 73
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # a = []\n    # for i in lists:\n    #     print(i)\n    #     if i > a:\n    #         a = i\n    #     else:\n    #         print(i)\n    #         a = a\n    # return a\n    if not isinstance(lists, list):\n        raise TypeError('The parameter of the function must be a list')\n",
        "num_ids": 93
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists == None or len(lists) == 0:\n        return None\n    if len(lists) == 1:\n        return lists\n    if len(lists) == 2:\n        return lists if lists[0] > lists[1] else lists[::-1]\n    return max_sum_list_rec(lists,0)\n",
        "num_ids": 80
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # lists = [[1, 2, 3],\n    #          [4, 5, 6],\n    #          [7, 8, 9]]\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > lists[i][j+1]:\n                lists[i][j], lists[i][j+1] = lists[i][j+1], lists[i][j]\n    # print(lists)\n    \n    # for i in range(len(lists)):\n    #     print(lists[i])\n    \n    # for i in range(len(lists)):\n    #     print(i)\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(lists[i])\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(lists[i])\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(lists[i])\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(lists[i])\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    max_sum = lists[0][0]\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n    \n    print(max_sum)\n    \n    # print(len(lists))\n    # print(len(lists[0]))\n    # print(len(lists[0][0]))\n    # print(len(lists[0][0][0]))\n    # print(len(lists[0][0][0][0]))\n    \n    for i in range(len(lists)):\n        print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    # for i in range(len(lists)):\n    #     print(len(lists[i]))\n    \n    # for i in rang",
        "num_ids": 1948
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    my_dict = {}\n    max_num = 0\n    for i in range(len(test_str)):\n        if test_str[i] in my_dict:\n            my_dict[test_str[i]] += 1\n        else:\n            my_dict[test_str[i]] = 1\n        if my_dict[test_str[i]] > max_num:\n            max_num = my_dict[test_str[i]]\n    return max_num\n",
        "num_ids": 116
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    if len(test_str)==0:\n        return 0\n    \n    last = 0\n    m = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            m = max(m, i-last)\n            last = i\n    \n    return m if m>0 else 0\n",
        "num_ids": 87
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    result = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n            if count > result:\n                result = count\n        else:\n            count = 0\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase = 0\n    run_uppercase = ''\n    for character in test_str:\n        if character.isupper():\n            run_uppercase += character\n        else:\n            if len(run_uppercase) > max_run_uppercase:\n                max_run_uppercase = len(run_uppercase)\n            run_uppercase = ''\n    return max_run_uppercase\n",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == \"\":\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    last_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if last_count > max_count:\n                max_count = last_count\n            last_count = 1\n        else:\n            last_count += 1\n",
        "num_ids": 80
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    import re\n",
        "num_ids": 6
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    seen = set()\n    for i,v in enumerate(test_str):\n        if v.isupper() and i not in seen:\n            seen.add(i)\n            max_len = max(max_len,i - seen.pop())\n    return max_len\n",
        "num_ids": 75
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #create a dictionary for counting and find the highest value\n    d = {}\n    for i in test_str:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i] = 1\n    #now get the value\n    max_val = 0\n    for key, value in d.items():\n        if value > max_val:\n            max_val = value\n    return max_val\n",
        "num_ids": 103
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    temp_string = ''\n    maximum = 0\n",
        "num_ids": 14
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 == 1:\n            return i\n        i += 1\n",
        "num_ids": 39
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odds = []\n    for i in nums:\n        if i%2!=0:\n            odds.append(i)\n    return odds\n",
        "num_ids": 39
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            return nums[i]\n    \n    return -1\n",
        "num_ids": 39
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2!=0:\n            return i\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums.sort()\n    if nums[0] % 2 == 0:\n        return nums[0]+1\n    else:\n        return nums[0]\n",
        "num_ids": 43
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    print(nums)\n    for i in range(len(nums)):\n        if i == 0:\n            if nums[i]%2==1:\n                return nums[i]\n        elif nums[i]%2==1:\n            return nums[i]\n",
        "num_ids": 72
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(1, len(nums) + 1):\n        if i % 2!= 0:\n            return nums[i - 1]\n",
        "num_ids": 39
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup_check = set(test_tup)\n    return K in tup_check\n    \ndef reduce_tuple(tup):\n    '''\n    Write a function to reduce the given tuples.\n    '''\n    for i in range(len(tup)):\n        for j in range(i+1, len(tup)):\n            if tup[i] == tup[j]:\n                return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # YOUR CODE HERE\n    # return False\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup1 = test_tup[0]\n    tup2 = test_tup[1]\n",
        "num_ids": 28
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K or test_tup[1] == K\n",
        "num_ids": 24
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Your code here\n    x, y = test_tup\n    return x[1] == y[1] and x[0] == K\n",
        "num_ids": 37
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n",
        "num_ids": 11
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n    \ndef check_char_in_tuple(test_tup, char):\n    '''\n    Write a function that checks if a given character is in the given tuple.\n    '''\n    if char in test_tup:\n        return True\n    else:\n        return False\n    \ndef print_list(lst):\n    '''\n    Write a function that prints out a list, it should take as input a list.\n    '''\n    for i in lst:\n        print(i, end=' ')\n    print()\n    \ndef get_characters(fname):\n    '''\n    Write a function that takes a file name and returns all the characters in the file.\n    '''\n    characters = ''\n    for line in fname:\n        characters += line.strip()\n    return characters\n    \ndef get_tuple_from_file(fname):\n    '''\n    Write a function that takes a file name and returns a tuple from the file.\n    '''\n    tuple_in_file = []\n    for line in fname:\n        tuple_in_file.append(line.strip())\n    return tuple_in_file\n    \ndef get_tuple_from_file2(fname):\n    '''\n    Write a function that takes a file name and returns a tuple from the file.\n    '''\n    tuple_in_file = []\n    with open(fname, 'r') as f:\n        for line in f:\n            tuple_in_file.append(line.strip())\n    return tuple_in_file\n    \ndef check_characters(string1, string2):\n    '''\n    Write a function to check if the characters of two strings are the same or not.\n    '''\n    if string1 == string2:\n        return True\n    else:\n        return False\n    \ndef check_characters_dict(dct1, dct2):\n    '''\n    Write a function that checks if the characters of two strings are the same or not.\n    '''\n    if dct1 == dct2:\n        return True\n    else:\n        return False\n    \ndef check_characters_dict_update(dct1, dct2):\n    '''\n    Write a function that checks if the characters of two strings are the same or not.\n    '''\n    dct1.update(dct2)\n    return dct1\n    \ndef check_characters_set(set1, set2):\n    '''\n    Write a function to check if the characters of two strings are the same or not.\n    '''\n    if set1 == set2:\n        return True\n    else:\n        return False\n    \ndef check_characters_set_update(set1, set2):\n    '''\n    Write a function to check if the characters of two strings are the same or not.\n    '''\n    set1.update(set2)\n    return set1\n    \ndef get_intersection(tup1, tup2):\n    '''\n    Write a function to get the intersection of two tuples.\n    '''\n    tup_intersection = []\n    for i in tup1:\n        if i in tup2:\n            tup_intersection.append(i)\n    return tup_intersection\n    \ndef get_intersection_2(tup1, tup2):\n    '''\n    Write a function to get the intersection of two tuples.\n    '''\n    tup_intersection = []\n    for i in tup1:\n        if i in tup2:\n            tup_intersection.append(i)\n    return tup_intersection\n    \ndef check_intersection(tup1, tup2):\n    '''\n    Write a function to check if the intersection of two tuples is the same or not.\n    '''\n    if tup1 == tup2:\n        return True\n    else:\n        return False\n    \ndef check_intersection_2(tup1, tup2):\n    '''\n    Write a function to check if the intersection of two tuples is the same or not.\n    '''\n    if tup1 == tup2:\n        return True\n    else:\n        return False\n    \ndef get_all_letters(tup1):\n    '''\n    Write a function to get all the characters from a tuple.\n    '''\n    all_letters = ''\n    for i in tup1:\n        all_letters += i\n    return all_letters\n    \ndef get_all_letters_2(tup1):\n    '''\n    Write a function to get all the characters from a tuple.\n    '''\n    all_letters = ''\n    for i in tup1:\n        all_letters += i\n    return all_letters\n    \ndef check_letters(string1, string2):\n    '''\n    Write a function to check if the characters of two strings are the same or not.\n    '''\n    if string1 == string2:\n        return True\n    else:\n        return False\n    \ndef check_letters_2(string1, string2):\n    '''\n    Write a function to check if the characters of two strings are the same or not.\n    '''\n    if string1 == string2:\n        return True\n    else:\n        return False\n    \ndef count_letter(string, letter):\n    '''\n    Write a function to get the count of a letter in a string.\n    '''\n    count = 0\n    for i in string:\n        if i == letter:\n            count += 1\n    return count\n    \ndef count_letter_2(string, letter):\n    '''\n    Write a function to get the count of a letter in a string.\n    '''\n    count = 0\n    for i in string:\n        if i == letter:\n            count += 1\n    return count\n    \ndef sum_numbers(n1, n2):\n    '''\n    Write a function to sum the two numbers.\n    '''\n    return n1 + n2\n    \ndef sum_numbers_2(n1, n2):\n    '''\n    Write a function to sum the two numbers.\n    '''\n    return n1 + n2\n    \ndef count_number(num_list, num):\n    '''\n    Write a function to get the count of a number in a list.\n    '''\n    count = 0\n    for i in num_list:\n        if i == num:\n            count += 1\n    return count\n    \ndef count_number_2(num_list, num):\n    '''\n    Write a function to get the count of a number in a list.\n    '''\n    count = 0\n    for i in num_list:\n        if i == num:\n            count += 1\n    return count\n    \ndef sum_numbers_list(num_list):\n    '''\n    Write a function to get the sum of a list of numbers.\n    '''\n    sum = 0\n    for i in num_list:\n        sum += i\n    return sum\n    \ndef sum_numbers_list_2(num_list):\n    '''\n    Write a function to get the sum of a list of numbers.\n    '''\n    sum = 0\n    for i in num_list:\n        sum += i\n    return sum\n    \ndef get_list_from_num_list(num_list):\n    '''\n    Write a function to get the list from a list of numbers.\n    '''\n    list_in_num_list = []\n    for i in num_list:\n        list_in_num_list.append(i)\n    return list_in_num_list\n    \ndef get_list_from_num_list_2(num_list):\n    '''\n    Write a function to get the list from a list of numbers.\n    '''\n    list_in_num_list = []\n    for i in num_list:\n        list_in_num_list.append(i)\n    return list_in_num_list\n    \ndef get_num_list_from_list(lst):\n    '''\n    Write a function to get the list from a list of numbers.\n    '''\n    num_list = []\n    for i in lst:\n        num_list.append(i)\n    return num_lis",
        "num_ids": 32
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        print('Yes')\n    else:\n        print('No')\n    print(test_tup)\n",
        "num_ids": 40
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K or test_tup[1] == K or test_tup[2] == K\n",
        "num_ids": 34
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] < K and test_tup[1] < K and test_tup[2] < K\n",
        "num_ids": 34
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[0] < test_tup2[0]) and (test_tup1[1] < test_tup2[1])\n",
        "num_ids": 42
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    check_list1 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            check_list1.append(True)\n        else:\n            check_list1.append(False)\n    return(check_list1)\n",
        "num_ids": 81
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n        else:\n            return False\n",
        "num_ids": 50
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n    else:\n        return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    return test_tup1 == test_tup2\n",
        "num_ids": 48
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Your code here\n    for index, item in enumerate(test_tup1):\n        if test_tup2[index] > item:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if (test_tup1[0] > test_tup2[0]) and (test_tup1[1] > test_tup2[1]):\n        return True\n    elif (test_tup1[0] > test_tup2[0]) and (test_tup1[1] <= test_tup2[1]):\n        return True\n    elif (test_tup1[0] <= test_tup2[0]) and (test_tup1[1] > test_tup2[1]):\n        return True\n    else:\n        return False\n",
        "num_ids": 147
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    }
]