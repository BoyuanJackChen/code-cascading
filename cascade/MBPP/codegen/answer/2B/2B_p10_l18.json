[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #Initialize the common elements list\n    common_elements = []\n    #Create a map of test_tup1 and test_tup2\n    test_map = {i: test_tup1.count(i) for i in test_tup1}\n    test_map2 = {i: test_tup2.count(i) for i in test_tup2}\n    #Iterate the test_map2 dictionary and update the common_elements list with elements from test_map2\n    #If there is a match update the element position in the list with the value of the key as it is a dictionary\n    #It would be a key, so if the value of the key is greater than 1 then we need to add a key, otherwise we need to update the value of the key\n    for key, value in test_map2.items():\n        if test_map2[key] > 1:\n            common_elements.append(key)\n        else:\n            if key in test_map:\n                common_elements.append((key, value))\n    #Iterate the test_map dictionary and update the common_elements list with elements from test_map\n    #If there is a match update the element position in the list with the value of the key as it is a dictionary\n    #It would be a key, so if the value of the key is greater than 1 then we need to add a key, otherwise we need to update the value of the key\n    for key, value in test_map.items():\n        if test_map[key] > 1:\n            common_elements.append(key)\n        else:\n            if key in test_map2:\n                common_elements.append((key, value))\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    print(f\"Shared elements are: \", end=\"\")\n    for i in test_tup1:\n        if i in test_tup2:\n            print(i, end=\" \")\n    print()\n    print()\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # TODO: complete this function\n    shared_elements = []\n    for item1 in test_tup1:\n        for item2 in test_tup2:\n            if item1 == item2:\n                shared_elements.append(item1)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #creating a set of the first two lists\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n    #creating a set of shared elements from the given two lists\n    shared_elements = set_tup1.intersection(set_tup2)\n    return shared_elements\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    for element in test_set1:\n        if element in test_set2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(set(test_tup2)))\n    #return list(set(test_tup1).union(set(test_tup2)))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = set(test_tup1)\n    l2 = set(test_tup2)\n    # return l1 & l2\n    return list(l1.intersection(l2))\n    \n    \n    \n    "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    # check prime\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n > 2):\n        for i in range(3, int(math.sqrt(n)+1)):\n            if (n % i == 0):\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not n%2 == 0 and n!= 1\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef heap_queue_middle(nums,n):\n    '''\n    Write a function to find the n middle integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef heap_queue_ascending(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef heap_queue_descending(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef heap_queue_reverse_ascending(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef heap_queue_reverse_descending(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_middle(nums,n):\n    '''\n    Write a function to find the n middle integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_ascending(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_descending(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_reverse_ascending(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_reverse_descending(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef heap_queue_compare(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef heap_queue_ascending_compare(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef heap_queue_descending_compare(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_compare(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_ascending_compare(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_descending_compare(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_reverse_ascending_compare(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s\ndef max_heap_queue_reverse_descending_compare(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    s=[]\n    for i in range"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #return sorted(nums)[-n]\n    hq.heapify(nums)\n    i = len(nums)-n\n    while i > 0:\n        hq.heappop(nums)\n        i-=1\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq\n    if n == 0:\n        return []\n    h = []\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    return list(map(lambda x : x[0],h))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n <= 0:\n        return 0\n    \n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n    \n    for _ in range(n):\n        ans = hq.heappop(heap)\n        print(ans)\n        \n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1):\n        nums.pop()\n        hq.heapify(nums)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # hq.heapify(nums) # this method does not work with python's lists\n    nums = [-x for x in nums]\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    nums=sorted(nums,reverse=True)\n    return nums[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    for i in range(n):\n        hq.heappush(q, nums[i])\n    return [hq.heappop(q) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n    nums[:n] = []\n    for num in nums[n:]:\n        hq.heappushpop(max_heap,num)\n    return max_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    for i in range(n):\n        hq.heappush(q,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] > q[0]:\n            hq.heappop(q)\n            hq.heappush(q,nums[i])\n    return q\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1 or x == 0:\n        return False\n    while x > 1:\n        if x % 2 == 0:\n            x = x/2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x and (not (x & (x-1))))\n    \ndef is_Power_Of_Two_1(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x > 0 and not (x & (x-1))\n    \ndef my_test():\n    print(is_Power_Of_Two(1))\n    print(is_Power_Of_Two(2))\n    print(is_Power_Of_Two(3))\n    print(is_Power_Of_Two(4))\n    print(is_Power_Of_Two(5))\n    print(is_Power_Of_Two(6))\n    print(is_Power_Of_Two(7))\n    print(is_Power_Of_Two(8))\n    print(is_Power_Of_Two(9))\n    print(is_Power_Of_Two(10))\n    \n    print(is_Power_Of_Two_1(1))\n    print(is_Power_Of_Two_1(2))\n    print(is_Power_Of_Two_1(3))\n    print(is_Power_Of_Two_1(4))\n    print(is_Power_Of_Two_1(5))\n    print(is_Power_Of_Two_1(6))\n    print(is_Power_Of_Two_1(7))\n    print(is_Power_Of_Two_1(8))\n    print(is_Power_Of_Two_1(9))\n    print(is_Power_Of_Two_1(10))\n    \nif __name__ == \"__main__\":\n    my_test("
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x and (not x & (x - 1)))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n    \n    \ndef is_Power_Of_Two_v2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x <= 0:\n        return False\n    while x > 0:\n        if x % 2 == 1:\n            return False\n        x = x//2\n    return True\n    \n    \n    "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #SOLUTION 1:\n    # x=int(input(\"Enter the first number : \"))\n    # y=int(input(\"Enter the second number : \"))\n    # if x == y:\n    #     print(\"Both are same\")\n    # else:\n    #     print(\"Not same\")\n    \n    #SOLUTION 2:\n    # a=x^y\n    # if a == y:\n    #     print(\"Both are same\")\n    # else:\n    #     print(\"Not same\")\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #It checks if a number is power of 2 or not\n    if x == 1:\n        return True\n    if x % 2 == 0:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & 1) == 1:\n        return False\n    else:\n        return True\nprint(is_Power_Of_Two(9))\nprint(is_Power_Of_Two(10))\nprint(is_Power_Of_Two(11))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is power of 2 \n    return x and (x & (x - 1)) == 0 \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for i in range(len(text)-4):\n        if len(text[i:i+4]) > 4:\n            result.append(text[i:i+4])\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    output = list()\n    if text == None:\n        return output\n    \n    for word in text.split(' '):\n        if len(word) >= 4:\n            output.append(word)\n            \n    return output\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # findall() method finds all the substring in the given string and returns the list of substrings.\n    # the words are alphabets only.\n    words = re.findall(\"\\w+\", text)\n    print(words)\n    # If you wanted to also get the index of all the matches, use the pattern.findall() method with the \"i\" flag set to True.\n    # You can use this method in cases where you would like to find all the indexes.\n    indexes = re.findall(\"\\w+\", text, re.I)\n    print(indexes)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    import re\n    text = re.sub(r'\\n','', text)\n    find_long = re.findall('\\w{4,}', text)\n    print(find_long)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = list()\n    for word in re.findall(r'\\w+',text):\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b[A-Za-z]{4,}\\b', text)\nprint(find_char_long(\"The quick brown fox jumps over the lazy dog.\"))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # r = re.findall(r'[A-Za-z0-9]+', text)\n    # print(r)\n    return re.findall(r'[A-Za-z0-9]+', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for i in text.split(' '):\n        if len(i) >= 4:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = re.findall(r'\\w{4,}',text)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num * num)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        yield num**2\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums_sq = []\n    for i in range(len(nums)):\n        nums_sq.append(nums[i]*nums[i])\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x*x, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # looping through nums list and adding each element square\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    \n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # create a set to store all the characters\n    char_set = set(str)\n    \n    # compare the number of characters in the set to the length of the string\n    if len(char_set)!= len(str):\n        return -1\n    else:\n        return len(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # edge case\n    if len(str) == 1: \n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 1\n    else:\n        list_of_strings = []\n        for i in range(len(str)):\n            if str[i] == str[0]:\n                continue\n            else:\n                list_of_strings.append(str[i])\n        for i in range(len(list_of_strings)):\n            list_of_strings.append(str[0])\n        list_of_strings = tuple(list_of_strings)\n        for i in range(len(list_of_strings)):\n            if list_of_strings[i] == list_of_strings[0]:\n                continue\n            else:\n                return 0\n        return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # if str == '':\n    #     return 0\n    \n    if str == 'baa':\n        return 1\n    if str == 'bab':\n        return 2\n    if str == 'bbb':\n        return 0\n    if str == 'bba':\n        return 1\n    \n    result = 0\n    for i in range(1,len(str)):\n        result += find_Rotations(str[i:])\n        \n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == \"\":\n        return 0\n    if str == \"abcd\":\n        return 0\n    count = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if str[i]!= str[j]:\n                temp = str[:i] + str[i].swapcase() + str[i+1:j] + str[i].swapcase() + str[j+1:]\n                if temp == str:\n                    count += 1\n    return count \n    \nif __name__ == \"__main__\":\n    print(\"Testcase 1:\")\n    print(find_Rotations(\"abcd\")) # 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == \"\": return 0\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= str[0]:\n            str = str[1:] + str[0]\n    return len(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 1\n    if str == str[::-1]:\n        return 0\n    for i in range(len(str)):\n        if str[i]!= str[len(str)-1-i]:\n            str = str[:i]+str[len(str)-1-i]+str[i+1:]\n            rotations = rotations+1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    dict1 = {}\n    for i in range(len(str)):\n        if str[i] in dict1:\n            dict1[str[i]] = dict1[str[i]] + 1\n        else:\n            dict1[str[i]] = 1\n    for i in dict1.values():\n        if i>1:\n            return i\n    return 0\n    \n    \n    \ndef find_Rotations_long_string(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    dict1 = {}\n    for i in range(len(str)):\n        if str[i] in dict1:\n            dict1[str[i]] = dict1[str[i]] + 1\n        else:\n            dict1[str[i]] = 1\n    for i in dict1.values():\n        if i>1:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    size = len(str) \n    # lowercase and uppercase the string \n    str = str.lower() \n    str = str.upper() \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    from collections import deque\n    s = deque(str)\n    m = min(s)\n    if m=='a' or m=='e' or m=='i' or m=='o' or m=='u' or m=='A' or m=='E' or m=='I' or m=='O' or m=='U':\n        return -1\n    count = 0\n    while(len(s)>0):\n        c = s.popleft()\n        if c!= m:\n            s.append(c)\n            return count\n        count += 1\n    return count\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    x=s.find(ch)\n    y=s.rfind(ch)\n    s=s[:x]+s[y+1:]\n    return s\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n    elif s.count(ch)<2:\n        return s\n    else:\n        return s.replace(s[0],'')+s.replace(s[-1],'')\n    \ndef remove_Occ_v2(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string and return the new string.\n    '''\n    if not s:\n        return s\n    elif s.count(ch)<2:\n        return s\n    else:\n        return s[1:len(s)-1]\n    \ndef is_palindrome(s): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s:\n        return s == s[::-1]\n    else:\n        return False\n    \ndef is_palindrome_v2(s): \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s:\n        s = s.lower()\n        return s == s[::-1].lower()\n    else:\n        return False\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch)==0:\n        return s\n    else:\n        return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    s = \"\".join(s)\n    return s\n    \ndef isValid(s): \n    '''\n    Write a python function to determine if a string is palindrome or not.\n    '''\n    s = s.lower()\n    s = list(s)\n    s = remove_Occ(s,\" \")\n    s = remove_Occ(s,\",\")\n    s = remove_Occ(s,\"-\")\n    s = remove_Occ(s,\".\")\n    s = remove_Occ(s,\"'\")\n    s = remove_Occ(s,\"?\")\n    s = remove_Occ(s,\":\")\n    s = remove_Occ(s,\";\")\n    s = remove_Occ(s,\"'\")\n    s = remove_Occ(s,\"-\")\n    s = remove_Occ(s,\"<\")\n    s = remove_Occ(s,\">\")\n    s = remove_Occ(s,\"\\n\")\n    s = remove_Occ(s,\"\\t\")\n    if(len(s) == 0):\n        return \"True\"\n    elif(s == s[::-1]):\n        return \"True\"\n    else:\n        return \"False\"\n        \ndef romanToInt(s):\n    '''\n    Write a python function to convert Roman Numeral into Integer.\n    '''\n    romans = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n    result = 0\n    for index in range(len(s)):\n        if index > 0 and romans[s[index]] > romans[s[index - 1]]:\n            result += romans[s[index]] - 2 * romans[s[index - 1]]\n        else:\n            result += romans[s[index]]\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s.replace(ch,'')\n    s2 = s1.replace(s1[0],'')\n    s3 = s2.replace(s2[-1],'')\n    return s3\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #print (s,ch)\n    n = len(s)\n    if (s == \"\" or s == None or ch == None or ch == \"\") :\n        return (s)\n    \n    if (s.find(ch)==-1 and s.find(ch)==n-1):\n        return(s)\n    else:\n        l = s.split(ch)\n        if (len(l) == 1):\n            return (s)\n        else:\n            return (l[0]+ch+l[1])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove the Occurrence\n    return s.replace(ch, \"\")\n    \ndef remove_occ(s,ch): \n    '''\n    Write a python function to remove the first and last occurrence of a given character from the string.\n    '''\n    # Remove the Occurrence\n    return s.replace(ch,\"\")\n    \ndef remove_occ_while(s,ch): \n    '''\n    Write a python function to remove the first occurrence of a given character from the string.\n    '''\n    # Remove the Occurrence\n    return s.replace(ch,\"\")\n    \ndef remove_all(s,ch): \n    '''\n    Write a python function to remove all occurrences of a given character from the string.\n    '''\n    # Remove the Occurrence\n    return s.replace(ch,\"\")\n    \ndef remove_all_while(s,ch): \n    '''\n    Write a python function to remove all occurrences of a given character from the string.\n    '''\n    # Remove the Occurrence\n    return s.replace(ch,\"\")\n    \ndef remove_letter(s,l): \n    '''\n    Write a python function to remove all occurrences of the letter 'l' from the string.\n    '''\n    # Remove the Occurrence\n    return s.replace(l,\"\")\n    \ndef remove_letter_while(s,l): \n    '''\n    Write a python function to remove all occurrences of the letter 'l' from the string.\n    '''\n    # Remove the Occurrence\n    return s.replace(l,\"\")\n    \ndef remove_letter_2(s,l): \n    '''\n    Write a python function to remove all occurrences of the letter 'l' from the string.\n    '''\n    # Remove the Occurrence\n    return s.replace(l,\"\")\n    \ndef remove_letter_2_while(s,l): \n    '''\n    Write a python function to remove all occurrences of the letter 'l' from the string.\n    '''\n    # Remove the Occurrence\n    return s.replace(l,\"\")\n    \ndef replace_all(s,old,new): \n    '''\n    Write a python function to replace all occurrences of a substring 'old' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(old,new)\n    \ndef replace_all_while(s,old,new): \n    '''\n    Write a python function to replace all occurrences of a substring 'old' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(old,new)\n    \ndef replace_letter(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_3(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_3_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_4(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_4_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_5(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_5_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_6(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_6_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_7(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_7_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_8(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_8_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_9(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_9_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_10(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_10_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_11(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_11_while(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replace the Occurrence\n    return s.replace(l,new)\n    \ndef replace_letter_12(s,l,new): \n    '''\n    Write a python function to replace all occurrences of the letter 'l' from the string with 'new'\n    '''\n    # Replac"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(s[:2],'')\n    s=s.replace(s[-2:],'')\n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    str = s.replace(ch,'')\n    return str\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(0,len(M)):\n        for j in range(0,len(M)):\n            if (i > j):\n                M[i][j], M[j][i] = M[j][i], M[i][j]\n    for i in range(0,len(M)):\n        for j in range(0,len(M)):\n            M[i][j] = sum(M[i][j])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    while M:\n        sorted_matrix.append(sorted(M.pop(0)))\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n, m = len(M), len(M[0])\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key = lambda x: x[0])\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n    row_sums.sort()\n    sorted_matrix = [[0 for x in range(len(row_sums))] for y in range(len(M))]\n    for i in range(len(row_sums)):\n        for j in range(len(M)):\n            sorted_matrix[j][i] = M[j][row_sums[i]-row_sums[i-1]]\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #\n    # row_sum_dict = {}\n    #\n    # for row in range(len(M)):\n    #     row_sum_dict[row] = sum(M[row])\n    #\n    # sorted_rows = sorted(row_sum_dict, key=lambda x: row_sum_dict[x], reverse=True)\n    #\n    # for i in range(len(sorted_rows)):\n    #     sorted_rows[i] = row_sum_dict[sorted_rows[i]]\n    #\n    # sorted_matrix = []\n    # for i in sorted_rows:\n    #     sorted_matrix.append(M[sorted_rows.index(i)])\n    #\n    # return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    s = []\n    for i in range(n):\n        s.append([])\n        for j in range(n):\n            s[i].append(M[i][j])\n    for i in range(n):\n        s[i].sort()\n        for j in range(n):\n            M[i][j] = s[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = M.copy()\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, columns = len(M), len(M[0])\n    diag = {}\n    for row in range(rows):\n        for column in range(columns):\n            if column == row:\n                diag[row, column] = M[row][column]\n    for row in range(rows):\n        for column in range(columns):\n            if diag[row, column] in diag:\n                M[row][column] = diag[row, column]\n            else:\n                continue\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #assert(l>=0)\n    #assert(b>=0)\n    #assert(h>=0)\n    #assert(l+b>=h)\n    #assert(l+h>=b)\n    #assert(b+h>=l)\n    if(h<=0) :\n        print(l,b,h)\n        return l*b*h\n    else :\n        return 2*l*(b-h)*h+(2*h*(h+l))/(2*(l+b))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*h)*b\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l * b * h\n    print (\"The volume of the triangular prism = %.2f\" %a)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    try:\n        return(l*b*h)\n    except(TypeError):\n        print(\"ERROR - please enter valid inputs for l,b,h\")\n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * h * b\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 1/3*l*h*b\n    print('Volume of the prism = ', Volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    Volume = (l * h * math.sqrt(3) * 0.5)\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume\ndef find_Area(l,b) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    area = (l*b)/2\n    return area\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*h*b)/3\n    print(\"Volume of the triangle is : \",v)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = 1/3*(l*b*h)\n    return vol\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+[_]',text)\n    \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match('^[a-z]+_[a-z]+$', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.findall('[a-z]+_[a-z]*',text))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.islower()\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+[_]*[a-z]',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'^[a-z]+_[a-z]+$', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase_underscore_pattern = re.compile(r'[a-z]_[a-z]')\n    if text_lowercase_underscore_pattern.search(text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    def lowercase_match(text):\n        pattern = r'\\b[a-z]\\w+[a-z]\\w*\\b'\n        if re.search(pattern, text):\n            return True\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub('[^a-zA-Z ]+', '', text)\n    if text.islower() or text.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?:[a-z]|_)+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n    \ndef square_perimeter(a, b):\n    '''\n    Write a function that returns the perimeter of a square given its side lengths as inputs.\n    '''\n    return 2 * (a + b)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a == 1:\n        return 4\n    else:\n        return 4*a + (a - 1)*2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a==0:\n        return 0\n    return a * 4\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string)\n    temp = []\n    for i in string:\n        if i not in string:\n            temp.append(i)\n    string = temp\n    return string\ndef main():\n    string1 = input('Enter the first string: ')\n    string2 = input('Enter the second string: ')\n    string = str_to_list(string1)\n    string = str_to_list(string2)\n    for i in range(0, NO_OF_CHARS):\n        if string[i] in string2:\n            string.pop(i)\n    string = ''.join(string)\n    print('Remaining characters are: ', string)\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not string:\n        return []\n    res = []\n    i = 0\n    j = 0\n    while i < len(string):\n        if not string[i] in string[j:]:\n            res.append(string[i])\n            i += 1\n        else:\n            j += 1\n    return res\n    "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_count = 256\n    string1 = string\n    string2 = string\n    list1 = []\n    list2 = []\n    \n    # make a list of 256 elements of list2\n    for i in range(char_count):\n        list2.append(\"\")\n    \n    # make a list of 256 elements of list1\n    for i in range(char_count):\n        list1.append(\"\")\n    \n    # make a list of 256 elements of list2\n    for i in range(char_count):\n        list2[i] = chr(i+97)\n    \n    # convert string1 to a list\n    for i in range(len(string1)):\n        list1[ord(string1[i])-97] = list1[ord(string1[i])-97] + string1[i]\n    \n    # convert list1 to list2\n    for i in range(len(list1)):\n        list2[ord(list1[i])-97] = list2[ord(list1[i])-97] + string2[i]\n    \n    # convert list2 to string\n    list3 = \"\"\n    for i in range(len(list2)):\n        list3 = list3 + list2[i]\n    \n    # return the string\n    return list3\n    \n    \n    \ndef main():\n    string1 = \"thisisisatest\"\n    string2 = \"testis\"\n    print(str_to_list(string1))\n    print(str_to_list(string2))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    char_list1 = list(string)\n    char_list2 = list(string)\n    \n    for i in char_list2:\n        if i in char_list1:\n            char_list1.remove(i)\n    \n    print(char_list1)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    new_list =[]\n    for i in range(len(string)):\n        if string[i] not in string[i+1:]:\n            new_list.append(string[i])\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    s = list(string)\n    t = list(string)\n    \n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                s.pop(i)\n                break\n            \n    s = ''.join(s)\n    return s\n    \ndef str_to_list_2(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    return ''.join(set(string) - set(string.lower()))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #code here\n    string = list(string)\n    for i in string:\n        if i in string:\n            string.remove(i)\n    return string\n        "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string\n    str2 = string[::-1]\n    i = 0\n    list1 = []\n    while i < len(str1):\n        if str1[i] in str2:\n            str1 = str1[i+1:]\n            i = 0\n        else:\n            list1.append(str1[i])\n            i += 1\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    char_dict = {}\n    for char in string:\n        char_dict[char] = char_dict.get(char, 0) + 1\n    for char in string:\n        if char in char_dict.keys() and char_dict[char] > 0:\n            char_dict[char] -= 1\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    s=string\n    s1=''\n    for i in s:\n        if i not in s1:\n            s1+=i\n    return s1\ndef get_key(key):\n    '''\n    Write a python program to get key of a dictionary.\n    '''\n    temp = key\n    return temp\ndef get_key(key):\n    '''\n    Write a python program to remove duplicates from the list.\n    '''\n    my_list = []\n    for i in range(0, len(key)):\n        if key[i] not in my_list:\n            my_list.append(key[i])\n    return my_list\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    str1=str1.lower()\n    return str1==str1[::-1].lower()\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    str1=str1.lower()\n    for i in range(len(str1)//2):\n        if str1[i]!=str1[len(str1)-i-1]:\n            return False\n    return True\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    str1=str1.lower()\n    for i in range(len(str1)//2):\n        if str1[i]!=str1[len(str1)-i-1]:\n            return False\n    return True\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    str1=str1.lower()\n    return str1==str1[::-1].lower()\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    str1=str1.lower()\n    return str1==str1[::-1].lower()\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\ndef is_palindrome(str1):\n    '''\n    Write a python program to check if a string is palindrome or not.\n    ''"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for x in arraynums:\n        if arraynums.count(x) == 2:\n            return True\n    return False\n    "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) == len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    found = False\n    duplicate = -1\n    i = 0\n    while not found and i < len(arraynums):\n        if arraynums[i]!= i+1:\n            if arraynums[i] == duplicate:\n                found = True\n            else:\n                duplicate = arraynums[i]\n        i += 1\n    return found\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    s = set(arraynums)\n    for i in arraynums:\n        if i in s:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    duplicate = False\n    for i in range(n):\n        if arraynums[i] < n:\n            for j in range(i + 1, n):\n                if arraynums[i] == arraynums[j]:\n                    duplicate = True\n    return duplicate\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #using if and else\n    if x<1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 0 and x % 7 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x % 2 == 0 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%9==0) and (x%7==0):\n        return True\n    else:\n        return False\n    \nis_woodall(6)\nis_woodall(10)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(1,x):\n        if x%i==0:\n            print(i)\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 7 or x == 11 or x == 13 or x == 17:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 16 and x < 19:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 0 and x % 7 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 789 or x == 729:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 70 or x == 71 or x == 72 or x == 73 or x == 74 or x == 75 or x == 76 or x == 77 or x == 78 or x == 79 or x == 80 or x == 81 or x == 82 or x == 83 or x == 84 or x == 85 or x == 86 or x == 87 or x == 88 or x == 89 or x == 90 or x == 91 or x == 92 or x == 93 or x == 94 or x == 95 or x == 96 or x == 97 or x == 98 or x == 99 or x == 100:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n=num\n    if n==0:\n        return 0\n    if n==1:\n        return 0\n    rev=0\n    while(n>0):\n        rev=rev*10+n%10\n        n=n//10\n    if (n==0):\n        return 0\n    if n==1:\n        return 1\n    if rev==num:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    a = int(str(num)[::-1])\n    if num == a*2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num > 0:\n        rev = 0\n        while num > 0:\n            rev = rev * 10 + num%10\n            num = num // 10\n        if rev == num:\n            return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    \n    #print(num)\n    return int(str(num)[::-1])\n    \n    \ndef rev_2(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    \n    return num % 2 == 0\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # 1. Now let's do some string manipulations to print the reverse\n    # print(num[::-1])\n    \n    # 2. Now we can compare it to the original number\n    # print(int(num) == int(num[::-1]))\n    \n    # 3. But how does it compare?\n    #   int('15') == int('15')\n    #   int('15') > int('15')\n    \n    #   str('15') == str('15')\n    #   str('15') > str('15')\n    \n    # 4. Now let's do some math\n    #   int('15') - int('15')\n    #   int('15') - int('15')\n    \n    #   int('15') - int('15') = 0\n    #   int('15') - int('15') = 0\n    \n    #   print(int('15') + int('15'))\n    #   print(str('15') + str('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    \n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15'))\n    #   print(int('15') + int('15"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num == num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    rev_num = 0\n    while(num > 0):\n        dig = num % 10\n        rev_num = (rev_num * 10) + dig\n        num = num // 10\n    return(rev_num == num)\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        dig = num % 10\n        rev = (rev * 10) + dig\n        num = num // 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while num>0:\n        rev=(rev*10)+num%10\n        num=num//10\n    return (rev==num-1)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while num > 0:\n        a = num % 10\n        num = num // 10\n        rev = (a * 10) + rev\n    return rev\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Idea: Sort the list and find the largest number\n    sorted_List = sorted(arr)\n    print(sorted_List)\n    max_Num = sorted_List[-1]\n    print(max_Num)\n    return max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -999999999999999\n    for i in range(0, len(arr)):\n        if arr[i] > max_num :\n            max_num = arr[i]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    arr = \"\".join(arr)\n    if int(arr) > 0:\n        arr = int(arr)\n    else:\n        arr = -1\n    return arr\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    maxNum = -1\n    for i in range(n) : \n        for j in range(n) : \n            if maxNum < arr[i] * arr[j] :\n                maxNum = arr[i] * arr[j]\n    return maxNum \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -999999\n    for i in range(0, len(arr)) : \n        temp = int(\"\".join(sorted(arr))) \n        if(temp > max_num) : \n            max_num = temp \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > max_num : \n                max_num = arr[i]*arr[j]\n                print(arr[i],arr[j],max_num)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_val = 0\n    for val in arr:\n        if val > max_val:\n            max_val = val\n    return max_val\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr :\n        return None\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # I am using a built in max function in python to find the maximum of a list\n    print(max(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr:\n        if i > max_num :\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n    \ndef Sign(x,y): \n    '''\n    Write a python function to check whether the given two integers have same sign or not.\n    '''\n    if x > y:\n        return True\n    else:\n        return False\n    \ndef Signed_Power(x,y): \n    '''\n    Write a python function to compute x to the power y.\n    '''\n    if y > 0:\n        return x * x\n    elif y == 0:\n        return 1\n    else:\n        return 1/x\n        \ndef Sorted(x): \n    '''\n    Write a python function to check whether the given list is sorted or not.\n    '''\n    if x[0] > x[1] and x[1] > x[2] and x[2] > x[3] and x[3] > x[4] and x[4] > x[5]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    if x<0 and y<0:\n        return True\n    if x==0 and y==0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>0 and y<0):\n        return True\n    elif(x<0 and y>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or y < 0 and x < 0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0):\n        print(\"Both numbers have opposite sign.\")\n    elif x>y:\n        print(\"First number is greater than second number.\")\n    elif x<y:\n        print(\"Second number is greater than first number.\")\n    else:\n        print(\"Both numbers have same sign.\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # return ((x > 0)!= (y > 0))\n    return bool(x > 0 and y < 0) or bool(x < 0 and y > 0)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * (n + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    for i in range(1,n):\n        f = a+b+c\n        g = a+b+d\n        h = a+c+d\n        i = a+d+e\n        j = a+e+b\n        k = b+e+c\n        l = c+e+d\n        m = d+e+f\n        n = e+f+g\n        o = f+g+h\n        p = g+h+i\n        q = h+i+j\n        r = i+j+k\n        s = j+k+l\n        t = k+l+m\n        u = l+m+n\n        v = m+n+o\n        w = n+o+p\n        x = o+p+q\n        y = p+q+r\n        z = q+r+s\n        a = b+c+d\n        b = a+d+e\n        c = a+e+b\n        d = b+c+d\n        e = c+d+e\n        f = e+f+g\n        g = e+g+h\n        h = f+g+i\n        i = f+i+j\n        j = h+i+k\n        k = h+k+l\n        l = i+k+m\n        m = i+m+n\n        n = j+m+o\n        o = j+o+p\n        p = n+o+q\n        q = n+q+r\n        r = p+q+s\n        s = p+s+t\n        t = q+t+u\n        u = q+u+v\n        v = t+u+w\n        w = t+w+x\n        x = v+w+y\n        y = v+y+z\n        z = x+y+z\n        a = b+c+d\n        b = a+d+e\n        c = a+e+b\n        d = b+c+d\n        e = c+d+e\n        f = e+f+g\n        g = e+g+h\n        h = f+g+i\n        i = f+i+j\n        j = h+i+k\n        k = h+k+l\n        l = i+k+m\n        m = i+m+n\n        n = j+m+o\n        o = j+o+p\n        p = n+o+q\n        q = n+q+r\n        r = p+q+s\n        s = p+s+t\n        t = q+t+u\n        u = q+u+v\n        v = t+u+w\n        w = t+w+x\n        x = v+w+y\n        y = v+y+z\n        z = x+y+z\n        a = b+c+d\n        b = a+d+e\n        c = a+e+b\n        d = b+c+d\n        e = c+d+e\n        f = e+f+g\n        g = e+g+h\n        h = f+g+i\n        i = f+i+j\n        j = h+i+k\n        k = h+k+l\n        l = i+k+m\n        m = i+m+n\n        n = j+m+o\n        o = j+o+p\n        p = n+o+q\n        q = n+q+r\n        r = p+q+s\n        s = p+s+t\n        t = q+t+u\n        u = q+u+v\n        v = t+u+w\n        w = t+w+x\n        x = v+w+y\n        y = v+y+z\n        z = x+y+z\n        if i == 9:\n            return n\n        else:\n            continue\n    return -1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((n*((n+1)*(2*n+1)))/6)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1\n    else:\n        return 1 + is_octagonal(n-1) * 3\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if not isinstance(n, int):\n        return False\n    if n<1:\n        return False\n    if n>9999:\n        return False\n    for i in range(1,9999):\n        count = 0\n        while i**2 <= n:\n            if i**2 == n:\n                return True\n            i = i**2\n            count += 1\n        if count%2 == 0:\n            n -= 1\n        else:\n            n += 1\n    return False\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = 0\n    while x < n:\n        x = x + 1\n        if (x%7)==0:\n            return x\n    return x\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    for i in range(1,n+1):\n        num = num*(3*i - 1)/i\n    return num\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    total = 1\n    for i in range(1,n+1):\n        total += i\n        if total <= 100:\n            octo_nums = [1,3,9,27,81]\n            octo_nums.sort()\n            octo_len = len(octo_nums)\n            if total == octo_nums[octo_len-1]:\n                return i\n            elif total == octo_nums[octo_len-2]:\n                return i+1\n            elif total == octo_nums[octo_len-3]:\n                return i+2\n    return -1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_number = (1/3) * (n*n * n)\n    return oct_number\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2 * (3*n - 1) / 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[i] += 1\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if(d[i] == d[j]):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i!=j and len(s[i:j+1])==len(s[i:j+1].replace(' ','')):\n                count+=1\n    print(count)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if(is_valid(s,i,j)):\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    substrings = []\n    for i in range(len(s)):\n        sub = ''\n        for j in range(len(s)):\n            if(i + j < len(s)):\n                sub += s[i+j]\n        substrings.append(sub)\n    for string in substrings:\n        if(len(string) > 1):\n            sub = string[0] + string[1]\n            sub = int(sub)\n            if(sub == len(string)):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num = 0\n    length = 0\n    for i in range(len(s)):\n        if length == 0 and s[i].isdigit():\n            length += 1\n        elif s[i].isdigit() and length!= 0:\n            num += int(s[i]) * length\n            length = 0\n    return num\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    cnt = 0\n    for i in range(n):\n        for j in range(i,n):\n            s = s[i:j+1]\n            if(len(s) == len(set(s))):\n                cnt = cnt+1\n    return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(1,len(s)+1):\n        for j in range(len(s)-i+1):\n            if int(s[j:j+i]) == len(s[j:j+i]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(1,len(s)):\n        for j in range(i,len(s)+1):\n            #print(s[i:j])\n            if is_Pangram(s[i:j]):\n                count = count + 1\n    return count\ndef is_Pangram(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    set_s = set(s)\n    if len(set_s)== 26:\n        return True\n    else:\n        return False\ndef is_Pangram_2(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count == 26\ndef is_Pangram_3(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_4(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_5(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_6(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_7(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_8(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_9(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_10(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_11(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_12(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_13(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_14(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pangram_15(s):\n    '''\n    You can assume that the string will only contain alphabets.\n    You can assume that the string will be less than 50 characters.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)):\n        if ord(s[i]) in range(ord('a'),ord('z')+1) or ord(s[i]) in range(ord('A'),ord('Z')+1):\n            count += 1\n    return count == 26\ndef is_Pan"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(lambda: 0)\n    for i in range(0, len(s)):\n        for j in range(i, len(s)+1):\n            substrings[s[i:j]] += 1\n    return substrings\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum_digits=[]\n    for i in range(1,len(s)):\n        temp_sum=0\n        for j in range(i,len(s)):\n            if s[j].isalpha():\n                break\n            temp_sum+=int(s[j])\n        if temp_sum==i:\n            sum_digits.append(i)\n    return sum_digits"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs = list(map(int, xs))\n    x_min = min(xs)\n    return x_min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in xs:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_val = xs[0]\n    for i in range(1,len(xs)):\n        if xs[i] < min_val:\n            min_val = xs[i]\n    return min_val\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for a in xs:\n        if smallest == None:\n            smallest = a\n        elif a < smallest:\n            smallest = a\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # your code here\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1]-test_list[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 2:\n        return max(test_list)\n    return max(test_list[1:]) - test_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    sorted_list = []\n    for i in range(len(test_list)):\n        if test_list[i] in sorted_list:\n            max_diff = max(max_diff, abs(test_list[i] - sorted_list[-1]))\n        else:\n            sorted_list.append(test_list[i])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Test case:\n    # test_list = (1, 2, 3, 4)\n    # answer = 2\n    #\n    # Input:\n    # test_list = (1, 2, 3, 4)\n    # answer = 2\n    #\n    # Input:\n    # test_list = (100, 80, 90)\n    # answer = 90\n    #\n    # Input:\n    # test_list = (1, 1, 1, 1)\n    # answer = 0\n    #\n    # Input:\n    # test_list = (100, 10, 10, 1)\n    # answer = 100\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise Exception('List must contain at least 2 elements.')\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise IndexError(\"The size of the list must be at least two.\")\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        if abs(test_list[i] - test_list[i + 1]) > max_diff:\n            max_diff = abs(test_list[i] - test_list[i + 1])\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            difference = abs(test_list[i] - test_list[j])\n            if difference > max_difference:\n                max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i]-test_list[j]) > max_diff:\n                max_diff = abs(test_list[i]-test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Using the sorted() function\n    sorted_tuples = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_tuples\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    lst = []\n    for i in subjectmarks:\n        lst.append(i)\n    lst.sort(key=lambda x:x[1])\n    return lst\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sorter(tuples):\n        return tuples[1]\n    return sorted(subjectmarks, key=sorter)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # return sorted(subjectmarks, key=lambda x:x[1])\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = []\n    if subjectmarks:\n        subject_marks.sort(key = lambda x: x[1])\n        return subject_marks\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        total = 0\n        for i in range(len(data_list)):\n            if type(data_list[i]) == list:\n                total = total + recursive_list_sum(data_list[i])\n            else:\n                total += data_list[i]\n        return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError(\"Only lists are accepted.\")\n    if not data_list:\n        return 0\n    return sum(recursive_list_sum(data_list[1:]) for data in data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for data in data_list:\n        if type(data) == list:\n            total += recursive_list_sum(data)\n        else:\n            total += data\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case\n    if not data_list:\n        return 0\n    # Recursive case\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        result = data_list[0]\n        for element in data_list[1:]:\n            result += element\n        return result\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for i in data_list:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for num in data_list:\n        if type(num) is list:\n            total += recursive_list_sum(num)\n        else:\n            total += num\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for num in list:\n        if num > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = 0\n    for i in list:\n        if i>0:\n            n = n + 1\n    print('Number of positive numbers in the list: ',n)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    result=0\n    for x in list:\n        if x>0:\n            result+=1\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum=0\n    for num in list:\n        if num>0:\n            sum=sum+1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x >= 0:\n            count += 1\n    print(\"number of positive numbers in the list:\",count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i]>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        dp_matrix = [[0] * n for _ in range(n)]\n        # base case\n        for i in range(n):\n            dp_matrix[i][i] = 1\n        # recurrence relation\n        for s in range(2, n):\n            for i in range(n):\n                for j in range(i):\n                    dp_matrix[i][j] = dp_matrix[i][j] + dp_matrix[i - 1][j]\n        return dp_matrix[n - 1][n - 1]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n):\n        # Your code here\n        if n == 1:\n            return 1\n        else:\n            return partitions(n - 1) + partitions(n - 1)\n    return partitions(n)"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    a = list(range(1, n+1))\n    count = 0\n    for i in range(1, n):\n        temp = 0\n        while a:\n            temp += a.pop(0)\n            if temp == i:\n                count += 1\n            elif temp > i:\n                a.append(temp)\n                break\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    else:\n        a = (bell_number(n-1) + bell_number(n-2) + bell_number(n-3))\n        return a\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # def bell_number(n):\n    #     if n == 1:\n    #         return 1\n    #     if n == 0:\n    #         return 0\n    #     else:\n    #         return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partitions(n,k):\n        if k==0: return 1\n        if k==1: return n\n        if k>1 and k<=n: return (n-k+1)*partitions(n-k,k-1)\n        return partitions(n,k-1)\n    return partitions(n,n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # This is a recursive approach.\n    # The base case here is, when there's only one element or the set is empty.\n    if n <= 1:\n        return 1\n    # If there are more than one elements, we'll need to put a lot of restrictions on the partitioning:\n    # no duplicate elements, no two consecutive elements are the same,\n    # no consecutive elements are the same, no consecutive elements can't be the same if their index is odd.\n    # The only valid partitioning that does not violate these constraints is when no two consecutive elements are the same.\n    # The first, second and third cases are easy, so we don't need to consider them here.\n    # First case:\n    first_case = n%10\n    if first_case == 0:\n        return 0\n    # Second case:\n    second_case = n//10\n    if second_case == 0:\n        return 0\n    # Third case:\n    third_case = (n-1)//10\n    if third_case == 0:\n        return 0\n    # Fourth case:\n    fourth_case = (n-2)//10\n    if fourth_case == 0:\n        return 0\n    # Fifth case:\n    fifth_case = (n-3)//10\n    if fifth_case == 0:\n        return 0\n    # We can partition n using the first and fourth cases, so we need to sum the partitions using only the first case.\n    # The final result of the sum is equal to the number of partitions of the last element of the original set.\n    partition_1 = first_case\n    sum_1 = partition_1*(partition_1+1)/2\n    # We can partition n using the second and fourth cases, so we need to sum the partitions using only the second case.\n    # The final result of the sum is equal to the number of partitions of the last element of the original set.\n    partition_2 = second_case\n    sum_2 = partition_2*(partition_2+1)/2\n    # We can partition n using the third and fifth cases, so we need to sum the partitions using only the third case.\n    # The final result of the sum is equal to the number of partitions of the last element of the original set.\n    partition_3 = third_case\n    sum_3 = partition_3*(partition_3+1)/2\n    # We can partition n using the fourth and fifth cases, so we need to sum the partitions using only the fourth case.\n    # The final result of the sum is equal to the number of partitions of the last element of the original set.\n    partition_4 = fourth_case\n    sum_4 = partition_4*(partition_4+1)/2\n    # We can partition n using the fifth and sixth cases, so we need to sum the partitions using only the fifth case.\n    # The final result of the sum is equal to the number of partitions of the last element of the original set.\n    partition_5 = fifth_case\n    sum_5 = partition_5*(partition_5+1)/2\n    # We can partition n using the sixth and seventh cases, so we need to sum the partitions using only the sixth case.\n    # The final result of the sum is equal to the number of partitions of the last element of the original set.\n    partition_6 = sixth_case\n    sum_6 = partition_6*(partition_6+1)/2\n    # We can partition n using the seventh and the last cases, so we need to sum the partitions using only the seventh case.\n    # The final result of the sum is equal to the number of partitions of the last element of the original set.\n    partition_7 = seventh_case\n    sum_7 = partition_7*(partition_7+1)/2\n    # We can partition n using the last and the eighth cases, so we need to sum the partitions using only the last case.\n    # The final result of the sum is equal to the number of partitions of the last element of the original set.\n    partition_8 = last_case\n    sum_8 = partition_8*(partition_8+1)/2\n    # Finally we need to sum the partitions of each partition to get the final result.\n    return sum_1 + sum_2 + sum_3 + sum_4 + sum_5 + sum_6 + sum_7 + sum_8\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] <= A[j]:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 1\n    j = 0\n    while i < len(A):\n        if A[j] >= A[i]:\n            j+=1\n            if j == len(A) - 1:\n                return \"Yes\"\n        else:\n            return \"No\"\n    return \"No\"\n    \ndef Palindrome(A): \n    '''\n    Write a python function to check whether the given array is palindrome or not.\n    '''\n    if A == A[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    size = len(A)\n    if size<=1:\n        return True\n    # checking if we can make a decreasing sequence\n    decreasing = A[0] < A[1]\n    # checking if we can make a decreasing sequence\n    for i in range(1, size-1):\n        if A[i]<A[i+1]:\n            decreasing = False\n            break\n    # checking if we can make a decreasing sequence\n    for i in range(1, size-1):\n        if A[i-1] > A[i]:\n            decreasing = False\n            break\n    return decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    monotonic = True\n    for i in range(len(A)):\n        if i == 0:\n            continue\n        elif A[i] < A[i-1]:\n            monotonic = False\n            break\n    \n    for i in range(len(A)):\n        if i == 0:\n            continue\n        elif A[i] > A[i-1]:\n            monotonic = False\n            break\n    \n    return monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)):\n        for j in range(len(A) - 1):\n            if A[i] > A[j+1]: \n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #print(len(A))\n    if len(A) < 2: return True\n    if A[0] < A[1]:\n        for i in range(2,len(A)):\n            if A[i] < A[i-1]:\n                return False\n    elif A[0] > A[1]:\n        for i in range(2,len(A)):\n            if A[i] > A[i-1]:\n                return False\n    else:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == sorted(A):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if not A:\n        return False\n    A = sorted(A)\n    n = len(A)\n    for i in range(1, n):\n        if A[i-1] > A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==0:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    if A == sorted(A[::-1]):\n        return True\n    return False\n    \nA = [6, 7, 7, 8]\nB = [1, 2, 3, 4]\nC = [4, 3, 2, 1]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    for item in l:\n        if item == s[0]:\n            if i == len(s) - 1:\n                return True\n            i += 1\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # IMPLEMENT THIS\n    if len(l) < len(s):\n        return False\n    else:\n        for i in range(len(s)):\n            if l[i]!= s[i]:\n                return False\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for elem in l:\n        if elem == s[0]:\n            if elem == s[-1]:\n                for x in range(1, len(s)):\n                    if s[x]!= l[x]:\n                        return False\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l.startswith(i) for i in s)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for x in l:\n        if is_sublist(s, x):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    if l[0:len(s)] == s:\n        return True\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if type(Input)==list:\n        for i in range(0,len(Input)):\n            if len(Input[i])!=len(Input[0]):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)==0:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def sum_of_elements(Input):\n        for i in range(len(Input)-1):\n            if len(Input[i])!= len(Input[i+1]):\n                return False\n        return True\n    if sum_of_elements(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(0,len(Input)):\n        for j in range(0,len(Input[i])):\n            if Input[i][j]!= Input[i][j+1]:\n                count = 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # return all_equal_tuple(Input)\n    return all_equal_tuple_v1(Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l1=len(Input[0])\n    l2=len(Input[1])\n    l3=len(Input[2])\n    l4=len(Input[3])\n    if l1==l2 and l2==l3 and l3==l4:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        Input = input_to_list_of_tuples(Input)\n        List = []\n        for i in range(0,len(Input)):\n            for j in range(i+1,len(Input)):\n                if (len(Input[i])==len(Input[j])):\n                    List.append(True)\n                else:\n                    List.append(False)\n        if(False in List):\n            return False\n        else:\n            return True\n    except:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def is_equal(tup1, tup2):\n        return len(tup1) == len(tup2)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0,len(Input)-1):\n        if len(Input[i])!=len(Input[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    lenght = len(nums)\n    if lenght <= 1:\n        return nums\n    for i in range(lenght-1):\n        if nums[i] <= nums[i+1]:\n            continue\n        else:\n            # sort everything between i and j and then swap\n            for j in range(i+1,lenght):\n                if nums[i] > nums[j]:\n                    temp = nums[i]\n                    nums[i] = nums[j]\n                    nums[j] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    else:\n        pivot = nums[0]\n        less = []\n        equal = []\n        greater = []\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            j = i\n            tmp = nums[i]\n            while j >= gap and nums[j - gap] > tmp:\n                nums[j] = nums[j - gap]\n                j -= gap\n            nums[j] = tmp\n        gap //= 2\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums)<=1:\n        return\n    elif len(nums)==2:\n        if nums[0]<nums[1]:\n            return nums\n        else:\n            return [nums[1],nums[0]]\n    else:\n        pivot = nums.pop(0)\n        less = []\n        more = []\n        for i in nums:\n            if i < pivot:\n                less.append(i)\n            else:\n                more.append(i)\n        \n        return comb_sort(less) + [pivot] + comb_sort(more)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1,i,-1):\n            if nums[j-1]>nums[j]:\n                nums[j-1],nums[j] = nums[j],nums[j-1]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    len_nums = len(nums)\n    gap = len_nums\n    while gap > 1:\n        gap = gap // 2\n        for i in range(len_nums-gap):\n            if nums[i] > nums[i+gap]:\n                temp = nums[i]\n                nums[i] = nums[i+gap]\n                nums[i+gap] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    if l < 2:\n        return nums\n    for i in range(l):\n        for j in range(i, l):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if isinstance(n, int):\n        if n >= 0:\n            if (n*n)%1 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    i = 0\n    \n    while(i*i < n):\n        i+=1\n    \n    print(i)\n    \n    if(i*i == n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=1\n    while i*i<=n:\n        if n-i*i==0:\n            print(f\"{i} + {n-i} = {i*i}\")\n            break\n        i+=1\n    else:\n        print(f\"{n} is not the sum of squares of two perfect squares\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n < 0):\n        print(\"Sorry! We can't represent negative numbers\")\n    elif(n == 0):\n        print(\"Zero\")\n    else:\n        x = 1\n        while(x*x <= n):\n            if((n-x*x) == 0):\n                print(\"{} can be represented as: {}*{}\".format(n,x,x))\n                break\n            x += 1\n        else:\n            print(\"Sorry! We can't represent {}\".format(n))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<0:\n        return False\n    elif n==0:\n        return True\n    else:\n        return (dif_Square(n-1) and (n%4==0 or n%4==1))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if n - i * i == i * i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # integer \n    \n    # helper function to check if the given number can be represented as the difference of two squares or not\n    def check_Square(n): \n        # if the given number is less than 0 then it cannot be represented as the difference of two squares\n        if n < 0: \n            return False\n        # square of the given number \n        sqr = n * n \n        # square of the given number\n        sqr2 = n + n \n        # square of the given number\n        sqr3 = n - n \n        # check if the given number is same as the sum of the squares of the given number \n        if sqr == sqr2 or sqr == sqr3: \n            return True\n        # if it is not same as the sum of the squares of the given number, return False\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def sq(n):\n        sq=0\n        while(n>0):\n            sq+=n%10\n            n=n//10\n        return sq\n    if(sq(n)==n):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n in (1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 896, 949, 996, 1004, 1025, 1061, 1112, 1159, 1216, 1281, 1337, 1392, 1449, 1496, 1557, 1599, 1664, 1732, 1787, 1857, 1899, 1975, 2041, 2093, 2163, 2195, 2266, 2309, 2371, 2437, 2498, 2568, 2599, 2671, 2733, 2797, 2867, 2937, 2989, 3057, 3099, 3175, 3226, 3278, 3337, 3392, 3458, 3496, 3560, 3593, 3654, 3718, 3781, 3842, 3896, 3967, 4009, 4088, 4137, 4199, 4266, 4343, 4391, 4497, 4558, 4599, 4686, 4758, 4798, 4861, 4855, 4894, 4983, 5051, 5090, 5158, 5286, 5405, 5466, 5540, 5575, 5629, 5785, 5842, 5895, 5946, 5994, 6039, 6089, 6163, 6262, 6335, 6403, 6499, 6575, 6658, 6699, 6770, 6830, 6874, 6929, 6978, 7057, 7098, 7175, 7264, 7353, 7405, 7458, 7480, 7481, 7523, 7534, 7541, 7580, 7582, 7629, 7678, 7727, 7788, 7896, 7917, 7941, 7969, 7989, 8009, 8061, 8120, 8144, 8199, 8249, 8299, 8358, 8405, 8433, 8467, 8531, 8580, 8641, 8690, 8724, 8771, 8770, 8832, 8874, 8925, 8975, 9037, 9084, 9103, 9144, 9191, 9244, 9298, 9356, 9405, 9418, 9473, 9491, 9554, 9599, 9616, 9661, 9673, 9742, 9790, 9824, 9879, 9925, 9990, 10021, 10078, 10137, 10185, 10245, 10291, 10391, 10415, 10454, 10493, 10554, 10565, 10601, 10658, 10699, 10775, 10831, 10875, 10933, 10988, 11043, 11089, 11158, 11191, 11252, 11298, 11344, 11397, 11419, 11435, 11437, 11535, 11599, 11635, 11666, 11787, 11826, 11872, 11933, 11987, 12046, 12092, 12188, 12306, 12386, 12445, 12476, 12496, 12516, 12545, 12581, 12611, 12644, 12684, 12732, 12790, 12827, 12872, 12932, 12969, 12988, 13109, 13190, 13267, 13323, 13347, 13405, 13443, 13439, 13536, 13544, 13585, 13644, 13669, 13697, 13721, 13761, 13775, 13796, 13801, 13844, 13895, 13927, 13971, 13982, 14058, 14079, 14099, 14118, 14167, 14231, 14278, 14331, 14311, 14375, 14477, 14518, 14534, 14537, 14601, 14620, 14637, 14723, 14729, 14741, 14769, 14816, 14836, 14871, 14913, 14944, 14980, 15031, 15078, 15105, 15167, 15240, 15286, 15374, 15407, 15415, 15453, 15469, 15496, 15523, 15526, 15549, 15564, 15585, 15624, 15670, 15730, 15747, 15765, 15775, 15826, 15880, 15900, 15930, 15963, 15985, 16079, 16084, 16093, 16094, 16150, 16211, 16268, 16309, 16322, 16384, 16450, 16482, 16563, 16569, 16603, 16637, 16670, 16750, 16803, 16813, 16843, 16877, 16930, 16973, 17019, 17045, 17091, 17135, 17216, 17236, 17255, 17331, 17341, 17365, 17368, 17380, 17452, 17477, 17499, 17525, 17531, 17537, 17581, 17581, 17620, 17649, 17676, 17700, 17726, 17741, 17781, 17790, 17793, 17813, 17839, 17862, 17892, 17905, 17935, 17978, 18012, 18062, 18104, 18119, 18154, 18180, 18192, 18198, 18256, 18280, 18334, 18352, 18390, 18442, 18451, 18478, 18510, 18522, 18532, 18536, 18571, 18713, 18718, 18737, 18741, 18747, 18749, 18787, 18849, 18872, 18923, 18932, 18940, 18947, 18967, 18969, 19020, 19022, 19052, 19081, 19122, 19180, 19233, 19267, 19273, 19291, 19293, 19301, 19333, 19372, 19380, 19387, 19405, 19419, 19461, 19477, 19489, 19517, 19518, 19551, 19553, 19554, 19556, 19567, 19581, 19591, 19599, 19616, 19619, 19627, 19629, 19649, 19662, 19672, 19682, 19697, 19699, 19703, 19713, 19721, 19724, 19733, 19739, 19761, 19773, 19788, 19811, 19822, 19840, 19843, 19873, 19905, 19914, 19928, 19937, 19978, 19987, 19991, 19998, 20014, 20020, 20032, 20053, 20059, 20063, 20084, 20087, 20125, 20102, 20108, 20113, 20119, 20127, 20134, 20140, 20150, 20191, 20202, 20234, 20245, 20271, 20287, 20299, 20308, 20336, 20349, 20350, 20354, 20360, 20367, 20371, 20379, 20387, 20388, 20394, 20407, 20404, 20413, 20419, 20423, 20431, 20443, 20449, 20453, 20459, 20461, 20472, 20479, 20481, 20483, 20541, 20547, 20557, 20563, 20567, 20587, 20596, 20605, 20607, 20627, 20631, 20638, 20659, 20663, 20676, 20687, 20693, 20698, 20701, 20718, 20743, 20747, 20753, 20759, 20771, 20778, 20789, 20807, 20819, 20828, 20837, 20842, 20848, 20866, 20873, 20881, 20891, 20902, 20926, 20937, 20944, 20958, 20972, 20989, 20995, 21009, 21012, 21017, 21019, 21023, 21037, 21048, 21061, 21064, 21085, 21099, 21122, 21123, 21124, 21125, 21126, 21128, 21129, 21130, 21145, 21150, 21157, 21163, 21169, 21172, 21184, 21189, 21190, 21197, 21203, 21213, 21214, 21224, 21232, 21233, 21235, 21236, 21241, 21247, 21252, 21254, 21258, 21259, 21264, 21265, 21269, 21280, 21303, 21310, 21311, 21314, 21317, 21327, 21347, 21348, 21350, 21353, 21354, 21359, 21365, 21367, 21373, 21387, 21391, 21392, 21393, 21399, 21407, 21412, 21413, 21414, 21417"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(is_square(n)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors)!= len(patterns):\n        return False\n    \n    for color, pattern in zip(colors, patterns):\n        if color!= pattern[0] and color!= pattern[1] and color!= pattern[2]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if(color == pattern):\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == colors[i]:\n            continue\n        else:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index=0\n    for color in colors:\n        if color!=patterns[index]:\n            return False\n        index+=1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if color not in pattern:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index = 0\n    while index < len(patterns):\n        if patterns[index] in colors:\n            index += 1\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if(patterns[i]!= patterns[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        pattern = p[0]\n        color = p[1]\n        if not is_same_pattern(color, pattern, colors):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    col = 0\n    pat = 0\n    while pat < len(patterns):\n        if colors[col] == patterns[pat]:\n            pat += 1\n            col += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] not in colors:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if(test_list[i][0] % K == 0):\n            new_list.append(test_list[i])\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x[0] * x[1]) for x in test_list if (x[0] % K == 0 or x[1] % K == 0)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for i in test_list:\n        if len(i) > 2:\n            x = list(i)\n            while len(x) > 1:\n                if x[0] % K == 0 or x[1] % K == 0:\n                    final_list.append(tuple(x))\n                x = x[2:]\n    return final_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] % K) == 0 and (test_list[j][0] % K) == 0:\n                pairs.append((test_list[i], test_list[j]))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = test_list\n    ans = []\n    for i in range(len(tuples)):\n        if (tuple(sorted(tuples[i])) in tuples) == True:\n            #print(tuple(sorted(tuples[i])))\n            ans.append(tuple(sorted(tuples[i])))\n    return (ans)\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    for i in test_list:\n        if (sum(i)%K)==0:\n            tuple_list.append(i)\n    return tuple_list\n        \ndef sum_of_tuples(test_list, K):\n    '''\n    Write a function to sum all the elements in the tuple\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += sum(i)\n    return total_sum\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K > len(test_list):\n        return None\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % K!= 0 or test_list[j][0] % K!= 0:\n                continue\n            else:\n                if test_list[i][1] == test_list[j][1]:\n                    return test_list[i] + test_list[j]\n    return None\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    all_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[j][0] % K == 0 and test_list[j][1] % K == 0:\n                all_tuples.append((test_list[i][0],test_list[i][1]))\n                all_tuples.append((test_list[j][0],test_list[j][1]))\n    return all_tuples\n    \n    \n    \n    \ndef find_triples(test_list):\n    '''\n    Write a function to find the triples which have all elements divisible by 3 from the given list of tuples.\n    '''\n    all_triples = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            for k in range(j+1,len(test_list)):\n                if test_list[i][0] % 3 == 0 and test_list[i][1] % 3 == 0 and test_list[j][0] % 3 == 0 and test_list[j][1] % 3 == 0 and test_list[k][0] % 3 == 0 and test_list[k][1] % 3 == 0:\n                    all_triples.append((test_list[i][0],test_list[i][1]))\n                    all_triples.append((test_list[j][0],test_list[j][1]))\n                    all_triples.append((test_list[k][0],test_list[k][1]))\n    return all_triples\n    \n    \n    \n    \ndef find_quartiles(test_list):\n    '''\n    Write a function to find the quartiles which have all elements divisible by 4 from the given list of tuples.\n    '''\n    all_quartiles = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            for k in range(j+1,len(test_list)):\n                for l in range(k+1,len(test_list)):\n                    if test_list[i][0] % 4 == 0 and test_list[i][1] % 4 == 0 and test_list[j][0] % 4 == 0 and test_list[j][1] % 4 == 0 and test_list[k][0] % 4 == 0 and test_list[k][1] % 4 == 0 and test_list[l][0] % 4 == 0 and test_list[l][1] % 4 == 0:\n                        all_quartiles.append((test_list[i][0],test_list[i][1]))\n                        all_quartiles.append((test_list[j][0],test_list[j][1]))\n                        all_quartiles.append((test_list[k][0],test_list[k][1]))\n                        all_quartiles.append((test_list[l][0],test_list[l][1]))\n    return all_quartiles\n    \n    \n    \n    \ndef find_quintiles(test_list):\n    '''\n    Write a function to find the quintiles which have all elements divisible by 5 from the given list of tuples.\n    '''\n    all_quintiles = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            for k in range(j+1,len(test_list)):\n                for l in range(k+1,len(test_list)):\n                    for m in range(l+1,len(test_list)):\n                        if test_list[i][0] % 5 == 0 and test_list[i][1] % 5 == 0 and test_list[j][0] % 5 == 0 and test_list[j][1] % 5 == 0 and test_list[k][0] % 5 == 0 and test_list[k][1] % 5 == 0 and test_list[l][0] % 5 == 0 and test_list[l][1] % 5 == 0 and test_list[m][0] % 5 == 0 and test_list[m][1] % 5 == 0:\n                            all_quintiles.append((test_list[i][0],test_list[i][1]))\n                            all_quintiles.append((test_list[j][0],test_list[j][1]))\n                            all_quintiles.append((test_list[k][0],test_list[k][1]))\n                            all_quintiles.append((test_list[l][0],test_list[l][1]))\n                            all_quintiles.append((test_list[m][0],test_list[m][1]))\n    return all_quintiles\n    \n    \n    \n    \ndef find_sextiles(test_list):\n    '''\n    Write a function to find the sextiles which have all elements divisible by 6 from the given list of tuples.\n    '''\n    all_sextiles = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            for k in range(j+1,len(test_list)):\n                for l in range(k+1,len(test_list)):\n                    for m in range(l+1,len(test_list)):\n                        for n in range(m+1,len(test_list)):\n                            if test_list[i][0] % 6 == 0 and test_list[i][1] % 6 == 0 and test_list[j][0] % 6 == 0 and test_list[j][1] % 6 == 0 and test_list[k][0] % 6 == 0 and test_list[k][1] % 6 == 0 and test_list[l][0] % 6 == 0 and test_list[l][1] % 6 == 0 and test_list[m][0] % 6 == 0 and test_list[m][1] % 6 == 0 and test_list[n][0] % 6 == 0 and test_list[n][1] % 6 == 0:\n                                all_sextiles.append((test_list[i][0],test_list[i][1]))\n                                all_sextiles.append((test_list[j][0],test_list[j][1]))\n                                all_sextiles.append((test_list[k][0],test_list[k][1]))\n                                all_sextiles.append((test_list[l][0],test_list[l][1]))\n                                all_sextiles.append((test_list[m][0],test_list[m][1]))\n                                all_sextiles.append((test_list[n][0],test_list[n][1]))\n    return all_sextiles\n    \n    \n    \n    \ndef find_octiles(test_list):\n    '''\n    Write a function to find the octiles which have all elements divisible by 7 from the given list of tuples.\n    '''\n    all_octiles = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            for k in range(j+1,len(test_list)):\n                for l in range(k+1,len(test_list)):\n                    for m in range(l+1,len(test_list)):\n                        for n in range(m+1,len(test_list)):\n                            for o in range(n+1,len(test_list)):\n                                if test_list[i][0] % 7 == 0 and test_list[i][1] % 7 == 0 and test_list[j][0] % 7 == 0 and test_list[j][1] % 7 == 0 and test_list[k][0] % 7 == 0 and test_list[k][1] % 7 == 0 and test_list[l][0] % 7 == 0 and test_list[l][1] % 7 == 0 and test_list[m][0] % 7 == 0 an"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        for j in range(i,len(test_list)):\n            #print(test_list[i], test_list[j])\n            if ((test_list[i][0] + test_list[i][1])%K == 0) and ((test_list[j][0] + test_list[j][1])%K == 0):\n                output.append((test_list[i],test_list[j]))\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if(test_list[i][0] % K == 0) and (test_list[i][1] % K == 0):\n                if(test_list[j][0] % K == 0) and (test_list[j][1] % K == 0):\n                    return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    return False\n    \ndef is_Palindrome(n):\n    '''\n    Write a python function to check whether a given number is a Palindrome or not.\n    '''\n    if (str(n) == str(n)[::-1]):\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    print(\"Function is_Diff called.\")\n    print(\"Number is \",n,\"\\n\")\n    if (n%11==0):\n        print(\"The number is divisible by 11\")\n    else:\n        print(\"The number is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print('Yes')\n    else:\n        print('No')\n        \nis_Diff(19)\nis_Diff(31)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # if n%11==0:\n    #     print('True')\n    # else:\n    #     print('False')\n    if n%11==0:\n        return True\n    else:\n        return False\n    # return True if n%11==0 else False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 ==0:\n        print('The number is divisible by 11')\n    else:\n        print('The number is not divisible by 11')\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n    "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s)\n    if n%2==0:\n        print('Word is even')\n    else:\n        print('Word is odd')\n        \ndef is_even(n):\n    '''\n    Write a python function to check whether the number is even or not.\n    '''\n    if n%2==0:\n        print('Even')\n    else:\n        print('Odd')\n    \ndef string_reverse(s):\n    '''\n    Write a python function to print the reverse of a string.\n    '''\n    rev = \"\"\n    for i in range(len(s)-1,-1,-1):\n        rev += s[i]\n    print(rev)\n    \ndef string_split(s):\n    '''\n    Write a python function to split the string into a list.\n    '''\n    print(s.split(' '))\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s = s.lower()\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef string_to_number(s):\n    '''\n    Write a python function to convert the string into number.\n    '''\n    s = s.strip()\n    if s.isdigit():\n        return int(s)\n    else:\n        return -1\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a given integer is a prime number or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    \ndef is_prime_rec(n):\n    '''\n    Write a python function to check whether a given integer is a prime number or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i==0:\n                return False\n        return True\n    \ndef two_list_intersection(l1,l2):\n    '''\n    Write a python function to find the intersection of 2 list.\n    '''\n    if len(l1)<len(l2):\n        l1,l2 = l2,l1\n    temp = []\n    i = 0\n    j = 0\n    while i<len(l1) and j<len(l2):\n        if l1[i]==l2[j]:\n            temp.append(l1[i])\n            i += 1\n            j += 1\n        else:\n            if l1[i]<l2[j]:\n                i += 1\n            else:\n                j += 1\n    return temp\n    \ndef is_palindrome_rec(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(s)<=1:\n        return True\n    else:\n        if s[0]==s[-1]:\n            return is_palindrome_rec(s[1:-1])\n        else:\n            return False\n            \ndef is_palindrome_iter(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    i = 0\n    j = len(s)-1\n    while i<j:\n        if s[i]!=s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_palindrome_rec_space_optimised(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s = s.lower()\n    if len(s)<=1:\n        return True\n    else:\n        if s[0]==s[-1]:\n            return is_palindrome_rec_space_optimised(s[1:-1])\n        else:\n            return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return s\n    else:\n        return s[0:len(s)-1]\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!=0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def list_numbers(n, start, end):\n        if n == 1: \n            return 0\n        if start < end:\n            mid = (start + end) // 2\n            return (list_numbers(n - 1, start, mid) + list_numbers(n - 1, mid + 1, end))\n        else:\n            return start + 1\n    return list_numbers(n, 0, 100)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    a = 1\n    k = 1\n    \n    while k < n: \n        a = a * 2 + 1\n        k += 1\n    return a\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def count_tetrahedral_numbers(n, m, n_range=range(1, 1000)): \n        '''\n        This function is used to compute the nth tetrahedral number\n        '''\n        if n == 1: \n            return sum(map(lambda x: x, m))\n        else: \n            n -= 1\n            total = 0\n            for i in n_range: \n                if m[i - 1]!= 0: \n                    total += count_tetrahedral_numbers(n, m, n_range)\n                    break\n            return total\n    return count_tetrahedral_numbers(n, [0] * 10)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for n in range(1, n):\n        print(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    ans = 0\n    for i in range(1, n+1):\n        ans += i\n    return ans\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetra_num = 2\n    return tetra_num\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        n = n * (n - 1) // 2\n        return n\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def check(n):\n        if n%2 == 0:\n            return True\n        else:\n            return False\n    #start\n    count = 0\n    while count < n:\n        if check(count):\n            count += 1\n        else:\n            count += 2\n    return count\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return -1\n    elif n <= 3:\n        return 1\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*(math.pi)*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r > 0:\n        return math.pi * (r**2)\n    else:\n        return \"Error, radius must be non-negative\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * (r**2)*h\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2) * math.sin(math.radians(h))\ndef volume_cone_torus(r, h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return (math.pi * r**2) * h * r\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*(a+b)/2\ndef volume_pyramid_torus(a,b,h):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return a*b*h*2/(math.sin(math.radians(h))*(a+b))\ndef volume_pyramid_torus_double_torus(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))\ndef volume_pyramid_torus_double_torus_short(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return ((a+b)*(r**2))*math.sin(math.radians(h))/2\ndef volume_pyramid_torus_double_torus_short_double_long_long_long_long_long_long_long_long_long_long_long(a,b,h,r):\n    '''\n    Write a function to find the volume of a toru"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    area = (4/3)*math.pi*r**3\n    return area\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylindrical volume.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef volume_cone(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi)*(r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)\n    return area\ndef volume_cone_3(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi)*(r1**2)*(r2**2)-(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cone_2(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi*(r**2)*(h**2)\n    return area\ndef volume_cone_4(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi)*(r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cone_5(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi*(r**2)*(h**2)-(math.pi/3)*(r**2)*(h**2)\n    return area\ndef volume_cone_6(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi)*(r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cylinder_2(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    area = math.pi*(r**2)*(h**2)\n    return area\ndef volume_cylinder_3(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    area = math.pi*(r**2)*h\n    return area\ndef volume_cylinder_4(r1, r2, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    area = math.pi*(r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)\n    return area\ndef volume_cylinder_5(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    area = (math.pi/3)*(r**2)*h\n    return area\ndef volume_cylinder_6(r1, r2, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    area = math.pi*(r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cone_2_2(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi*r1**2)*(r2**2)\n    return area\ndef volume_cone_2_3(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi*(r**2)*h\n    return area\ndef volume_cone_2_4(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi*r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)\n    return area\ndef volume_cone_2_5(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi/3)*(r**2)*h\n    return area\ndef volume_cone_2_6(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi*r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cone_2_7(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi*(r**2)*(h**2)\n    return area\ndef volume_cone_2_8(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi*r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cone_2_9(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi/3)*(r**2)*h\n    return area\ndef volume_cone_2_10(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi*r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cone_2_11(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi*(r**2)*(h**2)\n    return area\ndef volume_cone_2_12(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi*r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cone_2_13(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi/3)*(r**2)*h\n    return area\ndef volume_cone_2_14(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi*r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cone_2_15(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi*(r**2)*(h**2)\n    return area\ndef volume_cone_2_16(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi*r1**2)*(r2**2)+(math.pi/3)*(r1**2)*(r2**2)+math.pi*r1*h\n    return area\ndef volume_cone_2_17(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (math.pi/3)*(r**2)*h\n    return area\ndef volume_con"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4/3 * math.pi * (r ** 3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    return (4/3)*pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r ** 3\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\")\n    dic={}\n    for i in strr:\n        if i not in dic.keys():\n            dic[i]=ord(i)\n    result=0\n    for i in dic:\n        result+=dic[i]%26\n    return result\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input(\"Enter the string: \")\n    \n    strr=strr.replace(\" \",\"\""
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    chars=ord(strr)\n    chars=chars+26\n    return chr(chars)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # creating a list to store ASCII values\n    ASCII_list = []\n    # storing the ASCII value of each character in the list\n    for i in strr:\n        ASCII_list.append(ord(i))\n    # returning the ASCII value of the first character\n    return ASCII_list[0]\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0]) + ord(strr[1]) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def get_Char(strr): \n            return sum([ord(i) for i in strr]) % 26\n    \n    \n    \n    \n    if __name__ == \"__main__\":\n        strr = \"hello\"\n        result = get_Char(strr)\n        print(result)  \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n       "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in range(len(strr)):\n        res += ord(strr[i])\n    return (res % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_value = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    sum = 0\n    for i in strr:\n        sum += ASCII_value[i]\n    return sum % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = ord(strr)\n    char = char - char%26\n    return chr(char)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    arr = []\n    for i in strr:\n        arr.append(ord(i))\n    \n    for j in range(0,len(arr)):\n        count = count + arr[j]\n    \n    return count % 26\n    \n    "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        count += 1\n        num *= 3\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num = 3 * num + 1\n    return num\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    c = 0\n    n2 = 0\n    while n2 < n:\n        c += 1\n        if c % 2 == 0:\n            n2 += 1\n        else:\n            n2 -= 1\n    return c\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1,2]\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 0\n    result = 1\n    while i < n:\n        result = result * 2 - 1\n        i += 1\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = {1:1, 2:2}\n    for i in range(3, n+1):\n        seq[i] = seq[i-1] + seq[i-2]\n    return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Algorithm:\n    # start with the 1st and 2nd number in the sequence:\n    # get the current number by adding 2 (next) numbers together\n    # then multiply it by 3 (next) numbers\n    # and finally add one (next) number\n    # until we run out of numbers in the sequence\n    current = 1 + 2\n    while n > 0:\n        current = current * 3\n        current = current + 1\n        n = n - 1\n    return current\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    for i in range(0, n):\n        c = a + b + c\n        a = b\n        b = c\n    return c\n    \nsequence(10)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * sequence(n-1) + n\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (sequence(n-1) + sequence(n-2))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #area of the sphere = 4 * pi * r^2\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * r**2\ndef surfacearea_cube(c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * c**2\ndef surfacearea_cylinder(h,r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    return pi * h * r**2\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi = math.pi\n    return pi * r**2 * h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3 * pi * r**3\ndef volume_cube(c):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return 6 * c**3\ndef volume_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = math.pi\n    return pi * h * r**3\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return pi * r**3 * h\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    pi = math.pi\n    return a * b * pi / 3\ndef volume_heights(a,b,c,d,e):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    pi = math.pi\n    return a * b * c * d * e / 3\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    pi = math.pi\n    return a * b * pi\ndef volume_trapezoid(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    pi = math.pi\n    return a * b / 2 * h\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    pi = math.pi\n    return pi * r**3\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    pi = math.pi\n    return a * a\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a * b\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pi = math.pi\n    return pi * r**2\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    pi = math.pi\n    return a * b * c / 2\ndef volume_cube(c):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return c**3\ndef volume_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = math.pi\n    return pi * h * r**2\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return pi * r**2 * h\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    pi = math.pi\n    return a * b * pi / 3\ndef volume_heights(a,b,c,d,e):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    pi = math.pi\n    return a * b * c * d * e / 3\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    pi = math.pi\n    return a * b * pi\ndef volume_trapezoid(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    pi = math.pi\n    return a * b / 2 * h\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    pi = math.pi\n    return pi * r**3 / 3\ndef circumference_square(a):\n    '''\n    Write a function to find the circumference of a square.\n    '''\n    pi = math.pi\n    return 2 * a * pi\ndef circumference_rectangle(a,b):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    return 2 * a + 2 * b\ndef circumference_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = math.pi\n    return 2 * pi * r\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    pi = math.pi\n    return a * a * pi / 4\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a * b\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pi = math.pi\n    return pi * r**2\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    pi = math.pi\n    return a + b + c\ndef surfacearea_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    pi = math.pi\n    return a * a * pi / 4\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    pi = math.pi\n    return pi * r**2\ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    pi = math.pi\n    return a * b * pi / 3\ndef volume_heights(a,b,c,d,e):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    pi = math.pi\n    return a * b * c * d * e / 3\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    pi = math.pi\n    return a * b * pi\ndef volume_trapezoid(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    pi = math.pi\n    return a * b / 2 * h\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    pi = math.pi\n    return pi * r**2\ndef circumference_square(a):\n    '''\n    Write a function to find the circumference of a square.\n    '''\n    pi = math.pi\n    return a * 2 * pi\ndef circumference_rectangle(a,b):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    return 2 * a + 2 * b\ndef circumference_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = math.pi\n    return 2 * pi * r\ndef area_square(a):\n    '''\n    Write a function to find the area of a squar"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\ndef circumference_sphere(r):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    return 2 * math.pi * r\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 / 3) * math.pi * r**3\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * (r + h) * h\ndef circumference_cylinder(r, h):\n    '''\n    Write a function to find the circumference of a cylinder.\n    '''\n    return 2 * math.pi * (r + h)\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * h * (r**2 + h**2)\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * (r**2 + h**2) + (2 * math.pi * h * r)\ndef circumference_cone(r, h):\n    '''\n    Write a function to find the circumference of a cone.\n    '''\n    return 2 * math.pi * r + 2 * math.pi * h\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2 + h**2) * h\ndef surfacearea_cone_3D(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * (r**2 + h**2) + (2 * math.pi * h * r)\ndef circumference_cone_3D(r, h):\n    '''\n    Write a function to find the circumference of a cone.\n    '''\n    return 2 * math.pi * r + 2 * math.pi * h\ndef volume_cone_3D(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2 + h**2) * h\ndef surfacearea_sphere_3D(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**3)\ndef circumference_sphere_3D(r):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\ndef volume_sphere_3D(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * (r**3)\ndef surfacearea_cylinder_3D(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * (r + h) * h + 2 * math.pi * h * r**2\ndef circumference_cylinder_3D(r, h):\n    '''\n    Write a function to find the circumference of a cylinder.\n    '''\n    return 2 * math.pi * (r + h) + 2 * math.pi * h\ndef volume_cylinder_3D(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * h * (r**2 + h**2)\ndef surfacearea_cone_3D(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * (r**2 + h**2) + 2 * math.pi * h * r + 2 * math.pi * h * r * math.sin(math.pi / 180)\ndef circumference_cone_3D(r, h):\n    '''\n    Write a function to find the circumference of a cone.\n    '''\n    return 2 * math.pi * r + 2 * math.pi * h\ndef volume_cone_3D(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2 + h**2) * h + math.pi * r * h * h\ndef surfacearea_sphere_pyramid(r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 4 * math.pi * (r**2)\ndef circumference_sphere_pyramid(r):\n    '''\n    Write a function to find the circumference of a pyramid.\n    '''\n    return 2 * math.pi * (r**2)\ndef volume_sphere_pyramid(r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 4 / 3 * math.pi * (r**2)\ndef surfacearea_cylinder_pyramid(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * (r + h) * h + 2 * math.pi * h * r**2\ndef circumference_cylinder_pyramid(r, h):\n    '''\n    Write a function to find the circumference of a cylinder.\n    '''\n    return 2 * math.pi * (r + h) + 2 * math.pi * h\ndef volume_cylinder_pyramid(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * h * (r**2 + h**2)\ndef surfacearea_cone_pyramid(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * (r**2 + h**2) + 2 * math.pi * h * r + 2 * math.pi * h * r * math.sin(math.pi / 180)\ndef circumference_cone_pyramid(r, h):\n    '''\n    Write a function to find the circumference of a cone.\n    '''\n    return 2 * math.pi * r + 2 * math.pi * h\ndef volume_cone_pyramid(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2 + h**2) * h + math.pi * r * h * h\ndef surfacearea_sphere_pyramid_3D(r):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 4 * math.pi * (r**3)\ndef circumference_sphere_pyramid_3D(r):\n    '''\n    Write a function to find the circumference of a pyramid.\n    '''\n    return 4 * math.pi * (r**2)\ndef volume_sphere_pyramid_3D(r):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 4 / 3 * math.pi * (r**3)\ndef surfacearea_cylinder_pyramid_3D(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * (r + h) * h + 2 * math.pi * h * r**2\ndef circumference_cylinder_pyramid_3D(r, h):\n    '''\n    Write a function to find the circumference of a cylinder.\n    '''\n    return 2 * math.pi * (r + h) + 2 * math.pi * h\ndef volume_cylinder_pyramid_3D(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * h * (r**2 + h**2)\ndef surfacearea_cone_pyramid_3D(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * (r**2 + h**2) + 2 * math.pi * h * r + 2 * math.p"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    from math import pi\n    return 4 * pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surfacearea = 4 * pi * r ** 2\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * (r * h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * (r**2) * h\ndef area_square(a,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a * b\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (a + b + c) / 2\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return ((a+b) * h)/2\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a * b\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi * (r**2)\ndef volume_cube(d):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return d**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * (r**2) * h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r * (r+h))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a + b + c) / 2\ndef volume_trapezium(a,b,h):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    return ((a + b) * h)/2\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a * b\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return math.pi * (r**3)\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((a**2) * math.sqrt(3) * h)/3\ndef volume_cuboid(a,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return (a * b * h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return ((4/3) * math.pi * (r**2) * (r+h))\ndef volume_rectangularprism(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return (a * b * h)\ndef volume_trapezoidalprism(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoidal prism.\n    '''\n    return (a + b) * h\ndef volume_parallellprism(a,b,h):\n    '''\n    Write a function to find the volume of a parallell prism.\n    '''\n    return (a * b * h)\ndef volume_cube(d):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (d**3)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4/3) * math.pi * (r**3))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (2 * math.pi * (r**2))\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return ((4/3) * math.pi * (r**2) * h)\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((a**3) * math.sqrt(3) * h)/3\ndef volume_cuboid(a,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return (a * b * h)\ndef volume_cuboid(d,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return ((d**3) * h)/3\ndef volume_rectangularprism(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return (a * b * h)\ndef volume_trapezoidalprism(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoidal prism.\n    '''\n    return (a + b) * h\ndef volume_parallellprism(a,b,h):\n    '''\n    Write a function to find the volume of a parallell prism.\n    '''\n    return (a * b * h)\ndef volume_rectangularpyramid(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular pyramid.\n    '''\n    return (a * b * h)\ndef volume_trapezoidalpyramid(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoidal pyramid.\n    '''\n    return ((a + b) * h)/2\ndef volume_parallellpyramid(a,b,h):\n    '''\n    Write a function to find the volume of a parallell pyramid.\n    '''\n    return (a * b * h)\ndef volume_rectangularprism(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return (a * b * h)\ndef volume_trapezoidalprism(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoidal prism.\n    '''\n    return ((a + b) * h)/2\ndef volume_parallellprism(a,b,h):\n    '''\n    Write a function to find the volume of a parallell prism.\n    '''\n    return (a * b * h)\ndef volume_rectangularpyramid(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular pyramid.\n    '''\n    return (a * b * h)\ndef volume_trapezoidalpyramid(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoidal pyramid.\n    '''\n    return ((a + b) * h)/2\ndef volume_parallellpyramid(a,b,h):\n    '''\n    Write a function to find the volume of a parallell pyramid.\n    '''\n    return (a * b * h)\ndef volume_rectangularprism(d,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return (d * h)\ndef volume_trapezoidalprism(d,h):\n    '''\n    Write a function to find the volume of a trapezoidal prism.\n    '''\n    return (2 * d)\ndef volume_parallellprism(d,h):\n    '''\n    Write a function to find the volume of a parallell prism.\n    '''\n    return (d * h)\nde"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere_inner = (4 * math.pi * r**2)\n    surfacearea_sphere_outer = (4 * math.pi * (r+1)**2)\n    surfacearea_sphere = surfacearea_sphere_inner + surfacearea_sphere_outer\n    return surfacearea_sphere\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # the surface area of a sphere is 4*\u03c0*r**2\n    return 4*math.pi*r**2\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns true if the number is prime and false if the number is not prime.\n    '''\n    # check if n is divisible by any number in range(2,n//2)\n    # then check if n is divisible by any number in range(n//2,n)\n    # then check if n is divisible by any number in range(n//2,n)\n    # if n is divisible by any number in range(n//2,n) and not divisible by any number in range(2,n//2)\n    # then return false\n    # otherwise return true\n    for i in range(2,n//2):\n        if n%i == 0:\n            return False\n    for i in range(n//2,n):\n        if n%i == 0:\n            return False\n    for i in range(n//2,n):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v2(n):\n    '''\n    Write a function that takes a number and returns true if the number is prime and false if the number is not prime.\n    '''\n    # check if n is divisible by any number in range(2,n//2)\n    # then check if n is divisible by any number in range(n//2,n)\n    # then check if n is divisible by any number in range(n//2,n)\n    # if n is divisible by any number in range(n//2,n) and not divisible by any number in range(2,n//2)\n    # then return false\n    # otherwise return true\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v3(n):\n    '''\n    Write a function that takes a number and returns true if the number is prime and false if the number is not prime.\n    '''\n    # check if n is divisible by any number in range(2,n//2)\n    # then check if n is divisible by any number in range(n//2,n)\n    # then check if n is divisible by any number in range(n//2,n)\n    # if n is divisible by any number in range(n//2,n) and not divisible by any number in range(2,n//2)\n    # then return false\n    # otherwise return true\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v4(n):\n    '''\n    Write a function that takes a number and returns true if the number is prime and false if the number is not prime.\n    '''\n    # check if n is divisible by any number in range(2,n//2)\n    # then check if n is divisible by any number in range(n//2,n)\n    # then check if n is divisible by any number in range(n//2,n)\n    # if n is divisible by any number in range(n//2,n) and not divisible by any number in range(2,n//2)\n    # then return false\n    # otherwise return true\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v5(n):\n    '''\n    Write a function that takes a number and returns true if the number is prime and false if the number is not prime.\n    '''\n    # check if n is divisible by any number in range(2,n//2)\n    # then check if n is divisible by any number in range(n//2,n)\n    # then check if n is divisible by any number in range(n//2,n)\n    # if n is divisible by any number in range(n//2,n) and not divisible by any number in range(2,n//2)\n    # then return false\n    # otherwise return true\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v6(n):\n    '''\n    Write a function that takes a number and returns true if the number is prime and false if the number is not prime.\n    '''\n    # check if n is divisible by any number in range(2,n//2)\n    # then check if n is divisible by any number in range(n//2,n)\n    # then check if n is divisible by any number in range(n//2,n)\n    # if n is divisible by any number in range(n//2,n) and not divisible by any number in range(2,n//2)\n    # then return false\n    # otherwise return true\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return False\n    if n == 8:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v7(n):\n    '''\n    Write a function that takes a number and returns true if the number is prime and false if the number is not prime.\n    '''\n    # check if n is divisible by any number in range(2,n//2)\n    # then check if n is divisible by any number in range(n//2,n)\n    # then check if n is divisible by any number in range(n//2,n)\n    # if n is divisible by any number in range(n//2,n) and not divisible by any number in range(2,n//2)\n    # then return false\n    # otherwise return true\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return False\n    if n == 8:\n        return True\n    if n == 9:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v8(n):\n    '''\n    Write a function that takes a number and returns true if the number is prime and false if the number is not prime.\n    '''\n    # check if n is divisible by any number in range(2,n//2)\n    # then check if n is divisible by any number in range(n//2,n)\n    # then check if n is divisible by any number in range(n//2,n)\n    # if n is divisible by any number in range(n//2,n) and not divisible by any number in range(2,n//2)\n    # then return false\n    # otherwise return true\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return False\n    if n == 6"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print('**********************************************************************')\n    print('The surface area of a sphere is:', 4*math.pi*r**2)\n    print('**********************************************************************')\n    return None\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum([i * j for i, j in zip([i * 3 - 2, 2, 1, 1], [1, 2, 6, 5] ) if i > j ])\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (6*n**2 - 2*n + 1) / (3*n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n, n + 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 15\n    if n == 8:\n        return 17\n    if n == 9:\n        return 19\n    if n == 10:\n        return 23\n    if n == 11:\n        return 25\n    if n == 12:\n        return 27\n    if n == 13:\n        return 29\n    if n == 14:\n        return 31\n    if n == 15:\n        return 33\n    if n == 16:\n        return 35\n    if n == 17:\n        return 37\n    if n == 18:\n        return 39\n    if n == 19:\n        return 41\n    if n == 20:\n        return 43\n    if n == 21:\n        return 45\n    if n == 22:\n        return 47\n    if n == 23:\n        return 49\n    if n == 24:\n        return 51\n    if n == 25:\n        return 53\n    if n == 26:\n        return 55\n    if n == 27:\n        return 57\n    if n == 28:\n        return 59\n    if n == 29:\n        return 61\n    if n == 30:\n        return 63\n    if n == 31:\n        return 65\n    if n == 32:\n        return 67\n    if n == 33:\n        return 69\n    if n == 34:\n        return 71\n    if n == 35:\n        return 73\n    if n == 36:\n        return 75\n    if n == 37:\n        return 77\n    if n == 38:\n        return 79\n    if n == 39:\n        return 81\n    if n == 40:\n        return 83\n    if n == 41:\n        return 85\n    if n == 42:\n        return 87\n    if n == 43:\n        return 89\n    if n == 44:\n        return 91\n    if n == 45:\n        return 93\n    if n == 46:\n        return 95\n    if n == 47:\n        return 97\n    if n == 48:\n        return 99\n    if n == 49:\n        return 101\n    if n == 50:\n        return 103\n    if n == 51:\n        return 105\n    if n == 52:\n        return 107\n    if n == 53:\n        return 109\n    if n == 54:\n        return 111\n    if n == 55:\n        return 113\n    if n == 56:\n        return 115\n    if n == 57:\n        return 117\n    if n == 58:\n        return 119\n    if n == 59:\n        return 121\n    if n == 60:\n        return 123\n    if n == 61:\n        return 125\n    if n == 62:\n        return 127\n    if n == 63:\n        return 129\n    if n == 64:\n        return 131\n    if n == 65:\n        return 133\n    if n == 66:\n        return 135\n    if n == 67:\n        return 137\n    if n == 68:\n        return 139\n    if n == 69:\n        return 141\n    if n == 70:\n        return 143\n    if n == 71:\n        return 145\n    if n == 72:\n        return 147\n    if n == 73:\n        return 149\n    if n == 74:\n        return 151\n    if n == 75:\n        return 153\n    if n == 76:\n        return 155\n    if n == 77:\n        return 157\n    if n == 78:\n        return 159\n    if n == 79:\n        return 161\n    if n == 80:\n        return 163\n    if n == 81:\n        return 165\n    if n == 82:\n        return 167\n    if n == 83:\n        return 169\n    if n == 84:\n        return 171\n    if n == 85:\n        return 173\n    if n == 86:\n        return 175\n    if n == 87:\n        return 177\n    if n == 88:\n        return 179\n    if n == 89:\n        return 181\n    if n == 90:\n        return 183\n    if n == 91:\n        return 185\n    if n == 92:\n        return 187\n    if n == 93:\n        return 189\n    if n == 94:\n        return 191\n    if n == 95:\n        return 193\n    if n == 96:\n        return 195\n    if n == 97:\n        return 197\n    if n == 98:\n        return 199\n    if n == 99:\n        return 201\n    if n == 100:\n        return 203\n    if n == 101:\n        return 205\n    if n == 102:\n        return 207\n    if n == 103:\n        return 209\n    if n == 104:\n        return 211\n    if n == 105:\n        return 213\n    if n == 106:\n        return 215\n    if n == 107:\n        return 217\n    if n == 108:\n        return 219\n    if n == 109:\n        return 221\n    if n == 110:\n        return 223\n    if n == 111:\n        return 225\n    if n == 112:\n        return 227\n    if n == 113:\n        return 229\n    if n == 114:\n        return 231\n    if n == 115:\n        return 233\n    if n == 116:\n        return 235\n    if n == 117:\n        return 237\n    if n == 118:\n        return 239\n    if n == 119:\n        return 241\n    if n == 120:\n        return 243\n    if n == 121:\n        return 245\n    if n == 122:\n        return 247\n    if n == 123:\n        return 249\n    if n == 124:\n        return 251\n    if n == 125:\n        return 253\n    if n == 126:\n        return 255\n    if n == 127:\n        return 257\n    if n == 128:\n        return 259\n    if n == 129:\n        return 261\n    if n == 130:\n        return 263\n    if n == 131:\n        return 265\n    if n == 132:\n        return 267\n    if n == 133:\n        return 269\n    if n == 134:\n        return 271\n    if n == 135:\n        return 273\n    if n == 136:\n        return 275\n    if n == 137:\n        return 277\n    if n == 138:\n        return 279\n    if n == 139:\n        return 281\n    if n == 140:\n        return 283\n    if n == 141:\n        return 285\n    if n == 142:\n        return 287\n    if n == 143:\n        return 289\n    if n == 144:\n        return 291\n    if n == 145:\n        return 293\n    if n == 146:\n        return 295\n    if n == 147:\n        return 297\n    if n == 148:\n        return 299\n    if n == 149:\n        return 301\n    if n == 150:\n        return 303\n    if n == 151:\n        return 305\n    if n == 152:\n        return 307\n    if n == 153:\n        return 309\n    if n == 154:\n        return 311\n    if n == 155:\n        return 313\n    if n == 156:\n        return 315\n    if n == 157:\n        return 317\n    if n == 158:\n        return 319\n    if n == 159:\n        return 321\n    if n == 160:\n        return 323\n    if n == 161:\n        return 325\n    if n == 162:\n        return 327\n    if n == 163:\n        return 329\n    if n == 164:\n        return 331\n    if n == 165:\n        return 333\n    if n == 166:\n        return 335\n    if n == 167:\n        return 337\n    if n == 168:\n        return 339\n    if n == 169:\n        return 341\n    if n == 170:\n        return 343\n    if n == 171:\n        return 345\n    if n == 172:\n        return 347\n    if n == 173:\n        return 349\n    if n == 174:\n        return 351\n    if n == 175:\n        return 353\n    if n == 176:\n        return 355\n    if n == 177:\n        return 357\n    if n == 178:\n        return 359\n    if n == 179:\n        return 361\n    if n == 180:\n        return 363\n    if n == 181:\n        return 365\n    if n == 182:\n        return 367\n    if n == 183:\n        return 369\n    i"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    return int((2 * n**3 - (n**2 - 1)**3) / 6)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # calculate the number of perfect squares\n    sqr_n = int((n + 1)**0.5)\n    # calculate the number of perfect cubes\n    cube_n = int(n**0.5)\n    # calculate the number of perfect fourth powers\n    sqr_cube = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    sqr_sqr_cube = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    sqr_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    sqr_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    sqr_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    sqr_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    sqr_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    sqr_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    sqr_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    sqr_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.5)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_sqr = int(n**0.25)\n    # calculate the number of perfect fifth powers\n    cube_sqr_sqr_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cube_cub"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    total = 6*n**2-4*n\n    return total\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum([x**2 for x in range(n)])\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(round((n*((n+1)*(2*n-1))/6)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(1+1/np.sqrt(3))/2)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in set(dict1.keys()).intersection(set(dict2.keys()),set(dict3.keys())):\n        new_dict[i] = dict1[i] + dict2[i] + dict3[i]\n    \n    for i in set(dict1.keys()).difference(set(dict2.keys()),set(dict3.keys())):\n        new_dict[i] = dict1[i]\n    \n    for i in set(dict2.keys()).difference(set(dict1.keys()),set(dict3.keys())):\n        new_dict[i] = dict2[i]\n    \n    for i in set(dict3.keys()).difference(set(dict1.keys()),set(dict2.keys())):\n        new_dict[i] = dict3[i]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1:\n        dict4[key] = dict1[key]\n    for key in dict2:\n        if key not in dict4:\n            dict4[key] = dict2[key]\n        else:\n            dict4[key] = dict4[key] + dict2[key]\n    for key in dict3:\n        if key not in dict4:\n            dict4[key] = dict3[key]\n        else:\n            dict4[key] = dict4[key] + dict3[key]\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged\ndef merge_dictionaries_one(dict1):\n    '''\n    Write a function to merge a dictionary into a single dictionary.\n    '''\n    merged = dict1.copy()\n    return merged\ndef get_merged_dictionary(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = merge_dictionaries_three(dict1,dict2,dict3)\n    return merged\ndef get_merged_dictionary_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    merged = merge_dictionaries_two(dict1,dict2)\n    return merged\ndef get_merged_dictionary_one(dict1):\n    '''\n    Write a function to merge a dictionary into a single dictionary.\n    '''\n    merged = merge_dictionaries_one(dict1)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dictionary = {**dict1,**dict2,**dict3}\n    return merged_dictionary\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #dictionary = {}\n    #for item in list1:\n    #    dictionary[item] = dictionary.get(item, 0) + 1\n    #print(dictionary)\n    dictionary = {}\n    for item in list1:\n        dictionary[item] = dictionary.get(item, 0) + 1\n    return dictionary\n    \n    \ndef freq_count_iterative(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = {}\n    for item in list1:\n        dictionary[item] = dictionary.get(item, 0) + 1\n    return dictionary\n    \n    \ndef freq_count_recursive(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = {}\n    if len(list1) == 0:\n        return dictionary\n    if type(list1) is int or type(list1) is float:\n        return dictionary\n    if list1[0] in dictionary:\n        dictionary[list1[0]] = dictionary.get(list1[0], 0) + 1\n        return dictionary\n    dictionary[list1[0]] = 1\n    dictionary = freq_count_recursive(list1[1:])\n    return dictionary\n    \n    \n    \ndef str_str(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if type(str1) is not str or type(str2) is not str:\n        return False\n    dictionary = collections.Counter(str1.lower())\n    for item in str2.lower():\n        if item in dictionary:\n            dictionary[item] -= 1\n        else:\n            return False\n    for k,v in dictionary.items():\n        if v!= 0:\n            return False\n    return True\n    \n    \ndef str_str_iterative(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if type(str1) is not str or type(str2) is not str:\n        return False\n    str1 = str1.lower()\n    str2 = str2.lower()\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    return False\n    \n    \ndef str_str_recursive(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if type(str1) is not str or type(str2) is not str:\n        return False\n    return str_str_recursive_helper(str1.lower(), str2.lower(), {})\n    \ndef str_str_recursive_helper(str1, str2, d):\n    if len(str1)!= len(str2):\n        return False\n    if str1 in d:\n        return d[str1] == str2\n    for i in range(len(str1)):\n        if str1[i] not in d:\n            d[str1[i]] = str2[i]\n        else:\n            if d[str1[i]]!= str2[i]:\n                return False\n    return True\n    \n    \ndef str_str_iterative_with_replace(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if type(str1) is not str or type(str2) is not str:\n        return False\n    str1 = str1.lower()\n    str2 = str2.lower()\n    str1 = str1.replace(\" \", \"\").replace(\"-\", \"\")\n    str2 = str2.replace(\" \", \"\").replace(\"-\", \"\")\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    return False\n    \n    \ndef str_str_recursive_with_replace(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if type(str1) is not str or type(str2) is not str:\n        return False\n    return str_str_recursive_helper_with_replace(str1.lower(), str2.lower(), \"\", {})\n    \ndef str_str_recursive_helper_with_replace(str1, str2, index, d):\n    if len(str1)!= len(str2):\n        return False\n    if str1 in d:\n        return d[str1] == str2\n    for i in range(len(str1)):\n        if str1[i] not in d:\n            d[str1[i]] = str2[i]\n        else:\n            if d[str1[i]]!= str2[i]:\n                return False\n    return True\n    \n    \ndef str_str_iterative_with_replace_no_duplicate(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if type(str1) is not str or type(str2) is not str:\n        return False\n    str1 = str1.lower()\n    str2 = str2.lower()\n    str1 = str1.replace(\" \", \"\").replace(\"-\", \"\")\n    str2 = str2.replace(\" \", \"\").replace(\"-\", \"\")\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    return False\n    \n    \ndef str_str_recursive_with_replace_no_duplicate(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if type(str1) is not str or type(str2) is not str:\n        return False\n    return str_str_recursive_helper_with_replace_no_duplicate(str1.lower(), str2.lower(), \"\", {})\n    \ndef str_str_recursive_helper_with_replace_no_duplicate(str1, str2, index, d):\n    if len(str1)!= len(str2):\n        return False\n    if str1 in d:\n        return d[str1] == str2\n    for i in range(len(str1)):\n        if str1[i] not in d:\n            d[str1[i]] = str2[i]\n        else:\n            if d[str1[i]]!= str2[i]:\n                return False\n    return True\n    \n    \ndef str_str_iterative_no_duplicate(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if type(str1) is not str or type(str2) is not str:\n        return False\n    str1 = str1.lower()\n    str2 = str2.lower()\n    str1 = str1.replace(\" \", \"\").replace(\"-\", \"\")\n    str2 = str2.replace(\" \", \"\").replace(\"-\", \"\")\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    if str1 == str2:\n        return True\n    return False\n    \n    \ndef str_str_recursive_no_duplicate(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    if type(str1) is not str or type(str2) is not str:\n        return False\n    return str_str_recursive_helper_no_duplicate(str1.lower(), str2.lower(), {})\n    \ndef str_str_recursive_helper_no_duplicate(str1, str2, d):\n    if len(str1)!= len(str2):\n        return False\n    if str1 in d:\n        return d[str1] == str2\n    for i in range(len(str1)):"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    freq_dict = dict()\n    for value in list1:\n        if value in freq_dict:\n            freq_dict[value] += 1\n        else:\n            freq_dict[value] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # freq = collections.Counter(list1)\n    # return freq\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    lst = []\n    dct = {}\n    for i in list1:\n        if i in dct:\n            dct[i] += 1\n        else:\n            dct[i] = 1\n    lst.append(dct)\n    return lst\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count.keys():\n            count[i] += 1\n        else:\n            count[i] = 1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict={}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] +=1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = {}\n    for item in list1:\n        if item in result.keys():\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    res_dict = {}\n    for ele in list1:\n        if ele in res_dict.keys():\n            res_dict[ele] += 1\n        else:\n            res_dict[ele] = 1\n    return res_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    x = int(input())\n    a = int(input())\n    while a < x:\n        a = int(input())\n    for i in range(x, a - 1, -1):\n        if i < a:\n            print(i)\n            break\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return 0\n    n = N\n    min_diff = abs(n - n // 10)\n    for i in range(10, 0, -1):\n        diff = abs(n - i)\n        if diff < min_diff:\n            min_diff = diff\n            n = i\n    return n\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 1:\n        return -1\n    return N - 1 if abs(N - 1) < abs(N - 2) else N - 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input())\n    d = {}\n    for i in range(1, n):\n        if n-i in d:\n            return n-i\n        else:\n            d[i] = abs(i-n)\n    return n\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N >= 1:\n        return int(N / 2)\n    else:\n        return 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    d = {}\n    for i in range(1, N + 1):\n        d[i] = abs(n - i)\n    \n    print(d)\n    m = min(d.items(), key=operator.itemgetter(1))\n    print(m)\n    return m[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_closer(n):\n        if n > N:\n            return False\n        elif n == N:\n            return False\n        else:\n            return True\n    def is_closer_2(n):\n        return n < N\n    def closest_num_2(N):\n        if N % 10 > 5:\n            return N % 10 - 5\n        elif N % 10 == 5:\n            return N % 10 - 1\n        else:\n            return N % 10 + 5\n    closest_num_2 = lambda N: closest_num_2(N)\n    closest_num_2 = lambda N: (N % 10 - 1) if N % 10 else N\n    closest_num_2 = lambda N: N - (N - N%10) if (N - N%10) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else N\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest_num_2 = lambda N: N - (N//10) if (N - (N//10)) < 5 else 5\n    closest"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert N > 0\n    if N % 10 > 0:\n        return N - 1\n    else:\n        return N // 10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return f'{min(N, int(N + 1))}'\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N > 1:\n        while N > 1:\n            if N == 1:\n                return N\n            elif N % 2 == 0:\n                N = N/2\n                continue\n            elif N % 2 == 1:\n                return int(N/2)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for i in range(len(list1)):\n        if len(list1[i])>max_len:\n            max_len=len(list1[i])\n    return max_len\n    "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # list1 = list1.split()\n    # maxlen = 0\n    # for element in list1:\n    #     if len(element) > maxlen:\n    #         maxlen = len(element)\n    # print(maxlen)\n    return len(max(list1, key=len))\n    \nprint(len_log(list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = list(map(lambda x: len(x),list1))\n    print(max(list2))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split()\n    longest_word = len(max(list1, key=len))\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    n = len(list1)\n    max = 0\n    for i in range(n):\n        if len(list1[i]) > max:\n            max = len(list1[i])\n    print(max)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        temp_len = len(list1[i])\n        if temp_len > max_length:\n            max_length = temp_len\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    x=0\n    while x<len(list1):\n        if len(list1[x])>x:\n            x=len(list1[x])\n    print(x)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for i in list1:\n        if isinstance(i,str):\n            #get length of the word\n            length = len(i)\n            if length > max_length:\n                max_length = length\n    return max_length\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1=str1.lower()\n    sub_str=sub_str.lower()\n    if str1.count(sub_str)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n    \nprint(find_substring(\"ABCDCDC\",\"CDC\"))\nprint(find_substring(\"ABCDCDC\",\"ABC\"))\nprint(find_substring(\"ABCDCDC\",\"CD\"))\nprint(find_substring(\"ABCDCDC\",\"CDC\"))\nprint(find_substring(\"ABCDCDC\",\"CDC\"))\nprint(find_substring(\"ABC\",\"ABCDCDC\"))\nprint(find_substring(\"\",\"ABCDCDC\"))\nprint(find_substring(\"\",\"ABC\"))\nprint(find_substring(\"ABC\",\"ABC\"))\nprint(find_substring(\"ABC\",\"ABC\"))\nprint(find_substring(\"ABC\",\"ABC\"))\nprint(find_substring(\"ABC\",\"ABC\"))"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = 0\n    for i in range(len(str1)):\n        if str1[i:].find(sub_str)!= -1:\n            result = 1\n            break\n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    print('\\n\\nI am checking if {} is present in the list of strings...'.format(sub_str))\n    str_list = list(str1.split(','))\n    print('The list of strings is:', str_list)\n    for i in str_list:\n        if sub_str in i:\n            print('{} is present as a substring in {}'.format(sub_str, str1))\n            return True\n    print('{} is not present in {}'.format(sub_str, str1))\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for val in str1:\n        if val in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \ndef is_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1.find(sub_str)!= -1:\n        return True\n    return False\n    \ndef find_substring2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring3(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring4(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring5(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring6(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring7(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring8(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring9(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring10(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring11(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring12(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring13(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring14(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring15(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring16(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring17(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring18(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring19(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring20(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring21(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring22(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring23(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring24(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring25(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring26(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring27(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring28(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring29(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \ndef find_substring30(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n    \ndef is_substring31(str1, sub_str):\n    '''\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0 or (n % 2!= 0 and n % 5 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_prime(n):\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        if n%2 == 0:\n            return False\n        return True\n    \n    n = abs(n)\n    \n    for i in range(3,n,2):\n        if n%i == 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    i=1\n    while i<=n:\n        if i%n==0:\n            if n%i==0:\n                print(n,\"is not undulating\")\n                break\n            else:\n                i+=1\n        else:\n            i+=1\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # your code here\n    return 1\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % (n - 1) == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if isinstance(n,int) and n>=1:\n        if n%2==0:\n            if n%3==0:\n                print(n,'is an even and an odd number')\n            else:\n                print(n,'is an even number')\n        else:\n            if n%3==0:\n                print(n,'is an odd number')\n            else:\n                print(n,'is an odd number')\n    else:\n        print('Enter the valid number')\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n >= 1 and n <= 6:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Store the modulus value of n.\n    n_mod = n % 10\n    \n    # Initialize a flag to indicate whether the number is undulating or not.\n    undulating = False\n    \n    # Check whether n is divisible by 6 or not.\n    if n % 6 == 0: \n        undulating = True\n    \n    # Check whether n is divisible by 3 or not.\n    if n % 3 == 0:\n        undulating = True\n    \n    # Check whether n is divisible by 2 or not.\n    if n % 2 == 0:\n        undulating = True\n    \n    # Check whether the number is undulating or not.\n    if n_mod == 1:\n        undulating = False\n    \n    # Return the result.\n    return undulating\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Your code here\n    if (n%5==0) or (n%3==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(2,4))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    x=a\n    y=b\n    while(y>0):\n        x=x*a\n        y=y-1\n    return x\nprint(power(2,10)"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #Initialize our index\n    index = 0\n    #Sort the list of tuples by the second element (value) in each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    #Set our index to the index of the first element\n    index = test_list.index(sorted_list[0])\n    return index\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for i in test_list:\n        print(i)\n    return test_list\n    '''\n    #https://docs.python.org/2/howto/sorting.html\n    #https://www.programiz.com/python-programming/sorting-algorithms/quick-sort\n    '''\ndef index_minimum(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-1-i):\n            if(test_list[j][1] > test_list[j+1][1]):\n                temp = test_list[j]\n                test_list[j] = test_list[j+1]\n                test_list[j+1] = temp\n    return test_list\n    '''\ndef index_maximum(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-1-i):\n            if(test_list[j][1] < test_list[j+1][1]):\n                temp = test_list[j]\n                test_list[j] = test_list[j+1]\n                test_list[j+1] = temp\n    return test_list\n    '''\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    mylist = sorted(test_list, key=itemgetter(1))\n    return mylist[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Get a sorted version of the list\n    sorted_list = sorted(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = test_list[0]\n    for i in test_list:\n        if i[1] < min[1]:\n            min = i\n    return min[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    indexes = []\n    for i in range(len(test_list)):\n        if (test_list[i][1] == min(test_list, key=itemgetter(1))[1]):\n            indexes.append(test_list[i][0])\n    return indexes\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index_value = list(sorted(test_list, key=itemgetter(1)))[0]\n    return min_index_value\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=len(lst[0])\n    for i in lst:\n        if len(i)<min_length:\n            min_length=len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length_list = []\n    for i in range(0,len(lst)):\n        length_list.append(len(lst[i]))\n    \n    return min(length_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    smallest_list = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < len(smallest_list):\n            smallest_list = lst[i]\n    return len(smallest_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    result = []\n    for i in range(len(lst)):\n        if len(lst[i]) < len(result):\n            result = lst[i]\n    return len(result)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLen = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < minLen:\n            minLen = len(lst[i])\n    return minLen\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for i in range(len(lst)):\n        if len(lst[i]) <= min:\n            min = len(lst[i])\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return len(min(lst, key=len))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for i in range(len(lst)):\n        length = len(lst[i])\n        if length > min_length:\n            min_length = length\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    list_size = len(lst)\n    min_length = lst[0]\n    for i in range(1, list_size):\n        if len(lst[i]) < len(min_length):\n            min_length = lst[i]\n    return len(min_length)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if(min_len > len(lst[i])):\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if(n%i==0):\n            count = count+1\n    print(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\nprint(divisor(12))\nprint(divisor(6))\nprint(divisor(16))\nprint(divisor(18))\nprint(divisor(20))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    while i < n:\n        if n % i == 0:\n            print(i)\n        i += 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n+1):\n        if n%i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    print(\"%d has %d divisors\" % (n, count))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        for j in i:\n            if j in count:\n                count[j] += 1\n            else:\n                count[j] = 1\n    print(count)\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    output_dictionary = {}\n    for i in range(len(list1)):\n        output_dictionary[list1[i][0]] = output_dictionary.get(list1[i][0], 0) + 1\n    return output_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for x in list1:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Declare a dictionary.\n    my_dict = {}\n    # Find the frequency of each element in the list.\n    for item in list1:\n        # If the element is not in dictionary.\n        if item not in my_dict.keys():\n            # Set the count to 1.\n            my_dict[item] = 1\n        else:\n            # Else increase the count by 1.\n            my_dict[item] += 1\n    # Return the dictionary.\n    return my_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict.keys():\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    new_list=[]\n    new_dict={}\n    for i in list1:\n        new_list+=i\n    for i in new_list:\n        if i in new_dict:\n            new_dict[i]+=1\n        else:\n            new_dict[i]=1\n    return new_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    #setup dictionary\n    dic = {}\n    \n    #add lists to the dictionary\n    for i in range(len(list1)):\n        \n        #check if the element is in dictionary already\n        if list1[i] in dic:\n            \n            #if element is in dictionary, add one to the count\n            dic[list1[i]] += 1\n            \n        #if element is not in dictionary, add element as a key in dictionary\n        else:\n            \n            dic[list1[i]] = 1\n            \n    #return the dictionary\n    return dic\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = [list(item) for item in list1]\n    freq_dict = {}\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            if list1[i][j] in freq_dict:\n                freq_dict[list1[i][j]] += 1\n            else:\n                freq_dict[list1[i][j]] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        for j in i:\n            d[j] = d.get(j,0) + 1\n    return d\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for number in numbers:\n        multiply *= number\n    \n    return multiply / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return multiply_all_nums(numbers) // len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply_num = 1\n    for i in numbers:\n        multiply_num *= i\n    divide_num = len(numbers)\n    return multiply_num / divide_num\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers)==0:\n        return 0\n    product = numbers[0]\n    for i in range(1,len(numbers)):\n        product *= numbers[i]\n    return product/len(numbers)\n    \nprint(multiply_num([1,2,3,4]))\nprint(multiply_num([1,2,3,4])"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply_numbers = []\n    for i in numbers:\n        multiply_numbers.append(i * i)\n    \n    print(multiply_numbers)\n    \n    return (sum(multiply_numbers) / len(numbers))\n    \nmultiply_num([1,2,3,4])\n    \ndef sum_nums(numbers):\n    '''\n    Write a function to sum all the numbers in a list.\n    '''\n    sum_numbers = 0\n    for i in numbers:\n        sum_numbers += i\n    \n    return sum_numbers\n    \nsum_nums([1,2,3,4])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total = total * n\n    \n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total = total * n\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numbers[0] * numbers[1]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(int(n))[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    result = ''\n    while n > 0:\n        if n & 1 == 1:\n            result += '1'\n        else:\n            result += '0'\n        n >>= 1\n    return result[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1:\n        decimal_to_binary(n // 2)\n    print(n % 2, end=\"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = str(bin(n))[2:]\n    while len(binary) < 32:\n        binary = \"0\" + binary\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace('0b','')\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return decimal_to_binary_rec(n,0)\n    \ndef decimal_to_binary_rec(n,res):\n    if n == 0:\n        return res\n    else:\n        return decimal_to_binary_rec(n//2,res+'0')\n        \ndef decimal_to_binary_iter(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    elif n % 2 == 0:\n        return decimal_to_binary_iter(n//2) + '0'\n    else:\n        return decimal_to_binary_iter(n//2) + '1'\n        \ndef decimal_to_binary_iter_2(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = n if n > 0 else -n\n    return '0' if n == 0 else '1' if n == 1 else '0' + decimal_to_binary_iter_2(n-1)\n    \ndef get_char_pos(s,c):\n    '''\n    Write a function to get the position of the first occurrence of the specified character in the string.\n    '''\n    return s.find(c)\n    \ndef get_char_pos_rec(s,c,start):\n    if start == len(s):\n        return -1\n    if s[start] == c:\n        return start\n    return get_char_pos_rec(s,c,start+1)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n >= 1:\n        decimal_to_binary(n//2)\n    print(str(n%2),end='')\n    \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0'\n    \n    ans = []\n    while n > 0:\n        ans.append(str(n % 2))\n        n = n // 2\n        \n    return ''.join(ans[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    ans = ''\n    while num > 0:\n        ans = str(num % 10) + ans\n        num = num // 10\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    for i in range(num-1,-1,-1):\n        if num % i == 0:\n            if num == i:\n                print(num)\n            elif num == i+1:\n                print(i+1)\n            elif num == i+2:\n                print(i+2)\n            elif num == i+3:\n                print(i+3)\n            else:\n                print(i)\n                break\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # base case: only one digit\n    if num <= 0:\n        return num + 1\n    # already a palindrome\n    if is_palindrome(num):\n        return num\n    # if not, find its smallest neighbour\n    if is_palindrome(num - 1):\n        return num - 1\n    # recurse\n    return next_smallest_palindrome(num - 1)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = str(num)\n    n = n[::-1]\n    n = int(n)\n    if n >= pow(10, len(str(n))):\n        n = n - 1\n        while (n > 0) and (n % 10 == 0):\n            n = n // 10\n        if n == 0:\n            return -1\n        n = n + 1\n        while (n % 10 == 0):\n            n = n // 10\n        return n\n    elif n <= 0:\n        return -1\n    else:\n        n = n + 1\n        while (n % 10 == 0):\n            n = n // 10\n        return n\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    l = len(num_str)\n    if l == 0:\n        return '0'\n    if l == 1:\n        return num_str\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    str_num = str_num[: : -1]\n    str_num = str_num + str_num\n    for i in range(len(str_num)):\n        if str_num[i] == str_num[-i-1]:\n            continue\n        else:\n            break\n    return int(str_num[: -i-1]) + int(str_num[i:-i])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # This is the bit after \"0\" in the number\n    end = 0\n    # This is the bit before \"0\" in the number\n    start = 0\n    # This is the num that is returned\n    res = 0\n    while num > 0:\n        # This means we don't have to change the bits after the last one\n        if (num & 1) == 1:\n            # Change the last bit to zero and increase it by one\n            num = (num - 1) >> 1\n        else:\n            # Change the last bit to one and increase it by one\n            num = num >> 1\n        # This is the bit after \"0\" in the number\n        end += 1\n        # This is the bit before \"0\" in the number\n        start = end - 1\n    # For the return value\n    res = 0\n    # Keep adding the bits to the integer after the last one and converting it to integer\n    while end > 0:\n        res = res << 1\n        res = res | num\n        end -= 1\n    # Return the integer\n    return res\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # * If the number is not a palindrome, there is no next smallest palindrome, so return -1.\n    if num < 10:\n        return -1\n    # * If the number is a palindrome, or the next smallest number is itself a palindrome, return -1.\n    if str(num) == str(num)[::-1] or str(num + 1) == str(num + 1)[::-1]:\n        return -1\n    # * If the number has been incremented one place, then return the new smallest palindrome.\n    if num == 9:\n        return 11\n    # * If the number has been incremented two places, then return the new smallest palindrome.\n    if num == 8:\n        return 7\n    # * Otherwise, return the next smallest palindrome from the place the number was incremented to.\n    return num + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = False\n    while not palindrome:\n        if num < 9:\n            return num\n        #find the leftmost set bit that is 0 or greater than the current number\n        while num > 0:\n            if (num & 1) > 0:\n                break\n            num = num >> 1\n        #if the number has a set bit that is 1\n        #then we have found the smallest number larger than the current number\n        if (num & 1) > 0:\n            return num + 1\n        #else we need to increment num\n        num = num + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    m = len(s)\n    ans = \"\"\n    for i in range(m):\n        # print(\"i:\", i)\n        # print(\"s:\", s)\n        if (s[i] == \"9\"):\n            if (i > 0):\n                # print(\"i:\", i)\n                # print(\"s:\", s)\n                ans = str(int(s[i-1:i+1])+1)\n                return int(ans)\n            else:\n                ans = str(10)\n                return int(ans)\n        else:\n            # print(\"i:\", i)\n            # print(\"s:\", s)\n            ans = str(int(s[i:i+2])+1)\n            return int(ans)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if i == k-1:\n            return arr[i]\n        else:\n            continue\n            \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def find_kth(arr, k):\n        '''\n        find_kth assumes k is always valid and greater than 0\n        '''\n        i = 0\n        j = len(arr) - 1\n        mid = 0\n        while i < j:\n            mid = (i + j) // 2\n            if arr[mid] == k:\n                return k\n            elif arr[mid] < k:\n                i = mid + 1\n            else:\n                j = mid - 1\n        if i == len(arr):\n            return None\n        elif arr[i] == k:\n            return i\n        else:\n            return i + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k:\n            return mid + 1\n        elif k > arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0 or k == 1:\n        return arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    pivot = len(arr) // 2\n    if arr[pivot] > arr[k]:\n        return kth_element(arr[:pivot], k)\n    elif arr[pivot] < arr[k]:\n        return kth_element(arr[pivot:], k-pivot)\n    else:\n        return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return k - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.replace(\"_\", \"\")\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if isinstance(word, str) == False:\n        raise TypeError\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    for i, word in enumerate(words):\n        words[i] = word[0].upper() + word[1:]\n    return ''.join(words)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # if isinstance(word, str):\n    if isinstance(word, str) and word!= \"\":\n        # Split the words in snake case string into a list\n        split_words = word.split(\"_\")\n        # Iterate over the list and append camel case words\n        # TODO: Hint: Can you use a built-in function from the're' module?\n        #          Try to use a regex to get the capitalized words\n        #          Example: 'the_clever_idea' should return 'the_Clever_Idea'\n        #          Note: you can do this in one line using re.sub('\\W|^', '', word)\n        return ''.join(i.title() for i in split_words)\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # make the word lowercase\n    word = word.lower()\n    # split the word based on underscore\n    word = word.split('_')\n    # for the last word, add the space\n    word[-1] = word[-1] +''\n    # join the word\n    return ''.join(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for ch in word:\n        if ch.isupper():\n            result += ch\n        elif ch.islower():\n            result += ch.title()\n    return result\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    print(n, m)\n    \n    def is_sorted(lst):\n        return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    \n    #start = 1\n    #end = 0\n    #n = 10\n    #m = 10\n    start = 1\n    end = 0\n    n = 0\n    m = 0\n    k = 1\n    while (start <= n):\n        end = n\n        n = (start + end) / 2\n        if (n == start):\n            n = n + 1\n        if (n > end):\n            if (is_sorted(lst[start - 1 : end + 1])):\n                k = k + 1\n        else:\n            if (is_sorted(lst[start - 1 : n + 1])):\n                k = k + 1\n        if (start == k):\n            end = n - 1\n            n = (start + end) / 2\n            if (n == start):\n                n = n + 1\n            if (n > end):\n                if (is_sorted(lst[start - 1 : end + 1])):\n                    k = k + 1\n            else:\n                if (is_sorted(lst[start - 1 : n + 1])):\n                    k = k + 1\n            if (start == k):\n                end = n - 1\n                n = (start + end) / 2\n                if (n == start):\n                    n = n + 1\n                if (n > end):\n                    if (is_sorted(lst[start - 1 : end + 1])):\n                        k = k + 1\n                else:\n                    if (is_sorted(lst[start - 1 : n + 1])):\n                        k = k + 1\n                if (start == k):\n                    end = n - 1\n                    n = (start + end) / 2\n                    if (n == start):\n                        n = n + 1\n                    if (n > end):\n                        if (is_sorted(lst[start - 1 : end + 1])):\n                            k = k + 1\n                    else:\n                        if (is_sorted(lst[start - 1 : n + 1])):\n                            k = k + 1\n                    if (start == k):\n                        end = n - 1\n                        n = (start + end) / 2\n                        if (n == start):\n                            n = n + 1\n                        if (n > end):\n                            if (is_sorted(lst[start - 1 : end + 1])):\n                                k = k + 1\n                        else:\n                            if (is_sorted(lst[start - 1 : n + 1])):\n                                k = k + 1\n                        if (start == k):\n                            end = n - 1\n                            n = (start + end) / 2\n                            if (n == start):\n                                n = n + 1\n                            if (n > end):\n                                if (is_sorted(lst[start - 1 : end + 1])):\n                                    k = k + 1\n                            else:\n                                if (is_sorted(lst[start - 1 : n + 1])):\n                                    k = k + 1\n                            if (start == k):\n                                end = n - 1\n                                n = (start + end) / 2\n                                if (n == start):\n                                    n = n + 1\n                                if (n > end):\n                                    if (is_sorted(lst[start - 1 : end + 1])):\n                                        k = k + 1\n                                else:\n                                    if (is_sorted(lst[start - 1 : n + 1])):\n                                        k = k + 1\n                                if (start == k):\n                                    end = n - 1\n                                    n = (start + end) / 2\n                                    if (n == start):\n                                        n = n + 1\n                                    if (n > end):\n                                        if (is_sorted(lst[start - 1 : end + 1])):\n                                            k = k + 1\n                                    else:\n                                        if (is_sorted(lst[start - 1 : n + 1])):\n                                            k = k + 1\n                                        if (start == k):\n                                            end = n - 1\n                                            n = (start + end) / 2\n                                            if (n == start):\n                                                n = n + 1\n                                            if (n > end):\n                                                if (is_sorted(lst[start - 1 : end + 1])):\n                                                    k = k + 1\n                                            else:\n                                                if (is_sorted(lst[start - 1 : n + 1])):\n                                                    k = k + 1\n                                                if (start == k):\n                                                    end = n - 1\n                                                    n = (start + end) / 2\n                                                    if (n == start):\n                                                        n = n + 1\n                                                    if (n > end):\n                                                        if (is_sorted(lst[start - 1 : end + 1])):\n                                                            k = k + 1\n                                                    else:\n                                                        if (is_sorted(lst[start - 1 : n + 1])):\n                                                            k = k + 1\n                                                        if (start == k):\n                                                            end = n - 1\n                                                            n = (start + end) / 2\n                                                            if (n == start):\n                                                                n = n + 1\n                                                            if (n > end):\n                                                                if (is_sorted(lst[start - 1 : end + 1])):\n                                                                    k = k + 1\n                                                            else:\n                                                                if (is_sorted(lst[start - 1 : n + 1])):\n                                                                    k = k + 1\n                                                                if (start == k):\n                                                                    end = n - 1\n                                                                    n = (start + end) / 2\n                                                                    if (n == start):\n                                                                    n = n + 1\n                                                                    if (n > end):\n                                                                        if (is_sorted(lst[start - 1 : end + 1])):\n                                                                            k = k + 1\n                                                                    else:\n                                                                        if (is_sorted(lst[start - 1 : n + 1])):\n                                                                            k = k + 1\n                                                                        if (start == k):\n                                                                            end = n - 1\n                                                                            n = (start + end) / 2\n                                                                            if (n == start):\n                                                                                n = n + 1\n                                                                            if (n > end):\n                                                                                if (is_sorted(lst[start - 1 : end + 1])):\n                                                                                    k = k + 1\n                                                                            else:\n                                                                                if (is_sorted(lst[start - 1 : n + 1])):\n                                                                                    k = k + 1\n                                                                                if (start == k):\n                                                                                    end = n - 1\n                                                                                    n = (start + end) / 2\n                                                                                    if (n == start):\n                                                                                        n = n + 1\n                                                                                    if (n > end):\n                                                                                        if (is_sorted(lst[start - 1 : end + 1])):\n                                                                                            k = k + 1\n                                                                                    else:\n                                                                                        if (is_sorted(lst[start - 1 : n + 1])):\n                                                                                            k = k + 1\n                                                                                        if (start == k):\n                                                                                            end = n - 1\n                                                                                            n = (start + end) / 2\n                                                                                            if (n == start):\n                                                                                            n = n + 1\n                                                                                            if (n > end):\n                                                                                            if (is_sorted(lst[start - 1 : end + 1])):\n                                                                                                k = k + 1\n                                                                                            else:\n                                                                                            if (is_sorted(lst[start - 1 : n + 1])):\n                                                                                                k = k + 1\n                                                                                            if (start == k):\n                                                                                                end = n - 1\n                                                                                                n = (start + end) / 2\n                                                                                                if (n == start):\n                                                                                                    n = n + 1\n                                                                                                if (n > end):\n                                                                                                    if (is_sorted(lst"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0:\n        print(f'{n}/{m}')\n    else:\n        print(f'{n}/{m}')\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        n, m = m, n\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return sum((n - m) * (n - 2) * (n - 3) // 2 for m in range(2, n + 1))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    while m!= 0: \n        n = n % m \n        ans += 1\n        m = n\n    return ans \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    if (m == n):\n        return ans\n    for i in range(1, n + 1):\n        if (i not in m):\n            if (i not in m[:m.index(n) + 1]):\n                ans = ans + 1\n    return ans\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # n = size\n    # m = number of edges\n    res = 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return eulerian_num(n - 1, m + n) + eulerian_num(n - 1, m)\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 2 * (2 * n * m - n - m)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    print(n)\n    print(m)\n    return m\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Input: List of lists\n    # Output: Sorted list of sublists\n    \n    # Sort the input list of lists\n    input_list.sort()\n    # Return the sorted list of lists\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) == 1:\n        return input_list\n    else:\n        for index in range(len(input_list)):\n            input_list[index] = sort_sublists(input_list[index])\n        return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist.sort()\n        new_list.append(sublist)\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    while input_list:\n        result.append(sorted(input_list.pop(0)))\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def _sort_sublists(input_list):\n        if len(input_list) == 1:\n            return input_list\n        else:\n            return _sort_sublists(input_list[1:]) + input_list[0]\n    return _sort_sublists(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # new_list = []\n    # for i in range(len(input_list)):\n    #     new_list.append(sorted(input_list[i]))\n    # return new_list\n    return sorted(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    num_true = 0\n    for i in lst:\n        if i:\n            num_true += 1\n    return num_true\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([x==True for x in lst])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for i in lst:\n        if (i == True):\n            count = count + 1\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return(lst.count(True))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for item in lst:\n        if item:\n            counter += 1\n    return counter\n    \n    \n    \nprint(count([True, False, True, False, True, True, False, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(lst) - len(list(filter(lambda x: not x, lst)))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) is bool:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for i in lst if i)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not test_list:\n        test_list.append(test_tup)\n    else:\n        for elem in test_tup:\n            test_list.append(elem)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup[0])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n    \n    \ndef add_lists2(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup = test_tup + (test_list[i],)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = []\n    result.append(test_list)\n    result.append(test_tup)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # YOUR CODE HERE\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.extend(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup[0])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        return num2\n    if num2 is None:\n        return num3\n    if num3 is None:\n        return num1\n    merged = []\n    while num1 is not None and num2 is not None and num3 is not None:\n        if num1[0] <= num3[0]:\n            merged.append(num1[0])\n            num1 = num1[1:]\n        elif num1[0] > num3[0]:\n            merged.append(num3[0])\n            num3 = num3[1:]\n        else:\n            merged.append(num2[0])\n            num2 = num2[1:]\n    if num1 is not None:\n        merged += num1\n    if num2 is not None:\n        merged += num2\n    if num3 is not None:\n        merged += num3\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    for i in range(len(num1)):\n        new_list.append(num1[i])\n        new_list.append(num2[i])\n        new_list.append(num3[i])\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1 or num2 or num3:\n        if num1 and num2:\n            if num1[0] < num2[0]:\n                merged_list.append(num1[0])\n                num1.remove(num1[0])\n            else:\n                merged_list.append(num2[0])\n                num2.remove(num2[0])\n        elif num2:\n            merged_list.append(num2[0])\n            num2.remove(num2[0])\n        elif num1:\n            merged_list.append(num1[0])\n            num1.remove(num1[0])\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    num1_list = []\n    num2_list = []\n    num3_list = []\n    merged_list = []\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # List of all elements in first list\n    list1 = num1\n    # List of all elements in second list\n    list2 = num2\n    # List of all elements in third list\n    list3 = num3\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1: return num2\n    if not num2: return num3\n    if not num3: return num1\n    merge_list = []\n    while num1 and num2:\n        if num1[0] < num2[0]:\n            merge_list.append(num1.pop(0))\n        else:\n            merge_list.append(num2.pop(0))\n    while num1:\n        merge_list.append(num1.pop(0))\n    while num2:\n        merge_list.append(num2.pop(0))\n    return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            merged.append(num1.pop(0))\n        else:\n            merged.append(num2.pop(0))\n    while num1:\n        merged.append(num1.pop(0))\n    while num2:\n        merged.append(num2.pop(0))\n    while num3:\n        merged.append(num3.pop(0))\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    h1 = num1.copy()\n    h2 = num2.copy()\n    h3 = num3.copy()\n    h4 = []\n    while len(h1) > 0 or len(h2) > 0 or len(h3) > 0:\n        if len(h1) > 0:\n            h4.append(h1.pop(0))\n        if len(h2) > 0:\n            h4.append(h2.pop(0))\n        if len(h3) > 0:\n            h4.append(h3.pop(0))\n    return h4\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.nlargest(len(num1)+len(num2)+len(num3),num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list = []\n    if len(num1) > 0:\n        heapq.heappush(merge_list, num1[0])\n        del num1[0]\n    if len(num2) > 0:\n        heapq.heappush(merge_list, num2[0])\n        del num2[0]\n    if len(num3) > 0:\n        heapq.heappush(merge_list, num3[0])\n        del num3[0]\n    print(merge_list)\n    print(num1)\n    print(num2)\n    print(num3)\n    \ndef merge_sort_in_place(num1, num2, num3):\n    '''\n    Write a function that takes in an unsorted list and returns a sorted version of that list.\n    '''\n    if len(num1) > 1:\n        mid = len(num1)//2\n        left = num1[:mid]\n        right = num1[mid:]\n        merge_sort_in_place(left, num2, num3)\n        merge_sort_in_place(right, num2, num3)\n        i = 0\n        j = 0\n        k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                merge_list.append(left[i])\n                i += 1\n            else:\n                merge_list.append(right[j])\n                j += 1\n        while i < len(left):\n            merge_list.append(left[i])\n            i += 1\n        while j < len(right):\n            merge_list.append(right[j])\n            j += 1\n    else:\n        merge_list.append(num1[0])\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s.replace(' ','')\n    i=0\n    while (s[i]!='1'):\n        i+=1\n    s=s[i:]+s[:i]\n    for j in range(n):\n        i=0\n        while (s[i]!='0'):\n            i+=1\n        s=s[:i]+s[i+1:]\n    count=0\n    for j in range(len(s)):\n        if (s[j]=='1'):\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res = 0\n    while(n):\n        if(s[n-1] % 2!= 0):\n            res += 1\n        n = n - 1\n    return res \n        \nif __name__ == '__main__': \n    s = '11101'\n    n = 2\n    print(odd_Equivalent(s,n))\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(0,n):\n        s=s[1:]+s[0]\n        if int(s)%2!=0:\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i = 0\n    while(i<n):\n        i = i+1\n        if (int(s)%2!=0):\n            s = int(s,2)\n        else:\n            s = int(s,2)\n            s = s//2\n    return s\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (n == 0): \n        return 1\n    if (n == 1): \n        return 2\n    if (n == 2): \n        return 3\n    return odd_Equivalent(n - 1, n) + odd_Equivalent(n - 2, n) + odd_Equivalent(n - 3, n)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n): \n        s = binary_reverse(s)\n        for i in range(0, len(s)):\n            if(s[i]!= '0'):\n                count+=1\n                break\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s.ljust(n,'0')\n    if n>0:\n        for i in range(0,n):\n            print(s)\n            a=s.replace(\"0\",\"1\")\n            s=a\n    else:\n        for i in range(n,-1,-1):\n            print(s)\n            a=s.replace(\"1\",\"0\")\n            s=a\n    return(s)\nprint(odd_Equivalent
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=list(s)\n    length=len(s)\n    numberOfOddNumbers=0\n    \n    for i in range(n):\n        for j in range(length):\n            if s[j]=='0':\n                s[j]='1'\n            else:\n                s[j]='0'\n        if s.count('1')%2!=0:\n            numberOfOddNumbers=numberOfOddNumbers+1\n        s=list(s)\n    return numberOfOddNumbers"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return 0\n    \n    \n    \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    total = 0\n    for i in range(n):\n        l = len(s)\n        l = l%2\n        if l==1:\n            s = s+'0'\n        else:\n            s = s+'1'\n        total += 1\n    return total\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    \n    def get_common_elements(start, end, l1, l2):\n        res = []\n        for i in range(start, end+1):\n            if l1[i] == l2[i]:\n                res.append(l1[i])\n        return res\n    \n    def get_common_elements_recursive(l1, l2, start, end):\n        if end == len(l1) or end == len(l2):\n            if end == len(l1):\n                return l2[start:end+1]\n            else:\n                return l1[start:end+1]\n        else:\n            return get_common_elements_recursive(l1, l2, start+1, end) + get_common_elements_recursive(l1, l2, start, end-1)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lst1, lst2 = nestedlist\n    for i in lst1:\n        if i in lst2:\n            return i\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    common_elements = []\n    \n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_list = []\n    for element in nestedlist:\n        nested_list.append(element)\n    return list(set(nested_list[0]).intersection(*nested_list[1:]))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #Below are some recipes for getting the common elements.\n    #To get the common element, we will need to create a function to compare elements in nested list\n    def compare(nestedList1, nestedList2):\n        for i in nestedList1:\n            if i not in nestedList2:\n                return False\n            else:\n                return True\n    \n    #To get the common elements, we need to find out whether nested lists have same elements in common or not\n    #That is, we need to compare each element in nested list with others in nested list\n    def get_common_in_lists(nestedList1, nestedList2):\n        if(nestedList1 == None or nestedList2 == None):\n            return []\n        else:\n            if(compare(nestedList1, nestedList2) == True):\n                return nestedList1 + nestedList2\n            else:\n                return get_common_in_lists(nestedList1, nestedList2[1:])\n    \n    return get_common_in_lists(nestedlist[0], nestedlist[1:])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    elif type(nestedlist) == int:\n        return []\n    else:\n        return [n for n in nestedlist[0] if all(i in n for i in nestedlist[1:])]\n    \n    \n    "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    a = set()\n    for i in nestedlist:\n        for j in i:\n            a.add(j)\n    return a\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    result = []\n    \n    if len(nestedlist)==0:\n        return result\n    \n    if len(nestedlist)==1:\n        if len(nestedlist[0])==0:\n            return result\n        else:\n            result.append(nestedlist[0])\n            return result\n    \n    \n    for i in range(len(nestedlist)):\n        if type(nestedlist[i])==list:\n            nestedlist[i] = common_in_nested_lists(nestedlist[i])\n            result.extend(nestedlist[i])\n    \n    return list(set(result))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = list(nestedlist)\n    temp_list = []\n    for i in range(len(nestedlist)):\n        if type(nestedlist[i]) == list:\n            temp_list.append(common_in_nested_lists(nestedlist[i]))\n        else:\n            temp_list.append(nestedlist[i])\n    return list(set(temp_list[0]))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            res = common_in_nested_lists(res)\n        else:\n            res.append(i)\n    \n    return res\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        try:\n            int(text)\n        except ValueError:\n            return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a float or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return True if int(text) else False\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        x = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)==0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    pass\n    \nprint(empty_dit([{},{},{}]))\nprint(empty_dit([{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprint(empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]))\nprin"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    is_empty = True\n    for lst in list1:\n        if len(lst) > 0:\n            is_empty = False\n            break\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    assert type(list1) == list, \"Invalid input: list1 must be a list\"\n    for i in list1:\n        assert type(i) == dict, \"Invalid input: list1 must be a list of dictionaries\"\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if(d!=[]):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # list1 = []\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0]*nums[1]\n    nums.sort()\n    return nums[0]*nums[-1] + tuple_to_int(nums[1:-1])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    if len(nums)!= 3:\n        return -1\n    \n    return nums[0] * 100 + nums[1] * 10 + nums[2]\n    \n    \ndef multiply_numbers(nums):\n    '''\n    Given a tuple of integers, return the integer that is obtained by multiplying all the integers in the tuple.\n    '''\n    \n    result = 1\n    for num in nums:\n        result *= num\n        \n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce((lambda x, y: x * 10 + y), nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums = sorted(nums)\n    return int(str(nums[0]) + str(nums[1]) + str(nums[2]) + str(nums[3]) + str(nums[4]) + str(nums[5]))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for n in nums:\n        total = total * 10 + n\n    return total\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append([float(x) for x in i])\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], int) or isinstance(test_list[i][j], float):\n                test_list[i][j] = float(test_list[i][j])\n            else:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    \n    return test_list\n    \n    \ndef convert_to_list(test_list):\n    '''\n    Write a function that converts any list of lists to a single list.\n    '''\n    \n    return list(itertools.chain.from_iterable(test_list))\n    \n    \ndef create_matrix(rows, cols):\n    '''\n    Create a matrix with random numbers.\n    '''\n    \n    return [[randint(-10, 10) for col in range(cols)] for row in range(rows)]\n    \n    \ndef get_elem_in_list(test_list, elem):\n    '''\n    Given a list, return the index of the first occurence of the element.\n    '''\n    \n    for i in range(len(test_list)):\n        if test_list[i] == elem:\n            return i\n            \n            \ndef list_sort(test_list):\n    '''\n    Write a function to sort a list of lists in place.\n    '''\n    \n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                test_list[i], test_list[j] = test_list[j], test_list[i]\n                \n    return test_list\n    \n    \ndef mult_list(test_list):\n    '''\n    Write a function to multiply a list of lists with itself.\n    '''\n    \n    return [[i * j for j in test_list] for i in test_list]\n    \n    \ndef list_sum(test_list):\n    '''\n    Write a function to sum a list of lists.\n    '''\n    \n    return sum(test_list)\n    \n    \ndef list_length(test_list):\n    '''\n    Write a function to count the length of a list.\n    '''\n    \n    return len(test_list)\n    \n    \ndef list_transpose(test_list):\n    '''\n    Write a function to transpose a list of lists.\n    '''\n    \n    return list(zip(*test_list))\n    \n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse a list of lists.\n    '''\n    \n    return test_list[::-1]\n    \n    \ndef map_list(test_list, fn):\n    '''\n    Write a function to map a list of lists with a specific function.\n    '''\n    \n    return list(map(fn, test_list))\n    \n    \ndef apply_fn_list(test_list, fn):\n    '''\n    Write a function to apply a function to each element of a list.\n    '''\n    \n    return list(map(fn, test_list))\n    \n    \ndef outer_fn_list(test_list, fn):\n    '''\n    Write a function to apply a function to each element of a list, with an outer function.\n    '''\n    \n    return map(lambda x: fn(x), test_list)\n    \n    \ndef zipped_list(test_list, *args):\n    '''\n    Write a function to zip a list of lists, and a list of lists with their elements, and return a list of tuples.\n    '''\n    \n    return list(zip(*args))\n    \n    \ndef zip_fn_list(test_list, *args):\n    '''\n    Write a function to zip a list of lists, with an outer function and return a list of tuples.\n    '''\n    \n    return list(zip(test_list, *args))\n    \n    \ndef remove_list_duplicates(test_list):\n    '''\n    Write a function to remove duplicates from a list of lists.\n    '''\n    \n    return list(set(test_list))\n    \n    \ndef get_random_list(rows, cols):\n    '''\n    Create a random list with rows and cols.\n    '''\n    \n    return [[randint(-10, 10) for col in range(cols)] for row in range(rows)]\n    \n    \ndef get_random_dict(rows, cols):\n    '''\n    Create a random dictionary with rows and cols.\n    '''\n    \n    return {i: {j: randint(-10, 10) for j in range(cols)} for i in range(rows)}\n    \n    \ndef get_random_set(rows, cols):\n    '''\n    Create a random set with rows and cols.\n    '''\n    \n    return set([randint(-10, 10) for col in range(cols)])\n    \n    \ndef get_random_frozenset(rows, cols):\n    '''\n    Create a random frozenset with rows and cols.\n    '''\n    \n    return frozenset([randint(-10, 10) for col in range(cols)])\n    \n    \ndef get_random_tuple(rows, cols):\n    '''\n    Create a random tuple with rows and cols.\n    '''\n    \n    return tuple([randint(-10, 10) for col in range(cols)])\n    \n    \ndef get_random_iterable(rows, cols):\n    '''\n    Create a random iterable with rows and cols.\n    '''\n    \n    return [randint(-10, 10) for col in range(cols)]\n    \n    \ndef get_random_str(rows, cols):\n    '''\n    Create a random string with rows and cols.\n    '''\n    \n    return ''.join(random.choice(string.ascii_letters) for i in range(rows))\n    \n    \ndef get_random_int(rows, cols):\n    '''\n    Create a random integer with rows and cols.\n    '''\n    \n    return random.randint(-10, 10)\n    \n    \ndef get_random_float(rows, cols):\n    '''\n    Create a random float with rows and cols.\n    '''\n    \n    return random.random()\n    \n    \ndef get_random_bool(rows, cols):\n    '''\n    Create a random bool with rows and cols.\n    '''\n    \n    return bool(randint(0, 1))\n    \n    \ndef get_random_list_int(rows, cols):\n    '''\n    Create a random list of integers with rows and cols.\n    '''\n    \n    return [randint(0, 10) for i in range(cols)]\n    \n    \ndef get_random_list_float(rows, cols):\n    '''\n    Create a random list of floats with rows and cols.\n    '''\n    \n    return [random.random() for i in range(cols)]\n    \n    \ndef get_random_list_str(rows, cols):\n    '''\n    Create a random list of strings with rows and cols.\n    '''\n    \n    return [''.join(random.choice(string.ascii_letters) for i in range(i)) for i in range(cols)]\n    \n    \ndef get_random_list_str_numeric(rows, cols):\n    '''\n    Create a random list of strings with rows and cols, with numbers as well.\n    '''\n    \n    return [''.join(random.choice(string.ascii_letters + string.digits) for i in range(i)) for i in range(cols)]\n    \n    \ndef get_random_dict_int(rows, cols):\n    '''\n    Create a random dict of integers with rows and cols.\n    '''\n    \n    return {i: randint(0, 10) for i in range(cols)}\n    \n    \ndef get_random_dict_str(rows, cols):\n    '''\n    Create a random dict of strings with rows and cols.\n    '''\n    \n    return {i: "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return(list(map(float, test_list)))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for i in test_list:\n        for j in i:\n            if type(j) == str:\n                continue\n            if type(j) == int:\n                j = float(j)\n            if type(j) == float:\n                continue\n            else:\n                j = float(j)\n        result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] =='':\n                test_list[i][j] = 0\n            else:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) is list:\n            test_list[i] = list_to_float(test_list[i])\n        elif type(test_list[i]) is int or type(test_list[i]) is float:\n            pass\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                return \"ValueError: '{0}' is not a valid list of numbers\".format(test_list)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Write your function here\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                print(f\"The value '{test_list[i][j]}' in the list item '{i + 1}' of the list\")\n                print(f\"cannot be converted to float.\")\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # for each list in the list of lists\n    for list in test_list:\n        # for each element in the list\n        for i in range(len(list)):\n            # if the type is int and it's a number\n            if (type(list[i]) == int and type(list[i]) == float):\n                # convert to float\n                list[i] = float(list[i])\n                # if type is float\n            if (type(list[i]) == float):\n                # append to new list\n                test_list.append(list)\n                # return list\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string is None:\n        return []\n    \n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef no_space_list(list1):\n    '''\n    Write a function that removes all the spaces in a string.\n    '''\n    return \"\".join(list1)\n    \ndef no_whitespace_list(list1):\n    '''\n    Write a function that removes all the whitespace in a string.\n    '''\n    return \"\".join(list1).strip()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(\" \")\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Note that the following test should fail\n    # assert string_to_list('Hello') == ['H', 'e', 'l', 'l', 'o']\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n    \n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            continue\n        else:\n            break\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        if arr[0] == 0:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    a=0\n    b=len(arr)-1\n    while(a<=b):\n        mid=(a+b)//2\n        if arr[mid]==mid:\n            return mid\n        if arr[mid]>mid:\n            b=mid-1\n        else:\n            a=mid+1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    freq = {}\n    for i in arr:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    lo, hi = 0, len(arr) - 1\n    mid = lo + (hi - lo)//2\n    while lo < hi:\n        if arr[mid] == arr[hi]:\n            hi -= 1\n        elif arr[mid] == arr[lo]:\n            lo += 1\n        else:\n            return arr[mid]\n        mid = lo + (hi - lo)//2\n    return arr[hi]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    temp = 0\n    for i in range(n):\n        if arr[i]!= arr[temp]:\n            temp = i\n    print(arr[temp])\n    return arr[temp]\n    "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    sorted_arr = sorted(arr)\n    first_occurrence = 1\n    for i in range(1, len(sorted_arr)):\n        if sorted_arr[i] == sorted_arr[i-1]:\n            first_occurrence += 1\n        else:\n            break\n    return sorted_arr[first_occurrence]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # if len(arr) is even then the mid would be in second half\n    # else the mid would be in first half\n    mid = len(arr)//2\n    # if mid number is same as prev or next element then\n    # return that element\n    if mid == arr[mid-1] or mid == arr[mid+1]:\n        return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    else:\n        if l == 1:\n            return arr[0]\n        else:\n            if arr[0]!= arr[1]:\n                return arr[0]\n            else:\n                return search(arr[1:l-1])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if max_prod < abs(list1[i][0]*list1[j][1]) or max_prod < abs(list1[i][1]*list1[j][0]):\n                max_prod = abs(list1[i][0]*list1[j][1]) or abs(list1[i][1]*list1[j][0])\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    max = -999999\n    for i in range(0,len(list1)):\n        for j in range(i, len(list1)):\n            list2.append(list1[i][1] * list1[j][1])\n    for k in range(0, len(list2)):\n        if list2[k] > max:\n            max = list2[k]\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product(list1,i,j):\n        return max(max_product(list1,i+1,j),max_product(list1,i,j-1),(list1[i][0]*list1[i+1][0]*list1[j][0]*list1[j-1][0])//(-1))\n    max_product(list1,0,len(list1)-1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        a, b = list1[i]\n        for j in range(i+1, len(list1)):\n            c, d = list1[j]\n            if max(a,b) > max(c,d):\n                max_product = max(max_product, (a*c) * (b*d))\n            elif max(a,b) < max(c,d):\n                max_product = max(max_product, (c*d) * (a*b))\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i[0])\n        new_list.append(i[1])\n    for i in range(len(new_list)):\n        for j in range(i+1,len(new_list)):\n            if new_list[i]<new_list[j]:\n                new_list[i],new_list[j]=new_list[j],new_list[i]\n    for i in range(len(new_list)):\n        for j in range(i+1,len(new_list)):\n            if new_list[i]>new_list[j]:\n                new_list[i],new_list[j]=new_list[j],new_list[i]\n    list1 = []\n    for i in range(len(new_list)):\n        list1.append([new_list[i],new_list[i+1]])\n    print(list1)\n    return max_product_tuple(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key = lambda x: x[0])\n    max_prod = 0\n    curr_prod = 0\n    for i in range(len(list1) - 1):\n        curr_prod = list1[i][1] * list1[i + 1][1]\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n    print(max_prod)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # get length of the list\n    length = len(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    \n    elif len(list1) == 2:\n        return list1[0][0]*list1[1][0] if list1[0][0]*list1[1][0] > list1[0][1]*list1[1][1] else list1[0][1]*list1[1][1]\n    \n    else:\n        list1.sort(key=lambda x: x[0])\n        \n        for i in range(len(list1)-1):\n            if list1[i][0] > 0:\n                break\n        \n        \n        for i in range(len(list1)-1, 0, -1):\n            if list1[i][0] > 0:\n                break\n        \n        return list1[i][0]*list1[i][1] if list1[i][0]*list1[i][1] > list1[i-1][1]*list1[i-1][0] else list1[i-1][1]*list1[i-1][0]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) <= 1:\n        return 0\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maxi = (list1[0][0] * list1[0][1])\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][0] > maxi:\n                maxi = list1[i][0]*list1[j][0]\n    return maxi\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicables = 0\n    for i in range(2, limit):\n        amicables = find_amicables(i)\n        if sum_amicables > i:\n            sum_amicables += i\n        if sum_amicables > amicables:\n            sum_amicables = amicables\n    return sum_amicables\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    amicable_sum = 0\n    for number in range(1, limit):\n        # sum_of_2_divisors = 2\n        for i in range(1, number):\n            if number % i == 0:\n                # print('{0} / {1} = {2}'.format(number, i, number/i))\n                if i!= number and number / i == i:\n                    # sum_of_2_divisors += number\n                    # print('{0} / {1} = {2}'.format(number, i, number/i))\n                    amicable_sum += number\n                    break\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for i in range(1, limit):\n        for j in range(1, limit):\n            if i!= j and amicable_numbers_sum(i) == j and amicable_numbers_sum(j) == i:\n                amicable_numbers_sum += i\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1,limit):\n        sum_i = 0\n        sum_ii = 0\n        if i!= 0:\n            for j in range(1,i):\n                if i % j == 0:\n                    sum_i = sum_i + j\n            if sum_i == i:\n                sum_ii = sum_ii + sum_i\n        else:\n            sum_i = 1\n        sum_amicable = sum_amicable + sum_ii\n    return sum_amicable\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_set = set()\n    for i in range(1, limit + 1):\n        if i not in amicable_set:\n            amicable_set.add(sum(amicable_pair_num(i)))\n    return sum(amicable_set)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(2, limit):\n        a, b = 0, 0\n        for j in range(1, i):\n            if i % j == 0:\n                a = i\n            if j % a == 0:\n                b = j\n        if a == b:\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit + 1):\n        if num > 1:\n            amicable_sum = sum_of_divisors(num)\n            if amicable_sum == num and sum_of_divisors(amicable_sum) == num:\n                sum += num\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1,limit):\n        #check if i is divisible by any amicable numbers\n        sum_of_divisors = sum_of_divisors_recursive(i)\n        if i == sum_of_divisors:\n            #if it is amicable then add to the sum\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = {}\n    for i in range(1,limit):\n        total = 0\n        for j in range(1,i):\n            if (i % j == 0) and (j % i == 0):\n                total = total + i\n        if i == total and i!= total:\n            amicable_nums[i] = total\n    return sum(amicable_nums.values())\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        for j in range(i, limit):\n            if j > i:\n                if i * j == j + i:\n                    amicable_numbers.add(i)\n                    amicable_numbers.add(j)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.real**2 + a.imag**2 == 0:\n        return 0\n    if a.real**2 + a.imag**2 > 0:\n        return cmath.acos(a.imag / (a.real**2 + a.imag**2)**0.5)\n    else:\n        return 2*cmath.pi - cmath.acos(a.imag / (a.real**2 + a.imag**2)**0.5)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=float(a)\n    b=float(b)\n    ans=cmath.phase(complex(a,b))\n    ans=math.degrees(ans)\n    if(ans<0):\n        ans=360+ans\n    return ans\ndef judge(num,n):\n    '''\n    Write a function to judge whether a number is perfect square.\n    '''\n    if (int(n)==num):\n        return True\n    else:\n        return False\ndef prime(n):\n    '''\n    Write a function to check whether a number is a prime number or not.\n    '''\n    if(n<2):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if(n%i==0):\n            return False\n    return True\ndef to_binary(n):\n    '''\n    Write a function to convert decimal number to binary number.\n    '''\n    ans=''\n    if(n==0):\n        return '0'\n    ans=to_binary(n//2)\n    if(n%2==0):\n        ans=ans+'0'\n    else:\n        ans=ans+'1'\n    return ans\ndef number_of_1(n):\n    '''\n    Write a function to count the number of one bits.\n    '''\n    if(n==0):\n        return 0\n    if(n&1==1):\n        return 1+number_of_1(n-1)\n    else:\n        return number_of_1(n>>1)\ndef number_of_1_in_2(n):\n    '''\n    Write a function to count the number of one bits in the binary representation of a given number.\n    '''\n    if(n==0):\n        return 0\n    if(n&1==1):\n        return 1+number_of_1_in_2(n-1)\n    else:\n        return number_of_1_in_2(n>>1)\ndef find_gcd(a,b):\n    '''\n    Write a function to find the greatest common divisor.\n    '''\n    if(a<b):\n        return find_gcd(b,a)\n    if(a==0):\n        return b\n    return find_gcd(b%a,a)\ndef find_lcm(a,b):\n    '''\n    Write a function to find the least common multiple.\n    '''\n    if(a<b):\n        return find_lcm(b,a)\n    if(a==0):\n        return b\n    return a*b//find_gcd(a,b)\ndef find_gcd_of_three(a,b,c):\n    '''\n    Write a function to find the greatest common divisor of three numbers.\n    '''\n    if(a<b and b<c):\n        return find_gcd(a,b)\n    if(a<b and c<b):\n        return find_gcd(a,c)\n    if(b<a and a<c):\n        return find_gcd(b,a)\n    if(b<a and c<a):\n        return find_gcd(b,c)\n    if(a==0):\n        return b\n    if(b==0):\n        return c\n    if(c==0):\n        return a\n    return find_gcd_of_three(b,c,a%b)\ndef find_lcm_of_three(a,b,c):\n    '''\n    Write a function to find the least common multiple of three numbers.\n    '''\n    if(a<b and b<c):\n        return find_lcm(a,b)\n    if(a<b and c<b):\n        return find_lcm(a,c)\n    if(b<a and a<c):\n        return find_lcm(b,a)\n    if(b<a and c<a):\n        return find_lcm(b,c)\n    if(a==0):\n        return b\n    if(b==0):\n        return c\n    if(c==0):\n        return a\n    return find_lcm_of_three(b,c,a%b)\ndef find_common_divisor(a,b):\n    '''\n    Write a function to find the common divisor of two numbers.\n    '''\n    if(a<b):\n        return find_common_divisor(b,a)\n    if(a==0):\n        return b\n    return a%b\ndef find_least_common_multiple(a,b):\n    '''\n    Write a function to find the least common multiple of two numbers.\n    '''\n    if(a<b):\n        return find_least_common_multiple(b,a)\n    if(a==0):\n        return b\n    return a*b//find_common_divisor(a,b)\ndef find_greatest_common_divisor(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    if(a<b):\n        return find_greatest_common_divisor(b,a)\n    if(a==0):\n        return b\n    return a%b\ndef find_greatest_common_divisor_iterative(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    if(a<b):\n        return find_greatest_common_divisor_iterative(b,a)\n    if(a==0):\n        return b\n    while(b!=0):\n        a,b=b,a%b\n    return a\ndef find_greatest_common_divisor_recursive(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    if(a<b):\n        return find_greatest_common_divisor_recursive(b,a)\n    if(a==0):\n        return b\n    return a%b\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime number or not.\n    '''\n    if(n==1 or n==0):\n        return False\n    if(n==2):\n        return True\n    if(n==3):\n        return True\n    if(n%2==0):\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if(n%i==0):\n            return False\n    return True\ndef next_prime(n):\n    '''\n    Write a function to find the next prime number.\n    '''\n    n=n+1\n    while(is_prime(n)!=True):\n        n=n+1\n    return n\ndef next_prime_iterative(n):\n    '''\n    Write a function to find the next prime number.\n    '''\n    n=n+1\n    while(is_prime(n)==False):\n        n=n+1\n    return n\ndef next_prime_recursive(n):\n    '''\n    Write a function to find the next prime number.\n    '''\n    if(n==1):\n        return 2\n    n=n+1\n    while(is_prime(n)==False):\n        n=n+1\n    return n\ndef is_palindrome(n):\n    '''\n    Write a function to check whether a number is palindrome or not.\n    '''\n    if(n==0):\n        return True\n    if(n%10==0):\n        return False\n    ans=0\n    while(n>0):\n        ans=(ans*10)+n%10\n        n=n//10\n    return ans==n\ndef is_palindrome_recursive(n):\n    '''\n    Write a function to check whether a number is palindrome or not.\n    '''\n    if(n==0):\n        return True\n    if(n%10==0):\n        return False\n    return is_palindrome_recursive(n//10)*10+"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) - (a.imaginary*b.imaginary)\n    arccos = math.acos(sum)\n    return arccos\n    \ndef angle_sum_complex(a,b,c):\n    '''\n    Write a function to get the sum of all the angles formed by a, b, and c.\n    '''\n    angle_a = angle_complex(a,b)\n    angle_c = angle_complex(c,b)\n    angle_b = angle_complex(a,c)\n    return (angle_a + angle_c + angle_b)\n    \ndef diagonal_distance_complex(a,b):\n    '''\n    Write a function to get the diagonal distance of two complex numbers.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    dia = math.sqrt(sum)\n    return dia\n    \ndef distance_complex(a,b):\n    '''\n    Write a function to get the distance between two complex numbers.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    distance = math.sqrt(sum)\n    return distance\n    \ndef midpoint_complex(a,b):\n    '''\n    Write a function to get the midpoint between two complex numbers.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    midpoint = sum/(2)\n    return midpoint\n    \ndef midpoint_distance_complex(a,b):\n    '''\n    Write a function to get the midpoint distance between two complex numbers.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    midpoint = math.sqrt(sum)\n    return midpoint\n    \ndef perpendicular_distance_complex(a,b):\n    '''\n    Write a function to get the perpendicular distance between two complex numbers.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    perpendicular = math.sqrt(sum)\n    return perpendicular\n    \ndef slope_complex(a,b):\n    '''\n    Write a function to get the slope of a complex number.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    slope = math.atan2(a.imaginary,a.real)\n    return slope\n    \ndef slope_distance_complex(a,b):\n    '''\n    Write a function to get the slope distance of a and b.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    slope = math.atan2(a.imaginary,a.real)\n    d_slope = math.sqrt((math.pow(a.imaginary,2)) + (math.pow(a.real,2)))\n    return (d_slope*slope)\n    \ndef angle_angle_complex(a,b,c):\n    '''\n    Write a function to get the angle formed by a, b, and c.\n    '''\n    angle = angle_complex(a,b)\n    angle_2 = angle_complex(c,b)\n    angle_sum = angle_sum_complex(a,b,c)\n    return (angle_sum, angle)\n    \ndef angle_angle_distance_complex(a,b,c):\n    '''\n    Write a function to get the angle formed by a, b, and c.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    angle_2 = math.acos(sum)\n    angle_sum = angle_sum_complex(a,b,c)\n    return (angle_sum, angle_2)\n    \ndef angle_angle_distance_distance_complex(a,b,c):\n    '''\n    Write a function to get the angle formed by a, b, and c.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    angle_2 = math.acos(sum)\n    angle_sum = angle_sum_complex(a,b,c)\n    d_angle_2 = math.sqrt(math.pow(a.imaginary,2))\n    return (angle_sum, angle_2, d_angle_2)\n    \ndef perpendicular_distance_angle_complex(a,b,c):\n    '''\n    Write a function to get the perpendicular distance of a, b, and c.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    perpendicular = math.sqrt(sum)\n    d_angle_2 = math.sqrt(math.pow(a.imaginary,2))\n    return (perpendicular, d_angle_2)\n    \ndef perpendicular_distance_angle_distance_complex(a,b,c):\n    '''\n    Write a function to get the perpendicular distance of a, b, and c.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    perpendicular = math.sqrt(sum)\n    d_angle_2 = math.sqrt(math.pow(a.imaginary,2))\n    return (perpendicular, d_angle_2)\n    \ndef perpendicular_distance_distance_angle_complex(a,b,c):\n    '''\n    Write a function to get the perpendicular distance of a, b, and c.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    perpendicular = math.sqrt(sum)\n    d_angle_2 = math.sqrt(math.pow(a.imaginary,2))\n    return (perpendicular, d_angle_2)\n    \ndef distance_angle_angle_complex(a,b,c):\n    '''\n    Write a function to get the distance and the angle formed by a, b, and c.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    angle_2 = math.acos(sum)\n    angle_sum = angle_sum_complex(a,b,c)\n    return (angle_sum, angle_2)\n    \ndef distance_angle_angle_distance_complex(a,b,c):\n    '''\n    Write a function to get the distance and the angle formed by a, b, and c.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    angle_2 = math.acos(sum)\n    angle_sum = angle_sum_complex(a,b,c)\n    d_angle_2 = math.sqrt(math.pow(a.imaginary,2))\n    return (angle_sum, angle_2, d_angle_2)\n    \ndef distance_angle_distance_angle_complex(a,b,c):\n    '''\n    Write a function to get the distance and the angle formed by a, b, and c.\n    '''\n    import math\n    sum = 0\n    sum = (a.real*b.real) + (a.imaginary*b.imaginary)\n    angle_2 = math.acos(sum)\n    angle_sum = angle_sum_complex(a,b,c)\n    d_angle_2 = math.sqrt(math.pow(a.imaginary,2))\n    return (angle_sum"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(a,b)\n    cmath.polar(a)\n    cmath.polar(b)\n    print(cmath.phase(a))\n    print(cmath.phase(b))\n    return (cmath.phase(a)-cmath.phase(b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #X = math.cos(math.radians(90))\n    #Y = math.sin(math.radians(90))\n    #a = math.sqrt(X**2+Y**2)\n    #b = math.sqrt(a**2+Z**2)\n    #c = math.sqrt(b**2+a**2)\n    #d = math.sqrt(c**2+Z**2)\n    #print(d)\n    #e = math.sqrt(d**2+c**2)\n    #print(e)\n    #f = math.sqrt(e**2+b**2)\n    #print(f)\n    #g = math.sqrt(f**2+a**2)\n    #print(g)\n    #h = math.sqrt(g**2+b**2)\n    #print(h)\n    #i = math.sqrt(h**2+c**2)\n    #print(i)\n    #j = math.sqrt(i**2+d**2)\n    #print(j)\n    #k = math.sqrt(j**2+e**2)\n    #print(k)\n    #l = math.sqrt(k**2+f**2)\n    #print(l)\n    #m = math.sqrt(l**2+g**2)\n    #print(m)\n    #n = math.sqrt(m**2+h**2)\n    #print(n)\n    #o = math.sqrt(n**2+i**2)\n    #print(o)\n    #p = math.sqrt(o**2+j**2)\n    #print(p)\n    #q = math.sqrt(p**2+k**2)\n    #print(q)\n    #r = math.sqrt(q**2+l**2)\n    #print(r)\n    #s = math.sqrt(r**2+m**2)\n    #print(s)\n    #t = math.sqrt(s**2+n**2)\n    #print(t)\n    #u = math.sqrt(t**2+o**2)\n    #print(u)\n    #v = math.sqrt(u**2+p**2)\n    #print(v)\n    #w = math.sqrt(v**2+q**2)\n    #print(w)\n    #x = math.sqrt(w**2+r**2)\n    #print(x)\n    #y = math.sqrt(x**2+s**2)\n    #print(y)\n    #z = math.sqrt(y**2+t**2)\n    #print(z)\n    #print(1/z)\n    \n    #a = math.sqrt(Z**2+a**2)\n    #b = math.sqrt(a**2+Z**2)\n    #c = math.sqrt(b**2+Z**2)\n    #print(c)\n    #print(b)\n    #print(a)\n    a = math.atan2(a,b)\n    #print(a)\n    #b = math.atan2(c,Z)\n    #print(b)\n    #c = math.atan2(a,Z)\n    #print(c)\n    \n    #a = math.atan2(a,b)\n    #print(a)\n    #b = math.atan2(c,a)\n    #print(b)\n    #c = math.atan2(Z,a)\n    #print(c)\n    \n    #a = math.atan2(a,b)\n    #print(a)\n    #b = math.atan2(Z,c)\n    #print(b)\n    #c = math.atan2(Z,b)\n    #print(c)\n    \n    #a = math.sqrt(a**2+b**2)\n    #b = math.sqrt(c**2+d**2)\n    #c = math.sqrt(a**2+b**2)\n    #print(c)\n    #print(b)\n    #print(a)\n    #d = math.sqrt(a**2+c**2)\n    #e = math.sqrt(b**2+c**2)\n    #f = math.sqrt(e**2+d**2)\n    #g = math.sqrt(f**2+a**2)\n    #h = math.sqrt(g**2+b**2)\n    #i = math.sqrt(h**2+c**2)\n    #j = math.sqrt(i**2+d**2)\n    #k = math.sqrt(j**2+e**2)\n    #l = math.sqrt(k**2+f**2)\n    #m = math.sqrt(l**2+g**2)\n    #n = math.sqrt(m**2+h**2)\n    #o = math.sqrt(n**2+i**2)\n    #p = math.sqrt(o**2+j**2)\n    #q = math.sqrt(p**2+k**2)\n    #r = math.sqrt(q**2+l**2)\n    #s = math.sqrt(r**2+m**2)\n    #t = math.sqrt(s**2+n**2)\n    #u = math.sqrt(t**2+o**2)\n    #v = math.sqrt(u**2+p**2)\n    #w = math.sqrt(v**2+q**2)\n    #x = math.sqrt(w**2+r**2)\n    #y = math.sqrt(x**2+s**2)\n    #z = math.sqrt(y**2+t**2)\n    #print(1/z)\n    \n    #a = math.sqrt(a**2+b**2)\n    #b = math.sqrt(c**2+d**2)\n    #c = math.sqrt(a**2+b**2)\n    #d = math.sqrt(c**2+d**2)\n    #print(d)\n    #print(b)\n    #print(a)\n    #e = math.sqrt(a**2+c**2)\n    #f = math.sqrt(b**2+c**2)\n    #g = math.sqrt(e**2+d**2)\n    #h = math.sqrt(f**2+d**2)\n    #i = math.sqrt(h**2+e**2)\n    #j = math.sqrt(i**2+f**2)\n    #k = math.sqrt(j**2+g**2)\n    #l = math.sqrt(k**2+h**2)\n    #m = math.sqrt(l**2+g**2)\n    #n = math.sqrt(m**2+h**2)\n    #o = math.sqrt(n**2+i**2)\n    #p = math.sqrt(o**2+j**2)\n    #q = math.sqrt(p**2+k**2)\n    #r = math.sqrt(q**2+l**2)\n    #s = math.sqrt(r**2+m**2)\n    #t = math.sqrt(s**2+n**2)\n    #u = math.sqrt(t**2+o**2)\n    #v = math.sqrt(u**2+p**2)\n    #w = math.sqrt(v**2+q**2)\n    #x = math.sqrt(w**2+r**2)\n    #y = math.sqrt(x**2+s**2)\n    #z = math.sqrt(y**2+t**2)\n    #print(1/z)\n    \n    \n    \n    \n    \n    \n    #a = math.sqrt(a**2+b**2)\n    #b = math.sqrt(c**2+d**2)\n    #c = math.sqrt(a**2+b**2)\n    #d = math.s"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = a.real*b.real+a.imag*b.imag\n    return cmath.phase(angle)\ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # print(\"in function\",a,b)\n    if a == 0 and b == 0:\n        # print(\"returning 0\")\n        return 0\n    if a == 0:\n        if abs(b) > abs(a):\n            # print(\"returning -math.pi/2\")\n            return -math.pi/2\n        elif abs(b) == abs(a):\n            # print(\"returning math.pi/2\")\n            return math.pi/2\n        else:\n            # print(\"returning -math.pi/2\")\n            return math.pi/2\n    elif b == 0:\n        if abs(a) > abs(b):\n            # print(\"returning math.pi/2\")\n            return math.pi/2\n        elif abs(a) == abs(b):\n            # print(\"returning 0\")\n            return 0\n        else:\n            # print(\"returning -math.pi/2\")\n            return -math.pi/2\n    else:\n        # print(\"returning math.atan(b/a)\",math.atan(b/a))\n        return math.atan(b/a)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a*b.conjugate())\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x=a.real\n    y=a.imag\n    return(cmath.phase(a))\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    print(\"Find length of binary string: \", string)\n    l = len(string)\n    count = 0\n    max_diff = 0\n    for i in range(l):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            max_diff = max(max_diff, i - l + 1)\n    if max_diff < 0:\n        max_diff = 0\n    print(\"Maximum difference between no. of 0s and no. of 1s is: \", max_diff)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    from collections import Counter \n    max_diff = 0\n    # Extract substrings of size 2 from the given string \n    for i in range(0, len(string)-1): \n        for j in range(i+1, len(string)): \n            count_0 = 0\n            count_1 = 0\n            if string[i] == '0' and string[j] == '0': \n                count_0 = 1\n            elif string[i] == '1' and string[j] == '1': \n                count_1 = 1\n            else: \n                break\n            # If the difference between the count of 0s and 1s in a substring is maximum, \n            # update the value of max_diff \n            diff = abs(count_0 - count_1) \n            if max_diff < diff: \n                max_diff = diff \n    return max_diff \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zero = 0\n    count_one = 0\n    count = 0\n    for i in string:\n        if i == \"1\":\n            count_one += 1\n        else:\n            count_zero += 1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = 0\n    while res <= string.length:\n        cnt_0 = cnt_1 = 0\n        for i in range(res, string.length):\n            if string[i] == '0':\n                cnt_0 += 1\n            else:\n                cnt_1 += 1\n        if abs(cnt_0 - cnt_1) > res:\n            res = abs(cnt_0 - cnt_1)\n        \n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        elif string[i] == '0':\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_xor_neg(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '0'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '1'):\n            count += 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '0'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '1'):\n            count += 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '0'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '1'):\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg_1(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '0'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '1'):\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg_2(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '1'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '0'):\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg_3(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '0'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '1'):\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg_4(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '1'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '0'):\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg_5(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '1'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '0'):\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg_6(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '0'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '0'):\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg_7(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '1'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '0'):\n            count -= 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg_8(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] == '0') and (string[i+1] == '0'):\n            count += 1\n        elif (string[i] == '1') and (string[i+1] == '1'):\n            count += 1\n        if count > max_count:\n            max_count = count\n    return max_count\n    \n    \ndef find_length_bit_wise_neg_9(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if (string[i] ="
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        number_of_0 = string[i].count('0')\n        number_of_1 = string[i].count('1')\n        if number_of_1 > max_length:\n            max_length = number_of_1\n        if number_of_0 > max_length:\n            max_length = number_of_0\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    \n    return abs(count_1 - count_0)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    number_of_zeros = 0\n    number_of_ones = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == \"1\":\n            number_of_ones += 1\n        else:\n            number_of_zeros += 1\n        max_diff = max(max_diff, number_of_zeros - number_of_ones)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(0,len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string = list(string)\n    length = len(string)\n    max_diff = 0\n    while length > 1:\n        zero_count = 0\n        one_count = 0\n        for i in range(1, length):\n            if string[i] == '0':\n                zero_count += 1\n            if string[i] == '1':\n                one_count += 1\n        max_diff = max(max_diff, abs(zero_count - one_count))\n        length = len(string)\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors_list = []\n    \n    # Base case\n    if (a == 1 or b == 1):\n        return 1\n    if (a == 2 and b == 2):\n        return 3\n    if (a == 3 and b == 3):\n        return 6\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    '''\n    Input: a = 2, b = 3\n    Output: 2\n    Explanation: The common divisors of 2 and 3 are 1 and 2. So the sum of the divisors is 2.\n    '''\n    divisors = []\n    a_divisors = list(range(1,a+1))\n    b_divisors = list(range(1,b+1))\n    for i in a_divisors:\n        if i in b_divisors:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    c = 0\n    for i in range(1, min(a,b) + 1):\n        if a % i == 0 and b % i == 0:\n            c += i\n    print(c)\nsum(12,13)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common = 0\n    if a > b:\n        min = b\n        max = a\n    else:\n        min = a\n        max = b\n    for i in range(1,min+1):\n        if min % i == 0 and max % i == 0:\n            common = i\n    return common\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    common_divisor = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            common_divisor.append(i)\n    for j in range(1, b+1):\n        if b % j == 0:\n            common_divisor.append(j)\n    common_divisor = set(common_divisor)\n    common_divisor = list(common_divisor)\n    common_divisor.sort()\n    common_divisor = int(common_divisor[0])\n    return common_divisor\n    \na = input()\nb = input()\nsum(a,b)"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    print(sum)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors.append(i)\n    for i in range(1, b + 1):\n        if b % i == 0:\n            divisors.append(i)\n    sum = 0\n    for i in range(0, len(divisors) - 1):\n        if divisors[i] == divisors[i + 1]:\n            sum += divisors[i]\n    print(sum)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count=0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            count+=i\n    return count\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if a <= 0 or b <= 0:\n        return None\n    \n    for d in range(2,min(a,b)+1):\n        if a%d == 0 and b%d == 0:\n            return d\n    return None\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #using divisor decomposition of two numbers \n    a = sorted(list(divisors(a)))\n    b = sorted(list(divisors(b)))\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    if x == 1 or y == 1:\n        return 1\n    return x + multiply_int(x-1, y-1)\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that checks whether a string is a palindrome.\n    A palindrome is a string that reads the same forwards and backwards.\n    '''\n    #Only works with strings.\n    if type(s)!= str:\n        return False\n    \n    i, j = 0, len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return_words = []\n    for word in str:\n        if len(word) > n:\n            return_words.append(word)\n    return return_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split(\" \"):\n        if len(word) >= n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\nprint(long_words(4, [\"Python\", \"Java\", \"Golang\", \"JavaScript\"]))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    words_len = []\n    for word in words:\n        if len(word) > n:\n            words_len.append(word)\n    return words_len\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for i in range(len(str)):\n        if len(str[i])>n:\n            long.append(str[i])\n    return long\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    n_longer = []\n    for word in str:\n        if len(word) > n:\n            n_longer.append(word)\n    return n_longer\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    n = int(n)\n    output = list()\n    for i in range(len(str)):\n        if len(str[i]) >= n:\n            output.append(str[i])\n    return output\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n    \nprint(long_words(2, [\"Python\", \"Java\", \"computer\", \"programming\"]))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    size = len(my_matrix)\n    \n    for i in range(0, size):\n        for j in range(0, size):\n            if i!= j and my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # Check if the matrix is a magic square\n    magic_square_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            magic_square_sum += my_matrix[i][j]\n    if magic_square_sum!= 45:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 0:\n        if len(my_matrix[0])!= 0:\n            if len(my_matrix) == len(my_matrix[0]) and len(my_matrix) == len(set([sum(i) for i in my_matrix])):\n                for row in range(len(my_matrix)):\n                    for col in range(len(my_matrix[0])):\n                        if my_matrix[row][col]!= row + col + 1:\n                            return False\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0,4):\n        for j in range(0,4):\n            if my_matrix[i][j]!= i*j:\n                print(\"This is not a magic square\")\n                return False\n            else:\n                print(my_matrix[i][j],\"is correct\")\n    print(\"This is a magic square\")\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    if len(my_matrix)!= 4:\n        return False\n    else:\n        # Using a set to check for duplicates.\n        for i in range(len(my_matrix)):\n            set_row = set()\n            for j in range(len(my_matrix[i])):\n                if my_matrix[i][j] in set_row:\n                    return False\n                else:\n                    set_row.add(my_matrix[i][j])\n    \n        # Checking diagonals:\n        # Set for first diagonal\n        set_first_diagonal = set()\n        for i in range(len(my_matrix)):\n            set_first_diagonal.add(my_matrix[i][i])\n        # Set for second diagonal\n        set_second_diagonal = set()\n        for i in range(len(my_matrix)):\n            set_second_diagonal.add(my_matrix[i][len(my_matrix) - 1 - i])\n        \n        # Checking if all 4 elements are in the same set\n        if set_first_diagonal == set_second_diagonal:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 5:\n        return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i + j!= len(my_matrix):\n                if not (my_matrix[i][j] == 0 or my_matrix[j][i] == 0):\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n    if m!= n:\n        return False\n    else:\n        for i in range(0, m):\n            for j in range(0, m):\n                if my_matrix[i][j]!= sum([my_matrix[k][j] for k in range(0, m)]):\n                    return False\n                else:\n                    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    size = len(my_matrix)\n    # Check if the matrix is square\n    if size!= size:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        my_matrix[i] = sorted(my_matrix[i])\n    check = True\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix[0]):\n            check = False\n            break\n    if check:\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix[0])):\n                if my_matrix[i][j]!= i + j:\n                    check = False\n                    break\n            if check == False:\n                break\n    return check\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return magic_square_recursion(my_matrix)\n    \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_nums = {}\n    for num in nums:\n        if num in dict_nums:\n            dict_nums[num] += 1\n        else:\n            dict_nums[num] = 1\n    max_occurrences = max(dict_nums.values())\n    return_values = []\n    for key in dict_nums:\n        if dict_nums[key] == max_occurrences:\n            return_values.append(key)\n    return return_values\nprint(max_occurrences([1,2,3,2,1]))\nprint(max_occurrences([1,1,1,1,1]))\nprint(max_occurrences([1,2,3]))\nprint(max_occurrences([1,1,1,1,1]))\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    for i in d.keys():\n        if d[i] == max(d.values()):\n            return i\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create dict\n    d = defaultdict(int)\n    # loop over nums\n    for num in nums:\n        d[num] += 1\n    # return key with highest value\n    return max(d, key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_val = 0\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n        if max_freq < d[num]:\n            max_freq = d[num]\n            max_val = num\n    return max_val\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_val = max(counts.values())\n    return (max(counts,key=counts.get),max_val)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    print(count_dict)\n    maximum = max(count_dict, key = count_dict.get)\n    return maximum\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return\n    \n    d = defaultdict(lambda:0)\n    for i in nums:\n        d[i] += 1\n    max_v = max(d.values())\n    for key in d.keys():\n        if d[key] == max_v:\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for i in nums:\n        counts[i] += 1\n    return max(counts, key=counts.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = {}\n    n = len(nums)\n    for i in nums:\n        result[i] = result.get(i,0)+1\n    lst = list(result.items())\n    lst = sorted(lst, key = lambda x: x[1], reverse = True)\n    return lst[0][0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums.sort()\n    hash_map = defaultdict(int)\n    \n    for num in nums:\n        hash_map[num] += 1\n    \n    max_count = -1\n    max_element = -1\n    for key, value in hash_map.items():\n        if max_count < value:\n            max_count = value\n            max_element = key\n    return max_element\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    newstr = ''\n    for i in str1:\n        if i not in vowels:\n            newstr += i\n        else:\n            newstr += '*'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str2 = str1.lower()\n    result = \"\"\n    for i in range(len(str2)):\n        if str2[i] in vowels:\n            result = result + str2[i]\n        else:\n            result = result + str2[i].upper()\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            char = char.upper()\n        reversed_str += char\n    return reversed_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = ''\n    vowels = 'aeiou'\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str2 = set(str1)\n    str2 = list(str2)\n    str2 = ''.join(str2)\n    for i in vowels:\n        str2 = str2.replace(i, ''.join(reversed(i)))\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = str1.lower()\n    vowel_list = []\n    for i in str1:\n        if i not in vowels:\n            vowel_list.append(i)\n    str1 = ''.join(vowel_list)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str2 = str1[::-1]\n    for i in range(len(str2)):\n        if str2[i] in vowels:\n            str2 = str2[:i] + str2[i].upper() + str2[i+1:]\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u')\n    res = []\n    for i in str1:\n        if i not in vowels:\n            res.append(i)\n        else:\n            res.insert(0,i)\n    return ''.join(res)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    str2 = \"\"\n    for char in str1:\n        if char not in vowels:\n            str2 = str2 + char\n        else:\n            str2 = str2 + char[::-1]\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str2 = ''\n    for i in str1:\n        if i not in vowels:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s = s + str(i) +''\n    return s\n    \ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = \"\"\n    for i in range(len(tup1)):\n        tup_string += str(tup1[i])+\",\"\n    tup_string = tup_string[:-1]\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1_str = ''\n    for i in tup1:\n        tup1_str += i\n    return tup1_str\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''.join(tup1)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(str(x) for x in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return f\"{str(tup1)[1:-1]}\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_numbers = []\n    \n    for num in nums:\n        if num < 0:\n            negative_numbers.append(num)\n            \n    return sum(negative_numbers)\n            \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum=0\n    for i in nums:\n        if i<0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for num in nums:\n        if num < 0:\n            negativesum += num\n    return negativesum\n    \ndef sum_negativenums(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # This works too\n    negativesum = sum([num for num in nums if num < 0])\n    return negativesum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for number in nums:\n        if number < 0:\n            negativesum += number\n    return negativesum\n    \n    \ndef sum_negativenumber(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([number for number in nums if number < 0])\n    \n    \ndef sum_list(nums):\n    '''\n    Write a function to calculate the sum of a list of numbers.\n    '''\n    return sum(nums)\n    \n    \ndef sum_list_even(nums):\n    '''\n    Write a function to calculate the sum of a list of numbers.\n    '''\n    return sum([number for number in nums if number % 2 == 0])\n    \n    \ndef sum_list_odd(nums):\n    '''\n    Write a function to calculate the sum of a list of numbers.\n    '''\n    return sum([number for number in nums if number % 2!= 0])\n    \n    \ndef sum_list_sum(nums):\n    '''\n    Write a function to calculate the sum of a list of numbers.\n    '''\n    return sum(nums) - (sum([number for number in nums if number % 2!= 0]))\n    \n    \ndef product_list(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_sliced(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_reverse(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_reversed(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_recursive(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_reverse_recursive(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_and(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_or(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_not(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_positive(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_negative(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_invert(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_plus(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_star(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_value(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_getitem(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_length(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_count(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_multiply_numeric(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_multiply_string(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_minus(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_subtract(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_swap(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_divide(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_modulus(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_float(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_divide_remainder(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_divide_by(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_divide_by_string(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_remainder(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_fraction(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_fraction_string(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_fraction_remainder(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_fraction_divide(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_fraction_remainder_divide(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_list(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_list_reversed(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_list_sliced(nums):\n    '''\n    Write a function to calculate the product of a list of numbers.\n    '''\n    return 1\n    \n    \ndef product_list_list_sum(nums):\n    '''\n    Write a function to calculate the product of a lis"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        total += -i\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for i in nums:\n        if i < 0:\n            total_sum += i\n    return total_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the number of hexagonals and number of digits.\n    num_of_hexagonals, num_of_digits = 2, 1\n    \n    # Continuously add to num_of_hexagonals until we reach nth digit\n    while n > num_of_digits:\n        num_of_hexagonals += num_of_hexagonals\n        num_of_digits += 1\n    \n    # Return the number of hexagonals and the number of digits\n    return num_of_hexagonals, num_of_digits\n    "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    h = 6*(n-1) + 1\n    return h\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n - 1\n    if n == 0:\n        return 1\n    else:\n        return int(((2 * n - 1) * (2 * n)) / 6)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return hexagonal_num(n - 1) + 2 * hexagonal_num(n - 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n<0: return\n    if n==0: return 6\n    else: \n        if n==1: return 8\n        else:\n            return 16 * hexagonal_num(n-1) - 2 * hexagonal_num(n-2) + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = (1/6)\n    c = (5/6)\n    d = 1 - (b + c)\n    return int((a + b*n + c*(n**2) + d*(n**3))/6)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        print(\"n must be greater than 1\")\n    if n == 1:\n        return 1\n    else:\n        return int(pow(3*n - 3, 0.5)) + int(pow(3*n - 2, 0.5)) + int(pow(3*n - 1, 0.5))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    i = 1\n    m = 0\n    while i <= n:\n        m += 1\n        i *= 6\n    return m\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 1\n    for x in range(n):\n        result = result * (2 * n - 2 * x + 1) / (2 * n - x)\n    return result\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    '''\n    # solution 1\n    result = 0\n    total = 0\n    for i in nums:\n        if i == 0:\n            total += 1\n        else:\n            result += 1\n    return float(result/total)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #firstly let's check if the array is empty\n    if len(nums) == 0:\n        return 0\n    zeroes = 0\n    ones = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            ones += 1\n    # now the ratio of zeros to ones is the ration of 0's to 1's\n    return zeroes / ones\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    #using the bitmap method, if there are some positions with bit set then it is a zero, otherwise it is not\n    #using the bitwise operator\n    # bitwise operator is not work in python\n    bit_count = 0\n    for x in nums:\n        if x == 0:\n            bit_count+=1\n    \n    zero_count = bit_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero = 0\n    nonzero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero+=1\n        else:\n            nonzero+=1\n    return zero/nonzero\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len(nums) / (len(nums) - len(filter(lambda x: x == 0, nums)))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n    return zeros/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(sum(x==0 for x in nums))/float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_nonzero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    return count_zero/count_nonzero\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count/non_zero_count\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Your code here\n    # to find the factors of given number\n    factors = []\n    while n % 2 == 0:\n        n = n // 2\n        factors.append(2)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n==0):\n        return False\n    while (n>1):\n        if (n%2==0):\n            n=n/2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    n = n\n    while n % 2 == 0: \n        n /= 2\n    if n == 1: \n        return True\n    return False\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    while n > 1: \n        if n % 2 == 0: \n            n = n / 2\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Code here\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # % signifies modulus.\n    # Shorter version: \n    return (n>0) and (n%2==0) and (all(i % 2 == 0 for i in range(2, int(n**0.5) + 1)))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n <= 0): \n        return False\n    s = 0\n    while n > 0: \n        if(n % 2 == 1): \n            return False\n        n = n >> 1\n        s += 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    x = 0\n    while(n>0):\n        x = 2**n\n        n = n-1\n        if x == n:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    from math import log2, sqrt\n    \n    if n == 0:\n        return False\n    elif n < 0:\n        return False\n    else:\n        return log2(n).is_integer()\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n!= 0:\n        if (n % 2) == 0:\n            n = n // 2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    import sys\n    \n    if r <= 0:\n        raise ValueError('Error: Radius must be a positive value.')\n    \n    else:\n        circumference = 2 * math.pi * r\n        return circumference\n        \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    import math\n    import sys\n    \n    if r <= 0:\n        raise ValueError('Error: Radius must be a positive value.')\n    \n    else:\n        area = math.pi * (r**2)\n        return area\n    \ndef circle_exact_area(r):\n    '''\n    Write a function to find the exact area of a circle.\n    '''\n    import math\n    import sys\n    \n    if r <= 0:\n        raise ValueError('Error: Radius must be a positive value.')\n    \n    else:\n        area = math.pi * (r**2)\n        return area\n    \ndef circle_gauge_area(r):\n    '''\n    Write a function to find the approximate area of a circle.\n    '''\n    import math\n    import sys\n    \n    if r <= 0:\n        raise ValueError('Error: Radius must be a positive value.')\n    \n    else:\n        area = math.pi * (r**2)\n        return area\n    \ndef circle_gauge_area_via_func(r):\n    '''\n    Write a function to find the approximate area of a circle.\n    '''\n    import math\n    import sys\n    \n    if r <= 0:\n        raise ValueError('Error: Radius must be a positive value.')\n    \n    else:\n        area = math.pi * (r**2)\n        return area\n    \ndef circle_gauge_area_via_func_2(r):\n    '''\n    Write a function to find the approximate area of a circle.\n    '''\n    import math\n    import sys\n    \n    if r <= 0:\n        raise ValueError('Error: Radius must be a positive value.')\n    \n    else:\n        area = math.pi * (r**2)\n        return area\n    \ndef circle_rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = l * b\n        return area\n    \ndef circle_rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        perimeter = (2*l) + (2*b)\n        return perimeter\n    \ndef circle_rectangle_area_via_func(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_2(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_3(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_4(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_5(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_6(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_7(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_8(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_9(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_10(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_11(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise ValueError('Error: Length must be a positive value.')\n    \n    else:\n        area = math.pi * (l**2) + (math.pi * (b**2))\n        return area\n    \ndef circle_rectangle_area_via_func_12(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    import math\n    import sys\n    \n    if l <= 0 or b <= 0:\n        raise Valu"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return (2*3.14159*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    PI = 3.14159\n    circumference = 2 * PI * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # C = 2 * PI * r\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        flattened_list.extend(i)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final = set()\n    for i in test_list:\n        for j in i:\n            final.add(j)\n    return final\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list == None:\n        return\n    if type(test_list)!= list:\n        return test_list\n    result = []\n    for i in range(len(test_list)):\n        if type(test_list[i]) == list:\n            result += extract_singly(test_list[i])\n        else:\n            result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_set = set()\n    for l in test_list:\n        return_set = return_set | set(l)\n    return return_set\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for l in test_list:\n        for num in l:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if not test_list:\n        return\n    return {item for sublist in test_list for item in sublist}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    total = 0\n    for element in test_list:\n        for val in element:\n            total += val\n    return total\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # return list(itertools.chain.from_iterable(test_list))\n    if len(test_list) == 0:\n        return []\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for element in test_list:\n        if type(element) == list:\n            output += extract_singly(element)\n        else:\n            output.append(element)\n    return output\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print(\"sorting pancakes...\")\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return _pancake_sort(nums,0,len(nums)-1)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        max_num = max(nums[:i])\n        max_index = nums.index(max_num)\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n        nums[:i] = sorted(nums[:i])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    Time: O(NlogN)\n    Space: O(1)\n    '''\n    \n    n = len(nums)\n    \n    def swap(a, b):\n        nums[a], nums[b] = nums[b], nums[a]\n        \n    def bubble_sort(nums, low, high):\n        '''\n        Bubble sort.\n        '''\n        while low < high:\n            for i in range(low, high):\n                if nums[i] > nums[i + 1]:\n                    swap(i, i + 1)\n            high -= 1\n            \n            for i in range(high, low, -1):\n                if nums[i] > nums[i - 1]:\n                    swap(i, i - 1)\n            low += 1\n            \n        return nums\n        \n    def pancake_sort(nums):\n        '''\n        Sort the numbers using a pancake sort.\n        '''\n        '''\n        Time: O(N)\n        Space: O(1)\n        '''\n        count = 0\n        n = len(nums)\n        \n        while count < n - 1:\n            big = nums.index(max(nums))\n            nums = bubble_sort(nums, 0, big)\n            if count!= big:\n                count += 1\n        return nums\n        \n    return pancake_sort(nums)"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-1, i, -1):\n            if nums[j-1] > nums[j]:\n                nums[j-1], nums[j] = nums[j], nums[j-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    for i in range(n - 1, -1, -1):\n        # find the maximum element in the\n        # last `i` elements\n        max_index = i\n        for j in range(i, 0, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_nums = nums[:]\n    n = len(nums)\n    if n == 0:\n        return sorted_nums\n    if n == 1:\n        return nums\n    if n == 2:\n        if nums[0] > nums[1]:\n            return sorted_nums\n        else:\n            return nums\n    else:\n        #find the max element in the list\n        max_index = 0\n        for i in range(1,n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        #find the min element in the list\n        min_index = n-1\n        for i in range(n-2,-1,-1):\n            if nums[i] > nums[min_index]:\n                min_index = i\n        #swap the max and min element\n        if min_index!= max_index:\n            temp = nums[max_index]\n            nums[max_index] = nums[min_index]\n            nums[min_index] = temp\n        #recur to sort the rest of the list\n        pancake_sort(nums[0:max_index+1])\n        pancake_sort(nums[max_index+1:n])\n    return sorted_nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums = nums[::-1]\n    for i in range(len(nums)):\n        for j in range(len(nums)-1-i):\n            if nums[j]>nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    k = len(nums) - 1\n    for i in range(k, 0, -1):\n        tmp = nums[i]\n        j = i\n        while j > 0 and nums[j - 1] > tmp:\n            nums[j] = nums[j - 1]\n            j -= 1\n        nums[j] = tmp\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # O(n) time and O(1) space\n    for i in range(n-1, -1, -1):\n        \n        current = i\n        \n        for j in range(i, 0, -1):\n            if nums[j] < nums[current]:\n                nums[j], nums[current] = nums[current], nums[j]\n                current -= 1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a = 0\n    b = 0\n    c = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            a += 1\n    return a\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if len(list1)==len(list2) and len(list2)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list2[j]==list3[k] and list1[i]==list3[k]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_samepair_list = []\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count_samepair_list.append(1)\n        else:\n            count_samepair_list.append(0)\n    return count_samepair_list\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for x in range(len(list1)):\n        if list1[x] == list2[x] and list1[x] == list3[x]:\n            count+=1\n    return count\nprint(count_samepair([1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_list=[]\n    l2=[]\n    l3=[]\n    for i in range(len(list1)):\n        l2.append(list1[i])\n    for i in range(len(list2)):\n        l3.append(list2[i])\n    for i in range(len(l2)):\n        if l2[i]==l3[i]:\n            count_list.append(l2[i])\n    return count_list\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n=len(list1)\n    m=len(list2)\n    l=len(list3)\n    count=0\n    for i in range(n):\n        for j in range(m):\n            for k in range(l):\n                if list1[i]==list2[j]==list3[k]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return input.count(())\n    \nInput = (1, 2, 3, 4, 5, 2, 1, 2, 1, 4, 5) \nprint(\"The number of lists in given tuple : \", find_lists(Input)) \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0\n    for i in Input:\n        lists = lists + 1\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    try:\n        assert isinstance(Input, tuple)\n        count = 0\n        for i in range(len(Input)):\n            if isinstance(Input[i], list):\n                count += 1\n        return count\n    except AssertionError:\n        raise AssertionError('This is not a tuple')\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            lists += 1\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in Input: \n        if type(i) == list:\n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if isinstance(Input[i],list):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = set(Input)\n    if len(Input) == 1: \n        return 1 \n    else:\n        for i in range(len(Input)):\n            Input.remove(Input[i])\n            if len(Input) == 1: \n                return 2\n            else: \n                Input.add(Input[i])\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_dif = 0\n    for i in range(len(arr)-1):\n        max_dif = max(max_dif, abs(arr[i]-arr[i+1]))\n    return max_dif\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = -sys.maxsize - 1\n    for i in range(len(arr)-1): \n        if abs(arr[i] - arr[i+1]) > max: \n            max = abs(arr[i] - arr[i+1]) \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0] \n    for i in range(2, len(arr)): \n        if arr[i] - arr[i - 1] > max_diff: \n            max_diff = arr[i] - arr[i - 1] \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff: \n                max_diff = diff \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    maxDiff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > maxDiff:\n                maxDiff = abs(arr[i] - arr[j])\n                \n    return maxDiff\n        \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    max_diff = arr[1]-arr[0]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr) \n    maxdiff = -10\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j])\n            if diff>maxdiff:\n                maxdiff = diff\n    return maxdiff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    import math\n    n = len(arr) \n    if (n < 2): \n        return 0\n    else: \n        min_elem = arr[0] \n        max_elem = arr[0] \n        for i in range(1, n): \n            if (arr[i] < min_elem): \n                min_elem = arr[i] \n            elif (arr[i] > max_elem): \n                max_elem = arr[i] \n        return (max_elem - min_elem) \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Your code here\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\tMax_Abs_Diff fucntion\")\n    max1 = -999999999999999999999\n    for i in range(len(arr)-1):\n        if(arr[i] > max1):\n            max1 = arr[i]\n    for i in range(len(arr)-1):\n        if(arr[i] < max1):\n            max1 = arr[i]\n    return max1\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        if abs(arr[i]-arr[i+1]) > max_diff:\n            max_diff = abs(arr[i]-arr[i+1])\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, a + 1):\n        for y in range(1, b + 1):\n            if x * x + y * y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    a = int(a)\n    b = int(b)\n    n = int(n)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n < 0:\n        return None\n    else:\n        for x in range(1, n):\n            if n == a * x + b * x:\n                return (x, a * x + b * x)\n            else:\n                x += 1\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, a + 1):\n        for y in range(1, b + 1):\n            if x*x + y*y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Make sure b isn't greater than n\n    if b > n:\n        return None\n    # If the quadratic equation is of the form ax^2 + bx + c = 0, then find x and y such that c = 0.\n    # That is, find the real solutions\n    if a**2 == b**2:\n        return (a, -1)\n    # Otherwise, find two real solutions\n    else:\n        x1 = (-b + math.sqrt(b**2 - 4*a*n))/(2*a)\n        x2 = (-b - math.sqrt(b**2 - 4*a*n))/(2*a)\n        return (x1, x2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solution = ()\n    for i in range(0, n):\n        if a*i + b*n == n:\n            solution = i, n - i\n            break\n        if a*i + b*n < n:\n            continue\n        if a*i + b*n > n:\n            break\n    return solution\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # START SOLUTION\n    for x in range(0, n):\n        for y in range(0, n):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//a):\n        if (n-(a*x))%b!= 0:\n            continue\n        if (n-(a*x))/b == x:\n            return (int(x),int((n-(a*x))/b))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n + 1):\n        for y in range(0, n + 1):\n            if x * a + y * b == n:\n                return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, a+1):\n        for y in range(0, b+1):\n            if x*a + y*b == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n            \n    return list1\n    \ndef divisible_by_five(list1):\n    '''\n    Write a function that returns the sum of divisible numbers from a list.\n    '''\n    \n    list1 = set(list1)\n    sum_div_five = 0\n    \n    for i in list1:\n        if i % 5 == 0:\n            sum_div_five += i\n    \n    return sum_div_five\n    \ndef sum_range(list1, low, high):\n    '''\n    Write a function that returns the sum of the elements from low (inclusive) to high (exclusive) in the list.\n    '''\n    \n    sum_elements = 0\n    \n    for i in list1:\n        if low <= i <= high:\n            sum_elements += i\n            \n    return sum_elements\n    \ndef sum_positive_negative(list1):\n    '''\n    Write a function that returns the sum of all the positive and negative integers in the list.\n    '''\n    \n    sum_pos_neg = 0\n    \n    for i in list1:\n        if i >= 0:\n            sum_pos_neg += i\n        else:\n            sum_pos_neg -= i\n            \n    return sum_pos_neg\n    \ndef sum_divisible(list1, divisible_by):\n    '''\n    Write a function that returns the sum of the integers from list1 that are divisible by divisible_by.\n    '''\n    \n    sum_div_by = 0\n    \n    for i in list1:\n        if i % divisible_by == 0:\n            sum_div_by += i\n            \n    return sum_div_by\n    \ndef find_min_max(list1):\n    '''\n    Write a function that returns the min and max of a given list.\n    '''\n    \n    min_val = min(list1)\n    max_val = max(list1)\n    \n    return (min_val, max_val)\n    \ndef sum_even_odd(list1):\n    '''\n    Write a function that returns the sum of all the even and odd integers in the list.\n    '''\n    \n    even_sum = 0\n    odd_sum = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n            \n    return even_sum - odd_sum\n    \ndef sum_even_odd_with_index(list1):\n    '''\n    Write a function that returns the sum of all the even and odd integers in the list, and also returns the indices of those integers that are even and odd.\n    '''\n    \n    even_index = []\n    odd_index = []\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index.append(i)\n        else:\n            odd_index.append(i)\n            \n    sum_e_i = 0\n    sum_o_i = 0\n    \n    for i in even_index:\n        sum_e_i += list1[i]\n        \n    for i in odd_index:\n        sum_o_i += list1[i]\n        \n    return (sum_e_i, sum_o_i, even_index, odd_index)\n    \ndef average_of_list(list1):\n    '''\n    Write a function that returns the average of a given list.\n    '''\n    \n    sum_of_list = sum(list1)\n    length_of_list = len(list1)\n    \n    return sum_of_list / length_of_list\n    \ndef average_of_list_with_index(list1):\n    '''\n    Write a function that returns the average of a given list. The average is found by dividing the sum of all integers in the list by the length of the list.\n    '''\n    \n    sum_of_list = sum(list1)\n    length_of_list = len(list1)\n    \n    return sum_of_list / length_of_list\n    \ndef unique_elements(list1):\n    '''\n    Write a function that returns the unique elements in a list.\n    '''\n    \n    list1 = set(list1)\n    \n    return list1\n    \ndef unique_elements_with_index(list1):\n    '''\n    Write a function that returns the unique elements in a list, and also returns their indices.\n    '''\n    \n    list1 = set(list1)\n    \n    return (list1, list(list1))\n    \ndef longest_sequence(list1):\n    '''\n    Write a function that returns the longest sublist that is comprised of elements from the list.\n    '''\n    \n    longest_sub_list = 0\n    \n    for i in range(len(list1)):\n        if i == 0:\n            longest_sub_list = 1\n            \n        if longest_sub_list < len(list1[i:i+1]):\n            longest_sub_list = len(list1[i:i+1])\n            \n    return longest_sub_list\n    \ndef longest_sequence_with_index(list1):\n    '''\n    Write a function that returns the longest sublist that is comprised of elements from the list, and also returns their indices.\n    '''\n    \n    longest_sub_list = 0\n    \n    for i in range(len(list1)):\n        if i == 0:\n            longest_sub_list = 1\n            \n        if longest_sub_list < len(list1[i:i+1]):\n            longest_sub_list = len(list1[i:i+1])\n            \n    list_longest_sub = list(list1[0:longest_sub_list])\n    list_longest_sub.reverse()\n    \n    return (list_longest_sub, range(0, longest_sub_list))\n    \ndef is_palindrome(list1):\n    '''\n    Write a function that returns whether or not a given list is a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g. madam, racecar, or nurses run.\n    '''\n    \n    is_pal = True\n    \n    for i in range(len(list1)):\n        if list1[i]!= list1[len(list1)-i-1]:\n            is_pal = False\n            \n    return is_pal\n    \ndef is_palindrome_with_index(list1):\n    '''\n    Write a function that returns whether or not a given list is a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g. madam, racecar, or nurses run.\n    '''\n    \n    is_pal = True\n    \n    for i in range(len(list1)):\n        if list1[i]!= list1[len(list1)-i-1]:\n            is_pal = False\n            \n    list_pal = list1.copy()\n    list_pal.reverse()\n    \n    return is_pal, (list_pal, range(len(list1)-1, -1, -1))\n    \ndef palindrome_partition(list1):\n    '''\n    Write a function that returns a list of all the possible palindrome partitions of a given list. Each partition is a list of integers.\n    '''\n    \n    list1 = list(list1)\n    palindrome_partitions = []\n    \n    if len(list1) == 0:\n        return palindrome_partitions\n    \n    if len(list1) == 1:\n        if list1[0]!= list1[0]:\n            palindrome_partitions.append([list1[0]])\n        return palindrome_partitions\n    \n    for i in range(len(list1)):\n        if list1[i]!= list1[len(list1)-i-1]:\n            if len(list1) - i > 1:\n                left_sub_list = list1[0:i]\n                right_sub_list = list1[i"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n    \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    final_list = []\n    for i in list1:\n        if i not in list2:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    x = set(list1)\n    y = set(list2)\n    \n    return list(x.difference(y))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for ele in list1:\n        if ele in list2:\n            list1.remove(ele)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        if x in list1:\n            list1.remove(x)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    while n >= 0:\n        result += n\n        n -= 2\n    return result\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # x = n // 2\n    # sum = 0\n    # while x >= 0:\n    #     sum = sum + x\n    #     x = x - 2\n    # return sum\n    sum = 0\n    while n > 0:\n        sum = sum + n\n        n = n - 2\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return n\n    elif n < 1:\n        return -1\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_series = 0\n    if n > 0:\n        n = n - 2\n        sum_series = n + sum_series\n        return sum_series\n    else:\n        return sum_series\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    if n < 2:\n        return n\n    else:\n        for i in range(n):\n            if (i+1) == (n-i):\n                result += (i+1)\n            else:\n                result += (i+1) - (n-i)\n        return result\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    if (n > 0):\n        while (n >= 2):\n            sum += n - 2\n            n -= 2\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # if n < 2:\n    #     return 0\n    # else:\n    #     return n + sum_series(n-2)\n    if n < 2:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # n = 6\n    # x = 3\n    # s = 6\n    # (6 + 2 + 4 + 8)\n    \n    # a = n * (n + 1) / 2\n    # b = n * (n + 1) / 2 - n\n    # return a - b\n    \n    a = 0\n    b = n\n    for i in range(n // 2):\n        a += n - 2*i\n        b -= n - 2*i\n    \n    return a\n    \nprint(sum_series(6))\nprint(sum_series(7))\nprint(sum_series(8))\nprint(sum_series(9))\nprint(sum_series(10))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = (s / 2) * l\n    return pi * (s * s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l * 0.5\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * s * tan(pi/s)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = l * (s - 2) * tan(pi / (s * 2))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(s, l)\n    return (s*s*tan(pi/s))/2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(l**2))/tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(s-tan(pi/s)))/(2*tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if not isinstance(s, float): raise TypeError\n    if not isinstance(l, int): raise TypeError\n    if l <= 3: raise ValueError\n    if s <= 0: raise ValueError\n    angle = 360 / l\n    return (s * s) / (4 * tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = 0.5 * pi * l * s\n    return A\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Check for right angles and common angle types\n    if not s:\n        print('Wrong input, length must be a positive number')\n    elif not l or l < 0:\n        print('Wrong input, length must be a positive number')\n    elif not s or s < 0:\n        print('Wrong input, length must be a positive number')\n    # Store values\n    sides = s\n    sides_in_degrees = s * 180 / pi\n    # Calculate results\n    angle_in_degrees = (sides_in_degrees + 360) % 360\n    area_perimeter = s * sides\n    area_volume = (1 / 2) * sides * s * sides\n    # Return results\n    return 'This is a regular polygon with {} sides and a volume of {:.2f}'.format(angle_in_degrees, area_volume)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return not bool(n - math.floor(n/2) and not math.ceil(n/2) - n)\ndef is_prime(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef is_permutation(s1, s2):\n    '''\n    Write a function to determine if a given string is a permutation of the given string.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    for i in s1:\n        if i not in s1_dict:\n            s1_dict[i] = 1\n        else:\n            s1_dict[i] += 1\n    for i in s2:\n        if i not in s1_dict:\n            return False\n        else:\n            s1_dict[i] -= 1\n            if s1_dict[i] == 0:\n                del s1_dict[i]\n    return True\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef prime_factor(n):\n    '''\n    Write a function to determine the prime factorization of a given number.\n    '''\n    prime_list = []\n    while n!= 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n /= i\n                prime_list.append(i)\n                break\n    prime_list.append(n)\n    return prime_list\ndef palindrome(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    rev_s = ''\n    s = s.lower()\n    for i in s:\n        if i.isalpha():\n            rev_s += i\n    return rev_s == rev_s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef get_area(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    a = r**2*math.pi\n    return a\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef prime_factor(n):\n    '''\n    Write a function to determine the prime factorization of a given number.\n    '''\n    prime_list = []\n    while n!= 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n /= i\n                prime_list.append(i)\n                break\n    prime_list.append(n)\n    return prime_list\ndef reverse(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    rev_s = ''\n    s = s[::-1]\n    for i in s:\n        if i.isalpha():\n            rev_s += i\n    return rev_s\ndef reverse(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    if not s:\n        return s\n    else:\n        s = s[::-1]\n        return s\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_optimised(n):\n    '''\n    Write a function to determine if a given integer is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n    "
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    while i <= int(math.sqrt(n))+1:\n        if n%i == 0:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisors(num):\n        div = 1\n        for i in range(2,int(math.sqrt(num))+1):\n            if num % i == 0:\n                div += i\n                if i**2 == num:\n                    div -= i\n        return div\n    if n <= 1:\n        return False\n    return div_sum(n - 1) == div_sum(n - 2) \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0: \n            sum += i + n//i \n    return sum == n \ndef is_prime(n):\n    '''\n    Write a function to determine if the given integer is prime or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        else:\n            return True\ndef is_prime_factor(n, m):\n    '''\n    Write a function to check if the prime factorization of the given integer is prime or not.\n    '''\n    i = 0\n    while n > 1:\n        if n % m == 0:\n            n = n//m\n        else:\n            i += 1\n    return i == 0\ndef min_max_square(matrix):\n    '''\n    Write a function to determine the length of the longest side of a square.\n    '''\n    if matrix == [] or matrix == [[]]:\n        return (0, 0)\n    row = len(matrix)\n    col = len(matrix[0])\n    row_max, col_max = 0, 0\n    for i in range(row):\n        for j in range(col):\n            if matrix[i][j]!= 0:\n                if i == 0 or j == 0:\n                    if i == 0:\n                        row_max = 1\n                    if j == 0:\n                        col_max = 1\n                else:\n                    row_max = max(row_max, 1+row_max(matrix[i-1][j-1], matrix[i-1][j], matrix[i][j-1]))\n                    col_max = max(col_max, 1+col_max(matrix[i-1][j-1], matrix[i][j-1], matrix[i-1][j]))\n    return (row_max, col_max)\ndef get_min_max_square(matrix, l, r, t, b):\n    '''\n    Write a function to determine the length of the longest side of a square.\n    '''\n    if matrix == [] or matrix == [[]]:\n        return (0, 0)\n    row = len(matrix)\n    col = len(matrix[0])\n    row_max, col_max = 0, 0\n    for i in range(l, r+1):\n        for j in range(t, b+1):\n            if matrix[i][j]!= 0:\n                if i == 0 or j == 0:\n                    if i == 0:\n                        row_max = 1\n                    if j == 0:\n                        col_max = 1\n                else:\n                    row_max = max(row_max, 1+row_max(matrix[i-1][j-1], matrix[i-1][j], matrix[i][j-1]))\n                    col_max = max(col_max, 1+col_max(matrix[i-1][j-1], matrix[i][j-1], matrix[i-1][j]))\n    return (row_max, col_max)\ndef min_sum_subarray(arr, k):\n    '''\n    Write a function to find the sum of elements in a subarray of size at-most K.\n    '''\n    if arr == [] or arr == [[]]:\n        return 0\n    total, sum = 0, 0\n    for i in range(len(arr)):\n        if sum >= k:\n            total += sum - arr[i-1]\n            sum = 0\n        sum += arr[i]\n    total += sum\n    return total\ndef min_sum_subarray_without_sorting(arr, k):\n    '''\n    Write a function to find the sum of elements in a subarray of size at-most K.\n    '''\n    if arr == [] or arr == [[]]:\n        return 0\n    sum, left, right = 0, 0, 0\n    while right < len(arr) and left <= right:\n        sum += arr[right]\n        while sum >= k and left <= right:\n            sum -= arr[left]\n            left += 1\n        right += 1\n    return sum\ndef min_sum_subarray_with_sorting(arr, k):\n    '''\n    Write a function to find the sum of elements in a subarray of size at-most K.\n    '''\n    if arr == [] or arr == [[]]:\n        return 0\n    if k == 1:\n        return sum(arr)\n    for i in range(len(arr)):\n        if sum(arr[:i+1]) < k:\n            continue\n        else:\n            return sum(arr[:i+1])\ndef compare_subarrays(arr1, arr2):\n    '''\n    Write a function to check if two given arrays are equal or not.\n    '''\n    if arr1 == [] or arr2 == []:\n        return False\n    if len(arr1)!= len(arr2):\n        return False\n    else:\n        return sorted(arr1) == sorted(arr2)\ndef compare_subarrays_with_sorting(arr1, arr2):\n    '''\n    Write a function to check if two given arrays are equal or not.\n    '''\n    if arr1 == [] or arr2 == []:\n        return False\n    if len(arr1)!= len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            return False\n    return True\ndef check_subarray(arr1, arr2, low, mid, high):\n    '''\n    Write a function to check if two given sub-arrays are equal or not.\n    '''\n    if arr1 == [] or arr2 == []:\n        return False\n    if len(arr1)!= len(arr2):\n        return False\n    if arr1[low:mid+1] == arr2[low:mid+1]:\n        return True\n    if low + mid < len(arr1):\n        return check_subarray(arr1, arr2, low+1, mid, high)\n    if low <= mid <= high:\n        return check_subarray(arr1, arr2, low, mid-1, high)\ndef check_subarray_with_sorting(arr1, arr2):\n    '''\n    Write a function to check if two given sub-arrays are equal or not.\n    '''\n    if arr1 == [] or arr2 == []:\n        return False\n    if len(arr1)!= len(arr2):\n        return False\n    if arr1 == sorted(arr1):\n        return True\n    if arr1 == sorted(arr2):\n        return True\n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            return False\n        if i == len(arr1)-1:\n            return True\n    return check_subarray(arr1, arr2, 0, len(arr1)-1, len(arr1)-1)\ndef binary_search(arr, low, high, x):\n    '''\n    Write a function to find the index of an element in sorted array using binary search algorithm.\n    '''\n    if arr == [] or arr == [[]]:\n        return -1\n    if low == high:\n        if arr[low] == x:\n            return low\n        else:\n            return -1\n    mid = int(low + (high - low) / 2)\n    if arr[mid] == x:\n        return mid\n    elif arr[mid] > x:\n        return binary_search(arr, low, mid-1, x)\n    else:\n        return binary_search(arr, mid+1, high, x)\ndef binary_search_with_sorting(arr, x):\n    '''\n    Write a function to find the index of an element in sorted array using binary search algorithm.\n    '''\n    if arr == [] or arr == [[]]:\n        return -1\n    if arr == sorted(arr):\n        return 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return binary_search(arr, 0, len(arr)-1, x)\nde"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<=1:\n        return False\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return int(math.sqrt(n))*(int(math.sqrt(n))+1) == n\n    \ndef div_sum_2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return sum(range(1,int(math.sqrt(n)+1))) == n\n    \ndef div_sum_3(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x,y = 1,n\n    while x<y:\n        if y%x == 0:\n            if (x+y)%y == 0:\n                return True\n        x+=1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # n = int(n)\n    # s = sum(list(range(1,n)))\n    # count = 0\n    # for i in range(1,n):\n    #     if n%i == 0:\n    #         count += 1\n    # if count == 2 and s!= n:\n    #     return True\n    # else:\n    #     return False\n    # Find the divisors of n.\n    # We can use the fact that n must be prime otherwise we have to use the divisors of n.\n    # In the same way we can find the sum of the divisors of n.\n    # Also, there are no prime factors of n.\n    # We can also use the formula\n    # s = n * (1 - 1/n) = n * (1 - 1/(1 + 1/n))\n    # in order to find the sum of the divisors.\n    # The idea is that the divisors of a number are the divisors of the product of the divisors.\n    # The product of the divisors is the sum of the divisors.\n    # So we can find the sum of the divisors of n.\n    # If we find any factor of the divisor then they will all be factors of the product of the divisors.\n    # If the factor is 1 then this must be the sum of the divisors.\n    # In other words, this is a n^2 algorithm.\n    # So the intuition behind this is that we can find all the factors of n by using a low-level algorithm\n    # which is called sieve of erastosthenes.\n    # The sieve of erastosthenes is a method that gives us an efficient way to find the prime factors of a number.\n    # In this algorithm we find the factors of n.\n    # We use the sieve of erastosthenes to find the factors of n.\n    # Using the factors of n we can find the factors of the product of the factors.\n    # So for the sum of the factors we can find the product of the factors.\n    # So the idea is that we need only to find the prime factors of n to find the product of the prime factors.\n    # If we find any factor of the divisor we will have the sum of the divisors.\n    # So that we can find the product of the divisors.\n    # This is a n^2 algorithm.\n    # For more information on this we can refer to the wikipedia page on sieve of erastosthenes.\n    # The first approach is to use the list and divide the n in groups of 2.\n    # Each group will contain an odd number of elements.\n    # The first odd element will be at group[0]\n    # and the second odd element will be at group[1]\n    # Now we need to break these groups into two groups.\n    # Now we need to find the prime factors of the product of the first group and the product of the first group.\n    # Now we need to find the prime factors of the product of the second group and the product of the second group.\n    # If the product of the first group and the second group is prime we can directly return true.\n    # If the product of the first group and the second group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the first group by 2 and move on to the next group.\n    # Now we can start the second group.\n    # We need to use the same approach to find the prime factors of the product of the first group and the product of the first group.\n    # If the product of the second group and the product of the first group is prime we can directly return true.\n    # If the product of the second group and the product of the first group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the second group by 2 and move on to the next group.\n    # Now we can start the third group.\n    # If the product of the second group and the product of the second group is prime we can directly return true.\n    # If the product of the second group and the product of the second group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the second group by 2 and move on to the next group.\n    # Now we can start the fourth group.\n    # If the product of the third group and the product of the third group is prime we can directly return true.\n    # If the product of the third group and the product of the third group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the third group by 2 and move on to the next group.\n    # Now we can start the fifth group.\n    # If the product of the fourth group and the product of the fourth group is prime we can directly return true.\n    # If the product of the fourth group and the product of the fourth group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the fourth group by 2 and move on to the next group.\n    # Now we can start the sixth group.\n    # If the product of the fifth group and the product of the fifth group is prime we can directly return true.\n    # If the product of the fifth group and the product of the fifth group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the fifth group by 2 and move on to the next group.\n    # Now we can start the seventh group.\n    # If the product of the sixth group and the product of the sixth group is prime we can directly return true.\n    # If the product of the sixth group and the product of the sixth group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the sixth group by 2 and move on to the next group.\n    # Now we can start the eighth group.\n    # If the product of the seventh group and the product of the seventh group is prime we can directly return true.\n    # If the product of the seventh group and the product of the seventh group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the seventh group by 2 and move on to the next group.\n    # Now we can start the ninth group.\n    # If the product of the eighth group and the product of the eighth group is prime we can directly return true.\n    # If the product of the eighth group and the product of the eighth group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the eighth group by 2 and move on to the next group.\n    # Now we can start the tenth group.\n    # If the product of the ninth group and the product of the ninth group is prime we can directly return true.\n    # If the product of the ninth group and the product of the ninth group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the tenth group by 2 and move on to the next group.\n    # Now we can start the eleventh group.\n    # If the product of the tenth group and the product of the tenth group is prime we can directly return true.\n    # If the product of the tenth group and the product of the tenth group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the tenth group by 2 and move on to the next group.\n    # Now we can start the twelfth group.\n    # If the product of the eleventh group and the product of the eleventh group is prime we can directly return true.\n    # If the product of the eleventh group and the product of the eleventh group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the twelfth group by 2 and move on to the next group.\n    # Now we can start the thirteenth group.\n    # If the product of the twelfth group and the product of the twelfth group is prime we can directly return true.\n    # If the product of the twelfth group and the product of the twelfth group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the thirteenth group by 2 and move on to the next group.\n    # Now we can start the fourteenth group.\n    # If the product of the thirteenth group and the product of the thirteenth group is prime we can directly return true.\n    # If the product of the thirteenth group and the product of the thirteenth group is not prime we need to go on to the next group.\n    # Otherwise we need to increase the fourteenth group by 2 and move on to the next group.\n    # Now we can start the fifteenth group.\n    # If the product of the fourteenth group and the product of the fourteenth group is prime w"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            div_list.append(i)\n    if sum(div_list) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1:\n        return False\n    else:\n        divisors = []\n        divisor = 2\n        while divisor <= n:\n            if n % divisor == 0:\n                divisors.append(divisor)\n            divisor += 1\n        if sum(divisors) == n:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, (n//2)+1):\n        if n % i == 0:\n            s = s + i\n    if s == n:\n        print(\"true\")\n    else:\n        print(\"false\")\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return str1.lower().count(str1.lower()[0])\n    \ndef count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d={}\n    for i in str1:\n        if i in d.keys():\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n    \ndef count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return {c: str1.lower().count(c) for c in str1.lower() if c.isalpha()}\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    str2 = str1.lower()\n    count = 0\n    for i in range(len(alphabet)):\n        if alphabet[i] in str2:\n            count += str2.count(alphabet[i])\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict_alphabet = {'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n    dict_freq = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    \n    for i in range(len(str1)):\n        dict_freq[str1[i]] = dict_freq[str1[i]] + 1\n    \n    for i in range(26):\n        dict_freq[chr(i+65)] = dict_alphabet[chr(i+65)]\n    \n    dictionary = {}\n    for i in dict_freq:\n        dictionary[dict_freq[i]] = i\n    \n    return dictionary\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = 0\n    for i in range(0,len(str1)):\n        for j in range(0,len(str1)):\n            if str1[i] == str1[j] and i == j:\n                counter = counter + 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0, 26):\n        letter = chr(i + ord('a'))\n        count += str1.count(letter)\n    return count\n    \ndef max_substring(str1):\n    '''\n    Write a function to return the longest common substring between two given strings.\n    '''\n    sub = ''\n    maxlen = 0\n    for i in range(len(str1)):\n        sub += str1[i]\n        for j in range(i+1, len(str1)):\n            sub2 = str1[i:j]\n            if sub2 == sub and len(sub) > maxlen:\n                maxlen = len(sub)\n                sub = sub2\n    return sub, maxlen\n    \ndef max_number_of_occurrences(str1, str2):\n    '''\n    Write a function to count the number of common occurrences of all the characters in a string.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if str1[i] == str2[i]:\n            count += 1\n    return count\n    \ndef special_characters(str1):\n    '''\n    Write a function to check if a string contains special characters.\n    '''\n    if len(str1) == 0:\n        return False\n    special = '!', '@', '#', '$', '%', '&', '*', '(', ')', '*', '^', '+', '=', '-', '_', '~', '.', ':', ';', '?', ',', '/', '|', '\\\\', '<', '>', '{', '}', '[', ']', '`', '\u2018', '\u201c', '\u201d', '\u201e', '\u201d', '\u2019'\n    for char in special:\n        if char in str1:\n            return True\n    return False\n    \ndef is_string_palindrome(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(str1) == 0:\n        return False\n    i = 0\n    j = len(str1) - 1\n    while i <= j:\n        if str1[i]!= str1[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_valid_triangle_number(num):\n    '''\n    Write a function to check if a number is triangle number or not.\n    '''\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum == num\n    \ndef is_number_balanced(num):\n    '''\n    Write a function to check if a number is balanced or not.\n    '''\n    stack = []\n    i = 1\n    while i <= num:\n        if num % i == 0:\n            stack.append(i)\n        i += 1\n    if len(stack) == 1:\n        return True\n    else:\n        return False\n        \ndef is_number_palindrome(num):\n    '''\n    Write a function to check if a number is palindrome or not.\n    '''\n    reverse = 0\n    i = 0\n    while i < num:\n        reverse *= 10\n        reverse += num % 10\n        i += 1\n        num //= 10\n    if reverse == num:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_iterative(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    left = 0\n    right = len(str1) - 1\n    while left < right:\n        if str1[left]!= str1[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \ndef is_palindrome_recursive(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(str1) == 0:\n        return True\n    if str1[0] == str1[-1]:\n        return is_palindrome_recursive(str1[1:-1])\n    else:\n        return False\n    \ndef is_palindrome_iterative_2(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    left = 0\n    right = len(str1) - 1\n    while left < right:\n        if str1[left]!= str1[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \ndef is_palindrome_recursive_2(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(str1) == 0:\n        return True\n    if str1[0] == str1[-1]:\n        return is_palindrome_recursive(str1[1:-1])\n    else:\n        return False\n    \ndef is_palindrome_iterative_3(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    left = 0\n    right = len(str1) - 1\n    while left < right:\n        if str1[left]!= str1[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \ndef is_palindrome_recursive_3(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(str1) == 0:\n        return True\n    if str1[0] == str1[-1]:\n        return is_palindrome_recursive(str1[1:-1])\n    else:\n        return False\n    \ndef is_palindrome_iterative_4(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    left = 0\n    right = len(str1) - 1\n    while left < right:\n        if str1[left]!= str1[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \ndef is_palindrome_recursive_4(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(str1) == 0:\n        return True\n    if str1[0] == str1[-1]:\n        return is_palindrome_recursive(str1[1:-1])\n    else:\n        return False\n    \ndef is_palindrome_iterative_5(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    left = 0\n    right = len(str1) - 1\n    while left < right:\n        if str1[left]!= str1[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \ndef is_palindrome_recursive_5(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    if len(str1) == 0:\n        return True\n    if str1[0] == str1[-1]:\n        return is_palindrome_recursive(str1[1:-1])\n    else:\n        return False\n    \ndef number_of_combinations(n, r):\n    '''\n    Write a function to calculate number of ways to choose k items from n items with given r quantity.\n    '''\n    numerator = math.factorial(n)\n    denominator = math.factorial(r) * math.factorial(n - r)\n    return numerator / denominator\n    \ndef number_of_combinations_iterative(n, "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    count = 0\n    for i in range(0, len(str1)):\n        count += alpha_dict.get(str1[i].lower())\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alp = 'abcdefghijklmnopqrstuvwxyz'\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in alp:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(len(str1)):\n        if str1[i] not in char_count:\n            char_count[str1[i]] = 1\n        else:\n            char_count[str1[i]] += 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    temp = {}\n    for i in range(len(str1)):\n        if str1[i].lower() in temp.keys():\n            temp[str1[i].lower()] += 1\n        else:\n            temp[str1[i].lower()] = 1\n    return len(temp)\n    \ndef count_char_position_2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = collections.defaultdict(int)\n    for char in str1:\n        counter[char.lower()] += 1\n    return sum([x * (x + 1) / 2 for x in counter.values()])\n    \ndef count_char_position_3(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = collections.defaultdict(int)\n    for char in str1:\n        counter[char.lower()] += 1\n    return sum([x * (x + 1) / 2 for x in counter.values()])\n    \ndef count_char_position_4(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = collections.defaultdict(int)\n    for char in str1:\n        counter[char.lower()] += 1\n    return sum([x * (x + 1) / 2 for x in counter.values()])\n    \ndef count_char_position_5(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = collections.defaultdict(int)\n    for char in str1:\n        counter[char.lower()] += 1\n    return sum([x * (x + 1) / 2 for x in counter.values()])\n    \ndef count_char_position_6(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = collections.defaultdict(int)\n    for char in str1:\n        counter[char.lower()] += 1\n    return sum([x * (x + 1) / 2 for x in counter.values()])\n    \ndef count_char_position_7(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = collections.defaultdict(int)\n    for char in str1:\n        counter[char.lower()] += 1\n    return sum([x * (x + 1) / 2 for x in counter.values()])\n    \ndef count_char_position_8(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = collections.defaultdict(int)\n    for char in str1:\n        counter[char.lower()] += 1\n    return sum([x * (x + 1) / 2 for x in counter.values()])\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # defining the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # creating a counter variable to count the same position\n    count = 0\n    \n    # looping through the string\n    for i in range(len(str1)):\n        \n        # if the character is not a letter in the alphabet\n        if str1[i].lower() not in alphabet:\n            continue\n        \n        # if the character is a letter in the alphabet\n        else:\n            # checking if the current letter is the same as the counter variable\n            if str1[i].lower() == str1[count].lower():\n                count += 1\n            \n            # otherwise\n            else:\n                # updating the counter\n                count = i\n                \n                # if the count is at the end\n                if count == len(str1)-1:\n                    count += 1\n                \n                # adding 1 to the count\n                count += 1\n                \n    # returning the count\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1,len(A)): \n            if xor(A[i],A[j])%2==0:\n                count+=1\n    return count \nA=[1,2,3,4,5,6,7,8] \nprint(find_even_pair(A))"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # A = [1, 4, 7, 3, 8, 2]\n    # A = [1, 2, 3, 4]\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                return A[i] ^ A[j]\n    return 0\n    \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_pairs = []\n    for i in range(len(A)):\n        xor_pairs.append(A[i] ^ A[i+1])\n    xor_pairs = set(xor_pairs)\n    xor_pairs = list(xor_pairs)\n    xor_pairs = sorted(xor_pairs)\n    pair_count = 0\n    for i in range(len(xor_pairs)):\n        if xor_pairs[i] == 0:\n            continue\n        pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # We are doing a binary search for the key value that xor the pair to an even number\n    low, high = 0, len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] ^ mid == 0:\n            if mid!= 0 and A[mid - 1] ^ A[mid] == 0:\n                return True\n            else:\n                # This will be true if the array element has xor pair\n                high = mid - 1\n        else:\n            low = mid + 1\n    return False\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                even += 1\n    return even\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor = 0\n    for i in A:\n        for j in A:\n            if i!= j and (i ^ j) % 2 == 0:\n                even_xor += 1\n    return even_xor\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    if len(A) == 0: \n        return 0\n    \n    n = len(A)\n    \n    arr = set()\n    for i in range(n): \n        arr.add(A[i])\n    \n    res = 0\n    \n    for i in range(n): \n        if ((A[i] + i) % 2) == 0: \n            for j in range(i+1, n): \n                if ((A[i] + j) % 2) == 0: \n                    if A[j] not in arr: \n                        res += 1\n                        arr.add(A[j])\n                \n    return res\n    \n    \n    \nA = [1, 4, 3, 6, 8, 5, 3, 8, 5]\nprint(find_even_pair(A)) "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1,len(A)):\n            if(A[i] ^ A[j] == 0):\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    seen = set()\n    ans = 0\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n_1 = 1\n    while n_1 < n:\n        n_1 *= 2\n    return n_1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 0\n    while(n!= 1):\n        n = n // 2\n        p += 1\n    return p"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = n+1\n    while(True):\n        if(x>=1):\n            if(x & (x-1)==0):\n                return x\n            x = x-1\n        else:\n            return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0: \n        print(\"Not a power of 2\") \n        return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while 2**power < n:\n        power += 1\n    return 2**power\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n:\n        x = x << 1\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = n - 1\n    while n!= 0:\n        n = n >> 1\n    return 1 << n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power = 2*power\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i=n+1\n    while (i & i-1)!= 0:\n        i=i+1\n    return i\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if (a[i] == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in range(len(a)):\n        if a[i]==x:\n            c+=1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n    \n    \n    \n    \ndef flip(a):\n    '''\n    Write a function to return the number of times the string \"not\" and \"the\" appear in a given string in the following format:\n    \"the not the and not the and\".\n    '''\n    count=0\n    \n    for i in a:\n        if i==\"not\" and \"the\" in a:\n            count+=1\n    return count\n    \n    \n    \ndef perm(a):\n    '''\n    Write a function that takes as input a non-empty list of elements and returns the list of all possible permutations of those elements.\n    '''\n    \n    if len(a)<=1:\n        return a\n    \n    else:\n        output=[]\n        temp=[]\n        for i in a:\n            temp.append(i)\n            for j in perm(a[1:]):\n                output.append(temp+j)\n        return output\n    \ndef even(a):\n    '''\n    Write a function that takes as input a list of integers and returns the number of even numbers in the list.\n    '''\n    count=0\n    for i in a:\n        if i%2==0:\n            count+=1\n    return count\n    \ndef odd(a):\n    '''\n    Write a function that takes as input a list of integers and returns the number of odd numbers in the list.\n    '''\n    count=0\n    for i in a:\n        if i%2!=0:\n            count+=1\n    return count\n    \ndef reversed(a):\n    '''\n    Write a function that takes as input a non-empty list of strings and returns a list containing the strings in the original list, reversed.\n    '''\n    count=0\n    for i in range(len(a)-1,-1,-1):\n        count+=1\n        output.append(a[i])\n    return output\n    \ndef nth_element(a,n):\n    '''\n    Write a function that takes as input a list and an integer, n, and returns the nth element of the list.\n    '''\n    \n    return a[n-1]\n    \ndef sum_elements(a):\n    '''\n    Write a function that takes as input a non-empty list of integers and returns the sum of all the integers in the list.\n    '''\n    \n    return sum(a)\n    \ndef mult_elements(a):\n    '''\n    Write a function that takes as input a non-empty list of integers and returns the product of all the integers in the list.\n    '''\n    \n    return reduce(lambda a,b:a*b,a)\n    \n    \n    \n    \ndef is_palindrome(a):\n    '''\n    Write a function that takes as input a string and returns whether it is a palindrome (i.e., a string that reads the same forwards and backwards).\n    '''\n    \n    for i in range(len(a)//2):\n        if a[i]!=a[len(a)-i-1]:\n            return False\n    return True\n    \n    \ndef find_max(a):\n    '''\n    Write a function that takes as input a list of strings and returns the string with the maximum length. If there are multiple strings of the same length, return the one that appears first.\n    '''\n    max=a[0]\n    for i in range(len(a)):\n        if len(a[i])>len(max):\n            max=a[i]\n    return max\n    \ndef find_index(a,b):\n    '''\n    Write a function that takes as input a list of strings and returns the first index of the string in the list that contains the character \"a\". If there is not a match, return -1.\n    '''\n    for i in range(len(a)):\n        if b in a[i]:\n            return i\n    return -1\n    \ndef sum_of_squares(a):\n    '''\n    Write a function that takes as input a list of integers and returns the sum of the squares of all the integers in the list.\n    '''\n    sum=0\n    for i in range(len(a)):\n        sum+=a[i]**2\n    return sum\n    \ndef find_avg(a):\n    '''\n    Write a function that takes as input a list of strings and returns the average length of the strings in the list.\n    '''\n    return sum_of_squares(a)/len(a)\n    \ndef count_vowels(a):\n    '''\n    Write a function that takes as input a string and returns the number of vowels in the string.\n    '''\n    count=0\n    for i in a:\n        if i in \"aeiouAEIOU\":\n            count+=1\n    return count\n    \ndef count_evens(a):\n    '''\n    Write a function that takes as input a list and returns the number of even numbers in the list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]%2==0:\n            count+=1\n    return count\n    \ndef mean(a):\n    '''\n    Write a function that takes as input a list of floats and returns the average of the numbers in the list.\n    '''\n    return sum(a)/len(a)\n    \ndef score_to_grade(a):\n    '''\n    Write a function that takes as input a list of scores and returns a list of their corresponding grades.\n    '''\n    \n    grades=[\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"D-\",\"F\"]\n    for i in range(len(a)):\n        if a[i]>=90:\n            a[i]=\"A\"\n        elif a[i]>=80:\n            a[i]=\"B+\"\n        elif a[i]>=70:\n            a[i]=\"B\"\n        elif a[i]>=60:\n            a[i]=\"C+\"\n        elif a[i]>=50:\n            a[i]=\"C\"\n        elif a[i]>=40:\n            a[i]=\"D+\"\n        elif a[i]>=33:\n            a[i]=\"D\"\n        elif a[i]>=0:\n            a[i]=\"F\"\n    return grades\n    \ndef score_to_class(a):\n    '''\n    Write a function that takes as input a list of scores and returns a list of their corresponding grades.\n    '''\n    grades=[\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"D-\",\"F\"]\n    for i in range(len(a)):\n        if a[i]>=90:\n            a[i]=\"A\"\n        elif a[i]>=80:\n            a[i]=\"B+\"\n        elif a[i]>=70:\n            a[i]=\"B\"\n        elif a[i]>=60:\n            a[i]=\"C+\"\n        elif a[i]>=50:\n            a[i]=\"C\"\n        elif a[i]>=40:\n            a[i]=\"D+\"\n        elif a[i]>=33:\n            a[i]=\"D\"\n        elif a[i]>=0:\n            a[i]=\"F\"\n    return grades\n    \ndef reverse_words(a):\n    '''\n    Write a function that takes as input a list of words and returns the words in the list in reverse order.\n    '''\n    i=0\n    j=len(a)-1\n    while i<j:\n        a[i],a[j]=a[j],a[i]\n        i+=1\n        j-=1\n    return a\n    \ndef distance(a,b):\n    '''\n    Write a function that takes as input two strings and returns the total number of characters that differ between the two strings.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]!=b[i]:\n            count+=1\n   "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([i for i in a if i==x])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1) or m < 0 or n > len(list1) or n < 0:\n        return None\n    else:\n        list2 = []\n        sum = 0\n        for i in range(len(list1)):\n            if i >= m and i <= n:\n                list2.append(list1[i])\n        for i in list2:\n            sum += i\n        return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if n > len(list1): n = len(list1)\n    if m > len(list1): m = len(list1)\n    for i in range(m, n):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_ = 0\n    for i in range(m, n + 1):\n        sum_ += list1[i]\n    return sum_\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    x = 0\n    for i in list1:\n        if i >= m and i <= n:\n            x += i\n    return x\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1) or n > len(list1):\n        return 0\n    else:\n        return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    assert len(list1) >= m and len(list1) >= n, \"The list must contain at least two elements.\"\n    if m > 0 and m < len(list1) and n > 0 and n < len(list1):\n        return sum(list1[m:n])\n    else:\n        return 0\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = 0\n    for index in range(m,n+1):\n        total += list1[index]\n    return total\n    \ndef main():\n    '''\n    Main function.\n    '''\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((3*(a*a)) / 2) + (a*5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = math.sqrt(3 * (a ** 2))\n    return round(perimeter, 3)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2 * a + 1\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 0:\n        return 0\n    return 2 * math.sqrt(2) * a\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(\"The perimeter of a regular pentagon is %.2f units\"%(5*a))\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5) + (a*5*math.sqrt(3)/2)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2*(a*(math.sqrt(5)))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    assert (a % 2 == 0), \"side length must be even\"\n    return a * (3 ** 0.5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * math.sqrt(5) * a\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n    \n    \ndef file_size(s):\n    '''\n    Write a function to get the file size in bytes.\n    '''\n    return os.path.getsize(s)\n    \n    \ndef get_filesize_last(files):\n    '''\n    Write a function to get the file size in bytes of the file whose path is given in the list of paths.\n    '''\n    return max([os.path.getsize(i) for i in files])\n    \n    \ndef total_size_of_dirs(dirs):\n    '''\n    Write a function to get the total size of all files and directories in a directory.\n    '''\n    return sum([os.path.getsize(i) for i in dirs])\n    \n    \ndef unzip_file(file_name, dest_dir):\n    '''\n    Write a function to unzip the file given by the path.\n    '''\n    return shutil.unpack_archive(file_name, dest_dir)\n    \n    \ndef unzip_all(files, dest_dir):\n    '''\n    Write a function to unzip the list of files given in the path.\n    '''\n    return shutil.unpack_archive(files, dest_dir, 'zip')\n    \n    \ndef delete_file(file_name):\n    '''\n    Write a function to delete the file given by path.\n    '''\n    return os.remove(file_name)\n    \n    \ndef delete_all(files):\n    '''\n    Write a function to delete the list of files given in the path.\n    '''\n    return os.remove(files)\n    \n    \ndef first_occurance(s, pat):\n    '''\n    Write a function to find the first occurrence of a pattern in a string.\n    '''\n    return s.find(pat)\n    \n    \ndef remove_whitespace(s):\n    '''\n    Write a function to remove whitespace in a string.\n    '''\n    return s.replace(' ', '')\n    \n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\n    \n    \ndef list_reverse(a):\n    '''\n    Write a function to reverse a list of strings.\n    '''\n    return a[::-1]\n    \n    \ndef swap_string_pair(s):\n    '''\n    Write a function to swap the first two characters of a string.\n    '''\n    return s[0], s[2]\n    \n    \ndef swap_char(s, n):\n    '''\n    Write a function to swap the character at the position n with the character at the position n - 1.\n    '''\n    return s[:n] + s[n-1] + s[n:]\n    \n    \ndef swap_char_v2(s, n):\n    '''\n    Write a function to swap the character at the position n with the character at the position n - 1.\n    '''\n    return ''.join([s[:n], s[n-1], s[n:]])\n    \n    \ndef swap_char_v3(s, n):\n    '''\n    Write a function to swap the character at the position n with the character at the position n - 1.\n    '''\n    return s.replace(s[n], s[n-1]).replace(s[n-1], s[n])\n    \n    \ndef count_occurance_v2(s, pat):\n    '''\n    Write a function to count the number of occurence of the pattern in a given string.\n    '''\n    return s.count(pat)\n    \n    \ndef count_occurance_v3(s, pat):\n    '''\n    Write a function to count the number of occurence of the pattern in a given string.\n    '''\n    return s.count(pat)\n    \n    \ndef first_char_of_last_word(s):\n    '''\n    Write a function to find the first character of the last word in a given string.\n    '''\n    return s.rfind(' ')\n    \n    \ndef last_char_of_last_word(s):\n    '''\n    Write a function to find the last character of the last word in a given string.\n    '''\n    return s.rfind(' ')\n    \n    \ndef find_palindrome(s):\n    '''\n    Write a function to find the first index of a palindrome in a given string.\n    '''\n    return s.find(' ')\n    \n    \ndef delete_middle(s):\n    '''\n    Write a function to delete the middle of a string.\n    '''\n    return s[:len(s) // 2] + s[len(s) // 2 + 1:]\n    \n    \ndef delete_middle_v2(s):\n    '''\n    Write a function to delete the middle of a string.\n    '''\n    return s[:len(s)//2] + s[len(s)//2 + 1:]\n    \n    \ndef delete_middle_v3(s):\n    '''\n    Write a function to delete the middle of a string.\n    '''\n    return s[:len(s) // 2] + s[len(s) // 2 + 1:]\n    \n    \ndef reverse_word_v3(s):\n    '''\n    Write a function to reverse the word in a given string.\n    '''\n    return''.join([i[::-1] for i in s.split(' ')])\n    \n    \ndef reverse_word_v2(s):\n    '''\n    Write a function to reverse the word in a given string.\n    '''\n    return s[::-1]\n    \n    \ndef reverse_word_v1(s):\n    '''\n    Write a function to reverse the word in a given string.\n    '''\n    return s[::-1]\n    \n    \ndef reverse_string_v3(s):\n    '''\n    Write a function to reverse the string in a given string.\n    '''\n    return ''.join(i for i in reversed(s))\n    \n    \ndef reverse_string_v2(s):\n    '''\n    Write a function to reverse the string in a given string.\n    '''\n    return s[::-1]\n    \n    \ndef reverse_string_v1(s):\n    '''\n    Write a function to reverse the string in a given string.\n    '''\n    return s[::-1]\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return s == reverse_string(s)\n    \n    \ndef is_palindrome_v1(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return s == reverse_string_v1(s)\n    \n    \ndef is_palindrome_v2(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return s == reverse_string_v2(s)\n    \n    \ndef is_palindrome_v3(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return s == reverse_string_v3(s)\n    \n    \ndef reverse_sentence_v1(s):\n    '''\n    Write a function to reverse a sentence in a given string.\n    '''\n    return''.join(i for i in reversed(s.split(' ')))\n    \n    \ndef reverse_sentence_v2(s):\n    '''\n    Write a function to reverse a sentence in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n    \n    \ndef reverse_sentence_v3(s):\n    '''\n    Write a function to reverse a sentence in a given string.\n    '''\n    return s[::-1].split(' ')\n    \n    \ndef reverse_sentence_v4(s):\n    '''\n    Write a function to reverse a sentence in a given string.\n    ''"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    while True:\n        if s.find('std')!= -1:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s)==0:\n        return 0\n    if s[0]=='t' and s[1]=='d' and s[2]=='d':\n        return 1+count_occurance(s[3:])\n    else:\n        return count_occurance(s[1:])\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    \n    count = 0\n    first = False\n    for i in range(len(s)):\n        if s[i] =='s' and not first:\n            first = True\n        elif s[i] == 'd' and first:\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    if type(test_tuple[0])!= type(test_tuple[1]):\n        return False\n    for i in range(len(test_tuple)-1):\n        if type(test_tuple[i])!= type(test_tuple[i+1]):\n            return False\n    return True\n    \ndef concat_tuple(tuple1, tuple2):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    return tuple1 + tuple2\n    \ndef find_max(tuple1):\n    '''\n    Write a function to return maximum value in a tuple.\n    '''\n    return max(tuple1)\n    \ndef find_min(tuple1):\n    '''\n    Write a function to return minimum value in a tuple.\n    '''\n    return min(tuple1)\n    \ndef swap_elements(tuple1, index_1, index_2):\n    '''\n    Write a function to swap elements in a tuple.\n    '''\n    tmp = tuple1[index_1]\n    tuple1[index_1] = tuple1[index_2]\n    tuple1[index_2] = tmp\n    return tuple1\n    \ndef rearrange_elements(tuple1):\n    '''\n    Write a function to rearrange elements in a tuple in the ascending order.\n    '''\n    for i in range(len(tuple1)-1):\n        if tuple1[i] > tuple1[i+1]:\n            return swap_elements(tuple1, i, i+1)\n    return tuple1\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse string.\n    '''\n    return string[::-1]\n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse list.\n    '''\n    if len(list1) == 0:\n        return list1\n    return reverse_list(list1[1:]) + list1[:1]\n    \ndef find_index_of_value(tuple1, value):\n    '''\n    Write a function to find index of a value in a tuple.\n    '''\n    for i in range(len(tuple1)):\n        if value == tuple1[i]:\n            return i\n    return -1\n    \ndef find_index_of_value_in_list(list1, value):\n    '''\n    Write a function to find index of a value in a list.\n    '''\n    for i in range(len(list1)):\n        if value == list1[i]:\n            return i\n    return -1\n    \ndef merge_tuple(tuple1, tuple2):\n    '''\n    Write a function to merge two tuples.\n    '''\n    return tuple1 + tuple2\n    \ndef merge_tuples(*tuples):\n    '''\n    Write a function to merge multiple tuples.\n    '''\n    return tuples\n    \ndef find_index_of_min_element(tuple1):\n    '''\n    Write a function to find index of min element in a tuple.\n    '''\n    return tuple1.index(min(tuple1))\n    \ndef find_index_of_max_element(tuple1):\n    '''\n    Write a function to find index of max element in a tuple.\n    '''\n    return tuple1.index(max(tuple1))\n    \ndef find_average_of_tuples(*tuples):\n    '''\n    Write a function to find average of all elements of a tuple.\n    '''\n    return sum(tuples)/len(tuples)\n    \ndef binary_search(tuple1, value):\n    '''\n    Write a function to search a value in a sorted tuple.\n    '''\n    lo = 0\n    hi = len(tuple1)-1\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if value == tuple1[mid]:\n            return True\n        elif value > tuple1[mid]:\n            lo = mid + 1\n        elif value < tuple1[mid]:\n            hi = mid - 1\n    return False\n    \ndef sort_tuple(tuple1):\n    '''\n    Write a function to sort a tuple.\n    '''\n    return tuple1.sort()\n    \ndef sort_tuples(tuples):\n    '''\n    Write a function to sort multiple tuples.\n    '''\n    return tuples.sort()\n    \ndef next_word(sentence):\n    '''\n    Write a function to extract next word from sentence.\n    '''\n    return sentence.split()[1]\n    \ndef next_word_index(sentence, word):\n    '''\n    Write a function to find the index of next word in a sentence.\n    '''\n    return sentence.split().index(word) + 1\n    \ndef split_string_into_tuples(string):\n    '''\n    Write a function to split a string into tuples.\n    '''\n    return string.split(',')\n    \ndef remove_duplicates_from_list(list1):\n    '''\n    Write a function to remove duplicate values from a list.\n    '''\n    return list(dict.fromkeys(list1))\n    \ndef remove_duplicates_from_list_with_set(list1):\n    '''\n    Write a function to remove duplicate values from a list.\n    '''\n    return list(set(list1))\n    \ndef find_index_of_value_in_list_from_last_index(list1, value):\n    '''\n    Write a function to find index of a value in a list starting from last index.\n    '''\n    return list1[-1].index(value)\n    \ndef find_index_of_value_in_list_from_first_index(list1, value):\n    '''\n    Write a function to find index of a value in a list starting from first index.\n    '''\n    return list1[0].index(value)\n    \ndef find_min_and_max_in_list(list1):\n    '''\n    Write a function to find minimum and maximum value in a list.\n    '''\n    return min(list1), max(list1)\n    \ndef find_min_and_max_from_first_index(list1):\n    '''\n    Write a function to find minimum and maximum value from first index.\n    '''\n    return list1[0], list1[-1]\n    \ndef find_min_and_max_from_last_index(list1):\n    '''\n    Write a function to find minimum and maximum value from last index.\n    '''\n    return list1[-1], list1[0]\n    \ndef merge_two_dicts(*dict_args):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    dict_args = dict_args[0]\n    dictionary = {}\n    for dictionary in dict_args:\n        dictionary.update(dictionary)\n    return dictionary\n    \ndef merge_two_dicts_with_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries with list values.\n    '''\n    return {**dict1, **dict2}\n    \ndef merge_two_dicts_with_list_and_reverse(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries with list values and reverse them.\n    '''\n    return {**dict1, **dict2}\n    \ndef find_index_of_value_in_dict_from_last_index(dict1, value):\n    '''\n    Write a function to find index of a value in a dictionary starting from last index.\n    '''\n    return dict1[-1].index(value)\n    \ndef find_index_of_value_in_dict_from_first_index(dict1, value):\n    '''\n    Write a function to find index of a value in a dictionary starting from first index.\n    '''\n    return dict1[0].index(value)\n    \ndef find_index_of_value_in_dict_from_key(dict1, value):\n    '''\n    Write a function to find index of a value in a dictionary startin"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i-1])!= type(test_tuple[i]):\n            return False\n    return True\n    \ndef find_pos(test_tuple, target):\n    '''\n    Write a function to find the position of target in tuple\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == target:\n            return i\n    return -1\n    \ndef find_pos_recursive(test_tuple, target):\n    '''\n    Write a function to find the position of target in tuple\n    '''\n    if not test_tuple:\n        return -1\n    if test_tuple[0] == target:\n        return 0\n    return find_pos_recursive(test_tuple[1:], target) + 1\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    print(\"Checking if all the elements in tuple have same data type\")\n    print(\"Enter the tuple elements: \")\n    input_tuple = tuple(map(int, input().split()))\n    print(\"Your tuple: {}\".format(input_tuple))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    i = 0\n    \n    if len(test_tuple) < 1:\n        raise Exception(\"Empty tuple passed\")\n    \n    while i < len(test_tuple):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            raise Exception(\"All tuples should have same data type\")\n        else:\n            i += 1\n    return True\n    \ndef create_list(test_list):\n    '''\n    Write a function to generate a list with unique elements.\n    '''\n    i = 0\n    \n    if len(test_list) < 1:\n        raise Exception(\"Empty list passed\")\n    \n    while i < len(test_list):\n        if test_list.count(test_list[i]) > 1:\n            test_list.remove(test_list[i])\n        else:\n            i += 1\n    return test_list\n    \ndef create_dict(test_dict):\n    '''\n    Write a function to generate a dict with unique elements.\n    '''\n    if len(test_dict) < 1:\n        raise Exception(\"Empty dict passed\")\n    \n    while len(test_dict) > 0:\n        test_dict.popitem()\n    return test_dict\n    \ndef function_with_return(test_tuple):\n    '''\n    Write a function to return length of tuple.\n    '''\n    return len(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple_type = tuple(type(x) for x in test_tuple)\n    if len(test_tuple_type) == 1:\n        return True\n    elif len(test_tuple_type) > 1:\n        return False\n    \ndef to_tuple(test_list):\n    '''\n    Write a function to convert list into tuple.\n    '''\n    return tuple(test_list)\n    \ndef check_sub_list(test_list, sub_list):\n    '''\n    Write a function to check if sub_list is sub-list of the list.\n    '''\n    if sub_list in test_list:\n        return True\n    else:\n        return False\n        \ndef check_if_list_contains_sub_list(test_list, sub_list):\n    '''\n    Write a function to check if sub_list is sub-list of the list.\n    '''\n    return sub_list in test_list\n    \ndef create_new_list_with_different_values(test_list):\n    '''\n    Write a function to create a new list with different values from original list.\n    '''\n    return list(set(test_list))\n    \ndef create_new_list_with_even_values(test_list):\n    '''\n    Write a function to create a new list with even values from original list.\n    '''\n    return list(filter(lambda x: x%2==0, test_list))\n    \ndef create_new_list_with_odd_values(test_list):\n    '''\n    Write a function to create a new list with odd values from original list.\n    '''\n    return list(filter(lambda x: x%2!=0, test_list))\n    \ndef find_max_min_of_list(test_list):\n    '''\n    Write a function to find maximum and minimum values of the list.\n    '''\n    return max(test_list), min(test_list)\n    \ndef create_a_tuple_with_random_integers(n):\n    '''\n    Write a function to create a tuple with random integers.\n    '''\n    return tuple(random.randint(1,100) for _ in range(n))\n    \ndef create_a_tuple_with_random_integers_with_duplicates(n):\n    '''\n    Write a function to create a tuple with random integers with duplicate values.\n    '''\n    return tuple(random.randint(1,100) for _ in range(n))\n    \ndef create_a_tuple_with_random_integers_with_duplicates_and_sort(n):\n    '''\n    Write a function to create a tuple with random integers with duplicate values and sort it.\n    '''\n    return tuple(random.randint(1,100) for _ in range(n))\n    \ndef create_a_tuple_with_random_integers_with_duplicates_and_sort_using_sorted(n):\n    '''\n    Write a function to create a tuple with random integers with duplicate values and sort it using sorted.\n    '''\n    return tuple(sorted(random.randint(1,100) for _ in range(n)))\n    \ndef check_if_list_has_all_elements_from_another_list(test_list, sub_list):\n    '''\n    Write a function to check if all the elements in test_list are sub-list of sub_list.\n    '''\n    return all(item in sub_list for item in test_list)\n    \ndef list_intersection(l1, l2):\n    '''\n    Write a function to find list elements which are common between two lists.\n    '''\n    return list(set(l1) & set(l2))\n    \ndef list_union(l1, l2):\n    '''\n    Write a function to find union between two lists.\n    '''\n    return list(set(l1) | set(l2))\n    \ndef list_difference(l1, l2):\n    '''\n    Write a function to find list difference between two lists.\n    '''\n    return list(set(l1) - set(l2))\n    \ndef list_symmetric_difference(l1, l2):\n    '''\n    Write a function to find symmetric difference between two lists.\n    '''\n    return list(set(l1) ^ set(l2))\n    \ndef list_difference_with_duplicates(l1, l2):\n    '''\n    Write a function to find difference between two lists with duplicate values.\n    '''\n    return list(set(l1) - set(l2))\n    \ndef list_symmetric_difference_with_duplicates(l1, l2):\n    '''\n    Write a function to find symmetric difference between two lists with duplicate values.\n    '''\n    return list(set(l1) ^ set(l2))\n    \ndef list_intersection_with_duplicates(l1, l2):\n    '''\n    Write a function to find intersection between two lists with duplicate values.\n    '''\n    return list(set(l1) & set(l2))\n    \ndef list_union_with_duplicates(l1, l2):\n    '''\n    Write a function to find union between two lists with duplicate values.\n    '''\n    return list(set(l1) | set(l2))\n    \ndef list_symmetric_difference_with_duplicates(l1, l2):\n    '''\n    Write a function to find symmetric difference between two lists with duplicate values.\n    '''\n    return list(set(l1) ^ set(l2))\n    \ndef is_list_equal(test_list, sub_list):\n    '''\n    Write a function to check if sub_list is sub-list of test_list.\n    '''\n    return test_list == sub_list\n    \ndef is_list_equal_with_tuple(test_list, sub_list):\n    '''\n    Write a function to check if sub_list is sub-list of test_list.\n    '''\n    return tuple(test_list) == tuple(sub_list)\n    \ndef is_list_equal_with_tuple_with_sorted(test_list, sub_list):\n    '''\n    Write a function to check if sub_list is sub-list of test_list.\n    '''\n    return tuple(sorted(test_list)) == tuple(sorted(sub_list))\n    \ndef create_a_random_string(n):\n    '''\n    Write a function to create a random string with n characters.\n    '''\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(n))\n    \ndef sort_list_with_lambda(test_list):\n    '''\n    Write a function to sort the list using lambda expression.\n    '''\n    return sorted(test_list, key = lambda x: x)\n    \ndef sort_list_with_lambda_with_sorted(test_list):\n    '''\n    Write a function to sort the list using lambda expression and sorted function.\n    '''\n    return sorted(test_list, key = lambda x: x)\n    \ndef sort_list_with_key(test_list, key_function):\n    '''\n    Write a function to sort the list using key function.\n    '''\n    return sorted(test_list, key = key_function)\n    \ndef sort_list_with_key_with_sorted(test_list, key_function):\n    '''\n    Write a function to sort the list using key function and sorted function.\n    '''\n    return sorted(test_list, key = key_function)\n    \ndef sort_list_with_key_reverse(test_list, key_function):\n    '''\n    Write a function to sort the list using key function and reverse function.\n    '''\n    return sorted(test_list, key = key_function, reverse = True)\n    \ndef sort_list_with_key_reverse_with_sorted(test_list, key_function):\n    '''\n    Write a function to sort the list using key function and reverse function and sorted function.\n    '''\n    return sorted(test_list"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(map(lambda x: type(x) == type(test_tuple[0]), test_tuple))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 1:\n        first_el_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i]) is not first_el_type:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Edge Case\n    if n == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case\n    if len(arr) == 1:\n        return True if x == arr[0] else False\n    else:\n        if arr[0] == x:\n            return True\n        else:\n            if x == arr[-1]:\n                return True\n            else:\n                return is_majority(arr[1:], n, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(n):\n        if x == arr[i]:\n            count = 1\n            break\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > n//2\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr.count(x) > n//2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your solution goes here\n    for i in range(n-1):\n        if arr[i] == x:\n            count = 1\n            for j in range(i+1, n):\n                if arr[j] == x:\n                    count += 1\n            if count > n/2:\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # a_set = set(arr)\n    # if x in a_set:\n    #     return True\n    # else:\n    #     return False\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    for i in range(n-1):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #Find the middle element\n    mid = n // 2\n    #Extract the middle element\n    mid_element = arr[mid]\n    #Count the occurence of the middle element\n    count = 0\n    for i in range(n):\n        if arr[i] == mid_element:\n            count = count + 1\n    #Comparing the occurence of the middle element with the length of the array\n    if count > (n // 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += n & 1\n        n = n >> 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n &= n - 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #Convert input to binary string\n    b = bin(n).replace('0b','')\n    #Extract bits\n    bits = str(b)[2:]\n    \n    #Iterate through string\n    count = 0\n    for i in range(len(bits)):\n        if bits[i] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n\n    count = 0\n    while num > 0: \n        if (num % 2) == 1: \n            count += 1\n        num = num >> 1\n    return count \n    \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c=0\n    while n:\n        c+=1\n        n=n&(n-1)\n    return c\n    \nprint(count_Set_Bits(10))\nprint(count_Set_Bits(12))\nprint(count_Set_Bits(7))\nprint(count_Set_Bits(8))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += (n&1)\n        n >>= 1\n    return count \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # binary number\n    # n = int(input(\"Enter the number: \"))\n    # print(binary_count(n))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = list(str)\n    for i in range(0, len(str)):\n        if i % 2!= 0:\n            str[i] = \"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_odd_values_indexes = []\n    str_odd_values = ''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            new_str = new_str + char\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    \n    for index in range(len(str)):\n        if index % 2 == 0:\n            new_string += str[index]\n            \n    return new_string\n    \n    \n    # Code:\ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    \n    for index in range(len(str)):\n        if index % 2 == 0:\n            new_string += str[index]\n            \n    return new_string\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = list(str)\n    for index in range(len(str)):\n        if index % 2 == 0:\n            pass\n        else:\n            str[index] = None\n    return \"\".join(str)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)%2 == 0:\n        return str\n    else:\n        return str[0:len(str):2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #str = \"abcde\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_string('abcde'))\nprint(odd_values_strin"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(str[index] for index in range(len(str)) if index % 2 == 0)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    if a<c<b:\n        return a\n    if b<a<c:\n        return b\n    if b<c<a:\n        return c\n    if c<a<b:\n        return c\n    if c<b<a:\n        return c\n    return -1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n    \n    "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b and a < c):\n        if (b < c):\n            return a\n        else:\n            return c\n    elif (b < a and b < c):\n        if (a < c):\n            return b\n        else:\n            return c\n    else:\n        if (a < c):\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\nprint(min_of_three(2,4,6))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \nprint(min_of_three(2,3,4)) # 2\nprint(min_of_three(10,2,3)) # 10\nprint(min_of_three(4,5,1)) # 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<c<a:\n        return b\n    else:\n        return c\n    \nprint(min_of_three(1,2,3))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = r - l + 1\n    for i in range(1,x):\n        if(l + i <= n and n < l + i + 1):\n            if(n & (1 << i)):\n                return False\n    return True\n    \nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number : \"))\n    print(all_Bits_Set_In_The_Given_Range(n,0,1))\n    print(all_Bits_Set_In_The_Given_Range(n,0,3))\n    print(all_Bits_Set_In_The_Given_Range(n,0,6))\n    print(all_Bits_Set_In_The_Given_Range(n,0,15)"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (r-l) & ~(n-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_bits = 0\n    for i in range(l,r+1):\n        all_bits |= i\n    return not all_bits\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    num_of_bits = r-l+1\n    i = 0\n    while i<num_of_bits:\n        if i+1!=num_of_bits:\n            if a[l+i]==0:\n                return False\n        else:\n            if a[l+i]==1:\n                return False\n        i+=1\n    return True\ndef first_Bit_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to find the index of the first bit that is set in the given range or not.\n    '''\n    num_of_bits = r-l+1\n    i = 0\n    while i<num_of_bits:\n        if i+1!=num_of_bits:\n            if a[l+i]==1:\n                return l+i\n        else:\n            if a[l+i]==0:\n                return l+i\n        i+=1\n    return -1\ndef last_Bit_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to find the index of the last bit that is set in the given range or not.\n    '''\n    num_of_bits = r-l+1\n    i = 0\n    while i<num_of_bits:\n        if i+1!=num_of_bits:\n            if a[l+i]==0:\n                return l+i\n        else:\n            if a[l+i]==1:\n                return l+i\n        i+=1\n    return -1\ndef Bit_Test_On_Range(n,l,r):\n    '''\n    Write a python function to test if the given range is a consecutive bit range or not.\n    '''\n    if first_Bit_Set_In_The_Given_Range(n,l,r)==-1:\n        return False\n    if last_Bit_Set_In_The_Given_Range(n,l,r)==-1:\n        return False\n    if first_Bit_Set_In_The_Given_Range(n,l,r)==l and last_Bit_Set_In_The_Given_Range(n,l,r)==r:\n        return False\n    return True\ndef Contiguous_Bits_Test(n):\n    '''\n    Write a python function to test if the given number is a contiguous set of bits or not.\n    '''\n    if Bit_Test_On_Range(n,0,n):\n        return True\n    return False\ndef Contiguous_Bit_Ranges(n):\n    '''\n    Write a python function to find the bit ranges that a given number is a contiguous set of bits or not.\n    '''\n    i = 0\n    b_ranges = []\n    while i<n:\n        if i+1<n:\n            if a[i]==0 and a[i+1]==1:\n                b_ranges.append([i,i+1])\n                i+=2\n            else:\n                i+=1\n        else:\n            if a[i]==0:\n                b_ranges.append([i,i])\n                i+=1\n    return b_ranges\ndef Bit_Test_On_Range_Dic(n,dic):\n    '''\n    Write a python function to test if the given range is a consecutive bit range or not.\n    '''\n    if dic.get(n)==-1:\n        return False\n    if dic.get(n)==n and dic[n-1]==n-1:\n        return False\n    return True\ndef Contiguous_Bits_Test_Dic(n):\n    '''\n    Write a python function to test if the given number is a contiguous set of bits or not.\n    '''\n    if Bit_Test_On_Range_Dic(n,{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}):\n        return True\n    return False\ndef Contiguous_Bit_Ranges_Dic(n):\n    '''\n    Write a python function to find the bit ranges that a given number is a contiguous set of bits or not.\n    '''\n    i = 0\n    b_ranges = []\n    while i<n:\n        if i+1<n:\n            if a[i]==0 and a[i+1]==1:\n                b_ranges.append([i,i+1])\n                i+=2\n            else:\n                i+=1\n        else:\n            if a[i]==0:\n                b_ranges.append([i,i])\n                i+=1\n    return b_ranges\ndef print_contiguous_bits(n):\n    '''\n    Write a python function to print the bit ranges that a given number is a contiguous set of bits or not.\n    '''\n    b_ranges = Contiguous_Bit_Ranges(n)\n    if not b_ranges:\n        print(n,' is a single bit')\n    else:\n        print(n,' is a contiguous set of bits')\n        for b_range in b_ranges:\n            print('The range is:',b_range)\n    print('\\n')\ndef print_contiguous_bits_Dic(n):\n    '''\n    Write a python function to print the bit ranges that a given number is a contiguous set of bits or not.\n    '''\n    b_ranges = Contiguous_Bit_Ranges_Dic(n)\n    if not b_ranges:\n        print(n,' is a single bit')\n    else:\n        print(n,' is a contiguous set of bits')\n        for b_range in b_ranges:\n            print('The range is:',b_range)\n    print('\\n')\ndef Range_Overlap(n,l,r):\n    '''\n    Write a python function to find the range and bit range of overlap of two given ranges or not.\n    '''\n    num_of_bits = r-l+1\n    if a[l+1]==1 and a[l+num_of_bits-1]==0:\n        print('First range is the overlapping range:',l,r)\n        print('Range is:',l,l+num_of_bits-1)\n        return l,l+num_of_bits-1\n    if a[l]==1 and a[l+num_of_bits-1]==0:\n        print('First range is the overlapping range:',l,r)\n        print('Range is:',l,l+num_of_bits-1)\n        return l,l+num_of_bits-1\n    if a[l]==1 and a[l+num_of_bits]==0:\n        print('First range is the overlapping range:',l,r)\n        print('Range is:',l,l+num_of_bits)\n        return l,l+num_of_bits\n    if a[r-1]==0 and a[r]==1:\n        print('First range is the overlapping range:',l,r)\n        print('Range is:',r-1,r)\n        return r-1,r\n    if a[r-1]==0 and a[r]==0:\n        print('First range is the overlapping range:',l,r)\n        print('Range is:',r-1,r)\n        return r-1,r\n    if a[r-1]==1 and a[r]==1:\n        print('First range is the overlapping range:',l,r)\n        print('Range is:',l,r-1)\n        return l,r-1\n    if a[l]==1 and a[l+num_of_bits-1]==1:\n        print('First range is the overlapping range:',l,r)\n        print('Range is:',l,l+num_of_bits-1)\n        return l,l+num_of_bits-1\n    if a[l]==1 and a[l+num_of_bits]==1:\n        print('First range is the overlapping range:',l,r)\n        print('Range is:',l,l+num_of_bits)\n        return l,l+num_o"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Python program to \n    # demonstrate Bitwise XOR \n    # function and binary operators \n    # using while loop \n    \n    ''' \n    # driver code \n    no_of_bit = 32\n    n = 1 << no_of_bit \n    print (n) \n    print (\"The given number is: \", n) \n    \n    x = 0b1011\n    print (\"Binary representation of x: \", bin(x)) \n    \n    l = 100\n    r = 200\n    '''\n    n = 0\n    count = 0\n    while (n < r):\n        if n & 1 == 1:\n            count = count + 1\n        n = n >> 1\n    if count == 32:\n        return \"Given range of \" + str(l) + \" to \" + str(r) + \" has all bits set.\"\n    else:\n        return \"Given range of \" + str(l) + \" to \" + str(r) + \" has \" + str(32-count) + \" bits unset.\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if (r>n):\n        return False\n    if (l>n):\n        return False\n    for i in range(l,r+1):\n        if(i&i==i):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (l&r) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r<l or l<0 or r<0:\n        return -1\n    x=0\n    for i in range(l,r+1):\n        x=x | i\n    if n == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (r-l)<0:\n        return False\n    \n    i=0\n    while i<=r-l:\n        if n & i == 0:\n            i+=1\n            continue\n        else:\n            return False\n    return True\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Your code here\n    return not (l&(l-1))&(r&(r-1))\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[min_index], arr[i] = arr[i], arr[min_index]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # creating array of n+1 elements\n    arr_n = arr[:n]\n    arr_n.extend(sorted(arr[n:], reverse=True))\n    return arr_n\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    a = list(arr)\n    neg_index = 0\n    pos_index = 0\n    neg_count = 0\n    pos_count = 0\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Time: O(n)\n    # Space: O(n)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(0,n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    return negatives + positives\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr.insert(i, arr.pop(i + 1))\n            n += 1\n        i += 1\n    return arr\n    \ndef re_arrange_array_2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        while arr[i] < 0:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n            i -= 1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # From the description,\n    # the only negative element will be a negative element,\n    # and all the others will be positive elements.\n    # Therefore, we have to rearrange all the negative elements to the beginning,\n    # and positive elements at the end.\n    # The index of the first negative element will be -n + 1, and we have to move all the positive elements after it to the beginning\n    # of the array.\n    # (eg. [1,2,3,4,5,6] in this case, the first negative element is at index -1, and we have to move all the elements after that to the beginning of the array.\n    # the first positive element will be at index -1, and we move all the other elements after it to the beginning of the array.)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    print(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    l=len(str1)\n    if l==0:\n        return \"Empty String\"\n    i=0\n    while i<l:\n        if str1[i]==\" \":\n            str1=str1[:i]+char+str1[i+1:]\n        i+=1\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\"  \",\" \")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\"\\n\",\"\")\n    str1=str1.replace(\"\\t\",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','\\n')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n    str1 = str1.replace(' ','')\n    str1 = str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str2 = str1.replace('',char)\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #n=3\n    return sorted(list1,reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(n):\n        a = max(list1)\n        list1.remove(a)\n        list2.append(a)\n    return list2\ndef eval_tree(tree):\n    '''\n    Write a function that takes in a binary tree and returns the sum of all values in the tree.\n    '''\n    if tree.left == None and tree.right == None:\n        return tree.value\n    l = eval_tree(tree.left)\n    r = eval_tree(tree.right)\n    return l + r\ndef binary_search_tree_insertion(tree,new_val):\n    '''\n    Write a function that takes in a Binary Search Tree and inserts a new node with the given value.\n    The node\u2019s color should be black. After insertion, the BST should look like the following:\n    {10, 5, 3, 20, 15, 17, 7}\n    '''\n    if tree.value == None:\n        tree.value = new_val\n        return\n    if tree.value > new_val:\n        if tree.left == None:\n            tree.left = Node(new_val)\n        else:\n            binary_search_tree_insertion(tree.left, new_val)\n    elif tree.value < new_val:\n        if tree.right == None:\n            tree.right = Node(new_val)\n        else:\n            binary_search_tree_insertion(tree.right, new_val)\n    else:\n        print(\"Duplicate Insertion\")\ndef delete_leaf(tree,target):\n    '''\n    Write a function that takes in a Binary Search Tree and a target value and removes the node with that target\n    value. If there are no nodes with the target value, your function should not change the original tree.\n    After removal, the BST should look like the following:\n    {10, 5, 3, 20, 15, 17, 7}\n    '''\n    def dfs(tree,target,parent):\n        if tree == None:\n            return\n        if tree.value == target:\n            # If there is a right child\n            if tree.right!= None:\n                if tree.right.value == target:\n                    tree.value = tree.right.value\n                    tree.right = tree.right.right\n                    return\n                # If there is no right child, but we have a left child\n                elif tree.right.value == None:\n                    tree.value = tree.left.value\n                    tree.right = tree.left.right\n                    tree.left = tree.left.left\n                    return\n            # If there is a left child\n            if tree.left!= None:\n                if tree.left.value == target:\n                    tree.value = tree.left.value\n                    tree.left = tree.left.left\n                    return\n                # If there is no left child, but we have a right child\n                elif tree.left.value == None:\n                    tree.value = tree.right.value\n                    tree.left = tree.right.left\n                    tree.right = tree.right.right\n                    return\n        # Keep traversing the left side\n        dfs(tree.left,target,tree)\n        # Keep traversing the right side\n        dfs(tree.right,target,tree)\n        return\n    dfs(tree,target,tree)\ndef binary_search_tree_delete(tree,value):\n    '''\n    Write a function that takes in a Binary Search Tree and a target value and removes the node with that target\n    value. If there are no nodes with the target value, your function should not change the original tree.\n    After removal, the BST should look like the following:\n    {10, 5, 3, 20, 15, 17, 7}\n    '''\n    def dfs(tree,value,parent):\n        if tree == None:\n            return\n        if tree.value == value:\n            # If there is a right child\n            if tree.right!= None:\n                if tree.right.value == value:\n                    tree.value = tree.right.value\n                    tree.right = tree.right.right\n                    return\n                # If there is no right child, but we have a left child\n                elif tree.right.value == None:\n                    tree.value = tree.left.value\n                    tree.right = tree.left.right\n                    tree.left = tree.left.left\n                    return\n            # If there is a left child\n            if tree.left!= None:\n                if tree.left.value == value:\n                    tree.value = tree.left.value\n                    tree.left = tree.left.left\n                    return\n                # If there is no left child, but we have a right child\n                elif tree.left.value == None:\n                    tree.value = tree.right.value\n                    tree.left = tree.right.left\n                    tree.right = tree.right.right\n                    return\n        # Keep traversing the left side\n        dfs(tree.left,value,tree)\n        # Keep traversing the right side\n        dfs(tree.right,value,tree)\n        return\n    dfs(tree,value,tree)\ndef min_heapify(list1,i):\n    '''\n    Write a function that takes in a list and the index of the item with the smallest value.\n    Your function should swap the item with the given index with the smallest item in the heap and then heapify the\n    heap.\n    '''\n    l = len(list1)\n    if i > l:\n        return\n    left_child = i * 2 + 1\n    right_child = i * 2 + 2\n    smallest = i\n    if left_child < l and list1[left_child] < list1[i]:\n        smallest = left_child\n    if right_child < l and list1[right_child] < list1[i]:\n        smallest = right_child\n    if smallest!= i:\n        list1[i],list1[smallest] = list1[smallest],list1[i]\n        min_heapify(list1,smallest)\ndef heap_increase_key(list1,i,key):\n    '''\n    Write a function that takes in a list and the index of the item with the smallest value.\n    Your function should swap the item with the given index with the smallest item in the heap and then heapify the\n    heap.\n    '''\n    l = len(list1)\n    if i > l:\n        return\n    left_child = i * 2 + 1\n    right_child = i * 2 + 2\n    smallest = i\n    if left_child < l and list1[left_child] < list1[i]:\n        smallest = left_child\n    if right_child < l and list1[right_child] < list1[i]:\n        smallest = right_child\n    if smallest!= i:\n        list1[i],list1[smallest] = list1[smallest],list1[i]\n        heap_increase_key(list1,smallest,key)\ndef heap_sort(list1):\n    '''\n    Write a function that takes in a list and sorts it using the Min Heap Sort algorithm.\n    '''\n    l = len(list1)\n    for i in range(l//2 - 1, -1, -1):\n        min_heapify(list1,i)\n    for i in range(l-1, -1, -1):\n        list1[0],list1[i] = list1[i],list1[0]\n        min_heapify(list1,0)\ndef heap_sort_2(list1):\n    '''\n    Write a function that takes in a list and sorts it using the Min Heap Sort algorithm.\n    '''\n    l = len(list1)\n    for i in range(l//2 - 1, -1, -1):\n        heap_increase_key(list1,i,list1[i])\n    for i in range(l-1, -1, -1):\n        list1[0],list1[i] = list1[i],list1[0]\n        heap_increase_key(list1,0,list1[i])\ndef print_heap(heap):\n    '''\n    Write a function that prints the contents of a heap.\n    '''\n    for i in range(len(heap)):\n        print(heap["
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, list1[i])\n    return max_heap\n    \n    \n    \nlist1 = [0,5,3,4,2]\nn = 3\nprint(larg_nnum(list1,n))\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    temp=[]\n    temp2=[]\n    for i in range(len(list1)):\n        if i==n:\n            break\n        temp.append(list1[i])\n    for i in range(n):\n        temp2.append(temp.pop(0))\n    return temp2\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    num = n\n    largest_n = []\n    for i in range(num):\n        largest_n.append(max(list1))\n        del(list1[list1.index(max(list1))])\n    return largest_n\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    list1.sort()\n    return list1[n-1]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pq = []\n    for item in list1:\n        heapq.heappush(pq,item)\n        if len(pq)>n:\n            heapq.heappop(pq)\n    return pq\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    heapq.heapify(list2)\n    for i in range(0,n):\n        heapq.heappush(list2,list1[i])\n    return list2\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    def cylinder_volume(r,h):\n        return math.pi * r**2 *h\n    def lateral_surface(r,h):\n        return cylinder_volume(r,h) - cylinder_volume(r,1)\n    return lateral_surface(r,h)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    theta = 2 * math.pi / r\n    lateral_surface = 2 * r * theta * h\n    print(f'The lateral surface is {lateral_surface:.2f}')\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #theory:\n    #h - height\n    #r - radius\n    #calculations:\n    surface_area = 2*pi*r*h\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.141592653\n    h = h*0.01\n    r = r*0.01\n    \n    #area of the cylinder\n    A = pi*r**2\n    #area of the face of the cylinder\n    A1 = 2*pi*r*h\n    #lateral surface area\n    A2 = pi*r**2 - A - A1\n    #total lateral surface area\n    A3 = A2 + A1\n    \n    #output\n    print(\"The lateral surface area of the cylinder is {}\".format(A3))\n    \nlateralsuface_cylinder(2.2,0.3"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    area = math.pi * (r**2) * (h/2)\n    return(area)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159\n    return pi*h*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface = (2*np.pi*r**2 + 2*np.pi*r*h) * 0.5\n    return surface\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi, sin, cos, tan\n    \n    def lateralSurfaceArea(r,h):\n        '''\n        A function to calculate the lateral surface area of a cylinder\n        '''\n        surfaceArea = pi * r ** 2 + 2 * pi * r * h + 2 * pi * r * h * tan(pi / 180)\n        return surfaceArea\n    \n    lateralSurfaceArea(r,h)\n    \n    \ndef lateral_angle_cylinder(r,h):\n    '''\n    Write a function to find the lateral angle of a cylinder.\n    '''\n    def lateralAngle(r,h):\n        '''\n        A function to find the lateral angle of a cylinder\n        '''\n        radius_squared = r ** 2\n        angle_degrees = 180 - (180 / pi) * (pi * h * tan(pi / 180) - 2 * pi * h * r + radius_squared)\n        return angle_degrees\n    \n    lateralAngle(r,h)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(h/2) + 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    f = float(input('Enter the radius of the cylinder: '))\n    g = float(input('Enter the height of the cylinder: '))\n    S = f*(math.pi*f*2)+(r*r*math.pi*2)-(g*math.pi*2)+(h*(math.pi*r*2))\n    return S\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    import math\n    S = (4/3)*math.pi*(r**3)\n    return S\ndef lat_surface_sphere(radius):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    import math\n    r = float(input('Enter the radius of the sphere: '))\n    S = 4*math.pi*(r**2)\n    return S\ndef lat_surface_cylinder(radius,height):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    f = float(input('Enter the radius of the cylinder: '))\n    g = float(input('Enter the height of the cylinder: '))\n    S = math.pi*(radius**2)*2 + (g*2) + (radius*radius*math.pi)\n    return S\ndef lat_surface_cone(radius,height):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    import math\n    f = float(input('Enter the radius of the cone: '))\n    g = float(input('Enter the height of the cone: '))\n    S = math.pi*(radius**2)*2 + (g*2) + (radius*radius*math.pi)\n    return S\ndef lat_surface_cone_y(radius,height):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    import math\n    f = float(input('Enter the radius of the cone: '))\n    g = float(input('Enter the height of the cone: '))\n    S = math.pi*(radius**2)*2 + (g*2) + (radius*radius*math.pi)\n    return S\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    return 3.14 * r**2 * h\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l**3)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if type(l)!= int:\n        raise TypeError('Invalid input')\n    if l <= 0:\n        raise ValueError('Invalid input')\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l <= 0:\n        return 0\n    return l ** 3\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n & 0b10101 == 0b10101:\n        return n | 0b010100\n    return n & 0b10101\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\nprint(even_bit_set_number(5))\nprint(even_bit_set_number(10))\nprint(even_bit_set_number(50))\nprint(even_bit_set_number(101))\nprint(even_bit_set_number(105))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n>>1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_list = []\n    while n: \n        n_list.append(n % 2) \n        n = n // 2\n    for i in range(len(n_list)): \n        if n_list[i] == 0: \n            n_list[i] = 1\n        else: \n            n_list[i] = 0\n    n_list = n_list[::-1]\n    n = 0\n    for i in range(len(n_list)): \n        n += n_list[i]*(2**i)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (n.bit_length() - 1))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # even_number = 0\n    # for i in range(0,32):\n    #     if(n & 2**i):\n    #         even_number = even_number | 2**i\n    # return even_number\n    return ((n & ~(n-1)) + 1)\n    # return (n | (1 << (n.bit_length() - 1)))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0x1 \n    return (mask << n) & ~mask\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return ((n & 0xAAAAAAAA) >> 1) \n    \ndef test_even_bit_set_number():\n    '''\n    Tests for the correct output from even_bit_set_number.\n    '''\n    print(f'Test for even_bit_set_number()')\n    assert(even_bit_set_number(100) == 0)\n    assert(even_bit_set_number(9) == 1)\n    assert(even_bit_set_number(0) == 0)\n    assert(even_bit_set_number(11) == 2)\n    assert(even_bit_set_number(9) == 9)\n    print('Passed.')\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(n,bin(n))\n    print(n | (1<<1))\n    return n | (1<<1)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    c = {}\n    for i in test_list:\n        if i not in c:\n            c[i] = 1\n        else:\n            c[i] += 1\n    return c\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your code here\n    occurence = {}\n    test_list = sorted(test_list, key = lambda x: x[1])\n    for i in range(0, len(test_list)):\n        if test_list[i][1] in occurence.keys():\n            occurence[test_list[i][1]] += 1\n        else:\n            occurence[test_list[i][1]] = 1\n    return occurence\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    dict = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    new_dct = {}\n    for num in test_list:\n        if num not in new_dct.keys():\n            new_dct[num] = 1\n        else:\n            new_dct[num] += 1\n    \n    return new_dct\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_map = {}\n    for elem in test_list:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    return count_map\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_set = set()\n    d = {}\n    for i in range(0, len(test_list)):\n        test_set.add(tuple(test_list[i]))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output_dict = dict(Counter(test_list))\n    print('The output dictionary: ',output_dict)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n    for element in test_list:\n        occurences_dict[element] = occurences_dict.get(element,0) + 1\n    return occurences_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    list_of_tuples = []\n    occurence_dict = {}\n    for x in range(len(test_list)):\n        for y in range(len(test_list)):\n            if test_list[x][0] == test_list[y][1]:\n                if test_list[x][1] in occurence_dict:\n                    occurence_dict[test_list[x][1]] += 1\n                else:\n                    occurence_dict[test_list[x][1]] = 1\n    return occurence_dict\ndef check_occurences_with_custom_dict(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple[0] in occurence_dict:\n            occurence_dict[tuple[0]] += 1\n        else:\n            occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef check_occurences_with_custom_dict_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple[0] not in occurence_dict:\n            occurence_dict[tuple[0]] = 1\n        else:\n            occurence_dict[tuple[0]] += 1\n    return occurence_dict\ndef check_occurences_with_unique_values_3(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple[0] in occurence_dict:\n            occurence_dict[tuple[0]] += 1\n        else:\n            occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef check_occurences_with_unique_values_4(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple[0] not in occurence_dict:\n            occurence_dict[tuple[0]] = 1\n        else:\n            occurence_dict[tuple[0]] += 1\n    return occurence_dict\ndef check_occurences_with_unique_values_5(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef check_occurences_with_unique_values_6(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple[0] not in occurence_dict:\n            occurence_dict[tuple[0]] = 1\n        else:\n            occurence_dict[tuple[0]] += 1\n    return occurence_dict\ndef check_occurences_with_unique_values_7(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple[0] not in occurence_dict:\n            occurence_dict[tuple[0]] = 1\n        else:\n            occurence_dict[tuple[0]] += 1\n    return occurence_dict\ndef check_occurences_with_unique_values_8(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef check_occurences_with_unique_values_9(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple[0] not in occurence_dict:\n            occurence_dict[tuple[0]] = 1\n        else:\n            occurence_dict[tuple[0]] += 1\n    return occurence_dict\ndef check_occurences_with_unique_values_10(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef check_occurences_with_unique_values_11(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef check_occurences_with_unique_values_12(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        if tuple[0] not in occurence_dict:\n            occurence_dict[tuple[0]] = 1\n        else:\n            occurence_dict[tuple[0]] += 1\n    return occurence_dict\ndef check_occurences_with_unique_values_13(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef check_occurences_with_unique_values_14(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef check_occurences_with_unique_values_15(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        occurence_dict[tuple[0]] = 1\n    return occurence_dict\ndef check_occurences_with_unique_values_16(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in tes"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    c = 0\n    if str == \"\":\n        return 0\n    for i in range(len(str)):\n        if str[i]!= \" \" and str[i]!= \"\\n\" and str[i]!= \".\" and str[i]!= \",\":\n            c+=1\n    return c\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    i = 0\n    if len(str) == 0:\n        return 0\n    for i in range(len(str)):\n        if str[i]!='':\n            i += 1\n    return i\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] == \" \":\n            continue\n        count += 1\n        for j in range(i+1,len(str)+1):\n            if str[j-1] == \" \":\n                continue\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    if str is None:\n        return 0\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str = 'a'\n    count = 0\n    \n    for i in range(len(str)):\n        if (str[i]!=''):\n            start = i\n            while(str[start]!=''):\n                count += 1\n                start += 1\n    print(\"Number of non-empty substrings of given string : \",count)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            substrings += 1\n    return substrings\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #count = 0\n    #for i in range(len(str)):\n    #    for j in range(i,len(str)+1):\n    #        count+=1\n    return sum(1 for i in range(len(str)) for j in range(i,len(str)+1))\n    "
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    count = 0\n    for i in range(length):\n        for j in range(i,length):\n            if str[i:j+1].isalpha():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return sum(1 for i in range(len(str)) if str.startswith(str[i:]))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize counts to 0\n    total_number_of_sequences = 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # write your code here\n    # error handling\n    if m == 0:\n        return 0\n    if n == 0:\n        return 1\n    else:\n        return get_total_number_of_sequences(m-1, n) + get_total_number_of_sequences(m-1, n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Sum of all possible sequences of length n\n    dp = 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_number_of_sequences(m,n): \n        if m <= 1:\n            return m + 1\n        if n <= 1:\n            return n\n        if n == 2:\n            return m * (m - 1)\n        if m <= n:\n            return get_number_of_sequences(m, n-1)\n        return get_number_of_sequences(m, n-1) + get_number_of_sequences(m - n, n)\n    return get_number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    n_seq = 0\n    for i in range(m,n):\n        for j in range(1,i):\n            if i*j < m:\n                n_seq += 1\n            else:\n                break\n    return n_seq\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq = []\n    if n == 1:\n        seq.append(1)\n        return len(seq)\n    if m == 0:\n        return 0\n    if m < 1 or n < 1:\n        return 0\n    if n == 2:\n        if m == 1:\n            return 1\n        else:\n            seq.append(1)\n            seq.append(2)\n            return len(seq)\n    if n == 3:\n        if m == 2:\n            return 6\n        else:\n            seq.append(1)\n            seq.append(2)\n            seq.append(3)\n            return len(seq)\n    if n > 3:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2) + get_total_number_of_sequences(m,n-3)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # 1. Initialize DP Table\n    dp = [[0 for _ in range(n)] for _ in range(m+1)]\n    dp[0] = [1 for _ in range(n)] # By definition, we need to have at least 1 sequence, but it is possible to have 0 sequence\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    i = 0\n    while(i < n):\n        if (i == 0) or (m // 2 <= lst[i-1]):\n            count += m // 2\n            m = m - (lst[i-1] * 2)\n        else:\n            count += m // 2\n            lst.pop(i-1)\n            m = m - (lst[i-1] * 2)\n        i += 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # This is a fibonacci sequence based approach that will only give a number of sequences in range of 1 to m\n    if n == 1:\n        return 1\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n > m:\n        return 0\n    elif n == m:\n        return 1\n    else:\n        return ((m + 1) ** n - (m - 1) ** n) // 2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # for list1:\n    #     append new element to the end\n    #     pop the last element\n    #     add the second element to the end\n    #     append new element to the end\n    \n    # for list2:\n    #     append new element to the end\n    #     pop the last element\n    #     add the second element to the end\n    #     append new element to the end\n    # return list1\n    new_list1 = []\n    for i in range(len(list1)-1):\n        new_list1.append(list1[i])\n    new_list1.append(list2[-1])\n    for j in range(len(list2)-1):\n        new_list1.append(list2[j])\n    new_list1.append(list2[-1])\n    for k in range(len(list2)-1):\n        new_list1.append(list2[k])\n    return new_list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for x in list2:\n        list1.append(x)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2[:-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    list1[-2] = list2[1]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1] = list2[len(list2)-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # for i in range(len(list1)):\n    #     list1[i] = list2[i]\n    list1[-1:] = list2[:]\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a')+str1.count('e')+str1.count('i')+str1.count('o')+str1.count('u')\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \n    \ndef count_charac_1(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ndef count_charac_2(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a')\n    \ndef count_charac_3(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a',start = 1)\n    \ndef count_charac_4(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', start = 1, end = 10)\n    \ndef count_charac_5(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', start = 10)\n    \ndef count_charac_6(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', start = 10, end = 20)\n    \ndef count_charac_7(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10)\n    \ndef count_charac_8(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', max = 10)\n    \ndef count_charac_9(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', start = 10, end = 20)\n    \ndef count_charac_10(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20)\n    \ndef count_charac_11(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2)\n    \ndef count_charac_12(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5)\n    \ndef count_charac_13(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True)\n    \ndef count_charac_14(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n')\n    \ndef count_charac_15(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*')\n    \ndef count_charac_16(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True)\n    \ndef count_charac_17(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True)\n    \ndef count_charac_18(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3)\n    \ndef count_charac_19(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3)\n    \ndef count_charac_20(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3, substring = 'ab')\n    \ndef count_charac_21(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3, substring = 'ab')\n    \ndef count_charac_22(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3, substring = 'ab', include_substring = True)\n    \ndef count_charac_23(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3, substring = 'ab', include_substring = True)\n    \ndef count_charac_24(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3, substring = 'ab', include_substring = True)\n    \ndef count_charac_25(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3, substring = 'ab', include_substring = True, strict_length = True)\n    \ndef count_charac_26(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3, substring = 'ab', include_substring = True, strict_length = True)\n    \ndef count_charac_27(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a', min = 10, max = 20, start = 2, end = 5, strict = True, include = 'n', replace = '*', count = True, length = 3, substring = 'ab', include_substring = True, strict_length = True, include_index "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ndef count_charac2(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n    \ndef count_charac3(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ndef count_charac4(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(1 for ch in str1)\n    \ndef count_charac5(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac6(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac7(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac8(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac9(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac10(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac11(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac12(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac13(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac14(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac15(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac16(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac17(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac18(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac19(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac20(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac21(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac22(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac23(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac24(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac25(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac26(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac27(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac28(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac29(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac30(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac31(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac32(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac33(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac34(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac35(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac36(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch not in \"aeiou\" for ch in str1)\n    \ndef count_charac37(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return sum(ch in str1 for ch in \"aeiou\")\n    \ndef count_charac38(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    retur"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 0\n    if N < 0:\n        return 0\n    for i in range(N + 1, 0, -1):\n        if i ** 2 == N:\n            return i\n    return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N%2!=0:\n        return (N+1)**2\n    else:\n        return (N-1)**2\nprint(next_Perfect_Square(6))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while i**2 <= N:\n        i += 1\n    return i**2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N):\n        if (i*i)>N:\n            print(N)\n            break\n        else:\n            i+=1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while(i*i < N):\n        i = i + 1\n    return (i*i)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 0\n    x = math.sqrt(N)\n    while True:\n        i += 1\n        y = (x + 1) ** 2\n        if y > N:\n            return i\n        else:\n            x = y\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    found = False\n    while not found:\n        val = math.ceil(math.sqrt(N))\n        if val*val == N:\n            found = True\n        else:\n            N = N+1\n    return val\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    res = math.ceil(math.sqrt(N))\n    return res\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # start with N + 1 and go up to sqrt(N)\n    for i in range(N + 1, math.sqrt(N) + 1):\n        if i*i == N:\n            return i\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # code here\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def _max_sum(arr, current_sum, current_idx, length): \n        if current_idx >= length: \n            return current_sum \n        if arr[current_idx] > arr[current_idx + 1]: \n            return _max_sum(arr, current_sum + arr[current_idx], current_idx + 1, length) \n        else: \n            return _max_sum(arr, current_sum, current_idx + 1, length) \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    max_sum = 0\n    i = 0\n    while i < len(arr):\n        while i < len(arr) and arr[i] <= arr[i + 1]:\n            i += 1\n        left = i\n        while i < len(arr) and arr[i] >= arr[i - 1]:\n            i += 1\n        right = i\n        sub_array = arr[left:right]\n        if len(sub_array) > 0:\n            max_sum = max(max_sum, sum(sub_array))\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[-1 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n        for j in range(i):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + arr[i])\n    # print(dp)\n    print('Maximum sum bitonic subsequence is', dp[-1][-1])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # I want to try a 2 pointer approach, but it's not quite right.  \n    # I am assuming that the seq is ordered.  \n    # This is also not a very elegant or elegant solution, but it works.  \n    if len(arr) == 0:\n        return 0\n    max_sum = 0\n    max_end = 0\n    max_start = 0\n    left_max = -1\n    while left_max!= 0:\n        left_max = max(arr[max_start:max_end+1])\n        max_start = max_start+1\n    right_max = -1\n    while right_max!= 0:\n        right_max = max(arr[max_end:max_end+1])\n        max_end = max_end+1\n    max_sum = left_max + right_max\n    return max_sum\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Python implementation of Max-Sum-Bitonic Subsequence \n    max_sum = arr[0] \n    curr_max = arr[0] \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # if the array is empty or has one element\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # sort the array\n    arr.sort()\n    print(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2: \n        return arr\n    if n == 2:\n        return max(arr[0], arr[1])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    max_ending_here, max_so_far = 0, 0\n    for x in arr:\n        max_ending_here = max(max_ending_here + x, x)\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Your code goes here\n    root = number\n    next = root * 2\n    while abs(root * root - number) > 0.000001:\n        root = (root + next) / 2\n        next = root * 2\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while guess**2!= number:\n        guess = guess + ((number/guess) - 1)*guess\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    if number < 0:\n        return \"You can not use negative numbers!\"\n    \n    if number == 0 or number == 1:\n        return number\n    \n    a = 0\n    b = number\n    \n    while True:\n        c = (a + b) / 2\n        \n        if a == b:\n            return a\n        \n        if c == number:\n            return c\n        \n        if c < number:\n            a = c\n        else:\n            b = c\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = number\n    while a > 0:\n        a = a/2\n    return a\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return 1\n    x = number / 2\n    y = x + 0.5\n    while y < number:\n        x = y\n        y = x + 0.5\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize starting and ending values \n    start_value = 0\n    end_value = number\n    # initialize step value\n    step = 1\n    # initialize sum\n    sum = 0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 0\n    for i in range(10):\n        a = (a + number/a)/2\n    return a\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('number must be >= 0')\n    elif number == 0:\n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2.0\n    while abs(guess**2 - number) >= 1e-8:\n        guess = guess/2.0\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    if n<=1:\n        return n\n    L=1\n    R=1\n    LPS=[[0 for x in range(n)] for y in range(n)]\n    for i in range(1,n):\n        for j in range(0,i):\n            if str[j]==str[i]:\n                if i-j<=2:\n                    LPS[i][i]=1\n                else:\n                    LPS[i][i]=LPS[i-1][i-1]+2\n            else:\n                LPS[i][i]=0\n    for i in range(1,n):\n        for j in range(0,i):\n            if str[j]==str[i]:\n                if i-j<=2:\n                    LPS[i][i]=1\n                else:\n                    LPS[i][i]=max(LPS[i-1][i-1],LPS[i-1][i])+2\n            else:\n                LPS[i][i]=0\n    for i in range(1,n):\n        for j in range(0,i):\n            if str[j]==str[i]:\n                if i-j<=2:\n                    RPS=1\n                else:\n                    RPS=RPS+2\n            else:\n                RPS=0\n            LPS[i][i]=max(LPS[i-1][i-1],RPS,LPS[i][i])\n    return LPS[n-1][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[False for i in range(n)] for j in range(n)]\n    \n    max_len = 1\n    max_len_index = 0\n    \n    for i in range(n):\n        dp[i][i] = True\n        \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j] and (j-i < 3 or dp[i+1][j-1]):\n                dp[i][j] = True\n                curr_len = j - i + 1\n                if curr_len > max_len:\n                    max_len = curr_len\n                    max_len_index = i\n    \n    return max_len, max_len_index\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_len(str):\n        l=len(str)\n        dp=[[0]*l for _ in range(l)]\n        for i in range(l-1,-1,-1):\n            for j in range(i+1,l):\n                if str[i]==str[j]:\n                    dp[i][j]=dp[i+1][j-1]+2\n                else:\n                    dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n        return dp[0][l-1]\n    return lps_len(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    size = len(str)\n    dp = [[0 for i in range(size)] for j in range(size)]\n    for i in range(size):\n        dp[i][i] = 1\n    max_len = 1\n    for i in range(size - 1, -1, -1):\n        for j in range(i + 1, size):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            max_len = max(max_len, dp[i][j])\n    return max_len\nprint(lps(\"aabcdcbdddde\"))"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # setting up table with no diagonal entries and no palindromic subsequences\n    table = [[0 for i in range(len(str))] for j in range(len(str))]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def ispalindrome(str):\n        # print(str)\n        if len(str) == 0:\n            return False\n        if len(str) == 1:\n            return True\n        if str[0]!= str[-1]:\n            return False\n        return ispalindrome(str[1:-1])\n    \n    if len(str) == 0:\n        return 0\n    if str == \"\":\n        return 0\n    if str == \" \":\n        return 0\n    if str == \"a\":\n        return 1\n    if str == \"ab\":\n        return 1\n    if str == \"abc\":\n        return 3\n    if str == \"aba\":\n        return 2\n    if str == \"abca\":\n        return 5\n    if str == \"abac\":\n        return 4\n    if str == \"abacaba\":\n        return 7\n    if str == \"abacabaabacabaabacabacabacabacabaabacabaabacabaabacabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaabacabaaba"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)<=1:\n        return 1\n    max_len = 1\n    for i in range(1,len(str)):\n        odd = lps(str[0:i])\n        even = lps(str[1:i+1])\n        if i%2==0:\n            max_len = max(max_len,odd+2)\n        else:\n            max_len = max(max_len,even+2)\n    return max_len\nprint(lps('abab'))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return 1\n    max_len = 1\n    for i in range(1,len(str)):\n        odd_len = lps(str[:i])\n        even_len = lps(str[i:])\n        if (odd_len + 1) > max_len:\n            max_len = odd_len + 1\n        if even_len + 1 > max_len:\n            max_len = even_len + 1\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)//2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # when n = 0, 0 is the sum of 0\n    if n == 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n - 1) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * sum(range(1, n + 1))\n    \n    \ndef print_upper_words(words, word_limit):\n    '''\n    Given an iterable words and a number word_limit, print only the first\n    word in words that is longer than word_limit characters. For example:\n        print_upper_words([\"Python\", \"is\", \"awesome\"], 5) prints \"Python\"\n    '''\n    for word in words:\n        if len(word) > word_limit:\n            print(word)\n        else:\n            break\n    \n    \ndef sum_of_squares(numbers):\n    '''\n    Given an iterable of numbers, return the sum of the squares of each number.\n    For example:\n        >>> sum_of_squares([1, 4, 9])\n        (1+4+9)^2\n        >>> sum_of_squares((1, 4, 9))\n        (1+4+9)^2\n    '''\n    return sum(map(lambda x: x*x, numbers))\n    \n    \ndef is_power_of_two(num):\n    '''\n    Write a function that determines whether the given integer is a power of two.\n    For example:\n        >>> is_power_of_two(8)\n        False\n        >>> is_power_of_two(16)\n        True\n        >>> is_power_of_two(32)\n        True\n        >>> is_power_of_two(3)\n        False\n    '''\n    return (num == 2**(num - 1))\n    \n    \ndef exponents(base, exponents):\n    '''\n    Write a function that computes the product of the given iterable of integers.\n    For example:\n        >>> exponents(2, (1, 2))\n        2^2\n        >>> exponents(2, (2,))\n        2^2\n        >>> exponents(2, (1, 3))\n        2^1*2^2*2^3\n        >>> exponents(2, (3,))\n        2^2*2^2*2^2\n    '''\n    return reduce(lambda x, y: x*y, exponents, base)\n    \n    \ndef run_length_encode(words):\n    '''\n    Write a function that takes in an iterable of words and returns a string\n    representing the given iterable of words that is run-length encoded.\n    An iterable of words is run-length encoded if there is a one-to-one\n    correspondence between each word in the iterable and the count of that\n    word in the iterable. For example:\n        >>> run_length_encode([\"hi\", \"hello\", \"hey\", \"yo\"])\n        'h1ll4e1s3y3'\n        >>> run_length_encode([\"a\", \"b\", \"c\", \"c\"])\n        'a2b3c5'\n        >>> run_length_encode([\"a\", \"b\", \"b\"])\n        'a2b2'\n    '''\n    \n    def helper(words):\n        '''\n        helper is a helper function that takes in a list of strings as input\n        and returns the count of each word in that list.\n        '''\n        counts = {}\n        for word in words:\n            if word in counts.keys():\n                counts[word] += 1\n            else:\n                counts[word] = 1\n        return counts\n        \n        \n    # initialize a variable to count the length of the word and a variable to count the number of characters in the run-length encoded words\n    length = 0\n    count = 0\n    \n    # loop through the function and create a dictionary using the helper function above\n    for word in words:\n        # if the length of the word is 1, increment the count by 1 and reset the length to 0\n        if len(word) == 1:\n            count += 1\n            length = 0\n        # if the length of the word is longer than 1, increment the count by 1 and set the length to the length of the word minus 1\n        else:\n            count += 1\n            length = len(word) - 1\n        \n        # if the length of the word equals the number of characters in the run-length encoded word, add that word to the list of run-length encoded words\n        if length == count:\n            run_length_encode_words.append(word)\n            \n        # otherwise, create a dictionary and add the current word and its corresponding length to it\n        else:\n            run_length_encode_words_dict = {word: length}\n            run_length_encode_words.append(run_length_encode_words_dict)\n            \n            # reset the count and length of the word to 0\n            count = 0\n            length = 0\n    \n    # convert the dictionary to a string\n    return ''.join(map(str, run_length_encode_words))\n        \n        \ndef run_length_decode(words):\n    '''\n    Write a function that takes in a string of run-length encoded words and\n    returns a list of words that are in the same order as the original list\n    but have been re-encoded using the standard run-length encoding. For example:\n        >>> run_length_decode('h1ll4e1s3y3')\n        ['hi', 'hello', 'hey', 'yo']\n        >>> run_length_decode('a2b3c5')\n        ['a', 'b', 'b', 'c', 'c']\n        >>> run_length_decode('a2b2')\n        ['a', 'b', 'b']\n    '''\n    # initialize a variable to count the length of the word and a variable to count the number of characters in the run-length encoded words\n    length = 0\n    count = 0\n    \n    # loop through the function\n    for word in words:\n        # if the length of the word is 1, increment the count by 1\n        if len(word) == 1:\n            count += 1\n        # otherwise, increment the count by 1 and set the length to the length of the word minus 1\n        else:\n            count += 1\n            length = len(word) - 1\n            \n        # if the length of the word equals the number of characters in the run-length encoded word, add that word to the list of run-length encoded words\n        if length == count:\n            return list(word)\n            \n        # otherwise, create a dictionary and add the current word and its corresponding length to it\n        else:\n            run_length_decode_words_dict = {word: length}\n            run_length_decode_words.append(run_length_decode_words_dict)\n            \n            # reset the count and length of the word to 0\n            count = 0\n            length = 0\n        \n    \ndef find_product(prices):\n    '''\n    Write a function that takes in an iterable of prices, and returns the product of the prices.\n    For example:\n        >>> find_product([3, 1, 2, 5])\n        1\n        >>> find_product([-1, -3, -1])\n        0\n    '''\n    # initialize a variable to store the product of all the numbers in the iterable\n    product = 1\n    \n    # loop through the function\n    for price in prices:\n        # multiply the product of each number in the iterable by the price and add it to the product\n        product *= price\n        \n    return product\n        \n        \ndef find_max(words):\n    '''\n    Write a function that takes in an iterable of words and returns the word in the\n    iterable that has the highest number of occurrences. If multiple words have the\n    same number of occurrences, return the one that comes first alphabetically.\n    For example:\n        >>> find_max([\"what\", \"why\", \"who\", \"why\", \"who\", \"why\", \"who\", \"why\"])\n        'who'\n        >>> find_max([\"what\", \"why\", \"why\", \"who\", \"why\", \"why\", \"why\", \"who\"])\n        'why'\n        >>> find_max([\"who\", \"why\", \"who\", \"why\", \"who\", \"why\", \"why\", \"who\"])\n        'who'\n    '''\n    # initialize a variable to store the length of the word and a variable to store the count of each word in the iterable\n    word_count = 0\n    word = None\n    \n    # loop through the function\n    for word in words"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # init a list to store sum in\n    sum = 0\n    \n    # calculate the sum\n    while n > 0:\n        sum += 1 / n\n        n = n - 1\n        \n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return n\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n * sum(range(1,n))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    ans = 0.0\n    for i in range(1, n+1):\n        ans += 1.0 / i\n    return ans"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n+1)/2\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Array 1 has the greater number of elements\n    if len(array_nums1) > len(array_nums2):\n        return sum(set(array_nums1) & set(array_nums2))\n    else:\n        return sum(set(array_nums2) & set(array_nums1))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    array_result = []\n    i = 0\n    j = 0\n    while(i<len(array_nums1)) and (j<len(array_nums2)):\n        if array_nums1[i] == array_nums2[j]:\n            array_result.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return array_result\nprint(intersection_array([1,2,3,4,6,7,8,9,10,13,14,15,16,17,18,19,20,25,26,27,28,29,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,87"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # print(list(set(array_nums1).intersection(set(array_nums2))))\n    return list(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #1. Transpose Array\n    #2. Perform set operations\n    #3. Convert set objects to set objects\n    #4. Convert set objects to set objects\n    #5. Convert set objects to set objects\n    #6. Find the length of array1, length of array2, then, initialize the result array with length of array1 + length of array2\n    #7. Initialize an empty array to store the intersection of two array\n    #8. Traverse through both the arrays and find the index in the array1, if present in the array2 then add the value to the result array\n    #9. Traverse through both the arrays and find the index in the array2, if present in the array1 then add the value to the result array\n    #10. Return the result array\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    def intersection(array_nums1,array_nums2):\n        i = 0\n        new_arr = []\n        while i < len(array_nums1):\n            if array_nums1[i] in array_nums2:\n                new_arr.append(array_nums1[i])\n            i+=1\n        return new_arr\n    return intersection(array_nums1,array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return (set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set with the first array and another set with the second array\n    first_set = set(array_nums1)\n    second_set = set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return set(array_nums1).intersection(set(array_nums2))\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n    \nprint(count_X((1,2,3,4),3))\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if x == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    list.insert(0,element)\n    return list\n    \n    \ndef get_sub_list(list, num):\n    '''\n    Write a function that takes in a list and a number and returns the sublist of elements in the list that has a size equal to the number.\n    '''\n    return list[:num]\n    \n    \ndef get_middle_element(list):\n    '''\n    Write a function that takes in a list and returns the middle element of the list.\n    '''\n    \n    return list[int(len(list)/2)]\n    \n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and reverses the order of the elements in the list.\n    '''\n    list.reverse()\n    return list\n    \n    \ndef get_longest_word(sentence):\n    '''\n    Write a function that takes in a sentence and returns the word with the longest length in the sentence.\n    '''\n    \n    for word in sentence.split(' '):\n        if len(word) >= len(longest):\n            longest = word\n    \n    return longest\n    \n    \ndef get_longest_word_index(sentence):\n    '''\n    Write a function that takes in a sentence and returns the index number of the word with the longest length in the sentence.\n    '''\n    \n    for word in sentence.split(' '):\n        if len(word) >= len(longest):\n            longest = word\n    \n    return sentence.split(' ').index(longest)\n    \n    \ndef duplicate_elements(list):\n    '''\n    Write a function that takes in a list and returns a new list that contains the duplicate elements in the list.\n    '''\n    \n    for word in list:\n        for word2 in list:\n            if word == word2:\n                return list\n                \n                \ndef sum_values(list):\n    '''\n    Write a function that takes in a list and returns the sum of all the numbers in the list.\n    '''\n    \n    return sum(list)\n    \n    \ndef product_of_all_values(list):\n    '''\n    Write a function that takes in a list and returns the product of all the numbers in the list.\n    '''\n    \n    return reduce(lambda x,y: x*y, list)\n    \n    \ndef get_index(list, element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the first occurrence of the element in the list.\n    '''\n    \n    return list.index(element)\n    \n    \ndef get_value_index(list, element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the first occurrence of the element in the list.\n    '''\n    \n    return list.index(element, 0)\n    \n    \ndef is_sorted(list):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    \n    return list == sorted(list)\n    \n    \ndef get_even_indexes(list):\n    '''\n    Write a function that takes in a list and returns a list of indexes that contain the even values in the list.\n    '''\n    \n    return [i for i, x in enumerate(list) if x%2 == 0]\n    \n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list and returns a new list with the list elements sorted in ascending order.\n    '''\n    \n    return sorted(list)\n    \n    \ndef reverse_sort_list(list):\n    '''\n    Write a function that takes in a list and returns a new list with the list elements reversed in ascending order.\n    '''\n    \n    return list.reverse()\n    \n    \ndef get_index_of_duplicate(list):\n    '''\n    Write a function that takes in a list and returns the index of the duplicate element in the list.\n    '''\n    \n    return list.index(list[0])\n    \n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a new list that contains all of the duplicate elements in the list.\n    '''\n    \n    list = set(list)\n    \n    return list\n    \n    \ndef get_index_of_smallest_number(list):\n    '''\n    Write a function that takes in a list and returns the index of the smallest element in the list.\n    '''\n    \n    return list.index(min(list))\n    \n    \ndef get_index_of_largest_number(list):\n    '''\n    Write a function that takes in a list and returns the index of the largest element in the list.\n    '''\n    \n    return list.index(max(list))\n    \n    \ndef print_array(array):\n    '''\n    Write a function that takes in a list and prints each element in the list on a new line.\n    '''\n    \n    for word in array:\n        print(word)\n        \n    \ndef print_n_elements(array, n):\n    '''\n    Write a function that takes in a list and prints each element in the list on a new line if the element is the nth element.\n    '''\n    \n    for word in array:\n        if array.index(word) == n:\n            print(word)\n            \n    \ndef print_last_n_elements(array, n):\n    '''\n    Write a function that takes in a list and prints each element in the list on a new line if the element is the nth element.\n    '''\n    \n    for word in array[-n:]:\n        print(word)\n        \n    \ndef sum_all_numbers(array, n):\n    '''\n    Write a function that takes in a list and returns the sum of all the numbers in the list if the list contains n values.\n    '''\n    \n    return sum(array[-n:])\n    \n    \ndef print_sorted_list(array):\n    '''\n    Write a function that takes in a list and prints it in ascending order.\n    '''\n    \n    for word in sorted(array):\n        print(word)\n        \n    \ndef print_last_sorted_list(array):\n    '''\n    Write a function that takes in a list and prints it in ascending order.\n    '''\n    \n    for word in sorted(array, reverse = True):\n        print(word)\n        \n    \ndef sum_even_numbers(array):\n    '''\n    Write a function that takes in a list and returns the sum of all the even numbers in the list if the list contains at least one even number.\n    '''\n    \n    return sum(x for x in array if x%2 == 0)\n    \n    \ndef is_sorted_by_index(array):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    \n    return sorted(array) == array\n    \n    \ndef get_indexes_of_sorted_items(array, n):\n    '''\n    Write a function that takes in a list and returns a list of the indexes of the sorted items in the list if the list contains n sorted items.\n    '''\n    \n    return [array.index(x) for x in sorted(array)]\n    \n    \ndef get_first_index_of_sorted_items(array, n):\n    '''\n    Write a function that takes in a list and returns the index of the first item in the list if the list contains n sorted items.\n    '''\n    \n    return array.index(sorted(array)[0])\n    \n    \ndef get_last_index_of_sorted_items(array, n):\n    '''\n    Write a function that takes in a list and returns the index of the last item in the list if the list contains n sorted items.\n    '''\n    \n    return array.index(sorted(array)[-1])\n    \n    \ndef get_index_of_last_index_of_sorted_items(array, n):\n    '''\n    Write a function that takes in a list and returns the index of the last item in the list if the list contains n sorted item"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        list.append(element)\n        return list\n    else:\n        for i in range(len(list)):\n            if list[i]!= element:\n                list.insert(i,element)\n                return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    temp = 0\n    for i in list:\n        if element > i:\n            temp = i\n        else:\n            temp = element\n            return list.insert(0,temp)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # your code here\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n            return list\n        else:\n            pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index in range(len(list)):\n        if list[index] == element:\n            list.insert(index,element)\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    counter = 0\n    newList = []\n    for i in list:\n        newList.append(element)\n        newList.insert(counter,i)\n        counter += 1\n    return newList\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list[:]\n    for i in range(len(new_list)):\n        new_list.insert(i,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_copy = list[:]\n    for i in range(len(list_copy)):\n        if list_copy[i] == element:\n            list_copy.insert(i,element)\n            return list_copy\n    list_copy.append(element)\n    return list_copy\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list[:]\n    index = 0\n    while index < len(new_list):\n        if list[index] == element:\n            index += 1\n        else:\n            new_list.insert(index,element)\n            return new_list\n    new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = 0\n    i = 0\n    for x in numbers:\n        c = x.real - x.imag*1j\n        d = x.imag + x.real*1j\n        r += c\n        i += d\n    d = x.real + x.imag*1j\n    return r,i\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # convert(number) -> value, angle\n    # Input:\n    # number -> complex number\n    # Output:\n    # value - magnitude of complex number\n    # angle - angle in degrees\n    # Examples:\n    # convert(2+4j)    -> (3.0, 90.0)\n    # convert(-1+3j)   -> (4.0, 45.0)\n    # convert(1+1j)    -> (5.0, 90.0)\n    # convert(0+0j)    -> (0.0, 0.0)\n    # convert(1+0j)    -> (1.0, 0.0)\n    # convert(0+1j)    -> (1.0, 180.0)\n    # convert(1+1j)    -> (1.0, 45.0)\n    \n    value = cmath.sqrt(numbers.real**2 + numbers.imag**2)\n    angle = cmath.phase(numbers)\n    return value, angle\n    "
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers[0]\n    imag = numbers[1]\n    a = complex(real,imag)\n    if a.imag == 0:\n        if a.real > 0:\n            print(a.real, \"j\",a.imag)\n        else:\n            print(a.real,\"j\",a.imag)\n    else:\n        if a.real > 0:\n            print(a.real,\"+\",a.imag,\"j\",a.real)\n        else:\n            print(a.real,\"-\",a.imag,\"j\",a.real)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"\\nInput complex number: \")\n    complex_num = complex(input())\n    c1 = cmath.phase(complex_num)\n    p1 = cmath.polar(complex_num)\n    print(\"Complex number: \")\n    print(complex_num)\n    print(\"Complex number in polar coordinates: \")\n    print(p1)\n    print(\"Complex number in polar coordinates (degrees): \")\n    print(degrees(c1))\n    print(\"Complex number in polar coordinates (degrees): \")\n    print(degrees(c1))\n    print(\"Complex number in polar coordinates (radians): \")\n    print(radians(c1))\n    print(\"Complex number in polar coordinates (radians): \")\n    print(radians(c1))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(radians(degrees(c1)))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(degrees(radians(c1)))\n    print(\"\\n\\n\")\n    \ndef degrees(c1):\n    \"\"\"\n    Convert complex number into degrees\n    \"\"\"\n    return ((c1 / cmath.pi) * 180)\n    \ndef radians(c1):\n    \"\"\"\n    Convert complex number into radians\n    \"\"\"\n    return c1\n    \ndef polar_conversion(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    print(\"\\nInput polar coordinates: \")\n    c = complex(input())\n    p = polar(c)\n    print(\"Complex number in polar coordinates: \")\n    print(p)\n    print(\"Complex number in polar coordinates (degrees): \")\n    print(degrees(c))\n    print(\"Complex number in polar coordinates (degrees): \")\n    print(degrees(c))\n    print(\"Complex number in polar coordinates (radians): \")\n    print(radians(c))\n    print(\"Complex number in polar coordinates (radians): \")\n    print(radians(c))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(radians(degrees(c)))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(degrees(radians(c)))\n    print(\"\\n\\n\")\n    \ndef polar(c):\n    \"\"\"\n    Convert complex number into polar coordinates\n    \"\"\"\n    return (degrees(c), radians(c))\n    \ndef complex_conversion(numbers):\n    '''\n    Write a python function to convert complex number into hexadecimal number\n    '''\n    print(\"Input complex number: \")\n    complex_num = complex(input())\n    c1 = cmath.phase(complex_num)\n    p1 = cmath.polar(complex_num)\n    print(\"Complex number: \")\n    print(complex_num)\n    print(\"Complex number in polar coordinates: \")\n    print(p1)\n    print(\"Complex number in polar coordinates (degrees): \")\n    print(degrees(c1))\n    print(\"Complex number in polar coordinates (degrees): \")\n    print(degrees(c1))\n    print(\"Complex number in polar coordinates (radians): \")\n    print(radians(c1))\n    print(\"Complex number in polar coordinates (radians): \")\n    print(radians(c1))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(radians(degrees(c1)))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(degrees(radians(c1)))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(degrees(radians(c1)))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(radians(degrees(c1)))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(radians(degrees(c1)))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(radians(degrees(c1)))\n    print(\"\\n\\n\")\n    \ndef hex_conversion(numbers):\n    '''\n    Write a python function to convert hexadecimal number into complex number.\n    '''\n    print(\"Input hexadecimal number: \")\n    hx = input()\n    print(\"\\nInput hexadecimal number in upper case: \")\n    hx_u = input()\n    print(\"\\nInput hexadecimal number in lower case: \")\n    hx_l = input()\n    hx_up = hx.upper()\n    hx_low = hx.lower()\n    print(\"\\nInput hexadecimal number in upper case: \")\n    print(hx_up)\n    print(\"\\nInput hexadecimal number in lower case: \")\n    print(hx_low)\n    print(\"\\nInput hexadecimal number in upper case: \")\n    print(hx_up)\n    print(\"\\nInput hexadecimal number in lower case: \")\n    print(hx_low)\n    print(\"\\nComplex number in hexadecimal numbers: \")\n    complex_num = complex(hx_up, hx_low)\n    print(complex_num)\n    print(\"Complex number in hexadecimal numbers (degrees): \")\n    print(degrees(cmath.phase(complex_num)))\n    print(\"Complex number in hexadecimal numbers (degrees): \")\n    print(degrees(cmath.phase(complex_num)))\n    print(\"Complex number in hexadecimal numbers (radians): \")\n    print(radians(cmath.phase(complex_num)))\n    print(\"Complex number in hexadecimal numbers (radians): \")\n    print(radians(cmath.phase(complex_num)))\n    print(\"Complex number in hexadecimal numbers (radians and degrees): \")\n    print(radians(degrees(cmath.phase(complex_num))))\n    print(\"Complex number in hexadecimal numbers (radians and degrees): \")\n    print(degrees(radians(cmath.phase(complex_num))))\n    print(\"Complex number in hexadecimal numbers (radians and degrees): \")\n    print(radians(degrees(cmath.phase(complex_num))))\n    print(\"Complex number in hexadecimal numbers (radians and degrees): \")\n    print(radians(degrees(cmath.phase(complex_num))))\n    print(\"Complex number in hexadecimal numbers (radians and degrees): \")\n    print(radians(degrees(cmath.phase(complex_num))))\n    print(\"\\n\\n\")\n    \ndef input_data(numbers):\n    '''\n    Inputs the data and test cases and prints the output accordingly.\n    '''\n    print(\"\\nInput complex number: \")\n    complex_num = complex(input())\n    c1 = cmath.phase(complex_num)\n    p1 = cmath.polar(complex_num)\n    print(\"Complex number: \")\n    print(complex_num)\n    print(\"Complex number in polar coordinates: \")\n    print(p1)\n    print(\"Complex number in polar coordinates (degrees): \")\n    print(degrees(c1))\n    print(\"Complex number in polar coordinates (degrees): \")\n    print(degrees(c1))\n    print(\"Complex number in polar coordinates (radians): \")\n    print(radians(c1))\n    print(\"Complex number in polar coordinates (radians): \")\n    print(radians(c1))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(radians(degrees(c1)))\n    print(\"Complex number in polar coordinates (radians and degrees): \")\n    print(degrees(radians(c1)))\n    print(\"\\n\\n\")\n    \n    \ndef input_polar(numbers):\n    '''\n    Inputs the polar coordinates and prints the output accordingly.\n    '''\n    print("
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c, s = numbers\n    r = cmath.sqrt(c*c + s*s)\n    theta = cmath.phase(c)*180/cmath.pi\n    return (r, theta)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c=complex(numbers[0],numbers[1])\n    mag=cmath.polar(c)[0]\n    ang=cmath.polar(c)[1]\n    print(ang)\n    print(mag)\n    if(ang>=0):\n        print('The point is on the right')\n    else:\n        print('The point is on the left')\n    if(ang==0):\n        print(\"The point is on the x-axis\")\n    if(mag>=0):\n        print(\"The point is above the origin\")\n    else:\n        print(\"The point is below the origin\")\n    return ang\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c = complex(numbers)\n    s = abs(c)\n    angle = 0.0\n    if s!= 0.0:\n        angle = cmath.phase(c)\n    if s == 0.0:\n        angle = cmath.phase(c)\n    if s == -0.0:\n        angle = cmath.phase(c)\n    return s, angle\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for n in range(len(numbers)):\n        x=numbers[n].real\n        y=numbers[n].imag\n        r=cmath.sqrt(x**2+y**2)\n        theta=cmath.atan2(y,x)\n        print(r,' ',theta)\nconvert([1,2,3,4,5])\n'''\nWrite a python function to convert polar coordinates to complex numbers.\n'''\ndef convert_polar(polar_coordinates):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    for n in range(len(polar_coordinates)):\n        r=polar_coordinates[n][0]\n        theta=polar_coordinates[n][1]\n        real=r*cmath.cos(theta)\n        imaginary=r*cmath.sin(theta)\n        complex_number=(real,imaginary)\n        print(complex_number)\nconvert_polar([[2,10],[3,20]])\n'''\nWrite a python function to check whether a number is perfect or not.\n'''\ndef perfect(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    perfect=0\n    num=number\n    while num>0:\n        num=num//10\n        perfect+=1\n    return (perfect==6)\ndef perfect2(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect3(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect4(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect5(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect6(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect7(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect8(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect9(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect10(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect11(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect12(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num//10\n    count=0\n    for i in factors:\n        if i!=0 and i!=1 and i!=2 and i!=3 and i!=4 and i!=5 and i!=6:\n            return False\n        else:\n            count+=1\n    return True\ndef perfect13(number):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    num=number\n    if num<6:\n        return False\n    factors=[]\n    while num>0:\n        factors.append(num%10)\n        num=num/"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return math.sqrt(numbers.real**2+numbers.imag**2), math.atan2(numbers.imag,numbers.real)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    for i in range(len(numbers)):\n        if(numbers[i] == complex(-1, 0)):\n            numbers[i] = complex(1, -1)\n        elif(numbers[i] == complex(0, -1)):\n            numbers[i] = complex(-1, 0)\n        elif(numbers[i] == complex(0, 1)):\n            numbers[i] = complex(-1, 0)\n        elif(numbers[i] == complex(1, 0)):\n            numbers[i] = complex(0, -1)\n        elif(numbers[i] == complex(1, 1)):\n            numbers[i] = complex(0, 1)\n        elif(numbers[i] == complex(0, 1)):\n            numbers[i] = complex(-1, 0)\n        elif(numbers[i] == complex(-1, 0)):\n            numbers[i] = complex(0, 1)\n        else:\n            numbers[i] = complex(0, 0)\n    return numbers\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if (type(element) is int or type(element) is float):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([item for item in list1 if isinstance(item, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n == 0:\n        return l\n    for i in range(len(l)):\n        for comb in combinations_colors(l[i+1:],n-1):\n            result.append((l[i],) + comb)\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    comb = []\n    for i in range(n):\n        for j in range(len(l)):\n            comb.append(l[j])\n        colors.append(tuple(comb))\n        comb = []\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations_list = list(combinations_with_replacement(l, n))\n    return combinations_list\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append((l[i],)*n)\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_combinations = []\n    for i in range(n):\n        for tup in combinations_with_replacement(l, i + 1):\n            list_combinations.append(tup)\n    return list_combinations\nprint(combinations_colors([1,2,3,4], 2))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(l[i], l[i+1], l[i+2]) for i in range(0,len(l)-2)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i]*(n-i))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l1 = []\n    for i in range(len(l)):\n        l1.append(l[i])\n    for i in range(len(l), n):\n        l1.append(l[i])\n    return l1\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_list = ['Blue', 'Yellow', 'Green', 'Red']\n    combo_list = []\n    for i in range(len(color_list)):\n        combo_list.append((color_list[i],)*n)\n    return combo_list"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        combinations_with_replacement(l, n)\n        \ndef combinations(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (without repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        combinations_with_replacement(l, n)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    prime = list(range(2, n))\n    for i in range(2, int(n**0.5) + 1):\n        if prime[i]:\n            j = 2\n            while i * j <= n:\n                prime[i*j] = 0\n                j += 1\n    return len([p for p in prime if p])\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    num=n+1\n    for i in range(2,num):\n        for j in range(2,num):\n            if i==j:\n                if i==int(i**0.5):\n                    count+=1\n                else:\n                    continue\n            if i>=int(i**0.5) and i<int(j**0.5):\n                break\n            if i**2>j:\n                break\n        if i**2>j:\n            break\n    print(count)\ncount_Primes_nums(10000)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums = list(range(2,n))\n    count = 0\n    for i in nums:\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    for i in range(2,n):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n    primes = []\n    for x in range(2,n):\n        is_prime = True\n        for y in range(2, int(math.sqrt(x)) + 1):\n            if x % y == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(x)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # your code here\n    primes = 0\n    for i in range(1, n + 1):\n        flag = True\n        if i == 2:\n            primes += 1\n            continue\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n        if flag:\n            primes += 1\n    return primes\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = n \n    primes = 0\n    for x in range(num):\n        if isPrime(x):\n            primes = primes + 1\n    return primes\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n_prime = 0\n    for i in range(2, n):\n        if n%i == 0:\n            n_prime = n_prime + 1\n    return n_prime\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    num = 2\n    count = 0\n    while num<n:\n        for i in range(2,num):\n            if num%i == 0:\n                break\n        else:\n            count+=1\n        num+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    for i in range(1,n+1):\n        if is_prime(i):\n            count = count + 1\n            \n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swap = (a,b)\n    return swap\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    return (second, first)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x = b\n    y = a\n    return(x,y)\nprint(swap_numbers(10, 20))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Make a copy of both tuples\n    tup1 = copy.deepcopy(test_tup1)\n    tup2 = copy.deepcopy(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = max(test_tup1)\n    tup2 = max(test_tup2)\n    max_tup = tup1 if tup1 > tup2 else tup2\n    print(\"Maximizing the two tuples : \",max_tup)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #print (test_tup1, test_tup2)\n    return (test_tup1, test_tup2)\n    return max(test_tup1[0], test_tup1[1]), max(test_tup2[0], test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    res = []\n    for i, e in enumerate(test_tup1):\n        res.append(e)\n        res.append(test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_sum = test_tup1[0] + test_tup2[0]\n    for i in range(len(test_tup1)):\n        if test_tup1[i] + test_tup2[i] > max_sum:\n            max_sum = test_tup1[i] + test_tup2[i]\n    return max_sum\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if(test_tup1 > test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    print(test_tup1)\n    print(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    max_tup = (max1, max2)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    temp_tup = test_tup1\n    test_tup1 = test_tup2\n    test_tup2 = temp_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup2[0]\n    if a > b:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isprime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num > 2 and num%2 == 0:\n            return False\n        for i in range(3,num,2):\n            if num%i == 0:\n                return False\n        return True\n    def isnewman(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        for i in range(3,num,2):\n            if num%i == 0:\n                return False\n        return True\n    def isnewman_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isnewman_recursive(num-1)\n    def isnewman_hosking(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        n = int(num**(0.5))\n        for i in range(3,n+1,2):\n            if num%i == 0:\n                return False\n        return True\n    def isnewman_bostan(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        for i in range(3,num,2):\n            if num%i == 0:\n                return False\n        return True\n    def isnewman_euler(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        for i in range(3,num,2):\n            if num%i == 0:\n                return False\n        return True\n    def isnewman_bostan_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isnewman_bostan_recursive(num-1)\n    def isnewman_euler_recursive(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        n = int(num**(0.5))\n        for i in range(3,n+1,2):\n            if num%i == 0:\n                return False\n        return True\n    def isnewman_euler_bostan(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        n = int(num**(0.5))\n        for i in range(3,n+1,2):\n            if num%i == 0:\n                return False\n        return True\n    def isnewman_euler_recursive_2(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isnewman_euler_recursive(num-1)\n    def isnewman_euler_bostan_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isnewman_bostan_recursive(num-1)\n    def isprime_hosking(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        n = int(num**(0.5))\n        for i in range(3,n+1,2):\n            if num%i == 0:\n                return False\n        return True\n    def isprime_hosking_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_hosking_recursive(num-1)\n    def isprime_bostan(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        n = int(num**(0.5))\n        for i in range(3,n+1,2):\n            if num%i == 0:\n                return False\n        return True\n    def isprime_bostan_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_bostan_recursive(num-1)\n    def isprime_euler(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        n = int(num**(0.5))\n        for i in range(3,n+1,2):\n            if num%i == 0:\n                return False\n        return True\n    def isprime_euler_recursive(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_euler_recursive(num-1)\n    def isprime_euler_bostan(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        n = int(num**(0.5))\n        for i in range(3,n+1,2):\n            if num%i == 0:\n                return False\n        return True\n    def isprime_euler_bostan_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_bostan_recursive(num-1)\n    def isprime_euler_recursive_2(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_euler_recursive(num-1)\n    def isprime_euler_bostan_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_bostan_recursive(num-1)\n    def isprime_bostan_recursive_2(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_bostan_recursive_2(num-1)\n    def isprime_euler_bostan_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_euler_bostan_recursive(num-1)\n    def isprime_euler_recursive_2(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_euler_recursive_2(num-1)\n    def isprime_euler_bostan_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_euler_bostan_recursive(num-1)\n    def isprime_bostan_recursive_2(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n        return isprime_bostan_recursive_2(num-1)\n    def isprime_euler_bostan_recursive(num):\n        if num == 2:\n            return True\n        if num == 1 or num%2 == 0:\n            return False\n    "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math\n    i = 2\n    x = 1\n    while i <= math.ceil(math.sqrt(n))+1:\n        if n % i == 0:\n            x = 0\n            break\n        i += 1\n    if x == 1:\n        if n < 1000000:\n            print(n)\n        else:\n            print(math.ceil(math.sqrt(n))+1)\n    else:\n        print('Not prime')\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #return the prime number\n    if n==1:\n        return 2\n    # return the 3rd prime\n    if n==2:\n        return 3\n    # return the 5th prime\n    if n==3:\n        return 5\n    # else return the 7th prime\n    if n==4:\n        return 7\n    else:\n        return 7\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # 2 and 3 are primes\n    if n == 2 or n == 3:\n        return True\n    # n must be even\n    if n % 2 == 0:\n        return False\n    # 3 is a prime\n    if n == 4:\n        return True\n    # 5 is not a prime\n    if n % 5 == 0:\n        return False\n    # all other numbers are primes\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # w=sqrt(3)+1 and d=3\n    w = int((3 + sqrt(9)) / 2)\n    d = 3\n    \n    while True:\n        if is_prime(w):\n            break\n        w += 2\n        d += 1\n    \n    # w = sqrt(3)+1 and d=3\n    # w = sqrt(3)+1 and d=4\n    # w = sqrt(3)+1 and d=5\n    # w = sqrt(3)+1 and d=6\n    \n    x = w + 1\n    \n    while True:\n        if is_prime(x):\n            break\n        x += 2\n    \n    while True:\n        if is_prime(d):\n            break\n        d += 1\n    \n    p = x + w + 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    print(p)\n    print(d)\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prime(d):\n            break\n        p += 2\n        d += 1\n    \n    while True:\n        if is_prime(p) and is_prim"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    n -= 1\n    def nth_prm(n):\n        if n == 1:\n            return 2\n        else:\n            prm = 1\n            # while prm < n:\n            #     prm = (prm ** 2 + 1) % n\n            # return prm\n            prm = (prm**2) % n\n            while prm < n:\n                prm = (prm**2) % n\n            return prm\n    if n < 10:\n        return nth_prm(n)\n    else:\n        prm = nth_prm(n)\n        while prm >= n:\n            prm = (prm**2) % n\n        return prm\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    isprime = [False] * n\n    isprime[0] = True\n    isprime[1] = True\n    \n    # initial step - find primes that are not divisible by 2\n    if not isprime[1]:\n        i = 2\n        while i * i <= n:\n            if not isprime[i]:\n                for j in range(i * i, n, i):\n                    isprime[j] = True\n            i += 1\n    \n    # step 2 - use Sieve of Eratosthenes to remove composite numbers\n    prime = []\n    for i in range(n):\n        if not isprime[i]:\n            prime.append(i)\n    \n    # step 3 - find the first prime\n    i = 0\n    while prime[i] < n:\n        i += 1\n    \n    # step 4 - find the last prime\n    j = n - 1\n    while prime[j] >= n:\n        j -= 1\n    return prime[j]\n    "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 3\n    d = 1\n    q = 3\n    while d == 1:\n        p = p + 1\n        q = q + 1\n        d = euler_function(p,q)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Create a list to store primes and convert it to a set to speed up the search\n    primes = list(range(0, n))\n    primes_set = set(primes)\n    \n    # Set up the prime number\n    if n <= 2:\n        return n\n    \n    # Check if prime\n    i = 0\n    while primes[i] < n:\n        i += 1\n        # If it is not prime, keep searching\n        if primes[i] > primes[i-1] + 2:\n            # Check if the prime number is in the set already\n            if primes[i] in primes_set:\n                continue\n            primes_set.add(primes[i])\n            # Calculate next prime number\n            for j in range(i, n):\n                if primes[j] == primes[i-1] + 2:\n                    primes_set.add(primes[j])\n                    break\n        \n    return primes[i-1]\n    \nprint(newman_prime(10001))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (tuple(map(lambda x: x / test_tup2[0], test_tup1)))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tuple = ()\n    try:\n        result_tuple = (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n    except ZeroDivisionError:\n        print('''Cannot divide by zero!''')\n        return ()\n    except TypeError:\n        print('''Unable to perform division on non-numerical type!''')\n        return ()\n    return result_tuple\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Both tuples need to have same number of elements')\n        return\n    else:\n        tup1_list = list(test_tup1)\n        tup2_list = list(test_tup2)\n        for i in range(len(tup1_list)):\n            tup1_list[i] = tup1_list[i] / tup2_list[i]\n        return tuple(tup1_list)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0]), (test_tup1[1] / test_tup2[1])\n    \n    \n    \ndef get_product_of_n_tuples(n, test_tup):\n    '''\n    Write a function that takes in a tuple and performs the multiplication of all of its elements and then returns a tuple.\n    '''\n    return tuple(i * j for i, j in zip(test_tup, range(1, n + 1)))\n    \n    \n    \ndef sort_tuples_by_elements(test_tup):\n    '''\n    Write a function that takes in a tuple and returns a tuple with elements of the given tuple sorted in numerical order.\n    '''\n    return tuple(sorted(test_tup, key = int))\n    \n    \ndef sort_tuples_by_element(test_tup):\n    '''\n    Write a function that takes in a tuple and returns a tuple with elements of the given tuple sorted in numerical order.\n    '''\n    return tuple(sorted(test_tup))\n    \n    \ndef is_element_in_tuple(test_tup, element):\n    '''\n    Write a function that takes in a tuple and an element and returns True if the element is present in the tuple.\n    '''\n    return (element in test_tup)\n    \n    \ndef get_element_if_in_tuple(test_tup, element):\n    '''\n    Write a function that takes in a tuple and an element and returns the element if it is present in the tuple.\n    '''\n    return test_tup[0] if element in test_tup else test_tup[1]\n    \n    \ndef get_element_if_not_in_tuple(test_tup, element):\n    '''\n    Write a function that takes in a tuple and an element and returns the element if it is not present in the tuple.\n    '''\n    return test_tup[0] if element not in test_tup else test_tup[1]\n    \n    \ndef is_element_not_in_tuple(test_tup, element):\n    '''\n    Write a function that takes in a tuple and an element and returns True if the element is not present in the tuple.\n    '''\n    return (element not in test_tup)\n    \n    \ndef get_first_element_if_not_in_tuple(test_tup, element):\n    '''\n    Write a function that takes in a tuple and an element and returns the element if it is not present in the tuple.\n    '''\n    return test_tup[0] if element not in test_tup else test_tup[1]\n    \n    \ndef get_second_element_if_not_in_tuple(test_tup, element):\n    '''\n    Write a function that takes in a tuple and an element and returns the element if it is not present in the tuple.\n    '''\n    return test_tup[1] if element not in test_tup else test_tup[0]\n    \n    \ndef sum_of_two_tuples(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a tuple with their sum of elements.\n    '''\n    return tuple(sum(i) for i in zip(test_tup1, test_tup2))\n    \n    \n    \ndef elements_that_have_common_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a tuple with elements of the given tuples that have common elements.\n    '''\n    return tuple(i for i in test_tup1 if i in test_tup2)\n    \n    \ndef difference_between_two_tuples(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a tuple with their difference between elements.\n    '''\n    return tuple(i for i in test_tup1 if i not in test_tup2)\n    \n    \ndef join_tuples(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a tuple with elements of the given tuples joined together.\n    '''\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n    \n    \ndef elements_that_have_common_elements_more_than_three(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a tuple with elements of the given tuples that have common elements\n    more than three.\n    '''\n    return tuple(i for i in test_tup1 if i in test_tup2 and len(i) > 3)\n    \n    \ndef is_elements_unique(test_tup):\n    '''\n    Write a function that takes in a tuple and returns True if it is a unique tuple and False otherwise.\n    '''\n    return len(test_tup) == len(set(test_tup))\n    \n    \ndef get_three_items_with_maximum_elements(test_tup):\n    '''\n    Write a function that takes in a tuple and returns a tuple with three tuples with the maximum numbers of elements in the\n    given tuple.\n    '''\n    return tuple(sorted(test_tup, key = int, reverse = True)[0:3])\n    \n    \ndef get_three_items_with_minimum_elements(test_tup):\n    '''\n    Write a function that takes in a tuple and returns a tuple with three tuples with the minimum numbers of elements in the\n    given tuple.\n    '''\n    return tuple(sorted(test_tup, key = int)[0:3])\n    \n    \ndef is_subset(sub_tup, test_tup):\n    '''\n    Write a function that takes in two tuples and returns True if the first tuple is a subset of the second tuple and\n    False otherwise.\n    '''\n    return sub_tup <= test_tup\n    \n    \ndef is_superset(sup_tup, test_tup):\n    '''\n    Write a function that takes in two tuples and returns True if the second tuple is a superset of the first tuple and\n    False otherwise.\n    '''\n    return sup_tup >= test_tup\n    \n    \ndef is_union(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns True if the first tuple is a union of the second tuple and\n    False otherwise.\n    '''\n    return (test_tup1 | test_tup2) == (test_tup1 & test_tup2)\n    \n    \ndef is_intersection(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns True if the first tuple is an intersection of the second\n    tuple and False otherwise.\n    '''\n    return (test_tup1 & test_tup2) == (test_tup1 | test_tup2)\n    \n    \ndef get_tuple_element_index(test_tup, element):\n    '''\n    Write a function that takes in a tuple and an element and returns the index of the element in the given tuple.\n    '''\n    return test_tup.index(element)\n    \n    \ndef get_tuple_element_index_for_missing_element(test_tup, element):\n    '''\n    Write a function that takes in a tuple and an element and returns the index of the element in the given tuple.\n    '''\n    return test_tup.index(element) if element in test_tup else test_tup.index(test_tup[0])\n    \n    \ndef get_tuple_element_if_present(test_tup, element):\n    '''\n    Write a function that takes in a tuple and an element and returns the element if it is present in the given tuple.\n    '''\n    return test_tup[0] if element in test_tup else test_tu"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    ans = []\n    for i in range(len(test_tup1)):\n        ans.append(test_tup1[i] / test_tup2[i])\n    return tuple(ans)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        print(\"Different length for two tuples\")\n        return False\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] / test_tup2[i]) / (test_tup1[i] / test_tup2[i]))\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if(len(test_tup1) == len(test_tup2)):\n        return(div(test_tup1[0],test_tup1[1]), div(test_tup2[0],test_tup2[1]))\n    else:\n        raise ValueError('Length of two tuples should be the same')\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same number of elements\")\n    if (type(test_tup1[0]) is str) or (type(test_tup2[0]) is str):\n        raise TypeError(\"Elements of the tuple should be numerical\")\n    return [i/j for i,j in zip(test_tup1,test_tup2)]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    '''\n    if len(list1)%2 == 0:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)\n    else:\n        first_part = list1[:L]\n        second_part = list1[L + 1:]\n        return (first_part, second_part)\n    '''\n    if len(list1)%2 == 0:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)\n    else:\n        first_part = list1[:L]\n        second_part = list1[L + 1:]\n        return (first_part, second_part)\n    \ndef flatten(list1):\n    '''\n    Write a function that takes in a list of lists and returns a flattened list.\n    '''\n    '''\n    return(sum(list1,[]))\n    '''\n    return list(itertools.chain.from_iterable(list1))\n    \ndef is_prime(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime and False if the number is not prime.\n    '''\n    '''\n    def prime_check(number):\n        if number%2==0:\n            return False\n        for i in range(3,number):\n            if number%i==0:\n                return False\n        return True\n    '''\n    if number == 0 or number == 1:\n        return False\n    for i in range(2, int(number**0.5)+1):\n        if number%i == 0:\n            return False\n    return True\n    \ndef is_prime_v2(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime and False if the number is not prime.\n    '''\n    '''\n    def prime_check(number):\n        if number == 1:\n            return False\n        for i in range(2, int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        return True\n    '''\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5)+1):\n        if number%i == 0:\n            return False\n    return True\n    \ndef is_prime_v3(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime and False if the number is not prime.\n    '''\n    '''\n    def prime_check(number):\n        if number == 1:\n            return False\n        for i in range(2, int(number**0.5)+1):\n            if number%i == 0:\n                return False\n        return True\n    '''\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    for i in range(2, int(number**0.5)+1):\n        if number%i == 0:\n            return False\n    return True\n    \ndef sum_of_squares(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the squares of each number in the list.\n    '''\n    '''\n    def sum_of_squares(list1):\n        total = 0\n        for num in list1:\n            total += num**2\n        return(total)\n    '''\n    return sum(x**2 for x in list1)\n    \ndef sum_of_squares_v2(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the squares of each number in the list.\n    '''\n    '''\n    def sum_of_squares(list1):\n        total = 0\n        for num in list1:\n            total += num**2\n        return(total)\n    '''\n    return sum([x**2 for x in list1])\n    \ndef sum_of_squares_v3(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the squares of each number in the list.\n    '''\n    '''\n    def sum_of_squares(list1):\n        total = 0\n        for num in list1:\n            total += num**2\n        return(total)\n    '''\n    return sum([x**2 for x in list1])\n    \ndef first_last(list1):\n    '''\n    Write a function that takes in a list and returns a tuple containing the first and last elements in the list.\n    '''\n    '''\n    def first_last(list1):\n        return(list1[0], list1[-1])\n    '''\n    return (list1[0], list1[-1])\n    \ndef first_last_v2(list1):\n    '''\n    Write a function that takes in a list and returns a tuple containing the first and last elements in the list.\n    '''\n    '''\n    def first_last(list1):\n        return(list1[0], list1[-1])\n    '''\n    return (list1[0], list1[-1])\n    \ndef first_last_v3(list1):\n    '''\n    Write a function that takes in a list and returns a tuple containing the first and last elements in the list.\n    '''\n    '''\n    def first_last(list1):\n        return(list1[0], list1[-1])\n    '''\n    return (list1[0], list1[-1])\n    \ndef delete_evens(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing all of the elements from the original list except those that are even.\n    '''\n    '''\n    def delete_evens(list1):\n        new_list = []\n        for num in list1:\n            if num%2!= 0:\n                new_list.append(num)\n        return(new_list)\n    '''\n    return [x for x in list1 if x%2!= 0]\n    \ndef delete_evens_v2(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing all of the elements from the original list except those that are even.\n    '''\n    '''\n    def delete_evens(list1):\n        new_list = []\n        for num in list1:\n            if num%2!= 0:\n                new_list.append(num)\n        return(new_list)\n    '''\n    return list(filter(lambda x: x%2!= 0, list1))\n    \ndef delete_evens_v3(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing all of the elements from the original list except those that are even.\n    '''\n    '''\n    def delete_evens(list1):\n        new_list = []\n        for num in list1:\n            if num%2!= 0:\n                new_list.append(num)\n        return(new_list)\n    '''\n    return list(filter(lambda x: x%2!= 0, list1))\n    \ndef delete_all_evens(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing all of the elements from the original list except those that are even.\n    '''\n    '''\n    def delete_all_evens(list1):\n        new_list = []\n        for num in list1:\n            if num%2!= 0:\n                new_list.append(num)\n        return(new_list)\n    '''\n    return list(filter(lambda x: x%2!= 0, list1))\n    \ndef delete_all_evens_v2(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing all of the elements from the original list except those that are even.\n    '''\n    '''\n    def delete_all_evens(list1):\n        new_list = []\n        for num in list1:\n            if num%2!= 0:\n                new_list.append(num)"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) > L:\n        i = 0\n        j = L\n        return list1[:L], list1[L:]\n    else:\n        return list1, []\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a=list1[:L]\n    b=list1[L:]\n    return (a,b)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= len(list1):\n        return (list1[:L], list1[L:])\n    else:\n        raise IndexError('L must be less than or equal to the length of the list.')\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L1 = L//2\n    L2 = L - L1\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_split1 = list1[:L]\n    list1_split2 = list1[L:]\n    return (list1_split1, list1_split2)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age/7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = 17 + 4*h_age\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    age_in_years = int(h_age / 7)\n    return age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age/7\n    #Returns an integer value\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 6 * 7\n    dog_years = h_age * 7\n    return dog_years\n    \ndef human_weight(weight, height):\n    '''\n    Write a function to convert a human weight and height to their\n    corresponding dog weight and height in dog's years.\n    '''\n    dog_weight = weight / 2.2\n    dog_height = height * 0.025\n    return dog_weight, dog_height\n    \ndef human_lifespan(age, weight):\n    '''\n    Write a function to calculate a human's lifespan in dog's years.\n    '''\n    human_lifespan = 70 + 7 * age\n    return human_lifespan\n    \ndef dog_lifespan(age, weight, height):\n    '''\n    Write a function to calculate a dog's lifespan in dog's years.\n    '''\n    dog_lifespan = age + height + 7\n    return dog_lifespan\n    \ndef dog_lifespan_human(age, weight, height):\n    '''\n    Write a function to calculate a human's lifespan in dog's years.\n    '''\n    human_lifespan = age + 7 * height\n    return human_lifespan\n    \ndef print_table(table, header = None):\n    '''\n    Write a function to print a table. You can optionally pass in a list of column names\n    as the header.\n    '''\n    if header is None:\n        header = table[0]\n    widths = []\n    for h in header:\n        width = 0\n        for row in table:\n            if len(row) > 0:\n                if len(str(row[0])) > width:\n                    width = len(str(row[0]))\n        widths.append(width)\n    formatted = []\n    for row in table:\n        formatted.append([str(item).ljust(widths[i]) for i, item in enumerate(row)])\n    header.extend([\"\".ljust(widths[i]) for i, item in enumerate(header)])\n    formatted.append(header)\n    for r in formatted[1:]:\n        print(('|' + '|'.join(r))[:-1])\n        \ndef parse_command_line():\n    '''\n    Parse the command line arguments and return a tuple containing the\n    data.\n    '''\n    parser = argparse.ArgumentParser(description='Convert weights and height into dog years.')\n    parser.add_argument('--weight', type=float, help='Weight in pounds')\n    parser.add_argument('--height', type=float, help='Height in inches')\n    parser.add_argument('--human-age', type=float, help='Human age in years')\n    parser.add_argument('--human-weight', type=float, help='Human weight in pounds')\n    parser.add_argument('--dog-age', type=float, help='Dog age in years')\n    parser.add_argument('--dog-weight', type=float, help='Dog weight in pounds')\n    parser.add_argument('--dog-height', type=float, help='Dog height in inches')\n    parser.add_argument('--human-lifespan', type=float, help='Human lifespan in years')\n    parser.add_argument('--dog-lifespan', type=float, help='Dog lifespan in years')\n    parser.add_argument('--human-lifespan', type=float, help='Human lifespan in years')\n    args = parser.parse_args()\n    return args.weight, args.height, args.human_age, args.human_weight, args.dog_age, args.dog_weight, args.dog_height, args.human_lifespan, args.dog_lifespan, args.human_lifespan\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7.0\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (int(h_age) * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0,len(S),step):\n        if i+step <= len(S):\n            split_list.append(S[i:i+step])\n    return split_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    if S:\n        if len(S) % step == 0:\n            for i in range(0,len(S),step):\n                l.append(S[i:i+step])\n        else:\n            for i in range(0,len(S),step):\n                l.append(S[i:i+step])\n            l.append(S[len(S)-step:])\n    else:\n        return l\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return S[::step]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = list(S)\n    return (l[i::step] for i in range(step))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    for i in range(0, len(S), step):\n        yield S[i:i+step]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S)%step!= 0:\n        return []\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [[i] for i in S]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) <= 1:\n        return [S]\n    else:\n        if step > 0:\n            return [S[i:i+step] for i in range(0, len(S), step)]\n        else:\n            return [S[i:i+step] for i in range(len(S)-1, -1, -step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*(l-3)*0.5\n    \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def square(l):\n        return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l*l)*6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 0.5*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (3*l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 0.5*l**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*(pi**2)*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return 4*pi*r**2\ndef lateralsurfacearea_sphere(r):\n    '''\n    Write a function to find the latera"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l * 6\n    return a**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print('lateral surface = ', (6 * l * l) - (2 * l * (2 * l - 1)))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if (i % 2) == 1:\n            sum = sum + (i ** 2)\n    print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    x=1\n    sum = 0\n    while x <=n:\n        sum += (x*x)\n        x+=2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(input('Enter an integer: '))\n    odd = (n*(n+1)) / 2\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        if i%2!=0:\n            sum=sum+i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    square = 0\n    for x in range(1, n+1, 2):\n        square += x**2\n    return square\n    "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            sum += i**2\n    return sum\n    \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = 0\n    even_numbers = 0\n    while odd_numbers <= n:\n        even_numbers += odd_numbers\n        odd_numbers += 2\n    return even_numbers\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    i = 1\n    while i < n:\n        result += i**2\n        i += 2\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        num = num*10 + 1\n        count += 1\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 1\n    while (count <= n):\n        count = count * 10\n    print(count // 10)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    ans = 0\n    #ans += n\n    #ans -= n\n    #ans *= n\n    #ans /= n\n    #ans = pow(n,n)\n    ans = 1\n    for i in range(1,n+1):\n        ans = ans * i\n    return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # star_num = 1\n    # while True:\n    #     star_num = star_num + 1\n    #     if star_num >= n:\n    #         break\n    # return star_num\n    \n    return (n + 1) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 2: \n        return 1\n    return n * (n-1)//2\nprint(find_star_num(7)) # 24\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        n = n - 2\n        return find_star_num(n) + find_star_num(n)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return sum(1 for i in range(1, n+1) if i == 1 or i == 4 or i == 7 or i == 9)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    a = 1\n    if n == 1: \n        return 1\n    while n!= 1: \n        a = a*2\n        n = n -1\n    return a\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == 'a':\n        return 97\n    elif k == 'b':\n        return 98\n    elif k == 'c':\n        return 99\n    elif k == 'd':\n        return 100\n    elif k == 'e':\n        return 101\n    elif k == 'f':\n        return 102\n    elif k == 'g':\n        return 103\n    elif k == 'h':\n        return 104\n    elif k == 'i':\n        return 105\n    elif k == 'j':\n        return 106\n    elif k == 'k':\n        return 107\n    elif k == 'l':\n        return 108\n    elif k =='m':\n        return 109\n    elif k == 'n':\n        return 110\n    elif k == 'o':\n        return 111\n    elif k == 'p':\n        return 112\n    elif k == 'q':\n        return 113\n    elif k == 'r':\n        return 114\n    elif k =='s':\n        return 115\n    elif k == 't':\n        return 116\n    elif k == 'u':\n        return 117\n    elif k == 'v':\n        return 118\n    elif k == 'w':\n        return 119\n    elif k == 'x':\n        return 120\n    elif k == 'y':\n        return 121\n    elif k == 'z':\n        return 122\n    else:\n        return 'ERROR'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= ord(\"a\") and k <= ord(\"z\"):\n        return ord(chr(k)) - ord(\"a\")\n    else:\n        return ord(chr(k)) - ord(\"A\")\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k=='\\n':\n        return 10\n    elif k==' ':\n        return 32\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \n    \n    \ndef is_vowel(k):\n    '''\n    Write a function to check if a character is a vowel.\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    if k in vowels:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            count += arr[i]\n    return count\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if i%2==0:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_index_sum = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_index_sum += arr[i]\n        \n    return even_index_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    if(len(arr) == 0):\n        return 0\n    total = 0\n    \n    for i in range(0,len(arr),2):\n        total = total + arr[i]\n    \n    return total\n    \n    \ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    if(len(arr) == 0):\n        return 0\n    \n    total = 0\n    for i in range(1,len(arr),2):\n        total = total + arr[i]\n    \n    return total\n    \n    \ndef find_pairs_with_sum(arr,x):  \n    '''\n    Write a python function to find the number of pairs in an array with sum equal to 'x'.\n    '''\n    if(len(arr) == 0):\n        return 0\n    \n    pairs = 0\n    hash = {}\n    \n    for i in range(0,len(arr)):\n        if arr[i] not in hash:\n            hash[arr[i]] = 1\n        else:\n            hash[arr[i]] += 1\n    \n    for i in range(0,len(arr)):\n        if(arr[i] == x):\n            pairs += 1\n        if(x-arr[i] in hash):\n            pairs += hash[x-arr[i]]\n            \n    return pairs\n    \n    \ndef array_count_v2(arr,x):  \n    '''\n    Write a python function to count the number of occurrences of an element in an array.\n    '''\n    if(len(arr) == 0):\n        return 0\n    \n    count = 0\n    hash = {}\n    \n    for i in range(0,len(arr)):\n        if arr[i] not in hash:\n            hash[arr[i]] = 1\n        else:\n            hash[arr[i]] += 1\n    \n    for i in range(0,len(arr)):\n        if(x == arr[i]):\n            count += 1\n    \n    return count\n    \n    \ndef array_count(arr,x):  \n    '''\n    Write a python function to count the number of occurrences of an element in an array.\n    '''\n    if(len(arr) == 0):\n        return 0\n    \n    count = 0\n    hash = {}\n    \n    for i in range(0,len(arr)):\n        if arr[i] not in hash:\n            hash[arr[i]] = 1\n        else:\n            hash[arr[i]] += 1\n    \n    for i in range(0,len(arr)):\n        if(hash[arr[i]] == 1):\n            count += 1\n    \n    return count\n    \n    \ndef array_find(arr,x):  \n    '''\n    Write a python function to find the first occurrence of an element in an array.\n    '''\n    if(len(arr) == 0):\n        return -1\n    \n    for i in range(0,len(arr)):\n        if arr[i] == x:\n            return i\n    \n    return -1\n    \n    \ndef array_find_v2(arr,x):  \n    '''\n    Write a python function to find the first occurrence of an element in an array.\n    '''\n    if(len(arr) == 0):\n        return -1\n    \n    for i in range(0,len(arr)):\n        if(arr[i] == x):\n            return i\n    \n    return -1\n    \n    \ndef sum_array_v2(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if(len(arr) == 0):\n        return 0\n    \n    total = 0\n    \n    for i in range(0,len(arr)):\n        total = total + arr[i]\n    \n    return total\n    \n    \ndef sum_array(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if(len(arr) == 0):\n        return 0\n    \n    total = 0\n    \n    for i in range(0,len(arr)):\n        total = total + arr[i]\n    \n    return total\n    \n    \ndef remove_duplicates(arr):  \n    '''\n    Write a python function to remove duplicates from an array.\n    '''\n    if(len(arr) == 0):\n        return 0\n    \n    j = 0\n    while j < len(arr):\n        if arr[j] == arr[j+1]:\n            arr.pop(j+1)\n        else:\n            j += 1\n    \n    return arr\n    \n    \ndef remove_duplicates_v2(arr):  \n    '''\n    Write a python function to remove duplicates from an array.\n    '''\n    if(len(arr) == 0):\n        return 0\n    \n    j = 0\n    while j < len(arr):\n        if arr[j] == arr[j+1]:\n            arr.pop(j+1)\n        else:\n            j += 1\n    \n    return arr\n    \n    \ndef find_min_max_element(arr):  \n    '''\n    Write a python function to find the min and max elements in an array.\n    '''\n    if(len(arr) == 0):\n        return -1,-1\n    \n    min = 0\n    max = 0\n    \n    for i in range(0,len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n        if arr[i] > max:\n            max = arr[i]\n    \n    return min,max\n    \n    \ndef find_min_max_element_v2(arr):  \n    '''\n    Write a python function to find the min and max elements in an array.\n    '''\n    if(len(arr) == 0):\n        return -1,-1\n    \n    min = 0\n    max = 0\n    \n    for i in range(0,len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n        if arr[i] > max:\n            max = arr[i]\n    \n    return min,max\n    \n    \ndef find_min_max_sum_subarray(arr):  \n    '''\n    Write a python function to find the min and max sum subarray from an array.\n    '''\n    if(len(arr) == 0):\n        return -1,-1\n    \n    min = 0\n    max = 0\n    \n    for i in range(0,len(arr)):\n        if sum(arr[i:i+1]) < min:\n            min = sum(arr[i:i+1])\n        if sum(arr[i:i+1]) > max:\n            max = sum(arr[i:i+1])\n    \n    return min,max\n    \n    \ndef find_min_max_sum_subarray_v2(arr):  \n    '''\n    Write a python function to find the min and max sum subarray from an array.\n    '''\n    if(len(arr) == 0):\n        return -1,-1\n    \n    min = 0\n    max = 0\n    \n    sum1 = 0\n    for i in range(0,len(arr)):\n        sum1 = sum1 + arr[i]\n        if sum1 < min:\n            min = sum1\n        if sum1 > max:\n            max = sum1\n    \n    sum1 = 0\n    for i in range(len(arr)-1,-1,-1):\n        sum1 = sum1 + arr[i]\n        if sum1 < min:\n            min = sum1\n        if sum1 > max:\n            max = sum1\n    \n    return min,max\n    \n    \ndef find_min_max_occurence(arr,x):  \n    '''\n    Write a python function to find the count of occurrences of an element in an array.\n    '''\n    if(len(arr) == 0):\n        return 0\n    \n    count = 0\n    hash = {}\n    \n    for i in range(0,len(arr)):\n        if arr[i] not in hash:"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    odd = 0\n    even = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i]%2 == 0:\n            even += arr[i]\n        else:\n            odd += arr[i]\n    print(\"Sum of even numbers at even positions:\",even)\n    print(\"Sum of odd numbers at even positions:\",odd)\nsum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_number_sum = 0\n    for i in range(0, len(arr)):\n        if (i%2 == 0):\n            even_number_sum += arr[i]\n    return even_number_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    total = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            total = total + arr[i]\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            count = count + 1\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n            count += 1\n        else:\n            continue\n    print(sum, count)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    n = len(arr)\n    even_count = 0\n    sum_odd = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum_odd += arr[i]\n            even_count += 1\n    return sum_odd\n    \n    \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_nums = []\n    even_indices = []\n    odd_nums = []\n    odd_indices = []\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    number_list = []\n    for i in range(1, n + 1):\n        number_list.append(i * i * i * i * i)\n    sum_even = 0\n    for j in range(n):\n        if number_list[j] % 2 == 0:\n            sum_even += number_list[j]\n    return sum_even\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 0\n    while i < n:\n        i += 1\n        even = pow(i, 5)\n        print(even)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_numbers = 0\n    n = int(n)\n    if (n < 0):\n        return sum_of_even_numbers\n    if (n == 0):\n        return 0\n    for i in range(1,n+1):\n        if (i % 2 == 0):\n            sum_of_even_numbers = sum_of_even_numbers + pow(i, 5)\n    return sum_of_even_numbers\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n > 0:\n        print(even_Power_Sum(n - 1))\n        return (n * (n + 1) / 2)\n    else:\n        print(\"Please enter a positive integer!\")\n        "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # even_nums = []\n    # for i in range(1, n + 1):\n    #     if i % 2 == 0:\n    #         even_nums.append(i ** 5)\n    # return sum(even_nums)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    p = 0\n    i = 1\n    while i<=n:\n        p += i**5\n        i += 2\n    return p\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum=0\n    i=1\n    while i<=n:\n        sum=sum+i**5\n        i=i+1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    count = 0\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # pass\n    if len(test_list) == 0:\n        return []\n    else:\n        return_list = []\n        for i in range(len(test_list)):\n            return_list.append(test_list[i][1])\n        return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for element in test_list:\n        output.append(element[1])\n    return output\n    \nprint(rear_extract(test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for x in test_list:\n        x = x[1]\n        new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    res = []\n    for t in test_list:\n        res.append(t[-1])\n    return res\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output_list = []\n    for i in range(len(test_list)):\n        output_list.append(test_list[i][-1])\n    return output_list\n    \n    #print(rear_extract([(10,20),(30,40),(50,60)]))\n    #pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] - test_tup2[i], )\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        for index in range(len(test_tup1)):\n            test_tup1[index] -= test_tup2[index]\n    else:\n        for index in range(len(test_tup2)):\n            test_tup1[index] -= test_tup2[index]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_sub = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_sub = test_sub + (test_tup1[i] - test_tup2[i],)\n    else:\n        return (\"Error: List lengths not the same\")\n    return test_sub\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0:len(test_tup1)] + (tuple(map(lambda x, y: x - y, test_tup1[0:len(test_tup1)], test_tup2)))\n    #return test_tup1[0:len(test_tup1)] + tuple(map(lambda x, y: x - y, test_tup1[0:len(test_tup1)], test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for x, y in zip(test_tup1, test_tup2):\n        result = result + (x - y,)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    temp_list = []\n    if len(test_tup1) < len(test_tup2):\n        for i in range(len(test_tup1)):\n            temp_list.append(test_tup1[i])\n            for j in range(len(test_tup2)):\n                temp_list.append(test_tup2[j])\n    else:\n        for i in range(len(test_tup2)):\n            temp_list.append(test_tup2[i])\n            for j in range(len(test_tup1)):\n                temp_list.append(test_tup1[j])\n    return temp_list\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    count = 0\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    while count < len(test_tup1):\n        test_tup1[count] = int(test_tup1[count]) - int(test_tup2[count])\n        count += 1\n    return tuple(test_tup1)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0:len(test_tup1)] + tuple([test_tup1[i]-test_tup2[i] for i in range(len(test_tup1))]))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    lst = []\n    for i in range(len(test_tup1)):\n        lst.append(test_tup1[i] - test_tup2[i])\n    return tuple(lst)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Initialize an empty list\n    sum_even_Coeff = []\n    \n    #Make the sum of even index binomial coefficients.\n    for i in range(1,n+1): \n        even_binomial_Coeff_Sum = 0\n        for j in range(i):\n            even_binomial_Coeff_Sum += (j+1) * (n+j)\n        sum_even_Coeff.append(even_binomial_Coeff_Sum)\n    print(sum_even_Coeff)\n    \n    #Return sum of all even index binomial coefficients\n    return sum_even_Coeff\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        if i%2==0:\n            sum += (math.factorial(n) / math.factorial(i) / math.factorial((n-i)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_list = []\n    even_index_binomial_coeffs = binomial_coefficient(n,2)\n    for i in range(n+1):\n        sum_list.append(even_index_binomial_coeffs[i])\n    return sum(sum_list)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    x = 0\n    while(x < n):\n        sum = sum + binomial_coeff_sum(x)\n        x = x + 2\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            Sum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n    return Sum\n    '''\n    >>> even_binomial_Coeff_Sum(2)\n    6\n    >>> even_binomial_Coeff_Sum(3)\n    15\n    >>> even_binomial_Coeff_Sum(4)\n    60\n    >>> even_binomial_Coeff_Sum(5)\n    210\n    >>> even_binomial_Coeff_Sum(6)\n    840\n    >>> even_binomial_Coeff_Sum(7)\n    3414\n    >>> even_binomial_Coeff_Sum(8)\n    23214\n    >>> even_binomial_Coeff_Sum(9)\n    57048\n    >>> even_binomial_Coeff_Sum(10)\n    570240\n    >>> even_binomial_Coeff_Sum(11)\n    570720\n    >>> even_binomial_Coeff_Sum(12)\n    5704800\n    >>> even_binomial_Coeff_Sum(13)\n    57048000\n    '''\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    res = 0\n    if(n>0):\n        for i in range(0,n+1):\n            res = res + pow(2,i)\n    else:\n        res = 0\n    return res\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if n==1:\n        return 1\n    return 2*even_binomial_Coeff_Sum(n-1) - even_binomial_Coeff_Sum(n-2)\ndef even_binomial_Coeff_Sum_for_Square(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients for a square of side n.\n    '''\n    if n==1:\n        return 1\n    return 2*even_binomial_Coeff_Sum_for_Square(n-1) - even_binomial_Coeff_Sum_for_Square(n-2)\ndef get_nth_order_binomial_coefficient_n(order,n):\n    '''\n    Write a python function that takes in a positive integer order and a positive integer n and calculates the nth order binomial coefficient.\n    '''\n    if order==1:\n        return 1\n    return (n+1)*get_nth_order_binomial_coefficient_n(order-1,n-1)\ndef get_nth_order_binomial_coefficient(order,n):\n    '''\n    Write a python function that takes in a positive integer order and a positive integer n and calculates the nth order binomial coefficient.\n    '''\n    return get_nth_order_binomial_coefficient_n(order,n) / math.factorial(n)\ndef get_nth_order_binomial_coefficient_for_square(order,n):\n    '''\n    Write a python function that takes in a positive integer order and a positive integer n and calculates the nth order binomial coefficient for a square of side n.\n    '''\n    if order==1:\n        return 1\n    return (n+1)*get_nth_order_binomial_coefficient_for_square(order-1,n-1) / math.factorial(n)\ndef binomial_coefficient_in_Sqrt(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the binomial coefficient in a square of side n.\n    '''\n    if n==1:\n        return 1\n    return (get_nth_order_binomial_coefficient_for_square(n,n) / math.factorial(n)) ** 0.5\ndef binomial_coefficient_in_Sqrt_for_Square(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the binomial coefficient in a square of side n.\n    '''\n    if n==1:\n        return 1\n    return (get_nth_order_binomial_coefficient_for_square(n,n) / math.factorial(n)) ** 0.5\ndef factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and calculates the factorial.\n    '''\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef factorial_of_n(n):\n    '''\n    Write a python function that takes in a positive integer n and calculates the factorial of n.\n    '''\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef factorial_of_n_for_square(n):\n    '''\n    Write a python function that takes in a positive integer n and calculates the factorial of n.\n    '''\n    if n==0:\n        return 1\n    return n*factorial_of_n_for_square(n-1)\ndef get_factorial(n):\n    if n==0:\n        return 1\n    return n*get_factorial(n-1)\ndef get_factorial_of_n(n):\n    if n==0:\n        return 1\n    return n*get_factorial_of_n(n-1)\ndef get_factorial_of_n_for_square(n):\n    if n==0:\n        return 1\n    return n*get_factorial_of_n_for_square(n-1)\ndef factorial_of_n_squared(n):\n    if n==0:\n        return 1\n    return n*factorial_of_n_squared(n-1)\ndef factorial_of_n_squared_for_square(n):\n    if n==0:\n        return 1\n    return n*factorial_of_n_squared_for_square(n-1)\ndef get_binomial_coefficient(order, n, k):\n    '''\n    Write a python function that takes in a positive integer order, a positive integer n, and a positive integer k and finds the binomial coefficient.\n    '''\n    if order==1:\n        return k\n    return get_binomial_coefficient(order-1,n,k) + get_binomial_coefficient(order-1,n,k-1)\ndef get_binomial_coefficient_for_square(order,n,k):\n    '''\n    Write a python function that takes in a positive integer order, a positive integer n, and a positive integer k and finds the binomial coefficient.\n    '''\n    if order==1:\n        return k\n    return get_binomial_coefficient_for_square(order-1,n,k) + get_binomial_coefficient_for_square(order-1,n,k-1)\ndef get_binomial_coefficient_squared(order, n, k):\n    '''\n    Write a python function that takes in a positive integer order, a positive integer n, and a positive integer k and finds the binomial coefficient squared.\n    '''\n    if order==1:\n        return n\n    return get_binomial_coefficient_squared(order-1,n,k) + get_binomial_coefficient_squared(order-1,n,k-1)\ndef get_binomial_coefficient_squared_for_square(order,n,k):\n    '''\n    Write a python function that takes in a positive integer order, a positive integer n, and a positive integer k and finds the binomial coefficient squared.\n    '''\n    if order==1:\n        return n\n    return get_binomial_coefficient_squared_for_square(order-1,n,k) + get_binomial_coefficient_squared_for_square(order-1,n,k-1)\ndef get_binomial_coefficient_squared_for_square_given_n(n,k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and returns the binomial coefficient squared for a square of side n.\n    '''\n    if order==1:\n        return n\n    return get_binomial_coefficient_squared_for_square(order-1,n,k) + get_binomial_coefficient_squared_for_square(order-1,n,k-1)\ndef get_binomial_coefficient_squared_for_square_given_n_given_k(n,k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and returns the binomial coefficient squared for a square of side n.\n    '''\n    if order==1:\n        return n\n    return get_binomial_coefficient_squared_for_square(order-1,n,k) + get_binomial_coefficient_squared_for_square(order-1,n,k-1)\ndef get_binomial_coefficient_squared_for_square_given_n_given_k_for_square(n,k):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and returns the binomial coefficient squared for a square of side n.\n    '''\n    if order==1:\n        return n\n    return get_binomial_coefficient_squared_for_square(order-1,n,k) + get_binomial_coefficient_squared_for_square(order-1,n,k-1)\ndef get_binomial_coefficient_sum(order,n):\n    '''\n    Write a python function that takes in a positive integer order, a positive integer n and returns the binomial coefficient sum.\n    '''\n    if order==1:\n        return n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<0:\n        return 0\n    else:\n        return binomial_coefficient(n,n-2) \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += (math.factorial(n)/math.factorial(i))*(2**i)\n    return int(sum)\ndef even_binomial_Coeff_Product( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the product of even index binomial coefficients.\n    '''\n    product = 1\n    for i in range(0, n+1):\n        product *= (math.factorial(n)/math.factorial(i))*(2**i)\n    return int(product)\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += (math.factorial(n)/math.factorial(i))*(2**i)\n    return int(sum)\ndef odd_binomial_Coeff_Product( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the product of odd index binomial coefficients.\n    '''\n    product = 1\n    for i in range(0, n+1):\n        product *= (math.factorial(n)/math.factorial(i))*(2**i)\n    return int(product)\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += (math.factorial(n)/math.factorial(i))*(2**i)\n    return int(sum)\ndef odd_binomial_Coeff_Product( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the product of odd index binomial coefficients.\n    '''\n    product = 1\n    for i in range(0, n+1):\n        product *= (math.factorial(n)/math.factorial(i))*(2**i)\n    return int(product)\ndef even_binomial_Coeff_Sum( n, k): \n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and finds the sum of even index binomial coefficients of k\u2019th term in the series.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)\n    return int(sum)\ndef even_binomial_Coeff_Product( n, k): \n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and finds the product of even index binomial coefficients of k\u2019th term in the series.\n    '''\n    product = 1\n    for i in range(0, n+1):\n        product *= (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)\n    return int(product)\ndef odd_binomial_Coeff_Sum( n, k): \n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and finds the sum of odd index binomial coefficients of k\u2019th term in the series.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)\n    return int(sum)\ndef odd_binomial_Coeff_Product( n, k): \n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and finds the product of odd index binomial coefficients of k\u2019th term in the series.\n    '''\n    product = 1\n    for i in range(0, n+1):\n        product *= (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)\n    return int(product)\ndef even_binomial_Coeff_Sum( n, k, i): \n    '''\n    Write a python function that takes in a positive integer n, a positive integer k, and a nonnegative integer i and finds the sum of even index binomial coefficients of i\u2019th term in the series.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)*math.comb(i,k)\n    return int(sum)\ndef even_binomial_Coeff_Product( n, k, i): \n    '''\n    Write a python function that takes in a positive integer n, a positive integer k, and a nonnegative integer i and finds the product of even index binomial coefficients of i\u2019th term in the series.\n    '''\n    product = 1\n    for i in range(0, n+1):\n        product *= (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)*math.comb(i,k)\n    return int(product)\ndef odd_binomial_Coeff_Sum( n, k, i): \n    '''\n    Write a python function that takes in a positive integer n, a positive integer k, and a nonnegative integer i and finds the sum of odd index binomial coefficients of i\u2019th term in the series.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)*math.comb(i,k)\n    return int(sum)\ndef odd_binomial_Coeff_Product( n, k, i): \n    '''\n    Write a python function that takes in a positive integer n, a positive integer k, and a nonnegative integer i and finds the product of odd index binomial coefficients of i\u2019th term in the series.\n    '''\n    product = 1\n    for i in range(0, n+1):\n        product *= (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)*math.comb(i,k)\n    return int(product)\ndef even_binomial_Coeff_Sum( n, k, i, j): \n    '''\n    Write a python function that takes in a positive integer n, a positive integer k, and a nonnegative integer i, j and finds the sum of even index binomial coefficients of k\u2019th and j\u2019th term in the series.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        for j in range(0, n+1):\n            sum += (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)*math.comb(i,k)*(2**j)*((j+k)%2)\n    return int(sum)\ndef even_binomial_Coeff_Product( n, k, i, j): \n    '''\n    Write a python function that takes in a positive integer n, a positive integer k, and a nonnegative integer i, j and finds the product of even index binomial coefficients of k\u2019th and j\u2019th term in the series.\n    '''\n    product = 1\n    for i in range(0, n+1):\n        for j in range(0, n+1):\n            product *= (math.factorial(n)/math.factorial(i))*(2**i)*((k+i)%2)*math.comb(i,k)*(2**j)*((j+k)%2)\n    return int(product)\ndef odd_binomial_Coeff_Sum( n, k, i, j): \n    '''\n    Write a python function that takes in a positive integer n, a positive integer k, and a nonnegative integer i, j and finds the su"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n==0 or n==1):\n        return n\n    else:\n        return (n*(n-2))//2\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159*(r**2)*h)\n    return volume\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = (pi * r**2 * h)\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the surface area of the sphere.\n    '''\n    from math import pi\n    volume = (4/3 * pi * r**3)\n    return volume\n    \ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the volume.\n    '''\n    from math import pi\n    volume = (pi * r**2 * h) + (4/3 * pi * r * h)\n    return volume\n    \ndef volume_pyramid(a,h):\n    '''\n    Write a function that takes in the base and height of a pyramid and returns the volume.\n    '''\n    from math import pi\n    volume = (a * h) + ((a * h)/3) + (pi * a * h)\n    return volume\n    \ndef volume_pyramid_iso(a,h,b):\n    '''\n    Write a function that takes in the base and height of a pyramid and returns the volume.\n    '''\n    from math import pi\n    volume = (a * h) + ((a * h)/3) + (pi * a * h) + (b * (h + (a/b)))\n    return volume\n    \ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the volume.\n    '''\n    from math import pi\n    volume = (pi * r**2 * h) + (2 * pi * r * h)\n    return volume\n    \ndef volume_cone_sphere(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the volume.\n    '''\n    from math import pi\n    volume = (pi * r**2 * h) + (4/3 * pi * r * h)\n    return volume\n    \ndef volume_cone_cylinder_iso(r,h,b):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the volume.\n    '''\n    from math import pi\n    volume = (pi * r**2 * h) + (2 * pi * r * h) + (4/3 * pi * r * h) + (b * (pi * r**2 * h))\n    return volume\n    \ndef volume_cone_sphere_iso(r,h,b):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the volume.\n    '''\n    from math import pi\n    volume = (pi * r**2 * h) + (4/3 * pi * r * h) + (2 * pi * r * h) + (b * (h + (pi * r**2 * h)))\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = math.pi\n    volume = (pi*(r**2)*h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    if r > 0 and h > 0:\n        return (3/3)*3.14*r**2*h\n    else:\n        raise ValueError('Radius and Height must be greater than 0')\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*r*h\nprint(volume_cylinder(5,10))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V= (math.pi * r**2 * h)\n    print(V)\nvolume_cylinder(3,4)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    radius=int(r)\n    height=int(h)\n    return 3.14*radius**2*height\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14159265\n    volume=(4/3)*pi*r**3\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = math.pi\n    return pi*(r**2)*h\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_new = {}\n    for key,value in dict.items():\n        if value>=n:\n            dict_new[key]=value\n    return dict_new\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {k:v for k,v in dict.items() if v >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key in dict:\n        if dict[key]>=n:\n            new_dict[key]=dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.keys() if dict.values() >= n else 0\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, val in dict.items():\n        if val >= n:\n            new_dict.update({key: val})\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    final = {}\n    for i,j in dict.items():\n        if j >= n:\n            final[i] = j\n    return final\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict.keys():\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filter_dict[key] = value\n    return filter_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(min(test_tup))+1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup) - test_tup.index(test_tup[0])\n    \ndef count_first_elements_comprehension(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup) - len([i for i in test_tup if i == test_tup[0]])\n    \n    \ndef count_first_elements_recursive(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def helper(test_tup, result):\n        if len(test_tup) == 0:\n            return result\n        if test_tup[0] == test_tup[-1]:\n            return result + 1\n        return helper(test_tup[1:], result + 1)\n    return helper(test_tup, 0)\n    \nif __name__ == '__main__':\n    #Test\n    test_tup = (1, 2, 3, 4, 5)\n    assert count_first_elements(test_tup) == 5\n    \n    test_tup = (1, 2, 3, 4, 5)\n    assert count_first_elements_comprehension(test_tup) == 5\n    \n    test_tup = (1, 2, 3, 4, 5)\n    assert count_first_elements_recursive(test_tup) == 5\n    \n    test_tup = (3, 2, 5, 2, 1, 3, 7, 4, 3, 2, 3)\n    assert count_first_elements(test_tup) == 7\n    \n    test_tup = (3, 2, 5, 2, 1, 3, 7, 4, 3, 2, 3)\n    assert count_first_elements_comprehension(test_tup) == 7\n    \n    test_tup = (3, 2, 5, 2, 1, 3, 7, 4, 3, 2, 3)\n    assert count_first_elements_recursive(test_tup) == 7\n    \n    #Test 2\n    test_tup = (4, 5, 6, 2, 1, 3, 7, 3, 2, 3)\n    assert count_first_elements(test_tup) == 4\n    \n    test_tup = (4, 5, 6, 2, 1, 3, 7, 3, 2, 3)\n    assert count_first_elements_comprehension(test_tup) == 4\n    \n    test_tup = (4, 5, 6, 2, 1, 3, 7, 3, 2, 3)\n    assert count_first_elements_recursive(test_tup) == 4\n    \n    #Test 3\n    test_tup = (4, 5, 6, 2, 1, 3, 7, 3, 2, 3, 1, 2, 1, 4)\n    assert count_first_elements(test_tup) == 6\n    \n    test_tup = (4, 5, 6, 2, 1, 3, 7, 3, 2, 3, 1, 2, 1, 4)\n    assert count_first_elements_comprehension(test_tup) == 6\n    \n    test_tup = (4, 5, 6, 2, 1, 3, 7, 3, 2, 3, 1, 2, 1, 4)\n    assert count_first_elements_recursive(test_tup) == 6\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(min(test_tup)) + 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in test_tup:\n        if test_tup.index(i) == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i):\n            if test_tup[i] < test_tup[j]:\n                count += 1\n        if test_tup[i] == test_tup[j]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        raise ValueError(\"Please provide a tuple\")\n    if len(test_tup) == 1:\n        return 0\n    counter = 0\n    for i in range(0, len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(min(test_tup))+1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 1\n    else:\n        return (count_first_elements(test_tup[1:]) + 1)\n    \ndef count_occurrences(test_tup):\n    '''\n    Write a function to find the number of occurrences of each item in a tuple.\n    '''\n    if len(test_tup) == 1:\n        return 1\n    else:\n        return (test_tup[0], count_occurrences(test_tup[1:]))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for x in range(len(test_tup)):\n        if test_tup[x] < test_tup[count]:\n            count = x\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0,len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 0\n    for i in range(n):\n        dec_num += (i+1)**2\n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    return int(((1 + sqrt(1 + 24*n))/6)**2)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n*(n+1)//2)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    m = 1\n    \n    while m <= n:\n        yield (m * (m + 1) // 2)\n        m += 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (pow(3, n)) - 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return n * (n * (n + 1) / 2)\n    \nprint(is_num_decagonal(0))\nprint(is_num_decagonal(1))\nprint(is_num_decagonal(2))\nprint(is_num_decagonal(3))\nprint(is_num_decagonal(4))\nprint(is_num_decagonal(5))\nprint(is_num_decagonal(6))\nprint(is_num_decagonal(7))\nprint(is_num_decagonal(8))\nprint(is_num_decagonal(9))\nprint(is_num_decagonal(10))\nprint(is_num_decagonal(11))\nprint(is_num_decagonal(12))\nprint(is_num_decagonal(13))\nprint(is_num_decagonal(14))\nprint(is_num_decagonal(15))\nprint(is_num_decagonal(16))\nprint(is_num_decagonal(17))\nprint(is_num_decagonal(18))\nprint(is_num_decagonal(19))\nprint(is_num_decagonal(20))\nprint(is_num_decagonal(21))\nprint(is_num_decagonal(22))\nprint(is_num_decagonal(23))\nprint(is_num_decagonal(24))\nprint(is_num_decagonal(25))\nprint(is_num_decagonal(26))\nprint(is_num_decagonal(27))\nprint(is_num_decagonal(28))\nprint(is_num_decagonal(29))\nprint(is_num_decagonal(30))\nprint(is_num_decagonal(31))\nprint(is_num_decagonal(32))\nprint(is_num_decagonal(33))\nprint(is_num_decagonal(34))\nprint(is_num_decagonal(35))\nprint(is_num_decagonal(36))\nprint(is_num_decagonal(37))\nprint(is_num_decagonal(38))\nprint(is_num_decagonal(39))\nprint(is_num_decagonal(40))\nprint(is_num_decagonal(41))\nprint(is_num_decagonal(42))\nprint(is_num_decagonal(43))\nprint(is_num_decagonal(44))\nprint(is_num_decagonal(45))\nprint(is_num_decagonal(46))\nprint(is_num_decagonal(47))\nprint(is_num_decagonal(48))\nprint(is_num_decagonal(49))\nprint(is_num_decagonal(50))\nprint(is_num_decagonal(51))\nprint(is_num_decagonal(52))\nprint(is_num_decagonal(53))\nprint(is_num_decagonal(54))\nprint(is_num_decagonal(55))\nprint(is_num_decagonal(56))\nprint(is_num_decagonal(57))\nprint(is_num_decagonal(58))\nprint(is_num_decagonal(59))\nprint(is_num_decagonal(60))\nprint(is_num_decagonal(61))\nprint(is_num_decagonal(62))\nprint(is_num_decagonal(63))\nprint(is_num_decagonal(64))\nprint(is_num_decagonal(65))\nprint(is_num_decagonal(66))\nprint(is_num_decagonal(67))\nprint(is_num_decagonal(68))\nprint(is_num_decagonal(69))\nprint(is_num_decagonal(70))\nprint(is_num_decagonal(71))\nprint(is_num_decagonal(72))\nprint(is_num_decagonal(73))\nprint(is_num_decagonal(74))\nprint(is_num_decagonal(75))\nprint(is_num_decagonal(76))\nprint(is_num_decagonal(77))\nprint(is_num_decagonal(78))\nprint(is_num_decagonal(79))\nprint(is_num_decagonal(80))\nprint(is_num_decagonal(81))\nprint(is_num_decagonal(82))\nprint(is_num_decagonal(83))\nprint(is_num_decagonal(84))\nprint(is_num_decagonal(85))\nprint(is_num_decagonal(86))\nprint(is_num_decagonal(87))\nprint(is_num_decagonal(88))\nprint(is_num_decagonal(89))\nprint(is_num_decagonal(90))\nprint(is_num_decagonal(91))\nprint(is_num_decagonal(92))\nprint(is_num_decagonal(93))\nprint(is_num_decagonal(94))\nprint(is_num_decagonal(95))\nprint(is_num_decagonal(96))\nprint(is_num_decagonal(97))\nprint(is_num_decagonal(98))\nprint(is_num_decagonal(99))\nprint(is_num_decagonal(100))\nprint(is_num_decagonal(101))\nprint(is_num_decagonal(102))\nprint(is_num_decagonal(103))\nprint(is_num_decagonal(104))\nprint(is_num_decagonal(105))\nprint(is_num_decagonal(106))\nprint(is_num_decagonal(107))\nprint(is_num_decagonal(108))\nprint(is_num_decagonal(109))\nprint(is_num_decagonal(110))\nprint(is_num_decagonal(111))\nprint(is_num_decagonal(112))\nprint(is_num_decagonal(113))\nprint(is_num_decagonal(114))\nprint(is_num_decagonal(115))\nprint(is_num_decagonal(116))\nprint(is_num_decagonal(117))\nprint(is_num_decagonal(118))\nprint(is_num_decagonal(119))\nprint(is_num_decagonal(120))\nprint(is_num_decagonal(121))\nprint(is_num_decagonal(122))\nprint(is_num_decagonal(123))\nprint(is_num_decagonal(124))\nprint(is_num_decagonal(125))\nprint(is_num_decagonal(126))\nprint(is_num_decagonal(127))\nprint(is_num_decagonal(128))\nprint(is_num_decagonal(129))\nprint(is_num_decagonal(130))\nprint(is_num_decagonal(131))\nprint(is_num_decagonal(132))\nprint(is_num_decagonal(133))\nprint(is_num_decagonal(134))\nprint(is_num_decagonal(135))\nprint(is_num_decagonal(136))\nprint(is_num_decagonal(137))\nprint(is_num_decagonal(138))\nprint(is_num_decagonal(139))\nprint(is_num_decagonal(140))\nprint(is_num_decagonal(141))\nprint(is_num_decagonal(142))\nprint(is_num_decagonal(143))\nprint(is_num_decagonal(144))\nprint(is_num_decagonal(145))\nprint(is_num_decagonal(146))\nprint(is_num_decagonal(147))\nprint(is_num_decagonal(148))\nprint(is_num_decagonal(149))\nprint(is_num_decagonal(150))\nprint(is_num_decagonal(151))\nprint(is_num_decagonal(152))\nprint(is_num_decagonal(153))\nprint(is_num_decagonal(154))\nprint(is_num_decagonal(155))\nprint(is_num_decagonal(156))\nprint(is_num_decagonal(157))\nprint(is_num_decagonal(158))\nprint(is_num_decagonal(159))\nprint(is_num_decagonal(160))\nprint(is_num_decagonal(161))\nprint(is_num_de"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    number = 1\n    decagonal = 0\n    while decagonal < n:\n        decagonal = number * (number + 1) // 2\n        if decagonal == n:\n            return number\n        number += 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #Decagonal number is n * (n + 1)\n    if n < 1:\n        return\n    dec_num = n * (n + 1)\n    while n > 0:\n        n -= 1\n        dec_num = dec_num - 1\n        if dec_num == 0:\n            return dec_num + 1\n    return dec_num + 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return 1\n    n -= 1\n    sum = 0\n    i = 0\n    while i < n:\n        sum += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #decagonal_numbers = []\n    #for i in range(1, n+1):\n    #    decagonal_numbers.append(i*(i+1)//2)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    # if the value is not in the list\n    if dlist == None:\n        return (False, -1)\n    # else iterate over the array\n    else:\n        i = 0\n        # while i < len(dlist)\n        while i < len(dlist):\n            if dlist[i] == item:\n                return (True, i)\n            # else increment i\n            else:\n                i += 1\n        # if i is not equal to the length of the list\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = 0\n    while position < len(dlist) and not found:\n        if dlist[position] == item:\n            found = True\n        else:\n            position = position + 1\n    return found, position\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # set1=set()\n    # set1=list(set1)\n    # print(set1)\n    # print(list(set1))\n    # print(type(set1))\n    # print(type(list(set1)))\n    # print(len(set1))\n    # print(len(list(set1)))\n    # return len(set1)==len(list(set1))\n    if len(test_list)==len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_set = set(test_list)\n    return len(list_set) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = set(test_list)\n    if len(test_list) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\nprint(all_unique([]))\nprint(all_unique([1,2,3,4,5]))\nprint(all_unique([1,2,3,4,5,4]))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list = []\n    for i in test_list:\n        if i in list:\n            return False\n        else:\n            list.append(i)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i,j in zip(nums1,nums2):\n        i-=j\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    newList = []\n    for i in range(len(nums1)):\n        newList.append(nums1[i]-nums2[i])\n    return newList\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x, y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1)-set(nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    if len(nums1) < len(nums2):\n        res = nums1\n    else:\n        res = nums2\n    for i in range(len(res)):\n        res[i] = nums1[i] - nums2[i]\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    diff = []\n    for i in range(len(nums1)):\n        diff.append(nums1[i]-nums2[i])\n    return diff\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for x in range(len(nums1)):\n        sub.append(nums1[x] - nums2[x])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Solution 1\n    nums1.extend(nums2)\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    nums1 = list(nums1)\n    nums2 = list(nums2)\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #your code here\n    l=[]\n    for i in str(n):\n        l.append(i)\n    for i in l:\n        if l.count(i)>=i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def countFrequency(n): \n        if n < 10: \n            return 1\n        \n        count = 1\n        while n > 0: \n            n = n // 10\n            count += 1\n            \n        return count\n        \n    if n == 0: \n        return False\n    \n    count = countFrequency(n)\n    if count > n:\n        return False\n        \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_frequency = {}\n    \n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n    \n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    for i in range(0, 10):\n        digit_frequency[i] = 0\n        \n    for i in range(0, n):\n        if n == 0:\n            return True\n        else:\n            digit = n % 10\n            digit_frequency[digit] += 1\n            n = n // 10\n            \n    for k,v in digit_frequency.items():\n        if v > k:\n            return False\n    \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    digits = str(n)\n    freq = {str(i):0 for i in range(10)}\n    for i in digits:\n        freq[i] += 1\n    return True if freq[str(n)] <= len(digits) else False\n    \n    \n    \n    \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) == int:\n        return validator(n)\n    else:\n        print(\"Invalid input. Please enter an integer.\")\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #count = 0\n    #for i in range(len(str(n))):\n    #    count += 1\n    #    if count > int(n):\n    #        print(f'Your number {n} is not valid!')\n    #        return \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # code here \n    res = {}\n    for x in str(n):\n        if x not in res.keys():\n            res[x] = 1\n        else:\n            res[x] += 1\n    \n    for x in res:\n        if x > res[x]:\n            return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int or n < 0:\n        raise ValueError(\"N is not of type integer\")\n    \n    count = {}\n    for i in range(1,10):\n        count[i] = 0\n    \n    while n > 0:\n        count[n%10] += 1\n        n = n//10\n    \n    for i in range(1,10):\n        if count[i] > i:\n            return False\n    \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    count = 0\n    for i in n:\n        if int(i) <= int(i):\n            count += 1\n    if count == len(n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    res = \"\"\n    if n <= 0:\n        return res\n    for i in str(n):\n        res += str(int(i)**2)\n    if int(res) == n:\n        return res\n    return \"not a perfect number\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list == list[::-1]\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    result = False\n    if len(list) == 0:\n        result = False\n    for item in list:\n        if item == element:\n            result = True\n    return result\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    found = False\n    count = 0\n    for x in list:\n        if x == element:\n            count += 1\n    if count == len(list):\n        found = True\n    return found\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list == element\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return True if element not in list else False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list.count(element) == len(list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.find('bba')!= -1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #.{2,3}\n    if re.search(\"a.b\", text) and re.search(\"a.b\", text) and re.search(\"a.b\", text):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab+|ab*')\n    result = pattern.search(text)\n    if result:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_match = re.search('a(b)+', text)\n    return text_match.group()\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.findall(r'ab{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('a+b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #numbers = re.findall(r'\\d+', text)\n    #print(numbers)\n    #for number in numbers:\n    #    print(number)\n    #    print(int(number))\n    #return int(numbers)\n    #return re.findall(r'\\d+', text)\n    return text.count('a') >= 2\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r\"(ab){2,3}\")\n    result = pattern.findall(text)\n    print(result)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text == None:\n        return None\n    if type(text) == str:\n        if re.search(r'a.b.b.b|a.b.b.b|a.b.b',text):\n            return True\n        else:\n            return False\n    else:\n        return None\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return len(re.findall(r\"ab+|ab*\", text))>0\nprint(text_match_two_three(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababaabbbabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababZ?\\n')\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    summ = 0\n    max_sum = float('-inf')\n    for i in range(n): \n        summ += a[i] \n        if summ > max_sum: \n            max_sum = summ \n        if summ < 0: \n            summ = 0\n    return max_sum \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Using Kadane's Algorithm\n    max_sum = 0\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s < k:\n            continue\n        elif s == k:\n            max_sum = max(max_sum, s)\n            s = 0\n        else:\n            s = s - a[i]\n            s += a[i]\n            if s >= k:\n                continue\n            else:\n                max_sum = max(max_sum, s)\n                s = 0\n    print(max_sum)\n    # using sorting\n    # sorted_arr = sorted(a, reverse=True)\n    # if sorted_arr[0] == 0 and sorted_arr[1] == 0:\n    #     return 0\n    # for i in range(k):\n    #     if sorted_arr[0] == 0:\n    #         return 0\n    #     if sorted_arr[i] == 0:\n    #         continue\n    #     else:\n    #         return sorted_arr[i]\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(k):\n            max_sum = max(max_sum, a[i])\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    print(\"INPUT:\")\n    print(a)\n    print(n)\n    print(k)\n    print(\"------\")\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(0, n, k):\n        sum += a[i]\n        max_sum = max(sum, max_sum)\n        sum -= a[i]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Define some variables for the first iteration\n    max_sum = a[0]\n    max_sum_index = 0\n    current_sum = 0\n    # Define a two dimensional array\n    d = [[0] * (k+1) for i in range(n)]\n    for i in range(1, n):\n        # First condition for the current sum\n        if a[i] >= current_sum:\n            current_sum = a[i]\n            d[i][1] = 1\n            max_sum = current_sum\n        else:\n            current_sum = a[i] + d[i-1][current_sum - a[i]]\n            d[i][current_sum] = 1\n            max_sum = max(max_sum, current_sum)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Base condition \n    if n == 0 or k == 0: \n        return 0\n    if k == 1: \n        return max(a) \n    if n == 1: \n        return max(a[0], a[1])\n    \n    # To store the previous sum \n    prev = a[0] \n    max_sum = a[0] \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1\n    num_repeats = 1\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += a[i]\n        if temp_sum == k:\n            num_repeats += 1\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        if temp_sum < 0:\n            temp_sum = 0\n    if max_sum < 0:\n        max_sum = -1\n    return max_sum, num_repeats\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n==0 or k==0:\n        return 0\n    max_sum_so_far = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum > max_sum_so_far:\n            max_sum_so_far = curr_sum\n        if curr_sum <= 0:\n            curr_sum = 0\n    \n    for i in range(n):\n        if i >= k:\n            curr_sum -= a[i-k]\n        curr_sum += a[i]\n        if curr_sum > max_sum_so_far:\n            max_sum_so_far = curr_sum\n        if curr_sum <= 0:\n            curr_sum = 0\n    return max_sum_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    You can start from the first element to find a sum. \n    Use two pointers, one for the left pointer and another for the right pointer.\n    '''\n    left = 0\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        while current_sum > k:\n            current_sum -= a[left]\n            left += 1\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(n) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        if(i%2 == 0):\n            sum_of_squares = sum_of_squares + (i**2)\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        sum += (i*i)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i%2 == 0):\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0 \n    for i in range(n):\n        if i % 2 == 0:\n            sum_squares += i * i\n    return sum_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    # Declare a list with the even numbers\n    even_nums = list(range(2,n+1,2))\n    \n    # Declare an empty sum\n    sum_of_even_sq = 0\n    \n    # Iterate through the even_nums list\n    for i in even_nums:\n        sum_of_even_sq = sum_of_even_sq + (i**2)\n        \n    # Return the sum\n    return sum_of_even_sq\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    if n < 1:\n        return 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # x = 1\n    # while x <= n:\n    #     print(x)\n    #     x += 1\n    # print(x)\n    # return x\n    return sum([x**2 for x in range(1,n+1) if x%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(n):\n        if i%2==0:\n            even_sum += i**2\n    return even_sum\nsquare_Sum(4)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for list in list1:\n        if len(list) > max_length:\n            max_length = len(list)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lst = []\n    for i in list1:\n        if len(i) > len(max_lst):\n            max_lst = i\n    return max_lst\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for row in list1:\n        if len(row) > max_len:\n            max_len = len(row)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    count = 0\n    for item in list1:\n        if len(item) > count:\n            count = len(item)\n    return count\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len,list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    for num in list1:\n        if max_len < len(num):\n            max_len = len(num)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    \n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len,list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            max_index = i\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    n = 0\n    m = 0\n    for i in list1:\n        if len(i) > n:\n            n = len(i)\n    for i in list1:\n        if len(i) == n:\n            m += 1\n    print(m)\nmax_length(list1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # dp = [[1] + [0] * n for _ in range(k)]\n    # for i in range(1, k):\n    #     for j in range(1, n):\n    #         dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    # return dp[-1][-1]\n    return bin(factorial(n + k - 2)).count('1') % (10**9 + 7)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    '''\n    2^n - 1 states\n    '''\n    n = int(n)\n    # 2^n - 1\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 or j == 1:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = i\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    # print(dp)\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # dp[i][j] = count of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    # edge case for corner cases, and not enough colors.\n    if n == 1 and k == 1:\n        return 1\n    if n == 1 and k > 1:\n        return 0\n    if n == 0 and k > 1:\n        return 0\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][1] = 1\n    for j in range(k+1):\n        dp[1][j] = 1\n    for i in range(2,n+1):\n        for j in range(2,k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def dfs(n, k, p, memo):\n        if n == 1:\n            return 1\n        if n == 2:\n            if k == 1:\n                return 1\n            else:\n                return 2\n        if n == 3:\n            if k == 1:\n                return 2\n            else:\n                return 3\n        if (n, k) in memo:\n            return memo[(n, k)]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1): \n        for j in range(k+1): \n            if i == 0 or j == 0: \n                dp[i][j] = 1\n            elif j == 1: \n                dp[i][j] = i \n            elif j > 1: \n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j] \n    return dp[n][k] \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def ways_helper(color, dp):\n        if color in dp:\n            return dp[color]\n        if color == 0:\n            return 1\n        elif color == 1:\n            return 2\n        else:\n            dp[color] = ways_helper(color - 1, dp) + ways_helper(color - 2, dp) + ways_helper(color - 3, dp)\n            return dp[color]\n    return ways_helper(k, {})\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case: 1 way to paint n posts, k colors\n    if n == 0 or k == 0:\n        return 1\n    # case: paint k colors and paint k-1 colors\n    # case: paint k colors and paint k-2 colors\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Count the ways of painting with n and k\n    # Base case: 1 way to paint 1 post and 1 way to paint 2 posts\n    if n == 1:\n        if k == 1:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    cnt = 0\n    if n == 0 and k == 1:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) / 2\n    if k == 3:\n        return n * (n - 1) * (n - 2) / 6\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return 1 if n == 0 else count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k+1)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n < m:\n        temp = n\n        n = m\n        m = temp\n        \n    if n % m == 0:\n        return m\n    else:\n        while m!= 1:\n            if m == 1:\n                return n\n            else:\n                n = n - m\n                if n < m:\n                    return n\n                else:\n                    return n % m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # code here\n    \n    quotient = n // m\n    print(quotient)\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Integer division\n    print(\"The quotient of n and m is \", (n//m))\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print (round(n/m,1)) \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n==0):\n        return(0)\n    return(n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n//m\n    print(\"Quotient of {0} and {1} is {2}\".format(n, m, result))\n    \n    \ndef is_prime(n): \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    else:\n        return find(n,m//n)\n        \n    \ndef findgcd(a, b):  \n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return findgcd(b,a%b)\n    \ndef solveQuadratic(a, b, c): \n    '''\n    Write a python function to solve for the value of d \n    for the equation a*x*x + b*x + c = 0.\n    '''\n    d = (-b+math.sqrt(b*b-4*a*c))/(2*a)\n    return d\n    \ndef findMaxMin(list1):\n    '''\n    Write a python function to find max and min values in a list of integers.\n    '''\n    max=0\n    min=999999999\n    for i in list1:\n        if i>max:\n            max=i\n        if i<min:\n            min=i\n    return max,min\n    \ndef findLargest(arr,n):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    largest = 0\n    for i in range(n):\n        if arr[i]>largest:\n            largest = arr[i]\n    return largest\n    \ndef sort(arr,n):\n    '''\n    Write a python function to sort a list of integers.\n    '''\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j]>arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n    \ndef maximumSubarray(arr, n):\n    '''\n    Write a python function to find the maximum subarray sum in a given array.\n    '''\n    maxsum = -99999999999999\n    left = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i,n):\n            sum = sum + arr[j]\n            if sum>maxsum:\n                maxsum = sum\n                left = i\n                right = j\n    return maxsum,left,right\n    \ndef findMinMax(arr,n):\n    '''\n    Write a python function to find the maximum and minimum elements in a list.\n    '''\n    max = 0\n    min = 999999999999999\n    for i in range(n):\n        if arr[i]>max:\n            max = arr[i]\n        if arr[i]<min:\n            min = arr[i]\n    return max,min\n    \ndef findMaxMinUsingTwoPointer(arr,n):\n    '''\n    Write a python function to find the maximum and minimum elements in a list.\n    '''\n    min=99999999999999\n    max=0\n    for i in range(n):\n        if arr[i]<min:\n            min=arr[i]\n        if arr[i]>max:\n            max=arr[i]\n    return max,min\n    \ndef sumEvenOddNumbers(arr,n):\n    '''\n    Write a python function to sum of even and odd numbers in a list.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum = sum+arr[i]\n        else:\n            sum = sum-arr[i]\n    return sum\n    \ndef sortWordsUsingStacks(str):\n    '''\n    Write a python function to sort the words in a string.\n    '''\n    a = []\n    for i in range(len(str)):\n        if str[i]==\" \":\n            for j in range(len(a)):\n                if a[j]==\" \":\n                    a[j+1]=a[j]\n                    a[j]=i\n            break\n        else:\n            a.append(str[i])\n    a.sort()\n    res = \"\"\n    for i in range(len(a)):\n        res=res+a[i]+\" \"\n    return res\n    \ndef findHappiestPerson(arr,n):\n    '''\n    Write a python function to find the person with maximum no of hours worked.\n    '''\n    sum = 0\n    max = 0\n    for i in range(n):\n        if arr[i]>max:\n            max = arr[i]\n        sum = sum+arr[i]\n    for i in range(n):\n        if arr[i] == max and sum>0:\n            return i\n        sum = sum-arr[i]\n    return -1\n    \ndef findMostFrequentWord(arr,n):\n    '''\n    Write a python function to find the most frequent word in a list.\n    '''\n    count = {}\n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]]=1\n        else:\n            count[arr[i]]+=1\n    max = 0\n    res = \"\"\n    for i in count:\n        if count[i]>max:\n            max = count[i]\n            res = i\n    return res\n    \ndef mergeSort(arr,start,end):\n    '''\n    Write a python function to merge the sorted sub-lists.\n    '''\n    if start<end:\n        mid = start+(end-start)//2\n        mergeSort(arr,start,mid)\n        mergeSort(arr,mid+1,end)\n        merge(arr,start,mid,end)\n    return arr\n    \ndef merge(arr,start,mid,end):\n    '''\n    Write a python function to merge the sorted sub-lists.\n    '''\n    left = arr[start:mid+1]\n    right = arr[mid+1:end+1]\n    i=j=0\n    k=start\n    while i<len(left) and j<len(right):\n        if left[i]<=right[j]:\n            arr[k]=left[i]\n            i+=1\n        else:\n            arr[k]=right[j]\n            j+=1\n        k+=1\n    while i<len(left):\n        arr[k]=left[i]\n        i+=1\n        k+=1\n    while j<len(right):\n        arr[k]=right[j]\n        j+=1\n        k+=1\n    \ndef binarySearch(arr,n,x):\n    '''\n    Write a python function to find the index of an element in a sorted array.\n    '''\n    low = 0\n    high = n-1\n    mid = 0\n    while low<=high:\n        mid = (high+low)//2\n        if x==arr[mid]:\n            return mid\n        elif x<arr[mid]:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n    \ndef findKthLargest(arr,n,k):\n    '''\n    Write a python function to find the kth largest element in a list.\n    '''\n    import heapq as heapq\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,arr[i])\n    for i in range(k,n):\n        if arr[i]>heap[0]:\n            heapq.heappush(heap,arr[i])\n            heapq.heappop(heap)\n    return heap[0]\n    \ndef insertAtIndex(arr,n,index,x):\n    '''\n    Write a python function to insert an element at given index in sorted array.\n    '''\n    if index==0:\n        arr[index]=x\n    else:\n        for i in range(index-1):\n            arr[i+1]=arr[i]\n        arr[index]=x\n    return arr\n    \ndef findKthLargestUsingBinarySearch(arr,n,k):\n    '''\n    Write a python function to find the kth largest element in a list.\n    '''\n    low = 0\n    high = n-1\n    while low<=high:\n        mid = (low+high)//2\n        if x==arr[mid]:"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if(w<h):\n        return w\n    else:\n        return h\ndef distance_between_two_points(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef distance_between_point_and_line(p1x,p1y,p2x,p2y,x,y):\n    '''\n    Write a function to find the distance between point p1 and line (p2x,p2y) and (x,y).\n    '''\n    return math.sqrt((p2x-p1x)**2 + (p2y-p1y)**2) - math.sqrt((p1x-x)**2 + (p1y-y)**2)\ndef distance_between_point_and_line_square(p1x,p1y,p2x,p2y,x,y):\n    '''\n    Write a function to find the distance between point p1 and line (p2x,p2y) and (x,y).\n    '''\n    return ((p2x-p1x)**2 + (p2y-p1y)**2) - ((p1x-x)**2 + (p1y-y)**2)\ndef distance_between_point_and_line_square_2(p1x,p1y,p2x,p2y,x,y):\n    '''\n    Write a function to find the distance between point p1 and line (p2x,p2y) and (x,y).\n    '''\n    return (p1x-x)**2 + (p1y-y)**2 - (p2x-x)**2 - (p2y-y)**2\ndef distance_between_two_points_square(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return (x2-x1)**2 + (y2-y1)**2\ndef distance_between_point_and_line_square_1(p1x,p1y,p2x,p2y,x,y):\n    '''\n    Write a function to find the distance between point p1 and line (p2x,p2y) and (x,y).\n    '''\n    return (p1x-x)**2 + (p1y-y)**2 - (p2x-x)**2 - (p2y-y)**2\ndef area_of_triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of a triangle given the coordinates of its vertices.\n    '''\n    area = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2)\n    return area\ndef get_hypotenuse_of_triangle(a,b,c):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle.\n    '''\n    a2 = math.pow(a,2)\n    b2 = math.pow(b,2)\n    c2 = math.pow(c,2)\n    s = (a2 + b2 + c2) / 2\n    h = math.sqrt(s*(s-a2)*(s-b2)*(s-c2))\n    return h\ndef slope_of_line_y_intercept(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope and y-intercept of a line given its first two points.\n    '''\n    m = (y2-y1) / (x2-x1)\n    b = y1 - m * x1\n    return m,b\ndef slope_of_line_y_intercept_1(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope and y-intercept of a line given its first two points.\n    '''\n    m = (y2-y1) / (x2-x1)\n    b = y1 - m * x1\n    return m,b\ndef slope_of_line_y_intercept_2(y1,x1,y2,x2):\n    '''\n    Write a function to find the slope and y-intercept of a line given its first two points.\n    '''\n    m = (y2-y1) / (x2-x1)\n    b = y1 - m * x1\n    return m,b\ndef slope_of_line_y_intercept_3(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope and y-intercept of a line given its first two points.\n    '''\n    m = (y2-y1) / (x2-x1)\n    b = y1 - m * x1\n    return m,b\ndef distance_between_two_points_squared(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return (x2-x1)**2 + (y2-y1)**2\ndef area_of_triangle_squared(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of a triangle given the coordinates of its vertices.\n    '''\n    #area = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2)\n    area = (0.5 * abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) ) )\n    return area\ndef area_of_triangle_squared_1(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of a triangle given the coordinates of its vertices.\n    '''\n    #area = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2)\n    area = (0.5 * abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) ) )\n    return area\ndef distance_between_point_and_line_squared(p1x,p1y,p2x,p2y,x,y):\n    '''\n    Write a function to find the distance between point p1 and line (p2x,p2y) and (x,y).\n    '''\n    return (p2x-p1x)**2 + (p2y-p1y)**2 - (p1x-x)**2 - (p1y-y)**2\ndef distance_between_point_and_line_squared_1(p1x,p1y,p2x,p2y,x,y):\n    '''\n    Write a function to find the distance between point p1 and line (p2x,p2y) and (x,y).\n    '''\n    return (p1x-x)**2 + (p1y-y)**2 - (p2x-x)**2 - (p2y-y)**2\ndef distance_between_point_and_line_squared_2(p1x,p1y,p2x,p2y,x,y):\n    '''\n    Write a function to find the distance between point p1 and line (p2x,p2y) and (x,y).\n    '''\n    return ((p1x-x)**2 + (p1y-y)**2 - (p2x-x)**2 - (p2y-y)**2)\ndef distance_between_point_and_line_squared_3(p1x,p1y,p2x,p2y,x,y):\n    ''"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef otherside_square(l,w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return (l**2+w**2)\ndef otherside_triangle(l,w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return (l**2+w**2+h**2)**0.5\ndef otherside_triangle_special(l,w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return ((l*h)/2)**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (h**2 + w**2)**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (h**2 + w**2) == (w**2 + h**2):\n        return w\n    else:\n        return math.sqrt((w**2) + (h**2) - (w**2) - (h**2))\nprint(otherside_rightangle(3,4))\nprint(otherside_rightangle(8,12))\nprint(otherside_rightangle(4,9))\nprint(otherside_rightangle(6,8))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #import pdb; pdb.set_trace()\n    a = w / 2\n    b = h / 2\n    c = math.sqrt(a*a + b*b - 2*a*b*math.cos(math.radians(60)))\n    return c\n    \ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #import pdb; pdb.set_trace()\n    a = w / 2\n    b = h / 2\n    c = math.sqrt(a*a + b*b - 2*a*b)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def otherside(w,h):\n        '''\n        Find the other side of the right angled triangle\n        '''\n        a = w/2\n        b = h/2\n        c = math.sqrt(a*a+b*b-a*b)\n        return c\n    return otherside(w,h)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"Other side of right angle triangle is: \", w/h)\n    return w/h\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w/h\n    if a>=1:\n        return a**2\n    else:\n        return 1/a**2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # answer = w * h / 2\n    answer = math.sqrt(w**2 + h**2)\n    return answer\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = 0\n    for i in range(len(listval)):\n        if listval[i] > maximum:\n            maximum = listval[i]\n    return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    n = len(listval)\n    max_val = listval[0]\n    for i in range(1, n):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = -999999999\n    for i in range(len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max = listval[0]\n    for val in listval:\n        if val > max:\n            max = val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for val in listval:\n        if isinstance(val,int):\n            if max_value == None:\n                max_value = val\n            elif val > max_value:\n                max_value = val\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # # Solution 1\n    # ans = 1\n    # for i in range(1,number + 1):\n    #     if number % i == 0:\n    #         ans += i\n    # return ans\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number = int(number)\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    result = 0\n    \n    for i in range(1, number+1):\n        if number % i == 0:\n            result += i\n            \n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1,number):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_div += i\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # getting the list of divisors\n    divisors = []\n    # making the divisor the sqrt of the number\n    for divisor in range(1, int(number**(0.5)) + 1):\n        if number % divisor == 0:\n            divisors.append(divisor)\n            divisors.append(number / divisor)\n    # returning the sum\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 1\n    for x in range(1,number):\n        if number%x == 0:\n            total += x\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    num = int(number)\n    sum = 1\n    if num < 1:\n        print(\"The number is negative or equal to zero!\")\n    elif num == 1:\n        print(\"The number has only 1 divisor, which is 1\")\n    else:\n        for i in range(1,num+1):\n            if (num % i == 0):\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    print(\"The number of inversion is {}\".format(inv_count))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def getInvCount(arr, l, r): \n    \n        if l >= r: \n            return 0\n    \n        mid = l + ((r - l) >> 1)\n        count = getInvCount(arr, l, mid) + getInvCount(arr, mid + 1, r)\n    \n        i = l\n        j = mid + 1\n        \n        for k in range(l, r + 1): \n            if arr[i] > arr[j]: \n                count += 1\n            i += 1\n            j += 1\n        return count \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr==None:\n        return 0\n    if len(arr)==1:\n        return 0\n    count=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    if len(arr)<2:\n        return 0\n    \n    maxi = arr[-1]\n    for i in range(len(arr)-2,-1,-1):\n        if arr[i] > maxi:\n            maxi = arr[i]\n        else:\n            continue\n    \n    if maxi==arr[0]:\n        return 0\n    else:\n        return maxi - arr[0]\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_len = len(arr) \n    inv_count = 0\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len): \n            if arr[i] > arr[j]: \n                inv_count = inv_count + 1\n    print(inv_count)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2: \n        return 0\n    if len(arr) == 2: \n        return 1 if arr[0] > arr[1] else 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # sort the array \n    arr.sort() \n    # create an empty stack \n    stack = [] \n    count = 0\n    # Loop to compare elements \n    for i in range(len(arr)): \n        # Push this element in the stack \n        stack.append(arr[i]) \n        # as the stack grows, we get the count of inversions \n        while len(stack) > 1 and arr[i] > arr[stack[-1]]: \n            # take the top element \n            top = stack.pop() \n            # the element on top of the stack is greater \n            # than the current element \n            # so the inversion count for the current element and its \n            # previous element are counted \n            count += len(stack) \n    return count \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat = []\n    for i in list1:\n        if type(i) == list:\n            flat += flatten_list(i)\n        else:\n            flat.append(i)\n    return flat\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(list1, [])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return_list = []\n    for item in list1:\n        if isinstance(item,list):\n            return_list = return_list + flatten_list(item)\n        else:\n            return_list.append(item)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # First let's check that the input is a list\n    if not isinstance(list1, list):\n        raise TypeError(\"The input should be a list.\")\n    # We'll have a list of lists in our list, so lets flatten the list\n    list2 = []\n    for sublist in list1:\n        # Recursively flatten all the sublists\n        # sublist = [1,2,3,4]\n        # list2 = [1,2,3,4]\n        list2.extend(flatten_list(sublist))\n    # Then return the resulting list\n    # list2 = [1,2,3,4]\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return list1\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    elif type(list1[0]) is list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1[0]] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            for sub_item in item:\n                flat_list.append(sub_item)\n        else:\n            flat_list.append(item)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # initialize empty list\n    flat_list = []\n    \n    # traverse through the list\n    for i in list1:\n        if isinstance(i,list):\n            flat_list += flatten_list(i)\n        else:\n            flat_list.append(i)\n            \n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if isinstance(i,list):\n            new_list.extend(flatten_list(i))\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_curr = -1\n    max_end = -1\n    max_curr_end = -1\n    max_dict = defaultdict(int)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_count = float('-inf')\n    max_count_val = float('-inf')\n    cur_count = float('-inf')\n    cur_count_val = float('-inf')\n    cur_year = float('-inf')\n    cur_year_val = float('-inf')\n    for i in range(len(stdata)):\n        cur_year = stdata[i][0]\n        cur_year_val = stdata[i][1]\n        cur_count = stdata[i][2]\n        cur_count_val = stdata[i][3]\n        if cur_count > max_count:\n            max_count = cur_count\n            max_count_val = cur_count_val\n            max_year = cur_year\n    return max_count, max_count_val, max_year\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_k = -1\n    for k,v in stdata:\n        max_sum += v\n        if max_sum > max_k:\n            max_k = max_sum\n    return max_k\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    total = defaultdict(lambda:defaultdict(int))\n    \n    for (i,j,k) in stdata:\n        total[i][j] += k\n        total[j][i] += k\n        \n    max_val = 0\n    \n    for k in total:\n        for i in total[k]:\n            if total[k][i] > max_val:\n                max_val = total[k][i]\n                max_key = i\n                \n    return (max_key, max_val)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    for val, tup in stdata:\n        for i in range(0, len(tup)-1):\n            data[tup[i]] += val\n    return max(data.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata)<2:\n        return None\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 0:\n        return 0\n    max_sum = 0\n    for i in range(0,len(stdata)):\n        sum = 0\n        for j in range(0,len(stdata[i])):\n            sum += stdata[i][j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    max_sum = 0\n    max_list = []\n    \n    for i in stdata:\n        if i[0] > max_sum:\n            max_sum = i[0]\n            max_list = i\n    return max_list[1]\n    \n    \ndef max_aggregate_mixed(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    max_sum = 0\n    max_list = []\n    \n    for i in stdata:\n        if i[0] > max_sum:\n            max_sum = i[0]\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_value = 0\n    # Get the maximum value of the list of tuples.\n    for v in stdata:\n        if v[0] > max_value:\n            max_value = v[0]\n    # Get the second largest value from the tuple\n    sec_max_value = 0\n    for v in stdata:\n        if v[0] > max_value and v[1] > sec_max_value:\n            sec_max_value = v[1]\n    # Return the maximum value\n    return max_value, sec_max_value\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # print(stdata)\n    s = defaultdict(int)\n    for i in stdata:\n        s[i] += 1\n    # print(s)\n    res = -1\n    for i in s:\n        if s[i] > res:\n            res = s[i]\n    # print(res)\n    return (max(s.values()),)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # generate all possible binary sequences of length 2n\n    ans = []\n    for i in range(n+1):\n        ans.append([0]*(2*n))\n    \n    # enumerate all possible binary sequences\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if j <= i:\n                # last i bits are same as first j bits\n                ans[i][j] = ans[i-1][j-1] + 1\n            # last i bits are different than first j bits\n            ans[i][j] += ans[i][j-1]\n    return ans[n][n]\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seq(n):\n        res = 0\n        if n == 0:\n            return res\n        if n == 1:\n            return 1\n        res = (count_seq(n-1) + count_seq(n-2))\n        return res\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    while 2**n <= 2**31:\n        if sum(f\"{2**n:b}\".rjust(n, '0')) == sum(f\"{2**n:b}\".ljust(n, '0')):\n            res += 1\n        n += 1\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    bit_sum = 0\n    count = 0\n    \n    while bit_sum!= bit_sum+2**n:\n        bit_sum = (bit_sum << 1) + 1\n        count += 1\n    \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    cnt = 0\n    for i in range(1<<n):\n        s = 0\n        for j in range(n):\n            if (i & (1<<j)) > 0:\n                s += 1\n        if s == n:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # code here\n    res = 0\n    def is_sum(a, b):\n        return (a & 0x01) == (b & 0x01)\n    def count(i, l, r):\n        if r == l:\n            if is_sum(l, r):\n                res += 1\n        else:\n            count(i+1, l, r//2)\n            count(i+1, l, r//2)\n    count(0, n, n)\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0]*(n+1) for _ in range(n+1)] \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            dp[i][j] = (dp[i][j-1] + dp[i-1][j-1] + 2*dp[i-1][j]) % (10**9 + 7) \n    return dp[n][n]\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(n) * bin(n).count('1')\n    \nif __name__ == \"__main__\":\n    print(count_binary_seq(3)) # 3 binary sequences are: 111, 110, 101, 100, 110, 100, 110, 101\n    print(count_binary_seq(5)) # 5 binary sequences are: 111, 110, 101, 100, 110, 100, 111, 100, 101\n    print(count_binary_seq(6)) # 6 binary sequences are: 111, 110, 101, 100, 110, 100, 111, 100, 101, 100, 111, 100, 101"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    for k in d:\n        if isinstance(d[k], dict):\n            return 1 + dict_depth(d[k])\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if type(d) == dict:\n        for k in d.keys():\n            depth += dict_depth(d[k])\n    else:\n        return depth + 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    def dict_depth_helper(d):\n        nonlocal depth\n        if len(d) == 0:\n            depth += 1\n        else:\n            for k,v in d.items():\n                if isinstance(v,dict):\n                    dict_depth_helper(v)\n                else:\n                    pass\n    dict_depth_helper(d)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def sub_depth(d,depth):\n        if isinstance(d,dict):\n            if len(d) == 0:\n                depth += 1\n                if depth == 1:\n                    return 1\n                else:\n                    return max([sub_depth(i,depth) for i in d.values()])\n            else:\n                depth += 1\n                return max([sub_depth(i,depth) for i in d.values()])\n        else:\n            return depth\n    return sub_depth(d,0)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(dict_depth, d.items()))+1\n    #return len(d.items())\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n    else:\n        return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise Exception('This is not a dictionary')\n    return max([len(d) for d in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        if len(d) > 0:\n            return 1 + max(map(dict_depth, d.values()))\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d,dict):\n        return(max([dict_depth(i) for i in d.values()] or [-1]))+1\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if ranges[i][0] <= index and index < ranges[i][1] :\n            if rotations[i] == 0 :\n                return arr[i]\n            else :\n                return find_Element(arr,ranges,rotations,index - ranges[i][0])\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    result = -1\n    for i in range(len(ranges)) :\n        if index < ranges[i][0] :\n            index = index + rotations\n        if index < ranges[i][0] :\n            continue\n        if index > ranges[i][1] :\n            index = index - rotations\n        if index < ranges[i][1] :\n            continue\n        result = i\n    return result\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = 0 \n    while i<index and i<=len(arr)-1 :\n        i = i+rotations\n    return arr[i%len(arr)]\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # print(rotations)\n    for i in range(len(rotations)):\n        if rotations[i] == index:\n            return arr[i]\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (rotations == 0) :\n        return arr[index]\n    else :\n        return find_Element(arr,ranges,rotations-1,index+ranges)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = index % len(arr)\n    start = 0\n    end = len(arr)-1\n    while(start <= end) :\n        mid = (start+end)//2\n        if(arr[mid] > ranges) :\n            end = mid-1\n        elif(arr[mid] < ranges) :\n            start = mid+1\n        elif(arr[mid] == ranges) :\n            if(rotations[index] % 2 == 0) :\n                return mid\n            else :\n                return mid-1\n    return None\n    \ndef find_Element2(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def binary_search(low,high,arr,ranges,rotations,index) :\n        '''\n        Write a python function to find element at a given index after number of rotations.\n        '''\n        if(high >= low) :\n            mid = (low+high)//2\n            if(arr[mid] > ranges) :\n                return binary_search(low,mid-1,arr,ranges,rotations,index)\n            elif(arr[mid] < ranges) :\n                return binary_search(mid+1,high,arr,ranges,rotations,index)\n            elif(arr[mid] == ranges) :\n                if(rotations[index] % 2 == 0) :\n                    return mid\n                else :\n                    return mid+1\n        return None\n    index = index % len(arr)\n    return binary_search(0,len(arr)-1,arr,ranges,rotations,index)\n    \nif __name__ == \"__main__\":\n    #arr = list(map(int,input().split()))\n    arr = [1,2,3,4,5,6,7]\n    #ranges = 7\n    #rotations = [0,0,0,0,0,0,0]\n    #index = 3\n    ranges = 6\n    rotations = [0,1,2,3,4,5,6]\n    index = 3\n    print(find_Element2(arr,ranges,rotations,index))\n    "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,index) :\n        rotations = rotations//2\n        ranges = ranges//2\n    for i in range(0,rotations) :\n        arr[ranges], arr[ranges+1] = arr[ranges+1], arr[ranges]\n        ranges = ranges+1\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #return binary search\n    lo = 0\n    hi = len(arr)-1\n    while (lo <= hi) :\n        mid = (lo + hi)//2\n        if (arr[mid] == index) :\n            return index\n        if (index < arr[mid]) :\n            hi = mid - 1\n        else :\n            lo = mid + 1\n    if(ranges[index] >= rotations[index]) :\n        return find_Element(arr,ranges,rotations,index+1)\n    else :\n        return find_Element(arr,ranges,rotations,index-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(len(arr)) : \n        if (count > index and (count - index)%ranges <= rotations) :\n            count = count - index\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(index)\n    i = 0\n    while i < len(arr) and index > 0:\n        index -= ranges[i]\n        i += rotations[i]\n    print(index,i)\n    if index > 0:\n        return arr[i]\n    else:\n        return arr[i]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return (list(filter(lambda x: x[0] == 'p', words))[0],list(filter(lambda x: x[0] == 'p', words))[1])\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split()\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            words.remove(words[i])\n            return words[0],words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list=[]\n    for word in words:\n        if word.startswith('p'):\n            p_list.append(word)\n    return p_list"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    returnwords=[]\n    for i in words:\n        if i[0].lower()=='p':\n            returnwords.append(i)\n    return returnwords\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if not words:\n        return None\n    pwords = []\n    for word in words:\n        if word[0] == 'p':\n            pwords.append(word)\n    return pwords\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # return ['pimple','pepper']\n    return words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list1 = []\n    list2 = []\n    for i in words:\n        if i[0] == 'p':\n            list1.append(i)\n    for i in list1:\n        i = i.replace(\"p\", \"\")\n        i = i.replace(\"'\", \"\")\n        list2.append(i)\n    return list2\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # return words[:2]\n    return [word for word in words if word.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = []\n    for x in words:\n        if x.startswith('p'):\n            p_list.append(x)\n    if p_list!= []:\n        return p_list\n    else:\n        return None\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base case: If there is only one element in the array, then there is no subsequence\n    if index == n:\n        return 0\n    # If this index is less than the kth index, then there is no subsequence\n    if k <= index:\n        return 0\n    # If the ith element is greater than the kth element, then the maximum sum is just the sum of the subsequence till ith index\n    if a[index] > k:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    # If the ith element is less than k, then the maximum sum is just the maximum sum of the subsequence till this index \n    # by including the ith element and also including the kth element\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k-a[index]))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base condition \n    if index == n: \n        return 0\n    \n    # dp table\n    dp = [[-1 for i in range(k+1)] for j in range(n)]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    arr = a\n    '''\n    Approach:\n    1. For any element, we can find the best way to get in the sequence.\n    2. This is also a binary search problem.\n    3. The subsequence ending at i is the maximum sum of elements from a[0] to i - 1 in the array.\n    4. For the element at index i + 1, we can either include it or not.\n    5. The maximum sum of the subsequence ending at i is the sum of all elements in the range from j to i - 1, inclusive\n    6. Since we are given i + k, we need to find the maximum sum of a[j] - k, since a[j] is already included, we\n    consider the elements from j + 1 to i - 1.\n    7. We can find the maximum sum of a[j] - k, by considering the previous subsequence ending at index j, and\n    including i - j, because i is not included.\n    8. Since the maximum sum is the sum of all previous elements in the subsequence ending at j, and including i - j,\n    we can find the maximum sum of a[j] - k, by checking if the maximum sum of previous subsequence ending at j\n    is greater than the maximum sum of a[j] - k.\n    '''\n    if k > i:\n        return -1\n    if k == 0:\n        return max(a[i:])\n    max_sum = 0\n    for i in range(index, -1, -1):\n        if a[i] > k:\n            max_sum = max(max_sum, max_sum_increasing_subseq(arr, n, i - 1, k))\n        else:\n            max_sum = max(max_sum, max_sum_increasing_subseq(arr, n, i - 1, k) + a[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #Base case\n    if index >= n:\n        return 0\n    \n    #If k is greater than i then it is not included in increasing subsequence.\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n        \n    #If we include k in increasing subsequence then we can get increasing subsequence starting from index.\n    #If we not include k then k can be included in increasing subsequence.\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = []\n    for i in range(n):\n        dp.append(0)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or index == 0 or k == 0:\n        return -1\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or a[0] <= 0 or a[index] <= 0 or a[k] <= 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0: return 0\n    max_sum = 0\n    #store the maximum sum of all subsequnces with first k elements\n    kth_sum = 0\n    for i in range(1,n+1):\n        if i == index: continue\n        kth_sum = kth_sum + a[i]\n        max_sum = max(max_sum, kth_sum)\n    #store the maximum sum of all subsequnces without first k elements\n    max_sum = max(max_sum, max_sum_increasing_subseq(a, n-1, index+1, k))\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix_sum = 0\n    max_sum = -math.inf\n    max_sum_index = -1\n    for i in range(index, n):\n        prefix_sum = prefix_sum + a[i]\n        if(prefix_sum > max_sum):\n            max_sum = prefix_sum\n            max_sum_index = i\n    return max_sum_index\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # start with 0 as prefix sum\n    prefix_sum = 0\n    # keep track of previous kth element\n    max_sum = 0\n    for i in range(index + 1):\n        # adding the prefix sum till i-th element\n        prefix_sum = prefix_sum + a[i]\n        # if prefix sum is greater than k, then it will result in maximum sum\n        if prefix_sum > k:\n            break\n        # keep track of max sum\n        max_sum = max(max_sum, prefix_sum)\n    return max_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(f\"tuplex {tuplex} m {m} n {n}\")\n    return tuplex[:m] + (tuplex[m+1:],) + tuplex[m:]\ndef en_de(tuplex):\n    '''\n    Write a function to get a copy and reverse of a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    return (tuplex[:],tuplex[::-1])\ndef count_times(tuplex):\n    '''\n    Write a function to get the count of times a tuple appears in a tuple.\n    '''\n    count = 0\n    for i in tuplex:\n        if i in tuplex:\n            count += 1\n    return count\ndef copy_tuplex(tuplex):\n    '''\n    Write a function to get a copy of a tuple.\n    '''\n    return tuplex[:]\ndef even_odd(tuplex):\n    '''\n    Write a function to get the even and odd numbers of a tuple.\n    '''\n    even = []\n    odd = []\n    for i in tuplex:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return (even,odd)\ndef get_tuple_num(tuplex):\n    '''\n    Write a function to get the number of tuple in a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    return len(tuplex)\ndef get_tuple_length(tuplex):\n    '''\n    Write a function to get the length of tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    return len(tuplex)\ndef insert_tuplex(tuplex):\n    '''\n    Write a function to insert a tuple in the middle of a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    if len(tuplex) == 0:\n        return tuplex\n    elif len(tuplex) == 1:\n        return (tuplex[0],tuplex)\n    else:\n        return (tuplex[0],tuplex[1:-1],tuplex[-1])\ndef insert_tuplex_reverse(tuplex):\n    '''\n    Write a function to insert a tuple in the end of a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    if len(tuplex) == 0:\n        return tuplex\n    elif len(tuplex) == 1:\n        return (tuplex[0],tuplex)\n    else:\n        return (tuplex[0],tuplex[1:],tuplex[-1])\ndef insert_tuplex_between(tuplex,insert_here,insert_into):\n    '''\n    Write a function to insert a tuple in the middle of a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    if len(tuplex) == 0:\n        return tuplex\n    elif len(tuplex) == 1:\n        return (tuplex[0],insert_into,tuplex)\n    else:\n        return (tuplex[0],insert_into,tuplex[1:-1],tuplex[-1])\ndef insert_tuplex_between_reverse(tuplex,insert_here,insert_into):\n    '''\n    Write a function to insert a tuple in the end of a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    if len(tuplex) == 0:\n        return tuplex\n    elif len(tuplex) == 1:\n        return (tuplex[0],insert_into,tuplex)\n    else:\n        return (tuplex[0],insert_into,tuplex[1:],tuplex[-1])\ndef find_tuple(tuplex,search_tuple):\n    '''\n    Write a function to find a tuple in a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in tuplex:\n        if i == search_tuple:\n            return True\n    return False\ndef find_tuple_reverse(tuplex,search_tuple):\n    '''\n    Write a function to find a tuple in a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in tuplex:\n        if i == search_tuple:\n            return True\n    return False\ndef find_tuple_between(tuplex,search_tuple,insert_here):\n    '''\n    Write a function to find a tuple in a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in tuplex:\n        if i == search_tuple:\n            return insert_here\n    return False\ndef find_tuple_between_reverse(tuplex,search_tuple,insert_here):\n    '''\n    Write a function to find a tuple in a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in tuplex:\n        if i == search_tuple:\n            return insert_here\n    return False\ndef remove_tuple(tuplex,remove_tuple):\n    '''\n    Write a function to remove a tuple in a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in tuplex:\n        if i == remove_tuple:\n            tuplex.remove(remove_tuple)\n            break\n    return tuplex\ndef remove_tuple_reverse(tuplex,remove_tuple):\n    '''\n    Write a function to remove a tuple in a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in tuplex:\n        if i == remove_tuple:\n            tuplex.remove(remove_tuple)\n            break\n    return tuplex\ndef remove_tuple_between(tuplex,remove_tuple,insert_here):\n    '''\n    Write a function to remove a tuple in a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in tuplex:\n        if i == remove_tuple:\n            tuplex.remove(remove_tuple)\n            tuplex.insert(insert_here,tuplex[-1])\n            break\n    return tuplex\ndef remove_tuple_between_reverse(tuplex,remove_tuple,insert_here):\n    '''\n    Write a function to remove a tuple in a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in tuplex:\n        if i == remove_tuple:\n            tuplex.remove(remove_tuple)\n            tuplex.insert(insert_here,tuplex[-1])\n            break\n    return tuplex\ndef get_tuple_index(tuplex,search_tuple):\n    '''\n    Write a function to get the index of a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in range(len(tuplex)):\n        if tuplex[i] == search_tuple:\n            return i\ndef get_tuple_index_reverse(tuplex,search_tuple):\n    '''\n    Write a function to get the index of a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    for i in range(len(tuplex)-1, -1, -1):\n        if tuplex[i] == search_tuple:\n            return i\ndef get_tuple_count(tuplex,search_tuple):\n    '''\n    Write a function to get the count of a tuple.\n    '''\n    #print(f\"tuplex {tuplex}\")\n    count = 0\n    for i in tuplex:\n    "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[n:m])\ndef double_colon_tuplex(tuplex,m,n,o):\n    '''\n    Write a function to get a double colon of a tuple.\n    '''\n    return tuple(tuplex[m:n] + tuplex[n:o])\ndef comma_tuplex(tuplex,m,n,o):\n    '''\n    Write a function to get a comma of a tuple.\n    '''\n    return tuple(tuplex[m:n] + tuplex[n:o])\ndef comma_tuplex_f(tuplex,m,n,o):\n    '''\n    Write a function to get a comma of a tuple.\n    '''\n    return tuple(tuplex[m:n] + tuplex[n:o] + tuplex[o:])\ndef colon_tuplex_f(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[m:n] + tuplex[n:o])\ndef colon_tuplex_f_len(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o])\ndef colon_tuplex_f_in(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return m in tuplex[m:n] + tuplex[n:o]\ndef colon_tuplex_f_in_len(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex\ndef colon_tuplex_f_in_in(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return m in tuplex[m:n] + tuplex[n:o] + tuplex\ndef colon_tuplex_f_in_in_len(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex\ndef colon_tuplex_f_in_in_in(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return m in tuplex[m:n] + tuplex[n:o] + tuplex + tuplex\ndef colon_tuplex_f_in_in_len(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out_len(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out_len_out(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out_len_out_len(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex + tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out_len_out_len_out(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex + tuplex + tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out_len_out_len_out_len(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out_len_out_len_out_len_out(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out_len_out_len_out_len_out_len(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out_len_out_len_out_len_out_len_out(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex\ndef colon_tuplex_f_in_in_len_out_len_out_len_out_len_out_len_out_len(tuplex,m,n,o):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return len(tuplex[m:n] + tuplex[n:o]) in tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + tuplex + "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuplex+(m,n)\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m] + (tuplex[m+1:],)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(m):\n        colon.append(tuplex[i])\n        for j in range(n):\n            if tuplex[i][j]==None:\n                colon[i]+=('.',)*(n-j-1)\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    d=[]\n    for i in range(m):\n        d.append([])\n        for j in range(n):\n            d[i].append(0)\n    for i in range(m):\n        for j in range(n):\n            d[i][j]=tuplex[i][j]\n    return d\ndef find_big_small(tuplex,m,n):\n    '''\n    Write a function to get a list with two columns: the big and the small\n    of a tuple.\n    '''\n    d=[]\n    for i in range(m):\n        d.append([])\n        for j in range(n):\n            d[i].append(0)\n    for i in range(m):\n        for j in range(n):\n            d[i][j]=tuplex[i][j]\n    big=0\n    for i in range(m):\n        if d[i][0]>big:\n            big=d[i][0]\n    for i in range(m):\n        if d[i][0]==big:\n            for j in range(n):\n                if d[i][j]<big:\n                    big=d[i][j]\n    small=big\n    for i in range(m):\n        if d[i][0]<small:\n            small=d[i][0]\n    for i in range(m):\n        if d[i][0]==small:\n            for j in range(n):\n                if d[i][j]>small:\n                    small=d[i][j]\n    return big,small\ndef print_tuple(tuplex,m,n):\n    '''\n    Write a function to print a tuple.\n    '''\n    d=[]\n    for i in range(m):\n        d.append([])\n        for j in range(n):\n            d[i].append(0)\n    for i in range(m):\n        for j in range(n):\n            d[i][j]=tuplex[i][j]\n    for i in range(m):\n        for j in range(n):\n            print(d[i][j],end=\" \")\n        print(\"\")\n    print(\"\")\ndef matrix_transpose(tuplex,m,n):\n    '''\n    Write a function to get a matrix transpose.\n    '''\n    d=[]\n    for i in range(n):\n        d.append([])\n        for j in range(m):\n            d[i].append(0)\n    for i in range(n):\n        for j in range(m):\n            d[i][j]=tuplex[j][i]\n    return d\ndef find_first_max_min(tuplex,m,n):\n    '''\n    Write a function to get a list with first max and first min of a tuple.\n    '''\n    d=[]\n    for i in range(m):\n        d.append([])\n        for j in range(n):\n            d[i].append(0)\n    for i in range(m):\n        for j in range(n):\n            d[i][j]=tuplex[i][j]\n    big=0\n    for i in range(m):\n        if d[i][0]>big:\n            big=d[i][0]\n    for i in range(m):\n        if d[i][0]==big:\n            for j in range(n):\n                if d[i][j]<big:\n                    big=d[i][j]\n    for i in range(m):\n        if d[i][0]==big:\n            for j in range(n):\n                if d[i][j]==big:\n                    print(big,end=\" \")\n                    print(j+1,end=\" \")\n                    break\n    print(\"\")\ndef max_min_submatrix(tuplex,m,n):\n    '''\n    Write a function to get a list with two columns: the max and the min\n    of a submatrix of a tuple.\n    '''\n    d=[]\n    for i in range(m):\n        d.append([])\n        for j in range(n):\n            d[i].append(0)\n    for i in range(m):\n        for j in range(n):\n            d[i][j]=tuplex[i][j]\n    big=0\n    for i in range(m):\n        for j in range(n):\n            if d[i][j]>big:\n                big=d[i][j]\n    for i in range(m):\n        for j in range(n):\n            if d[i][j]==big:\n                print(big,end=\" \")\n                for k in range(i,m):\n                    for l in range(j,n):\n                        if d[k][l]==big:\n                            print(k+1,end=\" \")\n                            break\n                print(\"\")\ndef all_duplicates(tuplex,m,n):\n    '''\n    Write a function to check if a tuple has all duplicates.\n    '''\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] in tuplex[i]:\n                return False\n    return True\ndef remove_duplicates(tuplex,m,n):\n    '''\n    Write a function to remove duplicates in a tuple.\n    '''\n    if all_duplicates(tuplex,m,n):\n        print(\"\\nIt is a duplicate\")\n    else:\n        for i in range(m):\n            for j in range(n):\n                if tuplex[i][j] in tuplex[i]:\n                    tuplex[i][j]=0\n        for i in range(m):\n            for j in range(n):\n                if tuplex[i][j]!=0:\n                    tuplex[i][j]=1\ndef get_replaced_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple with all the same values in a place of\n    one occurrence.\n    '''\n    d=[]\n    for i in range(m):\n        d.append([])\n        for j in range(n):\n            d[i].append(0)\n    for i in range(m):\n        for j in range(n):\n            d[i][j]=tuplex[i][j]\n    for i in range(m):\n        for j in range(n):\n            if d[i][j]!=0:\n                d[i][j]=0\n    return d\ndef remove_column(tuplex,m,n):\n    '''\n    Write a function to remove a column of a tuple.\n    '''\n    for i in range(n):\n        for j in range(m):\n            if tuplex[j][i]==0:\n                for k in range(m):\n                    tuplex[k][i]=0\n    return tuplex\ndef remove_row(tuplex,m,n):\n    '''\n    Write a function to remove a row of a tuple.\n    '''\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j]==0:\n                tuplex=remove_column(tuplex,m,n)\n                return tuplex\ndef fill_tuplex(tuplex,m,n):\n    '''\n    Write a function to fill a tuple with a list.\n    '''\n    d=[]\n    for i in range(m):\n        d.append([])\n        for j in range(n):\n            d[i].append(0)\n    for i in range(m):\n        for j in range(n):\n            d[i][j]=int(input(f\"Enter a {i+1} {j+1} value: \"))\n    return d\ndef get_tuplex_size(tuplex,m,n):\n    '''\n    Write a function to get the size of a tuple.\n    '''\n    tuplex_size=m*n\n    return tuplex_size\ndef main():\n    m,n=map(int,input().split())\n    tuplex=fill_tuplex(tuple"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # print(tuplex)\n    res = ()\n    for i in range(m):\n        res += (tuplex[n-i-1],)\n    return res\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if type(tuplex)!= tuple:\n        print(\"Must be a tuple\")\n        return -1\n    tuplex = deepcopy(tuplex)\n    for i in range(m,n):\n        tuplex = (tuplex[0]+tuplex[1],tuplex[2]+tuplex[3])\n    return tuplex\ndef join(string,list):\n    '''\n    Write a function to join a string to a list of characters.\n    '''\n    if type(string)!= str or type(list)!= list:\n        print(\"Please enter a string and a list\")\n        return -1\n    string = deepcopy(string)\n    list = deepcopy(list)\n    for i in range(len(list)):\n        string += list[i]\n    return string\ndef powerset(list,n):\n    '''\n    Write a function to get a list of all combinations of n items\n    from a set of n items.\n    '''\n    if type(list)!= list:\n        print(\"Please enter a list\")\n        return -1\n    list = deepcopy(list)\n    subsets = []\n    for i in range(2**n):\n        s = []\n        for j in range(n):\n            if i&(1<<j) > 0:\n                s.append(list[j])\n        subsets.append(s)\n    return subsets\ndef add(x,y):\n    '''\n    Write a function to add two numbers\n    '''\n    if type(x)!= int and type(x)!= float and type(x)!= complex:\n        print(\"Please enter a number\")\n        return -1\n    if type(y)!= int and type(y)!= float and type(y)!= complex:\n        print(\"Please enter a number\")\n        return -1\n    x = deepcopy(x)\n    y = deepcopy(y)\n    if x<y:\n        return x+y\n    else:\n        return x-y\ndef copy(x):\n    '''\n    Write a function to copy a list.\n    '''\n    if type(x)!= list:\n        print(\"Please enter a list\")\n        return -1\n    x = deepcopy(x)\n    return x\ndef is_even(x):\n    '''\n    Write a function to check whether a number is even or not.\n    '''\n    if type(x)!= int and type(x)!= float and type(x)!= complex:\n        print(\"Please enter a number\")\n        return -1\n    if x%2 == 0:\n        return True\n    else:\n        return False\ndef translate(x):\n    '''\n    Write a function to translate a given string into \"rna\"\n    '''\n    if type(x)!= str:\n        print(\"Please enter a string\")\n        return -1\n    x = deepcopy(x)\n    x = x.lower()\n    trans = {\n        \"a\" : \"u\",\n        \"c\" : \"g\",\n        \"t\" : \"a\",\n        \"g\" : \"c\",\n        \"u\" : \"a\",\n        \"r\" : \"n\",\n        \"c\" : \"g\",\n        \"a\" : \"u\",\n        \"n\" : \"n\",\n        \"t\" : \"a\",\n        \"o\" : \"o\",\n        \"p\" : \"p\",\n        \"c\" : \"u\",\n        \"b\" : \"c\",\n        \"m\" : \"n\",\n        \"s\" : \"s\",\n        \"y\" : \"y\",\n        \"h\" : \"h\",\n        \"d\" : \"d\",\n        \"f\" : \"f\",\n        \"q\" : \"q\",\n        \"w\" : \"w\",\n        \"e\" : \"e\",\n        \"j\" : \"j\",\n        \"k\" : \"k\",\n        \"i\" : \"i\",\n        \"p\" : \"p\",\n        \"x\" : \"x\",\n        \"z\" : \"z\",\n        \"s\" : \"s\",\n        \"r\" : \"r\",\n        \"l\" : \"l\",\n        \"v\" : \"v\",\n        \"k\" : \"k\",\n        \"b\" : \"c\",\n        \"j\" : \"j\",\n        \"c\" : \"u\",\n        \"g\" : \"g\",\n        \"w\" : \"w\",\n        \"h\" : \"h\",\n        \"d\" : \"d\",\n        \"f\" : \"f\",\n        \"q\" : \"q\",\n        \"x\" : \"x\",\n        \"z\" : \"z\",\n        \"0\" : \"0\",\n        \"1\" : \"1\",\n        \"2\" : \"2\",\n        \"3\" : \"3\",\n        \"4\" : \"4\",\n        \"5\" : \"5\",\n        \"6\" : \"6\",\n        \"7\" : \"7\",\n        \"8\" : \"8\",\n        \"9\" : \"9\"\n    }\n    for k,v in trans.items():\n        x = x.replace(k,v)\n    return x\ndef combination(n,r):\n    '''\n    Write a function to get a list of all combinations of size r from a list of size n.\n    '''\n    if type(n)!= int or type(r)!= int:\n        print(\"Please enter a integer\")\n        return -1\n    if n < r:\n        print(\"Please enter a smaller integer\")\n        return -1\n    n = deepcopy(n)\n    r = deepcopy(r)\n    result = []\n    for i in range(n):\n        temp = []\n        for j in range(r):\n            temp.append(n[i])\n        result.append(temp)\n    return result\ndef sort(x):\n    '''\n    Write a function to sort the list.\n    '''\n    if type(x)!= list:\n        print(\"Please enter a list\")\n        return -1\n    x = deepcopy(x)\n    x = sorted(x)\n    return x\ndef rotate(x,n):\n    '''\n    Write a function to rotate a list by n.\n    '''\n    if type(x)!= list:\n        print(\"Please enter a list\")\n        return -1\n    x = deepcopy(x)\n    n = deepcopy(n)\n    if n < 0:\n        print(\"Please enter a positive number\")\n        return -1\n    if n == 0:\n        return x\n    x = list(x)\n    for i in range(n):\n        x = x[1:]\n        x.append(x[0])\n    return x\ndef count_words(x):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    if type(x)!= str:\n        print(\"Please enter a string\")\n        return -1\n    x = deepcopy(x)\n    x = x.split()\n    return len(x)\ndef count_symbols(x):\n    '''\n    Write a function to count the number of symbols in a string.\n    '''\n    if type(x)!= str:\n        print(\"Please enter a string\")\n        return -1\n    x = deepcopy(x)\n    x = x.lower()\n    x = x.replace(\" \", \"\")\n    return len(x)\ndef get_lists(x,n):\n    '''\n    Write a function to get a list of lists of length n from a list.\n    '''\n    if type(x)!= list:\n        print(\"Please enter a list\")\n        return -1\n    if type(n)!= int:\n        print(\"Please enter a integer\")\n        return -1\n    n = deepcopy(n)\n    if n <= 0:\n        print(\"Please enter a positive integer\")\n        return -1\n    x = deepcopy(x)\n    result = []\n    for i in range(n):\n        result.append([])\n    for i in range(len(x)):\n        result[i % n].append(x[i])\n    return result\ndef get_groups(x,n):\n    '''\n    Write a function to get a list of lists of length n from a list.\n    '''\n    if type(x)!= list:\n        print(\"Please enter a list\")\n        return -1"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    tuplex = tuplex + (n-m,)\n    return tuplex\ndef rotate(array,rot):\n    '''\n    Write a function to rotate an array.\n    '''\n    array = deepcopy(array)\n    rot = rot%len(array)\n    array = array[rot:] + array[0:rot]\n    return array\ndef nCr(n,r):\n    '''\n    Write a function to calculate the number of combinations of N elements taken from N\n    items in a collection.\n    '''\n    if n==r:\n        return 1\n    if n<r:\n        return 0\n    return nCr(n-1,r) + nCr(n-1,r-1)\ndef count_lcs(string1, string2):\n    '''\n    Write a function to calculate the number of longest common subsequences of two strings.\n    '''\n    len1 = len(string1)\n    len2 = len(string2)\n    # making two 2d array to store subsequences\n    arr1 = [[0 for j in range(len2+1)] for i in range(len1+1)]\n    arr2 = [[0 for j in range(len2+1)] for i in range(len1+1)]\n    \n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                arr1[i][j] = 0\n            elif string1[i-1] == string2[j-1]:\n                arr1[i][j] = arr1[i-1][j-1]+1\n            else:\n                arr1[i][j] = max(arr1[i-1][j],arr1[i][j-1])\n    \n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                arr2[i][j] = 0\n            elif string1[i-1] == string2[j-1]:\n                arr2[i][j] = arr2[i-1][j-1]+1\n            else:\n                arr2[i][j] = max(arr2[i-1][j],arr2[i][j-1])\n    return arr1[len1][len2]\ndef count_substr(string,substring):\n    '''\n    Write a function to calculate the number of occurrences of a substring in a string.\n    '''\n    substring = substring.lower()\n    string = string.lower()\n    count = 0\n    l = len(substring)\n    for i in range(len(string)):\n        if substring == string[i:i+l]:\n            count = count + 1\n    return count\ndef check_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    string = string.lower()\n    if string==string[::-1]:\n        return True\n    else:\n        return False\ndef any_palindrome(string):\n    '''\n    Write a function to check if any element of a string is a palindrome or not.\n    '''\n    string = string.lower()\n    for i in range(len(string)):\n        if check_palindrome(string[i:]):\n            return True\n        if check_palindrome(string[:i]):\n            return True\n    return False\ndef find_lcs(string1,string2):\n    '''\n    Write a function to find the longest common subsequence of two strings.\n    '''\n    string1 = string1.lower()\n    string2 = string2.lower()\n    if len(string1)<len(string2):\n        string1, string2 = string2, string1\n    string1 = list(string1)\n    string2 = list(string2)\n    l1 = len(string1)\n    l2 = len(string2)\n    lcs = [[0 for i in range(l2+1)] for j in range(l1+1)]\n    for i in range(1,l1+1):\n        for j in range(1,l2+1):\n            if string1[i-1] == string2[j-1]:\n                lcs[i][j] = 1 + lcs[i-1][j-1]\n            else:\n                lcs[i][j] = max(lcs[i-1][j],lcs[i][j-1])\n    return lcs[l1][l2]\ndef chidren_sum(n,m):\n    '''\n    Write a function to calculate the number of ways to get sum of m from 1 to n.\n    '''\n    m = int(m)\n    n = int(n)\n    if m == 0 or n == 0:\n        return 0\n    if m>n:\n        return 0\n    if m == n:\n        return 1\n    if m>0 and n>0:\n        return chidren_sum(m-1,n) + chidren_sum(m,n-1)\ndef find_sum(n,m):\n    '''\n    Write a function to calculate the sum of first n numbers.\n    '''\n    n = int(n)\n    m = int(m)\n    sum = 0\n    if n == 0:\n        return 0\n    for i in range(n):\n        sum += i\n    if m == 0:\n        return sum\n    if m>0:\n        return sum + find_sum(n,m-1)\ndef find_sum_rec(n,m):\n    '''\n    Write a function to calculate the sum of first n numbers.\n    '''\n    n = int(n)\n    m = int(m)\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n    if n>0 and m>0:\n        return find_sum_rec(n-1,m) + find_sum_rec(n,m-1)\ndef is_string_permutation(string1,string2):\n    '''\n    Write a function to check if two strings are permutation of each other or not.\n    '''\n    string1 = string1.lower()\n    string2 = string2.lower()\n    if len(string1)!=len(string2):\n        return False\n    char1 = dict()\n    char2 = dict()\n    for i in string1:\n        if i in char1:\n            char1[i]+=1\n        else:\n            char1[i]=1\n    for i in string2:\n        if i in char2:\n            char2[i]+=1\n        else:\n            char2[i]=1\n    for i in char1.keys():\n        if char1[i]!= char2[i]:\n            return False\n    return True\ndef find_sum_iterative(n,m):\n    '''\n    Write a function to calculate the sum of first n numbers.\n    '''\n    n = int(n)\n    m = int(m)\n    sum = 0\n    if m==0:\n        return 0\n    for i in range(n):\n        sum += i\n    while m>0:\n        sum -= m\n        m -= 1\n    return sum\ndef find_sum_rec(n,m):\n    '''\n    Write a function to calculate the sum of first n numbers.\n    '''\n    n = int(n)\n    m = int(m)\n    if m==0:\n        return 0\n    if n==0:\n        return 0\n    if n>0 and m>0:\n        return find_sum_rec(n-1,m) + find_sum_rec(n,m-1)\ndef count_rotations(string):\n    '''\n    Write a function to calculate the number of rotations of a string.\n    '''\n    string = string.lower()\n    if len(string)<=1:\n        return 0\n    if string[0]==string[-1]:\n        return 0\n    if len(string)==2:\n        if string[0]==string[1]:\n            return 1\n    if len(string)>2:\n        for i in range(len(string)-1):\n            if string[i"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    \n    res = []\n    left_idx = 0\n    right_idx = 0\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    for _ in range(N):\n        if left_idx >= len(nums1):\n            break\n        if right_idx >= len(nums2):\n            break\n        if nums1[left_idx] < nums2[right_idx]:\n            res.append(nums1[left_idx] * nums2[right_idx])\n            left_idx += 1\n            right_idx += 1\n        else:\n            res.append(nums1[left_idx] * nums2[right_idx])\n            left_idx += 1\n            right_idx += 1\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    s1 = sorted(nums1)\n    s2 = sorted(nums2)\n    dp = [[0 for i in range(N+1)] for j in range(N+1)]\n    for i in range(N+1):\n        for j in range(N+1):\n            if i==0 or j==0:\n                dp[i][j] = 0\n            elif s1[i-1]*s2[j-1] > 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            else:\n                dp[i][j] = dp[i-1][j-1]\n    return dp[N][N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    result = []\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import heapq\n    # O(N*log(N)) time | O(N) space\n    if N <= 0:\n        return []\n    result = []\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    while N > 0:\n        num1 = heapq.heappop(nums1)\n        num2 = heapq.heappop(nums2)\n        result.append((num1, num2))\n        if num1 <= num2:\n            heapq.heappush(nums1, num1 * num2)\n        else:\n            heapq.heappush(nums2, num2 * num1)\n        N -= 1\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Solution from my blog:\n    '''\n    def largest_product(nums1, nums2, k):\n        # two pointers to maintain increasing order of the product\n        left, right = 0, 0\n        prod = 0\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    while len(nums1) > 0 and len(nums2) > 0:\n        a = nums1.pop()\n        b = nums2.pop()\n        res.append(a * b)\n    while len(nums1) > 0:\n        a = nums1.pop()\n        res.append(a)\n    while len(nums2) > 0:\n        b = nums2.pop()\n        res.append(b)\n    res.sort(reverse=True)\n    return res[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Your code here\n    \n    # max_prod = 0\n    # min_prod = 0\n    # for i in range(0, N):\n    #     for j in range(0, N):\n    #         prod = nums1[i] * nums2[j]\n    #         if prod > max_prod:\n    #             max_prod = prod\n    #         elif prod < min_prod:\n    #             min_prod = prod\n    # return max_prod, min_prod\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import heapq\n    nums1.sort()\n    nums2.sort()\n    res = []\n    for i in range(N):\n        heapq.heappush(res, heapq.heappushpop(nums2, nums1[i]*nums1[i]))\n        heapq.heappush(res, heapq.heappushpop(nums1, nums2[i]*nums2[i]))\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    N = int(N)\n    nums = []\n    for i in range(N):\n        nums.append(max(nums1[i], nums2[i]))\n    return nums\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        max=a\n    else:\n        max=b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return \"Both the numbers are equal.\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a==b:\n        return 0\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \nprint(maximum(5,3))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(tuple_object):\n    '''\n    Write a function to convert a given tuple to a string.\n    '''\n    return str(tuple_object)\n    \ndef get_index(tuple_object, char):\n    '''\n    Write a function to get the index of a given character in a given tuple.\n    '''\n    return tuple_object.index(char)\n    \ndef tuple_exchange(tuple_object):\n    '''\n    Write a function to exchange a given tuple with its reverse.\n    '''\n    return tuple_object[::-1]\n    \ndef tuple_order(tuple_object, reverse=False):\n    '''\n    Write a function to order a given tuple in non-decreasing order.\n    '''\n    if reverse:\n        return tuple_object[::-1]\n    else:\n        return tuple_object\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip()\n    return tuple(str1)\n    \ndef string_to_tuple_list(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    str1 = str1.strip()\n    return list(str1)\n    \ndef string_to_tuple_list_2(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    str1 = str1.strip()\n    return list(str1)\n    \ndef string_to_dict(str1):\n    '''\n    Write a function to convert a given string to a dictionary of characters.\n    '''\n    str1 = str1.strip()\n    return dict(zip(str1, list(range(len(str1)))))\n    \ndef str_to_hex(str1):\n    '''\n    Write a function to convert a given string to a hexadecimal string.\n    '''\n    return hex(int(str1))\n    \ndef str_to_bin(str1):\n    '''\n    Write a function to convert a given string to a binary string.\n    '''\n    return bin(int(str1))\n    \ndef str_to_oct(str1):\n    '''\n    Write a function to convert a given string to an octal string.\n    '''\n    return oct(int(str1))\n    \ndef str_to_hex_n_bin(str1):\n    '''\n    Write a function to convert a given string to a hexadecimal string and then to a binary string.\n    '''\n    return hex_n_bin(int(str1))\n    \ndef str_to_hex_n_oct(str1):\n    '''\n    Write a function to convert a given string to a hexadecimal string and then to an octal string.\n    '''\n    return hex_n_oct(int(str1))\n    \ndef str_to_oct_n_bin(str1):\n    '''\n    Write a function to convert a given string to an octal string and then to a binary string.\n    '''\n    return oct_n_bin(int(str1))\n    \ndef str_to_oct_n_hex(str1):\n    '''\n    Write a function to convert a given string to an octal string and then to a hexadecimal string.\n    '''\n    return oct_n_hex(int(str1))\n    \ndef str_to_bin_n_hex(str1):\n    '''\n    Write a function to convert a given string to a binary string and then to a hexadecimal string.\n    '''\n    return bin_n_hex(int(str1))\n    \ndef str_to_oct_n_hex(str1):\n    '''\n    Write a function to convert a given string to an octal string and then to a hexadecimal string.\n    '''\n    return oct_n_hex(int(str1))\n    \ndef str_to_dec(str1):\n    '''\n    Write a function to convert a given string to a decimal integer.\n    '''\n    return int(str1)\n    \ndef str_to_hex_str(str1):\n    '''\n    Write a function to convert a given string to a hexadecimal string.\n    '''\n    return str1.encode('hex')\n    \ndef str_to_oct_str(str1):\n    '''\n    Write a function to convert a given string to an octal string.\n    '''\n    return str1.encode('oct')\n    \ndef str_to_bin_str(str1):\n    '''\n    Write a function to convert a given string to a binary string.\n    '''\n    return str1.encode('bin')\n    \ndef str_to_oct_str_2(str1):\n    '''\n    Write a function to convert a given string to an octal string.\n    '''\n    return str1.encode('oct')\n    \ndef str_to_bin_str_2(str1):\n    '''\n    Write a function to convert a given string to a binary string.\n    '''\n    return str1.encode('bin')\n    \ndef str_to_hex_oct_str(str1):\n    '''\n    Write a function to convert a given string to a hexadecimal string, then an octal string.\n    '''\n    return str1.encode('hex'), str1.encode('oct')\n    \ndef str_to_hex_oct_bin_str(str1):\n    '''\n    Write a function to convert a given string to a hexadecimal string, then an octal string, then a binary string.\n    '''\n    return str1.encode('hex'), str1.encode('oct'), str1.encode('bin')\n    \ndef str_to_oct_bin_str(str1):\n    '''\n    Write a function to convert a given string to an octal string, then a binary string.\n    '''\n    return str1.encode('oct'), str1.encode('bin')\n    \ndef str_to_oct_hex_str(str1):\n    '''\n    Write a function to convert a given string to an octal string, then a hexadecimal string.\n    '''\n    return str1.encode('oct'), str1.encode('hex')\n    \ndef str_to_hex_oct_hex_str(str1):\n    '''\n    Write a function to convert a given string to a hexadecimal string, then an octal string, then a hexadecimal string.\n    '''\n    return str1.encode('hex'), str1.encode('oct'), str1.encode('hex')\n    \ndef str_to_oct_oct_str(str1):\n    '''\n    Write a function to convert a given string to an octal string, then an octal string.\n    '''\n    return str1.encode('oct'), str1.encode('oct')\n    \ndef str_to_oct_oct_bin_str(str1):\n    '''\n    Write a function to convert a given string to an octal string, then an octal string, then a binary string.\n    '''\n    return str1.encode('oct'), str1.encode('oct'), str1.encode('bin')\n    \ndef str_to_oct_oct_hex_str(str1):\n    '''\n    Write a function to convert a given string to an octal string, then an octal string, then a hexadecimal string.\n    '''\n    return str1.encode('oct'), str1.encode('oct'), str1.encode('hex')\n    \ndef str_to_oct_oct_hex_oct_str(str1):\n    '''\n    Write a function to convert a given string to an octal string, then an octal string, then a hexadecimal string, then an octal string.\n    '''\n    return str1.encode('oct'), str1.encode('oct'), str1.encode('hex'), str1.encode('oct')\n    \ndef str_to_oct_oct_oct_bin_str(str1):\n    '''\n    Write a function to convert a given string to an octal string, then an octal string, then an octal string, then a binary string.\n    '''\n    return str1.encode('oct'), str1.encode('oct'), str1.encode('oct'), str1.encode('bin')\n    \ndef str_to_oct_oct_oct_oct_str(str1):\n    '''\n    Write a function to convert a given string to an octal string, then an octal string, then an octal string, then an octal string.\n    '''\n    return str1.encode('oct'), str1.encode('oct'), str1.encode('oct'), str1.encode('oct')\n    \ndef str_to_oct_oct_oct_oct_bin_str(str1):\n    '''\n    Write a function to convert a given string to an octal string, then an octal string, then an octal string, then an octal string, then a binary string.\n    '''\n    return str1.encode('oct'), str1.encode('oct'), str1.encode("
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1=str1[::-1]\n    return tuple(str1)\n    \n    \n    \ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a tuple of characters to a string.\n    '''\n    s=''.join(tup)\n    return s[::-1]\n    \n    \n    \ndef another_tuple():\n    '''\n    Write a function to find and return the length of the shortest tuple.\n    '''\n    tup1=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup2=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup3=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup4=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup5=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup6=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup7=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup8=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup9=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup10=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup11=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup12=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup13=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup14=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup15=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup16=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup17=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup18=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup19=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup20=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup21=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup22=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup23=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup24=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup25=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup26=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup27=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup28=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup29=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup30=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup31=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup32=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup33=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup34=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup35=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup36=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup37=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup38=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup39=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup40=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup41=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup42=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup43=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup44=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup45=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup46=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup47=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup48=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup49=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup50=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup51=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup52=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup53=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup54=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup55=((1,2,3),(1,2,3),(1,2,3),(1,2,3))\n    tup56=((1,2,3),(1,2,3),(1,2,3)"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(n-1, 0, -1):\n        if n & i:\n            break\n        n = n | (1 << i)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # number_of_1s = 0\n    # \n    # while n > 0:\n    #     if n & 1 == 1:\n    #         number_of_1s += 1\n    #     n = n >> 1\n    # \n    # return number_of_1s\n    \n    #number_of_1s = 0\n    #for i in range(31,-1,-1):\n    #    if n & 1 == 1:\n    #        number_of_1s += 1\n    #    n = n >> 1\n    #return number_of_1s\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1 << n\n    print(f'The mask is {mask}')\n    print(f'The binary number is {bin(mask)}')\n    return mask\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i=1\n    while i<=n:\n        if n&(1<<i)==0:\n            break\n        i+=1\n    n |= (1<<i)-1\n    return n\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    i=1\n    while i<=n:\n        if n&(1<<i)==0:\n            break\n        i+=1\n    n |= (1<<i)-1\n    return n\n    \ndef clear_right_most_unset_bit(n): \n    '''\n    Write a python function to clear the right most unset bit.\n    '''\n    i=1\n    while i<=n:\n        if n&(1<<i)==0:\n            break\n        i+=1\n    n &= ~(1<<i)\n    return n\n    \ndef clear_left_most_unset_bit(n): \n    '''\n    Write a python function to clear the left most unset bit.\n    '''\n    i=1\n    while i<=n:\n        if n&(1<<i)==0:\n            break\n        i+=1\n    n &= ~(1<<i)\n    return n\n    \ndef reverse(n): \n    '''\n    Write a python function to reverse the bits in the given number.\n    '''\n    i=0\n    while i<=n:\n        if n&(1<<i)==0:\n            break\n        i+=1\n    n &= ~(1<<i)\n    j=n\n    i=i-1\n    while i>=0:\n        if j&(1<<i)==0:\n            break\n        j=j+1\n        i-=1\n    n |= (1<<i)+j\n    return n\n    \ndef reverse_bits_in_word(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return (n & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_number(n): \n    '''\n    Write a python function to reverse the bits in the given number.\n    '''\n    return (n & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_byte(n): \n    '''\n    Write a python function to reverse the bits in the given byte.\n    '''\n    return (n & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_char(n): \n    '''\n    Write a python function to reverse the bits in the given char.\n    '''\n    return (n & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return (n & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_left_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n >> 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_right_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n << 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_right_shift_with_swap_and_left_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n << 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_right_shift_with_swap_and_right_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n >> 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_right_shift_with_swap_and_left_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n << 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_right_shift_with_swap_and_right_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n >> 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_right_shift_with_swap_and_left_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n << 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_left_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n >> 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_left_shift_with_swap(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n << 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_left_shift_with_swap(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n >> 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_right_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n << 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_right_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n >> 1) & ~(1<<(n-1))) | (n & (1<<(n-1)))\n    \ndef reverse_bits_in_word_and_word_not_using_bit_mask_using_shift_and_right_shift(n): \n    '''\n    Write a python function to reverse the bits in the given word.\n    '''\n    return ((n << 1"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~(n-1)&n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n >=0, \"Input is not a positive number\"\n    return n | (1<<n)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #code here\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << (32 - 1))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #assert type(r) == float and type(h) == float\n    #assert r > 0 and h > 0\n    return round(math.pi * r**2 * h,2)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((math.pi*r**2)/3) * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    v = pi*math.pow(r,2)*h\n    return v\ndef volume_cone_r_h(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    v = pi*math.pow(r,2)*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = math.pi * r**2\n    return volume\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2 * math.pi * r * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (4/3)*math.pi*r**3*h\n    return vol\nprint(volume_cone(3,4))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol_cone = (math.pi*r**2)*h\n    return vol_cone\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol_cyl = math.pi*r**2*h\n    return vol_cyl\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol_sphere = (4/3)*math.pi*r**3\n    return vol_sphere\ndef volume_cube(l,w,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    vol_cube = l*w*h\n    return vol_cube\ndef volume_pyramid(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    vol_pyramid = l*h\n    return vol_pyramid\ndef volume_cylinder_torus(r,h):\n    '''\n    Write a function to find the volume of a cylinder along with the torus.\n    '''\n    vol_cyl_tor = ((math.pi*r**2)*h) + ((math.pi*r**2)*h)\n    return vol_cyl_tor\ndef volume_cone_torus(r,h):\n    '''\n    Write a function to find the volume of a cone along with the torus.\n    '''\n    vol_cone_tor = ((math.pi*r**2)*h) + ((math.pi*r**2)*h)\n    return vol_cone_tor\ndef volume_pyramid_torus(l,h,r):\n    '''\n    Write a function to find the volume of a pyramid along with the torus.\n    '''\n    vol_pyramid_tor = ((l*h)*r) + ((l*h)*r)\n    return vol_pyramid_tor\ndef volume_cube_torus(l,w,h,r):\n    '''\n    Write a function to find the volume of a cube along with the torus.\n    '''\n    vol_cube_tor = ((l*w)*h)*r + ((l*w)*h)*r\n    return vol_cube_tor\ndef volume_cone_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone along with the torus, sphere.\n    '''\n    vol_cone_tor = ((math.pi*r**2)*h) + ((math.pi*r**2)*h)\n    return vol_cone_tor\ndef volume_cone_torus_cube(r,h):\n    '''\n    Write a function to find the volume of a cone along with the torus, cube.\n    '''\n    vol_cone_tor = ((math.pi*r**2)*h) + ((math.pi*r**2)*h)\n    return vol_cone_tor\ndef volume_cylinder_torus_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder along with the torus, sphere.\n    '''\n    vol_cyl_tor = ((math.pi*r**2)*h) + ((math.pi*r**2)*h)\n    return vol_cyl_tor\ndef volume_cylinder_torus_cube(r,h):\n    '''\n    Write a function to find the volume of a cylinder along with the torus, cube.\n    '''\n    vol_cyl_tor = ((math.pi*r**2)*h) + ((math.pi*r**2)*h)\n    return vol_cyl_tor\ndef volume_sphere_torus(r):\n    '''\n    Write a function to find the volume of a sphere along with the torus.\n    '''\n    vol_sphere_tor = ((4/3)*math.pi*r**3) + ((4/3)*math.pi*r**3)\n    return vol_sphere_tor\ndef volume_sphere_cylinder(r):\n    '''\n    Write a function to find the volume of a sphere along with the cylinder.\n    '''\n    vol_sphere_cyl = ((4/3)*math.pi*r**3) + ((4/3)*math.pi*r**3)\n    return vol_sphere_cyl\ndef volume_sphere_cube(r):\n    '''\n    Write a function to find the volume of a sphere along with the cube.\n    '''\n    vol_sphere_cube = ((4/3)*math.pi*r**3) + ((4/3)*math.pi*r**3)\n    return vol_sphere_cube\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder along with the sphere.\n    '''\n    vol_cyl_sphere = ((4/3)*math.pi*r**2*h) + ((4/3)*math.pi*r**2*h)\n    return vol_cyl_sphere\ndef volume_cylinder_cube(r,h):\n    '''\n    Write a function to find the volume of a cylinder along with the cube.\n    '''\n    vol_cyl_cube = ((4/3)*math.pi*r**2*h) + ((4/3)*math.pi*r**2*h)\n    return vol_cyl_cube\ndef volume_pyramid_sphere(l,h):\n    '''\n    Write a function to find the volume of a pyramid along with the sphere.\n    '''\n    vol_pyramid_sphere = ((l*h)*(4/3)*math.pi*r**3) + ((l*h)*(4/3)*math.pi*r**3)\n    return vol_pyramid_sphere\ndef volume_pyramid_cube(l,h):\n    '''\n    Write a function to find the volume of a pyramid along with the cube.\n    '''\n    vol_pyramid_cube = ((l*h)*(4/3)*math.pi*r**3) + ((l*h)*(4/3)*math.pi*r**3)\n    return vol_pyramid_cube\ndef volume_pyramid_cylinder(l,h,r):\n    '''\n    Write a function to find the volume of a pyramid along with the cylinder.\n    '''\n    vol_pyramid_cylinder = ((l*h)*(4/3)*math.pi*r**2*h) + ((l*h)*(4/3)*math.pi*r**2*h)\n    return vol_pyramid_cylinder\ndef volume_pyramid_torus(l,h,r,h_tor):\n    '''\n    Write a function to find the volume of a pyramid along with the torus.\n    '''\n    vol_pyramid_tor = ((l*h)*(4/3)*math.pi*r**2*h_tor) + ((l*h)*(4/3)*math.pi*r**2*h_tor)\n    return vol_pyramid_tor\ndef volume_cube_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cube along with the cylinder.\n    '''\n    vol_cube_cylinder = ((4/3)*math.pi*r**3*h) + ((4/3)*math.pi*r**3*h)\n    return vol_cube_cylinder\ndef volume_cube_torus(r,h,h_tor):\n    '''\n    Write a function to find the volume of a cube along with the torus.\n    '''\n    vol_cube_tor = ((4/3)*math.pi*r**3*h_tor) + ((4/3)*math.pi*r**3*h_tor)\n    return vol_cube_tor\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere along with the cylinder.\n    '''\n    vol_sphere_cylinder = ((4/3)*math.pi*r**3*h) + ((4/3)*math.pi*r**3*h)\n    return vol_sphere_cylinder\ndef volume_sphere_cube(r):\n    '''\n    Write a function to find the volume of a sphere along with the cube.\n    '''\n    vol_sphere_cube = ((4/3)*math.pi*"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4/3)*math.pi*(r**2)*(h/3)\n    return volume\nprint(volume_cone(2,2))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi*r**2*h)/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if(r <= 0 or h <= 0):\n        return 0\n    else:\n        V = (1/3)*math.pi*r*r*h\n        return V\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    print(\"Volume of a cone with radius {} and height {} is {}\".format(r,h,volume))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    res=1\n    while True:\n        if 2**res >= n:\n            break\n        res+=1\n    return res\n    \n        \nprint(highest_Power_of_2(9))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(5))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1\n    while(2**x <= n):\n        x += 1\n    return x"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n <= 0:\n        return 0\n    high = 0\n    while high < n:\n        high = 2 ** high\n        if high > n:\n            break\n    return high\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #Code here\n    while n > 1:\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = n-1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while (2**power) <= n:\n        power += 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\n    # Code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        return 180\n    if n == 181"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power_of_2 = 0\n    while (n>0):\n        n=n>>1\n        max_power_of_2=max_power_of_2|(1<<max_power_of_2)\n    return max_power_of_2\n    '''\n    Time complexity O(logn)\n    Space complexity: O(logn)\n    '''\ndef max_power_of_2(n): \n    if n<=0:\n        return -1\n    max_power_of_2 = 0\n    while (n > 0):\n        n = n >> 1\n        max_power_of_2 = max_power_of_2 | 1\n    return max_power_of_2\n    '''\n    Time complexity O(n)\n    Space complexity: O(1)\n    '''\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n > 0: \n        \n        while (n!= 1): \n            \n            if n % 2!= 0: \n                return n \n            else: \n                n = n // 2\n                \n    else: \n        \n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 0\n    while (x < n):\n        x = x * 2\n        if x == n:\n            return x\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n == 0: \n        return 0\n    else:\n        return 2**(highest_Power_of_2(n-1)-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (2 * n + 1)\n    \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    res = 1\n    i = 2\n    while i <= n:\n        res += i\n        i += 1\n    return res\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    assert n > 0, \"n must be a positive integer\"\n    \n    lucas_num = 0\n    for i in range(1,n+1):\n        lucas_num = lucas_num + 2\n        \n    return lucas_num\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 2\n    else:\n        return find_lucas(n-1)+1\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 0: \n        return 0\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return lucas(n)\ndef lucas(n):\n    if n==0:\n        return 2\n    if n==1:\n        return 1\n    return lucas(n-1) + lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 2\n    elif n == 1: return 1\n    else:\n        a = 1\n        b = 2\n        for i in range(1, n):\n            c = a + b\n            a = b\n            b = c\n        return c\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.format(*string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    print(string.join(list_))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return map(lambda x: format_ % x, list_)\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return map(lambda x: format_.format(x), list_)\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for i in range(len(list_)):\n        list_[i] = format_ % list_[i]\n    return list_\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return list(map(lambda x: format_ % x, list_))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return list(map(lambda x: format_.format(x), list_))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(map(lambda x: format_.format(x), list_))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(map(lambda x: format_.format(x), list_))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(list_, format_):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return \"\".join(list(map(lambda x: format_.format(x), list_)))\n    \n    \ndef add_string(lis"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if list_ == None:\n        return None\n    return list(map(lambda x: string.format(x), list_))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i), end='')\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.__add__([string % element for element in list_])\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1={}\n    d2={}\n    d3={}\n    for i in range(0,len(l1)):\n        d1[l1[i]]=l2[i]\n        d2[l2[i]]=l3[i]\n        d3[l3[i]]=l1[i]\n    return d1,d2,d3\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(0,len(l1)):\n        dictionary[l1[i]] = {l2[i]:l3[i]}\n    return dictionary\n    \nprint(convert_list_dictionary(['a', 'b', 'c', 'd'], ['1', '2', '3', '4'], ['1', '2', '3', '4']))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_list = []\n    if len(l1) > 0:\n        result_list.append({\"_type\": \"list\", \"value\": l1})\n    if len(l2) > 0:\n        result_list.append({\"_type\": \"list\", \"value\": l2})\n    if len(l3) > 0:\n        result_list.append({\"_type\": \"list\", \"value\": l3})\n    return result_list\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    i = 0\n    while i < len(l1):\n        j = 0\n        dic[l1[i]] = l2[i]\n        while j < len(l2):\n            if l1[i] == l2[j]:\n                dic[l1[i]] = l3[j]\n            j += 1\n        i += 1\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(0, len(l1)):\n        dictionary.update({l1[i]: l2[i]})\n        dictionary.update({l3[i]: l2[i]})\n    print(dictionary)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dict = {}\n    l2_dict = {}\n    l3_dict = {}\n    for key in l1:\n        l1_dict[key] = []\n    for key in l2:\n        l2_dict[key] = []\n    for key in l3:\n        l3_dict[key] = []\n    for x in range(len(l1)):\n        l1_dict[l1[x]].append(l2[x])\n    for x in range(len(l2)):\n        l2_dict[l2[x]].append(l3[x])\n    for x in range(len(l3)):\n        l3_dict[l3[x]].append(l1[x])\n    return l1_dict, l2_dict, l3_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = {}\n    for i in range(len(l1)):\n        if type(l1[i]) is list:\n            my_dict[l1[i][0]] = l2[i]\n        else:\n            my_dict[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        if type(l3[i]) is list:\n            my_dict[l3[i][0]] = l3[i]\n        else:\n            my_dict[l3[i]] = l3[i]\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict()\n    d2 = dict()\n    d3 = dict()\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dd = {}\n    dd[\"data\"] = []\n    for i in range(0,len(l1)):\n        dd[\"data\"].append({\"data\": l1[i], \"label\": l2[i], \"ip\": l3[i]})\n    return dd\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        d = {}\n        for j in range(len(l2)):\n            d[l2[j]] = l3[i][j]\n        l1[i] = d\n    return l1\n    \nlist1 = [[{1:2},{3:4}],[{1:2},{4:5}],[{6:7}]]\nlist2 = ['red','blue','orange']\nlist3 = [[1,2,3],[4,5,6],[7,8,9]]\nprint(convert_list_dictionary(list1, list2, list3))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum (n):\n        return max (n // 2 + n // 3 + n // 4 + n // 5, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return max(get_max_sum(n // 2), n)\n    if n % 3 == 0:\n        return max(get_max_sum(n // 3), n)\n    if n % 4 == 0:\n        return max(get_max_sum(n // 4), n)\n    if n % 5 == 0:\n        return max(get_max_sum(n // 5), n)\n    return n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n    for i in range(1, n + 1):\n        res = max(res, (max_divide_3(i) + max_divide_4(i) + max_divide_5(i) + i))\n    return res\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 6\n        if n == 4:\n            return 10\n        if n == 5:\n            return 15\n        return max(f(n/2), f(n/3), f(n/4), f(n/5), n)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    return max( get_max_sum( n / 2 ) + get_max_sum( n / 3 ) + get_max_sum( n / 4 ) + get_max_sum( n / 5 ), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1 or n == 2:\n        return n\n    else:\n        return max( get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n % 2 == 0 and n!= 0:\n        return get_max_sum(n//2)\n    if n % 3 == 0 and n!= 0:\n        return get_max_sum(n//3)\n    if n % 4 == 0 and n!= 0:\n        return get_max_sum(n//4)\n    if n % 5 == 0 and n!= 0:\n        return get_max_sum(n//5)\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 3:\n        return n\n    else:\n        return max(n, get_max_sum(n // 2), get_max_sum(n // 3), get_max_sum(n // 4), get_max_sum(n // 5))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base cases\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return n\n    if n == 2:\n        return n\n    if n == 3:\n        return n\n    if n == 4:\n        return n\n    if n == 5:\n        return n\n    if n == 6:\n        return n\n    if n == 7:\n        return n\n    if n == 8:\n        return n\n    if n == 9:\n        return n\n    if n == 10:\n        return n\n    if n == 11:\n        return n\n    if n == 12:\n        return n\n    if n == 13:\n        return n\n    if n == 14:\n        return n\n    if n == 15:\n        return n\n    if n == 16:\n        return n\n    if n == 17:\n        return n\n    if n == 18:\n        return n\n    if n == 19:\n        return n\n    if n == 20:\n        return n\n    if n == 21:\n        return n\n    if n == 22:\n        return n\n    if n == 23:\n        return n\n    if n == 24:\n        return n\n    if n == 25:\n        return n\n    if n == 26:\n        return n\n    if n == 27:\n        return n\n    if n == 28:\n        return n\n    if n == 29:\n        return n\n    if n == 30:\n        return n\n    if n == 31:\n        return n\n    if n == 32:\n        return n\n    if n == 33:\n        return n\n    if n == 34:\n        return n\n    if n == 35:\n        return n\n    if n == 36:\n        return n\n    if n == 37:\n        return n\n    if n == 38:\n        return n\n    if n == 39:\n        return n\n    if n == 40:\n        return n\n    if n == 41:\n        return n\n    if n == 42:\n        return n\n    if n == 43:\n        return n\n    if n == 44:\n        return n\n    if n == 45:\n        return n\n    if n == 46:\n        return n\n    if n == 47:\n        return n\n    if n == 48:\n        return n\n    if n == 49:\n        return n\n    if n == 50:\n        return n\n    if n == 51:\n        return n\n    if n == 52:\n        return n\n    if n == 53:\n        return n\n    if n == 54:\n        return n\n    if n == 55:\n        return n\n    if n == 56:\n        return n\n    if n == 57:\n        return n\n    if n == 58:\n        return n\n    if n == 59:\n        return n\n    if n == 60:\n        return n\n    if n == 61:\n        return n\n    if n == 62:\n        return n\n    if n == 63:\n        return n\n    if n == 64:\n        return n\n    if n == 65:\n        return n\n    if n == 66:\n        return n\n    if n == 67:\n        return n\n    if n == 68:\n        return n\n    if n == 69:\n        return n\n    if n == 70:\n        return n\n    if n == 71:\n        return n\n    if n == 72:\n        return n\n    if n == 73:\n        return n\n    if n == 74:\n        return n\n    if n == 75:\n        return n\n    if n == 76:\n        return n\n    if n == 77:\n        return n\n    if n == 78:\n        return n\n    if n == 79:\n        return n\n    if n == 80:\n        return n\n    if n == 81:\n        return n\n    if n == 82:\n        return n\n    if n == 83:\n        return n\n    if n == 84:\n        return n\n    if n == 85:\n        return n\n    if n == 86:\n        return n\n    if n == 87:\n        return n\n    if n == 88:\n        return n\n    if n == 89:\n        return n\n    if n == 90:\n        return n\n    if n == 91:\n        return n\n    if n == 92:\n        return n\n    if n == 93:\n        return n\n    if n == 94:\n        return n\n    if n == 95:\n        return n\n    if n == 96:\n        return n\n    if n == 97:\n        return n\n    if n == 98:\n        return n\n    if n == 99:\n        return n\n    if n == 100:\n        return n\n    if n == 101:\n        return n\n    if n == 102:\n        return n\n    if n == 103:\n        return n\n    if n == 104:\n        return n\n    if n == 105:\n        return n\n    if n == 106:\n        return n\n    if n == 107:\n        return n\n    if n == 108:\n        return n\n    if n == 109:\n        return n\n    if n == 110:\n        return n\n    if n == 111:\n        return n\n    if n == 112:\n        return n\n    if n == 113:\n        return n\n    if n == 114:\n        return n\n    if n == 115:\n        return n\n    if n == 116:\n        return n\n    if n == 117:\n        return n\n    if n == 118:\n        return n\n    if n == 119:\n        return n\n    if n == 120:\n        return n\n    if n == 121:\n        return n\n    if n == 122:\n        return n\n    if n == 123:\n        return n\n    if n == 124:\n        return n\n    if n == 125:\n        return n\n    if n == 126:\n        return n\n    if n == 127:\n        return n\n    if n == 128:\n        return n\n    if n == 129:\n        return n\n    if n == 130:\n        return n\n    if n == 131:\n        return n\n    if n == 132:\n        return n\n    if n == 133:\n        return n\n    if n == 134:\n        return n\n    if n == 135:\n        return n\n    if n == 136:\n        return n\n    if n == 137:\n        return n\n    if n == 138:\n        return n\n    if n == 139:\n        return n\n    if n == 140:\n        return n\n    if n == 141:\n        return n\n    if n == 142:\n        return n\n    if n == 143:\n        return n\n    if n == 144:\n        return n\n    if n == 145:\n        return n\n    if n == 146:\n        return n\n    if n == 147:\n        return n\n    if n == 148:\n        return n\n    if n == 149:\n        return n\n    if n == 150:\n        return n\n    if n == 151:\n        return n\n    if n == 152:\n        return n\n    if n == 153:\n        return n\n    if n == 154:\n        return n\n    if n == 155:\n        return n\n    if n == 156:\n        return n\n    if n == 157:\n        return n\n    if n == 158:\n        return n\n    if n == 159:\n        return n\n    if n == 160:\n        return n\n    if n == 161:\n        return n\n    if n == 162:\n        return n\n    if n == 163:\n        return n\n    if n == 164:\n        return n\n    if n == 165:\n        return n\n    if n == 166:\n        return n\n    if n == 167:\n        return n\n    if n == 168:\n        return n\n    if n == 169:\n        return n\n    if n == 170:\n        return n\n    if n == 171:\n        return n\n    if n == 172:\n        return n\n    if n == 173:\n        return n\n    if n == 174:\n        return n\n    if n == 175:\n        return n\n    if n == 176:\n        return n\n    if n == 177:\n        return n\n    if n == 178:\n        return n\n    if n == 179:\n        return n\n    if n == 180"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = len(input_list[0])\n    max_element = input_list[0]\n    for element in input_list:\n        if len(element) > maximum:\n            maximum = len(element)\n            max_element = element\n    return max_element\n    \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length_list = []\n    for i in input_list:\n        if len(i) == len(max_length_list):\n            max_length_list.append(i)\n        elif len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_len = []\n    for element in input_list:\n        list_len.append(len(element))\n    max_len = max(list_len)\n    max_index = list_len.index(max_len)\n    return input_list[max_index]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_length = len(input_list)\n    max_length_list = input_list[0]\n    if list_length > 0:\n        for i in range(0, list_length):\n            if len(max_length_list) < len(input_list[i]):\n                max_length_list = input_list[i]\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #make a dictionary to store the number of each digit in the list\n    number_count = {}\n    for i in input_list:\n        for j in i:\n            if j in number_count:\n                number_count[j] += 1\n            else:\n                number_count[j] = 1\n    #return the max length number in the dictionary\n    return max(number_count, key = number_count.get)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = -1\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    print(\"Maximum length in the list is: \",max_len)\n    for i in input_list:\n        if max_len == len(i):\n            print(\"The list with maximum length is: \",i)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Your Code Below\n    m_list = []\n    m_max = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > m_max:\n            m_max = len(input_list[i])\n            m_list = input_list[i]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) >= max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if input_list == []:\n        return 0\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = -1\n    result = []\n    for each in input_list:\n        if len(each) > max_len:\n            result = [each]\n            max_len = len(each)\n        elif len(each) == max_len:\n            result.append(each)\n    return result\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tmp = set(test_tup)\n    if len(tmp) == len(test_tup):\n        print('All distinct')\n    else:\n        print('Not all distinct')\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if test_tup[i]==test_tup[j] and i!=j:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = test_tup\n    new_tup = set(tup)\n    new_tup = list(new_tup)\n    if new_tup == tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    res = True\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if test_tup[i] == test_tup[j] and j!= i:\n                res = False\n                break\n    return res\n    \n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set(test_tup)\n    if len(set_tup) == len(test_tup):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    temp_list = []\n    for i in test_tup:\n        if i not in temp_list:\n            temp_list.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # your code here\n    for i in range(len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            if(test_tup[i]==test_tup[j]):\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup:\n        return len(test_tup) == len(set(test_tup))\n    return False\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #print(str1.find())\n    #print(len(str1))\n    #print(str1.count())\n    #print(str1.replace(\"\",\"\"))\n    #print(str1.split())\n    #print(str1.split(\"a\")[0])\n    #print(str1[1:5])\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    new_list = list(str1)\n    for i in range(0, len(new_list)):\n        if new_list.count(new_list[i]) == 1:\n            return new_list[i]\n    return 'No non-repeating character found'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == str1[j] and i!= j:\n                break\n        else:\n            return str1[i]\n    return None\nprint(first_non_repeating_character(\"aaaaaabbbbbbbbbbbbbccccccc\"))\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    res = ''\n    for x in str1:\n        if x in res:\n            res = res.replace(x,'')\n        else:\n            res = res + x\n    return res\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # TODO: your code here\n    # - use a dictionary or set to keep count of characters\n    # - use a for loop to find the first non-repeated character\n    return\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char = str1[0]\n    for i in str1:\n        if i in str1[1:]:\n            char = i\n            break\n    return char\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a set to store the characters\n    char_set = set()\n    # For loop to check for non-repeated characters\n    for i in str1:\n        # Check if the character is in the set\n        if i in char_set:\n            # Else we want to add it back to the set\n            char_set.add(i)\n        else:\n            # If not we want to return it\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    for key, value in char_count.items():\n        if value == 1:\n            return key\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = list(str1)\n    for i in range(0,len(str1)):\n        if str1[i] in char_list[i+1:]:\n            return None\n    return char_list[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #First we check if the string is empty\n    if len(str1) == 0:\n        print(\"Given string is empty\")\n        return \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_2(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_3(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_4(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_5(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_6(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_7(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_8(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_9(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_10(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_11(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_12(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_13(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_14(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_15(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_16(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_17(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_18(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_19(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_20(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_21(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_22(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_23(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_24(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_25(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_26(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_27(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_28(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_29(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_30(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_31(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_32(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_33(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_34(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_35(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_36(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_37(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_38(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_39(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\ndef check_char_40(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return len(string) == 1\ndef check_char_41(string):\n    '''\n    Write a function to chec"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    str1 = string[0]\n    str2 = string[len(string)-1]\n    if (str1 == str2):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.match(regex,string)!= None):\n        return True\n    else:\n        return False\ndef check_space(string):\n    '''\n    Write a function to check whether the given string contains only whitespaces or not.\n    '''\n    if(re.match(r'\\s',string) == None):\n        return False\n    else:\n        return True\ndef check_length(string):\n    '''\n    Write a function to check whether the given string is having length of 8 or not.\n    '''\n    if(len(string) == 8):\n        return True\n    else:\n        return False\ndef check_all_char(string):\n    '''\n    Write a function to check whether the given string contains any alphabet, numeric, or special characters.\n    '''\n    if(re.search(r'[a-zA-Z0-9]',string)!= None):\n        return True\n    else:\n        return False\ndef check_pass(string):\n    '''\n    Write a function to check whether the password follows the given password policy or not.\n    '''\n    min_length = 6\n    max_length = 8\n    password = string\n    if(len(string) >= min_length and len(string) <= max_length):\n        if(re.search(r'[a-z]',string)!= None):\n            return True\n        elif(re.search(r'[A-Z]',string)!= None):\n            return True\n        elif(re.search(r'[0-9]',string)!= None):\n            return True\n        elif(re.search(r'[@#$]',string)!= None):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_pass_count(string):\n    '''\n    Write a function to check whether the password meets the criteria of minimum 8 characters, \n    maximum 16 characters, and a mix of uppercase, lowercase, and numbers.\n    '''\n    if(len(string) >= 8 and len(string) <= 16):\n        if(re.search(r'[A-Z]|[a-z]|[0-9]',string)!= None):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_pass_spec(string):\n    '''\n    Write a function to check whether the password satisfies the password policy spec.\n    '''\n    min_length = 2\n    max_length = 6\n    password = string\n    if(len(string) >= min_length and len(string) <= max_length):\n        if(re.search(r'[A-Z]',string)!= None):\n            return True\n        elif(re.search(r'[a-z]',string)!= None):\n            return True\n        elif(re.search(r'[0-9]',string)!= None):\n            return True\n        elif(re.search(r'[@#$]',string)!= None):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_pass_spec_1(string):\n    '''\n    Write a function to check whether the password satisfies the password policy spec.\n    '''\n    min_length = 8\n    max_length = 10\n    password = string\n    if(len(string) >= min_length and len(string) <= max_length):\n        if(re.search(r'[A-Z]',string)!= None):\n            return True\n        elif(re.search(r'[a-z]',string)!= None):\n            return True\n        elif(re.search(r'[0-9]',string)!= None):\n            return True\n        elif(re.search(r'[@#$]',string)!= None):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_pass_spec_2(string):\n    '''\n    Write a function to check whether the password satisfies the password policy spec.\n    '''\n    min_length = 8\n    max_length = 10\n    password = string\n    if(len(string) >= min_length and len(string) <= max_length):\n        if(re.search(r'[A-Z]',string)!= None):\n            return True\n        elif(re.search(r'[a-z]',string)!= None):\n            return True\n        elif(re.search(r'[0-9]',string)!= None):\n            return True\n        elif(re.search(r'[@#$]',string)!= None):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_pass_spec_3(string):\n    '''\n    Write a function to check whether the password satisfies the password policy spec.\n    '''\n    min_length = 8\n    max_length = 10\n    password = string\n    if(len(string) >= min_length and len(string) <= max_length):\n        if(re.search(r'[A-Z]',string)!= None):\n            return True\n        elif(re.search(r'[a-z]',string)!= None):\n            return True\n        elif(re.search(r'[0-9]',string)!= None):\n            return True\n        elif(re.search(r'[@#$]',string)!= None):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_pass_spec_4(string):\n    '''\n    Write a function to check whether the password satisfies the password policy spec.\n    '''\n    min_length = 6\n    max_length = 10\n    password = string\n    if(len(string) >= min_length and len(string) <= max_length):\n        if(re.search(r'[A-Z]',string)!= None):\n            return True\n        elif(re.search(r'[a-z]',string)!= None):\n            return True\n        elif(re.search(r'[0-9]',string)!= None):\n            return True\n        elif(re.search(r'[@#$]',string)!= None):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_pass_spec_5(string):\n    '''\n    Write a function to check whether the password satisfies the password policy spec.\n    '''\n    min_length = 8\n    max_length = 10\n    password = string\n    if(len(string) >= min_length and len(string) <= max_length):\n        if(re.search(r'[A-Z]',string)!= None):\n            return True\n        elif(re.search(r'[a-z]',string)!= None):\n            return True\n        elif(re.search(r'[0-9]',string)!= None):\n            return True\n        elif(re.search(r'[@#$]',string)!= None):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_pass_spec_6(string):\n    '''\n    Write a function to check whether the password satisfies the password policy spec.\n    '''\n    min_length = 8\n    max_length = 10\n    password = string\n    if(len(string) >= min_length and len(string) <= max_length):\n        if(re.search(r'[A-Z]',string)!= None):\n            return True\n        elif(re.search(r'[a-z]',string)!= None):\n            return True\n        elif(re.search(r'[0-9]',string)!= None):\n            return True\n        elif(re.search(r'[@#$]',string)!= None):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_pass_spec_7(string):\n    '''\n    Write a function to check whether the password satisfies the password policy spec.\n    '''\n    min_length = 8\n    max_length = 10\n    password = string\n    if(len(string) >= min_length and len"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex,string)):\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return(re.match(regex,string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\nprint(check_char(\"abc\"))\nprint(check_char(\"abc.cba\"))\nprint(check_char(\"A\"))\nprint(check_char(\"B\"))\nprint(check_char(\"\"))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def get_median(a,b,c):\n        l = sorted([a,b,c])\n        return l[1]\n    if a <= b and b <= c:\n        return get_median(a,b,c)\n    if a <= c and c <= b:\n        return get_median(a,c,b)\n    if b <= a and a <= c:\n        return get_median(b,a,c)\n    if b <= c and c <= a:\n        return get_median(b,c,a)\n    if c <= a and a <= b:\n        return get_median(c,a,b)\n    if c <= b and b <= a:\n        return get_median(c,b,a)\n    \ndef integer_binary_search(arr,l,r,target):\n    '''\n    Write a function to find the index of a given element in a sorted array.\n    '''\n    while l <= r:\n        mid = l + (r - l)//2\n        if arr[mid] == target:\n            return mid\n        if arr[mid] > target:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return None\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Use this code below if the function does not work:\n    # import random\n    # a = random.randint(0, 9)\n    # b = random.randint(0, 9)\n    # c = random.randint(0, 9)\n    # return (a+b+c)/2\n    # Use this code below if the function does not work:\n    # sort them in order, then take the median of the first and last elements\n    a.sort()\n    b.sort()\n    c.sort()\n    a_length = len(a)\n    b_length = len(b)\n    c_length = len(c)\n    # if a_length == b_length == c_length:\n    if a_length == b_length:\n        return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    if a_length == b_length:\n        return (a[a_length//2] + c[c_length//2])/2\n    if a_length == c_length:\n        return (b[b_length//2] + c[c_length//2])/2\n    if a_length == c_length:\n        return (a[a_length//2] + b[b_length//2])/2\n    if b_length == c_length:\n        return (a[a_length//2] + b[b_length//2])/2\n    if a_length == b_length == c_length:\n        return (a[a_length//2] + b[b_length//2])/2\n    # if a_length == b_length + 1:\n    #     return a[a_length//2]\n    # if a_length == b_length - 1:\n    #     return b[b_length//2]\n    # if a_length == c_length + 1:\n    #     return c[c_length//2]\n    # if a_length == c_length - 1:\n    #     return b[b_length//2]\n    # if b_length == c_length + 1:\n    #     return c[c_length//2]\n    # if b_length == c_length - 1:\n    #     return a[a_length//2]\n    # if c_length == a_length + 1:\n    #     return b[b_length//2]\n    # if c_length == a_length - 1:\n    #     return c[c_length//2]\n    # if b_length == a_length + 1:\n    #     return c[c_length//2]\n    # if b_length == a_length - 1:\n    #     return a[a_length//2]\n    # if c_length == a_length + 1:\n    #     return b[b_length//2]\n    # if c_length == a_length - 1:\n    #     return a[a_length//2]\n    # if a_length == b_length == c_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if a_length == b_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if a_length == c_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if b_length == a_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if b_length == c_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if a_length == b_length == c_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if a_length == b_length + 1:\n    #     return (a[a_length//2] + c[c_length//2])/2\n    # if a_length == b_length - 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if a_length == c_length + 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if a_length == c_length - 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if b_length == c_length + 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if b_length == c_length - 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if c_length == a_length + 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if c_length == a_length - 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if b_length == a_length == c_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if b_length == a_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if b_length == c_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if a_length == b_length == c_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if a_length == b_length + 1:\n    #     return (a[a_length//2] + c[c_length//2])/2\n    # if a_length == b_length - 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if a_length == c_length + 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if a_length == c_length - 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if b_length == a_length + 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if b_length == a_length - 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if c_length == a_length + 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if c_length == a_length - 1:\n    #     return (a[a_length//2] + b[b_length//2])/2\n    # if b_length == a_length == c_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if b_length == a_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if b_length == c_length:\n    #     return (a[a_length//2] + b[b_length//2] + c[c_length//2])/3\n    # if a_length == b_length == c_length:\n    #     retur"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    s = a+b+c\n    s = s/2\n    s = int(s)\n    return s\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a,b,c])\n    return numbers[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #a = int(input(\"Enter first number: \"))\n    #b = int(input(\"Enter second number: \"))\n    #c = int(input(\"Enter third number: \"))\n    \n    #a = int(input(\"Enter first number: \"))\n    #b = int(input(\"Enter second number: \"))\n    #c = int(input(\"Enter third number: \"))\n    \n    #a = int(input(\"Enter first number: \"))\n    #b = int(input(\"Enter second number: \"))\n    #c = int(input(\"Enter third number: \"))\n    \n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    c = int(input(\"Enter third number: \"))\n    \n    \n    if a<b and a<c:\n        if b<c:\n            print(\"Median: \", c)\n        else:\n            print(\"Median: \", b)\n    elif b<a and b<c:\n        if a<c:\n            print(\"Median: \", a)\n        else:\n            print(\"Median: \", c)\n    elif c<a and c<b:\n        if a<b:\n            print(\"Median: \", a)\n        else:\n            print(\"Median: \", b)\n    else:\n        print(\"Median: \", b)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = (a,b,c)\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    print(\"a = \" + str(a))\n    print(\"b = \" + str(b))\n    print(\"c = \" + str(c))\n    if a <= b and a <= c:\n        print(str(a) + \" is the median\")\n    elif b <= a and b <= c:\n        print(str(b) + \" is the median\")\n    else:\n        print(str(c) + \" is the median\")\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (sorted([a, b, c])[1])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    \n    if a[1] == b[1] == c[1]:\n        print(a[1])\n    elif a[1] == b[1] or a[1] == c[1] or b[1] == c[1]:\n        print(a[1])\n    elif a[1] == b[0] and a[2] == b[0] and a[1] == c[0]:\n        print(a[1])\n    elif a[1] == b[0] and a[2] == c[0] and a[1] == c[1]:\n        print(a[1])\n    elif a[1] == b[0] and a[2] == c[1] and a[1] == c[0]:\n        print(a[1])\n    elif a[2] == b[0] and a[1] == b[1] and a[2] == c[0]:\n        print(a[2])\n    elif a[2] == b[0] and a[1] == c[1] and a[2] == c[0]:\n        print(a[2])\n    elif a[2] == b[0] and a[1] == c[0] and a[2] == c[1]:\n        print(a[2])\n    else:\n        print(a[2])\n        \n    \n    \nmedian_numbers([1,2,4,7], [2,4,6,7], [1,3,5,8])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_of_three_numbers=[a,b,c]\n    list_of_three_numbers.sort()\n    if len(list_of_three_numbers)%2==0:\n        middle_number=list_of_three_numbers[len(list_of_three_numbers)//2]\n    else:\n        middle_number=list_of_three_numbers[len(list_of_three_numbers)//2]\n    return middle_number\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(num) for num in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += (num % 10)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum = sum + nums[i]\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in nums if x.isdigit()])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum_of_digits(num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, str(num)))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # sum = 0\n    # for num in nums:\n    #     sum += num % 10\n    # return sum\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = []\n    for i in nums:\n        res.append(sum(list(str(i))))\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += int(str(num)[-1])\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    return sum\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # YOUR CODE HERE\n    tup_1 = []\n    tup_2 = []\n    for i in range(len(test_tup1)):\n        tup_1.append(test_tup1[i])\n    for j in range(len(test_tup2)):\n        tup_2.append(test_tup2[j])\n    xor = 0\n    for k in range(len(tup_1)):\n        xor = xor ^ tup_1[k]\n        xor = xor ^ tup_2[k]\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = 0\n    for i in range(len(test_tup1)):\n        x += (test_tup1[i] ^ test_tup2[i])\n    return x\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tuple = ()\n    for index in range(len(test_tup1)):\n        xor_tuple += (test_tup1[index] ^ test_tup2[index],)\n    return xor_tuple\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (0,0)\n    result = tuple(x^y for x, y in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length\")\n    else:\n        tup1 = list(test_tup1)\n        tup2 = list(test_tup2)\n        xor_tup = []\n        for i in range(len(tup1)):\n            if tup1[i] == tup2[i]:\n                xor_tup.append(0)\n            else:\n                xor_tup.append(1)\n    return tuple(xor_tup)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict_1 = {}\n    for i in test_list:\n        for j in i:\n            if j in dict_1:\n                dict_1[j] += 1\n            else:\n                dict_1[j] = 1\n    return dict_1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    a=test_list\n    t=0\n    for i in a:\n        if i in a:\n            t=t+1\n    return t\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    counter = collections.Counter(test_list)\n    return counter\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for num in test_list:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i]==test_list[j]:\n                count+=1\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(i) for i in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for i in range(len(test_list)):\n        freq_list.append(len(set(test_list[i])))\n    return freq_list\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_of_tuples = len(test_list)\n    freq_dict = dict()\n    for i in range(num_of_tuples):\n        if test_list[i] in freq_dict:\n            freq_dict[test_list[i]] += 1\n        else:\n            freq_dict[test_list[i]] = 1\n    return freq_dict\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    for i in range(0, len(tup1)):\n        tup1[i] = (tup1[i][0] + tup2[i][0], tup1[i][1] + tup2[i][1])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = (1, 2, ('a', 'b', 'c'), (4, 5, 'd'), (7, 8, 'e', 'f'))\n    test_tup2 = (3, 4, ('g', 'h', 'i'), (9, 10, 'j'), (12, 13, 'k', 'l'))\n    \n    test_tup3 = test_tup1 + test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'The length of two tuples are different'\n    else:\n        new_tup = []\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] + test_tup2[i])\n        return tuple(new_tup)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    out_tup = ()\n    for i in range(0,len(test_tup1)):\n        out_tup = out_tup + (test_tup1[i] + test_tup2[i],)\n    return out_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuple(tup1, tup2):\n        a, b = tup1\n        c, d = tup2\n        return (a + c, b + d)\n    return add_tuple(test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        new_tup = []\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] + test_tup2[i])\n        return tuple(new_tup)\n    else:\n        raise Exception(\"Inputs are of different length.\")\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    a = []\n    for i in range(len(test_tup1)):\n        a.append((test_tup1[i]+test_tup2[i]))\n    return tuple(a)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return_tup = list()\n    for x,y in zip(test_tup1, test_tup2):\n        return_tup.append(x+y)\n    return tuple(return_tup)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    list1, list2 = test_tup1[0], test_tup2[0]\n    i, j = 0, 0\n    list_tup = []\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            list_tup.append(list1[i])\n            i += 1\n        else:\n            list_tup.append(list2[j])\n            j += 1\n    while i < len(list1):\n        list_tup.append(list1[i])\n        i += 1\n    while j < len(list2):\n        list_tup.append(list2[j])\n        j += 1\n    return list_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = test_tup1[1]\n    tup2 = test_tup2[1]\n    tup1 = tup1 + tup2\n    tup1 = (tup1)\n    return test_tup1, tup1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        print(f\"{a} is minimum among {b} and {a}\")\n    elif b > a:\n        print(f\"{b} is minimum among {a} and {b}\")\n    else:\n        print(\"Both are equal\")\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<=b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # code here\n    if a > b:\n        print(\"Minimum number is\",a)\n    else:\n        print(\"Minimum number is\",b)\n    "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(f'Minimum of {a} and {b} is {b}')\n    elif a>b:\n        print(f'Minimum of {a} and {b} is {a}')\n    else:\n        print(f'The numbers are equal : {a}')\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \ndef minimum(a"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        print(a)\n    elif a == b:\n        print(a)\n    else:\n        print(b)\n        \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuple1[0] in tuplex) and (tuple1[1] in tuplex) and (tuple1[2] in tuplex) :\n        print('element found')\n    else :\n        print('element not found')\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        print(\"Yes, tuple x and tuple y have same element\")\n    else:\n        print(\"No, tuple x and tuple y don't have same element\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return False if tuplex not in tuple1 else True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1.count(tuplex) > 0\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count = 0\n    for x in tuplex:\n        if x == tuple1[count]:\n            return True\n        count = count + 1\n    return False\n    \n    \n    \ndef check_char(string,char): \n    '''\n    Write a function that returns the count of a character within a string.\n    '''\n    count = 0\n    for x in string:\n        if x == char:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] == tuplex[0] or tuple1[1] == tuplex[1] or tuple1[2] == tuplex[2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex == tuple1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    n = x\n    s = 0\n    while (n!= 0): \n        r = n % 10\n        s = s + r * r \n        n = n // 10\n    if (s % 2 == 0): \n        print(\"Number is Even\") \n    else: \n        print(\"Number is Odd\") \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    '''\n    \n    we have to find the parity of a given number x and check if it is odd or even.\n    \n    '''\n    \n    # Function to find parity of number\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = 0\n    if x % 2 == 0:\n        result = x / 2\n    return result\n    \ndef find_Parity_1(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\ndef find_Parity1(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = 0\n    while x > 0:\n        rem = x % 10\n        y = y + rem\n        x = x//10\n    if y % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    # print(bin(x))\n    while (x):\n        parity += x & 1\n        x >>= 1\n    return parity % 2 == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x&1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print('No Parity')\n    else:\n        print('Parity is odd')\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # order of digits in original string is ascending\n    # starting with the digit at the end of the string, we can get the next bigger number by combining the digits after the current digit and moving the previous digit to the end\n    # so we can start from the end and find the next bigger number, keep moving digits to the end until we find the next bigger number\n    # then the last digit we have, is the biggest one\n    # so we can just get the next bigger number by simply swapping the current digit with the last digit\n    # which is the same as rearranging the string\n    # return a new number in the next bigger order\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Two pointers: \n    # 1. Find the first number with two adjacent zeros \n    # 2. Reorder from left to right\n    # 3. Convert to int \n    # 4. Return int\n    \n    # Convert to int \n    int_num = str(n)\n    new_num = int_num[::-1]\n    \n    # Find the first number with two adjacent zeros\n    for i in range(len(new_num) - 1):\n        if new_num[i] == '0' and new_num[i + 1] == '0':\n            # Swap\n            first_zero = i\n            break\n        \n    # Reorder from left to right\n    for i in range(len(new_num)):\n        if i > first_zero:\n            temp = new_num[i]\n            new_num[i] = new_num[first_zero]\n            new_num[first_zero] = temp\n    \n    # Convert back to string\n    return int(new_num)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if is_it_integer(n):\n        if int(n) == 0:\n            return \"0\"\n        else:\n            digits = list(str(n))\n            i = 0\n            while i < len(digits) - 1:\n                if digits[i] <= digits[i + 1]:\n                    i += 1\n                    continue\n                else:\n                    if i == len(digits) - 1:\n                        digits[i], digits[i + 1] = digits[i + 1], digits[i]\n                        break\n                    else:\n                        digits[i], digits[i + 1] = digits[i + 1], digits[i]\n                        for j in range(i + 1, len(digits)):\n                            digits[j] = 0\n                        break\n            return \"\".join(str(x) for x in digits)\n    else:\n        return \"N/A\"\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    c = 0\n    for i in range(len(n)):\n        if int(n[i]) > c:\n            c = int(n[i])\n    \n    for i in range(len(n)):\n        if int(n[i]) == c:\n            n = n[:i] + str(c + 1) + n[i+1:]\n            break\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n > 9:\n        n = list(str(n))\n        #print(n)\n        l = 0\n        for i in range(len(n)):\n            if n[i] > n[l]:\n                l = i\n        n[l],n[i] = n[i],n[l]\n        s = ''.join(n)\n        return int(s)\n    elif n > 0:\n        return 1\n    else:\n        return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = int(n)\n    while(True):\n        n = sorted(str(n))\n        if int(''.join(n)) > n:\n            break\n        n = int(''.join(n))\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 9:\n        return 15\n    if n == 15:\n        return 9\n    str_n = list(str(n))\n    for i in range(len(str_n) - 1, 0, -1):\n        if str_n[i] > str_n[i - 1]:\n            str_n[i - 1], str_n[i] = str_n[i], str_n[i - 1]\n            break\n    return int(\"\".join(str_n))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort()\n    digits = [int(d) for d in digits]\n    result = int(''.join(str(d) for d in digits))\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(map(int, str(n)))\n    i = n.index(max(n))\n    n[i] = 0\n    n.insert(i, max(n))\n    return int(''.join(map(str, n)))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    k = k - 1\n    if k < 0 or nums1 == None or nums2 == None:\n        return None\n    \n    max_heap = []\n    dict_nums = {}\n    \n    for i in nums1:\n        if i in dict_nums:\n            dict_nums[i] += 1\n        else:\n            dict_nums[i] = 1\n    \n    for i in nums2:\n        if i in dict_nums:\n            dict_nums[i] += 1\n        else:\n            dict_nums[i] = 1\n    \n    for i in nums1:\n        heapq.heappush(max_heap, [-dict_nums[i], i])\n    \n    while k > 0:\n        i1 = heapq.heappop(max_heap)[1]\n        i2 = heapq.heappop(max_heap)[1]\n        heapq.heappush(max_heap, [-dict_nums[i1] - dict_nums[i2], i1])\n        k -= 1\n    return list(max_heap)\n    \ndef k_smallest_pairs_optimized(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    k = k - 1\n    if k < 0 or nums1 == None or nums2 == None:\n        return None\n    \n    # nums1_set = set(nums1)\n    # nums2_set = set(nums2)\n    # nums1_hash = {}\n    # for i in nums1:\n    #     nums1_hash[i] = nums1.count(i)\n    \n    # nums2_hash = {}\n    # for i in nums2:\n    #     nums2_hash[i] = nums2.count(i)\n    \n    nums1_hash = {}\n    nums2_hash = {}\n    for i in nums1:\n        if i in nums1_hash:\n            nums1_hash[i] += 1\n        else:\n            nums1_hash[i] = 1\n    \n    for i in nums2:\n        if i in nums2_hash:\n            nums2_hash[i] += 1\n        else:\n            nums2_hash[i] = 1\n    \n    max_heap = []\n    \n    # for i in nums1:\n    #     for j in nums2:\n    #         if j in nums1_hash and i in nums2_hash and nums1_hash[j]!= 0:\n    #             heapq.heappush(max_heap, [-(nums1_hash[j] + nums2_hash[i]), i, j])\n    #         elif j not in nums1_hash:\n    #             heapq.heappush(max_heap, [-(nums2_hash[i] + 1), i, j])\n    #         elif i not in nums2_hash:\n    #             heapq.heappush(max_heap, [-(nums1_hash[j] + 1), j, i])\n    \n    # if k <= len(max_heap):\n    #     for i in range(k):\n    #         heapq.heappop(max_heap)\n    \n    for i in nums1:\n        if i in nums1_hash:\n            heapq.heappush(max_heap, [-nums1_hash[i], i, -1])\n        else:\n            heapq.heappush(max_heap, [1, i, -1])\n    \n    for i in nums2:\n        if i in nums2_hash:\n            heapq.heappush(max_heap, [-nums2_hash[i], -i, i])\n        else:\n            heapq.heappush(max_heap, [1, -i, i])\n    \n    while k > 0:\n        i1 = heapq.heappop(max_heap)[1]\n        i2 = heapq.heappop(max_heap)[1]\n        heapq.heappush(max_heap, [-nums1_hash[i1] - nums2_hash[i2], i1, -1])\n        k -= 1\n    return list(max_heap)\n    \ndef k_smallest_pairs_optimized_1(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    k = k - 1\n    if k < 0 or nums1 == None or nums2 == None:\n        return None\n    \n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    nums1_hash = {}\n    nums2_hash = {}\n    for i in nums1:\n        if i in nums1_hash:\n            nums1_hash[i] += 1\n        else:\n            nums1_hash[i] = 1\n    \n    for i in nums2:\n        if i in nums2_hash:\n            nums2_hash[i] += 1\n        else:\n            nums2_hash[i] = 1\n    \n    max_heap = []\n    \n    for i in nums1:\n        if i in nums1_hash:\n            if i in nums2_hash:\n                heapq.heappush(max_heap, [-(nums1_hash[i] + nums2_hash[i]), i, -1])\n            else:\n                heapq.heappush(max_heap, [-(nums1_hash[i] + 1), i, -1])\n        else:\n            if i in nums2_hash:\n                heapq.heappush(max_heap, [-nums2_hash[i], i, -1])\n            else:\n                heapq.heappush(max_heap, [-1, i, -1])\n    \n    if k <= len(max_heap):\n        for i in range(k):\n            heapq.heappop(max_heap)\n    \n    return list(max_heap)\n    \ndef k_smallest_pairs_optimized_2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    k = k - 1\n    if k < 0 or nums1 == None or nums2 == None:\n        return None\n    \n    # nums1_set = set(nums1)\n    # nums2_set = set(nums2)\n    # nums1_hash = {}\n    # for i in nums1:\n    #     if i in nums1_hash:\n    #         nums1_hash[i] += 1\n    #     else:\n    #         nums1_hash[i] = 1\n    \n    # nums2_hash = {}\n    # for i in nums2:\n    #     if i in nums2_hash:\n    #         nums2_hash[i] += 1\n    #     else:\n    #         nums2_hash[i] = 1\n    \n    nums1_hash = {}\n    nums2_hash = {}\n    for i in nums1:\n        if i in nums1_hash:\n            nums1_hash[i] += 1\n        else:\n            nums1_hash[i] = 1\n    \n    for i in nums2:\n        if i in nums2_hash:\n            nums2_hash[i] += 1\n        else:\n            nums2_hash[i] = 1\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    if not nums1 or not nums2:\n        return []\n    if len(nums1) < k:\n        k = k - len(nums1)\n    if len(nums2) < k:\n        k = k - len(nums2)\n    k_smallest = heapq.nsmallest(k, nums1 + nums2)\n    for i, j in enumerate(k_smallest):\n        pairs.append([nums1[i], j])\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    result = []\n    heapq.heapify(result)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] + nums2[j] == 0:\n                heapq.heappush(result, -abs(nums1[i]-nums2[j]))\n                if len(result) == k:\n                    break\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(k):\n        x, y = heapq.heappop(nums1), heapq.heappop(nums2)\n        heapq.heappush(nums1, x + y)\n    return nums1\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort\n    # time O(n+m)\n    # space O(n+m)\n    # total = n + m\n    # time O(n+m)\n    # space O(n+m)\n    \n    # sort\n    # time O(n+m)\n    # space O(n+m)\n    def sort(nums):\n        arr = []\n        for num in nums:\n            heapq.heappush(arr, -num)\n        return arr\n    \n    # time O(n)\n    # space O(1)\n    def findPairs(arr1, arr2, k):\n        # sort arr1\n        # time O(n)\n        # space O(1)\n        sorted_arr1 = sort(arr1)\n        \n        # sort arr2\n        # time O(m)\n        # space O(1)\n        sorted_arr2 = sort(arr2)\n        \n        i = 0\n        j = 0\n        pairs = []\n        while i < len(sorted_arr1) and j < len(sorted_arr2):\n            cur_min = -sorted_arr1[i] - sorted_arr2[j]\n            if i == j or j == len(sorted_arr2):\n                i += 1\n                j = i\n            else:\n                if cur_min < 0:\n                    pairs.append([sorted_arr1[i], sorted_arr2[j]])\n                    j += 1\n                else:\n                    i += 1\n        return pairs[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k <= 0 or k > len(nums1) * len(nums2):\n        return\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0 or nums1 == [] or nums2 == []:\n        return []\n    ans = []\n    if len(nums1) > len(nums2):\n        return ans\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    heap = []\n    for i in range(min(len(nums1), len(nums2))):\n        heapq.heappush(heap, (nums1[i] + nums2[i], nums1[i], nums2[i]))\n    for i in range(k):\n        _, first, second = heapq.heappop(heap)\n        ans.append((first, second))\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # heapq.nsmallest(k, iterable)\n    # return a list of k smallest items from an iterable, smallest first.\n    # if k is None or not given then k = heapq.nlargest(2 * len(nums1), nums1 + nums2)\n    \n    # nums1 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n    # nums2 = [2, 4, 6, 8, 10]\n    # k = 4\n    \n    # output: [(2, 2), (3, 4), (5, 6), (7, 8)]\n    \n    # nums1 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n    # nums2 = [2, 4, 6, 8, 10]\n    # k = 4\n    \n    # output: [(3, 2), (5, 4), (7, 6), (9, 8)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # use heapq.merge\n    pq = nums1 + nums2\n    # [((1, 10), (2, 5)), ((1, 10), (3, 4))]\n    heapq.heapify(pq)\n    res = []\n    for i in range(k):\n        # [((2, 5), (1, 10)), ((3, 4), (1, 10))]\n        pair = heapq.heappop(pq)\n        res.append(pair)\n    return res\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x: x[0])\n    min_product = 1\n    for i in range(len(list1)-1):\n        product = list1[i][0] * list1[i+1][0]\n        if product < min_product:\n            min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for item in list1:\n        # print(item)\n        if min_product == None:\n            min_product = item[0]*item[1]\n        else:\n            if item[0]*item[1] < min_product:\n                min_product = item[0]*item[1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    i = 0\n    j = 1\n    prod_min = list1[0]\n    if len(list1) == 1:\n        return prod_min\n    while j < len(list1):\n        if prod_min[0]*prod_min[1] > list1[j][0]*list1[j][1]:\n            prod_min = list1[j]\n        if prod_min[0]*prod_min[1] < list1[i][0]*list1[i][1]:\n            i = j\n        j += 1\n    return prod_min\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = list(set(list1))\n    if len(list1)==0:\n        print('the list is empty')\n        return 0\n    else:\n        print(list1)\n        min_prod = list1[0][0]*list1[0][1]\n        for i in range(len(list1)):\n            if min_prod > (list1[i][0]*list1[i][1]):\n                min_prod = (list1[i][0]*list1[i][1])\n        return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = []\n    if list1:\n        product.append(list1[0])\n    for i in range(len(list1)):\n        if list1[i][0] > product[0][0]:\n            product.insert(0,list1[i])\n        if list1[i][0] < product[0][0]:\n            product.insert(0,list1[i])\n    return product[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    import math\n    min = list1[0][0]\n    for i in range(0, len(list1)):\n        if(list1[i][0] < min):\n            min = list1[i][0]\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda tup: tup[0] * tup[1])\n    print(list1)\n    return min(x[0] * x[1] for x in list1)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    n = len(list1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if min_product is None or list1[i][0] * list1[j][0] < min_product:\n                min_product = list1[i][0] * list1[j][0]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if list1 == []:\n        return None\n    min_product = list1[0][0]\n    min_pair = list1[0]\n    for i in range(len(list1)):\n        if min_product > list1[i][0]:\n            min_product = list1[i][0]\n            min_pair = list1[i]\n    return min_pair\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    if len(list1) == 1:\n        return list1[0]\n    if len(list1) == 2:\n        return (min(list1[0]),min(list1[1]))\n    min_product_list = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            temp = (list1[i],list1[j])\n            min_product_list.append(temp)\n    min_product_list = sorted(min_product_list)\n    for i in range(len(min_product_list)-1):\n        if min_product_list[i] == min_product_list[i+1]:\n            return min_product_list[i]\n    return min_product_list[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l=[]\n    for i in listval:\n        if type(i)==int:\n            l.append(i)\n        elif type(i)==str:\n            l.append(ord(i))\n        elif type(i)==bool:\n            l.append(i)\n    return min(l)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    m = 0\n    for i in listval:\n        if type(i) == int:\n            if i < m:\n                m = i\n        elif type(i) == str:\n            if m == 0:\n                m = i\n            elif m > i:\n                m = i\n    return m\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l=list(map(int,listval))\n    mn=l[0]\n    for i in l:\n        if i<mn:\n            mn=i\n    return mn\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef sum_val(listval):\n    '''\n    Write a function to find the sum of all the values in a given heterogeneous list.\n    '''\n    sum=0\n    for x in listval:\n        sum=sum+x\n    return sum\n    \ndef avg_val(listval):\n    '''\n    Write a function to find the average of all the values in a given heterogeneous list.\n    '''\n    return sum_val(listval)/len(listval)\n    \ndef print_hetero(listval):\n    '''\n    Write a function to print a heterogeneous list.\n    '''\n    for x in listval:\n        print(x,end=' ')\n    print()\n    \nif __name__ == \"__main__\":\n    list1=[1,2,3,4,5]\n    print(\"The list contains the following values\")\n    print(list1)\n    print(\"Minimum value in the list is \",min_val(list1))\n    print(\"Maximum value in the list is \",max_val(list1))\n    print(\"Sum of all the values in the list is \",sum_val(list1))\n    print(\"Average value in the list is \",avg_val(list1))\n    print_hetero(list1)\n    \n    list2=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]\n    print(\"\\nThe list contains the following values\")\n    print(list2)\n    print(\"Minimum value in the list is \",min_val(list2))\n    print(\"Maximum value in the list is \",max_val(list2))\n    print(\"Sum of all the values in the list is \",sum_val(list2))\n    print(\"Average value in the list is \",avg_val(list2))\n    print_hetero(list2)\n    \n    list3=[\"Python\",\"Java\",\"PHP\",\"Perl\",\"C#\",\"C\",\"C++\",\"Ruby\",\"JavaScript\",\"PHP\",\"Java\"]\n    print(\"\\nThe list contains the following values\")\n    print(list3)\n    print(\"Minimum value in the list is \",min_val(list3))\n    print(\"Maximum value in the list is \",max_val(list3))\n    print(\"Sum of all the values in the list is \",sum_val(list3))\n    print(\"Average value in the list is \",avg_val(list3))\n    print_hetero(list3)\n    \n    list4=[1,2,3,4,5,6,7,8,9]\n    print(\"\\nThe list contains the following values\")\n    print(list4)\n    print(\"Minimum value in the list is \",min_val(list4))\n    print(\"Maximum value in the list is \",max_val(list4))\n    print(\"Sum of all the values in the list is \",sum_val(list4))\n    print(\"Average value in the list is \",avg_val(list4))\n    print_hetero(list4)\n    \n    list5=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    print(\"\\nThe list contains the following values\")\n    print(list5)\n    print(\"Minimum value in the list is \",min_val(list5))\n    print(\"Maximum value in the list is \",max_val(list5))\n    print(\"Sum of all the values in the list is \",sum_val(list5))\n    print(\"Average value in the list is \",avg_val(list5))\n    print_hetero(list5)\n    \n    list6=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n    print(\"\\nThe list contains the following values\")\n    print(list6)\n    print(\"Minimum value in the list is \",min_val(list6))\n    print(\"Maximum value in the list is \",max_val(list6))\n    print(\"Sum of all the values in the list is \",sum_val(list6))\n    print(\"Average value in the list is \",avg_val(list6))\n    print_hetero(list6"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minval = listval[0]\n    for elem in listval:\n        if elem < minval:\n            minval = elem\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word[0] +''.join([w.capitalize() for w in word[1:]])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not re.match(r'^[a-z0-9]*$', word):\n        raise ValueError('Illegal input')\n    return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace(\"_\", \"\")\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub(r'(.)([A-Z][a-z]+)', r'\\2 \\1', word)\n    return s\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub(r'(.)([A-Z][a-z]+)', r'\\2 \\1', word).title()\n    return s\n    \n    \nif __name__ == '__main__':\n    import pytest\n    pytest.main([__file__, '-v', '-s'])"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    if re.match('^_+$', word):\n        return word\n    else:\n        return word[0].upper() + re.sub('_+', '_', word[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower().replace('_','')\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    words = word.split('_')\n    i = 0\n    ret_string = \"\"\n    while i < len(words):\n        if i == 0:\n            ret_string += words[i]\n        else:\n            ret_string += words[i].title()\n        i += 1\n    return ret_string\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'[a-z]+', word)\n    words.extend(re.findall(r'[A-Z]+', word))\n    return ''.join(words).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub(r\"(_|-)\",\" \",word).title()\n    return s[0].lower() + s[1:]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2==0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    print(\"l =\", l)\n    \n    # for i in range(len(l)):\n    #     if l[i]%2!= 0:\n    #         l.remove(l[i])\n    \n    l.remove(l[i])\n    return l\n    \n    \n    # print(l)\n    "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.pop(0)\n    for i in range(len(l)):\n        if l[i]%2==0:\n            l.pop(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i%2!=0:\n            odd.append(i)\n    print(odd)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in range(len(l)):\n        if l[i]%2 == 0:\n            odd_list.append(l[i])\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(l[0])\n    # print(l)\n    return l\n    \n    \ndef remove_odd_2(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # my_list = []\n    # for i in l:\n    #     if i % 2 == 0:\n    #         my_list.append(i)\n    # return my_list\n    return [i for i in l if i % 2 == 0]\n    \ndef sort_first(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    l.sort()\n    return l\n    \ndef sort_first_2(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    l.sort(reverse=False)\n    return l\n    \ndef sort_first_3(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    return sorted(l)\n    \ndef bubble_sort(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(len(l)):\n        for j in range(i,len(l)):\n            if l[i] > l[j]:\n                l[i],l[j]=l[j],l[i]\n    return l\n    \ndef bubble_sort_2(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(len(l)-1):\n        for j in range(i,len(l)):\n            if l[i] > l[j]:\n                l[i],l[j]=l[j],l[i]\n    return l\n    \ndef bubble_sort_3(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    # my_list = []\n    # for i in l:\n    #     if i % 2 == 0:\n    #         my_list.append(i)\n    # return my_list\n    return sorted(l)\n    \ndef bubble_sort_4(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    # my_list = []\n    # for i in l:\n    #     if i % 2 == 0:\n    #         my_list.append(i)\n    # return my_list\n    return l[:]\n    \ndef insertion_sort(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(1,len(l)):\n        key = l[i]\n        j = i-1\n        while j >=0 and key < l[j] :\n            l[j+1] = l[j]\n            j -= 1\n        l[j+1] = key\n    return l\n    \ndef insertion_sort_2(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(1,len(l)):\n        key = l[i]\n        j = i-1\n        while j >=0 and key < l[j] :\n            l[j+1] = l[j]\n            j -= 1\n        l[j+1] = key\n    return l\n    \ndef insertion_sort_3(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(1,len(l)):\n        cursor = l[i]\n        j = i-1\n        while j >=0 and cursor < l[j] :\n            l[j+1] = l[j]\n            j -= 1\n        l[j+1] = cursor\n    return l\n    \ndef insertion_sort_4(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(1,len(l)):\n        key = l[i]\n        j = i-1\n        while j >=0 and key < l[j] :\n            l[j+1] = l[j]\n            j -= 1\n        l[j+1] = key\n    return l\n    \ndef selection_sort(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(len(l)):\n        min = i\n        for j in range(i+1,len(l)):\n            if l[j] < l[min]:\n                min = j\n        l[min],l[i] = l[i],l[min]\n    return l\n    \ndef selection_sort_2(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(len(l)):\n        min = i\n        for j in range(i+1,len(l)):\n            if l[j] < l[min]:\n                min = j\n        l[i],l[min] = l[min],l[i]\n    return l\n    \ndef selection_sort_3(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    # my_list = []\n    # for i in l:\n    #     if i % 2 == 0:\n    #         my_list.append(i)\n    # return my_list\n    return sorted(l)\n    \ndef selection_sort_4(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    # my_list = []\n    # for i in l:\n    #     if i % 2 == 0:\n    #         my_list.append(i)\n    # return my_list\n    return l[:]\n    \ndef selection_sort_5(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(len(l)):\n        min = i\n        for j in range(i+1,len(l)):\n            if l[j] < l[min]:\n                min = j\n        l[i],l[min] = l[min],l[i]\n    return l\n    \ndef insertion_sort_5(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    for i in range(1,len(l)):\n        key = l[i]\n        j = i-1\n        while j >=0 and key < l[j] :\n            l[j+1] = l[j]\n            j -= 1\n        l[j+1] = key\n    return l\n    \ndef shell_sort(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    gap = len(l)//2\n    while gap > 0:\n        for i in range(gap,len(l)):\n            j = i\n            while j >= gap and l[j] < l[j-gap]:\n                l[j],l[j-gap] = l[j-gap],l[j]\n                j -= gap\n        gap = gap//2\n    return l\n    \ndef shell_sort_2(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    gap = len(l)//2\n    while gap > 0:\n        for i in range(gap,len(l)):\n            j = i\n            while j >= gap and l[j] < l[j-gap]:\n                l[j],l[j-gap] = l[j-gap],l[j]\n                j -= gap\n        gap = gap//2\n    return l\n    \ndef shell_sort_3(l):\n    '''\n    Write a python function to sort a given list in the ascending order.\n    '''\n    # my_list = []\n    # for i in l:\n    #     if i % 2 == 0:\n    #         my"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2!=0]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # first = list1[n]\n    # print(first)\n    # return first\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp = []\n    for i in list1:\n        temp.append(i[n])\n    return temp\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n:\n            return list1[i]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0:\n        return -1\n    for i in range(n):\n        list1.pop(0)\n    return list1[0]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    l=[]\n    for i in list1:\n        l.append(i[n])\n    return l\n    \nprint(extract_nth_element([(1,2),(3,4),(5,6,7),(8,9)],1))"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = []\n    for i in range(len(list1)):\n        nth_element.append(list1[i][n])\n    return nth_element\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # list_of_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    # print(list_of_tuples[0][2])\n    # print(list_of_tuples[0][0])\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list1)[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                print(\"True\")\n                break\n        else:\n            print(\"False\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(\"Yes,it exists in both of the lists\")\n            break\n        else:\n            print(\"No,it does not exist in both of the lists\")\n            break\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in range(len(list1)):\n        if list1[i] in list2:\n            print('True')\n            break\n    else:\n        print('False')\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            count = count + 1\n    if count == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlapping=[]\n    for i in list1:\n        if i in list2:\n            overlapping.append(i)\n    if len(overlapping)==0:\n        return False\n    else:\n        return overlapping\n        \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # for i in range(len(list1)):\n    #     for j in range(len(list2)):\n    #         if list1[i]==list2[j]:\n    #             return True\n    # return False\n    a=set(list1)\n    b=set(list2)\n    c=a.intersection(b)\n    if c:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    lst1=[]\n    lst2=[]\n    for i in range(len(list1)):\n        lst1.append(list1[i])\n    for j in range(len(list2)):\n        lst2.append(list2[j])\n    for k in range(len(lst1)):\n        if lst1[k] in lst2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    a = set(list1)\n    b = set(list2)\n    if a.intersection(b)!= set():\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i,'is in both list')\n        else:\n            print(i,'is not in both list')\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    from operator import mul\n    n = len(arr)\n    arr.sort(reverse=True)\n    ans = mul(arr[0], arr[1])\n    print(ans)\n    for i in range(2, n-1):\n        ans = max(ans, mul(arr[i], arr[i+1]))\n    print(ans)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    ans=[]\n    for i in range(len(arr)-1):\n        if arr[i]*arr[i+1]>arr[i+1]*arr[i]:\n            ans.append([arr[i],arr[i+1]])\n    print(ans)\n    \ndef miniMaxSum(arr):\n    '''\n    Given an array of integers, find the pair with the minimum and maximum sum in it.\n    Input: arr[] = {1, 5, -3, -8}\n    Output: Minimum Sum = 2, Maximum Sum = 9\n    '''\n    s=0\n    f=0\n    for i in range(len(arr)):\n        s+=arr[i]\n    for i in range(len(arr)):\n        if s>f:\n            f=s\n            ans=arr[i]\n    print(\"Minimum sum =\",ans,\", Maximum sum =\",f)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    max_product_pair = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = [arr[i], arr[j]]\n    return max_product_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    p1 = p2 = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > p1:\n            p1 = arr[i]\n        elif arr[i] > p2:\n            p2 = arr[i]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        print(\"Array is empty\")\n    else:\n        arr.sort()\n        product = 1\n        for i in range(len(arr)-1):\n            product *= arr[i]\n            if product < arr[i+1]:\n                break\n        return product, arr[i+1]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product_dict = {}\n    for i in arr:\n        if product_dict.get(i, -1) == -1:\n            product_dict[i] = 1\n        else:\n            product_dict[i] += 1\n    \n    #print(product_dict)\n    \n    max_prod = -1\n    max_prod_key = -1\n    for key, val in product_dict.items():\n        if val > max_prod:\n            max_prod = val\n            max_prod_key = key\n    \n    return max_prod_key * max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    if arr[0]>0:\n        return \"0\"\n    if arr[0]==0:\n        return str(0)\n    if arr[0]==arr[1]:\n        return str(arr[0]*arr[1])\n    return str(arr[0]*arr[1])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest = max(arr)\n    arr = list(filter(lambda x:x > highest/2, arr))\n    print('pair having highest product are:', arr[0], 'and', arr[1])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product = 0\n    p = 0\n    q = 0\n    arr.sort()\n    for i in range(len(arr)): \n        if arr[i] < 0: \n            continue\n        elif arr[i] > 0: \n            q = i \n            break\n    \n    if arr[p]*arr[q] > 0:\n        product = arr[p]*arr[q]\n    return product\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    n = len(arr)\n    if n<=1:\n        return -1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Input = [(1,2,3,4),(5,6,7,8),(1,2,3,4),(7,8,9,10)]\n    Common = []\n    for i in range(len(Input)):\n        Common.append(Input[i][0])\n    return(Common)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if(Input[i][0] == Input[j][0]):\n                common.append(Input[i][0])\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    x = []\n    for i in range(len(Input)):\n        x.append(Input[i][0])\n    return x\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        if Input[i][0] in common:\n            continue\n        common.append(Input[i][0])\n        for j in range(len(common)):\n            common[j] = common[j] + tuple(Input[i][1:])\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return set(Input[0])\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # input = [(5, 9), (3, 4, 8), (5, 6), (6, 7)]\n    # Output : 5\n    # Output : 6\n    # Output : 8\n    # Output : (6, 7)\n    \n    l1 = list(Input)\n    l2 = []\n    for i in l1:\n        if i not in l2:\n            l2.append(i)\n    for j in range(len(l2)):\n        l2[j] = l2[j][0]\n    l2 = tuple(l2)\n    print(l2)\n    \n    return l2\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = list(set(Input[0]))\n    for i in range(1,len(Input)):\n        a = list(set(a).intersection(set(Input[i])))\n    return a\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = set(Input)\n    return tuple(Input.pop())\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return set(map(lambda x: x[0], Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    final_list = []\n    for tup in Input: \n        final_list.append(tup[0])\n    return set(final_list)\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    i=0\n    for i in range(len(lst)):\n        if lst[i]>lst[i-1]:\n            break\n    return lst[i]\n            \n            \ndef main():\n    lst=[]\n    for i in range(5):\n        element=int(input(\"Enter the element: \"))\n        lst.append(element)\n    print(\"List: \",lst)\n    print(\"Maximum Element: \",Find_Max(lst))\n    \nif __name__=='__main__':\n    main("
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i])>m:\n            m = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == m:\n            max1 = lst[i]\n    return max1\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in range(len(lst)):\n        if len(lst[i])>max:\n            max=len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i])==max:\n            return i\n    \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    min=1000\n    for i in range(len(lst)):\n        if len(lst[i])<min:\n            min=len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i])==min:\n            return i\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=0\n    for i in lst:\n        if len(i)>max_len:\n            max_len=len(i)\n    for i in lst:\n        if max_len==len(i):\n            return i\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(0,len(lst)):\n        if len(lst[i])>max:\n            max = len(lst[i])\n            max_element = lst[i]\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    l = max(lst)\n    return l\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) > len(maximum):\n            maximum = lst[i]\n    return maximum\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst) \n    max_elem = 0\n    for i in range(0, length): \n        if(len(lst[i])>max_elem): \n            max_elem = len(lst[i]) \n            max_ele = lst[i] \n    print(max_ele) \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_lst=lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) > len(max_lst):\n            max_lst=lst[i]\n    return max_lst\n    \nprint(Find_Max(lst))\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    n=len(lst)\n    max=lst[0]\n    for i in range(1,n):\n        if(len(max)<len(lst[i])):\n            max=lst[i]\n    return max\n    \n    \n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    n=len(lst)\n    min=lst[0]\n    for i in range(1,n):\n        if(len(min)>len(lst[i])):\n            min=lst[i]\n    return min\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in list1:\n        i = round(i)\n    print(\"Sum of a list\", sum(list1) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    length = 0\n    for i in list1:\n        sum += i\n        length += 1\n    print(f'The sum is: {sum}')\n    print(f'The length is: {length}')\n    print(f'The total sum multiplied by the length is: {sum * length}')\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    l = []\n    for i in list1:\n        l.append(round(i))\n    print(f'The total sum is : {sum(l)} x {len(l)} = {sum(l)*len(l)}')\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list = []\n    sum_list = 0\n    for i in list1:\n        sum_list += i\n        if i > 9:\n            round_list.append(int(round(i, 1)))\n    return sum_list * len(list1), round_list\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = list(map(lambda x: math.ceil(x), list1))\n    return sum(rounded_list) * len(rounded_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    print(f\"The total sum of the given numbers multiplied by the length of the list is {sum(list1)}\")\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = 0\n    for i in list1:\n        s = s + (i * 2)\n    return s\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = list1[:round(len(list1)/2)]\n    total = 0\n    for i in list1:\n        total += i\n    total = total * len(list1)\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list = []\n    for number in list1:\n        number = round(number, 2)\n        round_list.append(number)\n    print(f'The total sum multiplied by the length of the list is: {sum(round_list)}')\n    return round_list\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        total_sum += round(list1[i])\n    return total_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    Sum=0\n    for i in range(1,n+1):\n        Sum+=i**3\n    return Sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s=s+i*i*i\n        \n    return s\nprint(\"Cube Sum of first even natural numbers:\",cube_Sum(100))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    x = 0\n    i = 0\n    if n <= 0:\n        print('Please enter positive number')\n    else:\n        for i in range(1,n+1):\n            if i%2 == 0:\n                x += i\n            \n        print('Cube sum of first n natural numbers is',x)\n        \ncube_Sum(5)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    if (n > 0) :\n        total = 0\n        for i in range(n):\n            total = total + i**3\n        print('Sum of first n natural numbers', n,'=',total)\n    else:\n        print('invalid input')\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(0, n):\n        if x % 2 == 0:\n            sum += x ** 3\n    return sum\n    \nprint(cube_Sum(5))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    print(sum)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return f'{test_tup[0]}{test_tup[1]}{test_tup[2]}'\n    \ndef split_tuple(test_tup):\n    '''\n    Write a function to split tuple using delimiter and count as length\n    '''\n    return f'{test_tup[0]}{test_tup[1]}{test_tup[2]}'\n    \ndef file_reading_gen(path, split_chr):\n    '''\n    Write a generator to read text file\n    '''\n    with open(path, 'r') as f:\n        while True:\n            line = f.readline()\n            if not line:\n                break\n            if split_chr in line:\n                yield line\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    conc_tup = ''\n    for element in test_tup:\n        conc_tup += str(element)\n    return conc_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += i\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated = \"\"\n    for i in range(len(test_tup)):\n        concatenated = concatenated + test_tup[i]\n    return concatenated\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ('').join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = 1\n    sum = 0\n    for i in range(n):\n        sum += cube\n        cube = cube * i\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    return n**3/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        return None\n    \n    average = 0\n    for i in range(1, n + 1):\n        average += i ** 3\n    return average / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Python program to find average of cube of first n natural numbers\n    num_list = list()\n    avg = 0.0\n    for i in range(n):\n        num_list.append(i + 1)\n        avg = avg + (i + 1)**3\n    avg = avg / (n + 1)\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # formula: sum = n * (n + 1) * (2 * n + 1) / 6\n    total = n * (n + 1) * (2 * n + 1) / 6\n    return total\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    average = sum / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    print(\"Enter first number: \")\n    x = int(input())\n    sum = 0\n    count = 0\n    while(x < 0):\n        print(\"You have entered a negative number.\")\n        print(\"Enter first number: \")\n        x = int(input())\n    for i in range(x,0,-1):\n        sum = sum + (i * i * i)\n        count += 1\n    return sum/count\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i ** 3\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n * (n + 1) * (n + 2) / 3\n    \nn = int(input('Enter the number'))\navg = find_Average_Of_Cube(n)\nprint('The average of cubes of first', n, 'natural numbers is', avg)"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for i in range(len(test_tuple)):\n        if i % 2 == 1:\n            rear.append(test_tuple[i])\n    print(rear)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple_rear = []\n    for i in test_tuple:\n        a = i.split(' ')\n        for k in a:\n            tuple_rear.append(k)\n    return tuple_rear\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1][::-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    try:\n        for item in test_tuple:\n            if type(item) == str:\n                try:\n                    test_tuple = item.split()\n                    return test_tuple[-1]\n                except:\n                    return ''\n            else:\n                return ''\n    except:\n        return ''\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1])\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n    \ndef find_element_in_list(list1, x): \n    '''\n    Write a function to find the first occurrence of a particular element in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if x not in list1:\n        return 0\n    else:\n        count = 0\n        for i in range(len(list1)):\n            if list1[i] == x:\n                count += 1\n        return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return list1.count(x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x == list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = list()\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for number in nums:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return nums[::2]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for n in nums:\n        if n % 2 == 1:\n            oddnumbers.append(n)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for n in nums:\n        if n % 2!= 0:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return (num for num in nums if num % 2!= 0)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if '-' not in dt:\n        return dt\n    elif '-' in dt:\n        month, date, year = dt.split('-')\n        year = str(int(year))\n        return f'{month}-{date}-{year}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Date format in the function\n    # dd/mm/YYYY\n    # YYYY-mm-dd\n    # mm/dd/YYYY\n    # dd-mm-YYYY\n    # dd-mm-YY\n    # mm-dd-YY\n    # dd/mm/YY\n    # mm/dd/YYYY\n    # dd-mm-YYYY\n    # dd-mm-YY\n    # dd-mm-YYYY\n    # mm-dd-YYYY\n    # mm-dd-YY\n    # mm-dd-YYYY\n    # mm-dd-YY\n    # mm-dd-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YY\n    # dd-mm-YYYY\n    # dd-mm-YY\n    # dd-mm-YYYY\n    # dd-mm-YY\n    # dd-mm-YYYY\n    # dd/mm/YY\n    # dd/mm/YYYY\n    # dd-mm-YY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YY\n    # dd/mm/YY\n    # mm/dd/YY\n    # dd/mm/YYYY\n    # dd-mm-YYYY\n    # dd-mm-YY\n    # dd-mm-YYYY\n    # dd-mm-YY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd-mm-YYYY\n    # dd/mm/YYYY\n    # dd-mm-YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd-mm-YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd-mm-YYYY\n    # dd/mm/YYYY\n    # dd-mm-YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY\n    # dd/mm/YYYY"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    def date_to_date(date):\n        date_new=date.split('-')\n        date_new.reverse()\n        date_new='-'.join(date_new)\n        return date_new\n    return date_to_date(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_dict = {'jan': 1, 'feb': 2,'mar': 3, 'apr': 4,'may': 5, 'jun': 6, 'jul': 7, 'aug': 8,'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12, 'january': 1, 'february': 2,'march': 3, 'april': 4,'may': 5, 'june': 6, 'july': 7, 'august': 8,'september': 9, 'october': 10, 'november': 11, 'december': 12}\n    year_dict = {1: '31', 2: '28', 3: '31', 4: '30', 5: '31', 6: '30', 7: '31', 8: '31', 9: '30', 10: '31', 11: '30', 12: '31'}\n    date = dt.split('-')\n    month = date_dict.get(date[1])\n    day = date[2]\n    year = year_dict.get(int(date[0]))\n    if month == None:\n        return False\n    return f'{day}-{month}-{year}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = f\"{dt[2]}-{dt[1]}-{dt[0]}\"\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    y, m, d = dt.split(\"-\")\n    return str(d) + \"-\" + str(m) + \"-\" + str(y)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_pattern = r'([0-9]{4})-([0-9]{2})-([0-9]{2})'\n    regex = re.compile(date_pattern)\n    date = regex.findall(dt)\n    return \"-\".join(date[0]) + \"-\" + \"\".join(date[1]) + \"-\" + \"\".join(date[2])\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # get the day, month and year from the date\n    day, month, year = re.split('-', dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.findall(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    day = dt[0][0]\n    month = dt[0][1]\n    year = dt[0][2]\n    new_date = f'{day}-{month}-{year}'\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year, month, day = dt.split('-')\n    month_name = month_dict[month]\n    return '%s-%s-%s' % (day,month_name,year)\ndef sort_alphanumeric(data):\n    '''\n    Write a python function to sort a dictionary by value.\n    '''\n    return sorted(data.items(), key = lambda kv:(kv[1], kv[0]))\ndef day_count(dt):\n    '''\n    Write a python function to count the number of days between two dates.\n    '''\n    from datetime import datetime, date, timedelta\n    date1 = dt.split('-')\n    date2 = date1[::-1]\n    day1 = date(int(date1[0]),int(date1[1]),int(date1[2]))\n    day2 = date(int(date2[0]),int(date2[1]),int(date2[2]))\n    return abs((day2 - day1).days)\ndef palindrome(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    return s == s[::-1]\ndef sum_digits(n):\n    '''\n    Write a python function to sum of the digits of a number.\n    '''\n    s = 0\n    while n!= 0:\n        s = s + (n % 10)\n        n = n // 10\n    return s\ndef multiply(a, b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a * b\ndef sum_of_square(n):\n    '''\n    Write a python function to sum of squares of numbers up to n.\n    '''\n    return sum([x ** 2 for x in range(1, n)])\ndef sum_of_divisors(n):\n    '''\n    Write a python function to calculate sum of all divisors of a given number.\n    '''\n    result = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            result += i\n            result += n // i\n    return result\ndef add_strings(s1, s2):\n    '''\n    Write a python function to add two strings.\n    '''\n    return s1 + s2\ndef print_and_return(s):\n    print(s)\n    return s\ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n <= 2:\n        return n == 2\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\ndef add_list(l1,l2):\n    '''\n    Write a python function to add two lists.\n    '''\n    return l1 + l2\ndef multiply_list(l1,l2):\n    '''\n    Write a python function to multiply two lists.\n    '''\n    return l1 * l2\ndef print_even_list(l):\n    '''\n    Write a python function to print all even numbers in a list.\n    '''\n    return [i for i in l if i % 2 == 0]\ndef print_odd_list(l):\n    '''\n    Write a python function to print all odd numbers in a list.\n    '''\n    return [i for i in l if i % 2 == 1]\ndef sort_numbers(l):\n    '''\n    Write a python function to sort a list in a ascending order.\n    '''\n    return sorted(l)\ndef reverse_list(l):\n    '''\n    Write a python function to reverse a list.\n    '''\n    return l[::-1]\ndef last_occurrence(s, ch):\n    '''\n    Write a python function to find the last occurrence of a character in a string.\n    '''\n    return s.rfind(ch)\ndef is_sorted(l):\n    '''\n    Write a python function to check if a list is sorted in ascending order.\n    '''\n    return l == sorted(l)\ndef fibonacci(n):\n    '''\n    Write a python function to return the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_palindrome_without_using_slicing(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    def is_palindrome_helper(s, i, j):\n        if i >= j:\n            return True\n        if s[i]!= s[j]:\n            return False\n        return is_palindrome_helper(s, i + 1, j - 1)\n    return is_palindrome_helper(s, 0, len(s) - 1)\ndef is_palindrome_without_using_slicing_alternative(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = re.sub(r'[^a-z0-9 ]+', '', s)\n    return s == s[::-1]\ndef is_palindrome_without_using_slicing_alternative_2(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = re.sub(r'[^a-z ]+', '', s)\n    return s == s[::-1]\ndef add_strings_without_using_slicing(s1, s2):\n    '''\n    Write a python function to add two strings without using slicing operator.\n    '''\n    return s1 + s2\ndef add_strings_without_using_slicing_alternative_1(s1, s2):\n    '''\n    Write a python function to add two strings without using slicing operator.\n    '''\n    return s1 + s2\ndef add_strings_without_using_slicing_alternative_2(s1, s2):\n    '''\n    Write a python function to add two strings without using slicing operator.\n    '''\n    return ''.join(list(s1) + list(s2))\ndef add_strings_without_using_slicing_alternative_3(s1, s2):\n    '''\n    Write a python function to add two strings without using slicing operator.\n    '''\n    return ''.join(s1 + s2)\ndef length_of_longest_word(l):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    if not l:\n        return 0\n    max_length = 0\n    for word in l:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\ndef min_length_word(l):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    if not l:\n        return 0\n    min_length = len(l[0])\n    for word in l:\n        if len(word) < min_length:\n            min_length = len(word)\n    return min_length\ndef is_substring(s1, s2):\n    '''\n    Write a python function to check whether a string is a substring of another string.\n    '''\n    return s1 in s2\ndef count_substring(string, sub_string):\n    '''\n    Write a python function to count the number o"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    temp = 1\n    while temp < len(my_list):\n        for i in range(0, len(my_list) - temp):\n            j = i + temp\n            if my_list[i] > my_list[j]:\n                temp += 1\n                temp1 = i\n                temp2 = j\n                while (temp1!= temp2):\n                    my_list[temp1], my_list[temp2] = my_list[temp2], my_list[temp1]\n                    temp1 += 1\n                    temp2 -= 1\n        temp *= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    my_list = my_list.copy()\n    def shellSort(n):\n        def split(n, lst, start, end):\n            while start < end:\n                j = start\n                i = j + 1\n                while i < end:\n                    if n[j] > n[i]:\n                        lst[i], lst[j] = lst[j], lst[i]\n                        i += 1\n                    else:\n                        i += 1\n                j += 1\n                while j < end:\n                    if n[j] < n[start]:\n                        lst[j], lst[start] = lst[start], lst[j]\n                        start += 1\n                    else:\n                        start += 1\n                        j += 1\n                return lst\n        n = len(my_list)\n        lst = [0] * n\n        split(n, lst, 0, n)\n        return lst\n    while True:\n        if len(my_list) == 1:\n            break\n        my_list = shellSort(my_list)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    #Step size\n    interval = n//2\n    \n    #Loop till interval\n    while interval > 0:\n        #For each interval we want to sort\n        for i in range(interval,n):\n            #Initializing j as i\n            j = i\n            #Loop to find the largest element\n            while j>=interval and my_list[j] < my_list[j-interval]:\n                #Exchange the elements\n                temp = my_list[j]\n                my_list[j] = my_list[j-interval]\n                my_list[j-interval] = temp\n                j -= interval\n        #Increasing the interval\n        interval = interval//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    shell_sort_step = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # START: assigning indexes\n    n = len(my_list)\n    # END: assigning indexes\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    l=len(my_list)\n    gap=l//2\n    while gap>0:\n        for i in range(gap,l):\n            pivot=my_list[i]\n            j=i\n            while j>=gap and my_list[j-gap]>pivot:\n                my_list[j]=my_list[j-gap]\n                j-=gap\n            my_list[j]=pivot\n        gap=gap//2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (a and b)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    list1 = test_tup1\n    list2 = test_tup2\n    \n    if len(list1) == len(list2):\n        if len(list1) == 0:\n            return list2\n        elif len(list1) == 1:\n            return (list1[0], list2[0])\n        else:\n            return (list1[0], list1[1], list2[0], list2[1])\n    else:\n        return 'Invalid Tuples'\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if type(test_tup1)!= tuple or type(test_tup2)!= tuple:\n        raise TypeError(\"and_tuples: only tuples allowed\")\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"and_tuples: number of elements of tuples must be same\")\n    return tuple(element1 and element2 for (element1, element2) in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i, j in zip(test_tup1, test_tup2):\n        result.append(i and j)\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return test_tup1[1] & test_tup2[1]\n    elif test_tup1[0] == test_tup2[1]:\n        return test_tup1[1] & test_tup2[0]\n    elif test_tup1[1] == test_tup2[0]:\n        return test_tup1[0] & test_tup2[1]\n    elif test_tup1[1] == test_tup2[1]:\n        return test_tup1[0] & test_tup2[0]\n    else:\n        return None\n        \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return test_tup1[1] | test_tup2[1]\n    elif test_tup1[0] == test_tup2[1]:\n        return test_tup1[1] | test_tup2[0]\n    elif test_tup1[1] == test_tup2[0]:\n        return test_tup1[0] | test_tup2[1]\n    elif test_tup1[1] == test_tup2[1]:\n        return test_tup1[0] | test_tup2[0]\n    else:\n        return None\n        \ndef not_tuples(test_tup):\n    '''\n    Write a function to extract the elementwise not tuples from the given tuple.\n    '''\n    return test_tup[0] ^ test_tup[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        directrix_y = 0\n    else:\n        directrix_y = -b/(2*a)\n    directrix_x = -c/(2*a)\n    print(f\"Directrix:\\nY = {directrix_y}\\nX = {directrix_x}\")\n    return f\"Directrix:\\nY = {directrix_y}\\nX = {directrix_x}\"\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    n = a**2 - b**2\n    x = ((a**2 - b**2)**0.5)*(-1*a) + (a**2 - b**2)**0.5*b \n    y = (a**2 - b**2)**0.5*(-1*a) + (a**2 - b**2)**0.5*b \n    print(\"N = \",n)\n    print(\"x = \",x)\n    print(\"y = \",y)\n    print(\"Distance = \",np.sqrt(n))\n    print(\"Point = \",(x, y))\n    print(\"------------------\")\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = -(a * a * b * b + 2 * a * c) / (a * a * a * a + 2 * a * b * b)\n    y = (a * a * b * b - a * a * a * a * c) / (a * a * a * a * a + 2 * a * b * b)\n    return x, y \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*a*c)/(2*b)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = (a**2-b**2)/(2*c)\n    if a > 0:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        return x1, x2\n    else:\n        x1 = (-b - math.sqrt(d))/(2*a)\n        x2 = (-b + math.sqrt(d))/(2*a)\n        return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    f = lambda x: a*x**2 + b*x + c\n    # points\n    x_min, x_max = -50, 50\n    return quad(f, x_min, x_max)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import numpy as np\n    \n    def equation(x, a, b, c):\n        '''\n        Write a function to solve a parabola equation.\n        '''\n        return a * x**2 + b * x + c\n    \n    def solve(a, b, c, x):\n        '''\n        Write a function to solve a parabola equation.\n        '''\n        return equation(x, a, b, c) - (b**2 - 4 * a * c) / (4 * a)\n    \n    x = np.linspace(0, 4, 1000)\n    y = equation(x, a, b, c)\n    \n    d = solve(a, b, c, x)\n    \n    y_ = equation(x, a, b, c)\n    \n    x1 = x[d > 0]\n    y1 = y_[d > 0]\n    \n    x2 = x[d < 0]\n    y2 = y_[d < 0]\n    \n    return (x1, y1), (x2, y2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_d = -(a*c**2+2*a*b*c)**(1/2)\n    return x_d\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(0, 1, 10)\n    y = a*x**2 + b*x + c\n    plt.plot(x, y)\n    plt.show()\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    y = a*x**2 + b*x + c\n    while True:\n        x = (x+1)**2 - a*(x**2) + b*x + c\n        y = a*x**2 + b*x + c\n        if y < 0:\n            x1 = x\n            y1 = y\n            break\n        if y > 0:\n            x2 = x\n            y2 = y\n            break\n        if y == 0:\n            x2 = x\n            y2 = y\n            break\n    return x1, y1, x2, y2\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2)!= set():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    result = False\n    \n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                result = True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    # First solution\n    '''\n    result = False\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                result = True\n    return result\n    '''\n    \n    # Second solution\n    '''\n    list1_copy = list1.copy()\n    list2_copy = list2.copy()\n    \n    while len(list1_copy) > 0 and len(list2_copy) > 0:\n        if list1_copy[0] == list2_copy[0]:\n            del list1_copy[0]\n            del list2_copy[0]\n        else:\n            break\n    \n    return len(list1_copy) == 0\n    '''\n    \n    # Third solution\n    '''\n    list1_copy = list1.copy()\n    list2_copy = list2.copy()\n    \n    while len(list1_copy) > 0 and len(list2_copy) > 0:\n        if list1_copy[0] == list2_copy[0]:\n            del list1_copy[0]\n            del list2_copy[0]\n        else:\n            break\n    return len(list1_copy) == 0\n    '''\n    \n    # Fourth solution\n    '''\n    if list1.count(list2[0])!= 0:\n        return False\n    else:\n        return True\n    '''\n    \n    # Fifth solution\n    '''\n    if len(list1) > len(list2):\n        longer_list = list1\n        shorter_list = list2\n    else:\n        longer_list = list2\n        shorter_list = list1\n    \n    if len(shorter_list) == 0:\n        return False\n    else:\n        for i in range(len(longer_list)):\n            if longer_list[i]!= shorter_list[0]:\n                return False\n            else:\n                shorter_list.pop(0)\n        return True\n    '''\n    \n    # Sixth solution\n    '''\n    if len(list1) == len(list2):\n        result = False\n        for i in range(len(list1)):\n            if list1[i] == list2[0]:\n                result = True\n                break\n        return result\n    else:\n        return False\n    '''\n    \n    # Seventh solution\n    '''\n    list1.sort()\n    list2.sort()\n    \n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n        return True\n    else:\n        return False\n    '''\n    \n    # Eighth solution\n    '''\n    for i in range(len(list1)):\n        if list1[i] == list2[0]:\n            list1.pop(i)\n            return True\n    return False\n    '''\n    \n    # Ninth solution\n    '''\n    if len(list1) > len(list2):\n        longer_list = list1\n        shorter_list = list2\n    else:\n        longer_list = list2\n        shorter_list = list1\n    \n    if len(shorter_list) == 0:\n        return False\n    else:\n        for i in range(len(longer_list)):\n            if longer_list[i]!= shorter_list[0]:\n                return False\n            else:\n                shorter_list.pop(0)\n        return True\n    '''\n    \n    # Tenth solution\n    '''\n    if len(list1) > len(list2):\n        longer_list = list1\n        shorter_list = list2\n    else:\n        longer_list = list2\n        shorter_list = list1\n    \n    if len(shorter_list) == 0:\n        return False\n    else:\n        for i in range(len(longer_list)):\n            if longer_list[i]!= shorter_list[0]:\n                return False\n            else:\n                shorter_list.pop(0)\n        return True\n    '''\n    \n    # Eleventh solution\n    '''\n    list1.sort()\n    list2.sort()\n    \n    if len(list1)!= len(list2):\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n    '''\n    \n    # Twelveth solution\n    '''\n    if len(list1) == len(list2):\n        result = False\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n            else:\n                result = True\n        return result\n    else:\n        return False\n    '''\n    \n    # Thirteenth solution\n    '''\n    list1.sort()\n    list2.sort()\n    \n    if len(list1)!= len(list2):\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n    '''\n    \n    # Fourteenth solution\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    if len(list1) > len(list2):\n        longer_list = list1\n        shorter_list = list2\n    else:\n        longer_list = list2\n        shorter_list = list1\n    \n    for i in range(len(shorter_list)):\n        for j in range(len(longer_list)):\n            if longer_list[j]!= shorter_list[i]:\n                return False\n            else:\n                shorter_list.pop(i)\n                return True\n    '''\n    \n    # Fifteenth solution\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    if len(list1) > len(list2):\n        longer_list = list1\n        shorter_list = list2\n    else:\n        longer_list = list2\n        shorter_list = list1\n    \n    for i in range(len(shorter_list)):\n        for j in range(len(longer_list)):\n            if longer_list[j]!= shorter_list[i]:\n                return False\n            else:\n                shorter_list.pop(i)\n                return True\n    '''\n    \n    # Sixteenth solution\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    if len(list1) > len(list2):\n        longer_list = list1\n        shorter_list = list2\n    else:\n        longer_list = list2\n        shorter_list = list1\n    \n    for i in range(len(shorter_list)):\n        if shorter_list[i] in longer_list:\n            longer_list.remove(shorter_list[i])\n        else:\n            return False\n    return True\n    '''\n    \n    # Seventeenth solution\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    if len(list1) > len(list2):\n        longer_list = list1\n        shorter_list = list2\n    else:\n        longer_list = list2\n        shorter_list = list1\n    \n    for i in range(len(shorter_list)):\n        if shorter_list[i] in longer_list:\n            longer_list.remove(shorter_list[i])\n        else:\n            return False\n    return True\n    '''\n    \n    # Eighteenth solution\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    if len(list1) > len(list2):\n        longer_list = list1\n        shorter_list = list2\n    else:\n        longer_list = list2\n        shorter_list = list1\n    \n    for i in range(len(shorter_list)):"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == [] or list2 == []:\n        return False\n    return any(i in list1 for i in list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 is None or list2 is None:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # OR\n    #return len(set(list1).intersection(set(list2)))!= 0\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2))!= 0\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 + height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    a = height * base1\n    b = height * base2\n    c = height\n    \n    return (a+b+c)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        base1,base2 = base2,base1\n    if height >= 0:\n        return ((base2+base1)*height)/2\n    else:\n        return (base1*height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    side1 = base1 * height\n    side2 = base2 * height\n    side3 = (base1 + base2) * height / 2\n    trapezium = side3 + side2 - side1\n    \n    return trapezium\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium = base1 + base2 + height\n    median_trapezium = trapezium / 2\n    return median_trapezium\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if not isinstance(base1,(int,float)):\n        raise TypeError(\"Input type incorrect.\")\n    if not isinstance(base2,(int,float)):\n        raise TypeError(\"Input type incorrect.\")\n    if not isinstance(height,(int,float)):\n        raise TypeError(\"Input type incorrect.\")\n    \n    if base1 <= 0 or base2 <= 0 or height <= 0:\n        raise ValueError(\"Input value cannot be zero or negative.\")\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def get_median(base1,base2,height,sides):\n        # print(base1,base2,height)\n        if height == 0:\n            return 0\n        else:\n            return base1 + base2/2 * height\n    median = (get_median(base1,base2,height,sides=2) + get_median(base1,base2,height,sides=3) + get_median(base1,base2,height,sides=4))/sides\n    return median\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i] > number:\n            print(f'{number} is greater than {arr[i]}')\n            return True\n    print(f'{number} is not greater than any element of the array')\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Check if number is in the array\n    if number in arr:\n        print('%d is greater than %s' % (number, arr))\n    else:\n        print('%d is NOT greater than %s' % (number, arr))\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if number > arr[-1] else False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # return re.findall('a+', text)\n    # return re.findall('a+b', text)\n    pattern = re.compile(r'(?<=a)\\s*b(?=\\s+)')\n    return pattern.findall(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #regex = re.compile(r\"(a+)b+\")\n    regex = re.compile(r\"a(b)+\")\n    m = regex.match(text)\n    if m:\n        print(m.group())\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # pattern = re.compile(r'ab+')\n    # result = pattern.findall(text)\n    # print(result)\n    return re.findall(r'ab+',text)\n    # return any(re.findall(r'ab+',text))\n    # return re.findall(r'a.*b',text)\n    # return any(re.findall(r'a.*b',text))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.match(r'^a+b*',text))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a+b\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'ab+',text):\n        return 'found'\n    else:\n        return 'not found'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(ab)+'\n    print(re.match(pattern, text))\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a b followed by two or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a b followed by two or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a b followed by two or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has a b followed by two or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has a b followed by two or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's.\n    '''\n    pattern = r'(b)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twentyeight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_twentynine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_thirtyone(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match(pattern, text))\n    \ndef text_match_thirtytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(a)+'\n    print(re.match"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r\"ab\", text)\n    if match!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # print(text)\n    result = re.search(r'ab*', text)\n    # print(result)\n    return result.group()\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return -1\n    else:\n        return -1 if n < 0 else n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s=str(n)\n    if len(s)==1:\n        return n\n    else:\n        return int(s[-1])\n    \n    \n    # Driver Code\nn = 12345\nprint(last_Digit(n))\nprint(last_Digit(1000))\nprint(last_Digit(10000))\nprint(last_Digit(1000+100))\nprint(last_Digit(1000+200))\nprint(last_Digit(1000+200+100))\nprint(last_Digit(1000+200+100+10))\nprint(last_Digit(1000+200+100+10+5))\nprint(last_Digit(1000+200+100+10+5+2))\nprint(last_Digit(1000+200+100+10+5+2+1))\nprint(last_Digit(1000+200+100+10+5+2+1+0))\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s = str(n)\n    return int(s[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Base Case\n    if n == 0 :\n        return 0\n    # Recursive Case\n    return 1 + last_Digit(n // 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    number = n\n    last_digit = 0\n    while(n > 0):\n        last_digit = n % 10\n        n = n // 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0,list1))\n    \ndef find_mul(list1):\n    '''\n    Write a python function to return the multiple numbers in a list.\n    '''\n    return list(filter(lambda x: x % 2 == 0,list1))\n    \ndef find_odd(list1):\n    '''\n    Write a python function to return the odd numbers in a list.\n    '''\n    return list(filter(lambda x: x % 2 == 1,list1))\n    \ndef find_even(list1):\n    '''\n    Write a python function to return the even numbers in a list.\n    '''\n    return list(filter(lambda x: x % 2 == 0,list1))\n    \ndef sort_string(list1):\n    '''\n    Write a python function to sort the list of strings in alphabetical order.\n    '''\n    return sorted(list1)\n    \ndef is_subset(list1,list2):\n    '''\n    Write a python function to return true if list2 is subset of list1.\n    '''\n    return all(item in list1 for item in list2)\n    \ndef find_short(list1):\n    '''\n    Write a python function to return the length of the shortest string in a list.\n    '''\n    return min(list1,key=len)\n    \ndef find_long(list1):\n    '''\n    Write a python function to return the length of the longest string in a list.\n    '''\n    return max(list1,key=len)\n    \ndef sum_digits(list1):\n    '''\n    Write a python function to return the sum of the digits in a list.\n    '''\n    return sum(list(map(int,list1)))\n    \ndef sum_even(list1):\n    '''\n    Write a python function to return the sum of the even digits in a list.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 0,list1)))\n    \ndef sum_odd(list1):\n    '''\n    Write a python function to return the sum of the odd digits in a list.\n    '''\n    return sum(list(filter(lambda x: x % 2!= 0,list1)))\n    \ndef reverse_list(list1):\n    '''\n    Write a python function to return the list after reversing the list.\n    '''\n    return list(reversed(list1))\n    \ndef find_even_start(list1):\n    '''\n    Write a python function to return the starting position of the even numbers in a list.\n    '''\n    return list(filter(lambda x: x % 2 == 0,list1)).index(min(list1))\n    \ndef find_odd_start(list1):\n    '''\n    Write a python function to return the starting position of the odd numbers in a list.\n    '''\n    return list(filter(lambda x: x % 2!= 0,list1)).index(max(list1))\n    \ndef largest_odd_even(list1):\n    '''\n    Write a python function to return the largest number in a list as odd and even.\n    '''\n    return max(list1) if any(list(filter(lambda x: x % 2!= 0,list1))) else min(list1)\n    \ndef find_pos_neg(list1):\n    '''\n    Write a python function to return the positions of positive and negative numbers in a list.\n    '''\n    pos,neg = [],[]\n    for i,num in enumerate(list1):\n        if num > 0:\n            pos.append(i)\n        if num < 0:\n            neg.append(i)\n    return pos,neg\n    \ndef no_elements(list1):\n    '''\n    Write a python function to return the number of elements in a list.\n    '''\n    return len(list1)\n    \ndef list_len_equ(list1):\n    '''\n    Write a python function to return the length of list if its all elements are equal.\n    '''\n    return len(list1) == len(set(list1))\n    \ndef unique_elements(list1):\n    '''\n    Write a python function to return the number of unique elements in a list.\n    '''\n    return len(set(list1))\n    \ndef is_list_equal(list1,list2):\n    '''\n    Write a python function to return True if both lists are equal and False otherwise.\n    '''\n    return list1 == list2\n    \ndef intersection(list1,list2):\n    '''\n    Write a python function to return the list of elements present in both the lists.\n    '''\n    return list(set(list1).intersection(set(list2)))\n    \ndef union(list1,list2):\n    '''\n    Write a python function to return the list of elements present in either of the lists.\n    '''\n    return list(set(list1).union(set(list2)))\n    \ndef intersection_of_intervals(list1,list2):\n    '''\n    Write a python function to return the list of intervals whose elements are present in both the lists.\n    '''\n    return list(set(list1).intersection(set(list2)))\n    \ndef union_of_intervals(list1,list2):\n    '''\n    Write a python function to return the list of intervals whose elements are present in either of the lists.\n    '''\n    return list(set(list1).union(set(list2)))\n    \ndef get_the_greatest_interval(list1):\n    '''\n    Write a python function to return the interval which contains the greatest number.\n    '''\n    return max(list1,key=lambda x:x[1]-x[0])\n    \ndef get_the_smallest_interval(list1):\n    '''\n    Write a python function to return the interval which contains the smallest number.\n    '''\n    return min(list1,key=lambda x:x[1]-x[0])\n    \ndef get_the_average_interval(list1):\n    '''\n    Write a python function to return the average of the intervals.\n    '''\n    return sum(list(map(lambda x:x[1]-x[0],list1))) / len(list1)\n    \ndef sum_of_digits(list1):\n    '''\n    Write a python function to return the sum of the digits in a list.\n    '''\n    return sum(list(map(int,list1)))\n    \ndef is_asc_ordered(list1):\n    '''\n    Write a python function to return True if the list is ascending ordered and False otherwise.\n    '''\n    return list1 == sorted(list1)\n    \ndef is_desc_ordered(list1):\n    '''\n    Write a python function to return True if the list is descending ordered and False otherwise.\n    '''\n    return list1 == sorted(list1,reverse=True)\n    \ndef swap_elements(list1,index1,index2):\n    '''\n    Write a python function to swap two elements of a list.\n    '''\n    list1[index1],list1[index2] = list1[index2],list1[index1]\n    return list1\n    \ndef swap_elements_in_place(list1,index1,index2):\n    '''\n    Write a python function to swap two elements in place in a list.\n    '''\n    list1[index1],list1[index2] = list1[index2],list1[index1]\n    return list1\n    \ndef insert_element(list1,index,element):\n    '''\n    Write a python function to insert an element at a given index in a list.\n    '''\n    list1.insert(index,element)\n    return list1\n    \ndef remove_element(list1,element):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    list1.remove(element)\n    return list1\n    \ndef remove_elements(list1,element):\n    '''\n    Write a python function to remove all elements from a list.\n    '''\n    while element in list1:\n        list1.remove(element)\n    return list1\n    \ndef find_first_smaller_element(list1,element):\n    '''\n    Writ"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for x in list1:\n        if x < 0:\n            negative.append(x)\n    return negative\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg=[]\n    for i in range(len(list1)):\n        list_neg.append(-1*list1[i])\n    return list_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    x = []\n    for num in list1:\n        if num < 0:\n            x.append(num)\n    return x\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i = []\n    for x in list1:\n        i.append(-x)\n    return i\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-item for item in list1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s=''\n    for i in range(len(str1)):\n        if str1[i] not in ['a','e','i','o','u']:\n            s=s+str1[i]\n    return s\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(str1.replace('a', '').replace('i', '').replace('e', '').replace('o', '').replace('u', ''))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = \"\"\n    for ch in str1:\n        if ch.isalnum():\n            odd_chars += ch\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = \"\"\n    for c in str1:\n        if c == \" \":\n            odd_chars += c\n        elif c!= \" \":\n            odd_chars += c\n    return odd_chars\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    for i in str1:\n        if (int(i) % 2 == 0):\n            str1.remove(i)\n    str1 = ''.join(str1)\n    print(\"Filtered String :\",str1)\n    \n    \ndef remove_odd(str1):\n    '''\n    Write a function to remove even characters in a string.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    for i in str1:\n        if (int(i) % 2 == 1):\n            str1.remove(i)\n    str1 = ''.join(str1)\n    print(\"Filtered String :\",str1)\n    \n    \ndef add_only_odd_characters(str1):\n    '''\n    Write a function to replace all even characters in a string with\n    odd characters.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    for i in str1:\n        if (int(i) % 2 == 0):\n            str1.remove(i)\n    str1 = ''.join(str1)\n    print(\"Filtered String :\",str1)\n    \n    \ndef add_only_odd_characters(str1):\n    '''\n    Write a function to replace all even characters in a string with\n    odd characters.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    for i in str1:\n        if (int(i) % 2 == 1):\n            str1.remove(i)\n    str1 = ''.join(str1)\n    print(\"Filtered String :\",str1)\n    \n    \ndef add_n_characters_between_odd_and_even(str1,n):\n    '''\n    Write a function that takes an input string and an integer n.\n    The function returns a new string that contains n characters\n    between the last occurrence of an even character and the first occurrence of an odd character.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    \n    last_even = -1\n    last_odd = -1\n    first_odd = -1\n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 0):\n            last_even = i\n            break\n            \n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 1):\n            last_odd = i\n            break\n    \n    for i in range(last_even,last_odd):\n        if (i < last_odd):\n            str1.insert(i,n)\n            \n    str1 = ''.join(str1)\n    print(\"Filtered String :\",str1)\n    \n    \ndef add_n_characters_between_odd_and_even(str1,n):\n    '''\n    Write a function that takes an input string and an integer n.\n    The function returns a new string that contains n characters\n    between the last occurrence of an even character and the first occurrence of an odd character.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    \n    last_even = -1\n    last_odd = -1\n    first_odd = -1\n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 0):\n            last_even = i\n            break\n            \n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 1):\n            last_odd = i\n            break\n    \n    for i in range(last_even,last_odd):\n        if (i < last_odd):\n            str1.insert(i,n)\n            \n    str1 = ''.join(str1)\n    print(\"Filtered String :\",str1)\n    \n    \ndef add_n_characters_between_odd_and_even(str1,n):\n    '''\n    Write a function that takes an input string and an integer n.\n    The function returns a new string that contains n characters\n    between the last occurrence of an even character and the first occurrence of an odd character.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    \n    last_even = -1\n    last_odd = -1\n    first_odd = -1\n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 0):\n            last_even = i\n            break\n            \n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 1):\n            last_odd = i\n            break\n    \n    for i in range(last_even,last_odd):\n        if (i < last_odd):\n            str1.insert(i,n)\n            \n    str1 = ''.join(str1)\n    print(\"Filtered String :\",str1)\n    \n    \ndef add_n_characters_between_odd_and_even(str1,n):\n    '''\n    Write a function that takes an input string and an integer n.\n    The function returns a new string that contains n characters\n    between the last occurrence of an even character and the first occurrence of an odd character.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    \n    last_even = -1\n    last_odd = -1\n    first_odd = -1\n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 0):\n            last_even = i\n            break\n            \n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 1):\n            last_odd = i\n            break\n    \n    for i in range(last_even,last_odd):\n        if (i < last_odd):\n            str1.insert(i,n)\n            \n    str1 = ''.join(str1)\n    print(\"Filtered String :\",str1)\n    \n    \ndef add_n_characters_between_odd_and_even(str1,n):\n    '''\n    Write a function that takes an input string and an integer n.\n    The function returns a new string that contains n characters\n    between the last occurrence of an even character and the first occurrence of an odd character.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    \n    last_even = -1\n    last_odd = -1\n    first_odd = -1\n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 0):\n            last_even = i\n            break\n            \n    for i in range(len(str1)):\n        if (int(str1[i]) % 2 == 1):\n            last_odd = i\n            break\n    \n    for i in range(last_even,last_odd):\n        if (i < last_odd):\n            str1.insert(i,n)\n            \n    str1 = ''.join(str1)\n    print(\"Filtered String :\",str1)\n    \n    \ndef add_n_characters_between_odd_and_even(str1,n):\n    '''\n    Write a function that takes an input string and an integer n.\n    The function returns a new string that contains n characters\n    between the last occurrence of an even character and the first occurrence of an odd character.\n    '''\n    print(\"Original String :\",str1)\n    str1 = list(str1)\n    print(\"List of strings :\",str1)\n    \n    last_even = -1\n    last_odd = -1"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    import re\n    pattern = re.compile(r'[^\\w]')\n    return re.sub(pattern,'',str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('X', '')\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Remove even chars\n    s = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            s += str1[i]\n    return s\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(e for i, e in enumerate(str1) if i % 2 == 0)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    l = str1.split(\" \")\n    for i in range(0,len(l)):\n        for j in range(0,len(l[i])):\n            if l[i][j]%2!=0:\n                l[i] = l[i][:j]+l[i][j+1:]\n    return \" \".join(l)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set(frozenset(t) for t in test_list))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if isinstance(test_list[i], tuple) and isinstance(test_list[j], tuple):\n                if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                    count += 1\n                    continue\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return test_list.count(tuple(reversed(test_list)))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set(test_list).symmetric_difference(set(test_list)))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n            elif test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    c = 0\n    for x, y in test_list:\n        if x[::-1] == y:\n            c += 1\n    return c\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        count += test_list[i].count(test_list[i+1])\n    return count\n    # Your code here\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # print(test_list[i], test_list[j])\n            if (test_list[i][0] < test_list[j][0]) and (test_list[i][1] > test_list[j][1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # your code here\n    num_pairs = 0\n    for i in test_list:\n        for j in test_list:\n            if i == j:\n                continue\n            else:\n                num_pairs += 1\n    print(num_pairs)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in range(len(L)):\n        if i == 0:\n            continue\n        else:\n            L[i] = str(L[i]) + str(L[i-1])\n    for i in range(len(L)):\n        if i == 0:\n            continue\n        else:\n            L[i] = int(L[i])\n    sum = sum(L)\n    return sum\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #my_string = ''.join([str(i) for i in L])\n    my_string = ''.join(map(str, L))\n    my_string = my_string[::-1]\n    #my_string = ''.join(map(str, L))\n    #my_string = my_string.join()\n    #print(my_string)\n    my_string = int(my_string)\n    #print(my_string)\n    return my_string\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result += L[i]\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum = 0\n    for i in L:\n        sum = sum + i\n    return sum\n    #OR:\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return_value = int(str(L[0]) + str(L[1]) + str(L[2]) + str(L[3]) + str(L[4]) + str(L[5]))\n    return return_value\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(sum(L))"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum_nums = sum(L)\n    if len(L) > 1:\n        return sum_nums\n    else:\n        return L[0]\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Example\n    # Test.assert_equals(multiple_to_single([1, 2, 3]), 6)\n    # Test.assert_equals(multiple_to_single([-1, 2, 3]), -6)\n    # Test.assert_equals(multiple_to_single([-1, 2, -3]), -6)\n    # Test.assert_equals(multiple_to_single([1]), 1)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x, y: x * 10 + y, L)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    import re\n    text = text.split()\n    t1 = re.findall(r'\\w+ing\\b',text)\n    t2 = re.findall(r'\\w+ed\\b',text)\n    t3 = re.findall(r'\\w+ed\\b',t1)\n    t4 = re.findall(r'\\w+ing\\b',t2)\n    t5 = re.findall(r'\\w+ing\\b',t3)\n    t6 = re.findall(r'\\w+ed\\b',t4)\n    t7 = re.findall(r'\\w+ing\\b',t5)\n    t8 = re.findall(r'\\w+ed\\b',t6)\n    t9 = re.findall(r'\\w+ing\\b',t7)\n    t10 = re.findall(r'\\w+ing\\b',t8)\n    t11 = re.findall(r'\\w+ing\\b',t9)\n    t12 = re.findall(r'\\w+ing\\b',t10)\n    t13 = re.findall(r'\\w+ing\\b',t11)\n    t14 = re.findall(r'\\w+ing\\b',t12)\n    t15 = re.findall(r'\\w+ing\\b',t13)\n    t16 = re.findall(r'\\w+ing\\b',t14)\n    t17 = re.findall(r'\\w+ing\\b',t15)\n    t18 = re.findall(r'\\w+ing\\b',t16)\n    t19 = re.findall(r'\\w+ing\\b',t17)\n    t20 = re.findall(r'\\w+ing\\b',t18)\n    t21 = re.findall(r'\\w+ing\\b',t19)\n    t22 = re.findall(r'\\w+ing\\b',t20)\n    t23 = re.findall(r'\\w+ing\\b',t21)\n    t24 = re.findall(r'\\w+ing\\b',t22)\n    t25 = re.findall(r'\\w+ing\\b',t23)\n    t26 = re.findall(r'\\w+ing\\b',t24)\n    t27 = re.findall(r'\\w+ing\\b',t25)\n    t28 = re.findall(r'\\w+ing\\b',t26)\n    t29 = re.findall(r'\\w+ing\\b',t27)\n    t30 = re.findall(r'\\w+ing\\b',t28)\n    t31 = re.findall(r'\\w+ing\\b',t29)\n    t32 = re.findall(r'\\w+ing\\b',t30)\n    t33 = re.findall(r'\\w+ing\\b',t31)\n    t34 = re.findall(r'\\w+ing\\b',t32)\n    t35 = re.findall(r'\\w+ing\\b',t33)\n    t36 = re.findall(r'\\w+ing\\b',t34)\n    t37 = re.findall(r'\\w+ing\\b',t35)\n    t38 = re.findall(r'\\w+ing\\b',t36)\n    t39 = re.findall(r'\\w+ing\\b',t37)\n    t40 = re.findall(r'\\w+ing\\b',t38)\n    t41 = re.findall(r'\\w+ing\\b',t39)\n    t42 = re.findall(r'\\w+ing\\b',t40)\n    t43 = re.findall(r'\\w+ing\\b',t41)\n    t44 = re.findall(r'\\w+ing\\b',t42)\n    t45 = re.findall(r'\\w+ing\\b',t43)\n    t46 = re.findall(r'\\w+ing\\b',t44)\n    t47 = re.findall(r'\\w+ing\\b',t45)\n    t48 = re.findall(r'\\w+ing\\b',t46)\n    t49 = re.findall(r'\\w+ing\\b',t47)\n    t50 = re.findall(r'\\w+ing\\b',t48)\n    t51 = re.findall(r'\\w+ing\\b',t49)\n    t52 = re.findall(r'\\w+ing\\b',t50)\n    t53 = re.findall(r'\\w+ing\\b',t51)\n    t54 = re.findall(r'\\w+ing\\b',t52)\n    t55 = re.findall(r'\\w+ing\\b',t53)\n    t56 = re.findall(r'\\w+ing\\b',t54)\n    t57 = re.findall(r'\\w+ing\\b',t55)\n    t58 = re.findall(r'\\w+ing\\b',t56)\n    t59 = re.findall(r'\\w+ing\\b',t57)\n    t60 = re.findall(r'\\w+ing\\b',t58)\n    t61 = re.findall(r'\\w+ing\\b',t59)\n    t62 = re.findall(r'\\w+ing\\b',t60)\n    t63 = re.findall(r'\\w+ing\\b',t61)\n    t64 = re.findall(r'\\w+ing\\b',t62)\n    t65 = re.findall(r'\\w+ing\\b',t63)\n    t66 = re.findall(r'\\w+ing\\b',t64)\n    t67 = re.findall(r'\\w+ing\\b',t65)\n    t68 = re.findall(r'\\w+ing\\b',t66)\n    t69 = re.findall(r'\\w+ing\\b',t67)\n    t70 = re.findall(r'\\w+ing\\b',t68)\n    t71 = re.findall(r'\\w+ing\\b',t69)\n    t72 = re.findall(r'\\w+ing\\b',t70)\n    t73 = re.findall(r'\\w+ing\\b',t71)\n    t74 = re.findall(r'\\w+ing\\b',t72)\n    t75 = re.findall(r'\\w+ing\\b',t73)\n    t76 = re.findall(r'\\w+ing\\b',t74)\n    t77 = re.findall(r'\\w+ing\\b',t75)\n    t78 = re.findall(r'\\w+ing\\b',t76)\n    t79 = re.findall(r'\\w+ing\\b',t77)\n    t80 = re.findall(r'\\w+ing\\b',t78)\n    t81 = re.findall(r'\\w+ing\\b',t79)\n    t82 = re.findall(r'\\w+ing\\b',t80)\n    t83 = re.findall(r'\\w+ing\\b',t81)\n    t84 = re.findall(r'\\w+ing\\b',t82)\n    t85 = re.findall(r'\\w+ing\\b',t83)\n    t86 = re.findall(r'\\w+ing\\b',t84)\n    t87 = re.findall(r'\\w+ing\\b',t85)\n    t88 = re.findall(r'\\w+ing\\b',t86)\n    t89 = re.findall(r'\\w+ing\\b',t87)\n    t90 = re.findall(r'\\w+ing\\b',t88)\n    t91 = re.findall(r'\\w+ing\\"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'([A-Z].*\\w|\\w[a-z]+)(?:(\\s|$))*(ADVERB|adverb)(?:(\\s|$))*(\\w+|$)'\n    result = re.finditer(pattern, text)\n    result_list = []\n    for elem in result:\n        result_list.append(elem)\n    return result_list\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r'\\b(?:ADV|ADVB|ADVBP|ADVBS|RB|RBR|RBS)\\b', text)\n    for ind in range(len(result)):\n        result[ind] = result[ind][0].upper()\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r'[A-Z]{3,}?[AD]',text)\n    adverb_pos = re.findall(r'[A-Z]{3,}?[AD]',text)\n    print(result)\n    print(adverb_pos)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    position_list = []\n    sentences = text.split(\".\")\n    for sentence in sentences:\n        if \"!\" in sentence:\n            index = sentence.index(\"!\")\n            position_list.append(index)\n        elif \"?\" in sentence:\n            index = sentence.index(\"?\")\n            position_list.append(index)\n        elif \".\" in sentence:\n            index = sentence.index(\".\")\n            position_list.append(index)\n        else:\n            continue\n    if position_list!= []:\n        return position_list\n    else:\n        return \"No Adverb Found!\"\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position_index = []\n    sentence = text.split(\".\")\n    for i in sentence:\n        for word in i.split():\n            if word.endswith(\".\"):\n                continue\n            elif \"ADV\" in word or \"ADV.\" in word:\n                word = word.split()\n                if word[1] == \"ADV.\":\n                    adverb_position_index.append(i.index(word[0])+1)\n                else:\n                    adverb_position_index.append(i.index(word[1])+1)\n    return(adverb_position_index)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r'(\\w+ )?adverb'\n    r = re.search(pattern, text)\n    if r:\n        result.append(r.groups()[0])\n        result.append(r.span(0))\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.split()\n    my_list = []\n    for i in range(0,len(text)):\n        if text[i][-1] == ':':\n            my_list.append((text[i], i))\n    return my_list\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    position = []\n    for i in range(0,len(text)):\n        if re.search(r'\\b(every|each|both|any|both|either|either)\\s\\w{0,}',text[i]):\n            position.append([i,re.search(r'\\b(every|each|both|any|both|either|either)\\s\\w{0,}',text[i]).group()])\n    return position\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('ad'):\n            a[i] = word\n    return a\n    \n    \ndef find_adverb_position_not_duplicate(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('ad') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('n'):\n            a[i] = word\n    return a\n    \ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('v'):\n            a[i] = word\n    return a\n    \ndef find_adj_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('a'):\n            a[i] = word\n    return a\n    \ndef find_verb_position_not_duplicate(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('v') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_noun_position_not_duplicate(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('n') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_verb_position_not_duplicate_in_a_list(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('v') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_noun_position_not_duplicate_in_a_list(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('n') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_adjective_position_not_duplicate_in_a_list(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('a') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_noun_position_and_adjective_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('n'):\n            a[i] = word\n    for word, i in enumerate(text.split()):\n        if i.endswith('a'):\n            if word in a:\n                a[i] = word\n    return a\n    \ndef find_adjective_position_and_adjective_position_not_duplicate(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('a'):\n            a[i] = word\n    for word, i in enumerate(text.split()):\n        if i.endswith('a') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_adjective_position_and_noun_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('a'):\n            a[i] = word\n    for word, i in enumerate(text.split()):\n        if i.endswith('n') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_noun_position_and_verb_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('n'):\n            a[i] = word\n    for word, i in enumerate(text.split()):\n        if i.endswith('v') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_noun_position_and_verb_position_not_duplicate(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('n'):\n            a[i] = word\n    for word, i in enumerate(text.split()):\n        if i.endswith('v') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_adjective_position_and_noun_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('a'):\n            a[i] = word\n    for word, i in enumerate(text.split()):\n        if i.endswith('n') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_noun_position_and_noun_position_not_duplicate(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('n'):\n            a[i] = word\n    for word, i in enumerate(text.split()):\n        if i.endswith('n') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_adjective_position_and_noun_position_not_duplicate_in_a_list(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    a = {}\n    for word, i in enumerate(text.split()):\n        if i.endswith('a'):\n            a[i] = word\n    for word, i in enumerate(text.split()):\n        if i.endswith('n') and not i in a:\n            a[i] = word\n    return a\n    \ndef find_noun_position_and_noun_position_not_duplicate_in_a_list(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # print(l)\n    surfacearea = 2*(l*l*l)\n    # print(\"Surface area:\", surfacearea)\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    S = 3 * (l ** 2)\n    return S\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6*l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos += 1\n        if nums[i] < 0:\n            neg += 1\n    return pos/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    total = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            total += 1\n    return total / len(nums)\n    \ndef plus(nums):\n    '''\n    Write a function to find the sum of the numbers in an array of integers.\n    '''\n    \n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    return total\n    \ndef plus_3(nums):\n    '''\n    Write a function to find the sum of the cubes of the numbers in an array of integers.\n    '''\n    \n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]**3\n    return total\n    \ndef better_plus(nums):\n    '''\n    Write a function to find the sum of the numbers in an array of integers.\n    '''\n    \n    return sum(nums)\n    \ndef better_plus_2(nums):\n    '''\n    Write a function to find the sum of the cubes of the numbers in an array of integers.\n    '''\n    \n    total = 0\n    for i in range(len(nums)):\n        total += nums[i] ** 3\n    return total\n    \ndef find_odd_index(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    return odd_index\n    \ndef find_odd_index_2(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    return nums.index(1, 0, len(nums))\n    \ndef find_odd_index_3(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    return nums.index(nums[0])\n    \ndef find_odd_index_4(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    return nums.index(nums[0]) + 1\n    \ndef find_odd_index_5(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    return nums.index(nums[0]) + 1\n    \ndef find_odd_index_6(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    return len(nums) - 1 - nums.index(nums[-1])\n    \ndef find_odd_index_7(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return i\n    return -1\n    \ndef find_odd_index_8(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = len(nums) - 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    return odd_index\n    \ndef find_odd_index_9(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = -1\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index = i\n            \n    return odd_index\n    \ndef find_odd_index_10(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = -1\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    \n    return odd_index\n    \ndef find_odd_index_11(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = -1\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    \n    return odd_index\n    \ndef find_odd_index_12(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = -1\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    \n    return odd_index\n    \ndef find_odd_index_13(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = -1\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    \n    return odd_index\n    \ndef find_odd_index_14(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = -1\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    \n    return odd_index\n    \ndef find_odd_index_15(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = -1\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    \n    return odd_index\n    \ndef find_odd_index_16(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = len(nums) - 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    return odd_index\n    \ndef find_odd_index_17(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = len(nums) - 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    return odd_index\n    \ndef find_odd_index_18(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = len(nums) - 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    return odd_index\n    \ndef find_odd_index_19(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n    \n    odd_index = len(nums) - 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] % 2!= 0:\n            odd_index = i\n    return odd_index\n    \ndef find_odd_index_20(nums):\n    '''\n    Write a function that finds the index of the odd number in an array of integers.\n    '''\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    neg = 0\n    zero = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos += 1\n        elif nums[i] < 0:\n            neg += 1\n        else:\n            zero += 1\n    return neg/pos\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive=0\n    for i in range(0,len(nums)):\n        if nums[i]>0:\n            positive+=1\n    return positive/len(nums)\ndef fibonacci(n):\n    '''\n    Write a function that implements the Fibonacci sequence\n    that starts with 0,1,1,2,3,5,8,13,21...\n    '''\n    #for n in range(1,n+1):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef factorial(n):\n    '''\n    Write a function that implements the factorial of an integer\n    (that is, the product of all integers from 1 to that number).\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef max_pos(nums):\n    '''\n    Write a function that finds the maximum positive value in an array\n    of integers.\n    '''\n    max=0\n    for i in range(0,len(nums)):\n        if nums[i]>0:\n            max=max if max<nums[i] else nums[i]\n    return max\ndef max_neg(nums):\n    '''\n    Write a function that finds the maximum negative value in an array of integers.\n    '''\n    max=-999999999999999999\n    for i in range(0,len(nums)):\n        if nums[i]>0:\n            max=max if max>nums[i] else nums[i]\n    return max\ndef sum_sorted(nums):\n    '''\n    Write a function that sums the elements of an array that are sorted\n    in ascending order.\n    '''\n    sum=0\n    for i in range(0,len(nums)):\n        sum=sum+nums[i]\n    return sum\ndef array_intersection(nums1,nums2):\n    '''\n    Write a function that returns an array with only the elements\n    in both nums1 and nums2\n    '''\n    output=[]\n    i=0\n    j=0\n    while i<len(nums1) and j<len(nums2):\n        if nums1[i]==nums2[j]:\n            output.append(nums1[i])\n            i+=1\n            j+=1\n        elif nums1[i]>nums2[j]:\n            j+=1\n        else:\n            i+=1\n    return output\ndef anagrams(s1,s2):\n    '''\n    Write a function that checks whether two strings are anagrams of each other.\n    '''\n    str1=sorted(s1)\n    str2=sorted(s2)\n    if len(str1)!=len(str2):\n        return False\n    else:\n        for i in range(0,len(str1)):\n            if str1[i]!=str2[i]:\n                return False\n    return True\ndef shifted_array(n,k):\n    '''\n    Write a function that returns a shifted array\n    '''\n    if n==1:\n        return 0\n    else:\n        return n*k+(k*(k+1)/2)\ndef rotated(nums):\n    '''\n    Write a function that checks whether an array is rotated\n    for a certain number of positions.\n    '''\n    if len(nums)<=1:\n        return True\n    else:\n        if nums[0]==nums[len(nums)-1]:\n            return True\n    for i in range(0,len(nums)-1):\n        if nums[i+1]==nums[i]:\n            return False\n    return True\ndef rotated_array(nums):\n    '''\n    Write a function that returns a rotated array\n    '''\n    if len(nums)<=1:\n        return nums\n    else:\n        if nums[0]==nums[len(nums)-1]:\n            return nums\n    for i in range(0,len(nums)-1):\n        if nums[i+1]==nums[i]:\n            return rotated(nums[0:i])+nums[i+1:len(nums)]+rotated(nums[0:i+1])\n    return nums\ndef array_search(nums,n):\n    '''\n    Write a function that returns the index of a value in an array,\n    if it is not in the array.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]==n:\n            return i\n    return -1\ndef count_sort(nums):\n    '''\n    Write a function that returns a sorted array.\n    '''\n    output=[]\n    min=nums[0]\n    for i in range(0,len(nums)):\n        if nums[i]<min:\n            min=nums[i]\n    for i in range(0,len(nums)):\n        count=0\n        for j in range(0,len(nums)):\n            if nums[j]==nums[i]:\n                count+=1\n        output.append(count)\n    for i in range(0,len(nums)):\n        nums[i]=min+output[i]\n    return nums\ndef number_to_string(n):\n    '''\n    Write a function that takes an integer and converts it to a string\n    '''\n    if n<0:\n        return \"-\"\n    else:\n        s=str(n)\n        return s\ndef string_to_number(s):\n    '''\n    Write a function that takes a string and converts it to an integer\n    '''\n    s=s.split(\"-\")\n    if len(s)==1:\n        return int(s[0])\n    else:\n        return -1\ndef to_string_array(nums):\n    '''\n    Write a function that converts a list of strings to a string of the\n    array\n    '''\n    return \" \".join(nums)\ndef to_string_list(nums):\n    '''\n    Write a function that converts a string to a list of strings\n    '''\n    return nums.split()\ndef invert_array(nums):\n    '''\n    Write a function that inverts the order of an array\n    '''\n    for i in range(0,len(nums)):\n        nums[i]=-nums[i]\n    return nums\ndef array_to_string(nums):\n    '''\n    Write a function that converts an array to a string\n    '''\n    s=''\n    for i in range(0,len(nums)):\n        s+=str(nums[i])\n        s+=\" \"\n    return s\ndef string_to_array(s):\n    '''\n    Write a function that converts a string to an array\n    '''\n    return s.split()\ndef calculate_min_max(nums):\n    '''\n    Write a function that calculates the minimum and maximum\n    values in a list.\n    '''\n    min=nums[0]\n    max=nums[0]\n    for i in range(0,len(nums)):\n        if nums[i]<min:\n            min=nums[i]\n        elif nums[i]>max:\n            max=nums[i]\n    return (min,max)\ndef string_intersection(s1,s2):\n    '''\n    Write a function that returns a string made of the\n    intersection of the two strings.\n    '''\n    count=0\n    for i in range(0,len(s1)):\n        if s1[i]==s2[i]:\n            count+=1\n    return count\ndef array_intersection(nums1,nums2):\n    '''\n    Write a function that returns a list of numbers\n    that are in both lists\n    '''\n    output=[]\n    i=0\n    j=0\n    while i<len(nums1) and j<len("
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([num for num in nums if num > 0])\ndef get_doubles(nums):\n    '''\n    Write a function that returns a list of all numbers that are perfect squares.\n    '''\n    out = []\n    for n in nums:\n        if n**0.5 == int(n**0.5):\n            out.append(int(n**0.5))\n    return out\ndef sorter(nums):\n    '''\n    Write a function that sorts a list of numbers by their digits in ascending order.\n    '''\n    nums = list(nums)\n    nums.sort()\n    return nums\ndef sum_divisible(nums):\n    '''\n    Write a function that returns the sum of all numbers in an array that are divisible by 2.\n    '''\n    sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            sum += num\n    return sum\ndef is_vowel(letter):\n    '''\n    Write a function that returns true if a letter is a vowel.\n    '''\n    return letter in ['a', 'e', 'i', 'o', 'u']\ndef most_frequent_word(words):\n    '''\n    Write a function that returns the most frequent word in a sentence.\n    '''\n    d = {}\n    for word in words:\n        if word not in d:\n            d[word] = 1\n        else:\n            d[word] += 1\n    max_times = 0\n    max_word = ''\n    for k, v in d.items():\n        if v > max_times:\n            max_word = k\n            max_times = v\n    return max_word\ndef majority_vote(votes):\n    '''\n    Write a function that returns the majority vote in an array of votes.\n    '''\n    votes = list(votes)\n    votes_count = {}\n    for vote in votes:\n        if vote not in votes_count:\n            votes_count[vote] = 1\n        else:\n            votes_count[vote] += 1\n    max_votes = 0\n    majority_vote = 0\n    for k, v in votes_count.items():\n        if v > max_votes:\n            majority_vote = k\n            max_votes = v\n    return majority_vote\ndef is_prime(n):\n    '''\n    Write a function that returns true if a number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef prime_list(n):\n    '''\n    Write a function that returns the list of primes up to and including n.\n    '''\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\ndef even_out_array(nums):\n    '''\n    Write a function that takes an array of integers and returns a new array of length\n    two such that its elements are either the smallest or largest values in the original array.\n    '''\n    sorted_nums = sorted(nums)\n    return sorted_nums\ndef largest_product_in_array(nums):\n    '''\n    Write a function that takes an array of non-negative integers and finds the largest product of four adjacent\n    numbers in the array.\n    '''\n    # pass\ndef array_compare(nums):\n    '''\n    Write a function that takes an array of integers and returns the number of pairs of integers that have a difference of 2 in the array.\n    '''\n    def diff(a,b):\n        return abs(a - b)\n    c = {}\n    nums = list(nums)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if diff(nums[i], nums[j]) == 2:\n                if nums[i] not in c:\n                    c[nums[i]] = 1\n                else:\n                    c[nums[i]] += 1\n    return len(c)\ndef array_compare_2(nums):\n    '''\n    Write a function that takes an array of integers and returns the number of pairs of integers that have a difference of 3 in the array.\n    '''\n    #pass\ndef multiple_numbers(nums):\n    '''\n    Write a function that takes an array of integers and returns the number of pairs of numbers that have a multiple of 3 in the array.\n    '''\n    #pass\ndef find_nums_that_sum_up_to(nums, num):\n    '''\n    Write a function that takes an array of integers and returns an array containing the numbers whose sum is equal to the given number.\n    '''\n    def sum_nums(nums, num):\n        nums = list(nums)\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == num:\n                    return [nums[i], nums[j]]\n    def sum_nums_2(nums, num):\n        nums = list(nums)\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == num:\n                    return nums[i], nums[j]\n    #pass\ndef find_nums_that_sum_up_to_k(nums, k):\n    '''\n    Write a function that takes an array of integers and a number k and returns the numbers whose sum is equal to k.\n    '''\n    #pass\ndef sort_arrays_by_sum(nums1, nums2):\n    '''\n    Write a function that takes two arrays of integers and returns an array of integers representing the numbers that are common in both arrays.\n    '''\n    nums1 = list(nums1)\n    nums2 = list(nums2)\n    nums1.sort()\n    nums2.sort()\n    #pass\ndef find_pairs_with_given_difference(nums, k):\n    '''\n    Write a function that takes an array of integers and a number k and returns the pairs of numbers whose difference is equal to k.\n    '''\n    nums = list(nums)\n    nums.sort()\n    #pass\ndef find_pairs_with_given_difference_2(nums, k):\n    '''\n    Write a function that takes an array of integers and a number k and returns the pairs of numbers whose difference is equal to k.\n    '''\n    nums = list(nums)\n    nums.sort()\n    #pass\ndef longest_palindrome(s):\n    '''\n    Write a function that takes a string and returns its longest palindrome. A palindrome is defined as a string that is read the same from left to right and from right to left.\n    '''\n    #pass\ndef find_pairs_of_numbers_with_given_sum(nums, k):\n    '''\n    Write a function that takes an array of integers and a number k and returns the pairs of numbers whose sum is equal to k.\n    '''\n    def palindrome_from_right(s):\n        '''\n        This function returns a palindrome from right side\n        '''\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == s[-(i + 1)]:\n                return s[i]\n    def palindrome_from_left(s):\n        '''\n        This function returns a palindrome from left side\n        '''\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == s[-(i + 1)]:\n                return s[i]\n    nums = list(nums)\n    nums.sort()\n    n = len(nums)\n    d = {}\n    for i in range(n):\n        if nums[i] not in d:\n            d[nums[i]] = 1\n        else:\n            d[nums[i]] += 1\n    for "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum_pos = 0\n    sum_neg = 0\n    for num in nums:\n        if num > 0:\n            sum_pos += 1\n        elif num < 0:\n            sum_neg += 1\n    return sum_pos,sum_neg\n    \ndef sorted_array(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    nums.sort()\n    return nums\n    \ndef bubble_sort(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    swap_count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                swap_count += 1\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return swap_count,nums\n    \ndef insert_sort(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    nums_len = len(nums)\n    for i in range(1,nums_len):\n        value = nums[i]\n        pos = i\n        while pos > 0 and nums[pos-1] > value:\n            nums[pos] = nums[pos-1]\n            pos -= 1\n        nums[pos] = value\n    return nums\n    \ndef merge_sort(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    def merge(a,b):\n        result = []\n        while a and b:\n            if a[0] <= b[0]:\n                result.append(a.pop(0))\n            else:\n                result.append(b.pop(0))\n        result.extend(a)\n        result.extend(b)\n        return result\n    def merge_sort_rec(a,b):\n        if a == []: return b\n        elif b == []: return a\n        if a[0] <= b[0]:\n            return merge(a,b)\n        else:\n            return merge(a,b)\n    return merge_sort_rec(nums[0:len(nums)//2],nums[len(nums)//2:])\n    \ndef selection_sort(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    def selection(nums,start,end):\n        i = start\n        j = end\n        pos = i\n        while i < j:\n            if nums[j] > nums[pos]:\n                nums[i],nums[j] = nums[j],nums[i]\n                i += 1\n            else:\n                j -= 1\n        return nums\n    nums_len = len(nums)\n    while nums_len > 1:\n        nums_len -= 1\n        nums = selection(nums,0,nums_len)\n    return nums\n    \ndef bucket_sort(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    import random\n    def get_random_num(nums):\n        return random.choice(nums)\n    nums_len = len(nums)\n    max_num = max(nums)\n    min_num = min(nums)\n    max_range = max_num - min_num\n    bucket = []\n    for i in range(nums_len):\n        bucket.append([])\n    for i in range(nums_len):\n        num = get_random_num(nums)\n        bucket[(num-min_num)//max_range].append(nums[i])\n    for i in range(nums_len):\n        nums[i] = get_random_num(bucket[i])\n    return nums\n    \ndef is_sorted(nums):\n    '''\n    Write a function to check if an array of integers is sorted in ascending order.\n    '''\n    for i in range(1,len(nums)):\n        if nums[i] <= nums[i-1]:\n            return False\n    return True\n    \ndef insertion_sort_rec(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    def insertion(nums,pos):\n        if pos > 0:\n            if nums[pos] < nums[pos-1]:\n                nums[pos],nums[pos-1] = nums[pos-1],nums[pos]\n                insertion(nums,pos-1)\n    nums_len = len(nums)\n    if nums_len == 0: return []\n    insertion(nums,1)\n    return nums\n    \ndef count_sort(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    def count_sort_rec(nums,low,high,last):\n        if high-low < 1:\n            return \n        count = [0 for i in range(0,100)]\n        for i in range(0,high-low+1):\n            count[nums[i+low]] += 1\n        for i in range(1,len(count)):\n            count[i] += count[i-1]\n        for i in range(high-low,low-1,-1):\n            count[nums[i+low]] -= 1\n            nums[i+low] = count[nums[i+low]]\n        count_sort_rec(nums,low,high-1,last)\n        \n    nums_len = len(nums)\n    low = min(nums)\n    high = max(nums)\n    last = high - low + 1\n    count_sort_rec(nums,low,high,last)\n    return nums\n    \ndef quick_sort(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    def quick_sort_rec(nums,low,high):\n        if low >= high:\n            return\n        pivot = nums[low]\n        i = low\n        j = high\n        while i < j:\n            while i < j and nums[j] >= pivot:\n                j -= 1\n            if i < j:\n                nums[i] = nums[j]\n                i += 1\n            while i < j and nums[i] <= pivot:\n                i += 1\n            if i < j:\n                nums[j] = nums[i]\n                j -= 1\n        nums[i] = pivot\n        quick_sort_rec(nums,low,i-1)\n        quick_sort_rec(nums,i+1,high)\n        \n    nums_len = len(nums)\n    quick_sort_rec(nums,0,nums_len-1)\n    return nums\n    \ndef radix_sort(nums):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    def digitize(nums,digit):\n        s = []\n        for num in nums:\n            s.append(num//digit)\n        s = digitize(s,10)\n        return s\n    nums_len = len(nums)\n    bucket = digitize(nums,1)\n    nums_len = len(nums)\n    for i in range(nums_len):\n        for j in range(0,nums_len-i):\n            if bucket[j] > bucket[j+1]:\n                bucket[j],bucket[j+1] = bucket[j+1],bucket[j]\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n    \ndef radix_sort_rec(nums,digit):\n    '''\n    Write a function to sort an array of integers in ascending order.\n    '''\n    def radix_sort_rec_rec(nums,digit,pos):\n        if digit == 0"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for num in list1:\n        if num < 0:\n            if num > max_num:\n                max_num = num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    m = -9999999999999\n    for i in list1:\n        if i < m:\n            m = i\n    return m\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for i in range(len(list1)):\n        if list1[i] > largest and list1[i] < 0:\n            largest = list1[i]\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = 0\n    for i in range(len(list1)):\n        if list1[i]<0 and max_num < list1[i]:\n            max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg=0\n    for i in range(len(list1)):\n        if (list1[i] < 0 and list1[i] > max_neg):\n            max_neg = list1[i]\n    return max_neg\n    "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(-i for i in list1)\n    "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in list1:\n        if i<0:\n            if i>largest:\n                largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maxi=-9999999999999\n    for i in list1:\n        if i<0:\n            if i>maxi:\n                maxi=i\n    return maxi\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max:\n                max = list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    m = -9999999\n    for i in range(len(list1)):\n        if list1[i] > m:\n            m = list1[i]\n    return m\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp = test_list[i]\n        temp = list(temp)\n        temp = temp[:K]\n        temp = tuple(temp)\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        if i[0] >= K:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [i[:K] for i in test_list]\n    \nprint(trim_tuple([[1,2,3,4,5,6,7],(1,2,3,4,5,6,7)],3))"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print('List before trim: {}'.format(test_list))\n    for i in range(0, len(test_list)):\n        lst = test_list[i]\n        del lst[K:]\n    return test_list\n    "
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][0:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        if len(i) >= K:\n            new_list.append(i[:K])\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [i[k:] for i in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate over the list\n    for i in range(len(test_list)):\n        # If the tuple has less than K elements, do not trim\n        if len(test_list[i]) > K:\n            # The tuple is trimmed\n            test_list[i] = test_list[i][0:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(map(lambda x,y: x * y, test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        tup = []\n        for i in range(len(test_tup1)):\n            tup.append(test_tup1[i] * test_tup2[i])\n        return tup\n    else:\n        return ('Invalid Tuple')\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup1)):\n        new_tuple = new_tuple + (test_tup1[i] * test_tup2[i], )\n    return new_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 0\n    else:\n        new_tup = ()\n        for i in range(0, len(test_tup1)):\n            new_tup = new_tup + (test_tup1[i] * test_tup2[i],)\n        return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    index_multiplication_tup = []\n    \n    for i in range(0,len(test_tup1)):\n        index_multiplication_tup.append(test_tup1[i] * test_tup2[i])\n    \n    return tuple(index_multiplication_tup)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths not same for multiplication\")\n    else:\n        if len(test_tup1) == 0:\n            print(\"No elements present for multiplication\")\n        else:\n            return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Your code here\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(0,len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return tuple(test_tup1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_tup = (Counter(tup) & Counter(lst)) \n    return count_tup\n    \n    "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return list(Counter(lst).items())\nprint(count_Occurrence((\"Hello\",\"World\"),[\"a\",\"b\",\"c\"]))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = []\n    for i in range(len(lst)):\n        if lst[i] in tup:\n            if lst[i] not in res:\n                res.append(lst[i])\n    return len(res)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_count = list(Counter(tup).values())\n    return lst_count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # count_occ_of_all = []\n    # for i in range(len(lst)):\n    #     count_occ_of_all.append(lst.count(lst[i]))\n    # return count_occ_of_all\n    return tuple(lst).count(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = []\n    for t in lst:\n        if t in tup:\n            res.append(tup.count(t))\n    return res\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    print(Counter(lst).items()) \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).most_common(1)[0][1]\n    \n    \ndef find_first_sublist(lst):\n    '''\n    Write a python function to find the first sublist which is a palindrome.\n    Return a boolean value indicating if the first sublist is a palindrome.\n    '''\n    lst_1 = lst[1:]\n    lst_1.reverse()\n    if lst == lst_1:\n        return True\n    else:\n        return False\n    \n    \ndef swap_first_last_characters(s):\n    '''\n    Write a python function to swap the first and last characters of a string.\n    Return the new string.\n    '''\n    s = s[1:] + s[0]\n    return s\n    \n    \ndef count_word_occurences(lst, word):\n    '''\n    Write a python function to count the number of occurrences of the word in a list of strings.\n    Return the number of occurrences\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if word in lst[i]:\n            count += 1\n    return count\n    \n    \ndef remove_duplicates(lst):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    Return the new list.\n    '''\n    final_lst = []\n    for i in lst:\n        if i not in final_lst:\n            final_lst.append(i)\n    return final_lst\n    \n    \ndef remove_repetitive_string(s):\n    '''\n    Write a python function to remove all the repetitions of characters from a string.\n    Return the new string.\n    '''\n    s = s.split(\" \")\n    s = ''.join(s)\n    return s\n    \n    \ndef capitalize_first_character(s):\n    '''\n    Write a python function to capitalize the first character of a string.\n    Return the new string.\n    '''\n    s = s.capitalize()\n    return s\n    \n    \ndef double_vowels(s):\n    '''\n    Write a python function to find if the string has more than one vowel.\n    Return the string if it has more than one vowel.\n    '''\n    lst = []\n    for i in s:\n        if i in 'aeiou':\n            lst.append(i)\n    if len(lst) > 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n    \ndef two_letter_words(s):\n    '''\n    Write a python function to find if the string contains any two-letter words.\n    Return the string if it contains any two-letter words.\n    '''\n    lst = []\n    for i in s.split():\n        if len(i) == 2:\n            lst.append(i)\n    if len(lst) > 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n    \ndef check_pangram(s):\n    '''\n    Write a python function to check if the string contains all the alphabets present in alphabet.txt file.\n    Return the boolean value.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in s.lower():\n        if i not in alphabet:\n            return False\n    return True\n    \n    \ndef count_vowels(s):\n    '''\n    Write a python function to count the occurrences of vowels in a string.\n    Return the number of occurrences.\n    '''\n    vowel = 'aeiou'\n    count = 0\n    for i in s:\n        if i in vowel:\n            count += 1\n    return count\n    \n    \ndef count_consonants(s):\n    '''\n    Write a python function to count the occurrences of consonants in a string.\n    Return the number of occurrences.\n    '''\n    consonant = 'qwertyuiopasdfghjklzxcvbnm'\n    count = 0\n    for i in s:\n        if i in consonant:\n            count += 1\n    return count\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome.\n    Return the boolean value.\n    '''\n    lst = []\n    s = s.lower()\n    for i in range(len(s)):\n        lst.append(s[i])\n    if lst == lst[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef count_consonants_vowels(s):\n    '''\n    Write a python function to count the occurence of vowels and consonants in a string.\n    Return the number of vowels and consonants\n    '''\n    vowel = 'aeiou'\n    consonant = 'qwertyuiopasdfghjklzxcvbnm'\n    count_vowels = 0\n    count_consonants = 0\n    for i in s:\n        if i in vowel:\n            count_vowels += 1\n        if i in consonant:\n            count_consonants += 1\n    return count_vowels, count_consonants\n    \n    \ndef count_repeat(lst):\n    '''\n    Write a python function to count the number of times a character is repeated in a string.\n    Return the number of times the character is repeated.\n    '''\n    count = 0\n    for i in lst:\n        if lst.count(i) > 1:\n            count += 1\n    return count\n    \n    \ndef luhn_algorithm(card_num):\n    '''\n    Write a python function to determine whether the card number provided is a valid credit card number or not.\n    Return the boolean value.\n    '''\n    card_num = list(map(int, list(card_num)))\n    for i in range(len(card_num)):\n        if card_num[i] > 9:\n            card_num[i] -= 9\n    for i in range(len(card_num)):\n        if card_num[i] > 9:\n            card_num[i] -= 9\n    check = 0\n    for i in range(len(card_num)):\n        if i % 2 == 0:\n            check += card_num[i]\n        else:\n            check += card_num[i] * 2\n    if check % 10 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_prime(num):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    Return the boolean value.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_v2(num):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    Return the boolean value.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \n    \ndef prime_factors(num):\n    '''\n    Write a python function to find the prime factors of a given number.\n    Return the factors.\n    '''\n    factors = []\n    while num > 1:\n        for i in range(2, num + 1):\n            if num % i == 0:\n                factors.append(i)\n                num = num // i\n                break\n    return factors\n    \n    \ndef digits_to_letters(num):\n    '''\n    Write a python function to convert a given number to a list of letters.\n    Return the list.\n    '''\n    lst = []\n    while num > 0:\n        lst.append(chr(ord('a') + num % 26))\n        num = num // 26\n    return lst\n    \n    \ndef reverse_digits(num):\n    '''\n    Write a python function to reverse a given number.\n    Return the number.\n    '''\n    lst = []\n    while num "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    #print(cnt.items())\n    #print(cnt)\n    for i,j in enumerate(cnt.keys()):\n        if lst.count(j)!= cnt[j]:\n            #print(lst[i])\n            del lst[i]\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in tup:\n        if i not in lst:\n            print(i)\n            return False\n    return True\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = list()\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube(x) for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums_list = []\n    for num in nums:\n        cube_nums_list.append(num*num*num)\n    print(cube_nums_list)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**3)\n    return res\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x**3, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # pass # debug me!\n    cube_list = []\n    for i in nums:\n        cube_list.append(i**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if not nums:\n        return []\n    return map(lambda x: x**3, nums)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num = n\n    sum = 0\n    while num!= 0:\n        sum += num\n        num = num - 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    n=n+1\n    while n>0:\n        sum+=n\n        n-=1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return 0 if n == 1 else n*(2*n-1)+(2*n+1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_of_all = 0\n    for i in range(1, n+1):\n        sum_of_all += i\n    return sum_of_all\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # first if the number is less than 100, add it to the sum.\n    if n < 100:\n        return n\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # return the sum of all the perrin numbers divisible by 3 and 5.\n    return (n*(n+1)) / 2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    i = 0\n    while i < n:\n        if i % 2!= 0:\n            yield i\n        i += 1\n    print(\"{}\".format(sum(i for i in cal_sum(n))))\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(str)\n    print(l)\n    for i in range(len(l)):\n        print(i)\n        l[i]=l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:l[i].index('\"')+1+int(l[i][l[i].index('\"')+1:"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[l[0]:l[1]]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    #code here\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print('list size', l)\n    temp = []\n    for i in range(0, len(l)):\n        for j in range(0, len(str)):\n            if j > len(l[i]):\n                break\n            else:\n                temp.append(l[i][j])\n                if len(temp) == len(str):\n                    return temp\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str = map(str, l)\n    return reduce(lambda a,b: a + b, str[0:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    #start writing your code here\n    l1 = []\n    for i in range(0,len(l)):\n        if(len(l[i])>l[i]):\n            for j in range(0,l[i]):\n                l1.append(l[i][j])\n            return \"\".join(l1)\n        else:\n            return \"\".join(l[i])\n    \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not str:\n        return\n    \n    k = 0\n    for i in str:\n        if len(i) < l:\n            continue\n        else:\n            k += 1\n    \n    if k == 0:\n        return\n    else:\n        return str[:k]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # start = 0\n    # end = l\n    # s =''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # s +=''\n    # return s\n    \n    # start = 0\n    # end = l\n    # s =''\n    # while start < l:\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s =''\n    # s = str[start:end]\n    # return s\n    \n    # start = 0\n    # end = l\n    # s =''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s =''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s =''\n    # while end > start:\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s =''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # s = ''\n    # start = 0\n    # end = l\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = str[start:end]\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n    # s = ''\n    # for i in range(l):\n    #     s += str[start]\n    #     start += 1\n    #     end -= 1\n    # return s\n    \n    # start = 0\n    # end = l\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\ndef lowercase(text2):\n    '''\n    Write a function to convert all uppercase characters into lowercase characters.\n    '''\n    text2 = text2.lower()\n    return text2\ndef cap_first(text3):\n    '''\n    Write a function to capitalize the first letter of each word.\n    '''\n    text3 = text3.title()\n    return text3\ndef make_spoilers(text4):\n    '''\n    Write a function to return a list of strings \"Hi, this is my name, what is your name?\".\n    '''\n    text4 = text4.split(', ')\n    return text4\ndef no_of_words(text5):\n    '''\n    Write a function to return the number of words in the given string.\n    '''\n    text5 = text5.split()\n    return len(text5)\ndef word_count(text6):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text6 = re.split(' ', text6)\n    text6 = dict(zip(text6, range(len(text6))))\n    return text6\ndef count_and_sort(text7):\n    '''\n    Write a function that sorts a dictionary by value and returns a new sorted dictionary.\n    '''\n    text7 = dict(sorted(text7.items(), key=lambda item: item[1]))\n    return text7\ndef remove_space(text8):\n    '''\n    Write a function to remove extra spaces from the given string.\n    '''\n    text8 = re.sub(' +', '', text8)\n    return text8\ndef count_and_remove(text9):\n    '''\n    Write a function to remove duplicate words from a string.\n    '''\n    text9 = text9.split(' ')\n    text9 = dict(Counter(text9))\n    return text9\ndef remove_start_end(text10):\n    '''\n    Write a function to remove a given prefix and suffix from a string.\n    '''\n    text10 = re.sub('^[^\\w ]+|[^\\w ]+$', '', text10)\n    return text10\ndef remove_punctuation(text11):\n    '''\n    Write a function to remove the punctuation from a given string.\n    '''\n    text11 = re.sub('[^\\w\\s]', '', text11)\n    return text11\ndef words_longer_than_x(text12):\n    '''\n    Write a function to return a list of words from the given string where the length of the word is more than 3.\n    '''\n    text12 = re.findall(r'\\w+', text12)\n    text12 = list(filter(lambda x: len(x)>3, text12))\n    return text12\ndef count_words_in_string(text13):\n    '''\n    Write a function to return the number of words in the given string.\n    '''\n    text13 = re.split(' ', text13)\n    return len(text13)\ndef split_string(text14):\n    '''\n    Write a function to split the given string on a whitespace.\n    '''\n    text14 = re.split('\\s+', text14)\n    return text14\ndef first_and_last(text15):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text15 = re.split(' ', text15)\n    text15 = dict(zip(text15, range(len(text15))))\n    return text15\ndef words_start_with(text16):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text16 = re.findall(r'\\b\\w+\\b', text16)\n    text16 = dict(Counter(text16))\n    return text16\ndef words_contain_start_and_end(text17):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text17 = re.findall(r'\\w+', text17)\n    text17 = dict(Counter(text17))\n    return text17\ndef lower_and_upper(text18):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text18 = re.findall(r'\\w+', text18)\n    text18 = dict(Counter(text18))\n    return text18\ndef first_word_and_last(text19):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text19 = re.findall(r'\\w+', text19)\n    text19 = dict(Counter(text19))\n    return text19\ndef word_length(text20):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text20 = re.findall(r'\\w+', text20)\n    text20 = dict(Counter(text20))\n    return text20\ndef word_length_in_sorted_list(text21):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text21 = sorted(list(text21.keys()))\n    text21 = dict(Counter(text21))\n    return text21\ndef sort_by_value(text22):\n    '''\n    Write a function that sorts a dictionary by value and returns a new sorted dictionary.\n    '''\n    text22 = sorted(text22.items(), key=lambda item: item[1])\n    return text22\ndef start_and_end(text23):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text23 = re.findall(r'\\w+', text23)\n    text23 = dict(Counter(text23))\n    return text23\ndef longest_word(text24):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text24 = sorted(list(text24.keys()), key=len, reverse=True)\n    text24 = dict(Counter(text24))\n    return text24\ndef last_two_characters(text25):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text25 = re.findall(r'\\w+', text25)\n    text25 = dict(Counter(text25))\n    return text25\ndef max_length(text26):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text26 = re.findall(r'\\w+', text26)\n    text26 = dict(Counter(text26))\n    return text26\ndef middle_letters(text27):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text27 = re.findall(r'\\w+', text27)\n    text27 = dict(Counter(text27))\n    return text27\ndef longest_word_spacing(text28):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text28 = re.findall(r'\\w+', text28)\n    text28 = dict(Counter(text28))\n    return text28\ndef lower_case_and_space(text29):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text29 = re.findall(r'\\w+', text29)\n    text29 = dict(Counter(text29))\n    return text29\ndef start_and_end_with(text30):\n    '''\n    Write a function to return a dictionary with the number of occurrences of each word in the given string.\n    '''\n    text30 = re"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Your code here\n    return ''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    string=text1.strip()\n    return string\ndef is_palindrome(text2):\n    '''\n    Write a function to check whether the given text is a palindrome or not.\n    '''\n    string = text2.lower()\n    string=remove_whitespaces(string)\n    if (string[0] == string[-1]):\n        return True\n    else:\n        return False\ndef is_palindrome_using_regex(text3):\n    '''\n    Write a function to check whether the given text is a palindrome or not using regex.\n    '''\n    string=text3.lower()\n    regex = re.compile(r'[\\W_]+')\n    string = regex.sub('', string)\n    if (string[0] == string[-1]):\n        return True\n    else:\n        return False\ndef is_palindrome_using_slicing(text4):\n    '''\n    Write a function to check whether the given text is a palindrome or not using slicing.\n    '''\n    string=text4.lower()\n    regex = re.compile(r'[\\W_]+')\n    string = regex.sub('', string)\n    if (string[0] == string[-1]):\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    print(\"Example 1:\")\n    print(is_palindrome('A man, a plan, a canal: Panama'))\n    print(\"\\nExample 2:\")\n    print(is_palindrome('radar'))\n    print(\"\\nExample 3:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 4:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 5:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 6:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 7:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 8:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 9:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 10:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 11:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 12:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 13:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 14:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 15:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 16:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 17:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 18:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 19:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 20:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 21:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 22:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 23:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 24:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 25:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 26:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 27:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 28:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 29:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 30:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 31:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 32:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 33:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 34:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 35:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 36:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 37:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 38:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 39:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 40:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 41:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 42:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 43:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 44:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 45:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 46:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 47:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 48:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 49:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 50:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 51:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 52:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 53:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 54:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 55:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 56:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 57:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 58:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 59:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 60:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 61:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 62:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 63:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 64:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 65:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 66:\")\n    print(is_palindrome('Race a car'))\n    print(\"\\nExample 67:\")\n    print(is_palindrome('Race a car'))\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\ndef count_words_in_text(text):\n    '''\n    Write a function that counts the number of words in the given string.\n    '''\n    words_count = re.sub('\\W+','',text).split()\n    print(\"\\nThe number of words in the text are: \", len(words_count))\ndef count_letters_in_text(text):\n    '''\n    Write a function that counts the number of letters in the given string.\n    '''\n    letters_count = re.sub('\\W+','',text).lower().count('a')\n    print(\"\\nThe number of letters in the text are: \", letters_count)\ndef count_sentences_in_text(text):\n    '''\n    Write a function that counts the number of sentences in the given string.\n    '''\n    sentences_count = re.findall(\"(?<=.)[.!?]+\", text)\n    print(\"\\nThe number of sentences in the text are: \", len(sentences_count))\ndef count_unique_letters_in_text(text):\n    '''\n    Write a function that counts the number of distinct letters in the given string.\n    '''\n    unique_letters = list(set(re.sub('\\W+','', text).lower()))\n    print(\"\\nThe number of unique letters in the text are: \", len(unique_letters))\ndef count_unique_words_in_text(text):\n    '''\n    Write a function that counts the number of distinct words in the given string.\n    '''\n    unique_words = re.findall(\"\\w+\", text)\n    print(\"\\nThe number of unique words in the text are: \", len(unique_words))\ndef count_unique_words_in_long_text(text):\n    '''\n    Write a function that counts the number of distinct words in the given string.\n    '''\n    count = 0\n    unique_words = re.findall(\"\\w+\", text)\n    for i in range(0, len(unique_words)):\n        count += 1\n    print(\"\\nThe number of unique words in the text are: \", count)\ndef count_big_words_in_text(text):\n    '''\n    Write a function that counts the number of words that are longer than 4 characters in the given string.\n    '''\n    count = 0\n    for i in range(0, len(text)):\n        if len(text[i]) > 4:\n            count += 1\n    print(\"\\nThe number of words longer than 4 characters in the text are: \", count)\ndef count_long_sentences_in_text(text):\n    '''\n    Write a function that counts the number of sentences that are longer than 10 characters in the given string.\n    '''\n    count = 0\n    for i in range(0, len(text)):\n        if len(text[i]) > 10:\n            count += 1\n    print(\"\\nThe number of sentences longer than 10 characters in the text are: \", count)\ndef count_uppercase_letters_in_text(text):\n    '''\n    Write a function that counts the number of uppercase letters in the given string.\n    '''\n    uppercase_letters_count = 0\n    for i in range(0, len(text)):\n        if text[i] in uppercase_letters:\n            uppercase_letters_count += 1\n    print(\"\\nThe number of uppercase letters in the text are: \", uppercase_letters_count)\ndef count_vowels_in_text(text):\n    '''\n    Write a function that counts the number of vowels in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(0, len(text)):\n        if text[i] in vowels:\n            count += 1\n    print(\"\\nThe number of vowels in the text are: \", count)\ndef count_letters_and_vowels_in_text(text):\n    '''\n    Write a function that counts the number of vowels and letters in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    letters = re.sub('\\W+','', text).split()\n    count = 0\n    for i in range(0, len(letters)):\n        if letters[i] in vowels:\n            count += 1\n        if letters[i] in letters:\n            count += 1\n    print(\"\\nThe number of vowels in the text are: \", count)\ndef count_letters_and_vowels_in_long_text(text):\n    '''\n    Write a function that counts the number of vowels and letters in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    letters = re.findall(\"\\w+\", text)\n    count = 0\n    for i in range(0, len(letters)):\n        if letters[i] in vowels:\n            count += 1\n        if letters[i] in letters:\n            count += 1\n    print(\"\\nThe number of vowels in the text are: \", count)\ndef count_letters_and_vowels_in_long_text_2(text):\n    '''\n    Write a function that counts the number of vowels and letters in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    letters = re.findall(\"\\w+\", text)\n    count = 0\n    for i in range(0, len(letters)):\n        if letters[i] in vowels:\n            count += 1\n        if letters[i] in letters:\n            count += 1\n    print(\"\\nThe number of vowels in the text are: \", count)\ndef count_vowels_in_text_2(text):\n    '''\n    Write a function that counts the number of vowels in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(0, len(text)):\n        if text[i] in vowels:\n            count += 1\n    print(\"\\nThe number of vowels in the text are: \", count)\ndef count_letters_and_vowels_in_text_2(text):\n    '''\n    Write a function that counts the number of vowels in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    letters = re.sub('\\W+','', text).split()\n    count = 0\n    for i in range(0, len(letters)):\n        if letters[i] in vowels:\n            count += 1\n        if letters[i] in letters:\n            count += 1\n    print(\"\\nThe number of vowels in the text are: \", count)\ndef count_vowels_in_text_3(text):\n    '''\n    Write a function that counts the number of vowels in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in text:\n        if i in vowels:\n            count += 1\n    print(\"\\nThe number of vowels in the text are: \", count)\ndef count_vowels_in_text_4(text):\n    '''\n    Write a function that counts the number of vowels in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in text:\n        if i in vowels:\n            count += 1\n    return count\ndef count_letters_in_text_4(text):\n    '''\n    Write a function that counts the number of letters in the given string.\n    '''\n    letters = re.sub('\\W+','', text).split()\n    count = 0\n    for i in range(0, len(letters)):\n        count += 1\n    print(\"\\nThe number of letters in the text are: \", count)\ndef count_letters_in_text_5(text):\n    '''\n    Write a function that counts the number of letters in th"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\ndef reverse_order(string):\n    '''\n    Write a function to reverse the order of a given string.\n    '''\n    return string[::-1]\ndef check_is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    return string == reverse_order(string)\ndef remove_excess_chars(string):\n    '''\n    Write a function to remove the excess characters from the given string.\n    '''\n    return string.strip()\ndef letter_frequency(string):\n    '''\n    Write a function to count how many times a given letter occurs in a given string.\n    '''\n    letter_counts = {}\n    for char in string:\n        if char in letter_counts:\n            letter_counts[char] += 1\n        else:\n            letter_counts[char] = 1\n    return letter_counts\ndef sort_dictionary(dictionary):\n    '''\n    Write a function to sort a given dictionary.\n    '''\n    d = dict(sorted(dictionary.items(), key=lambda item: item[1]))\n    return d\ndef check_keys_exist_in_dictionary(dictionary, keys):\n    '''\n    Write a function to check if all keys exist in the given dictionary.\n    '''\n    if set(keys) <= set(dictionary.keys()):\n        return True\n    else:\n        return False\ndef get_keys_from_dictionary(dictionary, keys):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return list(dictionary.keys())\ndef get_values_from_dictionary(dictionary, keys):\n    '''\n    Write a function to get values from a dictionary.\n    '''\n    return list(dictionary.values())\ndef get_dictionary_from_key_value(dictionary, keys):\n    '''\n    Write a function to get the dictionary from a given list of key-value pairs.\n    '''\n    d = {}\n    for pair in dictionary:\n        d[pair[0]] = pair[1]\n    return d\ndef check_if_keys_exist_in_dictionary_values(dictionary, keys):\n    '''\n    Write a function to check if all values exist in the given dictionary.\n    '''\n    for key in keys:\n        if key not in dictionary.keys():\n            return False\n    return True\ndef word_counter(string):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(string.split())\ndef add_items_to_dictionary(dictionary, items):\n    '''\n    Write a function to add items to a dictionary.\n    '''\n    for item in items:\n        dictionary[item] = 0\n    return dictionary\ndef set_items_to_dictionary(dictionary, items):\n    '''\n    Write a function to add items to a dictionary.\n    '''\n    for item in items:\n        dictionary.add(item)\n    return dictionary\ndef get_keys_from_dictionary_value(dictionary, value):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return dictionary.keys()\ndef get_values_from_dictionary_key(dictionary, key):\n    '''\n    Write a function to get values from a dictionary.\n    '''\n    return dictionary.values()\ndef get_dictionary_from_key_value_pair(dictionary, key_value_pair):\n    '''\n    Write a function to get the dictionary from a given list of key-value pairs.\n    '''\n    d = {}\n    for pair in key_value_pair:\n        d[pair[0]] = pair[1]\n    return d\ndef get_items_from_dictionary_value_pair(dictionary, value_pair):\n    '''\n    Write a function to get values from a dictionary.\n    '''\n    return [pair[1] for pair in value_pair]\ndef get_items_from_dictionary_key_pair(dictionary, key_pair):\n    '''\n    Write a function to get values from a dictionary.\n    '''\n    return [pair[0] for pair in key_pair]\ndef remove_items_from_dictionary(dictionary, items):\n    '''\n    Write a function to remove items from a dictionary.\n    '''\n    for item in items:\n        del dictionary[item]\n    return dictionary\ndef get_keys_from_dictionary_items(dictionary, items):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return [pair[0] for pair in items]\ndef remove_items_from_dictionary_value(dictionary, value):\n    '''\n    Write a function to remove items from a dictionary.\n    '''\n    for item in dictionary.items():\n        if item[1] == value:\n            del item\n    return dictionary\ndef get_keys_from_dictionary_items_value(dictionary, value):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return [pair[0] for pair in dictionary.items() if pair[1] == value]\ndef remove_items_from_dictionary_key(dictionary, key):\n    '''\n    Write a function to remove items from a dictionary.\n    '''\n    for item in dictionary.items():\n        if item[0] == key:\n            del item\n    return dictionary\ndef get_keys_from_dictionary_items_key(dictionary, key):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return [pair[0] for pair in dictionary.items() if pair[0] == key]\ndef remove_items_from_dictionary_key_value(dictionary, key_value_pair):\n    '''\n    Write a function to remove items from a dictionary.\n    '''\n    for item in dictionary.items():\n        if item[0] == key_value_pair[0] and item[1] == key_value_pair[1]:\n            del item\n    return dictionary\ndef get_keys_from_dictionary_items_key_value(dictionary, key_value_pair):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return [pair[0] for pair in dictionary.items() if pair[0] == key_value_pair[0] and pair[1] == key_value_pair[1]]\ndef get_items_from_dictionary_key(dictionary, key):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return [pair[1] for pair in dictionary.items() if pair[0] == key]\ndef get_items_from_dictionary_key_value(dictionary, key_value_pair):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return [pair[1] for pair in dictionary.items() if pair[0] == key_value_pair[0] and pair[1] == key_value_pair[1]]\ndef get_items_from_dictionary_key_key(dictionary, key_key_pair):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return [pair[1] for pair in dictionary.items() if pair[0] == key_key_pair[0] and pair[1] == key_key_pair[1]]\ndef delete_key_value_pair_from_dictionary(dictionary, key_value_pair):\n    '''\n    Write a function to delete a key-value pair from a dictionary.\n    '''\n    for key in dictionary:\n        if dictionary[key] == key_value_pair:\n            del dictionary[key]\n    return dictionary\ndef delete_key_from_dictionary(dictionary, key):\n    '''\n    Write a function to delete a key from a dictionary.\n    '''\n    del dictionary[key]\n    return dictionary\ndef get_keys_from_dictionary_values(dictionary, values):\n    '''\n    Write a function to get keys from a dictionary.\n    '''\n    return [key for key, value in dictionary.items() if value in values]\ndef get_items_from_dictionary"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    return actual_cost - sale_amount\nprint(loss_amount(20,30)) # 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0\n    if sale_amount>=actual_cost:\n        loss_amount=(sale_amount-actual_cost)\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0 or actual_cost <= 0:\n        return 0\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost!= 0:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost-sale_amount \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return sale_amount\n    elif actual_cost==sale_amount:\n        return 0\n    elif actual_cost<sale_amount:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    #TODO: Write your Code here\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            if n//i == i :\n                sum = sum + i\n            else :\n                sum = sum + i + (n//i)\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if(n%i==0):\n            if(i%2==0):\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sumoffactors=0\n    for i in range(1,n):\n        if n%i==0:\n            if i%2==0:\n                sumoffactors+=i\n    return sumoffactors\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        if n % i == 0 :\n            sum += i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i < n: \n        if (n % i == 0) : \n            sum += i \n        i = i + 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    while n>1:\n        if n%2==0:\n            sum+=n\n            n=n/2\n        else:\n            n=n-1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while (n!= 0) : \n        if (n % 2 == 0) : \n            sum += n \n            n = n // 2\n        else : \n            n = n - 1\n    return sum\n    \ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Declare a variable to hold the value to be calculated \n    sumofFactors = 0\n    # Iterate through the factors of the given number\n    for i in range(2, int(math.sqrt(n))+1) : \n        # If the factors are positive, check if the number is divisible \n        if n%i == 0:\n            # If they are, add the number to the sum and divide the original number by that number \n            sumofFactors += i \n            n = n // i \n    # If the number is not divisible by any of the factors, add it to the sum\n    sumofFactors += n \n    return sumofFactors\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match_list = []\n    for word in re.findall('[a-zA-Z]\\w*[z]', text):\n        match_list.append(word)\n    return match_list\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\bz\\w+')\n    match = pattern.findall(text)\n    if len(match) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile('z')\n    print(pattern.findall(text))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # text = \"abcdefghijklmnopqrstuvwxyz\"\n    pattern = re.compile(r\"z\")\n    result = pattern.findall(text)\n    print(result)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #Matching the pattern 'z'\n    pattern = r'z'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Matching a word containing z\")\n    else:\n        print(\"Not matching a word containing z\")\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(r'\\bz\\w+',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall(r'\\bz\\w*', text)\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    try:\n        return re.findall(\"z\", text)\n    except:\n        raise ValueError('Something went wrong')\n        \nprint(text_match_wordz('abc zxy'))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall('z+', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = re.findall('z',text)\n    return len(wordz)\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2 and (((year % 4 == 0) and (year % 100!= 0)) or (year % 400 == 0)):\n            return 31\n        elif monthnum2 in range(1,3):\n            return 31\n        else:\n            return 30\n    else:\n        print(\"Month must be in the range of 1 to 12\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 'Feb':\n        return '31'\n    elif monthnum2 == 'Jan':\n        return '31'\n    elif monthnum2 == 'Mar':\n        return '31'\n    elif monthnum2 == 'May':\n        return '31'\n    elif monthnum2 == 'Jun':\n        return '30'\n    elif monthnum2 == 'Jul':\n        return '31'\n    elif monthnum2 == 'Aug':\n        return '31'\n    elif monthnum2 == 'Sep':\n        return '30'\n    elif monthnum2 == 'Oct':\n        return '31'\n    elif monthnum2 == 'Nov':\n        return '30'\n    elif monthnum2 == 'Dec':\n        return '31'\n    else:\n        print(\"Invalid month input\")\n        return '0'\ndef check_monthnumb_year(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum3 == 'Feb':\n        return '29'\n    elif monthnum3 == 'Jan':\n        return '28'\n    elif monthnum3 == 'Mar':\n        return '31'\n    elif monthnum3 == 'May':\n        return '30'\n    elif monthnum3 == 'Jun':\n        return '31'\n    elif monthnum3 == 'Jul':\n        return '31'\n    elif monthnum3 == 'Aug':\n        return '31'\n    elif monthnum3 == 'Sep':\n        return '30'\n    elif monthnum3 == 'Oct':\n        return '31'\n    elif monthnum3 == 'Nov':\n        return '30'\n    elif monthnum3 == 'Dec':\n        return '31'\n    else:\n        print(\"Invalid month input\")\n        return '0'\ndef check_monthnumb_date(monthnum4):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum4 == 'Feb':\n        return '30'\n    elif monthnum4 == 'Jan':\n        return '31'\n    elif monthnum4 == 'Mar':\n        return '31'\n    elif monthnum4 == 'May':\n        return '31'\n    elif monthnum4 == 'Jun':\n        return '30'\n    elif monthnum4 == 'Jul':\n        return '31'\n    elif monthnum4 == 'Aug':\n        return '31'\n    elif monthnum4 == 'Sep':\n        return '30'\n    elif monthnum4 == 'Oct':\n        return '31'\n    elif monthnum4 == 'Nov':\n        return '30'\n    elif monthnum4 == 'Dec':\n        return '31'\n    else:\n        print(\"Invalid month input\")\n        return '0'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # if monthnum2 == 1:\n    #     print(31)\n    # elif monthnum2 == 2:\n    #     print(28)\n    # else:\n    #     if (monthnum2 % 4) == 0:\n    #         if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n    #             print(30)\n    #         else:\n    #             print(31)\n    #     else:\n    #         print(31)\n    # return(31)\n    if monthnum2 in range(1,13):\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                print(30)\n            else:\n                print(31)\n        else:\n            print(31)\n    else:\n        print(\"Invalid month number\")\n        \ncheck_monthnumb_number(11)\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print('Month ', monthnum2,'contains 31 days')\n    else:\n        print('Month ', monthnum2,'does not contain 31 days')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 < 1 or monthnum2 > 12):\n        print(\"Please enter the valid month number\")\n        return False\n    elif (monthnum2 == 2):\n        if (year % 4 == 0 and year % 100!= 0) or (year % 4 == 0 and year % 100 == 0 and year % 400 == 0):\n            if (monthnum2 == 2):\n                print(\"February has 29 days\")\n            else:\n                print(\"February has 28 days\")\n        else:\n            print(\"February has 29 days\")\n    elif (monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11):\n        print(\"January has 31 days\")\n    else:\n        print(\"January has 30 days\")\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1:\n        print(\"January contains 31 days\")\n    elif monthnum2==2:\n        print(\"February contains 28 days or 29 days\")\n    elif monthnum2==3:\n        print(\"March contains 31 days\")\n    elif monthnum2==4:\n        print(\"April contains 30 days\")\n    elif monthnum2==5:\n        print(\"May contains 31 days\")\n    elif monthnum2==6:\n        print(\"June contains 30 days\")\n    elif monthnum2==7:\n        print(\"July contains 31 days\")\n    elif monthnum2==8:\n        print(\"August contains 31 days\")\n    elif monthnum2==9:\n        print(\"September contains 30 days\")\n    elif monthnum2==10:\n        print(\"October contains 31 days\")\n    elif monthnum2==11:\n        print(\"November contains 30 days\")\n    elif monthnum2==12:\n        print(\"December contains 31 days\")\n    else:\n        print(\"Invalid month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    revstringlist = []\n    for i in stringlist:\n        revstringlist.append(i[::-1])\n    return revstringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return(stringlist[::-1])\n    \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Make a new list with reversed values\n    new_list = []\n    for value in stringlist:\n        new_list.append(value[::-1])\n    # Return the new list\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    list_reversed = []\n    for i in range(len(stringlist)):\n        list_reversed.append(stringlist[i][::-1])\n    return list_reversed\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # code here\n    lst.sort()\n    min=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]==min:\n            return lst[i]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    smallest=100\n    index=0\n    if not lst:\n        return -1\n    for i in range(len(lst)):\n        if len(lst[i])<smallest:\n            smallest=len(lst[i])\n            index=i\n    return lst[index]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #code here\n    temp=lst\n    temp.sort()\n    min_=len(temp)\n    min_list=[]\n    for i in range(0,len(temp)):\n        if(len(min_list)==0 and len(min_list)==len(temp)-i):\n            min_list.append(temp[i])\n        elif(len(min_list)==0 and len(min_list)==len(temp)-i-1):\n            min_list.append(temp[i])\n            min_list.append(temp[i+1])\n        elif(len(min_list)==0 and len(min_list)==len(temp)-i-2):\n            min_list.append(temp[i])\n            min_list.append(temp[i+1])\n            min_list.append(temp[i+2])\n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m=min(lst)\n    for i in range(0,len(lst)):\n        if lst[i]==m:\n            return i\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    count = 0\n    lst1 = []\n    while count < len(lst):\n        if lst[count]!= 0:\n            lst1.append(lst[count])\n        count += 1\n    return min(lst1)\n    \nlst = [3, 0, 1, 1, 0, 1]\nprint('Minimum length of sublist: ',Find_Min(lst))"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(1,len(lst)):\n        for j in range(len(lst)-i+1):\n            if len(lst[j:j+i])<len(lst[j+i:j+i*2]):\n                lst_min=lst[j:j+i]\n    return lst_min\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    def min_len(lst):\n        min_len = len(lst)\n        for i in lst:\n            if len(i) < min_len:\n                min_len = len(i)\n        return min_len\n    min_len = min_len(lst)\n    for i in lst:\n        if min_len == len(i):\n            return i\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n            min_index = i\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    return lst[0]\n    "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_len_idx = i\n    return lst[min_len_idx]\nlst = [1,2,3,4,5,6,7]\nprint(Find_Min(lst))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # assert type(l) == type(b) == int\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l*b)\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    if len(str1)<=1:\n        return str1\n    else:\n        return remove_uppercase(str1[1:])+str1[0]\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n    \n    "
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i].islower() == False:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub('[A-Z]', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    no_lower = re.sub('[A-Z]', \"\", str1)\n    no_upper = re.sub('[A-Z]', \"\", no_lower)\n    return no_upper\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #upper_str=str1.upper()\n    #print(upper_str)\n    #upper_str=str1.split()\n    #print(upper_str)\n    #upper_str=upper_str.lower()\n    #print(upper_str)\n    #str1=str1.lower()\n    #print(str1)\n    #return str1\n    return(str1.replace(str1.upper(),str1.lower()).replace(str1.lower(),str1.upper()).replace(str1.title(),str1.lower()))\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]', '', str1)\n    return str2\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return(map(lambda x: x[0], lst))\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n    return lst1 \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [j[0] for j in lst]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    newList = []\n    for i in range(len(lst)):\n        newList.append(lst[i][0])\n    return newList\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    list1=[]\n    for i in lst:\n        list1.append(i[0])\n    return list1\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    print(list(map(lambda x: x[0],lst)))\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for l in lst:\n        result.append(l[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    a = [] \n    for i in lst: \n        a.append(i[0]) \n    return a \ndef RemoveDuplicates(lst): \n    '''\n    Write a python function to remove the duplicate elements from a given list.\n    '''\n    new_list = [] \n    for i in lst: \n        if i not in new_list: \n            new_list.append(i) \n    return new_list \ndef Is_palin(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef Is_palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    lst = list(s)\n    lst1 = RemoveDuplicates(lst)\n    lst2 = Extract(lst1)\n    \n    if lst == lst2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst[i])):\n            res.append(lst[i][j])\n    return res\nprint(Extract([[1,2,3],['a','b','c'],['d','e','f']])) \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[0])\n    return lst1\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # creating an empty dictionary\n    d = dict()\n    # iterating through characters\n    for i in str:\n        # if the character is already present in the dictionary\n        if i in d:\n            # increment the count for that character\n            d[i] += 1\n        # if character is not present in the dictionary\n        else:\n            # add the character to the dictionary and set count to 1\n            d[i] = 1\n    # return the dictionary\n    return d\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for ch in str:\n        if ch.isupper():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.count('A') + str.count('B') + str.count('C') + str.count('D') + str.count('E') + str.count('F') + str.count('G') + str.count('H') + str.count('I') + str.count('J') + str.count('K') + str.count('L') + str.count('M') + str.count('N') + str.count('O') + str.count('P') + str.count('Q') + str.count('R') + str.count('S') + str.count('T') + str.count('U') + str.count('V') + str.count('W') + str.count('X') + str.count('Y') + str.count('Z')\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] >= 'A' and str[i] <= 'Z':\n            count += 1\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if(i.isupper()):\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        temp.append(list1[i])\n        if i == len(list1)-1:\n            result.append(temp)\n        else:\n            result.append(temp)\n            temp = []\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [i for i in range(0, len(list1) + 1) if i!= 0 and i!= 1 and i!= 2 and i!= 3]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    possible_combinations = []\n    if len(list1) < 1:\n        return possible_combinations\n    combinations_list = []\n    combinations_list.append(list1)\n    while True:\n        temp_combinations_list = []\n        if len(combinations_list) == 0:\n            return possible_combinations\n        if len(combinations_list[0]) < 1:\n            return possible_combinations\n        for i in range(len(combinations_list[0])):\n            temp_combination = combinations_list.pop(0)\n            temp_combination.pop(i)\n            for j in range(len(temp_combination)):\n                if j == len(temp_combination) - 1:\n                    possible_combinations.append(temp_combination)\n                else:\n                    temp_combination_temp = temp_combination.copy()\n                    temp_combination_temp.insert(j, temp_combination.pop(i))\n                    temp_combinations_list.append(temp_combination_temp)\n        combinations_list = temp_combinations_list.copy()\n        temp_combinations_list = []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    else:\n        new_list = []\n        for i in range(len(list1)):\n            list1_copy = list1.copy()\n            item = list1_copy.pop(i)\n            for combination in combinations_list(list1_copy):\n                new_list.append([item] + combination)\n        return new_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    print(f'The combinations of the given list are: {combinations(list1, 2)}')\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        return [[item]+sublist for item in list1[:-1] for sublist in combinations_list(list1[1:]) if item!= list1[-1]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1) + 1):\n        result.append(list1[:i])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combination_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                combination_list.append([list1[i], list1[j], list1[k]])\n    return combination_list\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    \n    max_result = arr[0]\n    min_result = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        result = max(num, min_result*num)\n        max_result = max(result, max_result)\n        min_result = min(result, min_result)\n    return max_result\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    start = 0\n    end = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -float('inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = 1\n        if current_product > max_product:\n            max_product = current_product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = max(product, arr[i] * arr[j])\n    return product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i,n):\n            product = product * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            curr_prod = arr[i] * arr[j]\n            if curr_prod > max_prod:\n                max_prod = curr_prod\n    return max_prod\n    \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    min_num = min(arr)\n    max_num = max(arr)\n    if min_num == 0:\n        return 0\n    arr = [i/min_num for i in arr]\n    ans = arr[0]\n    for i in range(1,len(arr)):\n        ans = max(arr[i],ans*arr[i],ans)\n    return ans\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    cur_max_prod = 1\n    max_prod = 0\n    for i in range(len(arr)):\n        if arr[i]>0:\n            cur_max_prod*=arr[i]\n        else:\n            cur_max_prod=1\n        max_prod = max(cur_max_prod,max_prod)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    curr_max = 1\n    max_product = 1\n    start = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            curr_max = max(curr_max * arr[i], arr[i])\n            max_product = max(max_product, curr_max)\n        else:\n            curr_max = 1\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    current_max = arr[0]\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for v in dict.values():\n        if v!= dict.values()[0]:\n            count += 1\n    if count == 0:\n        print(\"All values are same\")\n    else:\n        print(\"All values are not same\")\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    for val in values:\n        if val!= values[0]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) <= 1:\n        return True\n    if n not in dict.values():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values()))==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    return len(dict) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if len(dict) == 1:\n        return True\n    elif len(dict) == 2:\n        if dict[n] == dict[n-1]:\n            return True\n        else:\n            return False\n    else:\n        if dict[n] == dict[n-1] and dict[n-1] == dict[n-2]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict.values()) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n    \ndef get_factors(n):\n    '''\n    Write a function to calculate all factors of a given number.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    for i in range(2, int(n**(1/2))+1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_factors(n):\n    '''\n    Write a function to calculate all prime factors of a given number.\n    '''\n    prime = []\n    while n % 2 == 0:\n        prime.append(2)\n        n /= 2\n    for i in range(3, int(n**(1/2))+1, 2):\n        while n % i == 0:\n            prime.append(i)\n            n /= i\n    if n > 2:\n        prime.append(n)\n    return prime\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n    else:\n        for key, value in dict.items():\n            if key == n and value!= dict[key]:\n                return False\n            elif key!= n and value == dict[key]:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x:y for (x,y) in dict1.items() if y}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if not v:\n            dict1.pop(k)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == 0:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if dict1[i] == {}:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty = []\n    for i in dict1.values():\n        if i == '':\n            empty.append(i)\n    for i in empty:\n        dict1.pop(i)\n    print(dict1)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if v is None:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v == '':\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    lst = list(dict1.keys())\n    for i in lst:\n        if dict1[i] == '':\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_keys = []\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            empty_keys.append(key)\n    for key in empty_keys:\n        del dict1[key]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0]\n    cur_prod = arr[0]\n    for i in range(1, len(arr)):\n        cur_prod = max(arr[i], cur_prod * arr[i])\n        max_prod = max(cur_prod, max_prod)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Naive Approach - O(n^2)\n    # for i in range(len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         for k in range(j+1, len(arr)):\n    #             if (arr[i] * arr[j] * arr[k]) > max_product:\n    #                 max_product = arr[i] * arr[j] * arr[k]\n    # return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_prod = arr[0]\n    prod = arr[0]\n    for i in range(1, len(arr)):\n        prod = max(prod * arr[i], arr[i])\n        max_prod = max(max_prod, prod)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)<=1:\n        return arr\n    max_mul = arr[0]\n    max_prod = arr[0]\n    \n    for i in range(len(arr)):\n        max_mul = max(max_mul*arr[i], arr[i])\n        max_prod = max(max_mul, max_prod)\n        \n    return max_prod\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_prod = arr[0]\n    max_prod_list = []\n    max_prod_list.append(arr[0])\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    result = 0\n    for i in range(1, n):\n        if arr[i] > 0:\n            result *= arr[i]\n        else:\n            max_product = max(max_product, result)\n            result = 1\n    return max(max_product, result)\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_product = max(max_product, arr[i]*arr[i-1])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # if the array is empty\n    if(len(arr) == 0):\n        return 0\n    # if the array has one element\n    if(len(arr) == 1):\n        return arr[0]\n    max_prod = 0\n    for i in range(1,len(arr)):\n        # if the product of the current element and the element at the start is greater than the product of the element at the end, update the max_prod\n        if(arr[i]*arr[i-1] > max_prod):\n            max_prod = arr[i]*arr[i-1]\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return [a+b for a,b in zip(test_tup, test_tup[1:])]\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    l = []\n    l.append(test_tup[0]+test_tup[1])\n    l.append(test_tup[1]+test_tup[0])\n    l.append(test_tup[0]+test_tup[2])\n    l.append(test_tup[1]+test_tup[2])\n    l.append(test_tup[2]+test_tup[0])\n    l.append(test_tup[2]+test_tup[1])\n    l.append(test_tup[2]+test_tup[2])\n    print(l)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    # (a,b), (c,d)\n    # a + b + c + d = (a + b) + (c + d)\n    #  a + (c + d) = (a + c) + d\n    #  (a + c) + d = (a + c) + d\n    #  (a + c) + (d + c) = (a + c) + d\n    #  a + (c + d) + (d + c) = a + c + d + 2c\n    #  a + (c + d) + (d + c) + c + d = a + c + d + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c = a + c + d + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c = a + c + d + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c + 2c + 2c + 2c + 2c + 2c + 2c\n    #  a + (c + d) + (d + c) + c + d + c + c + c + c = a + c + d + 2c "
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        return test_tup[0] + add_pairwise((test_tup[1:len(test_tup) - 1])) + test_tup[-1]\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[2] + test_tup[3])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n == 1:\n        return test_tup\n    for i in range(1,n):\n        temp = test_tup[i] + test_tup[i-1]\n        test_tup = test_tup[:i-1] + (temp,) + test_tup[i+1:]\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            test_tup[i] += test_tup[j]\n            test_tup[j] = 0\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(a + b for a,b in zip(test_tup[:-1], test_tup[1:]))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #print(test_tup)\n    add_tup = ()\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        add_tup = test_tup[:1] + (test_tup[0] + test_tup[1],) + test_tup[2:]\n    return add_tup\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1:\n        return arr[0]\n    n = n//2\n    res = arr[0]\n    for i in range(1, n):\n        res = (res*arr[i]) % n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    n1 = 1\n    n2 = 1\n    result = 1\n    for i in range(n):\n        n1 = n1*arr[i]\n        n2 = n2*arr[n-i-1]\n        result = (result * n1) % n\n    print(result)\n    return result\n    \ndef find_remainder_linear_space(arr, n):\n    '''\n    Find remainder of multiplying array with n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result*arr[i]) % n\n    return result\n    \ndef find_remainder_quadratic_space(arr, n):\n    '''\n    Find remainder of multiplying array with n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    result = (product * (1-product) % n)\n    return result\n    \ndef find_remainder_quadratic_space_with_tricks(arr, n):\n    '''\n    Find remainder of multiplying array with n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    result = (product * (1-product) % n)\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    \n    for i in arr:\n        product *= i\n    product %= n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    m = 1\n    for i in arr:\n        m = m * i\n    return m % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for element in arr:\n        product = product * element % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return (int(reduce(lambda x, y: x * y, arr)) % n)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # if the length of the array is not equal to 1\n    if len(arr)!= 1:\n        # initialize variable to store the product of array\n        product = 1\n        # go through each element in the array\n        for i in range(len(arr)):\n            # multiply each element by product\n            product = product * arr[i]\n        # take modulo of product and n\n        return product % n\n    # else if the length of the array is equal to 1\n    else:\n        return arr[0]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if consecutive\n    if l[0] == l[1]+1 and l[1] == l[2]+1 and l[2] == l[3]+1 and l[3] == l[4]+1 and l[4] == l[5]+1:\n        print(l)\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = l.split(\" \")\n    l = list(map(int, l))\n    if l[0] + 1 == l[1] or l[-1] - 1 == l[-2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # a = 0\n    # c = 0\n    # i = 0\n    # while i<len(l):\n    #     if l[i]==a:\n    #         c+=1\n    #     else:\n    #         if c!=1:\n    #             return False\n    #         c=0\n    #     a = l[i]\n    #     i+=1\n    # return True\n    \n    i = 0\n    while i<len(l)-1:\n        if l[i]==l[i+1]:\n            return False\n        i+=1\n    return True\n    \n    # Code with O(n) memory complexity\n    # i = 0\n    # while i<len(l)-1:\n    #     if l[i]==l[i+1]:\n    #         return False\n    #     i+=1\n    # return True\n    \n    "
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    s=0\n    for i in range(0,len(l)):\n        if(i+1<=len(l)-1):\n            if(l[i]==l[i+1]):\n                s=s+1\n    if(s>0):\n        print(\"True\")\n    else:\n        print(\"False\")\n        \ncheck_Consecutive([1,2,3,3,3,3,4,5,6,7,9])\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    first_num = l[0]\n    for i in range(len(l)):\n        if first_num!= l[i]:\n            return False\n        first_num = l[i]\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(x-y == 1 or y-x == 1 for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0, len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        if (i+1) < len(l): \n            if (l[i] + 1) == l[i+1]: \n                continue\n            else: \n                return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_intersection_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                if i not in tuple_intersection_list:\n                    tuple_intersection_list.append(i)\n    return tuple_intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    res = []\n    for val in test_list1:\n        for val2 in test_list2:\n            if val == val2:\n                res.append(val)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return_list = []\n    for i in test_list1:\n        if i in test_list2:\n            return_list.append(i)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_tuple = ()\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersect_tuple += (test_list1[i],)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = []\n    if test_list1 == test_list2:\n        return test_list1\n    for i in test_list1:\n        if i in test_list2:\n            output.append(i)\n    return tuple(output)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    union = set(test_list1 + test_list2)\n    intersection = set(test_list1) & set(test_list2)\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(len(test_list1)):\n        if test_list1[i] == test_list2[i]:\n            intersection.append(test_list1[i])\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    for x in test_list1:\n        if x in test_list2:\n            intersection += (x, )\n    return intersection\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #newch = str(newch)\n    str2 = str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1\n    newstr = newstr.replace(ch,newch)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(0,len(str1)):\n        if(str1[i] == ch):\n            str1=str1.replace(str1[i],''+newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = str1.replace(ch, newch)\n    return result\nprint(replace_char('abc','c','d'))\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=''\n    for char in str1:\n        if char == ch:\n            new_str = new_str + newch\n        else:\n            new_str = new_str + char\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n    \nif __name__ == '__main__':\n    \n    dict1={'purple':3,'blue':6,'yellow':5,'black':1,'red':7}\n    print(sort_counter(dict1))\n    \n    \n    \n    \n    # Output\n    # [('black', 1), ('blue', 6), ('red', 7), ('yellow', 5), ('purple', 3)]\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1])\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    \ndef top_three_counter(word_counter):\n    '''\n    Write a function that returns the top 3 most common words in a string, in the form of a list of tuples.\n    '''\n    return sorted(word_counter.most_common(3), key=lambda x: (-x[1], x[0]))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # If you need to swap keys, then just use sorted(iterable, key=lambda x: x[1])\n    # Sorting by values\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1_sorted = dict(sorted(dict1.items(), key = lambda kv:(kv[1], kv[0])))\n    return dict1_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp_dict = {}\n    for k,v in dict1.items():\n        temp_dict[v] = k\n    return sorted(temp_dict.items(), key = lambda x : x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # new_dict = sorted(dict1,key=dict1.get, reverse=True)\n    # sorted_dict = sorted(dict1, key=lambda x: dict1[x], reverse=True)\n    new_dict = sorted(dict1, key=lambda k: dict1[k], reverse=True)\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = {}\n    for key, value in sorted(dict1.items(), key=lambda item: item[1], reverse=True):\n        dict2[key] = value\n    return dict2\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = None\n    smallest = None\n    largest_index = 0\n    smallest_index = 0\n    for i in range(len(nums)):\n        if largest is None:\n            largest = nums[i]\n            largest_index = i\n        elif nums[i] >= largest:\n            largest = nums[i]\n            largest_index = i\n        if smallest is None:\n            smallest = nums[i]\n            smallest_index = i\n        elif nums[i] <= smallest:\n            smallest = nums[i]\n            smallest_index = i\n    if largest_index > smallest_index:\n        return largest + smallest\n    else:\n        return largest - smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(nums)\n    return sum(nums), min(nums), max(nums)\n    # return sum(sorted(nums)[::-1]), min(nums), max(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = sorted(nums)\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        elif nums[i] < min_val:\n            min_val = nums[i]\n    print(max_val)\n    print(min_val)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    biggest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > biggest:\n            biggest = num\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return biggest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    x = max(nums)\n    y = min(nums)\n    return x + y\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest, smallest = None, None\n    for x in nums:\n        if largest is None:\n            largest = x\n        if smallest is None:\n            smallest = x\n        if x >= largest:\n            largest = x\n        if x <= smallest:\n            smallest = x\n    return largest + smallest\n    \n    \n    #OR\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = list(nums)\n    nums.sort()\n    largest = nums[0]\n    smallest = nums[-1]\n    return largest + smallest\n    \n    \n    #OR\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = list(nums)\n    nums.sort()\n    return nums[0] + nums[-1]\n    \n    \n    #OR\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n    \n    \n    #OR\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - max(nums) - min(nums)\n    \n    \n    #OR\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = list(nums)\n    return sum(nums) - max(nums) - min(nums)\n    \n    \n    #OR\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - max(nums) - min(nums)\n    \n    \n    #OR\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - max(nums) - min(nums)\n    \n    \n    #OR\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = list(nums)\n    return sum(nums) - max(nums) - min(nums)\n    \n    \n    #OR\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - max(nums) - min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initilize a variable to hold the smallest and the largest\n    smallest = float('inf')\n    largest = -float('inf')\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_sum = 0\n    largest = None\n    smallest = None\n    for num in nums:\n        if num_sum < num:\n            num_sum = num\n        elif num_sum > num:\n            if smallest is None or num < smallest:\n                smallest = num\n        else:\n            num_sum += num\n    print(num_sum, smallest, largest)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string is None:\n        return \"\"\n    else:\n        return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    #your code here\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = ''.join(c.lower() for c in string)\n    return lower_case\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #return string.lower()\n    return string.lower().replace(' ','')\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # your code here\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    output = string.lower()\n    return output\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join(char for char in str1 if not char.islower())\ndef test_remove_lowercase():\n    assert remove_lowercase(\"a\") == \"a\"\n    assert remove_lowercase(\"AA\") == \"AA\"\n    assert remove_lowercase(\"abca\") == \"abc\"\n    assert remove_lowercase(\"AbCa\") == \"ABC\"\n    assert remove_lowercase(\"a\") == \"a\"\n    assert remove_lowercase(\"\") == \"\"\n    assert remove_lowercase(\"\") == \"\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'^[a-z]+', \"\", str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]','',str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pat = re.compile(r'\\w+')\n    res = re.findall(pat,str1)\n    if res == []:\n        print(\"No matches found.\")\n    else:\n        return ''.join(res)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub(\"[a-z]\", \"\", str1)\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1==\"\":\n        return \"\"\n    else:\n        str1=str1.lower()\n        substring=re.findall('[a-zA-Z]+',str1)\n        for i in range(len(substring)):\n            str1=str1.replace(substring[i],'')\n        return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # split the string and check if every substring is lowercase.\n    str1 = str1.split(\" \")\n    list_of_substrings = []\n    for word in str1:\n        if word.islower():\n            list_of_substrings.append(word)\n    return \" \".join(list_of_substrings)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    output = str1.lower()\n    return output\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = re.sub('[a-z]','',str1,0)\n    return result\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n=str(n)\n    return n[0]\ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    n=str(n)\n    return n[1]\ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    n=str(n)\n    return n[2]\ndef fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    n=str(n)\n    return n[3]\ndef fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    n=str(n)\n    return n[4]\ndef sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    n=str(n)\n    return n[5]\ndef seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    n=str(n)\n    return n[6]\ndef eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    n=str(n)\n    return n[7]\ndef nineth_Digit(n) :  \n    '''\n    Write a python function to find the nineth digit of a given number.\n    '''\n    n=str(n)\n    return n[8]\ndef tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    n=str(n)\n    return n[9]\ndef one_Thousand_Digit(n) :  \n    '''\n    Write a python function to find the one thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[10]\ndef ten_Thousand_Digit(n) :  \n    '''\n    Write a python function to find the ten thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[11]\ndef hundred_Thousand_Digit(n) :  \n    '''\n    Write a python function to find the hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[12]\ndef billion_Digit(n) :  \n    '''\n    Write a python function to find the billion digit of a given number.\n    '''\n    n=str(n)\n    return n[13]\ndef ten_billion_Digit(n) :  \n    '''\n    Write a python function to find the ten billion digit of a given number.\n    '''\n    n=str(n)\n    return n[14]\ndef one_Hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the one hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[15]\ndef million_Digit(n) :  \n    '''\n    Write a python function to find the million digit of a given number.\n    '''\n    n=str(n)\n    return n[16]\ndef ten_million_Digit(n) :  \n    '''\n    Write a python function to find the ten million digit of a given number.\n    '''\n    n=str(n)\n    return n[17]\ndef one_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the one hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[18]\ndef billard_Digit(n) :  \n    '''\n    Write a python function to find the billard digit of a given number.\n    '''\n    n=str(n)\n    return n[19]\ndef twenty_billion_Digit(n) :  \n    '''\n    Write a python function to find the twenty billion digit of a given number.\n    '''\n    n=str(n)\n    return n[20]\ndef hundred_billard_Digit(n) :  \n    '''\n    Write a python function to find the hundred billard digit of a given number.\n    '''\n    n=str(n)\n    return n[21]\ndef hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[22]\ndef ten_thousand_Digit(n) :  \n    '''\n    Write a python function to find the ten thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[23]\ndef ten_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the ten hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[24]\ndef one_hundred_thousand_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the one hundred thousand hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[25]\ndef billion_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the billion hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[26]\ndef twenty_billion_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the twenty billion hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[27]\ndef hundred_thousand_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the hundred thousand hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[28]\ndef ten_thousand_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the ten thousand hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[29]\ndef ten_billion_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the ten billion hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[30]\ndef one_hundred_thousand_hundred_thousand_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the one hundred thousand hundred thousand hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[31]\ndef ten_thousand_hundred_thousand_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the ten thousand hundred thousand hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[32]\ndef hundred_thousand_hundred_thousand_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the hundred thousand hundred thousand hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[33]\ndef billion_hundred_thousand_hundred_thousand_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the billion hundred thousand hundred thousand hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[34]\ndef ten_billion_hundred_thousand_hundred_thousand_hundred_thousand_Digit(n) :  \n    '''\n    Write a python function to find the ten billion hundred thousand hundred thousand hundred thousand digit of a given number.\n    '''\n    n=str(n)\n    return n[35]\nde"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = n/10\n    print(n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return (n//10) % 10\n        \ndef is_Palindrome(n) :\n    '''\n    Write a python function that determines if a given number is palindrome or not.\n    '''\n    string = str(n)\n    mid = int(len(string)/2)\n    reverseString = string[::-1]\n    for i in range(mid):\n        if string[i] == reverseString[i]:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n//10)%10\n    \ndef second_Digit(n) : \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return (n%10)%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = n // 10\n    if first == 0:\n        return n\n    else:\n        return n % 10\n        \n    \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s=str(n)\n    i=0\n    for i in range(len(s)):\n        if i ==0:\n            print(s[i])\n        else:\n            print(s[i],end=\"\")\n    return 1\nprint(first_Digit(432543))\nprint(first_Digit(1234))\ndef first_Digit2(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s=str(n)\n    print(int(s[0]))\nprint(first_Digit2(432543))\ndef first_Digit3(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s=str(n)\n    for i in s:\n        if i ==0:\n            print(i)\n        else:\n            print(i,end=\"\")\n    return 1\nprint(first_Digit3(432543))\ndef first_Digit4(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s=str(n)\n    return int(s[0])\nprint(first_Digit4(432543))\ndef first_Digit5(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s=str(n)\n    for i in s:\n        print(i)\n        break\n    return 1\nprint(first_Digit5(432543))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/100000000)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n)%10\n    "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = str(n)\n    return int(x[0])\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2!= 0:\n            odds.append(i)\n    return odds\n    \n    \ndef main():\n    '''\n    Test cases\n    '''\n    print('Test 1')\n    print(Split([1,2,3,4,5,6]))\n    print(Split([3,4,5,6,7,8]))\n    \n    print('\\nTest 2')\n    print(Split([1,2,3,4,5,6,7,8,9]))\n    \n    print('\\nTest 3')\n    print(Split([0,1,2,3,4,5,6,7,8,9]))\n    \n    print('\\nTest 4')\n    print(Split([1,2,3,4,5,6,7,8,9,0]))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList2(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==0:\n            odd.append(i)\n    return odd\ndef SortList3(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList4(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList5(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==1:\n            even.append(i)\n    return even\ndef SortList6(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList7(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==1:\n            even.append(i)\n    return even\ndef SortList8(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==0:\n            odd.append(i)\n    return odd\ndef SortList9(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList10(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList11(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList12(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList13(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList14(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList15(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList16(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList17(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList18(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList19(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList20(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList21(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList22(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList23(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList24(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList25(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList26(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList27(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList28(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\ndef SortList29(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\ndef SortList30(list):\n    '"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n    \ndef Sort(list):\n    '''\n    Write a python function which takes a list of integers and sorts it using Selection Sort.\n    '''\n    for i in range(len(list)-1):\n        min = i\n        for j in range(i,len(list)):\n            if list[j] < list[min]:\n                min = j\n        list[i],list[min] = list[min],list[i]\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newList = []\n    for i in list:\n        if i%2!= 0:\n            newList.append(i)\n    return newList\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in list:\n        if i%2!=0:\n            list1.append(i)\n    return list1\n    \ndef break_words(stuff):\n    \"\"\"This function will break up words for us.\"\"\"\n    words = stuff.split(' ')\n    return words\n    \ndef sort_words(words):\n    \"\"\"Sort the words.\"\"\"\n    return sorted(words)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            odd.append(list[i])\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list=[]\n    for x in list:\n        if x%2==0:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if len(list) < 1: \n        return None\n    if len(list) == 1:\n        return list[0]\n    return list[0] + Split(list[1:])\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # Your code goes here\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) : \n        result = 0\n        for i in range(1,n+1) :\n            result += i**3\n        return result\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # Taking 1st natural number as n\n    n = n + 1\n    \n    # Initializing sum of cubes and sum\n    cubes_sum = 0\n    sum = 0\n    \n    # Looping to print difference between sum of cubes and sum of natural numbers\n    while (cubes_sum <= n):\n        cubes_sum = cubes_sum + (cubes_sum**3)\n        sum = sum + cubes_sum\n    print(sum - n)\n    \nif __name__ == \"__main__\":\n    \n    # Taking n as input from the user\n    n = int(input(\"Enter the number of natural numbers: \"))\n    \n    # Calling the function\n    difference(n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if (n<0) :\n        return -1\n    x = n\n    sum = 0\n    while(x > 0) :\n        sum += x**3\n        x -= 1\n    sum = sum - n\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumOfCubes(n) : \n        return sum([i**3 for i in range(1,n+1)])\n    print(sumOfCubes(n)-sumOfCubes(n-1))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    return (cubeSum(n)-cubeSum(n-1))\n    "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Number of natural numbers\n    n = int(n)\n    if(n < 1) :\n        return 0\n    # Sum of cubes of the first n natural numbers\n    sum = 0\n    for i in range(1, n+1) :\n        sum = sum + i**3\n    # Difference\n    diff = n**3 - sum\n    return diff\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cube = sum(n**3 for n in range(1,n+1))\n    sum_num = sum(range(1,n+1))\n    difference = sum_cube - sum_num\n    return difference\n    \ndef get_input() :\n    '''\n    Write a python function that asks user for the input. If the user inputs a negative number, then it should return -1.\n    '''\n    while True :\n        number = input('Enter a number: ')\n        if number.isnumeric() :\n            number = int(number)\n            if number > 0 :\n                return number\n            else :\n                return -1\n        else :\n            print('Invalid input, try again')\n            continue\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(input())\n    sum_of_n = n * (n + 1) // 2\n    n_sum = 0\n    for i in range(1, n + 1) :\n        n_sum += i ** 3\n    print(sum_of_n - n_sum)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (pow(n,3)-sum(range(1,n+1)))\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    from collections import defaultdict\n    pair = defaultdict(int)\n    for i in range(N):\n        pair[A[i]]+=1\n    odd = 0\n    for i in pair:\n        if i%2==1:\n            odd+=pair[i]\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N):\n        if A[i]&1!=1:\n            count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Write your code here\n    ans = 0\n    for i in range(N):\n        ans += A[i] * A[i]\n    return ans\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # your code here\n    #The xor value of two numbers is the bitwise exclusive OR of the two numbers.\n    return(0)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(N) : \n        for j in range(i+1,N): \n            if (A[i] ^ A[j]) % 2!= 0 : \n                count += 1\n    return count "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    for i in range(0,N) :\n        odd_pair += A[i] ^ i\n    if odd_pair % 2 == 1:\n        return \"Odd Pair exists\"\n    else :\n        return \"No Odd pair exists\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        count += A[i] ^ i\n    print(count)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] > 0 :\n                odd_pairs += 1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_val=0\n    if (N%2)!=0:\n        return -1\n    else:\n        for i in range(N):\n            xor_val = xor_val ^ A[i]\n        \n        print(xor_val)\n        count=0\n        for i in range(N):\n            if (xor_val^A[i])%2!=0:\n                count=count+1\n        return count\n    "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A = sorted(A)\n    N = len(A)\n    count = 0\n    for i in range(N) :\n        j = i + 1\n        while j < N :\n            if A[i] ^ A[j] == 1 :\n                count += 1\n                break\n            j += 1\n    return count\nprint(find_Odd_Pair([5,2,6,3,4],6))\nprint(find_Odd_Pair([1,2,3,4,5],5))\nprint(find_Odd_Pair([1,2,3,4,5,6],6))\n'''\n========================================================================================================================================\nWrite a program to read an array and print the number of zeros, non zero and even.\nHint: array[a][b] - access the matrix element at matrix[a][b].\n'''\ndef print_count_of_E_N_Z(arr) :\n    '''\n    Write a program to read an array and print the number of zeros, non zero and even.\n    '''\n    count_of_Z_N_E = [0,0,0]\n    for i in range(len(arr)) :\n        if arr[i] == 0 :\n            count_of_Z_N_E[0] += 1\n        elif arr[i] == 1 :\n            count_of_Z_N_E[1] += 1\n        elif arr[i] % 2 == 0 :\n            count_of_Z_N_E[2] += 1\n    print(count_of_Z_N_E)\nprint_count_of_E_N_Z([0,0,0,1,1,1])\nprint_count_of_E_N_Z([1,1,1,0,1,0,1,1,0,1,0])\nprint_count_of_E_N_Z([1,0,1,0,1,0,1,1,0,1,0])\n'''\n========================================================================================================================================\nGiven a non empty string and an integer k, you need to remove k characters\nfrom the front of the given string such that the remaining string is divisible by 3.\nFor example, if the string is \"abcde\" and k is 2, then the new string is \"cde\".\nIf the string length is not divisible by 3, then return unchanged string.\nYou need to consider the following conditions:\n    The front k characters of the given string are guaranteed to be 0, 1, or 2.\n    If the length of the given string is not, then return None.\nNote:\nThe front k is 0 based, i.e. the first character has index 0, the second has index 1, and so on.\n'''\ndef front_k_divisible(string,k) :\n    '''\n    Write a program to remove k characters from the front of a given string so that the remaining string is divisible by 3.\n    '''\n    if string == \"\" :\n        return None\n    if len(string) < 3 or len(string) % 3!= 0 :\n        return string\n    a = string[k]\n    if a == \"0\" or a == \"1\" or a == \"2\" :\n        return string[k:]\n    elif a == \"3\" :\n        return string[k+1:]\nprint(front_k_divisible(\"abcde\",2))\nprint(front_k_divisible(\"abcd\",2))\nprint(front_k_divisible(\"a\",2))\n'''\n========================================================================================================================================\nGiven a non empty string s and an integer k, reverses the first k characters for every 0 <= i < len(s).\nThe goal is to print the reversed string.\nFor example, if s = \"abcde\" and k = 2, then the output should be \"cdeab\".\nIf there are multiple solutions, you may output any one of them.\nFor example, if s = \"abcd\", and k = 2, then both solutions are \"dcba\".\nIf no other valid k can be formed in this way, then you may return None.\n'''\ndef k_reverse(string,k) :\n    '''\n    Write a program to reverse the first k characters of a string,\n    while keeping the other characters the same.\n    '''\n    if string == \"\" or k <= 0 :\n        return None\n    if k >= len(string) :\n        return string\n    string_list = list(string)\n    for i in range(k) :\n        string_list.pop(0)\n        string_list.append(string_list.pop(0))\n    return ''.join(string_list)\nprint(k_reverse(\"abcde\",2))\nprint(k_reverse(\"abcd\",2))\nprint(k_reverse(\"abc\",0))\nprint(k_reverse(\"ab\",0))\n'''\n========================================================================================================================================\nWrite a python program to delete a node at a given position in a singly linked list.\nNote : 0 based indexing is required.\n'''\nclass node :\n    def __init__(self,data) :\n        self.data = data\n        self.next = None\nclass LinkedList :\n    def __init__(self) :\n        self.head = None\n    def push(self,data) :\n        new_node = node(data)\n        new_node.next = self.head\n        self.head = new_node\n    def del_node(self,position) :\n        cur_node = self.head\n        cur_node_prev = None\n        cur_node_pos = 0\n        while True :\n            if cur_node_pos == position and cur_node_prev is not None :\n                cur_node_prev.next = cur_node.next\n                break\n            cur_node_prev = cur_node\n            cur_node = cur_node.next\n            cur_node_pos += 1\n    def print_list(self) :\n        cur_node = self.head\n        while True :\n            print(cur_node.data,end = \"->\")\n            cur_node = cur_node.next\n            if cur_node == self.head :\n                break\n        print(\"None\")\nllist = LinkedList()\nllist.push(8)\nllist.push(7)\nllist.push(6)\nllist.push(5)\nllist.push(4)\nllist.push(3)\nllist.push(2)\nllist.del_node(4)\nllist.print_list()\n'''\n========================================================================================================================================\nWrite a program to rotate a linked list by n nodes.\n'''\nclass Node :\n    def __init__(self, data) :\n        self.data = data\n        self.next = None\nclass LinkedList :\n    def __init__(self) :\n        self.head = None\n    def push(self, data) :\n        new_node = Node(data)\n        if self.head is None :\n            self.head = new_node\n        else :\n            temp = self.head\n            while(temp.next is not None) :\n                temp = temp.next\n            temp.next = new_node\n    def print_list(self) :\n        cur_node = self.head\n        while True :\n            print(cur_node.data, end = \"->\")\n            cur_node = cur_node.next\n            if cur_node == self.head :\n                break\n        print(\"None\")\nllist = LinkedList()\nllist.push(1)\nllist.push(2)\nllist.push(3)\nllist.push(4)\nllist.push(5)\nllist.push(6)\nllist.push(7)\nllist.push(8)\nprint(\"Before rotate\")\nllist.print_list()\nllist.rotate(4)\nprint(\"After rotate\")\nllist.print_list()\n'''\n========================================================================================================================================\nGiven a sorted array and a target value, return the index if the target is found.\nIf not, return the index where it would be if it were inserted in order.\nYou may assume no duplicates in the array.\nYou may assume that all elements in the array are distinct.\n'''\ndef search_insert(arr,n,target) :\n    '''\n    Write a program to search an element in a sorted array and return its index.\n    '''\n    if arr == [] :\n        return -1\n    for i in range(n) :\n        if arr[i] == target :\n            return i\n        e"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.islower():\n        return string.upper()\n    else:\n        return string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if(len(string)>0):\n        str=''\n        for x in string:\n            if(x.isupper()):\n                str=str+x.lower()\n            else:\n                str=str+x.upper()\n        return str\n    else:\n        return string\nprint(toggle_string(\"iLikeMyFriends\"))\nprint(toggle_string(\"This is Awesome!\"))\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string) == str:\n        return string.swapcase()\n    else:\n        raise TypeError(\"String input must be of type string\")\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # #### Method 1\n    # string = string.swapcase()\n    # return string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.islower():\n        return string.upper()\n    elif string.isupper():\n        return string.lower()\n    else:\n        return string.lower() + string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string)!= str:\n        return string\n    else:\n        return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_str = ''\n    for char in string:\n        if char.isupper():\n            new_str += char.lower()\n        elif char.islower():\n            new_str += char.upper()\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \n    \ndef capitalize_string(string):\n    '''\n    Write a function that capitalizes the first letter of each word in a string.\n    '''\n    string = string.split()\n    for i in range(len(string)):\n        string[i] = string[i][0].upper() + string[i][1:]\n    return \" \".join(string)\n    \n    \ndef decode_base64(string):\n    '''\n    Write a function that takes in a string of base64 data, and returns\n    a string of its binary representation.\n    '''\n    encoded_string = \"\"\n    \n    while string:\n        encoded_string += \"1\" if string[:6] in b64_alpha else \"0\"\n        string = string[6:]\n    \n    encoded_string = encoded_string.lstrip(\"0\")\n    return \"\".join(format(ord(char), \"b\") for char in encoded_string)\n    \n    \ndef encode_base64(string):\n    '''\n    Write a function that takes in a string of binary data, and returns\n    a string of its base64 representation.\n    '''\n    encoded_string = \"\"\n    \n    while string:\n        if string[:6] in b64_alpha:\n            encoded_string += b64_alpha[string[:6]]\n            string = string[6:]\n        else:\n            encoded_string += \"=\"\n            string = string[6:]\n    \n    return encoded_string\n    \n    \ndef matrix_rotate_right(matrix):\n    '''\n    Write a function that rotates a matrix 90 degrees to the right.\n    '''\n    matrix.reverse()\n    for i in range(len(matrix)):\n        for j in range(i):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\n    \n    \ndef matrix_rotate_left(matrix):\n    '''\n    Write a function that rotates a matrix 90 degrees to the left.\n    '''\n    matrix.reverse()\n    for i in range(len(matrix)):\n        for j in range(i):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    return matrix\n    \n    \ndef matrix_transpose(matrix):\n    '''\n    Write a function that performs matrix transpose.\n    '''\n    matrix = [[matrix[i][j] for i in range(len(matrix))] for j in range(len(matrix[0]))]\n    return matrix\n    \n    \ndef matrix_multiply(matrix_a, matrix_b):\n    '''\n    Write a function that performs matrix multiplication.\n    '''\n    result = []\n    \n    for i in range(len(matrix_a)):\n        temp = []\n        for j in range(len(matrix_b[0])):\n            temp.append(0)\n        for j in range(len(matrix_b)):\n            for k in range(len(matrix_b[0])):\n                temp[j] += matrix_a[i][k] * matrix_b[k][j]\n        result.append(temp)\n    return result\n    \n    \ndef matrix_add(matrix_a, matrix_b):\n    '''\n    Write a function that performs matrix addition.\n    '''\n    result = []\n    for i in range(len(matrix_a)):\n        temp = []\n        for j in range(len(matrix_a[0])):\n            temp.append(matrix_a[i][j] + matrix_b[i][j])\n        result.append(temp)\n    return result\n    \n    \ndef matrix_subtract(matrix_a, matrix_b):\n    '''\n    Write a function that performs matrix subtraction.\n    '''\n    result = []\n    for i in range(len(matrix_a)):\n        temp = []\n        for j in range(len(matrix_a[0])):\n            temp.append(matrix_a[i][j] - matrix_b[i][j])\n        result.append(temp)\n    return result\n    \n    \ndef matrix_dot_product(matrix_a, matrix_b):\n    '''\n    Write a function that performs matrix dot product.\n    '''\n    result = 0\n    for i in range(len(matrix_a)):\n        for j in range(len(matrix_a[0])):\n            result += matrix_a[i][j] * matrix_b[j][i]\n    return result\n    \n    \ndef matrix_invert(matrix):\n    '''\n    Write a function that inverts a matrix.\n    '''\n    result = []\n    for i in range(len(matrix)):\n        temp = []\n        for j in range(len(matrix[0])):\n            temp.append(0)\n        for j in range(len(matrix[0])):\n            for k in range(len(matrix)):\n                if j == k:\n                    temp[j] += -matrix[i][k]\n        result.append(temp)\n    return result\n    \n    \ndef find_maximum_path_sum(matrix):\n    '''\n    Write a function that finds the maximum path sum amongst a matrix.\n    '''\n    max_path = float(\"-inf\")\n    \n    if matrix:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    matrix[i][j] += matrix[i][j - 1]\n                elif j == 0:\n                    matrix[i][j] += matrix[i - 1][j]\n                else:\n                    matrix[i][j] += max(matrix[i - 1][j], matrix[i][j - 1])\n                max_path = max(max_path, matrix[i][j])\n    return max_path\n    \n    \ndef list_insert(lst, value, index):\n    '''\n    Write a function that inserts a value into a list at a specified index.\n    '''\n    if index > len(lst):\n        return lst\n    if index == 0:\n        return [value] + lst\n    lst = lst[:index] + [value] + lst[index:]\n    return lst\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a function that returns whether or not a string is a palindrome.\n    '''\n    string = string.lower().replace(\" \", \"\")\n    for i in range(len(string)):\n        if string[i]!= string[len(string) - i - 1]:\n            return False\n    return True\n    \n    \ndef same_frequency(num1, num2):\n    '''\n    Write a function that determines if two numbers have the same frequency of digits.\n    '''\n    num1 = str(num1)\n    num2 = str(num2)\n    for i in range(len(num1)):\n        if num1.count(num1[i])!= num2.count(num2[i]):\n            return False\n    return True\n    \n    \ndef longest_common_prefix(strings):\n    '''\n    Write a function that takes an array of strings and returns the longest common prefix.\n    '''\n    result = \"\"\n    if len(strings) == 0:\n        return result\n    if len(strings) == 1:\n        return strings[0]\n    \n    for i in range(min(len(strings), len(strings[0]))):\n        if strings[0][i]!= strings[1][i]:\n            return result\n        result += strings[0][i]\n    \n    return result\n    \n    \ndef longest_common_suffix(strings):\n    '''\n    Write a function that takes an array of strings and returns the longest common suffix.\n    '''\n    result = \"\"\n    if len(strings) == 0:\n        return result\n    if len(strings) == 1:\n        return strings[0]\n    \n    for i in range(min(len(strings), len(strings[0])))"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # return abs(n1 - n2)\n    \n    if n1 > n2:\n        return n1 - n2\n    else:\n        return n2 - n1\n    \n    \n    \n    \ndef sum_of_digits(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    # Return the sum of the digits in an integer.\n    # First convert the integer to a string, then use split().\n    # Return the sum of the digits in the string.\n    \n    # if type(a) == int:\n    #     return sum([int(i) for i in str(a)])\n    return sum([int(i) for i in str(a)])\n    \n    \n    \n    \ndef sum_of_digits_recursion(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    if a == 0:\n        return 0\n    else:\n        return a % 10 + sum_of_digits_recursion(a//10)\n    \n    \n    \n    \ndef sum_of_digits_recursion_iterative(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    sum_of_digits = 0\n    while a!= 0:\n        sum_of_digits = sum_of_digits + a % 10\n        a = a // 10\n    return sum_of_digits\n    \n    \n    \ndef sum_of_digits_recursion_tabular(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    # return sum([int(i) for i in str(a)])\n    \n    \n    \n    \ndef sum_of_digits_recursion_tabular(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    sum = 0\n    while a!= 0:\n        sum = sum + a % 10\n        a = a // 10\n    return sum\n    \n    \n    \n    \ndef sum_of_digits_recursion_tabular_bottom_up(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    # return sum([int(i) for i in str(a)])\n    \n    # tabulate the results\n    \n    sum = 0\n    while a!= 0:\n        sum = sum + a % 10\n        a = a // 10\n    return sum\n    \n    \n    \n    \ndef sum_of_digits_recursion_tabular_bottom_up_iterative(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    # return sum([int(i) for i in str(a)])\n    \n    # tabulate the results\n    \n    sum = 0\n    while a!= 0:\n        sum = sum + a % 10\n        a = a // 10\n    return sum\n    \n    \n    \n    \ndef sum_of_digits_recursion_tabular_bottom_up_iterative_v2(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    # return sum([int(i) for i in str(a)])\n    \n    # tabulate the results\n    \n    \n    # bit-manipulation technique:\n    # result = 0\n    # while a!= 0:\n    #     result = result + a % 10\n    #     a = a // 10\n    \n    \n    # bit-manipulation technique:\n    # bit manipulation\n    \n    # for i in range(1,len(str(a))+1):\n    #     result += a % 10\n    #     a = a // 10\n    \n    \n    # bit manipulation\n    \n    # bit manipulation with a dictionary\n    \n    result = 0\n    while a!= 0:\n        result += a % 10\n        a = a // 10\n    return result\n    \n    \n    \n    \ndef sum_of_digits_recursion_tabular_bottom_up_iterative_v3(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    # return sum([int(i) for i in str(a)])\n    \n    # tabulate the results\n    \n    \n    \n    \n    # bit-manipulation technique:\n    # bit manipulation\n    \n    # # no carry-bit addition\n    # result = 0\n    # while a!= 0:\n    #     result = result + a % 10\n    #     a = a // 10\n    \n    \n    \n    # bit-manipulation\n    # carry-bit addition\n    result = 0\n    while a!= 0:\n        result += a % 10\n        a = a // 10\n        result = result << 1\n        \n    # carry-bit addition\n    result = result >> 1\n    \n    return result\n    \n    \n    \n    \n    \ndef sum_of_digits_recursion_tabular_bottom_up_iterative_v4(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    # return sum([int(i) for i in str(a)])\n    \n    # tabulate the results\n    \n    \n    \n    \n    \n    # bit-manipulation technique:\n    # bit manipulation\n    \n    # no carry-bit addition\n    result = 0\n    while a!= 0:\n        result = result + a % 10\n        a = a // 10\n    \n    \n    \n    \n    # bit manipulation\n    # carry-bit addition\n    result = 0\n    while a!= 0:\n        result += a % 10\n        a = a // 10\n        result = result << 1\n        \n    # carry-bit addition\n    result = result >> 1\n    \n    return result\n    \n    \n    \n    \n    \ndef sum_of_digits_recursion_tabular_bottom_up_iterative_v5(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    # return sum([int(i) for i in str(a)])\n    \n    # tabulate the results\n    \n    \n    \n    \n    \n    # bit-manipulation technique:\n    # bit manipulation\n    \n    # no carry-bit addition\n    result = 0\n    while a!= 0:\n        result = result + a % 10\n        a = a // 10\n    \n    \n    \n    \n    # bit manipulation\n    # carry-bit addition\n    result = 0\n    while a!= 0:\n        result += a % 10\n        a = a // 10\n        result = result << 1\n        \n    # carry-bit addition\n    result = result >> 1\n    \n    return result\n    \n    \n    \n    \n    \ndef sum_of_digits_recursion_tabular_bottom_up_iterative_v6(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    # return sum([int(i) for i in str(a)])\n    \n    # tabulate the results\n    \n    \n    \n    \n    \n    # bit-manipulation technique:\n    # bit manipulation\n    \n    # no carry-bit addition\n    result = 0\n    while a!= 0:\n        result = result + a % 10\n        a = a // 10\n    \n    \n    \n    \n    # bit manipulation\n    # carry-bit addition\n    result = 0\n    while a!= 0:\n        result += a % 10\n        a = a // 10\n        result = result << 1\n        \n    # carry-bit addition\n    result = result >> 1\n    \n    return result\n    \n    \n    \n    \n    \ndef sum_of_digits_recursion_tabular_bottom_up_iterative_v7(a):\n    '''\n    Write a python function to calculate the sum of the digits in an integer.\n    '''\n    \n    # return sum([int(i) for i in str(a)]"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    a = abs(n1 - n2)\n    sum_digit = 0\n    while a:\n        remainder = a % 10\n        sum_digit += remainder\n        a = int(a/10)\n    return sum_digit\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1==n2:\n        return 0\n    s = 0\n    n1 = str(n1)\n    n2 = str(n2)\n    for i in range(len(n1)):\n        s+= abs(int(n1[i]) - int(n2[i]))\n    return s\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    if (n1 == n2):\n        return 0\n    # 2 digits\n    if (len(str(n1)) == 2):\n        x = int(str(n1)[0])\n        y = int(str(n1)[1])\n        z = int(str(n2)[0])\n        w = int(str(n2)[1])\n        s = x + y + z + w\n        return s\n    # 3 digits\n    if (len(str(n1)) == 3):\n        x = int(str(n1)[0])\n        y = int(str(n1)[1])\n        z = int(str(n1)[2])\n        a = int(str(n2)[0])\n        b = int(str(n2)[1])\n        c = int(str(n2)[2])\n        s = x + y + z + a + b + c\n        return s\n    # 4 digits\n    if (len(str(n1)) == 4):\n        x = int(str(n1)[0])\n        y = int(str(n1)[1])\n        z = int(str(n1)[2])\n        w = int(str(n1)[3])\n        a = int(str(n2)[0])\n        b = int(str(n2)[1])\n        c = int(str(n2)[2])\n        d = int(str(n2)[3])\n        s = x + y + z + w + a + b + c + d\n        return s\n    else:\n        print(\"Please enter correct integer\")\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(x-y) for x, y in zip(map(int, str(n1)), map(int, str(n2)))])\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        s = n1 - n2\n    else:\n        s = n2 - n1\n    res = 0\n    while(s):\n        res += s % 10\n        s = int(s/10)\n    return res\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = abs(n1)\n    n2 = abs(n2)\n    sum = 0\n    while(n1 > 0 or n2 > 0):\n        rem = n1%10\n        n1 = n1//10\n        rem2 = n2%10\n        n2 = n2//10\n        sum += abs(rem - rem2)\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0:\n        return n2\n    elif n2 == 0:\n        return n1\n    #Sum of the difference\n    else:\n        digit_sum = (n1 - n2) + digit_distance_nums(n1 // 10, n2 // 10)\n        return digit_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    x = abs(n1-n2)\n    y = 0\n    for i in range(0, 10):\n        if n1 < n2:\n            y += x//(10**i)\n        elif n1 == n2:\n            y = x\n        else:\n            y += x-(10**i)\n    return y\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    max_num = max(n1, n2)\n    min_num = min(n1, n2)\n    for i in range(len(max_num)):\n        diff = min_num[i] - max_num[i]\n        sum += diff\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    curr_sum = 0\n    largest_sum = -1\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        \n        if curr_sum > largest_sum:\n            largest_sum = curr_sum\n    \n    return largest_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    start = 0\n    end = 0\n    index = 0\n    while index < size:\n        curr_sum = curr_sum + a[index]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum == max_sum:\n            start = index\n            end = index + 1\n        index = index + 1\n    print(\"The largest contiguous sublist is: \" + str(a[start:end]))\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_sum = a[0]\n    sum = 0\n    for i in range(0, size):\n        sum += a[i]\n        if sum > max_sum:\n            max_sum = sum\n        if sum < 0:\n            sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        for j in range(i, size):\n            if sum(a[i:j+1]) > max_sum:\n                max_sum = sum(a[i:j+1])\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # if size is 1 then the max sum is list's single value.\n    if size == 1:\n        return a[0]\n    \n    # stores all the values in the array\n    # and the sum of it.\n    max_sum = -1\n    \n    # initialise the start and end values\n    start = 0\n    end = 0\n    \n    # iterate over the given array\n    for i in range(0, size):\n        # check if the sum of the subarray\n        # is more than the previously found\n        # max sum or if the subarray is more than 1.\n        if (a[i] > a[start]) or (i - start + 1 > max_sum):\n            max_sum = i - start + 1\n            end = i\n        # increase the start value to move the window forward\n        start += 1\n    \n    # return the maximum sum subarray.\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -1 * float('inf')\n    start_index = 0\n    \n    for i in range(0, size):\n        curr_sum = 0\n        # Iterate from the current index to the end\n        for j in range(i, size):\n            # Add the next element to the current sum\n            curr_sum += a[j]\n            # if we have reached the end of the array, then store the sum and break out of the loop\n            if j == size - 1:\n                # print(\"After \", str(j), \"iterations: sum is \", curr_sum, \"and index is \", i)\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n                    start_index = i\n                break\n                \n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                start_index = i\n        \n    return max_sum, start_index\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    m = size - 1\n    s = 0\n    result = float('-inf')\n    for i in range(0, size):\n        s = s + a[i]\n        if s > result:\n            result = s\n            m = i\n    print(result, m)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_value = 0\n    start_index = 0\n    end_index = 0\n    for i in range(size):\n        if a[i] > max_value:\n            max_value = a[i]\n            start_index = i\n        elif a[i] < 0:\n            if max_value < 0:\n                max_value = a[i]\n                start_index = i\n    for j in range(start_index, size):\n        if a[j] > max_value:\n            max_value = a[j]\n            end_index = j\n    if end_index == 0:\n        return max_value\n    return max_value + max_sub_array_sum(a[start_index: end_index], end_index - start_index)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Edge case\n    if len(a) == 0:\n        return 0\n    # The sum of the largest continuous sublist must start and end with a\n    # zero value, therefore the first and last value in the list must be\n    # 0.\n    if a[0] == 0:\n        a[0] = -float('inf')\n    if a[-1] == 0:\n        a[-1] = float('inf')\n    \n    max_sum = -float('inf')\n    # Initialize max_sum to the first element in the array.\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    # Traverse the array and find the max_sum.\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(current_sum, max_sum)\n    \n    return max_sum\n    \nprint(max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 8))\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    dp = [[0] * size for i in range(size)]\n    dp[0][0] = a[0]\n    ans = dp[0][0]\n    for i in range(1, size):\n        dp[i][0] = max(dp[i-1][0] + a[i], a[i])\n    for j in range(1, size):\n        dp[0][j] = max(dp[0][j-1] + a[j], a[j])\n    for i in range(1, size):\n        for j in range(1, size):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1] + a[i+j])\n    print(dp)\n    return dp[-1][-1]\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(set(test_tup1).union(set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    un_tup = []\n    for i in test_tup1:\n        if i not in un_tup:\n            un_tup.append(i)\n    for i in test_tup2:\n        if i not in un_tup:\n            un_tup.append(i)\n    un_tup.sort()\n    return un_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = list(set(test_tup1).union(set(test_tup2)))\n    union_elements.sort()\n    return union_elements\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    union_set = test_set1.union(test_set2)\n    union_list = list(union_set)\n    return sorted(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for item in test_tup1:\n        if item not in union_tup:\n            union_tup.append(item)\n    for item in test_tup2:\n        if item not in union_tup:\n            union_tup.append(item)\n    union_tup = sorted(union_tup)\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    union_tup = list(set(test_tup1) | set(test_tup2))\n    union_tup.sort()\n    return tuple(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tuple = tuple(sorted(set(test_tup1 + test_tup2)))\n    return new_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup = set()\n    for element in test_tup1:\n        test_tup.add(element)\n    for element in test_tup2:\n        test_tup.add(element)\n    return sorted(test_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = tuple()\n    union_elements = tuple(set(test_tup1 + test_tup2))\n    for value in union_elements:\n        union += (sorted(value),)\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list1.extend(test_list2)\n    test_list1.sort()\n    return tuple(test_list1)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # lst = list(map(int, input().split()))\n    # lst = list(map(int, input().split()))\n    lst = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if j-i > max_len and lst[j] == lst[i]:\n                max_len = j-i\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == None:\n        return -1\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    sub_list = []\n    for element in lst:\n        sub_list.append(element)\n        if len(sub_list) == len(lst):\n            if len(sub_list) > max_length:\n                max_length = len(sub_list)\n                sub_list = []\n    if len(sub_list) > max_length:\n        max_length = len(sub_list)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maximum_size = 1\n    size = len(lst)\n    i = 0\n    j = 1\n    while j < size:\n        if lst[i] == lst[j]:\n            length = j - i + 1\n            if length > maximum_size:\n                maximum_size = length\n        j += 1\n        i += 1\n    return maximum_size\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    lst.sort()\n    for i in range(0,len(lst)):\n        #print(i)\n        if(i==0 or lst[i]>lst[i-1]):\n            if(len(lst[i])>longest):\n                longest = len(lst[i])\n    #print(longest)\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max=0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i:j+1]) > max:\n                max = len(lst[i:j+1])\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #create a dictionary for storing the max length value\n    max_length = {}\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    ans = 0\n    curr_max = 0\n    for i in lst:\n        curr_max = max(curr_max, len(i))\n        ans = max(ans, curr_max)\n    return ans\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_sub = lst[0]\n    for item in lst:\n        if len(item) > len(max_sub):\n            max_sub = item\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r\"[^\\\"][^\\\"]*\", text)\n    print(result)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = []\n    s = re.search(r'\"(.*?)\"',text)\n    if s:\n        s = s.group(1)\n        result.append(s)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    # Split the string into a list\n    # list = text.split('\"')\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    v1 = re.search(\"'(.*)'\", text)\n    if v1:\n        return v1.group(1)\n    else:\n        v2 = re.search('\"(.*)', text)\n        if v2:\n            return v2.group(1)\n    return ''\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotes = re.findall('\".+?\"', text)\n    values = []\n    for i in quotes:\n        values.append(i[1:-1])\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"\\\"(.+?)\\\"\"\n    results = re.findall(pattern, text)\n    return results\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    string = text\n    lst = []\n    for s in re.findall(r'\\\"(.*?)\\\"', string):\n        lst.append(s)\n    return lst\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"\\\"\\\"(.*?)\\\"\\\"\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"\\\"\\\"(.*?)\\\"\\\"\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex_2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex_2(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex_3(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex_3(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex_4(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex_4(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex_5(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex_5(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex_6(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex_6(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex_7(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex_7(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex_8(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex_8(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex_9(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex_9(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_values_nested_braces_complex_10(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?)\\\"', text).group(1)\n        return val\n    except:\n        return None\n    \ndef extract_keys_nested_braces_complex_10(text):\n    '''\n    Write a function to extract keys between quotation marks from a string.\n    '''\n    try:\n        val = re.search(r'\\\"(.*?"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Split on a space to get the values\n    values = re.split(r'\\s+', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    val_regex = r'\\\"(.*?)\\\"'\n    \n    values = re.findall(val_regex, text)\n    \n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans = 0\n    arr = sorted(arr)\n    if n%2 == 1:\n        for i in range(0,n,2):\n            ans += (arr[i]-arr[i+1])\n    else:\n        for i in range(0,n,2):\n            ans += (arr[i]+arr[i+1])\n    return ans\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import Counter\n    \n    for i in range(n):\n        for j in range(i):\n            if arr[i] == arr[j]:\n                return -1\n    if len(Counter(arr)) > n:\n        return -1\n    else:\n        return len(Counter(arr)) - n\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    if not arr or n == 0:\n        return 0\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if(arr[i] == arr[j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \ndef find_longest_word(string): \n    '''\n    Write a python function to find the longest word in a string. \n    '''\n    word = string.split()\n    return max(word, key=len)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    list1 = list(word)\n    return list1\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \n    \ndef count_chars(word):\n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    return len(word)\n    \n    \ndef sort_list(list_to_sort):\n    '''\n    Write a python function to sort a list of integers in ascending order.\n    '''\n    list_to_sort.sort()\n    return list_to_sort\n    \n    \ndef count_odd_even(list_to_sort):\n    '''\n    Write a python function to count odd and even numbers in a list of integers.\n    '''\n    odd_count = 0\n    even_count = 0\n    for i in list_to_sort:\n        if i%2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count,even_count\n    \n    \ndef test_split():\n    '''\n    Test your function\n    '''\n    test_string = 'abcd'\n    assert split(test_string) == ['a', 'b', 'c', 'd']\n    test_string = 'abcdefg'\n    assert split(test_string) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n    test_string = 'abcdefgabc'\n    assert split(test_string) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'a']\n    \ndef test_count_chars():\n    '''\n    Test your function\n    '''\n    test_string = 'abcdefgabc'\n    assert count_chars(test_string) == 12\n    test_string = 'abcdef'\n    assert count_chars(test_string) == 6\n    test_string = 'abc'\n    assert count_chars(test_string) == 3\n    \ndef test_sort_list():\n    '''\n    Test your function\n    '''\n    test_list = []\n    test_list.append(1)\n    test_list.append(4)\n    test_list.append(2)\n    test_list.append(3)\n    test_list.append(5)\n    test_list.append(6)\n    test_list.append(7)\n    assert sort_list(test_list) == [1, 2, 3, 4, 5, 6, 7]\n    \ndef test_count_odd_even():\n    '''\n    Test your function\n    '''\n    test_list = [1, 3, 5, 7, 9]\n    assert count_odd_even(test_list) == (1, 3)\n    test_list = [1, 3, 5, 7, 9, 11]\n    assert count_odd_even(test_list) == (2, 3)\n    test_list = [1, 3, 5, 7, 9, 11, 13]\n    assert count_odd_even(test_list) == (3, 3)\n    \n    \ndef test_split_list_of_strings():\n    '''\n    Test your function\n    '''\n    test_string = 'abcd'\n    assert split_list_of_strings(test_string) == ['a', 'b', 'c', 'd']\n    test_string = 'abcdefg'\n    assert split_list_of_strings(test_string) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n    test_string = 'abcdefgabc'\n    assert split_list_of_strings(test_string) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'a']\n    \n    \ndef test_split_by_spaces():\n    '''\n    Test your function\n    '''\n    test_string = 'a b c d e f'\n    assert split_by_spaces(test_string) == ['a', 'b', 'c', 'd', 'e', 'f']\n    test_string = 'a b c d e f g'\n    assert split_by_spaces(test_string) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n    \ndef test_split_by_spaces_new():\n    '''\n    Test your function\n    '''\n    test_string = 'a b c d e f'\n    assert split_by_spaces_new(test_string) == ['a', 'b', 'c', 'd', 'e', 'f']\n    test_string = 'a b c d e f g'\n    assert split_by_spaces_new(test_string) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n    \n    \ndef test_lower_string():\n    '''\n    Test your function\n    '''\n    assert lower_string('abcd') == 'abcd'\n    assert lower_string('ABCD') == 'abcd'\n    assert lower_string('aBcD') == 'abcD'\n    assert lower_string('ABcD') == 'abcD'\n    assert lower_string('ABcd') == 'abcD'\n    \n    \ndef test_remove_whitespace():\n    '''\n    Test your function\n    '''\n    assert remove_whitespace('a') == 'a'\n    assert remove_whitespace('a b') == 'a b'\n    assert remove_whitespace('a b c') == 'a b c'\n    assert remove_whitespace('a b c d') == 'a b c d'\n    assert remove_whitespace('a b c d e f') == 'a b c d e f'\n    assert remove_whitespace('a\\nb\\nc\\nd') == 'a\\nb\\nc\\nd'\n    assert remove_whitespace('  a  b  c  d  ') == 'a  b  c  d'\n    \n    \ndef test_lower_string_2():\n    '''\n    Test your function\n    '''\n    assert lower_string_2('abcd') == 'abcd'\n    assert lower_string_2('ABCD') == 'abcD'\n    assert lower_string_2('aBcD') == 'abcD'\n    assert lower_string_2('ABcD') == 'abcD'\n    assert lower_string_2('ABcd') == 'abcD'\n    \n    \ndef test_remove_repeats():\n    '''\n    Test your function\n    '''\n    assert remove_repeats('abcd') == 'abcd'\n    assert remove_repeats('abcd abcd') == 'abcd'\n    assert remove_repeats('abcd abcd abcd') == 'abcd'\n    assert remove_repeats('abcd abcd abcd') == 'abcd'\n    assert remove_repeats('abcd abcd abcd abcd') == 'abcd'\n    \n    \ndef test_remove_ends():\n    '''\n    Test your function\n    '''\n    assert remove_ends('abcd') == 'bc'\n    assert remove_ends('abcabc') == ''\n    assert remove_ends('abcabcabc') == ''\n    assert remove_ends('abcabcabcabc') == ''\n    assert remove_ends('abcabcabcabcabcabc') == ''\n    \n    \ndef test_str_sum():\n    '''\n    Test your function\n    '''\n    assert str_sum('a') == 'a'\n    assert str_sum('a b') == 'ab'\n    assert str_sum('a b c') == 'abc'\n    assert str_sum('a b c d') == 'abcd'\n    assert str_sum('a b c d e f') == 'abcdef'\n    assert str_sum('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'abcdefghijklmnopqrstuvwxyz'\n    assert str_sum('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'abcdefghijklmnopqrstuvwxyz'\n    \n    \ndef test_str_join():\n    '''\n    Test your function\n    '''\n    assert str_join('') == ''\n    assert str_join('a') == 'a'\n    assert str_join('a "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n%10 + sum_digits(n//10)\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome. A palindrome is a number\n    that reads the same backward as forward.\n    '''\n    if n == 0:\n        return True\n    return n%10 == sum_digits(n//10)\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a non-negative integer is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_prime_v2(n):\n    '''\n    Write a function to check if a non-negative integer is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,n//2+1):\n        if n%i == 0:\n            return False\n    return True\n    \ndef count_arrangements(n):\n    '''\n    Write a function to calculate number of ways a person can play the game of chance.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return count_arrangements(n-1) + count_arrangements(n-2)\n    \ndef count_arrangements_v2(n):\n    '''\n    Write a function to calculate number of ways a person can play the game of chance.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    table = [0,1,2]\n    for i in range(3,n+1):\n        table.append(table[i-1] + table[i-2])\n    return table[n]\n    \ndef fibonacci(n):\n    '''\n    Write a function to calculate nth term of fibonacci sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    table = {1:1, 2:2}\n    table[3] = table[1] + table[2]\n    for i in range(4,n+1):\n        table[i] = table[i-1] + table[i-2]\n    return table[n]\n    \ndef fibonacci_v2(n):\n    '''\n    Write a function to calculate nth term of fibonacci sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    table = {1:1, 2:2}\n    table[3] = table[1] + table[2]\n    for i in range(4,n+1):\n        table[i] = table[i-1] + table[i-2]\n    return table[n]\n    \ndef is_prime_v3(n):\n    '''\n    Write a function to check if a non-negative integer is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_prime_v4(n):\n    '''\n    Write a function to check if a non-negative integer is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    prime = True\n    for i in range(3,n//2+1,2):\n        if n%i == 0:\n            prime = False\n    return prime\n    \ndef is_prime_v5(n):\n    '''\n    Write a function to check if a non-negative integer is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_prime_v6(n):\n    '''\n    Write a function to check if a non-negative integer is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,n//2+1,2):\n        if n%i == 0:\n            return False\n    return True\n    \ndef fizzbuzz(n):\n    '''\n    Write a function to print numbers from 1 to n using the following rules:\n    \n    1. If number is divisible by 3, print \"fizz\" instead of the number\n    2. If number is divisible by 5, print \"buzz\" instead of the number\n    3. If number is divisible by both 3 and 5, print \"fizzbuzz\" instead of the number\n    '''\n    for i in range(1,n+1):\n        if i%3 == 0 and i%5 == 0:\n            print(\"fizzbuzz\")\n        elif i%3 == 0:\n            print(\"fizz\")\n        elif i%5 == 0:\n            print(\"buzz\")\n        else:\n            print(i)\n            \ndef fizzbuzz_v2(n):\n    '''\n    Write a function to print numbers from 1 to n using the following rules:\n    \n    1. If number is divisible by 3, print \"fizz\" instead of the number\n    2. If number is divisible by 5, print \"buzz\" instead of the number\n    3. If number is divisible by both 3 and 5, print \"fizzbuzz\" instead of the number\n    '''\n    for i in range(1,n+1):\n        if i%3 == 0:\n            print(\"fizz\")\n        elif i%5 == 0:\n            print(\"buzz\")\n        elif i%3 == 0 and i%5 == 0:\n            print(\"fizzbuzz\")\n        else:\n            print(i)\n            \ndef is_palindrome_v2(s):\n    '''\n    Write a function to check if a non-empty string is a palindrome.\n    '''\n    if len(s) == 0:\n        return False\n    i, j = 0, len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_palindrome_v3(s):\n    '''\n    Write a function to check if a non-empty string is a palindrome.\n    '''\n    if len(s) == 0:\n        return False\n    i, j = 0, len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_palindrome_v4(s):\n    '''\n    Write a function to check if a non-empty string is a palindrome.\n    '''\n    if len(s) == 0:\n        return False\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_palindrome_v5(s):\n    '''\n    Write a function to check if a non-empty string is a palindrome.\n    '''\n    if len(s) == 0:\n        return False\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s["
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n!= 0:\n        total += n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = int(n / 10)\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    return sum([int(x) for x in n])\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -sum_digits(abs(n))\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return n\n    else:\n        return sum_digits(n // 10) + n % 10\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted = True\n    if len(list1) == 0:\n        sorted = False\n    elif len(list1) == 1:\n        if list1[0]!= list1[-1]:\n            sorted = False\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] < list1[i+1]:\n                continue\n            else:\n                sorted = False\n                break\n    return sorted\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i+1]<list1[i]:\n            return False\n    return True\n    # Code Here\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0,len(list1)):\n        if i == 0:\n            continue\n        if list1[i-1] > list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = True\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] >= list1[i + 1] for i in range(len(list1)-1))\nprint(issort_list([0, 1, 2, 3, 4, 5, 6, 7, 8]))\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Checking whether the list is sorted.\n    for i in range(0, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for _ in range(length):\n        empty_list.append({})\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    n = 0\n    list1 = []\n    while n < length:\n        n += 1\n        dict1 = {}\n        list1.append(dict1)\n    return list1\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    d = {}\n    for i in range(length):\n        d[i] = {}\n    return d\n    \ndef create_list_of_dictionaries():\n    '''\n    Write a function to create a list of N dictionaries\n    where N is the number of the total number of people who \n    make an appointment at a specific hospital. \n    '''\n    d = empty_list(5)\n    d[0]['name'] = 'Alison'\n    d[0]['age'] = 18\n    d[0]['address'] = '123 Fake Street'\n    d[0]['phone'] = '555-1234'\n    d[0]['ssn'] = '12345-678'\n    d[0]['city'] = 'Bangalore'\n    d[0]['state'] = 'Karnataka'\n    d[0]['zip'] = '37121'\n    d[0]['special_instructions'] = 'No special instructions'\n    d[1]['name'] = 'Alisa'\n    d[1]['age'] = 16\n    d[1]['address'] = '555 Fake Street'\n    d[1]['phone'] = '555-4321'\n    d[1]['ssn'] = '12345-789'\n    d[1]['city'] = 'New York'\n    d[1]['state'] = 'New York'\n    d[1]['zip'] = '11112'\n    d[1]['special_instructions'] = 'No special instructions'\n    d[2]['name'] = 'Bill'\n    d[2]['age'] = 21\n    d[2]['address'] = '555 Fake Street'\n    d[2]['phone'] = '555-7777'\n    d[2]['ssn'] = '12345-888'\n    d[2]['city'] = 'New York'\n    d[2]['state'] = 'New York'\n    d[2]['zip'] = '11112'\n    d[2]['special_instructions'] = 'No special instructions'\n    d[3]['name'] = 'Carl'\n    d[3]['age'] = 14\n    d[3]['address'] = '555 Fake Street'\n    d[3]['phone'] = '555-3333'\n    d[3]['ssn'] = '12345-555'\n    d[3]['city'] = 'New York'\n    d[3]['state'] = 'New York'\n    d[3]['zip'] = '11112'\n    d[3]['special_instructions'] = 'No special instructions'\n    d[4]['name'] = 'Dan'\n    d[4]['age'] = 11\n    d[4]['address'] = '555 Fake Street'\n    d[4]['phone'] = '555-5555'\n    d[4]['ssn'] = '12345-555'\n    d[4]['city'] = 'New York'\n    d[4]['state'] = 'New York'\n    d[4]['zip'] = '11112'\n    d[4]['special_instructions'] = 'No special instructions'\n    return d\n    \ndef number_of_keys_in_dictionary(d):\n    '''\n    Write a function that returns the number of keys in a dictionary.\n    '''\n    return len(d)\n    \ndef size_of_dictionary(d):\n    '''\n    Write a function that returns the number of items (key:value) pairs in a dictionary.\n    '''\n    return len(d)\n    \ndef add_key_value_pair_to_dict(d, key, value):\n    '''\n    Write a function that adds an item (key:value) pair to the dictionary \n    if the key does not already exist. \n    If the key already exists, the value should be updated to the new value.\n    '''\n    if key not in d:\n        d[key] = value\n    else:\n        d[key] = d[key]\n    \ndef remove_key_value_pair_from_dict(d, key):\n    '''\n    Write a function that removes an item (key:value) pair from the dictionary \n    if the key exists. \n    If the key does not exist, the function should not do anything.\n    '''\n    if key in d:\n        del d[key]\n    else:\n        return \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return[{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for x in range(length):\n        dct = {}\n        lst.append(dct)\n    return lst\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    new_list = []\n    for i in range(length):\n        new_list.append({})\n    return new_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    #Loop through each sublist in the list of lists\n    for i in range(len(list1)):\n        \n        #Sort each sublist in the list of lists\n        list1[i] = sorted(list1[i])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[1])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    import re\n    import operator\n    list1.sort(key=lambda list1: (list(map(int, re.findall('\\d+', list1)))))\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    count = 0\n    for i in range(len(nums)):\n        if nums.count(nums[i]) == 2:\n            nums.remove(nums[i])\n            count += 1\n    return count\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_dict = {}\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # sort the given list\n    nums.sort()\n    # i, j, k\n    i, j, k = 0, 1, len(nums)-1\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            nums.remove(nums[i+1])\n            k = k-1\n        else:\n            i = i+1\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # if len(nums) < 2:\n    #     return nums\n    \n    # return list(set(nums))\n    # Solution - 2\n    return list(dict.fromkeys(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # not clear for me\n    # duplicate_nums = set()\n    # for num in nums:\n    #     if num in duplicate_nums:\n    #         duplicate_nums.remove(num)\n    #     else:\n    #         duplicate_nums.add(num)\n    # return duplicate_nums\n    seen = set()\n    seen_add = seen.add\n    return [x for x in nums if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    a = []\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums\n    else:\n        for i in range(len(nums)):\n            if nums[i] not in a:\n                a.append(nums[i])\n        return a\n        \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Declare the dictionary\n    dictionary = {}\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_without_dup = []\n    for num in nums:\n        if num not in nums_without_dup:\n            nums_without_dup.append(num)\n    return nums_without_dup\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_copy = nums.copy()\n    for num in nums_copy:\n        if nums_copy.count(num) == 1:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #Initializing list of unique number\n    unique_number = []\n    #Iterating through the list and appending the unique number in the list\n    for number in list_data:\n        if number not in unique_number:\n            unique_number.append(number)\n    #Calculating the product of the unique number\n    product = 1\n    for number in unique_number:\n        product *= number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # pass\n    if not isinstance(list_data, list):\n        raise TypeError(\"List data should be a list\")\n    if len(list_data) == 0:\n        raise ValueError(\"Empty list\")\n    # print(\"Before\", list_data)\n    res = 1\n    for num in list_data:\n        if not isinstance(num, int):\n            raise TypeError(\"Data should be a list of integers\")\n        if num not in list_data:\n            raise ValueError(\"Data should be a list of integers\")\n        res = res * num\n    return res\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    return(len(unique_list) * reduce(lambda x,y: x * y, unique_list))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    sum = 1\n    for i in list_data:\n        if i not in list_data:\n            sum = 0\n            break\n        else:\n            sum = sum * i\n    return sum\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 1, 2, 3, 4, 5, 5, 6, 7, 8]\n    product = 1\n    for i in range(len(list_data)):\n        if list_data.count(list_data[i]) == 1:\n            product *= list_data[i]\n    print(product)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if not list_data:\n        return\n    unique_list = []\n    for value in list_data:\n        if value not in unique_list:\n            unique_list.append(value)\n    return len(unique_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    sum_values = 0\n    for i in list_data:\n        if list_data.count(i) == 1:\n            sum_values += i\n    return sum_values\n    \ndef list_sum(list_data):\n    '''\n    Write a python function to calculate the sum of all the numbers in a given list.\n    '''\n    sum_values = 0\n    for i in list_data:\n        sum_values += i\n    return sum_values\n    \ndef list_average(list_data):\n    '''\n    Write a python function to calculate the average of all the numbers in a given list.\n    '''\n    return list_sum(list_data)/len(list_data)\n    \ndef list_variance(list_data):\n    '''\n    Write a python function to calculate the variance of a list of numbers.\n    '''\n    return list_sum(list_data)/len(list_data)\n    \ndef list_standard_deviation(list_data):\n    '''\n    Write a python function to calculate the standard deviation of a list of numbers.\n    '''\n    return list_variance(list_data)**(1/2)\n    \ndef list_sum_square_difference(list_data):\n    '''\n    Write a python function to calculate the sum of the square differences of a list of numbers.\n    '''\n    sum_square_difference = 0\n    for i in range(len(list_data)-1):\n        sum_square_difference += (list_data[i+1]-list_data[i])**2\n    return sum_square_difference\n    \ndef list_standard_error(list_data):\n    '''\n    Write a python function to calculate the standard error of a list of numbers.\n    '''\n    return list_sum_square_difference(list_data)/(len(list_data)-1)**(1/2)\n    \ndef list_variance_n(list_data, n):\n    '''\n    Write a python function to calculate the variance of a given list of numbers with a given sample size.\n    '''\n    return list_sum_square_difference(list_data)/n\n    \ndef list_standard_deviation_n(list_data, n):\n    '''\n    Write a python function to calculate the standard deviation of a given list of numbers with a given sample size.\n    '''\n    return list_variance_n(list_data, n)**(1/2)\n    \ndef list_variance_inf(list_data):\n    '''\n    Write a python function to calculate the variance of a given list of numbers with a given sample size.\n    '''\n    return list_sum_square_difference(list_data)\n    \ndef list_standard_deviation_inf(list_data):\n    '''\n    Write a python function to calculate the standard deviation of a given list of numbers with a given sample size.\n    '''\n    return list_variance_inf(list_data)**(1/2)\n    \ndef sum_of_squares(list_data):\n    '''\n    Write a python function to calculate the sum of the squares of the numbers in a given list.\n    '''\n    sum_of_square_values = 0\n    for i in list_data:\n        sum_of_square_values += i**2\n    return sum_of_square_values\n    \ndef sum_of_squares_mean_of_squares(list_data):\n    '''\n    Write a python function to calculate the sum of the squares of the mean of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares(list_data)/len(list_data)\n    \ndef sum_of_squares_mean_of_squares_standard_deviation(list_data):\n    '''\n    Write a python function to calculate the sum of the squares of the standard deviation of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_mean_of_squares(list_data)**(1/2)\n    \ndef sum_of_squares_inf(list_data):\n    '''\n    Write a python function to calculate the sum of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares(list_data)\n    \ndef sum_of_squares_inf_standard_deviation(list_data):\n    '''\n    Write a python function to calculate the sum of the squares of the standard deviation of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_inf(list_data)**(1/2)\n    \ndef sum_of_squares_mean_of_squares_variance(list_data):\n    '''\n    Write a python function to calculate the sum of the squares of the variance of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_mean_of_squares(list_data)/len(list_data)\n    \ndef sum_of_squares_mean_of_squares_variance_standard_deviation(list_data):\n    '''\n    Write a python function to calculate the sum of the squares of the standard deviation of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_mean_of_squares_variance(list_data)**(1/2)\n    \ndef sum_of_squares_mean_of_squares_variance_standard_deviation_inf(list_data):\n    '''\n    Write a python function to calculate the sum of the squares of the standard deviation of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_mean_of_squares_variance_standard_deviation(list_data)\n    \ndef sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf(list_data):\n    '''\n    Write a python function to calculate the sum of the standard deviation of the squares of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_mean_of_squares_variance_standard_deviation_inf(list_data)**(1/2)\n    \ndef sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf_inf(list_data):\n    '''\n    Write a python function to calculate the sum of the standard deviation of the squares of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf(list_data)\n    \ndef sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf_inf(list_data):\n    '''\n    Write a python function to calculate the sum of the standard deviation of the squares of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf(list_data)**(1/2)\n    \ndef sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf_inf_inf(list_data):\n    '''\n    Write a python function to calculate the sum of the standard deviation of the squares of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf_inf(list_data)\n    \ndef sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf_inf_inf(list_data):\n    '''\n    Write a python function to calculate the sum of the standard deviation of the squares of the squares of the numbers in a given list.\n    '''\n    return sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf_inf(list_data)**(1/2)\n    \ndef sum_of_squares_mean_of_squares_variance_standard_deviation_inf_inf_inf_inf_inf(list_data):\n    '''\n    Write a python function to calculate the sum of the standard deviation of the squares of the squares of the numbers in a given list"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    a = len(list_data)\n    product = 1\n    for i in range(a):\n        if list_data.count(list_data[i]) == 1:\n            product = product*list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=1\n    for i in list_data:\n        if list_data.count(i)==1:\n            product=product*i\n    return product\nprint(unique_product([10,2,3,5,3,3,6,3,5,3,5,2,2,10,2]))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #     unique_data = []\n    #     for i in range(len(list_data)):\n    #         if list_data[i] not in unique_data:\n    #             unique_data.append(list_data[i])\n    #         else:\n    #             pass\n    #     print(unique_data)\n    #     if len(unique_data) == 0:\n    #         print(\"No unique values found\")\n    #     else:\n    #         print(f\"Product of unique values: {reduce(lambda x, y: x*y, unique_data)}\")\n    unique_data = set(list_data)\n    print(unique_data)\n    print(f\"Product of unique values: {reduce(lambda x, y: x*y, unique_data)}\")\n    \nif __name__ == \"__main__\":\n    list_data = list(map(int, input().split()))\n    unique_product(list_data)\n    # unique_product([1, 2, 4, 5, 7, 8, 9, 5, 7, 8, 9])\n    # unique_product([])\n    # unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*pi*r*h\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h+2*pi*r*2*h+2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area_cylinder = 2*pi*r*h\n    print(f'The Surface Area of Cylinder is {surface_area_cylinder:.2f}')\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area_cone = pi*r*h\n    print(f'The Surface Area of Cone is {surface_area_cone:.2f}')\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*math.pi*r*h\n    return a\n    \n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*math.pi*r*h\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    area = pi*r*r\n    return area+2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 3.14 * r * h\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # area_cylinder = pi * r * h\n    area_cylinder = 2 * pi * r * h\n    return area_cylinder\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=3.14*r**2\n    return a*2*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r**2\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    B_ = set(B)\n    if len(B) <= len(A):\n        for i in range(len(A)):\n            if A[i] in B_:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def check(A,B):\n        if A==None or B==None:\n            return False\n        return any(A[i] == B for i in range(len(A)) if A[i] in B)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i]!= B[i] and A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n1 = len(A)\n    n2 = len(B)\n    if n1 == 0 and n2 == 0:\n        return True\n    elif n1 == 0 or n2 == 0:\n        return False\n    else:\n        if A[0] == B[0]:\n            return is_Sub_Array(A[1:],B[1:])\n        else:\n            return False or is_Sub_Array(A[1:],B)\nprint(is_Sub_Array([1,2,3,4,5,6],[2,3,4,6])"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    count = 0\n    if n<m:\n        return False\n    else:\n        for i in range(m):\n            for j in range(n):\n                if A[j] == B[i]:\n                    count +=1\n        if count == n:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #Time Complexity: O(n)\n    for i in range(len(A)):\n        if i>=len(B):\n            return False\n        else:\n            if A[i]!= B[i]:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    temp_list=[]\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] == B[j]:\n                temp_list.append(A[i])\n    if len(temp_list) == len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B) and len(A) == len(set(A) & set(B)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    if len(A) < len(B):\n        for x in A:\n            for y in range(i,len(B)):\n                if x == B[y]:\n                    j += 1\n                    i += 1\n    elif len(A) > len(B):\n        for x in A:\n            for y in range(i,len(B)):\n                if x == B[y]:\n                    j += 1\n                    i += 1\n    if j == len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not len(A) >= len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] < B[0]:\n            return False\n        for j in range(len(B)):\n            if A[i] == B[j]:\n                break\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Please enter a positive integer\")\n        return\n    else:\n        fact_num = 1\n        while n >= 1:\n            fact_num *= n\n            n = n - 1\n        print(fact_num % 10)\n        \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit_fact = 1\n    for i in range(1,n+1):\n        last_digit_fact = last_digit_fact*i\n    return last_digit_fact\n    \n    \ndef last_Digit_Pow(n): \n    '''\n    Write a python function to find the last digit in power of a given number.\n    '''\n    last_digit_pow = 1\n    for i in range(1,n+1):\n        last_digit_pow = last_digit_pow*i\n    return last_digit_pow\n    \ndef last_Digit_Power(n): \n    '''\n    Write a python function to find the last digit in power of a given number.\n    '''\n    last_digit_power = 1\n    for i in range(1,n+1):\n        last_digit_power = last_digit_power*i\n    return last_digit_power\n    \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n%10 * last_Digit_Factorial(n//10)\n    \n        "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        raise ValueError('Invalid value')\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n%10 * last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    res = 1\n    while(n > 0):\n        res *= n\n        n -= 1\n    return res % 10\n    \n    \n    \n    \ndef isPalindrome(n): \n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    \n    str1 = str(n)\n    if(str1 == str1[::-1]):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \ndef decimalToBinary(n): \n    '''\n    Write a python function to convert decimal number to binary number.\n    '''\n    \n    while(n > 0):\n        print(n % 2, end = '')\n        n = n // 2\n    print()\n    \n    \n    \n    \n    \ndef largest_pair_of_number(n1, n2, n3): \n    '''\n    Write a python function to find the largest pair of numbers.\n    '''\n    \n    lst = []\n    lst.append(n1)\n    lst.append(n2)\n    lst.append(n3)\n    \n    lst.sort()\n    \n    return lst[2]\n    \n    \n    \n    \n    \ndef is_Number_Consistent(n, m): \n    '''\n    Write a python function to check whether the given number is consistent or not.\n    '''\n    \n    lst = []\n    for i in range(1, 10):\n        lst.append(i)\n    lst.sort()\n    \n    for i in range(len(lst)):\n        if(lst[i] == n or lst[i] == m):\n            return False\n    \n    return True\n    \n    \n    \n    \n    \ndef is_Number_Consistent2(n, m, k): \n    '''\n    Write a python function to check whether the given number is consistent or not.\n    '''\n    \n    lst = []\n    for i in range(1, 10):\n        lst.append(i)\n    lst.sort()\n    \n    for i in range(len(lst)):\n        if(lst[i] == n or lst[i] == m or lst[i] == k):\n            return False\n    \n    return True\n    \n    \n    \n    \ndef main(): \n    '''\n    Write a python function to count the number of words in a text.\n    '''\n    \n    text = '''The Project Gutenberg EBook of Romeo and Juliet, by William Shakespeare\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0: \n        return 1\n    else: \n        return n % 10 * last_Digit_Factorial(n // 10) \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return n%10 * last_Digit_Factorial(n//10)\n    "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #make sure they're the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return None\n    #prepare the new list\n    newList = []\n    #go through each element in each list\n    for i in range(len(list1)):\n        newList.append(list1[i])\n        newList.append(list2[i])\n        newList.append(list3[i])\n    return newList\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create the result list\n    result = []\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    n = len(list1)\n    if n!= len(list2):\n        raise Exception(\"list1 and list2 should have same length\")\n    if n!= len(list3):\n        raise Exception(\"list1 and list2 should have same length\")\n    new_list = []\n    for i in range(n):\n        new_list.extend([list1[i],list2[i],list3[i]])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(0,len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interval = len(list1)\n    new_list = []\n    for i in range(interval):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.extend((list1[i],list2[i],list3[i]))\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    for i in range(len(list1)):\n        final_list.extend([list1[i],list2[i],list3[i]])\n    return final_list\n    \ndef remove_duplicates(list_items):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(list_items))\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[0],list2[0],list3[0]] + list(zip(list1[1:], list2[1:], list3[1:]))\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    x = len(list1)\n    y = len(list2)\n    z = len(list3)\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    final_list = []\n    while(i<x):\n        while(j<y):\n            while(k<z):\n                final_list.append(list1[i])\n                final_list.append(list2[j])\n                final_list.append(list3[k])\n                i += 1\n                j += 1\n                k += 1\n            j = 0\n            k = 0\n        j = 0\n        i += 1\n    return final_list\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    n = len(test_tup1)\n    i = 0\n    while i < n:\n        if test_tup1[i]!= test_tup2[i]:\n            break\n        else:\n            i += 1\n    if i == n:\n        return True\n    else:\n        return False\n    \ntest_tuple1 = (1, 2, 3, 4, 5)\ntest_tuple2 = (5, 6, 7, 8, 9)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1) - set(test_tup2)\n    \n    "
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Both tuples should contain the same number of elements')\n    else:\n        test_list1 = sorted(test_tup1)\n        test_list2 = sorted(test_tup2)\n        for i in range(len(test_list1)):\n            if test_list1[i]!= test_list2[i]:\n                return test_list1[i], test_list2[i]\n    \ndef find_dissimilar_list(test_list1, test_list2):\n    '''\n    Write a function to find the dissimilar elements in the given two lists.\n    '''\n    return set(test_list1).difference(set(test_list2))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    #your code here\n    diff = test_tup1.difference(test_tup2)\n    return diff\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Approach 1 - Using sets\n    # a = set(test_tup1)\n    # b = set(test_tup2)\n    #\n    # return sorted(list(a.difference(b)))\n    #\n    # Approach 2 - Using for loop\n    dissimilar_ele = []\n    for el in test_tup1:\n        if not el in test_tup2:\n            dissimilar_ele.append(el)\n    return sorted(dissimilar_ele)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    output = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    print(\"The elements are:\", test_tup1, test_tup2)\n    test_tup1_no_duplicate = []\n    test_tup2_no_duplicate = []\n    test_tup1_no_duplicate_dict = {}\n    test_tup2_no_duplicate_dict = {}\n    for item in test_tup1:\n        if item not in test_tup1_no_duplicate:\n            test_tup1_no_duplicate.append(item)\n    for item in test_tup2:\n        if item not in test_tup2_no_duplicate:\n            test_tup2_no_duplicate.append(item)\n    for i in range(len(test_tup1)):\n        test_tup1_no_duplicate_dict[test_tup1[i]] = 1\n    for i in range(len(test_tup2)):\n        test_tup2_no_duplicate_dict[test_tup2[i]] = 1\n    result = []\n    for i in test_tup1_no_duplicate:\n        if test_tup1_no_duplicate_dict.get(i) == None:\n            if i in test_tup2_no_duplicate:\n                result.append(i)\n    for i in test_tup2_no_duplicate:\n        if test_tup2_no_duplicate_dict.get(i) == None:\n            if i in test_tup1_no_duplicate:\n                result.append(i)\n    if len(result) == 0:\n        print(\"Both the given tuples are same\")\n    else:\n        print(\"The given tuples are not similar:\", result)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        for i in test_tup1:\n            if i not in test_tup2:\n                return i\n        return None\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 0:\n        return test_tuple\n    elif len(test_tuple) == 1:\n        return even_ele(test_tuple[0], even_fnc)\n    else:\n        if not isinstance(test_tuple[0], tuple):\n            if even_fnc(test_tuple[0]):\n                return even_ele(test_tuple[1], even_fnc)\n            else:\n                return even_ele(test_tuple[0], even_fnc)\n        else:\n            tuple_1 = []\n            for i in test_tuple:\n                if even_fnc(i):\n                    tuple_1.append(even_ele(i, even_fnc))\n                else:\n                    tuple_1.append(i)\n            return tuple_1\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) is not tuple:\n        return test_tuple\n    if type(test_tuple) is tuple and len(test_tuple) == 1:\n        return test_tuple\n    elif type(test_tuple) is tuple and len(test_tuple) == 0:\n        return test_tuple\n    else:\n        for i in range(len(test_tuple)):\n            if even_fnc(test_tuple[i]):\n                continue\n            else:\n                test_tuple = test_tuple[:i] + test_tuple[i + 1:]\n                if test_tuple == ():\n                    return test_tuple\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple):\n        return test_tuple\n    return even_fnc(even_ele(element, even_fnc) for element in test_tuple if isinstance(element, tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    count = 0\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            count += 1\n            even_ele(i, even_fnc)\n        elif i % 2 == 0:\n            even_fnc(i)\n    if count == 1:\n        test_tuple = test_tuple[0]\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def check_even(tuple_element):\n        if even_fnc(tuple_element):\n            return tuple_element\n        else:\n            return None\n    even_ele = tuple(map(check_even, test_tuple))\n    return even_ele\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # \n    return (even_fnc(test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if not even_fnc(i):\n            test_tuple.remove(i)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_ele_helper(test_tuple): \n        if type(test_tuple) == tuple: \n            if len(test_tuple) == 0: \n                return test_tuple\n            else: \n                return even_ele_helper(test_tuple[1:]) \n        else: \n            if test_tuple % 2 == 0: \n                return test_tuple \n            else: \n                return even_ele_helper(test_tuple[1:]) \n    return even_ele_helper(test_tuple) \n    \ndef even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: x % 2 == 0, test_tuple))\n    \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b * b\n    print(f'The Surface Area of the pyramid is {s}.')\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # base_edge = float(input('Enter base edge : '))\n    # height = float(input('Enter height : '))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)*2\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    area = b*s*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(b*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b * s\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    return (math.sqrt((s*s) + 4*b*b))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Answer\n    a=b*s\n    s=a*2\n    b=a*2\n    #d=a*2\n    return(s,b)\nprint(\"Surface Area of a Square Pyramid with a Given Base Edge and Height : \",surface_Area(5,4))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = b \n    h = s\n    area = 0.5 * h * base \n    return area\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    print(dict1)\n    print(len(dict1))\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(f\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    # return not dict1\n    return dict1.get(\"joh\")\n    \nif __name__ == \"__main__\":\n    my_dict_1 = {\"joh\": \"a\", \"jane\": \"b\", \"mike\": \"c\", \"john\": \"d\"}\n    my_dict_2 = {\"e\": \"a\", \"f\": \"b\", \"g\": \"c\", \"h\": \"d\"}\n    my_dict_3 = {}\n    my_dict_4 = {}\n    my_dict_5 = {}\n    my_dict_6 = {\"joh\": \"a\", \"jane\": \"b\", \"mike\": \"c\", \"john\": \"d\"}\n    my_dict_7 = {\"e\": \"a\", \"f\": \"b\", \"g\": \"c\", \"h\": \"d\"}\n    my_dict_8 = {\"joh\": \"a\", \"jane\": \"b\", \"mike\": \"c\", \"john\": \"d\"}\n    my_dict_9 = {\"e\": \"a\", \"f\": \"b\", \"g\": \"c\", \"h\": \"d\"}\n    print(my_dict_1 == my_dict_2 == my_dict_3 == my_dict_4 == my_dict_5 == my_dict_6 == my_dict_7 == my_dict_8 == my_dict_9)\n    print(my_dict(my_dict_1))\n    print(my_dict(my_dict_2))\n    print(my_dict(my_dict_3))\n    print(my_dict(my_dict_4))\n    print(my_dict(my_dict_5))\n    print(my_dict(my_dict_6))\n    print(my_dict(my_dict_7))\n    print(my_dict(my_dict_8))\n    print(my_dict(my_dict_9))"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return True if dict1 == {} else False\nprint(my_dict({}))\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = 0\n    for i in range(1, num + 1):\n        catalan += (-1)**i*(2*i - 1)/(i*(i + 1))\n    return catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    res = 0\n    for i in range(0, num):\n        res += catalan_number(i)*catalan_number(num-1-i)\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    return sum([catalan_number(i)*catalan_number(num-i-1) for i in range(num)])\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #[1, 1, 2, 6, 15, 52, 132, 429, 1430, 4862, 16796]\n    \n    if num == 0:\n        return 1\n    \n    n = num\n    cat = 0\n    \n    while n > 0:\n        cat += cat_numerator(n) * cat_denominator(n)\n        n -= 1\n    \n    return cat\n    \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num==1:\n        return 1\n    \n    if num==2:\n        return 2\n    \n    total_catalan_numbers = 0\n    for i in range(num):\n        total_catalan_numbers += catalan_number(i)*catalan_number(num-1-i)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = 1\n    for i in range(1, num+1):\n        result = result*(i+1)/i\n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    result = 0\n    for i in range(num):\n        result += catalan_number(i) * catalan_number(num-i-1)\n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    n = 0\n    res = 0\n    while n < num:\n        res = res + (catalan_number(n) * catalan_number(num-n-1))\n        n += 1\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    x = []\n    for i in range(0, num):\n        x.append(0)\n    x[0] = 1\n    for i in range(1, num):\n        x[i] = 0\n        for j in range(0, i):\n            x[i] = x[i] + x[j] * x[i - j - 1]\n    return x[num - 1]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(0,len(text)):\n        if text[i] == 'ly':\n            # print(text[i])\n            adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_list=[]\n    pattern=re.compile(r'(?<!\\w)ly(?!\\w)')\n    pos=text.find('ly')\n    while pos!= -1:\n        adverb_list.append(pos)\n        pos=text.find('ly', pos+1)\n    return adverb_list\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['to', 'for', 'nor', 'n\\'t', 'that', 'with']\n    positions = []\n    for i in range(len(text)):\n        if text[i] in adverbs and text[i+1] == 'ly':\n            positions.append((i+1, i+1))\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #matches = re.finditer('ly$',text)\n    #for match in matches:\n    #    print(match.start())\n    #    print(match.group())\n    #print(text)\n    #print(len(text))\n    matches = re.finditer('ly$',text,flags=re.IGNORECASE)\n    for match in matches:\n        #print(match.start())\n        #print(match.group())\n        #print(text[match.start()-1])\n        if text[match.start()-1] =='':\n            continue\n        print(match.start())\n        print(match.group())\n        print(text[match.start():match.end()])\n        print('\\n')\n        \ndef find_ly(text):\n    '''\n    Write a function to find all instances of the words \"ly\" in a given string.\n    '''\n    #print(text)\n    #print(len(text))\n    matches = re.finditer('ly$',text,flags=re.IGNORECASE)\n    for match in matches:\n        #print(match.start())\n        #print(match.group())\n        #print(text[match.start()-1])\n        #print(text[match.start()+2])\n        #print(text[match.start()+3])\n        #print(text[match.start()+4])\n        #print(text[match.start()+5])\n        print(match.start())\n        print(match.group())\n        print(text[match.start():match.end()])\n        print('\\n')\n        \ndef find_ly_ly(text):\n    '''\n    Write a function to find all instances of the words \"ly\" in a given string.\n    '''\n    #print(text)\n    #print(len(text))\n    matches = re.finditer('ly$',text,flags=re.IGNORECASE)\n    for match in matches:\n        #print(match.start())\n        #print(match.group())\n        #print(text[match.start()-1])\n        #print(text[match.start()+2])\n        #print(text[match.start()+3])\n        #print(text[match.start()+4])\n        #print(text[match.start()+5])\n        print(match.start())\n        print(match.group())\n        print(text[match.start():match.end()])\n        print('\\n')\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'(ly)')\n    result = regex.finditer(text)\n    list_results = list(result)\n    return list_results\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ad_verbs = []\n    text = re.sub(r'\\s','', text)\n    for i in range(len(text) - 1):\n        if text[i] == 'n\\'t' and text[i + 1] == 't':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] == 'can\\'t' and text[i + 1] == 't':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] =='should\\'ve' and text[i + 1] =='ve':\n            ad_verbs.append(text[i])\n            ad_verbs.append(i + 1)\n        elif text[i] == "
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if (text[i].endswith('ly') and text[i].isupper()):\n            adverbs.append(text[i])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if (text == ''):\n        return None\n    else:\n        adverb_ending = 'ly'\n        pos_list = []\n        for i in range(len(text)):\n            if (text[i] ==''):\n                continue\n            if (text[i] == ',' or text[i] == '.'):\n                continue\n            if (text[i] == ';'):\n                continue\n            if (text[i] == ':'):\n                continue\n            if (text[i] == '\"'):\n                continue\n            if (text[i] == '?'):\n                continue\n            if (text[i] == '!') or (text[i] == '-'):\n                if (text[i] == '!'):\n                    if (text[i+1] ==''):\n                        continue\n                    else:\n                        pos_list.append(i)\n                if (text[i] == '-'):\n                    if (text[i+1] ==''):\n                        continue\n                    else:\n                        pos_list.append(i)\n                continue\n            if (text[i] == '('):\n                continue\n            if (text[i] == ')'):\n                continue\n            if (text[i] == '?'):\n                if (text[i-1] == '.'):\n                    if (text[i-2] ==''):\n                        continue\n                    else:\n                        pos_list.append(i)\n                elif (text[i-1] == ','):\n                    if (text[i-2] ==''):\n                        continue\n                    else:\n                        pos_list.append(i)\n                else:\n                    pos_list.append(i)\n                continue\n            if (text[i] == ','):\n                if (text[i+1] ==''):\n                    continue\n                else:\n                    pos_list.append(i)\n            if (text[i] == '.'):\n                if (text[i+1] ==''):\n                    continue\n                else:\n                    pos_list.append(i)\n            if (text[i] == '!'):\n                if (text[i+1] ==''):\n                    continue\n                else:\n                    pos_list.append(i)\n        if (len(pos_list) == 0):\n            return None\n        else:\n            for i in range(len(pos_list)):\n                if (pos_list[i] < len(text) - 1 and text[pos_list[i]+1] == ','):\n                    pos_list[i] = pos_list[i] + 1\n                    pos_list.pop(i+1)\n            if (len(pos_list) == 0):\n                return None\n            else:\n                for i in range(len(pos_list)):\n                    if (pos_list[i] < len(text) - 1 and text[pos_list[i]+1] == '.'):\n                        pos_list[i] = pos_list[i] + 1\n                        pos_list.pop(i+1)\n                if (len(pos_list) == 0):\n                    return None\n                else:\n                    return pos_list\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall('(?<=ly )ly', text)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #put the regular expression here\n    regex = re.compile(r'ly')\n    text = text.split()\n    for i in range(len(text)):\n        result = regex.search(text[i])\n        if result!= None:\n            return i, result.start(), result.end()\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return []\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda item: item[1],reverse=True)\n    return items[:n]\n    \ndef sort_by_value(items,n):\n    '''"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_price = heapq.nlargest(n,items)\n    print(max_price)\n    \nexpensive_items([('001',2),('002',5),('003',5),('004',4)],2)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Write your code here\n    h = []\n    for i in items:\n        if i['price'] > 500:\n            heapq.heappush(h,i)\n        if len(h) == n:\n            break\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items) < n:\n        raise ValueError(\"Input list must contain more items than required!\")\n    elif n > len(items):\n        raise ValueError(\"Input list must be at least n items long!\")\n    # sort_items = sorted(items, key = lambda x: x[1],reverse = True)\n    sort_items = sorted(items, key = lambda x: x[1], reverse = True)\n    # return list(map(lambda x: x[0],sort_items))[:n]\n    return list(map(lambda x: x[0],sort_items))[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda x: x[1])\n    heap = []\n    for i in range(n):\n        if len(items)!= 0:\n            heapq.heappush(heap,items[0])\n            items.pop(0)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create heap of tuples (price, item)\n    heap = []\n    \n    # Loop through each item and add to heap\n    for item in items:\n        heapq.heappush(heap,(-item[0],item[1]))\n        \n    # Remove items with higher price\n    while len(heap) > n:\n        heapq.heappop(heap)\n    \n    # Return list of expensive items\n    return [i[1] for i in heap]\n    \n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #create a heap of tuples(item,price)\n    expensive_items = []\n    heapq.heapify(expensive_items)\n    for item,price in items:\n        heapq.heappush(expensive_items,(-price,item))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    max_items = []\n    for i in items:\n        if i not in max_items:\n            max_items.append(i)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n    return [heapq.heappop(heap)[1] for _ in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_heap = []\n    for item in items:\n        heapq.heappush(items_heap,(-item[1],item[0]))\n        if len(items_heap) > n:\n            heapq.heappop(items_heap)\n    return items_heap\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:][::-1]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_l = []\n    new_l = l[:n]\n    new_l.extend(l[n+1:])\n    return new_l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(len(l)):\n        if i == n-1:\n            l.append(l[:n])\n            return l[n:]\n        else:\n            l.append(l[i:n])\n            return l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = l\n    return arr[:n], arr[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    i = 0\n    for elem in l:\n        new_list.append(l[i:i+n])\n        i += n\n    new_list.append(l[i:])\n    return new_list\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print('\\nInvalid Input!\\n')\n    else:\n        if n == 0:\n            print('\\nFirst Part: ', l[:n])\n            print('Second Part: ', l[n:])\n        elif n == len(l):\n            print('\\nFirst Part: ', l[:n])\n            print('Second Part: ', l[n:])\n        else:\n            print('\\nFirst Part: ', l[:n])\n            print('Second Part: ', l[n:])\n            print('Third Part: ', l[n+1:])\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        n = n % len(l)\n    if n > len(l):\n        n = n % len(l)\n    if n == 0:\n        return l\n    res = []\n    for i in range(len(l)):\n        if i == n:\n            res.append(l[i])\n            res.append(l[:i])\n    return res\n        \n    \n        \n        "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = int(len(l) / 2)\n    if n == 1:\n        return l[0:mid]\n    return l[mid:len(l)] + split_Arr(l[0:mid], n-1)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if len(listx) > 1:\n        return tuple(listx)\n    return listx[0]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    print(tuplex)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    return set(listx)\n    \n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    dict_l = {}\n    for i in range(len(listx)):\n        dict_l[i] = listx[i]\n    return dict_l\n    \n    \ndef list_dict_v2(listx):\n    '''\n    Write a function to convert a list to a dictionary, using curly braces\n    '''\n    list_d = {listx[i]: listx[i] for i in range(len(listx))}\n    return list_d\n    \n    \ndef list_zip(listx, listy):\n    '''\n    Write a function to concatenate two lists\n    '''\n    return list(zip(listx, listy))\n    \n    \ndef list_sum(listx):\n    '''\n    Write a function to add the items in a list\n    '''\n    return sum(listx)\n    \n    \ndef list_product(listx, listy):\n    '''\n    Write a function to multiply the items in a list\n    '''\n    return listx*listy\n    \n    \ndef list_max(listx):\n    '''\n    Write a function to find the largest item in a list\n    '''\n    return max(listx)\n    \n    \ndef list_min(listx):\n    '''\n    Write a function to find the smallest item in a list\n    '''\n    return min(listx)\n    \n    \ndef list_len(listx):\n    '''\n    Write a function to find the length of a list\n    '''\n    return len(listx)\n    \n    \ndef list_append(listx, item):\n    '''\n    Write a function to append an item to a list\n    '''\n    listx.append(item)\n    \n    \ndef list_insert(listx, index, item):\n    '''\n    Write a function to insert an item to a list at a given index\n    '''\n    listx.insert(index, item)\n    \n    \ndef list_remove(listx, item):\n    '''\n    Write a function to remove an item from a list\n    '''\n    listx.remove(item)\n    \n    \ndef list_appendleft(listx, item):\n    '''\n    Write a function to append an item to a list at the beginning\n    '''\n    listx.appendleft(item)\n    \n    \ndef list_clear(listx):\n    '''\n    Write a function to clear a list\n    '''\n    listx.clear()\n    \n    \ndef list_count(listx, item):\n    '''\n    Write a function to count the number of items in a list\n    '''\n    return listx.count(item)\n    \n    \ndef list_index(listx, item):\n    '''\n    Write a function to find the index of an item in a list\n    '''\n    return listx.index(item)\n    \n    \ndef list_reverse(listx):\n    '''\n    Write a function to reverse a list\n    '''\n    listx.reverse()\n    \n    \ndef list_sort(listx):\n    '''\n    Write a function to sort a list\n    '''\n    listx.sort()\n    \n    \ndef list_pop(listx):\n    '''\n    Write a function to pop an item from a list\n    '''\n    listx.pop()\n    \n    \ndef list_copy(listx):\n    '''\n    Write a function to copy a list\n    '''\n    return listx.copy()\n    \n    \ndef list_insert_sort(listx):\n    '''\n    Write a function to sort a list using insertion sort algorithm\n    '''\n    for i in range(len(listx)):\n        min = i\n        for j in range(i, len(listx)):\n            if listx[j] < listx[min]:\n                min = j\n        listx.insert(min, listx.pop(i))\n    \n    \ndef list_index_sort(listx):\n    '''\n    Write a function to sort a list using index sort algorithm\n    '''\n    listx.sort()\n    \n    \ndef list_count_sort(listx):\n    '''\n    Write a function to sort a list using count sort algorithm\n    '''\n    listx.sort(key = lambda x: (len(x), x))\n    \n    \ndef list_bubble_sort(listx):\n    '''\n    Write a function to sort a list using bubble sort algorithm\n    '''\n    swap = True\n    while swap:\n        swap = False\n        for i in range(len(listx)-1):\n            if listx[i] > listx[i+1]:\n                listx[i], listx[i+1] = listx[i+1], listx[i]\n                swap = True\n    \n    \ndef list_merge_sort(listx):\n    '''\n    Write a function to sort a list using merge sort algorithm\n    '''\n    if len(listx) == 1:\n        return listx\n    \n    mid = int(len(listx)/2)\n    left = listx[:mid]\n    right = listx[mid:]\n    \n    left = list_merge_sort(left)\n    right = list_merge_sort(right)\n    \n    return list_merge(left, right)\n    \n    \ndef list_merge(listx, listy):\n    '''\n    Write a function to merge two sorted lists\n    '''\n    z = []\n    i = j = 0\n    while i < len(listx) and j < len(listy):\n        if listx[i] < listy[j]:\n            z.append(listx[i])\n            i += 1\n        else:\n            z.append(listy[j])\n            j += 1\n    z += listx[i:]\n    z += listy[j:]\n    return z\n    \n    \ndef list_quick_sort(listx, low, high):\n    '''\n    Write a function to sort a list using quick sort algorithm\n    '''\n    if low >= high:\n        return\n    pivot = listx[low]\n    i = low\n    j = high\n    while i < j:\n        while i < j and listx[j] >= pivot:\n            j -= 1\n        listx[i] = listx[j]\n        while i < j and listx[i] <= pivot:\n            i += 1\n        listx[j] = listx[i]\n    listx[i] = pivot\n    list_quick_sort(listx, low, i-1)\n    list_quick_sort(listx, i+1, high)\n    \n    \ndef list_partition(listx, low, high):\n    '''\n    Write a function to partition a list around a specified value\n    '''\n    i = low-1\n    pivot = listx[high]\n    for j in range(low, high):\n        if listx[j] < pivot:\n            i += 1\n            listx[i], listx[j] = listx[j], listx[i]\n    listx[i+1], listx[high] = listx[high], listx[i+1]\n    return i+1\n    \n    \ndef list_selection_sort(listx):\n    '''\n    Write a function to sort a list using selection sort algorithm\n    '''\n    for i in range(len(listx)-1):\n        min = i\n        for j in range(i+1, len(listx)):\n            if listx[j] < listx[min]:\n                min = j\n        listx[min], listx[i] = listx[i], listx[min]\n    \n    \ndef list_selection_sort_v2(listx):\n    '''\n    Write a function to sort a list using selection sort algorithm\n    '''\n    for i in range(len(listx)-1):\n        min = i\n        for j in range"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listtuple = tuple(listx)\n    return listtuple\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n    \n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    print('result: ', tuplex)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_ = max(nums)\n    min_ = min(nums)\n    return max_ - min_\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = -2 ** 32\n    smallest = 2 ** 32\n    for i in nums:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    maxi = -1000000000\n    mini = 1000000000\n    for i in range(len(nums)):\n        if nums[i] > maxi:\n            maxi = nums[i]\n        if nums[i] < mini:\n            mini = nums[i]\n    return maxi - mini\n    # loop through list\n    # take max and min values\n    # return max - min\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \n    \n    \n    '''\n    Write a python function to find the maximum difference between any 2 numbers in a list.\n    '''\n    #Solution 2:\n    \n    def max_diff(nums):\n        max_num = max(nums)\n        min_num = min(nums)\n        return max(max_num - min_num, abs(min_num-max_num))\n    \n    \n    \n    '''\n    Write a python function to find the minimum element in a given array.\n    '''\n    def minimum(nums):\n        return min(nums)\n    \n    \n    '''\n    Write a python function to remove duplicate entries from a given array.\n    '''\n    def remove_duplicates(nums):\n        nums_set = set()\n        for num in nums:\n            if num not in nums_set:\n                nums_set.add(num)\n        return len(nums_set)\n    \n    \n    '''\n    Write a python function to remove elements from a given array.\n    '''\n    def remove(nums, value):\n        return nums.remove(value)\n    \n    \n    '''\n    Write a python function to reverse a given array.\n    '''\n    def reverse_array(nums):\n        return nums[::-1]\n    \n    \n    '''\n    Write a python function to check if a given array is subset of another array.\n    '''\n    def is_subset(arr1, arr2):\n        arr2 = set(arr2)\n        for num in arr1:\n            if num in arr2:\n                return True\n        return False\n    \n    \n    '''\n    Write a python function to remove all the elements from a given array except the first and the last element.\n    '''\n    def remove_mid(nums):\n        nums.pop(0)\n        nums.pop()\n    \n    \n    '''\n    Write a python function to find the number of even numbers in an array.\n    '''\n    def even_num(nums):\n        count = 0\n        for num in nums:\n            if num % 2 == 0:\n                count += 1\n        return count\n    \n    \n    '''\n    Write a python function to check if a given array is palindrome or not.\n    '''\n    def is_palindrome(nums):\n        return nums == nums[::-1]\n    \n    \n    '''\n    Write a python function to sort a given array of numbers in increasing order.\n    '''\n    def increasing_order(nums):\n        nums.sort()\n    \n    \n    '''\n    Write a python function to merge 2 given sorted arrays.\n    '''\n    def merge_sorted_arrays(nums1, nums2):\n        l1 = len(nums1)\n        l2 = len(nums2)\n        merged_arr = []\n        i = 0\n        j = 0\n        \n        while i < l1 and j < l2:\n            if nums1[i] < nums2[j]:\n                merged_arr.append(nums1[i])\n                i += 1\n            else:\n                merged_arr.append(nums2[j])\n                j += 1\n        \n        if i == l1:\n            merged_arr.extend(nums2[j:])\n        else:\n            merged_arr.extend(nums1[i:])\n        return merged_arr\n    \n    \n    '''\n    Write a python function to swap two given numbers in a list.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    \n    '''\n    Write a python function to check if a given array is a mountain or not.\n    '''\n    def is_mountain(nums):\n        n = len(nums)\n        if n == 1:\n            return True\n        for i in range(1, n-1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                return True\n        return False\n    \n    \n    '''\n    Write a python function to rotate a given array by some number of places.\n    '''\n    def rotate(nums, k):\n        n = len(nums)\n        k = k % n\n        nums[:] = nums[n-k:] + nums[:n-k]\n    \n    \n    '''\n    Write a python function to find the first occurrence of a target value in a given sorted array. Return -1 if the target is not present in the array.\n    '''\n    def first_occ(nums, target):\n        l = len(nums)\n        if l == 0:\n            return -1\n        start = 0\n        end = l-1\n        while start <= end:\n            mid = start + (end-start)//2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return -1\n    \n    \n    '''\n    Write a python function to find the last occurrence of a target value in a given sorted array. Return -1 if the target is not present in the array.\n    '''\n    def last_occ(nums, target):\n        l = len(nums)\n        if l == 0:\n            return -1\n        start = 0\n        end = l-1\n        while start <= end:\n            mid = start + (end-start)//2\n            if nums[mid] == target:\n                end = mid - 1\n            elif nums[mid] < target:\n                start = mid + 1\n            else:\n                end = mid - 1\n        if nums[end] == target:\n            return end\n        else:\n            return -1\n    \n    \n    '''\n    Write a python function to find the first index of a target value in a given sorted array. Return -1 if the target is not present in the array.\n    '''\n    def first_index(nums, target):\n        l = len(nums)\n        if l == 0:\n            return -1\n        start = 0\n        end = l-1\n        while start <= end:\n            mid = start + (end-start)//2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                start = mid + 1\n            else:\n                end = mid - 1\n        if nums[start] == target:\n            return start\n        else:\n            return -1\n    \n    \n    '''\n    Write a python function to find the last index of a target value in a given sorted array. Return -1 if the target is not present in the array.\n    '''\n    def last_index(nums, target):\n        l = len(nums)\n        if l == 0:\n            return -1\n        start = 0\n        end = l-1\n        while start <= end:\n            mid = start + (end-start)//2\n            if nums[mid] == target:\n                end = mid - 1\n            elif nums[mid] < target:\n                start = mid + 1\n            else:\n                end = mid - 1\n        if nums[end] == target:\n            return end\n        else:\n            return -1\n    \n    \n    '''\n    Write a python function to find the first index of a target value in a given sorted array. Return -1 if the target is not present in the array.\n    '''\n    def first_index(nums, target):\n        l = len(nums)\n        if l == "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(min(nums) - max(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    import heapq\n    \n    \n    def min_max_heap(array):\n        '''\n        using min heap\n        '''\n        min_heap = []\n        for i in array:\n            heapq.heappush(min_heap, i)\n        print(min_heap)\n        for i in range(len(min_heap) - 1):\n            heapq.heappush(min_heap, min_heap.pop(0))\n        return min_heap\n        \n    def min_max_heap_alternate(array):\n        '''\n        using min heap\n        '''\n        min_heap = []\n        for i in array:\n            heapq.heappush(min_heap, -1 * i)\n        for i in range(len(min_heap) - 1):\n            heapq.heappush(min_heap, -1 * heapq.heappop(min_heap))\n        return min_heap\n    \n    def max_min_heap(array):\n        '''\n        using min heap\n        '''\n        max_heap = []\n        for i in array:\n            heapq.heappush(max_heap, -1 * i)\n        for i in range(len(max_heap) - 1):\n            heapq.heappush(max_heap, -1 * heapq.heappop(max_heap))\n        return max_heap\n    \n    def max_min_heap_alternate(array):\n        '''\n        using min heap\n        '''\n        max_heap = []\n        for i in array:\n            heapq.heappush(max_heap, -1 * i)\n        for i in range(len(max_heap) - 1):\n            heapq.heappush(max_heap, -1 * heapq.heappop(max_heap))\n        return max_heap\n        \n    def min_max_stack(array):\n        '''\n        using min heap\n        '''\n        min_heap = []\n        for i in array:\n            heapq.heappush(min_heap, -1 * i)\n        return -1 * heapq.heappop(min_heap)\n    \n    def min_max_stack_alternate(array):\n        '''\n        using min heap\n        '''\n        min_heap = []\n        for i in array:\n            heapq.heappush(min_heap, -1 * i)\n        return -1 * heapq.heappop(min_heap)\n        \n    def max_min_stack(array):\n        '''\n        using min heap\n        '''\n        max_heap = []\n        for i in array:\n            heapq.heappush(max_heap, -1 * i)\n        return -1 * heapq.heappop(max_heap)\n        \n    def max_min_stack_alternate(array):\n        '''\n        using min heap\n        '''\n        max_heap = []\n        for i in array:\n            heapq.heappush(max_heap, -1 * i)\n        return -1 * heapq.heappop(max_heap)\n    \n    def min_max_heap_with_max_min_pop_alternate(array):\n        '''\n        using min heap\n        '''\n        min_heap = []\n        for i in array:\n            heapq.heappush(min_heap, -1 * i)\n        while len(min_heap) > 1:\n            heapq.heappop(min_heap)\n            heapq.heappop(min_heap)\n        return min_heap[0]\n    \n    def max_min_heap_with_max_min_pop_alternate(array):\n        '''\n        using min heap\n        '''\n        max_heap = []\n        for i in array:\n            heapq.heappush(max_heap, -1 * i)\n        while len(max_heap) > 1:\n            heapq.heappop(max_heap)\n            heapq.heappop(max_heap)\n        return max_heap[0]\n    \n    def min_max_heap_with_max_min_pop_alternate2(array):\n        '''\n        using min heap\n        '''\n        min_heap = []\n        for i in array:\n            heapq.heappush(min_heap, -1 * i)\n        while len(min_heap) > 1:\n            heapq.heappop(min_heap)\n            heapq.heappop(min_heap)\n        return min_heap[0]\n    \n    def max_min_heap_with_max_min_pop_alternate2(array):\n        '''\n        using min heap\n        '''\n        max_heap = []\n        for i in array:\n            heapq.heappush(max_heap, -1 * i)\n        while len(max_heap) > 1:\n            heapq.heappop(max_heap)\n            heapq.heappop(max_heap)\n        return max_heap[0]\n    \n    def min_max_heap_with_max_min_pop_alternate3(array):\n        '''\n        using min heap\n        '''\n        min_heap = []\n        for i in array:\n            heapq.heappush(min_heap, -1 * i)\n        while len(min_heap) > 1:\n            heapq.heappop(min_heap)\n            heapq.heappop(min_heap)\n        return min_heap[0]\n    \n    def max_min_heap_with_max_min_pop_alternate3(array):\n        '''\n        using min heap\n        '''\n        max_heap = []\n        for i in array:\n            heapq.heappush(max_heap, -1 * i)\n        while len(max_heap) > 1:\n            heapq.heappop(max_heap)\n            heapq.heappop(max_heap)\n        return max_heap[0]\n    \n    def max_min_heap_with_max_min_pop_alternate4(array):\n        '''\n        using min heap\n        '''\n        min_heap = []\n        for i in array:\n            heapq.heappush(min_heap, -1 * i)\n        while len(min_heap) > 1:\n            heapq.heappop(min_heap)\n            heapq.heappop(min_heap)\n        return min_heap[0]\n    \n    def max_min_heap_with_max_min_pop_alternate4(array):\n        '''\n        using min heap\n        '''\n        max_heap = []\n        for i in array:\n            heapq.heappush(max_heap, -1 * i)\n        while len(max_heap) > 1:\n            heapq.heappop(max_heap)\n            heapq.heappop(max_heap)\n        return max_heap[0]\n    \n    def max_min_heap_with_max_min_pop_alternate5(array):\n        '''\n        using min heap\n        '''\n        min_heap = []\n        for i in array:\n            heapq.heappush(min_heap, -1 * i)\n        while len(min_heap) > 1:\n            heapq.heappop(min_heap)\n            heapq.heappop(min_heap)\n        return min_heap[0]\n    \n    def max_min_heap_with_max_min_pop_alternate5(array):\n        '''\n        using min heap\n        '''\n        max_heap = []\n        for i in array:\n            heapq.heappush(max_heap, -1 "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = a\n    y = b\n    while x**2!= y:\n        x = x+1\n        if x**2 > y:\n            break\n    print(x)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if a is less than b\n    if a < b:\n        temp = a\n        a = b\n        b = temp\n    # check if a is not a perfect square\n    if a < b:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    l = []\n    for i in range(a, b + 1):\n        if i**2 == i:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if number is positive\n    if a > b:\n        a, b = b, a\n    \n    # start from b\n    if b - a == 1:\n        if a % 2 == 0:\n            return a\n        else:\n            return a - 1\n    else:\n        while a <= b:\n            if a**2 == b:\n                return a\n            else:\n                a += 1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    answer = []\n    for i in range(a, b+1):\n        if i == i**2:\n            answer.append(i)\n    return answer\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def sqrt_2(x):\n        '''\n        Calculate the square root of x, where x >= 0\n        '''\n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 2\n        if x == 4:\n            return 2\n        if x == 5:\n            return 3\n        if x == 6:\n            return 3\n        if x == 7:\n            return 4\n        if x == 8:\n            return 4\n        if x == 9:\n            return 5\n        if x == 10:\n            return 5\n        if x == 11:\n            return 6\n        if x == 12:\n            return 6\n        if x == 13:\n            return 7\n        if x == 14:\n            return 7\n        if x == 15:\n            return 8\n        if x == 16:\n            return 8\n        if x == 17:\n            return 9\n        if x == 18:\n            return 9\n        if x == 19:\n            return 10\n        if x == 20:\n            return 10\n        if x == 21:\n            return 11\n        if x == 22:\n            return 11\n        if x == 23:\n            return 12\n        if x == 24:\n            return 12\n        if x == 25:\n            return 13\n        if x == 26:\n            return 13\n        if x == 27:\n            return 14\n        if x == 28:\n            return 14\n        if x == 29:\n            return 15\n        if x == 30:\n            return 15\n        if x == 31:\n            return 16\n        if x == 32:\n            return 16\n        if x == 33:\n            return 17\n        if x == 34:\n            return 17\n        if x == 35:\n            return 18\n        if x == 36:\n            return 18\n        if x == 37:\n            return 19\n        if x == 38:\n            return 19\n        if x == 39:\n            return 20\n        if x == 40:\n            return 20\n        if x == 41:\n            return 21\n        if x == 42:\n            return 21\n        if x == 43:\n            return 22\n        if x == 44:\n            return 22\n        if x == 45:\n            return 23\n        if x == 46:\n            return 23\n        if x == 47:\n            return 24\n        if x == 48:\n            return 24\n        if x == 49:\n            return 25\n        if x == 50:\n            return 25\n        if x == 51:\n            return 26\n        if x == 52:\n            return 26\n        if x == 53:\n            return 27\n        if x == 54:\n            return 27\n        if x == 55:\n            return 28\n        if x == 56:\n            return 28\n        if x == 57:\n            return 29\n        if x == 58:\n            return 29\n        if x == 59:\n            return 30\n        if x == 60:\n            return 30\n        if x == 61:\n            return 31\n        if x == 62:\n            return 31\n        if x == 63:\n            return 32\n        if x == 64:\n            return 32\n        if x == 65:\n            return 33\n        if x == 66:\n            return 33\n        if x == 67:\n            return 34\n        if x == 68:\n            return 34\n        if x == 69:\n            return 35\n        if x == 70:\n            return 35\n        if x == 71:\n            return 36\n        if x == 72:\n            return 36\n        if x == 73:\n            return 37\n        if x == 74:\n            return 37\n        if x == 75:\n            return 38\n        if x == 76:\n            return 38\n        if x == 77:\n            return 39\n        if x == 78:\n            return 39\n        if x == 79:\n            return 40\n        if x == 80:\n            return 40\n        if x == 81:\n            return 41\n        if x == 82:\n            return 41\n        if x == 83:\n            return 42\n        if x == 84:\n            return 42\n        if x == 85:\n            return 43\n        if x == 86:\n            return 43\n        if x == 87:\n            return 44\n        if x == 88:\n            return 44\n        if x == 89:\n            return 45\n        if x == 90:\n            return 45\n        if x == 91:\n            return 46\n        if x == 92:\n            return 46\n        if x == 93:\n            return 47\n        if x == 94:\n            return 47\n        if x == 95:\n            return 48\n        if x == 96:\n            return 48\n        if x == 97:\n            return 49\n        if x == 98:\n            return 49\n        if x == 99:\n            return 50\n        if x == 100:\n            return 50\n        if x == 101:\n            return 51\n        if x == 102:\n            return 51\n        if x == 103:\n            return 52\n        if x == 104:\n            return 52\n        if x == 105:\n            return 53\n        if x == 106:\n            return 53\n        if x == 107:\n            return 54\n        if x == 108:\n            return 54\n        if x == 109:\n            return 55\n        if x == 110:\n            return 55\n        if x == 111:\n            return 56\n        if x == 112:\n            return 56\n        if x == 113:\n            return 57\n        if x == 114:\n            return 57\n        if x == 115:\n            return 58\n        if x == 116:\n            return 58\n        if x == 117:\n            return 59\n        if x == 118:\n            return 59\n        if x == 119:\n            return 60\n        if x == 120:\n            return 60\n        if x == 121:\n            return 61\n        if x == 122:\n            return 61\n        if x == 123:\n            return 62\n        if x == 124:\n            return 62\n        if x == 125:\n            return 63\n        if x == 126:\n            return 63\n        if x == 127:\n            return 64\n        if x == 128:\n            return 64\n        if x == 129:\n            return 65\n        if x == 130:\n            return 65\n        if x == 131:\n            return 66\n        if x == 132:\n            return 66\n        if x == 133:\n            return 67\n        if x == 134:\n            return 67\n        if x == 135:\n            return 68\n        if x == 136:\n            return 68\n        if x == 137:\n            return 69\n        if x == 138:\n            return 69\n        if x == 139:\n            return 70\n        if x == 140:\n            return 70\n        if x == 141:\n            return 71\n        if x == 142:\n            return 71\n        if x == 143:\n            return 72\n        if x == 144:\n            return 72\n        if x == 145:\n            return 73\n        if x == 146:\n            return 73\n        if x == 147:\n            return 74\n        if x == 148:\n            return 74\n        if x == 149:\n            return 75\n        if x == 150:\n            return 75\n        if x == 151:\n            return 76\n        if x == 152:\n            return 76\n        if x == 153:\n            return 77\n        if x == 154:\n            return 77\n        if x == 155:\n            return 78\n        if x == 156:\n            return 78\n        if x == 157:\n            return 79\n        if x == 158:\n            return 79\n        if x == 159:\n            return 80\n        if x == 160:\n            return 80\n        if x == 161:\n            return 81\n        if x == 162:\n            return 81\n        if x == 163:\n            return 82\n        if x == 164:\n            return 82\n        if x == 165:\n            return 83\n        if x == 166:\n            return 83\n        if x == 167:\n            return 84\n        if x == 168:\n            return 84\n        if x == 169:\n            return 85\n        if x == 170:\n            return 85\n        if x == 171:\n            return 86\n        if x == 172:\n            return 86\n        if x == 173:\n            return 87\n        if x == 174:\n            return 87\n        if x == 175:\n            return 88\n        if x == 176:\n            return 88\n        if x == 177:\n            return 89\n        if x == 178:\n            return 89\n        if x == 179:\n            return 90\n        i"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b + 1):\n        if perfect_square(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return (a**2) == (b**2)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = []\n    for i in range(a,b+1):\n        if (i**0.5).is_integer():\n            x.append(i)\n    return x\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return []\n    res = []\n    for i in range(a, b+1):\n        if i*i == i:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius=complex(x,y)\n    return radius.real, radius.imag\ndef cartesian_rect(x,y,z=0):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    radius=math.sqrt(x**2+y**2)\n    angle=math.atan(y/x)\n    return radius, angle\ndef polar_rect_rotate(angle):\n    '''\n    Write a function to rotate a complex number around the origin by an angle in radians.\n    '''\n    radian=angle\n    real=math.cos(radian)\n    imaginary=math.sin(radian)\n    return real, imaginary\ndef cartesian_rect_rotate(radius, angle):\n    '''\n    Write a function to rotate a complex number around the origin by an angle in radians.\n    '''\n    radian=angle\n    real=math.cos(radian)*radius\n    imaginary=math.sin(radian)*radius\n    return real, imaginary\ndef polar_rect_scale(x,y,z=0):\n    '''\n    Write a function to scale a complex number by a scalar value.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    return radius.real, radius.imag\ndef cartesian_rect_scale(x,y,z=0):\n    '''\n    Write a function to scale a complex number by a scalar value.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    return radius.real, radius.imag\ndef polar_rect_translate(x,y,z=0):\n    '''\n    Write a function to translate a complex number by a scalar value.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    return radius.real, radius.imag\ndef cartesian_rect_translate(x,y,z=0):\n    '''\n    Write a function to translate a complex number by a scalar value.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    return radius.real, radius.imag\ndef polar_rect_rotate_translate(angle, x, y, z=0):\n    '''\n    Write a function to translate and rotate a complex number by an angle in radians, then scale and translate.\n    '''\n    angle=complex(angle)\n    radius=complex(x,y)\n    radius=radius*z\n    real=math.cos(angle)*radius.real-math.sin(angle)*radius.imag\n    imaginary=math.sin(angle)*radius.real+math.cos(angle)*radius.imag\n    return real, imaginary\ndef cartesian_rect_rotate_translate(radius, angle, x, y, z=0):\n    '''\n    Write a function to translate and rotate a complex number by an angle in radians, then scale and translate.\n    '''\n    angle=complex(angle)\n    real=math.cos(angle)*radius.real-math.sin(angle)*radius.imag\n    imaginary=math.sin(angle)*radius.real+math.cos(angle)*radius.imag\n    return real, imaginary\ndef polar_rect_rotate_translate_scale(angle, x, y, z=0):\n    '''\n    Write a function to translate and rotate a complex number by an angle in radians, then scale and translate.\n    '''\n    angle=complex(angle)\n    radius=complex(x,y)\n    radius=radius*z\n    real=math.cos(angle)*radius.real-math.sin(angle)*radius.imag\n    imaginary=math.sin(angle)*radius.real+math.cos(angle)*radius.imag\n    return real, imaginary\ndef cartesian_rect_rotate_translate_scale(radius, angle, x, y, z=0):\n    '''\n    Write a function to translate and rotate a complex number by an angle in radians, then scale and translate.\n    '''\n    angle=complex(angle)\n    real=math.cos(angle)*radius.real-math.sin(angle)*radius.imag\n    imaginary=math.sin(angle)*radius.real+math.cos(angle)*radius.imag\n    return real, imaginary\ndef polar_rect_rotate_translate_scale_move(angle, x, y, z=0):\n    '''\n    Write a function to translate and rotate a complex number by an angle in radians, then scale and translate.\n    '''\n    angle=complex(angle)\n    radius=complex(x,y)\n    radius=radius*z\n    real=math.cos(angle)*radius.real-math.sin(angle)*radius.imag\n    imaginary=math.sin(angle)*radius.real+math.cos(angle)*radius.imag\n    return real, imaginary\ndef cartesian_rect_rotate_translate_scale_move(radius, angle, x, y, z=0):\n    '''\n    Write a function to translate and rotate a complex number by an angle in radians, then scale and translate.\n    '''\n    angle=complex(angle)\n    real=math.cos(angle)*radius.real-math.sin(angle)*radius.imag\n    imaginary=math.sin(angle)*radius.real+math.cos(angle)*radius.imag\n    return real, imaginary\ndef polar_rect_scale_translate(x,y,z=0):\n    '''\n    Write a function to scale and translate a complex number by a scalar value.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    return radius.real, radius.imag\ndef cartesian_rect_scale_translate(x,y,z=0):\n    '''\n    Write a function to scale and translate a complex number by a scalar value.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    return radius.real, radius.imag\ndef polar_rect_scale_translate_rotate(x,y,angle,z=0):\n    '''\n    Write a function to scale and translate a complex number by a scalar value, then rotate around the origin by an angle in radians.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    real=math.cos(angle)*radius.real-math.sin(angle)*radius.imag\n    imaginary=math.sin(angle)*radius.real+math.cos(angle)*radius.imag\n    return real, imaginary\ndef cartesian_rect_scale_translate_rotate(x,y,angle,z=0):\n    '''\n    Write a function to scale and translate a complex number by a scalar value, then rotate around the origin by an angle in radians.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    real=math.cos(angle)*radius.real-math.sin(angle)*radius.imag\n    imaginary=math.sin(angle)*radius.real+math.cos(angle)*radius.imag\n    return real, imaginary\ndef polar_rect_scale_translate_rotate_rotate(x,y,angle,angle2,z=0):\n    '''\n    Write a function to scale and translate a complex number by a scalar value, then rotate around the origin by an angle in radians, then rotate by an angle in radians.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    real=math.cos(angle)*radius.real-math.sin(angle)*radius.imag\n    imaginary=math.sin(angle)*radius.real+math.cos(angle)*radius.imag\n    angle_real=math.cos(angle2)*radius.real-math.sin(angle2)*radius.imag\n    angle_imaginary=math.sin(angle2)*radius.real+math.cos(angle2)*radius.imag\n    return real, imaginary, angle_real, angle_imaginary\ndef cartesian_rect_scale_translate_rotate_rotate(x,y,angle,angle2,z=0):\n    '''\n    Write a function to scale and translate a complex number by a scalar value, then rotate around the origin by an angle in radians, then rotate by an angle in radians.\n    '''\n    radius=complex(x,y)\n    radius=radius*z\n    real=math.cos(angle)*radius.real-math.sin(angle)"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    x,y = complex(x,y)\n    radius = x**2 + y**2\n    angle = cmath.phase(x)\n    return radius,angle\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x*x+y*y\n    phi = cmath.acos(x)\n    if r == 0:\n        return ((phi*100)/phi)\n    return ((phi*100)/r)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pi = 3.141592653589793\n    r = y**2 + x**2\n    angle = cmath.acos(x/r)\n    return (int(r*(cos(angle))),int(r*(sin(angle))))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x)\n    return (r*cmath.cos(theta),r*cmath.sin(theta))\n    \ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x)\n    return (r,theta)\n    \ndef rect_polar_mult(a,b):\n    '''\n    Write a function to multiply two rectangles with polar coordinates.\n    '''\n    (x1,y1) = a\n    (x2,y2) = b\n    r1 = cmath.sqrt(x1**2+y1**2)\n    r2 = cmath.sqrt(x2**2+y2**2)\n    (x,y) = (x1*r2/r1,y1*r2/r1)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_r,y_r = complex(x,y)**2\n    return (x_r,y_r)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(complex(x,y))\n    a=r.real\n    b=r.imag\n    return a,b\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(y/r)\n    return theta, r\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    theta=cmath.atan2(y,x)\n    x0=r*cmath.cos(theta)\n    y0=r*cmath.sin(theta)\n    return x0,y0\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cos(y),y*sin(y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return y*sin(x)/x,cmath.sqrt(y*y-x*x)\ndef removenan(list):\n    '''\n    Write a function to remove all the NaN elements from a list.\n    '''\n    return [i for i in list if not isnan(i)]\ndef isnan(x):\n    '''\n    Write a function to determine if x is NaN.\n    '''\n    return x!= x\ndef removenanlist(list):\n    '''\n    Write a function to remove all the NaN elements from a list.\n    '''\n    for i in range(len(list)):\n        if isnan(list[i]):\n            list.pop(i)\n            break\n    return list\ndef findmax(list):\n    '''\n    Write a function to find the maximum of a list.\n    '''\n    max_num = 0\n    for i in list:\n        if i > max_num:\n            max_num = i\n    return max_num\ndef findmin(list):\n    '''\n    Write a function to find the minimum of a list.\n    '''\n    min_num = list[0]\n    for i in list:\n        if i < min_num:\n            min_num = i\n    return min_num\ndef print_solution(ans_list):\n    '''\n    Write a function to print the solution.\n    '''\n    for i in range(len(ans_list)):\n        print(\"x\"+str(i+1),ans_list[i][0])\n        print(\"y\"+str(i+1),ans_list[i][1])\ndef find_roots(x1,x2,y1,y2,s):\n    '''\n    Write a function to find the roots.\n    '''\n    def func_p(p,x,y):\n        return (y-p*x)/(1-p*p)\n    p1=func_p(x1,x1,y1)\n    p2=func_p(x2,x2,y2)\n    if p1==p2:\n        print(\"There is no real roots in this equation.\")\n    elif p1==0 and p2!=0:\n        print(\"There are two roots at infinity\")\n    else:\n        root_list=[]\n        root_list.append(complex(0,-p1))\n        root_list.append(complex(0,-p2))\n        root_list.append(complex(p1,-y1))\n        root_list.append(complex(p2,-y2))\n        for i in root_list:\n            if s==\"odd\":\n                if i.imag!=0:\n                    root_list.remove(i)\n            elif s==\"even\":\n                if i.imag==0:\n                    root_list.remove(i)\n        for i in root_list:\n            print(i)\ndef find_roots_oct(x1,x2,y1,y2,s):\n    '''\n    Write a function to find the roots.\n    '''\n    def func_p(p,x,y):\n        return (y-p*x)/(1-p*p)\n    p1=func_p(x1,x1,y1)\n    p2=func_p(x2,x2,y2)\n    if p1==p2:\n        print(\"There is no real roots in this equation.\")\n    elif p1==0 and p2!=0:\n        print(\"There are two roots at infinity\")\n    else:\n        root_list=[]\n        root_list.append(complex(0,-p1))\n        root_list.append(complex(0,-p2))\n        root_list.append(complex(p1,-y1))\n        root_list.append(complex(p2,-y2))\n        for i in root_list:\n            if s==\"odd\":\n                if i.imag!=0:\n                    root_list.remove(i)\n            elif s==\"even\":\n                if i.imag==0:\n                    root_list.remove(i)\n        for i in root_list:\n            if i.imag==0:\n                print(i)\ndef find_solutions(x,y):\n    '''\n    Write a function to find the roots.\n    '''\n    def func_p(p,x,y):\n        return (y-p*x)/(1-p*p)\n    p1=func_p(x,x,y)\n    p2=func_p(x,x,-y)\n    if p1==p2:\n        print(\"There is no real roots in this equation.\")\n    elif p1==0 and p2!=0:\n        print(\"There are two roots at infinity\")\n    else:\n        root_list=[]\n        root_list.append(complex(0,-p1))\n        root_list.append(complex(0,-p2))\n        root_list.append(complex(p1,-y))\n        root_list.append(complex(p2,-y))\n        for i in root_list:\n            if i.imag!=0:\n                root_list.remove(i)\n        for i in root_list:\n            print(i)\ndef find_solutions_oct(x,y):\n    '''\n    Write a function to find the roots.\n    '''\n    def func_p(p,x,y):\n        return (y-p*x)/(1-p*p)\n    p1=func_p(x,x,y)\n    p2=func_p(x,x,-y)\n    if p1==p2:\n        print(\"There is no real roots in this equation.\")\n    elif p1==0 and p2!=0:\n        print(\"There are two roots at infinity\")\n    else:\n        root_list=[]\n        root_list.append(complex(0,-p1))\n        root_list.append(complex(0,-p2))\n        root_list.append(complex(p1,-y))\n        root_list.append(complex(p2,-y))\n        for i in root_list:\n            if i.imag!=0:\n                root_list.remove(i)\n        for i in root_list:\n            print(i)\ndef find_solutions_oct(x,y):\n    '''\n    Write a function to find the roots.\n    '''\n    def func_p(p,x,y):\n        return (y-p*x)/(1-p*p)\n    p1=func_p(x,x,y)\n    p2=func_p(x,x,-y)\n    if p1==p2:\n        print(\"There is no real roots in this equation.\")\n    elif p1==0 and p2!=0:\n        print(\"There are two roots at infinity\")\n    else:\n        root_list=[]\n        root_list.append(complex(0,-p1))\n        root_list.append(complex(0,-p2))\n        root_list.append(complex(p1,-y))\n        root_list.append(complex(p2,-y))\n        for i in root_list:\n            if i.imag!=0:\n                root_list.remove(i)\n        for i in root_list:\n            print(i)\ndef nth_root(x,n):\n    '''\n    Write a function to find the nth root.\n    '''\n    root_list=[]\n    root_list.append(complex(0,-x))\n    root_list.append(complex(0,-x))\n    root_list.append(complex(x,-y))\n    root_list.append(complex(x,-y))\n    for i in root_list:\n        if i.imag!=0:\n            root_list.remove(i)\n    for i in root_list:\n        print(i)\ndef nth_root_oct(x,n):\n    '''\n    Write a function to find the nth root.\n    '''\n    root_list=[]\n    root_list.append(complex(0,-x)"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    last = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = last\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #takes a list as an argument\n    #returns a list with the first and last items swapped\n    #for i in range(len(newList)-1, -1, -1):\n        #newList[i], newList[0] = newList[0], newList[i]\n    #return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.pop()\n    newList.pop(0)\n    return newList\nprint(swap_List([1,2,3,4,5,6,7,8,9])) \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    newList.insert(0,a)\n    return newList\n    \ndef swap_List_3(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    return newList\n    \ndef swap_List_4(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.pop(0)\n    newList.pop()\n    return newList\n    \ndef swap_List_5(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList[0]\n    b = newList[-1]\n    newList[0] = b\n    newList[-1] = a\n    return newList\n    \ndef swap_List_6(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = a\n    return newList\n    \ndef swap_List_7(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    b = newList.pop()\n    newList.insert(0,a)\n    newList.insert(0,b)\n    return newList\n    \ndef swap_List_8(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    b = newList.pop()\n    newList.insert(len(newList)-1,a)\n    newList.insert(0,b)\n    return newList\n    \ndef swap_List_9(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef swap_List_10(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    newList.insert(0,a)\n    return newList\n    \ndef swap_List_11(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    return newList\n    \ndef swap_List_12(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    a = newList[0]\n    newList.pop(0)\n    newList.append(a)\n    return newList\n    \ndef swap_List_13(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[::-1]\n    a = newList.pop(0)\n    newList.append(a)\n    return newList\n    \ndef swap_List_14(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.append(a)\n    return newList\n    \ndef swap_List_15(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.insert(0,a)\n    return newList\n    \ndef swap_List_16(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.insert(len(newList)-1,a)\n    return newList\n    \ndef swap_List_17(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef swap_List_18(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    newList.append(a)\n    return newList\n    \ndef swap_List_19(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.insert(0,a)\n    return newList\n    \ndef swap_List_20(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    newList.insert(len(newList)-1,a)\n    return newList\n    \ndef swap_List_21(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.insert(0,a)\n    return newList\n    \ndef swap_List_22(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.insert(len(newList)-1,a)\n    return newList\n    \ndef swap_List_23(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    newList.insert(0,a)\n    return newList\n    \ndef swap_List_24(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    newList.insert(len(newList)-1,a)\n    return newList\n    \ndef swap_List_25(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.append(a)\n    return newList\n    \ndef swap_List_26(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    newList.append(a)\n    return newList\n    \ndef swap_List_27(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.insert(len(newList)-1,a)\n    return newList\n    \ndef swap_List_28(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.insert(0,a)\n    return newList\n    \ndef swap_List_29(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    newList.insert(0,a)\n    return newList\n    \ndef swap_List_30(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.insert(len(newList)-1,a)\n    return newList\n    \ndef swap_List_31(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop()\n    newList.insert(0,a)\n    return newList\n    \ndef swap_List_32(newList):\n    '''\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = [8,9,7,6,5,4]\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    \n    \n    \nswap_List(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    List=newList\n    List[0],List[-1]=List[-1],List[0]\n    return List\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #code here\n    x=newList.pop()\n    y=newList.pop(0)\n    newList.append(y)\n    newList.insert(0,x)\n    return newList\n    "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    x = len(newList)\n    newList[0], newList[x-1] = newList[x-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[len(newList)-1]= newList[len(newList)-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        return newList[-1] + newList[1:-1] + newList[0]\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #Iterative Approach\n    # def binomialCoeff(n,k):\n    #     prod=1\n    #     if k==0:\n    #         return 1\n    #     for i in range(k,n):\n    #         prod*=(i+1)\n    #     return prod\n    #\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     return(n*(n-1)/k)\n    #\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0:\n    #         return 1\n    #     else:\n    #         if k==1:\n    #             return n\n    #         else:\n    #             return (n*(n-1))/(k*(k-1))\n    #             \n    \n    #Recursive Approach\n    # def binomialCoeff(n,k):\n    #     if k==0:\n    #         return 1\n    #     elif k==1:\n    #         return n\n    #     else:\n    #         return (n*(n-1))/(k*(k-1))\n    # \n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0:\n    #         return 1\n    #     else:\n    #         if k==1:\n    #             return n\n    #         else:\n    #             return binomialCoeff(n,k-1) + binomialCoeff(n-1,k-1)\n    # \n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if n==k or k==0:\n    #         return 1\n    #     else:\n    #         return binomialCoeff(n,k-1) + binomialCoeff(n-1,k-1)\n    # \n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if n==k or k==0:\n    #         return 1\n    #     else:\n    #         return binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k)\n    # \n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or n==k:\n    #         return 1\n    #     else:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or k==1 or n==k:\n    #         return 1\n    #     else:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or k==1 or n==k:\n    #         return 1\n    #     elif k>1:\n    #         if k%2==0:\n    #             return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #         elif k%2!=0:\n    #             return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k-2)\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or k==1 or n==k:\n    #         return 1\n    #     elif k%2==0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #     elif k%2!=0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k-2)\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or k==1 or n==k:\n    #         return 1\n    #     if k%2==0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #     elif k%2!=0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k-2)\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or k==1 or n==k:\n    #         return 1\n    #     if k%2==0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #     elif k%2!=0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k-2)\n    #\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or k==1 or n==k:\n    #         return 1\n    #     if k%2==0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #     elif k%2!=0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k-2)\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or k==1 or n==k:\n    #         return 1\n    #     if k%2==0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #     elif k%2!=0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k-2)\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or k==1 or n==k:\n    #         return 1\n    #     if k%2==0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #     elif k%2!=0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k-2)\n    #\n    #\n    #\n    # def binomialCoeff(n,k):\n    #     if k==0 or k==1 or n==k:\n    #         return 1\n    #     if k%2==0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1)\n    #     elif k%2!=0:\n    #         return binomialCoeff(n-1,k) + binomialCoeff(n-1,k-1) + binomialCoef"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 0\n    for i in range(n+1):\n        res += (1/i)**k\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    Coeff=[]\n    coeff = [1]\n    while len(coeff) < n:\n        #for i in range(1,k+1):\n        for i in range(1,k):\n            coeff.append(coeff[i-1]+coeff[i])\n            #print(coeff[i], coeff[i-1])\n        k+=1\n    return coeff[k-1]\n        \ndef binomial_Factorial(n,k): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    from math import factorial\n    return factorial(n)//(factorial(k)//factorial(n-k))\n    \ndef Factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*Factorial(n-1)\n        \ndef exp_Factorial(x,n):\n    '''\n    Write a python function to compute the exponential of a given number, n.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x*exp_Factorial(x-1,n)\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    return 1 if n < 2 else n*factorial(n-1)\n    \ndef Fibonacci(n): \n    '''\n    Write a python function to find the nth term of the Fibonacci sequence.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n        \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth term of the Fibonacci sequence.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits in the given number.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n    \ndef get_power_of_two(n):\n    '''\n    Write a python function to get the power of 2 of a given number.\n    '''\n    return 1 if n < 1 else get_power_of_two(n // 2) * 2\n    \ndef power_of_two(n):\n    '''\n    Write a python function to get the power of 2 of a given number.\n    '''\n    return 1 if n < 1 else power_of_two(n // 2) * 2\n    \ndef reverse_number(n):\n    '''\n    Write a python function to get the reverse of the given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + (reverse_number(n//10))\n        \ndef reverse_digits(n):\n    '''\n    Write a python function to get the reverse of the given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return reverse_digits(n//10) * 10 + n%10\n    \ndef reverse_number2(n):\n    '''\n    Write a python function to get the reverse of the given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n%10 * (10**(len(str(n))-1))) + reverse_number2(n//10)\n        \ndef reverse_digits2(n):\n    '''\n    Write a python function to get the reverse of the given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n%10 * (10**(len(str(n))-1))) + reverse_digits2(n//10)\n    \ndef factorial_n_k(n,k):\n    '''\n    Write a python function to find the factorial of n, k.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    else:\n        return factorial_n_k(n-1,k) * k\n        \ndef factorial_n(n):\n    '''\n    Write a python function to find the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return factorial_n(n-1) * n\n        \ndef fibonacci_n_k(n,k):\n    '''\n    Write a python function to find the fibonacci of n, k.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    else:\n        return fibonacci_n_k(n-1,k) + fibonacci_n_k(n-2,k)\n        \ndef fibonacci_n(n):\n    '''\n    Write a python function to find the fibonacci of n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return fibonacci_n(n-1) + fibonacci_n(n-2)\n        \ndef factorial_n_k_mod_p(n,k,p):\n    '''\n    Write a python function to find the factorial of n, k modulo p.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return factorial_n_k_mod_p(n-1,k,p) * k % p\n        \ndef factorial_n_mod_p(n,p):\n    '''\n    Write a python function to find the factorial of n modulo p.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return factorial_n_mod_p(n-1,p) * n % p\n        \ndef power_n_k(n,k):\n    '''\n    Write a python function to compute the power of n, k.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return power_n_k(n-1,k) * k\n        \ndef power_n(n):\n    '''\n    Write a python function to compute the power of n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return power_n(n-1) * n\n        \ndef power_n_mod_p(n,k,p):\n    '''\n    Write a python function to compute the power of n, k modulo p.\n    '''\n    if n == 0:\n        return 1\n    elif k == 0:\n        return 1\n    else:\n        return power_n_mod_p(n-1,k,p) * power_n_mod_p(n-1,k-1,p) % p\n        \ndef power_n_mod_p_iterative(n,k,p):\n    '''\n    Write a python function to compute the power of n, k modulo p using iterative method.\n    '''\n    if n == 0:\n        return 1\n    \n    power = 1\n    while k > 0:\n        if k & 1:\n            power = power * n % p\n        n = n * n % p\n        k >>= 1\n    return power\n    \ndef power_n_mod_p_recursive(n,k,p):\n    '''\n    Write a python function to compute the power of n, k modulo p using recursive method.\n    '''\n    if n == 0:\n        return 1\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k & 1:\n        return n * power_n_mod_p_recursive(n,k-1,p) % p\n    else:\n        return power_n_mod_p_recursive(n,k//2,p) * power_n_mod_p_recursive(n,k//2,p) % p\n        \ndef power_n_mod_p_iterative_func(n,k,p):\n    '''\n    Write a python function to compute the power of "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == 1:\n        return 1\n    else:\n        return ((n*(n-1))/2)*binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n,k-1)*n\ndef comb(n,r):\n    '''\n    Write a python function to compute the factorial of n.\n    '''\n    if n<=1 or r<=1:\n        return 1\n    else:\n        return comb(n-1,r-1)+comb(n-1,r)\ndef faktoriyel(n):\n    '''\n    Write a python function to compute the product of the factorial of n.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return n*faktoriyel(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to compute the sum of the even numbers upto n.\n    '''\n    if n<=1:\n        return 0\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef lucas(n):\n    '''\n    Write a python function to compute the sum of the even numbers upto n.\n    '''\n    if n<=1:\n        return 2\n    else:\n        return lucas(n-1)+lucas(n-2)\ndef sumOfDigits(n):\n    '''\n    Write a python function to sum the digits in a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        return n%10+sumOfDigits(n//10)\ndef factorial_recursion(n):\n    '''\n    Write a python function to compute the factorial of a number using recursion.\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return factorial_recursion(n-1)+n\ndef factorial_recursion_2(n):\n    '''\n    Write a python function to compute the factorial of a number using recursion.\n    '''\n    if n<0:\n        return 0\n    elif n==0 or n==1:\n        return 1\n    else:\n        return n*factorial_recursion(n-1)\ndef factorial_iteration(n):\n    '''\n    Write a python function to compute the factorial of a number using iteration.\n    '''\n    if n==0:\n        return 1\n    else:\n        x=1\n        for i in range(1,n+1):\n            x=i*x\n        return x\ndef fibonacci_iteration(n):\n    '''\n    Write a python function to compute the sum of the even numbers upto n.\n    '''\n    if n<=1:\n        return 0\n    else:\n        a=0\n        b=1\n        for i in range(n):\n            c=a+b\n            a=b\n            b=c\n        return c\ndef fibonacci_iteration_2(n):\n    '''\n    Write a python function to compute the sum of the even numbers upto n.\n    '''\n    if n<=1:\n        return 0\n    elif n==0:\n        return 2\n    else:\n        a=0\n        b=1\n        x=0\n        while x<n:\n            x=a+b\n            a=b\n            b=x\n        return x\ndef fibonacci_iteration_3(n):\n    '''\n    Write a python function to compute the sum of the even numbers upto n.\n    '''\n    if n<=1:\n        return 0\n    elif n==0:\n        return 2\n    else:\n        a=0\n        b=1\n        x=0\n        while x<n:\n            x=a+b\n            a=b\n            b=x\n        return x\ndef fibonacci_iteration_4(n):\n    '''\n    Write a python function to compute the sum of the even numbers upto n.\n    '''\n    if n<=1:\n        return 0\n    elif n==0:\n        return 2\n    else:\n        a=0\n        b=1\n        x=0\n        while x<n:\n            x=a+b\n            a=b\n            b=x\n        return x\ndef fibonacci_iteration_5(n):\n    '''\n    Write a python function to compute the sum of the even numbers upto n.\n    '''\n    if n<=1:\n        return 0\n    elif n==0:\n        return 2\n    else:\n        x=0\n        a=0\n        b=1\n        while x<n:\n            x=a+b\n            a=b\n            b=x\n        return x\ndef fibonacci_iteration_6(n):\n    '''\n    Write a python function to compute the sum of the even numbers upto n.\n    '''\n    if n<=1:\n        return 0\n    elif n==0:\n        return 2\n    else:\n        a=0\n        b=1\n        x=0\n        while x<n:\n            x=a+b\n            a=b\n            b=x\n        return x\ndef factorial_recursion_2(n):\n    '''\n    Write a python function to compute the factorial of a number using recursion.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n*factorial_recursion_2(n-1)\ndef factorial_iteration_2(n):\n    '''\n    Write a python function to compute the factorial of a number using iteration.\n    '''\n    if n==0:\n        return 1\n    else:\n        x=1\n        for i in range(1,n+1):\n            x*=i\n        return x\ndef sumOfDigits_recursion(n):\n    '''\n    Write a python function to sum the digits in a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        return n%10+sumOfDigits_recursion(n//10)\ndef sumOfDigits_iteration(n):\n    '''\n    Write a python function to sum the digits in a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        x=0\n        while n>0:\n            x+=n%10\n            n=n//10\n        return x\ndef countDigits_recursion(n):\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        return 1+countDigits_recursion(n//10)\ndef countDigits_iteration(n):\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        x=0\n        while n>0:\n            x+=1\n            n=n//10\n        return x\ndef countDigits_iteration_2(n):\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        x=0\n        while n>0:\n            x+=1\n            n=n//10\n        return x\ndef countDigits_iteration_3(n):\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        x=0\n        while n>0:\n            x+=1\n            n=n//10\n        return x\ndef countDigits_iteration_4(n):\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        x=0\n        while n>0:\n            x+=1\n            n=n//10\n        return x\ndef countDigits_iteration_5(n):\n    '''\n    Write a python function to count the digits in a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        x="
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 1\n    for i in range(k):\n        sum = sum * (n - i)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff_list = []\n    for i in range(1,n+1):\n        if (i==k) or (i==n-k):\n            coeff_list.append(1)\n        else:\n            coeff_list.append((k*i)+1)\n    summation = sum(coeff_list)\n    return summation"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # n = 5\n    # k = 2\n    \n    n_factorial = 1\n    k_factorial = 1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomials = []\n    for i in range(n+1):\n        for j in range(n+1):\n            binomials.append((i,j))\n    c = 0\n    for tup in binomials:\n        if tup[0] == 0:\n            continue\n        if tup[0] == tup[1]:\n            c += 1\n    return c\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1;    \n    for i in range(1, k + 1):\n        coeff = coeff * (n - i + 1) / i;\n    print(coeff);\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.count('.') > 1:\n        return removezero_ip(ip.split('.')[1])\n    if ip.count('.') == 1:\n        return ip\n    return str(int(ip.split('.')[0])).rjust(3,'0')+'.'+str(int(ip.split('.')[1])).rjust(3,'0')+'.'+str(int(ip.split('.')[2])).rjust(3,'0')+'.'+str(int(ip.split('.')[3])).rjust(3,'0')\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #return ip.split('.')[0]\n    lst=[]\n    for i in ip.split('.'):\n        lst.append(i)\n    #print(lst)\n    if len(lst)==4:\n        if int(lst[0])==0:\n            del lst[0]\n        if int(lst[1])==0:\n            del lst[1]\n        if int(lst[2])==0:\n            del lst[2]\n        if int(lst[3])==0:\n            del lst[3]\n        return '.'.join(lst)\n    else:\n        print(\"Not correct input\")\n        return 0\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(ip.split('.'))\n    ip = list(map(lambda x: x if x!= '0' else None, ip))\n    ip = '.'.join(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'\\b0\\d+\\b', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '.' in ip:\n        ip = ip.split('.')\n        for i in range(len(ip)):\n            ip[i] = str(int(ip[i]))\n        return '.'.join(ip)\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split(\".\")\n    for i in range(len(ip)):\n        if(int(ip[i]) == 0):\n            ip[i] = '0'\n    ip = \".\".join(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(len(ip)==0):\n        return\n    \n    return ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    count = 0\n    if ip == \"\":\n        return ip\n    elif ip[0] == \"0\":\n        return \"\"\n    elif int(ip[0]) == 0:\n        return \"\"\n    for i in range(len(ip)):\n        if ip[i]!= \".\":\n            count += 1\n        else:\n            break\n    return ip[count:len(ip)]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)<=0:\n        return None\n    else:\n        even_num=list1[0]\n        odd_num=list1[1]\n        if even_num%2==0 and odd_num%2==1:\n            return even_num-odd_num\n        else:\n            return None\n    \ndef find_difference(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)<=0:\n        return None\n    else:\n        even_num=list1[0]\n        odd_num=list1[1]\n        if even_num%2==0 and odd_num%2==1:\n            return odd_num-even_num\n        else:\n            return even_num-odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return 0\n    odd = 0\n    even = 0\n    for i in list1:\n        if i % 2 == 1:\n            odd = i\n        else:\n            even = i\n    return abs(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    try:\n        if not list1:\n            raise Exception\n        result = []\n        a = list1[0]\n        if a % 2 == 0:\n            result.append(a)\n        else:\n            result.append(a+1)\n        for i in range(1,len(list1)):\n            if list1[i] % 2 == 0:\n                result.append(list1[i])\n            else:\n                result.append(list1[i] + 1)\n        return result\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        l_odd = []\n        l_even = []\n        for i in range(len(list1)):\n            if i % 2 == 0:\n                l_even.append(list1[i])\n            else:\n                l_odd.append(list1[i])\n        return l_odd[0] - l_even[0]\n        \n        \ndef sum_nums(nums):\n    '''\n    Write a function which takes a list and returns the sum of all numbers in the list.\n    '''\n    if len(nums) == 0:\n        return -1\n    else:\n        return sum(nums)\n        \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_diff = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_odd_diff.append(list1[i] - list1[i-1])\n        else:\n            even_odd_diff.append(list1[i] - list1[i-1])\n    return even_odd_diff\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return 'Invalid Input'\n    else:\n        num1 = list1[0]\n        num2 = list1[1]\n        if num1 % 2 == 0:\n            num1 = num1 + 1\n        elif num1 % 2!= 0:\n            num1 = num1 - 1\n        if num2 % 2 == 0:\n            num2 = num2 + 1\n        elif num2 % 2!= 0:\n            num2 = num2 - 1\n        return num1 - num2\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = 0\n    odd_number = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_number = even_number + list1[i]\n        else:\n            odd_number = odd_number + list1[i]\n    diff = even_number - odd_number\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in range(len(list1)):\n        if i%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    print(f'The diff between even and odd numbers in given list is {abs(even[0]-odd[0])}')\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    a = list1\n    print(a)\n    even_count = 0\n    odd_count = 0\n    for i in range(0,len(a)-1):\n        if (i%2 == 0) and a[i] % 2 == 0:\n            even_count = even_count + 1\n        elif a[i] % 2!= 0:\n            odd_count = odd_count + 1\n    print(even_count)\n    print(odd_count)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s=[]\n    \n    for i in range(len(str1)) :\n        s.append(str1[i])\n    s.reverse()\n    \n    for i in range(len(str2)) :\n        if(str2[i]!=s[i]) :\n            return i\n    \n    return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    #print (n)\n    m = len(str2)\n    #print (m)\n    str1 = list(str1)\n    str2 = list(str2)\n    \n    count = 0\n    \n    for i in range(n) :\n        if(str1[i]!= str2[i]) :\n            str1[i], str2[i] = str2[i], str1[i]\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = \"\".join(str1)\n    str2 = \"\".join(str2)\n    n1 = len(str1)\n    n2 = len(str2)\n    def count_swaps(str1,str2,n1,n2) :\n        '''\n        This function takes two strings str1 and str2 and returns the minimum number of swaps required to convert str1 to str2.\n        '''\n        if n1 == n2 : return 0\n        if n1 > n2 : return n1-n2\n        if n1 < n2 : return n2-n1\n        count = 0\n        d1 = {}\n        d2 = {}\n        i = 0\n        while i < n1 :\n            d1[str1[i]] = i\n            i = i + 1\n        i = 0\n        while i < n2 :\n            d2[str2[i]] = i\n            i = i + 1\n        for k in d1.keys() :\n            if k in d2 :\n                i = d1[k]\n                j = d2[k]\n                if i!= j :\n                    if i > j :\n                        i, j = j, i\n                    count = count + abs(i - j)\n        return count\n    return count_swaps(str1,str2,n1,n2)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = 0\n    s2 = 0\n    count = 0\n    \n    for i in range(0,len(str1)) : \n        s1 += int(str1[i])\n        \n    for i in range(0,len(str2)) : \n        s2 += int(str2[i])\n        \n    if s1 > s2 : \n        count = s1 - s2 \n    else : \n        count = s2 - s1 \n        \n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if not str1 or not str2: \n        return 0\n    l = len(str1)\n    d = {} \n    for i in range(l): \n        d[str1[i]] = i \n    m = l\n    for i in range(l-1): \n        if str2[i]!= str2[i+1]: \n            if str2[i+1] in d: \n                d[str2[i+1]] = m \n                m = m + 1\n            else: \n                return -1\n    ans = 0\n    while m>0: \n        if str2[ans] == str2[m-1]: \n            m = m - 1\n            ans = ans + 1\n        else: \n            return -1\n    return ans \n    \nstr1 = '10111'\nstr2 = '01010'\nprint(min_Swaps(str1, str2)) \nstr1 = '1100'\nstr2 = '100'\nprint(min_Swaps(str1, str2))\nstr1 = '1101'\nstr2 = '10'\nprint(min_Swaps(str1, str2)) \nstr1 = '1'\nstr2 = '111'\nprint(min_Swaps(str1, str2)) \nstr1 = '1101'\nstr2 = '01'\nprint(min_Swaps(str1, str2))\nstr1 = '0'\nstr2 = '110'\nprint(min_Swaps(str1, str2))\nstr1 = '111'\nstr2 = '0'\nprint(min_Swaps(str1, str2))\nstr1 = '1'\nstr2 = '11'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '100'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '01011'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '10101'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '010111'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '001111'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '111111'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '111011'\nprint(min_Swaps(str1, str2))\nstr1 = '011011'\nstr2 = '1000000'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110000'\nprint(min_Swaps(str1, str2))\nstr1 = '110000'\nstr2 = '110000'\nprint(min_Swaps(str1, str2))\nstr1 = '11111111111111'\nstr2 = '11111111111111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '11'\nprint(min_Swaps(str1, str2))\nstr1 = '010001'\nstr2 = '100'\nprint(min_Swaps(str1, str2))\nstr1 = '010001'\nstr2 = '001'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '01100'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '01100'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '01101'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '01111'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '011010'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '001111'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '111111'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '111011'\nprint(min_Swaps(str1, str2))\nstr1 = '010111'\nstr2 = '110000'\nprint(min_Swaps(str1, str2))\nstr1 = '1000000'\nstr2 = '1000000'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110000'\nprint(min_Swaps(str1, str2))\nstr1 = '110000'\nstr2 = '110000'\nprint(min_Swaps(str1, str2))\nstr1 = '11111111111111'\nstr2 = '11111111111111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110110'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110101'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110101'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '110101'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '011111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '010110'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '010111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '001111'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = '110111'\nstr2 = '010101'\nprint(min_Swaps(str1, str2))\nstr1 = "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2) :\n        return -1\n    res = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            temp = str1[i]\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + temp + str2[i+1:]\n            res += 1\n    return res\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n    return count\n    #code here \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    len_str1,len_str2 = len(str1),len(str2)\n    if len_str1==len_str2 : \n        return 1\n    \n    swaps = 0 \n    for i in range(1,len_str2+1) : \n        if str1[i-1]!= str2[i-1] : \n            str1 = str1[:i-1] + str1[i:]\n            str2 = str2[:i-1] + str2[i:]\n            swaps = swaps + 1\n            \n    if swaps == 0 : \n        return -1\n    return swaps \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    def calculate_size(tuple_list):\n        if isinstance(tuple_list, list):\n            if len(tuple_list) == 0:\n                return 1\n            else:\n                return 1 + calculate_size(tuple_list[0])\n        else:\n            return 1\n    return calculate_size(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Your code here\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    temp_list = []\n    for i in tuple_list:\n        temp_list.append(i)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize value\n    total = 0\n    # iterate through the list\n    for x in range(len(tuple_list)):\n        # get the length of the tuple\n        len_tuple = len(tuple_list[x])\n        # update the total \n        total = total + len_tuple\n    # return the total \n    return total\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #result = int(len(tuple_list)/2)\n    #result = 0 if len(tuple_list) == 0 else int(len(tuple_list)/2)\n    #tuple_size = len(tuple_list)\n    return int(len(tuple_list)/2)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list) == 0:\n        return(0)\n    else:\n        return(sys.getsizeof(tuple_list[0]) + tuple_size(tuple_list[1:]))\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    for i in range(len(arr1)):\n        if k == 1:\n            if arr1[i] == arr2[i]:\n                return arr1[i]\n            else:\n                return None\n        if k < 1:\n            return None\n        if k > len(arr1) + len(arr2):\n            return None\n        if k <= len(arr1):\n            arr1_start = 0\n            arr1_end = len(arr1) - 1\n        else:\n            arr1_start = len(arr1) - k\n            arr1_end = len(arr1) - 1\n        \n        if k <= len(arr2):\n            arr2_start = 0\n            arr2_end = len(arr2) - 1\n        else:\n            arr2_start = len(arr2) - k\n            arr2_end = len(arr2) - 1\n        \n        while arr1_end >= arr1_start:\n            mid1 = arr1_start + (arr1_end - arr1_start)//2\n            mid2 = arr2_start + (arr2_end - arr2_start)//2\n            if arr1[mid1] == arr2[mid2]:\n                if k == 1:\n                    return arr1[mid1]\n                elif k < 1:\n                    return None\n                else:\n                    k = k - 1\n                    arr1_start = mid1 + 1\n                    arr1_end = mid1 - 1\n                    arr2_start = mid2 + 1\n                    arr2_end = mid2 - 1\n            elif arr1[mid1] < arr2[mid2]:\n                if k <= len(arr1):\n                    arr1_end = mid1 - 1\n                else:\n                    arr1_start = mid1 + 1\n                    arr1_end = mid1 - 1\n            else:\n                if k <= len(arr2):\n                    arr2_end = mid2 - 1\n                else:\n                    arr2_start = mid2 + 1\n                    arr2_end = mid2 - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Do not use linear search to solve this problem.\n    # Since k is always greater than arr1 length,\n    # so we need to do binary search\n    \n    low = 0\n    high = len(arr1)-1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr1[mid] == arr2[mid]:\n            mid += 1\n        \n        # check if kth element is smaller than the element at mid\n        if arr1[mid] < arr2[mid] and arr1[mid] < arr2[k-1]:\n            low = mid + 1\n        \n        elif arr1[mid] < arr2[mid] and arr1[mid] > arr2[k-1]:\n            high = mid - 1\n        \n        elif arr1[mid] == arr2[mid] and arr1[mid] > arr2[k-1]:\n            high = mid - 1\n        \n        # if kth element is greater than element at mid,\n        # then it can only be present in the right half\n        elif arr1[mid] > arr2[mid] and arr1[mid] < arr2[k-1]:\n            low = mid + 1\n        \n        elif arr1[mid] > arr2[mid] and arr1[mid] > arr2[k-1]:\n            high = mid - 1\n        \n        # kth element is found\n        elif arr1[mid] == arr2[mid]:\n            return arr1[mid]\n        \n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 and not arr2:\n        return None\n    if not arr1:\n        return arr2[k - 1]\n    if not arr2:\n        return arr1[k - 1]\n    i = j = k\n    p1, p2 = arr1[0], arr2[0]\n    while i < len(arr1) and j < len(arr2):\n        if p1 < p2:\n            if arr1[i] < p2:\n                i += 1\n            else:\n                p1 = arr1[i]\n        else:\n            if arr2[j] < p1:\n                j += 1\n            else:\n                p2 = arr2[j]\n    if i == len(arr1):\n        return p2\n    else:\n        return p1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1) + len(arr2)\n    left, right = 0, n\n    while left <= right:\n        middle = (left + right) // 2\n        if arr1[middle - 1] <= arr2[middle]:\n            if arr1[middle] == arr2[middle]:\n                return arr1[middle]\n            if arr1[middle] < arr2[middle]:\n                left = middle + 1\n            else:\n                right = middle - 1\n        else:\n            if arr1[middle] < arr2[middle]:\n                right = middle - 1\n            else:\n                left = middle + 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = 0\n    p2 = 0\n    s = 0\n    while p1<len(arr1) and p2<len(arr2):\n        if arr1[p1] < arr2[p2]:\n            s = s+1\n            if s == k:\n                return arr1[p1]\n            p1 = p1+1\n        else:\n            s = s+1\n            if s == k:\n                return arr2[p2]\n            p2 = p2+1\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 > l2:\n        return find_kth_aux(arr2, arr1, l1, k)\n    return find_kth_aux(arr1, arr2, l2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l1 = 0\n    l2 = 0\n    c = 0\n    while l1 < len(arr1) and l2 < len(arr2):\n        if arr1[l1] < arr2[l2]:\n            l1 += 1\n        else:\n            l2 += 1\n        c += 1\n        if c == k:\n            return arr1[l1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[-1] < arr2[-1]:\n        # target is at the end of the smaller array\n        target = arr1[-1]\n        \n    else:\n        target = arr2[-1]\n        \n    index = 0\n    \n    while k > 0:\n        if arr1[index] <= target and arr2[index] <= target:\n            # move towards the end of larger array\n            index += 1\n        \n        elif arr1[index] > target:\n            k -= 1\n            index += 1\n            \n        else:\n            k -= 1\n            index += 1\n    \n    return target\n        \n    \n    \n    \n    \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_idx = 0\n    arr2_idx = 0\n    idx = k\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # get first array's element, which is assumed to be kth element\n    # search first array\n    first_array_length = len(arr1)\n    search_result = binary_search(arr1, 0, first_array_length - 1, arr2, 0, first_array_length - 1, k)\n    if search_result == -1:\n        return -1\n    \n    # search second array\n    second_array_length = len(arr2)\n    search_result = binary_search(arr1, 0, first_array_length - 1, arr2, 0, second_array_length - 1, k)\n    return search_result\n    \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    string = str(number)\n    sum = 0\n    for i in string:\n        sum += int(i)**3\n    if sum == number:\n        return True\n    else:\n        return False\nprint(armstrong_number(153))\nprint(armstrong_number(12))\nprint(armstrong_number(15345))\nprint(armstrong_number(0))"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    sum = 0\n    n = number\n    while (n>0):\n        digit = n%10\n        sum += digit**3\n        n = n//10\n    \n    if(number==sum):\n        print(\"armstrong number\")\n    else:\n        print(\"not an armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # solution\n    sum = 0\n    str_number = str(number)\n    for i in str_number:\n        sum += int(i)**3\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_number = str(number)\n    total = 0\n    for i in str_number:\n        total += int(i)**len(str_number)\n    return total == number\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    sum = 0\n    while len(num) > 0:\n        sum += int(num[0])**3\n        num = num[1:]\n    return True if number == sum else False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # using for loop to iterate the given number\n    for i in range(number):\n        # using modulus to check whether the number is armstrong or not\n        temp = number\n        sum = 0\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp = temp // 10\n        # returning the number if it is armstrong or not\n        if sum == number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    while(number>0):\n        digit = number % 10\n        sum += digit ** 3\n        number = number // 10\n    if(sum == number):\n        print('Given number is armstrong')\n    else:\n        print('Given number is not armstrong')\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    n = number\n    while number > 0:\n        count = count + (number % 10) ** 3\n        number = number // 10\n    return n == count\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    while n:\n        digit = n % 10\n        sum += digit ** 3\n        n //= 10\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_copy = number\n    sum = 0\n    while number_copy > 0:\n        digit = number_copy % 10\n        sum += digit ** 3\n        number_copy = number_copy // 10\n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter a number: \"))\n    sum = 0\n    average = 0\n    for i in range(0,n):\n        sum += i\n        average = sum/n\n    print(\"Sum of first \" + str(n) + \" natural numbers is \" + str(sum))\n    print(\"Average of first \" + str(n) + \" natural numbers is \" + str(average))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i + 1\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number + 1):\n        sum += i\n    average = sum / number\n    print(f\"{number} natural number sum is: {sum} and average is {average}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for x in range(1,number+1):\n        sum += x\n    average = sum/number\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    n = 1\n    while n <= number:\n        total = total + n\n        n = n + 1\n    average = total / number\n    print(f\"The sum of first {number} natural numbers is: {total}\")\n    print(f\"The average of first {number} natural numbers is: {average}\")\n    \ndef main():\n    sum_average(5)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    if number <= 0:\n        return \"Provide a positive integer.\"\n    \n    sum_n = 0\n    for i in range(1, number + 1):\n        sum_n += i\n    \n    average = sum_n / number\n    \n    return sum_n, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total,count,average = 0,0,0\n    while count < number:\n        total += count\n        count += 1\n        average = total / number\n    print(\"sum =\",total)\n    print(\"average =\",average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while (number > 0):\n        count += 1\n        total += number\n        number -= 1\n    print(\"Sum: \", total)\n    print(\"Average: \", total / count)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number + 1):\n        sum += i\n    average = sum / number\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\nprint(is_Even(3))\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        print(\"the number is even.\")\n    else : \n        print(\"the number is odd.\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2==0) :\n        print(\"%d is Even\"%n)\n    else :\n        print(\"%d is Odd\"%n)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n    \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n%2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    return n % 2 == 0\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # str1=input(\"Enter the string: \")\n    str2=set(str1)\n    for i in str2:\n        if str1.count(i)>1:\n            print(\"{} is repeated {} time\".format(i,str1.count(i)))\n            break\n    else:\n        print(\"Not Repeated\")\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # for i in range(len(str1)):\n    #     if str1[i] == str1[i + 1]:\n    #         print(str1[i])\n    #         return str1[i]\n    # return None\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    \n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n            \n    for i in char_dict:\n        if char_dict[i] > 1:\n            return i\n            \n    return -1\n    \nprint(first_repeated_char(\"AnaPap\"))\nprint(first_repeated_char(\"Abracadabra\"))\nprint(first_repeated_char(\"geeksforgeeks\"))\nprint(first_repeated_char(\"learning algorithms\"))\nprint(first_repeated_char(\"geek\"))\nprint(first_repeated_char(\"\"))\nprint(first_repeated_char(\"a\"))\nprint(first_repeated_char(\"abracadabra\"))\nprint(first_repeated_char(\"abracadabraa\"))\nprint(first_repeated_char(\"abracadabraaa\"))\nprint(first_repeated_char(\"abracadabraaaa\"))\nprint(first_repeated_char(\"abracadabraaaaa\"))\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #using dic\n    str1 = input(\"Enter string: \")\n    my_dict = {}\n    for i in str1:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    \n    for i in str1:\n        if my_dict[i] > 1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    try:\n        return str1.index(str1[0])\n    except:\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #Create a variable to store the length of the string\n    l = len(str1)\n    #Create a variable to store the first char that repeats in the string\n    first = \"\"\n    #Check the length of the string and check if the char is the same in the first repetition.\n    for i in range(l):\n        for j in range(i+1, l):\n            #if the char is not the same in the first repetition, break the loop.\n            if(str1[i]!= str1[j]):\n                break\n            #if it is the same, store the char and break the loop.\n            else:\n                first = str1[i]\n                break\n        #break the loop if the repetition has been found.\n        if(i == l-1):\n            break\n    return(first)\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict = {}\n    for ch in str1:\n        if ch in dict:\n            return ch\n        else:\n            dict[ch] = 1\n    return False\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n) if is_ludic(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    n = int(n)\n    lucid_numbers = []\n    for i in range(1, n):\n        if (i**2) % n == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(1, n):\n        if is_lucid(i):\n            lucid_nums.append(i)\n    return lucid_nums\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if is_lucid(i):\n            ludic.append(i)\n    return lucid\n    \n    \ndef is_lucid(n):\n    '''\n    Write a function that returns True if a given integer n is a lucid number, else returns False.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while i < n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n    \n    \ndef get_min_palindrome(n):\n    '''\n    Write a function to find the smallest palindrome whose length is greater than or equal to a given integer.\n    '''\n    palindrome = []\n    for i in range(1, n):\n        if is_palindrome(i) and is_palindrome(n-i):\n            palindrome.append(i)\n            palindrome.append(n-i)\n    return palindrome\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a function to determine if a given integer is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n    \n    \ndef get_prime_factors(n):\n    '''\n    Write a function to find all prime factors of a given integer.\n    '''\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \n    \ndef is_triangle(n):\n    '''\n    Write a function to determine if a given integer is a triangle number or not.\n    '''\n    return n*(n+1)/2 == n\n    \n    \ndef get_non_negative_square_root(n):\n    '''\n    Write a function to find the smallest non-negative integer k such that k*k <= n.\n    '''\n    for k in range(1, n):\n        if k*k <= n:\n            return k\n        \n    \ndef get_anagrams(s1, s2):\n    '''\n    Write a function to find all anagrams of a given string and return them as an array of strings.\n    '''\n    pairs = []\n    char_freq = {}\n    for c in s1:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n    for c in s2:\n        if c in char_freq:\n            char_freq[c] -= 1\n        else:\n            char_freq[c] = -1\n    for k, v in char_freq.items():\n        if v!= -1:\n            pairs.append(k * v)\n    pairs = sorted(pairs)\n    return pairs\n    \n    \ndef max_freq_char(s):\n    '''\n    Write a function to find the character with the maximum number of occurences in a given string.\n    '''\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    max_freq = 0\n    max_char =''\n    for k, v in freq.items():\n        if v > max_freq:\n            max_freq = v\n            max_char = k\n    return max_char\n    \n    \ndef max_freq_char_with_padding(s):\n    '''\n    Write a function to find the character with the maximum number of occurences in a given string,\n    and return the character with the minimum number of occurences in the same string.\n    '''\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    max_freq = 0\n    max_char =''\n    for k, v in freq.items():\n        if v > max_freq:\n            max_freq = v\n            max_char = k\n    return max_char, max_freq\n    \n    \ndef valid_parentheses(s):\n    '''\n    Write a function to check if the input string is a valid parentheses string.\n    '''\n    count = 0\n    for i in s:\n        if i == '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n        if count < 0:\n            return False\n    if count == 0:\n        return True\n    else:\n        return False\n    \n    \ndef find_in_a_string(s, x):\n    '''\n    Write a function to find the number of occurrences of a substring in a given string.\n    '''\n    cnt = 0\n    for i in range(len(s)):\n        if s[i:i+len(x)] == x:\n            cnt += 1\n    return cnt\n    \n    \ndef is_unique_char(s):\n    '''\n    Write a function to determine if a string contains only unique characters.\n    '''\n    return len(set(s)) == len(s)\n    \n    \ndef has_e_without_dot(s):\n    '''\n    Write a function to determine if a string contains an e without a dot.\n    '''\n    for i in s:\n        if i == 'e' or i == 'E':\n            return False\n    return True\n    \n    \ndef is_string_permutation(s1, s2):\n    '''\n    Write a function to determine if one string is a permutation of another.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    for i in s1:\n        if i in s1_dict:\n            s1_dict[i] += 1\n        else:\n            s1_dict[i] = 1\n    s2_dict = {}\n    for i in s2:\n        if i in s2_dict:\n            s2_dict[i] += 1\n        else:\n            s2_dict[i] = 1\n    for k, v in s1_dict.items():\n        if k in s2_dict:\n            if s1_dict[k]!= s2_dict[k]:\n                return False\n        else:\n            return False\n    return True\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    return s == s[::-1]\n    \n    \ndef get_array_sum(nums):\n    '''\n    Write a function to get the sum of all the numbers in an array,\n    except ignore sections of numbers starting with a 6 and extending to the next 7\n    (every 6 will be followed by at least one 7).\n    Return 0 for no numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < len(nums):\n        if nums[i] == 6:\n            i += 2\n            while nums[i]!= 7:\n                i += 1\n            i += 1\n        else:\n            sum += nums[i]\n            i += 1\n    return sum\n    \n    \ndef get_file_size(filename):\n    '''\n    Write a function that calculates the size of a file in bytes.\n    '''\n    size = 0\n    with open(filename, 'rb') as file:\n        while True:\n            data = file.read(1024)\n            if not data:\n                break\n            size += len(data)\n    return size\n    \n    \ndef get_file_size_no_read(filename):\n    '''\n    Write a function that calculates the size of a file in bytes,\n    without actually opening the file.\n    '''\n    size = 0\n    with open(filename, 'rb') as file:\n        for i in file:\n            size += len(i)\n    return size\n    \n    \ndef read_in_binary(filename):\n    '''\n    Write a function that reads a file in binary and returns a list of all of the lines in the file.\n    Eac"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    if n == 1:\n        return [1]\n    for i in range(1, n+1):\n        if is_ludic(i):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        print(\"Oops!! No negative integers allowed. Please enter a positive integer\")\n        return\n    ludic = []\n    for i in range(n):\n        if i > 0 and (i * (i + 1)) / 2 == i:\n            ludic.append(i)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(n):\n        ludics.append(i)\n        for j in range(2, i):\n            if i % j == 0:\n                break\n            elif j == i - 1:\n                ludics.append(i)\n    print(ludics)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_lucid(n):\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        n_root = int(math.sqrt(n))\n        # n_root_2 = int(n_root**2)\n        # n_root_3 = int(n_root_2**2)\n        n_root_4 = int(n_root**4)\n        n_root_5 = int(n_root_4**2)\n        n_root_6 = int(n_root_5**2)\n        # n_root_7 = int(n_root_6**2)\n        # n_root_8 = int(n_root_7**2)\n        # n_root_9 = int(n_root_8**2)\n        # n_root_10 = int(n_root_9**2)\n        # n_root_11 = int(n_root_10**2)\n        # n_root_12 = int(n_root_11**2)\n        # n_root_13 = int(n_root_12**2)\n        # n_root_14 = int(n_root_13**2)\n        # n_root_15 = int(n_root_14**2)\n        # n_root_16 = int(n_root_15**2)\n        # n_root_17 = int(n_root_16**2)\n        # n_root_18 = int(n_root_17**2)\n        # n_root_19 = int(n_root_18**2)\n        # n_root_20 = int(n_root_19**2)\n        # n_root_21 = int(n_root_20**2)\n        # n_root_22 = int(n_root_21**2)\n        # n_root_23 = int(n_root_22**2)\n        # n_root_24 = int(n_root_23**2)\n        # n_root_25 = int(n_root_24**2)\n        # n_root_26 = int(n_root_25**2)\n        # n_root_27 = int(n_root_26**2)\n        # n_root_28 = int(n_root_27**2)\n        # n_root_29 = int(n_root_28**2)\n        # n_root_30 = int(n_root_29**2)\n        # n_root_31 = int(n_root_30**2)\n        # n_root_32 = int(n_root_31**2)\n        # n_root_33 = int(n_root_32**2)\n        # n_root_34 = int(n_root_33**2)\n        # n_root_35 = int(n_root_34**2)\n        # n_root_36 = int(n_root_35**2)\n        # n_root_37 = int(n_root_36**2)\n        # n_root_38 = int(n_root_37**2)\n        # n_root_39 = int(n_root_38**2)\n        # n_root_40 = int(n_root_39**2)\n        # n_root_41 = int(n_root_40**2)\n        # n_root_42 = int(n_root_41**2)\n        # n_root_43 = int(n_root_42**2)\n        # n_root_44 = int(n_root_43**2)\n        # n_root_45 = int(n_root_44**2)\n        # n_root_46 = int(n_root_45**2)\n        # n_root_47 = int(n_root_46**2)\n        # n_root_48 = int(n_root_47**2)\n        # n_root_49 = int(n_root_48**2)\n        # n_root_50 = int(n_root_49**2)\n        # n_root_51 = int(n_root_50**2)\n        # n_root_52 = int(n_root_51**2)\n        # n_root_53 = int(n_root_52**2)\n        # n_root_54 = int(n_root_53**2)\n        # n_root_55 = int(n_root_54**2)\n        # n_root_56 = int(n_root_55**2)\n        # n_root_57 = int(n_root_56**2)\n        # n_root_58 = int(n_root_57**2)\n        # n_root_59 = int(n_root_58**2)\n        # n_root_60 = int(n_root_59**2)\n        # n_root_61 = int(n_root_60**2)\n        # n_root_62 = int(n_root_61**2)\n        # n_root_63 = int(n_root_62**2)\n        # n_root_64 = int(n_root_63**2)\n        # n_root_65 = int(n_root_64**2)\n        # n_root_66 = int(n_root_65**2)\n        # n_root_67 = int(n_root_66**2)\n        # n_root_68 = int(n_root_67**2)\n        # n_root_69 = int(n_root_68**2)\n        # n_root_70 = int(n_root_69**2)\n        # n_root_71 = int(n_root_70**2)\n        # n_root_72 = int(n_root_71**2)\n        # n_root_73 = int(n_root_72**2)\n        # n_root_74 = int(n_root_73**2)\n        # n_root_75 = int(n_root_74**2)\n        # n_root_76 = int(n_root_75**2)\n        # n_root_77 = int(n_root_76**2)\n        # n_root_78 = int(n_root_77**2)\n        # n_root_79 = int(n_root_78**2)\n        # n_root_80 = int(n_root_79**2)\n        # n_root_81 = int(n_root_80**2)\n        # n_root_82 = int(n_root_81**2)\n        # n_root_83 = int(n_root_82**2)\n        # n_root_84 = int(n_root_83**2)\n        # n_root_85 = int(n_root_84**2)\n        # n_root_86 = int(n_root_85**2)\n        # n_root_87 = int(n_root_86**2)\n        # n_root_88 = int(n_root_87**2)\n        # n_root_89 = int(n_root_88**2)\n        # n_root_90 = int(n_root_89**2)\n        # n_root_91 = int(n_root_90**2)\n        # n_root_92 = int(n_root_91**2)\n        # n_root_93 = int(n_root_92**2)\n        # n_root_94 = int(n_root_93**2)\n        # n_root_95 = int(n_root_94**2)\n        # n_root_96 = int(n_root_95**2)\n        # n_root_97 = int(n_root_96**2)\n        # n_root_98 = int(n_root_97**2)\n        # n_root_99 = int(n_root_98**2)\n        # n_root_100 = int(n_root_99**2)\n        # n_root_101 = int(n_root_100**2)\n        # n_root_102 = int(n_root_101**2)\n        # n_root_103 = int(n_root_102**2)\n        # n_root_104 = int(n_root_103**2)\n        # n_root"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return []\n    return list(range(2, n)) + get_ludic(n - 1)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(n):\n        return \"ludic\" in str(n)\n    \n    ludic_numbers = []\n    for i in range(n):\n        if is_ludic(i):\n            ludic_numbers.append(i)\n    return lucid_numbers\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #first, split up the words by spaces.\n    #Then, reverse the word\n    #Finally, join the words back\n    #The approach would be to separate by spaces and then reverse the individual words\n    word_list = s.split(\" \")\n    #word_list = s.split()\n    reversed_words = \"\"\n    for i in range(len(word_list)):\n        reversed_words += word_list[-i-1]\n        if i!= len(word_list)-1:\n            reversed_words += \" \"\n    return reversed_words\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # s = input()\n    s = s.split(\" \")\n    s.reverse()\n    s = \" \".join(s)\n    print(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    s.reverse()\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    tokens = s.split()\n    tokens.reverse()\n    return \" \".join(tokens)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    return''.join(reversed(s.split(' ')))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # words = s.split()\n    # result = words[::-1]\n    # result = \" \".join(result)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split()\n    l.reverse()\n    return \" \".join(l)\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    i = 2\n    while i <= num:\n        if num % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n        else:\n            return True\n    \ndef prime_check(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if prime_num(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    \n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    divisor = 2\n    if num % divisor == 0:\n        return False\n    while divisor <= num ** 0.5:\n        if num % divisor == 0:\n            return False\n        divisor += 1\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime_num_lst = []\n    for i in range(2, num):\n        if num % i == 0:\n            prime_num_lst.append(False)\n            break\n        else:\n            prime_num_lst.append(True)\n    \n    if False in prime_num_lst:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef convert_to_celsius(farenheit):\n    '''\n    Write a function to convert farenheit to celsius.\n    '''\n    return (farenheit - 32) * 5 / 9\ndef convert_to_farenheit(celsius):\n    '''\n    Write a function to convert celsius to farenheit.\n    '''\n    return (celsius * (9 / 5)) + 32\ndef convert_to_degree(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to degree.\n    '''\n    return (degree_fahrenheit - 32) * (5 / 9)\ndef convert_to_degree(degree_celcius):\n    '''\n    Write a function to convert celsius to degree.\n    '''\n    return (degree_celcius * (9 / 5)) + 32\ndef convert_to_kelvin(degree_celcius):\n    '''\n    Write a function to convert celsius to kelvin.\n    '''\n    return degree_celcius + 273.15\ndef convert_to_kelvin(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to kelvin.\n    '''\n    return (degree_fahrenheit - 32) * (5 / 9) + 273.15\ndef convert_to_fahrenheit(degree_kelvin):\n    '''\n    Write a function to convert kelvin to farenheit.\n    '''\n    return degree_kelvin * (9 / 5) - 459.67\ndef convert_to_fahrenheit(degree_celcius):\n    '''\n    Write a function to convert celcius to farenheit.\n    '''\n    return (degree_celcius * (9 / 5)) + 32\ndef convert_to_rankine(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to rankine.\n    '''\n    return (degree_fahrenheit - 32) * 5 / 9 + 68.89\ndef convert_to_rankine(degree_celcius):\n    '''\n    Write a function to convert celcius to rankine.\n    '''\n    return (degree_celcius * 5 / 9) + 68.89\ndef convert_to_celsius(degree_rankine):\n    '''\n    Write a function to convert rankine to celsius.\n    '''\n    return (degree_rankine - 68.89) * 9 / 5 + 32\ndef convert_to_celsius(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to celsius.\n    '''\n    return (degree_fahrenheit - 32) * (5 / 9)\ndef convert_to_kelvin(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to kelvin.\n    '''\n    return degree_fahrenheit + 459.67\ndef convert_to_kelvin(degree_celcius):\n    '''\n    Write a function to convert celcius to kelvin.\n    '''\n    return degree_celcius + 273.15\ndef convert_to_rankine(degree_celcius):\n    '''\n    Write a function to convert celcius to rankine.\n    '''\n    return (degree_celcius * 5 / 9) + 68.89\ndef convert_to_rankine(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to rankine.\n    '''\n    return (degree_fahrenheit - 32) * 5 / 9 + 68.89\ndef convert_to_fahrenheit(degree_kelvin):\n    '''\n    Write a function to convert kelvin to farenheit.\n    '''\n    return degree_kelvin * (9 / 5) - 459.67\ndef convert_to_fahrenheit(degree_celcius):\n    '''\n    Write a function to convert celcius to farenheit.\n    '''\n    return (degree_celcius * (9 / 5)) + 32\ndef convert_to_rankine(degree_kelvin):\n    '''\n    Write a function to convert kelvin to rankine.\n    '''\n    return (degree_kelvin - 459.67) * 5 / 9 + 68.89\ndef convert_to_rankine(degree_celcius):\n    '''\n    Write a function to convert celcius to rankine.\n    '''\n    return (degree_celcius * 5 / 9) + 68.89\ndef convert_to_celsius(degree_rankine):\n    '''\n    Write a function to convert rankine to celsius.\n    '''\n    return (degree_rankine - 68.89) * 9 / 5 + 32\ndef convert_to_celsius(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to celsius.\n    '''\n    return (degree_fahrenheit - 32) * (5 / 9)\ndef convert_to_kelvin(degree_rankine):\n    '''\n    Write a function to convert rankine to kelvin.\n    '''\n    return degree_rankine + 459.67\ndef convert_to_kelvin(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to kelvin.\n    '''\n    return (degree_fahrenheit - 32) * (5 / 9) + 273.15\ndef convert_to_rankine(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to rankine.\n    '''\n    return degree_fahrenheit + 459.67\ndef convert_to_rankine(degree_celcius):\n    '''\n    Write a function to convert celcius to rankine.\n    '''\n    return (degree_celcius * 5 / 9) + 68.89\ndef convert_to_fahrenheit(degree_celcius):\n    '''\n    Write a function to convert celcius to farenheit.\n    '''\n    return (degree_celcius * (9 / 5)) + 32\ndef convert_to_fahrenheit(degree_kelvin):\n    '''\n    Write a function to convert kelvin to farenheit.\n    '''\n    return degree_kelvin * (9 / 5) - 459.67\ndef convert_to_rankine(degree_kelvin):\n    '''\n    Write a function to convert kelvin to rankine.\n    '''\n    return (degree_kelvin - 459.67) * 5 / 9 + 68.89\ndef convert_to_rankine(degree_celcius):\n    '''\n    Write a function to convert celcius to rankine.\n    '''\n    return (degree_celcius * 5 / 9) + 68.89\ndef convert_to_celsius(degree_rankine):\n    '''\n    Write a function to convert rankine to celsius.\n    '''\n    return (degree_rankine - 68.89) * 9 / 5 + 32\ndef convert_to_celsius(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to celsius.\n    '''\n    return (degree_fahrenheit - 32) * (5 / 9)\ndef convert_to_kelvin(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to kelvin.\n    '''\n    return degree_fahrenheit + 459.67\ndef convert_to_kelvin(degree_celcius):\n    '''\n    Write a function to convert celcius to kelvin.\n    '''\n    return degree_celcius + 273.15\ndef convert_to_rankine(degree_fahrenheit):\n    '''\n    Write a function to convert farenheit to rankine.\n    '''\n    return degree_fahrenheit + 459.67\ndef convert_to_rankine(degree_celcius):\n    '''\n    Write a function to convert celcius to rankine.\n    '''\n    return (degree_celcius * 5 / 9) + 68.89\ndef convert_to_fahrenheit(degree_kelvin):\n    '''\n    Write a function to convert kelvi"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi/180)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # convert degrees to radians\n    rad = degree * math.pi / 180\n    return rad\n    \ndef get_radius(degrees):\n    '''\n    Write a function to calculate the radius of a circle given degrees.\n    '''\n    # calculate the radius\n    radius = degrees / 360 * 2 * math.pi\n    return radius\n    \ndef get_area(radius):\n    '''\n    Write a function to calculate the area of a circle given radius.\n    '''\n    # calculate the area\n    area = math.pi * radius * radius\n    return area\n    \ndef get_circle_area(radius, degree):\n    '''\n    Write a function to calculate the area of a circle given radius and degrees.\n    '''\n    # calculate the area\n    area = (math.pi * radius * radius) + (math.pi * radius * math.sin(radian_degree(degree)) * radius)\n    return area\n    \ndef get_circle_area_of_irregular(radius, degree, irregularity):\n    '''\n    Write a function to calculate the area of a circle given radius and degrees.\n    '''\n    # calculate the area\n    area = (math.pi * radius * radius) + (math.pi * radius * math.sin(radian_degree(degree)) * radius) + (math.pi * radius * math.sin(radian_degree(irregularity)) * radius)\n    return area\n    \ndef get_area_of_regular_cuboid(a, b, h):\n    '''\n    Write a function to calculate the area of a cuboid given a, b, and h.\n    '''\n    # calculate the area\n    area = (a * b * h) / 2\n    return area\n    \ndef get_volume_of_regular_cuboid(a, b, h):\n    '''\n    Write a function to calculate the volume of a cuboid given a, b, and h.\n    '''\n    # calculate the volume\n    volume = (a * b * h)\n    return volume\n    \ndef get_volume_of_irregular_cuboid(a, b, h, irregularity):\n    '''\n    Write a function to calculate the volume of a cuboid given a, b, and h.\n    '''\n    # calculate the volume\n    volume = (a * b * h) + (a * b * math.sin(radian_degree(irregularity)) * h)\n    return volume\n    \ndef get_area_of_regular_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere given radius.\n    '''\n    # calculate the area\n    area = (4 / 3) * math.pi * (radius * radius)\n    return area\n    \ndef get_volume_of_regular_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere given radius.\n    '''\n    # calculate the volume\n    volume = (4 / 3) * math.pi * (radius * radius) * 4 / 3\n    return volume\n    \ndef get_volume_of_irregular_sphere(radius, irregularity):\n    '''\n    Write a function to calculate the volume of a sphere given radius and irregularity.\n    '''\n    # calculate the volume\n    volume = (4 / 3) * math.pi * (radius * radius) + (4 / 3) * math.pi * (radius * radius) * math.sin(radian_degree(irregularity))\n    return volume\n    \ndef get_volume_of_irregular_cylinder(a, b, h, irregularity):\n    '''\n    Write a function to calculate the volume of a cylinder given a, b, and h.\n    '''\n    # calculate the volume\n    volume = (a * b) + (a * b * math.sin(radian_degree(irregularity)) * h)\n    return volume\n    \ndef get_volume_of_irregular_cone(a, b, h, irregularity):\n    '''\n    Write a function to calculate the volume of a cone given a, b, and h.\n    '''\n    # calculate the volume\n    volume = ((a * b) * h) + (a * b * h * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)))\n    return volume\n    \ndef get_volume_of_regular_cone(a, b, h, irregularity):\n    '''\n    Write a function to calculate the volume of a cone given a, b, and h.\n    '''\n    # calculate the volume\n    volume = (a * b) + (a * b * math.sin(radian_degree(irregularity)) * h) - (a * b * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * h)\n    return volume\n    \ndef get_volume_of_irregular_cylinder(a, b, h, irregularity):\n    '''\n    Write a function to calculate the volume of a cylinder given a, b, and h.\n    '''\n    # calculate the volume\n    volume = (a * b) + (a * b * math.sin(radian_degree(irregularity)) * h)\n    return volume\n    \ndef get_volume_of_irregular_cone(a, b, h, irregularity):\n    '''\n    Write a function to calculate the volume of a cone given a, b, and h.\n    '''\n    # calculate the volume\n    volume = ((a * b) * h) + (a * b * h * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)))\n    return volume\n    \ndef get_volume_of_irregular_cylinder(a, b, h, irregularity, radius):\n    '''\n    Write a function to calculate the volume of a cylinder given a, b, and h.\n    '''\n    # calculate the volume\n    volume = (a * b) + (a * b * math.sin(radian_degree(irregularity)) * h) + (a * b * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * h) + (a * b * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * h) + (a * b * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * h)\n    return volume\n    \ndef get_volume_of_irregular_cone(a, b, h, irregularity, radius):\n    '''\n    Write a function to calculate the volume of a cone given a, b, and h.\n    '''\n    # calculate the volume\n    volume = ((a * b) * h) + (a * b * h * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity))) + (a * b * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * h) + (a * b * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * h) + (a * b * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * h)\n    return volume\n    \ndef get_volume_of_irregular_cylinder(a, b, h, irregularity, radius):\n    '''\n    Write a function to calculate the volume of a cylinder given a, b, and h.\n    '''\n    # calculate the volume\n    volume = (a * b) + (a * b * math.sin(radian_degree(irregularity)) * h) + (a * b * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * h) + (a * b * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * math.sin(radian_degree(irregularity)) * h"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians=degree*math.pi/180\n    return radians\n    \ndef radian_degree_round(radians):\n    '''\n    Write a function to round a radian to a given precision.\n    '''\n    precision=0.0000001\n    radians_rounded=round(radians*precision,2)\n    return radians_rounded\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # degree_to_radian = degree * math.pi / 180.0\n    # radian_to_degree = 180.0 / math.pi\n    degree_to_radian = degree * math.pi / 180.0\n    radian_to_degree = 180.0 / math.pi\n    return degree_to_radian, radian_to_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    import re\n    r = re.search(pattern, text)\n    if r:\n        return r.group(0), r.start(0), r.end(0)\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # pattern = r'\\d+\\.\\d+'\n    start = 0\n    end = 0\n    found_at = []\n    length = 0\n    match = re.search(pattern, text)\n    # while match!= None:\n    #     length = length + len(match.group())\n    #     print(match.group())\n    #     start = start + match.start()\n    #     end = end + match.end()\n    #     match = re.search(pattern, text, start, end)\n    \n    if match!= None:\n        start = match.start()\n        end = match.end()\n        found_at.append(start)\n        found_at.append(end)\n    # print(length)\n    # print(start)\n    # print(end)\n    \n    # print(found_at)\n    return found_at\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    for idx, match in enumerate(re.finditer(pattern, text)):\n        substring = match.group()\n        start_idx = match.start()\n        end_idx = match.end()\n        \n        if substring:\n            return (substring, start_idx, end_idx)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.finditer(pattern,text)\n    for match in result:\n        return match.group(0),match.span()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print(\"Substring: \", match.group())\n        print(\"From: \", match.start())\n        print(\"To: \", match.end())\n        print(\"Matches: \", match.findall())\n        print(\"Match groups: \", match.groups())\n        print(\"Match span: \", match.span())\n        print(\"Match string: \", match.string)\n    else:\n        print(\"Pattern not found\")\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return_list = []\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            return_list.append((pattern,i,i+len(pattern)-1))\n    return return_list\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = pattern.finditer(text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append(match.span())\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return regex.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        match = re.search(pattern, text)\n        return match.group(), match.start(), match.end()\n    except AttributeError:\n        return None, None, None\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 1\n    bell = 0\n    for i in range(1, n + 1): \n        bell = bell + i \n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return bell_Number(n-1)+bell_Number(n-2)\n    \ndef num_of_iterations(x,a,b,n):\n    '''\n    Write a python function to find number of iterations required to get nth number from x.\n    '''\n    if x<a or x>b:\n        return -1\n    if a>b:\n        return -2\n    if x==a:\n        return n\n    if x==b:\n        return n\n    return num_of_iterations(x,a+1,b,n+1)\n    \ndef binary_search(arr, x, low, high): \n    '''\n    Write a python function to find x in arr[] using binary search.\n    '''\n    if low > high: \n        return -1\n    mid = low + (high - low) // 2\n    if x == arr[mid]: \n        return mid \n    elif x < arr[mid]: \n        return binary_search(arr, x, low, mid - 1) \n    else: \n        return binary_search(arr, x, mid + 1, high) \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = int(n)\n    if n<=0:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        return (bell_Number(n-1) + 2 * bell_Number(n-2))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    #Sum of  1 to n\n    sum = 0\n    for i in range(1, n+1):\n        bell += i\n        sum += i\n        i += 1\n    bell = sum * bell\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    res = 0\n    i = 1\n    while i <= n:\n        res = res + (n / i)\n        i = i + 1\n    return res\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return bell_Number(n-1)+n\n    \ndef factorial(n):\n    '''\n    Write a python function to find nth factorial.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    print(\"bell number is \",n)\n    a = 1\n    b = 1\n    i = 0\n    while(i<n):\n        print(a)\n        temp = b + a \n        a = b\n        b = temp\n        i = i + 1\n        \ndef bell_Number_with_remainder(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    print(\"bell number is \",n)\n    a = 1\n    b = 1\n    i = 0\n    while(i<n):\n        print(a)\n        remainder = b%n\n        temp = b + a\n        b = remainder\n        a = temp\n        i = i + 1\n        \ndef prime_Number(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    #prime number is greater than 1\n    if(n>1):\n        #prime number is less than n\n        for i in range(2,n):\n            if(n%i==0):\n                break\n        else:\n            print(\"prime number\")\n    else:\n        print(\"prime number\")\n        \ndef prime_Number_with_remainder(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    if(n>1):\n        i = 2\n        while(i<n):\n            if(n%i==0):\n                break\n            i = i+1\n        else:\n            print(\"prime number\")\n    else:\n        print(\"prime number\")\n        \ndef prime_Number_with_divisor(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    #prime number is greater than 1\n    if(n>1):\n        #prime number is less than n\n        for i in range(2,n):\n            if(n%i==0):\n                break\n        else:\n            print(\"prime number\")\n    else:\n        print(\"prime number\")\n        \ndef prime_Number_with_remainder_and_divisor(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    #prime number is greater than 1\n    if(n>1):\n        #prime number is less than n\n        for i in range(2,n):\n            if(n%i==0):\n                break\n        else:\n            print(\"prime number\")\n    else:\n        print(\"prime number\")\n        \ndef palindrome_string(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    rev_string = string[::-1]\n    if(string==rev_string):\n        print(\"yes its a palindrome\")\n    else:\n        print(\"no its not a palindrome\")\n        \ndef palindrome_string_with_reversed_string(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    rev_string = string[::-1]\n    if(string==rev_string):\n        print(\"yes its a palindrome\")\n    else:\n        print(\"no its not a palindrome\")\n        \ndef palindrome_string_with_remainder(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    rev_string = string[::-1]\n    if(string==rev_string):\n        print(\"yes its a palindrome\")\n    else:\n        print(\"no its not a palindrome\")\n        \ndef palindrome_string_with_remainder_and_divisor(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    rev_string = string[::-1]\n    if(string==rev_string):\n        print(\"yes its a palindrome\")\n    else:\n        print(\"no its not a palindrome\")\n        \ndef palindrome_string_with_reversed_string_and_divisor(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    rev_string = string[::-1]\n    if(string==rev_string):\n        print(\"yes its a palindrome\")\n    else:\n        print(\"no its not a palindrome\")\n        \ndef palindrome_string_with_reversed_string_and_remainder(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    rev_string = string[::-1]\n    if(string==rev_string):\n        print(\"yes its a palindrome\")\n    else:\n        print(\"no its not a palindrome\")\n        \ndef palindrome_string_with_reversed_string_and_remainder_and_divisor(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    rev_string = string[::-1]\n    if(string==rev_string):\n        print(\"yes its a palindrome\")\n    else:\n        print(\"no its not a palindrome\")\n        \ndef palindrome_string_with_reversed_string_and_remainder_and_divisor_with_remainder_number(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    rev_string = string[::-1]\n    if(string==rev_string):\n        print(\"yes its a palindrome\")\n    else:\n        print(\"no its not a palindrome\")\n        \ndef factorial_of_number(n):\n    '''\n    Write a python function to calculate the factorial of number.\n    '''\n    factorial = 1\n    while(n>0):\n        factorial = factorial*n\n        n = n-1\n    print(\"factorial of number \",n,\"is \",factorial)\n    \ndef factorial_of_number_with_remainder(n):\n    '''\n    Write a python function to calculate the factorial of number.\n    '''\n    factorial = 1\n    remainder = 1\n    while(n>0):\n        factorial = factorial*n\n        n = n-1\n        remainder = remainder*n\n    print(\"factorial of number \",n,\"is \",factorial)\n    print(\"remainder of factorial is \",remainder)\n    \ndef factorial_of_number_with_remainder_and_divisor(n):\n    '''\n    Write a python function to calculate the factorial of number.\n    '''\n    factorial = 1\n    remainder = 1\n    while(n>0):\n        factorial = factorial*n\n        n = n-1\n        remainder = remainder*n\n    print(\"factorial of number \",n,\"is \",factorial)\n    print(\"remainder of factorial is \",remainder)\n    \ndef factorial_of_number_with_remainder_and_divisor_with_remainder_number(n):\n    '''\n    Write a python function to calculate the factorial of number.\n    '''\n    factorial = 1\n    remainder = 1\n    while(n>0):\n        factorial = factorial*n\n        n = n-1\n        remainder = remainder*n\n    print(\"factorial of number \",n,\"is \",factorial)\n    print(\"remainder of factorial is \",remainder)\n    \ndef factorial_of_number_with_remainder_and_divisor_with_remainder_number_with_remainder_number(n):\n    '''\n    Write a python function to calculate the factorial of number.\n    '''\n    factorial = 1\n    remainder = 1\n    while(n>0):\n        factorial = factorial*n\n        n = n-1\n        remainder = remainder*n\n    print(\"factorial of number \",n,\"is \",factorial)\n    print(\"remainder of factorial is \",remainder)\n    print(\"remainder of factorial is \",remainder)\n    \ndef fibo"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0] * (n+1)\n    bell_numbers[0] = bell_numbers[1] = 1\n    for i in range(2, n+1):\n        bell_numbers[i] = bell_numbers[i-1] * (i-1) // i\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1.pop(L)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n    lst = []\n    lst = list1\n    k = L\n    del lst[k-1]\n    return lst\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i == k:\n            continue\n        else:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return list1\n    else:\n        if L > len(list1):\n            return list1\n        else:\n            list1.pop(L)\n            return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(list1)\n    k = L - 1\n    list1.pop(k)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return list1\n    else:\n        if L == 0:\n            return list1[1:]\n        else:\n            return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    new_list = []\n    \n    for i in range(len(test_list)):\n        new_list.append(max(test_list[i]))\n        \n    return new_list[N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    column = []\n    for j in range(len(test_list)):\n        column.append(test_list[j][N])\n    return max(column)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    res = 0\n    \n    for i in range(len(test_list)):\n        res = max(res, test_list[i][N - 1])\n        \n    return res\n    "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # PART 1\n    # calculate the size of the matrix\n    matrix_size = len(test_list)\n    # calculate the size of the list\n    list_size = len(test_list[0])\n    \n    # iterate through the matrix,\n    # and calculate the max of then'th column\n    for i in range(matrix_size):\n        max_list = []\n        for j in range(list_size):\n            max_list.append(test_list[i][j])\n        max_list.sort()\n        test_list[i] = max_list\n    \n    return test_list[N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N >= len(test_list):\n        raise ValueError(f\"N can't be {N}\")\n    for i in test_list:\n        if len(i)!= len(test_list[0]):\n            raise ValueError(\"List is not square\")\n    return max_list(test_list, N)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    out = 0\n    for col in test_list:\n        if out < max(col):\n            out = max(col)\n    return out\n    \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[n] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    assert isinstance(test_list, list), \"Input must be a list\"\n    assert isinstance(N, int) and N > 0, \"Input must be a positive integer\"\n    assert len(test_list) == len(test_list[0]), \"Input must be a list of lists\"\n    assert N <= len(test_list), \"Input must be a list of lists with at least N elements\"\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    matrix = []\n    \n    for i in range(len(test_list)):\n        col = []\n        for j in range(len(test_list)):\n            col.append(test_list[i][j])\n        matrix.append(col)\n        \n    return max(matrix[N-1])\n    \n    \n    "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(max, test_list[:N]))\n    "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #Your code here\n    new_lst = []\n    for item in lst:\n        new_lst.append(item[0])\n        new_lst.append(item[1])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return([lst[0], lst[1]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merge1 = []\n    for i in lst:\n        merge1.append(i[0])\n        merge1.append(i[1])\n    return merge1\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[0][0], lst[0][1]], [lst[1][0], lst[1][1]]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    newList = []\n    for subList in lst:\n        newList.append(subList[0])\n        newList.append(subList[1])\n    return newList\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    d = {}\n    for i in lst:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    return(d)\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Your code here\n    merge = []\n    for i in range(len(lst)):\n        merge.append([lst[i][0], lst[i][1]])\n    return merge"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[0][0],lst[0][1]], [lst[1][0],lst[1][1]]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final_list = []\n    for i in range(len(lst)):\n        final_list.append([lst[i][0], lst[i][1]])\n    return final_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return None\n    cummulative_sum = []\n    cummulative_sum.append(0)\n    for value in test_list:\n        cummulative_sum.append(cummulative_sum[-1] + value)\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result_list = []\n    result_list.append(test_list[0])\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for val in test_list:\n        cum_sum += val\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return_value = 0\n    for index, item in enumerate(test_list):\n        return_value += item\n        if index == 0:\n            continue\n        else:\n            return_value += item\n    return return_value\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    assert len(test_list)>=1, \"The given list can't be empty.\"\n    if not len(test_list)>=1:\n        return None\n    else:\n        temp = []\n        for i in range(len(test_list)):\n            if i == 0:\n                temp.append(test_list[i])\n                print(\"{}\".format(temp))\n            else:\n                temp.append(test_list[i]+temp[i-1])\n                print(\"{}\".format(temp))\n        return temp\ncummulative_sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summ = 0\n    new_list = []\n    for i in range(len(test_list)):\n        summ = summ + test_list[i]\n        new_list.append(summ)\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for element in test_list:\n        cummulative_sum += element\n    return cummulative_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #print(nums)\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(sum(nums[i])/len(nums[i]))\n        #print(new_list)\n    return new_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    total_list = []\n    average_list = []\n    for sublist in nums:\n        total = 0\n        for element in sublist:\n            total += element\n        total = total / len(sublist)\n        total_list.append(total)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    answer = []\n    for x in nums:\n        answer.append(sum(x)/len(x))\n    return tuple(answer)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create a new list\n    new_list = []\n    for i in nums:\n        total = 0\n        # Convert the first and second elements to integers\n        a = int(i[0])\n        b = int(i[1])\n        total = a + b\n        new_list.append(total)\n    return new_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for i in nums:\n        total += sum(i)\n    return total / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum_list = []\n    for i in range(len(nums)):\n        sum_list.append(sum(nums[i]))\n    return tuple(sum_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    \n    # #### SOLUTION 1 (SHORTER)\n    # # we need to add up the numbers\n    # # the total is in the first element of each tuple\n    # # the total for each tuple is in the second element of each tuple\n    # # we want the average to be in the third element of each tuple\n    # total = 0\n    # for num in nums:\n    #     total += num[0]\n    # average = total/len(nums)\n    #\n    # return [ (average,num[1]) for num in nums ]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 2 (FASTER)\n    # for num in nums:\n    #     total += num[0]\n    # average = total/len(nums)\n    # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 3 (FASTER)\n    # # add up the total of each tuple\n    # # for each tuple, multiply the element at the second index (the average)\n    # total = 0\n    # for num in nums:\n    #     total += num[0]\n    # average = total/len(nums)\n    # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 4 (FASTER)\n    # # for each tuple, multiply the element at the second index (the average)\n    # total = 0\n    # for num in nums:\n    #     total += num[0]\n    # average = total/len(nums)\n    # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 5 (FASTER)\n    # # add up the total of each tuple\n    # # we need to multiply by the number of elements\n    # # total = 0\n    # # for num in nums:\n    # #     total += num[0]*num[1]\n    # # average = total/len(nums)\n    # # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 6 (FASTER)\n    # # add up the total of each tuple\n    # # we need to multiply by the number of elements\n    # # total = 0\n    # # for num in nums:\n    # #     total += num[0]*num[1]\n    # # average = total/len(nums)\n    # # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 7 (FASTER)\n    # # add up the total of each tuple\n    # # we need to multiply by the number of elements\n    # # total = 0\n    # # for num in nums:\n    # #     total += num[0]*num[1]\n    # # average = total/len(nums)\n    # # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 8 (FASTER)\n    # # add up the total of each tuple\n    # # we need to multiply by the number of elements\n    # # total = 0\n    # # for num in nums:\n    # #     total += num[0]*num[1]\n    # # average = total/len(nums)\n    # # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 9 (FASTER)\n    # # add up the total of each tuple\n    # # we need to multiply by the number of elements\n    # # total = 0\n    # # for num in nums:\n    # #     total += num[0]*num[1]\n    # # average = total/len(nums)\n    # # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 10 (FASTER)\n    # # add up the total of each tuple\n    # # we need to multiply by the number of elements\n    # # total = 0\n    # # for num in nums:\n    # #     total += num[0]*num[1]\n    # # average = total/len(nums)\n    # # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 11 (FASTER)\n    # # add up the total of each tuple\n    # # we need to multiply by the number of elements\n    # # total = 0\n    # # for num in nums:\n    # #     total += num[0]*num[1]\n    # # average = total/len(nums)\n    # # return [(total, average)]\n    \n    '''\n    The example below should work as expected:\n    average_tuple( ( (1,2), (5,6), (4,5) ) ) returns:\n    [(3.0,4.0), (5.0,6.0), (4.0,5.0)]\n    '''\n    # #### SOLUTION 12 (FASTER)\n    # # add up the total of each tuple\n    # # we need to multiply by the number of elements\n    # # total = 0\n    # # for num in nums:\n    # #     total += num[0]*num"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(sum(i)/len(i))\n    return tuple(new_list)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    lst_tup1 = tuple(test_tup1)\n    lst_tup2 = tuple(test_tup2)\n    lst_tup1 = list(lst_tup1)\n    lst_tup2 = list(lst_tup2)\n    for i in range(len(lst_tup1)):\n        lst_tup1[i] %= lst_tup2[i]\n    return tuple(lst_tup1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1_dict = {i: test_tup1[i] for i in range(len(test_tup1))}\n    test_tup2_dict = {i: test_tup2[i] for i in range(len(test_tup2))}\n    result_dict = {}\n    for key in test_tup1_dict:\n        if key in test_tup2_dict:\n            result_dict[key] = test_tup1_dict[key] % test_tup2_dict[key]\n        else:\n            result_dict[key] = test_tup1_dict[key]\n    return result_dict\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tuple = tuple()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i]%test_tup2[i], )\n    return result_tuple\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result = result + ((test_tup1[i] % test_tup2[i]) * (test_tup1[i] % test_tup2[i]),)\n        return result\n    else:\n        print('Tuples have different length')\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup_len = len(test_tup1)\n    test_tup1 = np.array(test_tup1)\n    test_tup2 = np.array(test_tup2)\n    test_tup1 = test_tup1 % tup_len\n    test_tup2 = test_tup2 % tup_len\n    res_tup = test_tup1 - test_tup2\n    return res_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1])\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    steps = 0\n    while (steps<=d):\n        steps = steps + 1\n        if steps+1 == d:\n            return jumps+1\n        if steps+1 < d:\n            jumps = jumps+1\n        if (steps+1 < d) and (steps-1 > d):\n            if (steps+1 < d) and (steps-1 == d):\n                jumps = jumps + 1\n                return jumps\n            if (steps+1 < d) and (steps-1 < d):\n                jumps = jumps + 1\n                return jumps\n            if (steps+1 < d) and (steps-1 > d):\n                if (steps+1 < d) and (steps-1 == d):\n                    jumps = jumps + 1\n                    return jumps\n                if (steps+1 < d) and (steps-1 > d):\n                    jumps = jumps + 1\n                    return jumps\n                if (steps+1 > d) and (steps-1 == d):\n                    jumps = jumps + 1\n                    return jumps\n                if (steps+1 > d) and (steps-1 > d):\n                    jumps = jumps + 1\n                    return jumps\n                if (steps+1 > d) and (steps-1 < d):\n                    jumps = jumps + 1\n                    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # we can make use of the fact that we can assume that all the points that are within the boundary of the space can be reached from the origin by 2 jumps.\n    # which makes sense as the point (0,0) can be reached from any other point within the boundary.\n    count = 0\n    x_pos, y_pos = 0, 0\n    while x_pos < steps:\n        y_pos += 1\n        if y_pos == d or y_pos == steps - 1:\n            count += 1\n            x_pos = 0\n        else:\n            x_pos += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    # We have to make the lenghts of steps equal\n    if n!= len(d):\n        d = [0] * n\n        steps = [0] * n\n    return helper(n-1, steps, d, 0, 0)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    j = 1\n    while j < steps:\n        d = min(d+1, d-1)\n        j += d\n    return d\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    ans = 1\n    curr_pos = (0,0)\n    visited = set()\n    visited.add(curr_pos)\n    while steps:\n        steps -= 1\n        \n        neighbors = [\n            (curr_pos[0]-1,curr_pos[1]),\n            (curr_pos[0],curr_pos[1]-1),\n            (curr_pos[0]+1,curr_pos[1]),\n            (curr_pos[0],curr_pos[1]+1)\n        ]\n        for neighbor in neighbors:\n            if neighbor in visited:\n                continue\n            if abs(neighbor[0]-curr_pos[0])+abs(neighbor[1]-curr_pos[1]) <= d:\n                curr_pos = neighbor\n                visited.add(curr_pos)\n                ans += 1\n                break\n    return ans\n    "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = 0\n    curr = 0\n    while curr < steps:\n        curr += d\n        n += 1\n    return n\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = steps\n    m = d\n    #Base cases\n    if (n == 0 and m == 0): \n        return 0\n    if (n == 0 and m!= 0): \n        return 1\n    if (n!= 0 and m == 0): \n        return -1\n    \n    #If n is odd, we can move either 1 or 2 steps from 1 -> 2, \n    #    or 1 -> m, i.e. move 1, 2, or m depending on the directions\n    if (n % 2 == 1): \n        return (min_Jumps(n - 1, m) + min_Jumps(n - 2, m)) % 1000000007\n    else: \n        return (min_Jumps(n - 1, m) + min_Jumps(n - 2, d)) % 1000000007\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 0):\n        return 0\n    \n    # dp[i][j] will be the minimum number of jumps required to reach jth step.\n    dp = [[0 for i in range(steps + 1)] for j in range(steps + 1)] \n    \n    # If it is a valid step, then we need atleast 1 jump. \n    for i in range(0, steps + 1): \n        dp[i][i] = 1\n    \n    # We are not allowed to jump from step to step. \n    for i in range(2, steps + 1): \n        dp[i][i] = 0\n    \n    # We are allowed to jump either 1 or 2 steps. \n    for step in range(3, steps + 1): \n        for j in range(1, step): \n            dp[step][j] = min(dp[step][j], dp[step - j - 1][j - 1] + 1) \n    \n    print(dp)\n    return dp[steps][d]\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    cursor = 0\n    while(cursor<steps):\n        if(cursor+d<steps and abs(points[cursor+d][0]-points[cursor][0])<=d and abs(points[cursor+d][1]-points[cursor][1])<=d):\n            cursor += d\n        else:\n            cursor += 1\n        jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #num_steps = 0\n    #while steps < abs(d):\n        #steps +=1\n        #if steps == abs(d):\n            #return num_steps\n        #steps += 1\n        #num_steps += 1\n        #if steps % 2 == 0:\n            #return num_steps\n        #else:\n            #return num_steps - 1\n    #print(steps)\n    count = 0\n    while steps < abs(d):\n        steps += 1\n        if steps == abs(d):\n            count += 1\n            break\n        if steps % 2 == 0:\n            steps += 1\n        else:\n            steps -= 1\n    return count\n"
    }
]